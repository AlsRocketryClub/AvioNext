
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c36c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  0801c640  0801c640  0002c640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ceb0  0801ceb0  0002ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ceb8  0801ceb8  0002ceb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cebc  0801cebc  0002cebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801cec0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000026e0  240002d8  0801d194  000302d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  240029b8  0801d194  000329b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038470  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000619f  00000000  00000000  00068772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ba0  00000000  00000000  0006e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002928  00000000  00000000  000714b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ecda  00000000  00000000  00073de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a1bc  00000000  00000000  000b2aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eb82  00000000  00000000  000ecc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026b7f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d418  00000000  00000000  0026b848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d8 	.word	0x240002d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c624 	.word	0x0801c624

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002dc 	.word	0x240002dc
 800030c:	0801c624 	.word	0x0801c624

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ac4:	f007 fcbe 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2201      	movs	r2, #1
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000ad0:	f00e fa54 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000ad4:	1db9      	adds	r1, r7, #6
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000adc:	f00e fa4e 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ae8:	f007 fcac 	bl	8008444 <HAL_GPIO_WritePin>

}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58020c00 	.word	0x58020c00
 8000af8:	240006bc 	.word	0x240006bc

08000afc <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LG2_Read_Register+0x50>)
 8000b18:	f007 fc94 	bl	8008444 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b1c:	1df9      	adds	r1, r7, #7
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2201      	movs	r2, #1
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LG2_Read_Register+0x54>)
 8000b24:	f00e fa2a 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b28:	f107 010f 	add.w	r1, r7, #15
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <LG2_Read_Register+0x54>)
 8000b32:	f00e fc1f 	bl	800f374 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <LG2_Read_Register+0x50>)
 8000b3e:	f007 fc81 	bl	8008444 <HAL_GPIO_WritePin>

	return reg_value;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58020c00 	.word	0x58020c00
 8000b50:	240006bc 	.word	0x240006bc

08000b54 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LG2_Write_Register+0x48>)
 8000b6c:	f007 fc6a 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b70:	1df9      	adds	r1, r7, #7
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2201      	movs	r2, #1
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <LG2_Write_Register+0x4c>)
 8000b78:	f00e fa00 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b7c:	1db9      	adds	r1, r7, #6
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <LG2_Write_Register+0x4c>)
 8000b84:	f00e f9fa 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <LG2_Write_Register+0x48>)
 8000b90:	f007 fc58 	bl	8008444 <HAL_GPIO_WritePin>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	240006bc 	.word	0x240006bc
 8000ba4:	00000000 	.word	0x00000000

08000ba8 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000bae:	2022      	movs	r0, #34	; 0x22
 8000bb0:	f7ff ffa4 	bl	8000afc <LG2_Read_Register>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bb8:	2023      	movs	r0, #35	; 0x23
 8000bba:	f7ff ff9f 	bl	8000afc <LG2_Read_Register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c08 <LG2_Get_Gyro_X+0x60>
 8000be4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c10 <LG2_Get_Gyro_X+0x68>
 8000bec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	ee07 3a90 	vmov	s15, r3
}
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40218000 	.word	0x40218000
 8000c10:	00000000 	.word	0x00000000
 8000c14:	408f4000 	.word	0x408f4000

08000c18 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c1e:	2024      	movs	r0, #36	; 0x24
 8000c20:	f7ff ff6c 	bl	8000afc <LG2_Read_Register>
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c28:	2025      	movs	r0, #37	; 0x25
 8000c2a:	f7ff ff67 	bl	8000afc <LG2_Read_Register>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000c40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c50:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c78 <LG2_Get_Gyro_Y+0x60>
 8000c54:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c58:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c80 <LG2_Get_Gyro_Y+0x68>
 8000c5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c64:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	ee07 3a90 	vmov	s15, r3
}
 8000c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	40218000 	.word	0x40218000
 8000c80:	00000000 	.word	0x00000000
 8000c84:	408f4000 	.word	0x408f4000

08000c88 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f7ff ff34 	bl	8000afc <LG2_Read_Register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c98:	2027      	movs	r0, #39	; 0x27
 8000c9a:	f7ff ff2f 	bl	8000afc <LG2_Read_Register>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000cb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x60>
 8000cc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cc8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000cf0 <LG2_Get_Gyro_Z+0x68>
 8000ccc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	ee07 3a90 	vmov	s15, r3
}
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	40218000 	.word	0x40218000
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	408f4000 	.word	0x408f4000

08000cf8 <LG2_Get_Acc_X>:

float LG2_Get_Acc_X(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x28);
 8000cfe:	2028      	movs	r0, #40	; 0x28
 8000d00:	f7ff fefc 	bl	8000afc <LG2_Read_Register>
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x29);
 8000d08:	2029      	movs	r0, #41	; 0x29
 8000d0a:	f7ff fef7 	bl	8000afc <LG2_Read_Register>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000)- 0.134732 - 0.104937;
 8000d20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d30:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d68 <LG2_Get_Acc_X+0x70>
 8000d34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d38:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000d70 <LG2_Get_Acc_X+0x78>
 8000d3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d40:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d78 <LG2_Get_Acc_X+0x80>
 8000d44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d48:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d80 <LG2_Get_Acc_X+0x88>
 8000d4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	ee07 3a90 	vmov	s15, r3
}
 8000d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	ba732df5 	.word	0xba732df5
 8000d6c:	3fe3262c 	.word	0x3fe3262c
 8000d70:	00000000 	.word	0x00000000
 8000d74:	408f4000 	.word	0x408f4000
 8000d78:	eedcc20d 	.word	0xeedcc20d
 8000d7c:	3fc13ee5 	.word	0x3fc13ee5
 8000d80:	b723ee1c 	.word	0xb723ee1c
 8000d84:	3fbadd26 	.word	0x3fbadd26

08000d88 <LG2_Get_Acc_Y>:

float LG2_Get_Acc_Y(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2A);
 8000d8e:	202a      	movs	r0, #42	; 0x2a
 8000d90:	f7ff feb4 	bl	8000afc <LG2_Read_Register>
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2B);
 8000d98:	202b      	movs	r0, #43	; 0x2b
 8000d9a:	f7ff feaf 	bl	8000afc <LG2_Read_Register>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000) + 0.384580;
 8000db0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000df0 <LG2_Get_Acc_Y+0x68>
 8000dc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dc8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000df8 <LG2_Get_Acc_Y+0x70>
 8000dcc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dd0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e00 <LG2_Get_Acc_Y+0x78>
 8000dd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ddc:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	ee07 3a90 	vmov	s15, r3
}
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	ba732df5 	.word	0xba732df5
 8000df4:	3fe3262c 	.word	0x3fe3262c
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	408f4000 	.word	0x408f4000
 8000e00:	6eac8605 	.word	0x6eac8605
 8000e04:	3fd89cf5 	.word	0x3fd89cf5

08000e08 <LG2_Get_Acc_Z>:

float LG2_Get_Acc_Z(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2C);
 8000e0e:	202c      	movs	r0, #44	; 0x2c
 8000e10:	f7ff fe74 	bl	8000afc <LG2_Read_Register>
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2D);
 8000e18:	202d      	movs	r0, #45	; 0x2d
 8000e1a:	f7ff fe6f 	bl	8000afc <LG2_Read_Register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000) + 0.005841;
 8000e30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e40:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e70 <LG2_Get_Acc_Z+0x68>
 8000e44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e48:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000e78 <LG2_Get_Acc_Z+0x70>
 8000e4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e50:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e80 <LG2_Get_Acc_Z+0x78>
 8000e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e5c:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	ee07 3a90 	vmov	s15, r3
}
 8000e66:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	ba732df5 	.word	0xba732df5
 8000e74:	3fe3262c 	.word	0x3fe3262c
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	408f4000 	.word	0x408f4000
 8000e80:	7f9d6f11 	.word	0x7f9d6f11
 8000e84:	3f77ecbb 	.word	0x3f77ecbb

08000e88 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000e94:	ed97 7a00 	vldr	s14, [r7]
 8000e98:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000f08 <setServo+0x80>
 8000e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f0c <setServo+0x84>
 8000ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f10 <setServo+0x88>
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb4:	ee17 3a90 	vmov	r3, s15
 8000eb8:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d81a      	bhi.n	8000ef8 <setServo+0x70>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <setServo+0x40>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ed9 	.word	0x08000ed9
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000ef1 	.word	0x08000ef1
		case 1:
			TIM4->CCR4 = timerVal;
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <setServo+0x8c>)
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000ede:	e00c      	b.n	8000efa <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <setServo+0x8c>)
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000ee6:	e008      	b.n	8000efa <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <setServo+0x8c>)
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000eee:	e004      	b.n	8000efa <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <setServo+0x8c>)
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000ef6:	e000      	b.n	8000efa <setServo+0x72>

		default:
			break;
 8000ef8:	bf00      	nop
	}
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	43340000 	.word	0x43340000
 8000f0c:	457a0000 	.word	0x457a0000
 8000f10:	453b8000 	.word	0x453b8000
 8000f14:	40000800 	.word	0x40000800

08000f18 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoRA_Read_Register+0x48>)
 8000f2a:	f007 fa8b 	bl	8008444 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f2e:	1df9      	adds	r1, r7, #7
 8000f30:	2364      	movs	r3, #100	; 0x64
 8000f32:	2201      	movs	r2, #1
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <LoRA_Read_Register+0x4c>)
 8000f36:	f00e f821 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000f3a:	f107 010f 	add.w	r1, r7, #15
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	2201      	movs	r2, #1
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <LoRA_Read_Register+0x4c>)
 8000f44:	f00e fa16 	bl	800f374 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <LoRA_Read_Register+0x48>)
 8000f50:	f007 fa78 	bl	8008444 <HAL_GPIO_WritePin>

	return reg_value;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	58020000 	.word	0x58020000
 8000f64:	24000744 	.word	0x24000744

08000f68 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460a      	mov	r2, r1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoRA_Write_Register+0x54>)
 8000f8a:	f007 fa5b 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f8e:	1df9      	adds	r1, r7, #7
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	2201      	movs	r2, #1
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <LoRA_Write_Register+0x58>)
 8000f96:	f00d fff1 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f9a:	1db9      	adds	r1, r7, #6
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <LoRA_Write_Register+0x58>)
 8000fa2:	f00d ffeb 	bl	800ef7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <LoRA_Write_Register+0x54>)
 8000fae:	f007 fa49 	bl	8008444 <HAL_GPIO_WritePin>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	58020000 	.word	0x58020000
 8000fc0:	24000744 	.word	0x24000744

08000fc4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff ffcc 	bl	8000f68 <LoRA_Write_Register>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	17c8      	asrs	r0, r1, #31
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	1355      	asrs	r5, r2, #13
 8000fe6:	04d4      	lsls	r4, r2, #19
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <LoRA_set_frequency+0x78>)
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	f7ff fba1 	bl	8000738 <__aeabi_uldivmod>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000ffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	0c02      	lsrs	r2, r0, #16
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	b2d3      	uxtb	r3, r2
 8001014:	4619      	mov	r1, r3
 8001016:	2006      	movs	r0, #6
 8001018:	f7ff ffa6 	bl	8000f68 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 800101c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	0a02      	lsrs	r2, r0, #8
 800102a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800102e:	0a0b      	lsrs	r3, r1, #8
 8001030:	b2d3      	uxtb	r3, r2
 8001032:	4619      	mov	r1, r3
 8001034:	2007      	movs	r0, #7
 8001036:	f7ff ff97 	bl	8000f68 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800103a:	7a3b      	ldrb	r3, [r7, #8]
 800103c:	4619      	mov	r1, r3
 800103e:	2008      	movs	r0, #8
 8001040:	f7ff ff92 	bl	8000f68 <LoRA_Write_Register>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bdb0      	pop	{r4, r5, r7, pc}
 800104c:	01e84800 	.word	0x01e84800

08001050 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 800105a:	231b      	movs	r3, #27
 800105c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b78      	cmp	r3, #120	; 0x78
 8001062:	d809      	bhi.n	8001078 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	3b2d      	subs	r3, #45	; 0x2d
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <LoRA_setOCP+0x60>)
 800106a:	fb82 1203 	smull	r1, r2, r2, r3
 800106e:	1052      	asrs	r2, r2, #1
 8001070:	17db      	asrs	r3, r3, #31
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e00b      	b.n	8001090 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2bf0      	cmp	r3, #240	; 0xf0
 800107c:	d808      	bhi.n	8001090 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	331e      	adds	r3, #30
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoRA_setOCP+0x60>)
 8001084:	fb82 1203 	smull	r1, r2, r2, r3
 8001088:	1092      	asrs	r2, r2, #2
 800108a:	17db      	asrs	r3, r3, #31
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	200b      	movs	r0, #11
 80010a2:	f7ff ff61 	bl	8000f68 <LoRA_Write_Register>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	66666667 	.word	0x66666667

080010b4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b11      	cmp	r3, #17
 80010c0:	dd0f      	ble.n	80010e2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b14      	cmp	r3, #20
 80010c6:	dd01      	ble.n	80010cc <LoRA_setTxPower+0x18>
        level = 20;
 80010c8:	2314      	movs	r3, #20
 80010ca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b03      	subs	r3, #3
 80010d0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80010d2:	2187      	movs	r1, #135	; 0x87
 80010d4:	204d      	movs	r0, #77	; 0x4d
 80010d6:	f7ff ff47 	bl	8000f68 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80010da:	208c      	movs	r0, #140	; 0x8c
 80010dc:	f7ff ffb8 	bl	8001050 <LoRA_setOCP>
 80010e0:	e00b      	b.n	80010fa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	dc01      	bgt.n	80010ec <LoRA_setTxPower+0x38>
        level = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80010ec:	2184      	movs	r1, #132	; 0x84
 80010ee:	204d      	movs	r0, #77	; 0x4d
 80010f0:	f7ff ff3a 	bl	8000f68 <LoRA_Write_Register>
      LoRA_setOCP(100);
 80010f4:	2064      	movs	r0, #100	; 0x64
 80010f6:	f7ff ffab 	bl	8001050 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3b02      	subs	r3, #2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	b25b      	sxtb	r3, r3
 8001104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001108:	b25b      	sxtb	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4619      	mov	r1, r3
 800110e:	2009      	movs	r0, #9
 8001110:	f7ff ff2a 	bl	8000f68 <LoRA_Write_Register>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <LoRA_begin>:

void LoRA_explicit_header_mode(){
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
}

void LoRA_begin(long frequency){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	4818      	ldr	r0, [pc, #96]	; (800118c <LoRA_begin+0x70>)
 800112a:	f007 f98b 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	4816      	ldr	r0, [pc, #88]	; (8001190 <LoRA_begin+0x74>)
 8001136:	f007 f985 	bl	8008444 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800113a:	2042      	movs	r0, #66	; 0x42
 800113c:	f7ff feec 	bl	8000f18 <LoRA_Read_Register>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]


	LoRA_sleep();
 8001144:	f7ff ff3e 	bl	8000fc4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <LoRA_begin+0x78>)
 800114a:	f7ff ff43 	bl	8000fd4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	200f      	movs	r0, #15
 8001152:	f7ff ff09 	bl	8000f68 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	200e      	movs	r0, #14
 800115a:	f7ff ff05 	bl	8000f68 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800115e:	200c      	movs	r0, #12
 8001160:	f7ff feda 	bl	8000f18 <LoRA_Read_Register>
 8001164:	4603      	mov	r3, r0
 8001166:	f043 0303 	orr.w	r3, r3, #3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	200c      	movs	r0, #12
 8001170:	f7ff fefa 	bl	8000f68 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001174:	2104      	movs	r1, #4
 8001176:	2026      	movs	r0, #38	; 0x26
 8001178:	f7ff fef6 	bl	8000f68 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 800117c:	2011      	movs	r0, #17
 800117e:	f7ff ff99 	bl	80010b4 <LoRA_setTxPower>

}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58020c00 	.word	0x58020c00
 8001190:	58020000 	.word	0x58020000
 8001194:	33bca100 	.word	0x33bca100

08001198 <multiplyQuat>:

double x[4];
double y[4];
double z[4];

void multiplyQuat(double r[4], double s[4], double*  result) {
 8001198:	b480      	push	{r7}
 800119a:	b08f      	sub	sp, #60	; 0x3c
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  double temp[4];
  temp[0] = r[0] * s[0] - r[1] * s[1] - r[2] * s[2] - r[3] * s[3];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	ed93 6b00 	vldr	d6, [r3]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	ed93 7b00 	vldr	d7, [r3]
 80011b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3308      	adds	r3, #8
 80011b8:	ed93 5b00 	vldr	d5, [r3]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3308      	adds	r3, #8
 80011c0:	ed93 7b00 	vldr	d7, [r3]
 80011c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3310      	adds	r3, #16
 80011d0:	ed93 5b00 	vldr	d5, [r3]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3310      	adds	r3, #16
 80011d8:	ed93 7b00 	vldr	d7, [r3]
 80011dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011e0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3318      	adds	r3, #24
 80011e8:	ed93 5b00 	vldr	d5, [r3]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3318      	adds	r3, #24
 80011f0:	ed93 7b00 	vldr	d7, [r3]
 80011f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011fc:	ed87 7b04 	vstr	d7, [r7, #16]
  temp[1] = r[0] * s[1] + r[1] * s[0] - r[2] * s[3] + r[3] * s[2];
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	ed93 6b00 	vldr	d6, [r3]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3308      	adds	r3, #8
 800120a:	ed93 7b00 	vldr	d7, [r3]
 800120e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3308      	adds	r3, #8
 8001216:	ed93 5b00 	vldr	d5, [r3]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	ed93 7b00 	vldr	d7, [r3]
 8001220:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001224:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3310      	adds	r3, #16
 800122c:	ed93 5b00 	vldr	d5, [r3]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3318      	adds	r3, #24
 8001234:	ed93 7b00 	vldr	d7, [r3]
 8001238:	ee25 7b07 	vmul.f64	d7, d5, d7
 800123c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3318      	adds	r3, #24
 8001244:	ed93 5b00 	vldr	d5, [r3]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	3310      	adds	r3, #16
 800124c:	ed93 7b00 	vldr	d7, [r3]
 8001250:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001254:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001258:	ed87 7b06 	vstr	d7, [r7, #24]
  temp[2] = r[0] * s[2] + r[1] * s[3] + r[2] * s[0] - r[3] * s[1];
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	ed93 6b00 	vldr	d6, [r3]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3310      	adds	r3, #16
 8001266:	ed93 7b00 	vldr	d7, [r3]
 800126a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3308      	adds	r3, #8
 8001272:	ed93 5b00 	vldr	d5, [r3]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3318      	adds	r3, #24
 800127a:	ed93 7b00 	vldr	d7, [r3]
 800127e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001282:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3310      	adds	r3, #16
 800128a:	ed93 5b00 	vldr	d5, [r3]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	ed93 7b00 	vldr	d7, [r3]
 8001294:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001298:	ee36 6b07 	vadd.f64	d6, d6, d7
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3318      	adds	r3, #24
 80012a0:	ed93 5b00 	vldr	d5, [r3]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3308      	adds	r3, #8
 80012a8:	ed93 7b00 	vldr	d7, [r3]
 80012ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012b4:	ed87 7b08 	vstr	d7, [r7, #32]
  temp[3] = r[0] * s[3] - r[1] * s[2] + r[2] * s[1] + r[3] * s[0];
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	ed93 6b00 	vldr	d6, [r3]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3318      	adds	r3, #24
 80012c2:	ed93 7b00 	vldr	d7, [r3]
 80012c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3308      	adds	r3, #8
 80012ce:	ed93 5b00 	vldr	d5, [r3]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3310      	adds	r3, #16
 80012d6:	ed93 7b00 	vldr	d7, [r3]
 80012da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3310      	adds	r3, #16
 80012e6:	ed93 5b00 	vldr	d5, [r3]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3308      	adds	r3, #8
 80012ee:	ed93 7b00 	vldr	d7, [r3]
 80012f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3318      	adds	r3, #24
 80012fe:	ed93 5b00 	vldr	d5, [r3]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	ed93 7b00 	vldr	d7, [r3]
 8001308:	ee25 7b07 	vmul.f64	d7, d5, d7
 800130c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001310:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

  for(int i = 0; i < 4; i++){
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
 8001318:	e00f      	b.n	800133a <multiplyQuat+0x1a2>
	  result[i] = temp[i];
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	18d1      	adds	r1, r2, r3
 8001322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	3338      	adds	r3, #56	; 0x38
 8001328:	443b      	add	r3, r7
 800132a:	3b28      	subs	r3, #40	; 0x28
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0; i < 4; i++){
 8001334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001336:	3301      	adds	r3, #1
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
 800133a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133c:	2b03      	cmp	r3, #3
 800133e:	ddec      	ble.n	800131a <multiplyQuat+0x182>
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	373c      	adds	r7, #60	; 0x3c
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <dotProduct>:

double dotProduct(double a[4], double b[4]){
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	return (a[1] * b[1] + a[2] * b[2] + a[3] * b[3]);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3308      	adds	r3, #8
 800135c:	ed93 6b00 	vldr	d6, [r3]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3308      	adds	r3, #8
 8001364:	ed93 7b00 	vldr	d7, [r3]
 8001368:	ee26 6b07 	vmul.f64	d6, d6, d7
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3310      	adds	r3, #16
 8001370:	ed93 5b00 	vldr	d5, [r3]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3310      	adds	r3, #16
 8001378:	ed93 7b00 	vldr	d7, [r3]
 800137c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001380:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3318      	adds	r3, #24
 8001388:	ed93 5b00 	vldr	d5, [r3]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3318      	adds	r3, #24
 8001390:	ed93 7b00 	vldr	d7, [r3]
 8001394:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001398:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 800139c:	eeb0 0b47 	vmov.f64	d0, d7
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <magnitude>:

double magnitude(double vector[4]){
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	return sqrt(vector[0]*vector[0]+vector[1]*vector[1]+vector[2]*vector[2]+vector[3]*vector[3]);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	ed93 6b00 	vldr	d6, [r3]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	ed93 7b00 	vldr	d7, [r3]
 80013be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3308      	adds	r3, #8
 80013c6:	ed93 5b00 	vldr	d5, [r3]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3308      	adds	r3, #8
 80013ce:	ed93 7b00 	vldr	d7, [r3]
 80013d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3310      	adds	r3, #16
 80013de:	ed93 5b00 	vldr	d5, [r3]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3310      	adds	r3, #16
 80013e6:	ed93 7b00 	vldr	d7, [r3]
 80013ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3318      	adds	r3, #24
 80013f6:	ed93 5b00 	vldr	d5, [r3]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3318      	adds	r3, #24
 80013fe:	ed93 7b00 	vldr	d7, [r3]
 8001402:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001406:	ee36 7b07 	vadd.f64	d7, d6, d7
 800140a:	eeb0 0b47 	vmov.f64	d0, d7
 800140e:	f01a fa0b 	bl	801b828 <sqrt>
 8001412:	eeb0 7b40 	vmov.f64	d7, d0
}
 8001416:	eeb0 0b47 	vmov.f64	d0, d7
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001424:	ed2d 8b02 	vpush	{d8}
 8001428:	f6ad 1d74 	subw	sp, sp, #2420	; 0x974
 800142c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 800142e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001436:	4a52      	ldr	r2, [pc, #328]	; (8001580 <main+0x160>)
 8001438:	461c      	mov	r4, r3
 800143a:	4615      	mov	r5, r2
 800143c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001444:	c403      	stmia	r4!, {r0, r1}
 8001446:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f003 f8cc 	bl	80045e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f001 f878 	bl	8002540 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001450:	f001 f8f2 	bl	8002638 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f001 fe9e 	bl	8003194 <MX_GPIO_Init>
  MX_DMA_Init();
 8001458:	f001 fe3c 	bl	80030d4 <MX_DMA_Init>
  MX_SPI3_Init();
 800145c:	f001 fb72 	bl	8002b44 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001460:	f001 fa02 	bl	8002868 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001464:	f001 fdea 	bl	800303c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001468:	f001 f918 	bl	800269c <MX_ADC1_Init>
  MX_TIM4_Init();
 800146c:	f001 fc7c 	bl	8002d68 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001470:	f001 f98c 	bl	800278c <MX_ADC3_Init>
  MX_SPI2_Init();
 8001474:	f001 fb10 	bl	8002a98 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001478:	f001 fa5a 	bl	8002930 <MX_I2C2_Init>
  MX_TIM2_Init();
 800147c:	f001 fbb8 	bl	8002bf0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001480:	f001 fcee 	bl	8002e60 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001484:	f001 fc0c 	bl	8002ca0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001488:	f015 f85e 	bl	8016548 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800148c:	f001 faae 	bl	80029ec <MX_SPI1_Init>
  MX_UART4_Init();
 8001490:	f001 fd88 	bl	8002fa4 <MX_UART4_Init>
  MX_FATFS_Init();
 8001494:	f012 fdec 	bl	8014070 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001498:	f001 fa8a 	bl	80029b0 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 800149c:	f001 fd3a 	bl	8002f14 <MX_TIM13_Init>
  MX_TIM14_Init();
 80014a0:	f001 fd5c 	bl	8002f5c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f003 f92e 	bl	8004708 <HAL_Delay>
	const int MAX = 50;
 80014ac:	2332      	movs	r3, #50	; 0x32
 80014ae:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
	const double SPEED = 2.0/2000;
 80014b2:	a331      	add	r3, pc, #196	; (adr r3, 8001578 <main+0x158>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f607 1118 	addw	r1, r7, #2328	; 0x918
 80014bc:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 80014cc:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <main+0x164>)
 80014d6:	f607 1108 	addw	r1, r7, #2312	; 0x908
 80014da:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e6:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80014ea:	e9c1 2300 	strd	r2, r3, [r1]




	HAL_Delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f2:	f003 f909 	bl	8004708 <HAL_Delay>
	HG2_Write_Register(0x1B, 0b11011000);
 80014f6:	21d8      	movs	r1, #216	; 0xd8
 80014f8:	201b      	movs	r0, #27
 80014fa:	f7ff fad7 	bl	8000aac <HG2_Write_Register>
	HG2_Write_Register(0x1C, 0b10111111);
 80014fe:	21bf      	movs	r1, #191	; 0xbf
 8001500:	201c      	movs	r0, #28
 8001502:	f7ff fad3 	bl	8000aac <HG2_Write_Register>
	HAL_Delay(200);
 8001506:	20c8      	movs	r0, #200	; 0xc8
 8001508:	f003 f8fe 	bl	8004708 <HAL_Delay>


	LG2_Write_Register(0x13, 0b00001110); //disables I2C - CTRL4_C
 800150c:	210e      	movs	r1, #14
 800150e:	2013      	movs	r0, #19
 8001510:	f7ff fb20 	bl	8000b54 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01100000); //Gyroscope setup - CTRL2_G
 8001514:	2160      	movs	r1, #96	; 0x60
 8001516:	2011      	movs	r0, #17
 8001518:	f7ff fb1c 	bl	8000b54 <LG2_Write_Register>
	LG2_Write_Register(0x10, 0b01100000); //Accelerometer setup - CTRL1_XL
 800151c:	2160      	movs	r1, #96	; 0x60
 800151e:	2010      	movs	r0, #16
 8001520:	f7ff fb18 	bl	8000b54 <LG2_Write_Register>


	float rotZ = 0;
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	f607 02fc 	addw	r2, r7, #2300	; 0x8fc
 800152c:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8

	double calOmegaX = 0;
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8001540:	e9c1 2300 	strd	r2, r3, [r1]
	double calOmegaY = 0;
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8001550:	e9c1 2300 	strd	r2, r3, [r1]
	double calOmegaZ = 0;
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8001560:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(2000);
 8001564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001568:	f003 f8ce 	bl	8004708 <HAL_Delay>
	int GyroCalibLoop = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
	while(GyroCalibLoop < 500){
 8001572:	e041      	b.n	80015f8 <main+0x1d8>
 8001574:	f3af 8000 	nop.w
 8001578:	d2f1a9fc 	.word	0xd2f1a9fc
 800157c:	3f50624d 	.word	0x3f50624d
 8001580:	0801c6c8 	.word	0x0801c6c8
 8001584:	3ff00000 	.word	0x3ff00000
		if(LG2_Read_Register(0x1E) | (1 << 1)){
 8001588:	201e      	movs	r0, #30
 800158a:	f7ff fab7 	bl	8000afc <LG2_Read_Register>
		calOmegaX += LG2_Get_Gyro_X();
 800158e:	f7ff fb0b 	bl	8000ba8 <LG2_Get_Gyro_X>
 8001592:	eef0 7a40 	vmov.f32	s15, s0
 8001596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800159a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800159e:	ed93 6b00 	vldr	d6, [r3]
 80015a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015a6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80015aa:	ed83 7b00 	vstr	d7, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80015ae:	f7ff fb33 	bl	8000c18 <LG2_Get_Gyro_Y>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ba:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80015be:	ed93 6b00 	vldr	d6, [r3]
 80015c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80015ca:	ed83 7b00 	vstr	d7, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80015ce:	f7ff fb5b 	bl	8000c88 <LG2_Get_Gyro_Z>
 80015d2:	eef0 7a40 	vmov.f32	s15, s0
 80015d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015da:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80015de:	ed93 6b00 	vldr	d6, [r3]
 80015e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015e6:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80015ea:	ed83 7b00 	vstr	d7, [r3]
		GyroCalibLoop++;
 80015ee:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80015f2:	3301      	adds	r3, #1
 80015f4:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
	while(GyroCalibLoop < 500){
 80015f8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80015fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001600:	dbc2      	blt.n	8001588 <main+0x168>

		}

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001602:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8001606:	ed93 6b00 	vldr	d6, [r3]
 800160a:	ed9f 5bc1 	vldr	d5, [pc, #772]	; 8001910 <main+0x4f0>
 800160e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001612:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8001616:	ed83 7b00 	vstr	d7, [r3]
	calOmegaY /= 500;
 800161a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800161e:	ed93 6b00 	vldr	d6, [r3]
 8001622:	ed9f 5bbb 	vldr	d5, [pc, #748]	; 8001910 <main+0x4f0>
 8001626:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800162a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800162e:	ed83 7b00 	vstr	d7, [r3]
	calOmegaZ /= 500;
 8001632:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8001636:	ed93 6b00 	vldr	d6, [r3]
 800163a:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 8001910 <main+0x4f0>
 800163e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001642:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8001646:	ed83 7b00 	vstr	d7, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	2101      	movs	r1, #1
 800164e:	48b2      	ldr	r0, [pc, #712]	; (8001918 <main+0x4f8>)
 8001650:	f006 fef8 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001654:	20c8      	movs	r0, #200	; 0xc8
 8001656:	f003 f857 	bl	8004708 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	48ae      	ldr	r0, [pc, #696]	; (8001918 <main+0x4f8>)
 8001660:	f006 fef0 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001664:	20c8      	movs	r0, #200	; 0xc8
 8001666:	f003 f84f 	bl	8004708 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800166a:	2201      	movs	r2, #1
 800166c:	2101      	movs	r1, #1
 800166e:	48aa      	ldr	r0, [pc, #680]	; (8001918 <main+0x4f8>)
 8001670:	f006 fee8 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001674:	20c8      	movs	r0, #200	; 0xc8
 8001676:	f003 f847 	bl	8004708 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2104      	movs	r1, #4
 800167e:	48a7      	ldr	r0, [pc, #668]	; (800191c <main+0x4fc>)
 8001680:	f006 fee0 	bl	8008444 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	2108      	movs	r1, #8
 8001688:	48a4      	ldr	r0, [pc, #656]	; (800191c <main+0x4fc>)
 800168a:	f006 fedb 	bl	8008444 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800168e:	2100      	movs	r1, #0
 8001690:	48a3      	ldr	r0, [pc, #652]	; (8001920 <main+0x500>)
 8001692:	f00e fa15 	bl	800fac0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001696:	2104      	movs	r1, #4
 8001698:	48a1      	ldr	r0, [pc, #644]	; (8001920 <main+0x500>)
 800169a:	f00e fa11 	bl	800fac0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800169e:	2108      	movs	r1, #8
 80016a0:	489f      	ldr	r0, [pc, #636]	; (8001920 <main+0x500>)
 80016a2:	f00e fa0d 	bl	800fac0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80016a6:	210c      	movs	r1, #12
 80016a8:	489d      	ldr	r0, [pc, #628]	; (8001920 <main+0x500>)
 80016aa:	f00e fa09 	bl	800fac0 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80016ae:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001924 <main+0x504>
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fbe8 	bl	8000e88 <setServo>
    setServo(2, 180);
 80016b8:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8001928 <main+0x508>
 80016bc:	2002      	movs	r0, #2
 80016be:	f7ff fbe3 	bl	8000e88 <setServo>
    setServo(3, 0);
 80016c2:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800192c <main+0x50c>
 80016c6:	2003      	movs	r0, #3
 80016c8:	f7ff fbde 	bl	8000e88 <setServo>
    setServo(4, 45);
 80016cc:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8001930 <main+0x510>
 80016d0:	2004      	movs	r0, #4
 80016d2:	f7ff fbd9 	bl	8000e88 <setServo>

    LoRA_begin(868000000);
 80016d6:	4897      	ldr	r0, [pc, #604]	; (8001934 <main+0x514>)
 80016d8:	f7ff fd20 	bl	800111c <LoRA_begin>


	int connected = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
	long last_packet = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 38f0 	str.w	r3, [r7, #2288]	; 0x8f0
	int ARMED = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 80016ee:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80016f2:	f5a3 7458 	sub.w	r4, r3, #864	; 0x360
 80016f6:	4a90      	ldr	r2, [pc, #576]	; (8001938 <main+0x518>)
 80016f8:	4623      	mov	r3, r4
 80016fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80016fc:	c303      	stmia	r3!, {r0, r1}
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	f104 0309 	add.w	r3, r4, #9
 8001704:	2229      	movs	r2, #41	; 0x29
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f015 fc69 	bl	8016fe0 <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
  int packetId;
  char communication_state[50] = "RECIEVING";
 8001714:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001718:	f5a3 6493 	sub.w	r4, r3, #1176	; 0x498
 800171c:	4a87      	ldr	r2, [pc, #540]	; (800193c <main+0x51c>)
 800171e:	4623      	mov	r3, r4
 8001720:	ca07      	ldmia	r2, {r0, r1, r2}
 8001722:	c303      	stmia	r3!, {r0, r1}
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	f104 030a 	add.w	r3, r4, #10
 800172a:	2228      	movs	r2, #40	; 0x28
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f015 fc56 	bl	8016fe0 <memset>
  int isReceived = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4


 x[0] = 0;
 800173a:	4981      	ldr	r1, [pc, #516]	; (8001940 <main+0x520>)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9c1 2300 	strd	r2, r3, [r1]
 x[1] = 1;
 8001748:	497d      	ldr	r1, [pc, #500]	; (8001940 <main+0x520>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <main+0x524>)
 8001750:	e9c1 2302 	strd	r2, r3, [r1, #8]
 x[2] = 0;
 8001754:	497a      	ldr	r1, [pc, #488]	; (8001940 <main+0x520>)
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 x[3] = 0;
 8001762:	4977      	ldr	r1, [pc, #476]	; (8001940 <main+0x520>)
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9c1 2306 	strd	r2, r3, [r1, #24]

 y[0] = 0;
 8001770:	4975      	ldr	r1, [pc, #468]	; (8001948 <main+0x528>)
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9c1 2300 	strd	r2, r3, [r1]
 y[1] = 0;
 800177e:	4972      	ldr	r1, [pc, #456]	; (8001948 <main+0x528>)
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9c1 2302 	strd	r2, r3, [r1, #8]
 y[2] = 1;
 800178c:	496e      	ldr	r1, [pc, #440]	; (8001948 <main+0x528>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <main+0x524>)
 8001794:	e9c1 2304 	strd	r2, r3, [r1, #16]
 y[3] = 0;
 8001798:	496b      	ldr	r1, [pc, #428]	; (8001948 <main+0x528>)
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9c1 2306 	strd	r2, r3, [r1, #24]

 z[0] = 0;
 80017a6:	4969      	ldr	r1, [pc, #420]	; (800194c <main+0x52c>)
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	e9c1 2300 	strd	r2, r3, [r1]
 z[1] = 0;
 80017b4:	4965      	ldr	r1, [pc, #404]	; (800194c <main+0x52c>)
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9c1 2302 	strd	r2, r3, [r1, #8]
 z[2] = 0;
 80017c2:	4962      	ldr	r1, [pc, #392]	; (800194c <main+0x52c>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 z[3] = 1;
 80017d0:	495e      	ldr	r1, [pc, #376]	; (800194c <main+0x52c>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <main+0x524>)
 80017d8:	e9c1 2306 	strd	r2, r3, [r1, #24]

  double rotQuaternion[4];

  HAL_TIM_Base_Start(&htim13);
 80017dc:	485c      	ldr	r0, [pc, #368]	; (8001950 <main+0x530>)
 80017de:	f00e f899 	bl	800f914 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80017e2:	485c      	ldr	r0, [pc, #368]	; (8001954 <main+0x534>)
 80017e4:	f00e f896 	bl	800f914 <HAL_TIM_Base_Start>

  TIM13->CNT = 0;
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <main+0x538>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  double elapsedTime = 0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80017fa:	e9c1 2300 	strd	r2, r3, [r1]
  int counter = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950

  double VelocityExt[3];
  double PosExt[3];
  double zeroAcc[4];
  int AccCalibLoop = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
	char data_gyro[500];
  double gyroZ = LG2_Get_Acc_Z();
 800180a:	f7ff fafd 	bl	8000e08 <LG2_Get_Acc_Z>
 800180e:	eef0 7a40 	vmov.f32	s15, s0
 8001812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001816:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800181a:	ed83 7b00 	vstr	d7, [r3]
  sprintf( data_gyro, "Hello %f\n", gyroZ);
 800181e:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8001822:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	494c      	ldr	r1, [pc, #304]	; (800195c <main+0x53c>)
 800182c:	f016 fa2e 	bl	8017c8c <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001830:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fd6b 	bl	8000310 <strlen>
 800183a:	4602      	mov	r2, r0
 800183c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f014 ff40 	bl	80166c8 <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800184c:	f002 ff5c 	bl	8004708 <HAL_Delay>
  double maxZ = LG2_Get_Acc_Z();
 8001850:	f7ff fada 	bl	8000e08 <LG2_Get_Acc_Z>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
 8001858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800185c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001860:	ed83 7b00 	vstr	d7, [r3]
  double minZ = maxZ;
 8001864:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 8001870:	e9c1 2300 	strd	r2, r3, [r1]

  double maxY = LG2_Get_Acc_Y();
 8001874:	f7ff fa88 	bl	8000d88 <LG2_Get_Acc_Y>
 8001878:	eef0 7a40 	vmov.f32	s15, s0
 800187c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001880:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8001884:	ed83 7b00 	vstr	d7, [r3]
  double minY = maxY;
 8001888:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8001894:	e9c1 2300 	strd	r2, r3, [r1]

  double maxX = LG2_Get_Acc_X();
 8001898:	f7ff fa2e 	bl	8000cf8 <LG2_Get_Acc_X>
 800189c:	eef0 7a40 	vmov.f32	s15, s0
 80018a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018a4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80018a8:	ed83 7b00 	vstr	d7, [r3]
  double minX = maxX;
 80018ac:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]


  zeroAcc[0] = 0;
 80018bc:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80018c0:	f5a3 61a1 	sub.w	r1, r3, #1288	; 0x508
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
  zeroAcc[1] = 0;
 80018d0:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80018d4:	f5a3 61a1 	sub.w	r1, r3, #1288	; 0x508
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  zeroAcc[2] = 0;
 80018e4:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80018e8:	f5a3 61a1 	sub.w	r1, r3, #1288	; 0x508
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
  zeroAcc[3] = 0;
 80018f8:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80018fc:	f5a3 61a1 	sub.w	r1, r3, #1288	; 0x508
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 2306 	strd	r2, r3, [r1, #24]
  while(AccCalibLoop < 50){
 800190c:	e071      	b.n	80019f2 <main+0x5d2>
 800190e:	bf00      	nop
 8001910:	00000000 	.word	0x00000000
 8001914:	407f4000 	.word	0x407f4000
 8001918:	58020c00 	.word	0x58020c00
 800191c:	58021800 	.word	0x58021800
 8001920:	24000864 	.word	0x24000864
 8001924:	42b40000 	.word	0x42b40000
 8001928:	43340000 	.word	0x43340000
 800192c:	00000000 	.word	0x00000000
 8001930:	42340000 	.word	0x42340000
 8001934:	33bca100 	.word	0x33bca100
 8001938:	0801c6e4 	.word	0x0801c6e4
 800193c:	0801c718 	.word	0x0801c718
 8001940:	24000d18 	.word	0x24000d18
 8001944:	3ff00000 	.word	0x3ff00000
 8001948:	24000d38 	.word	0x24000d38
 800194c:	24000d58 	.word	0x24000d58
 8001950:	240008fc 	.word	0x240008fc
 8001954:	24000948 	.word	0x24000948
 8001958:	40001c00 	.word	0x40001c00
 800195c:	0801c654 	.word	0x0801c654
	  if(LG2_Read_Register(0x1E) & 1){
 8001960:	201e      	movs	r0, #30
 8001962:	f7ff f8cb 	bl	8000afc <LG2_Read_Register>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d040      	beq.n	80019f2 <main+0x5d2>
		  zeroAcc[1] += LG2_Get_Acc_X();
 8001970:	f7ff f9c2 	bl	8000cf8 <LG2_Get_Acc_X>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
 8001978:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800197c:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001980:	ed93 6b02 	vldr	d6, [r3, #8]
 8001984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001990:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001994:	ed83 7b02 	vstr	d7, [r3, #8]
		  zeroAcc[2] += LG2_Get_Acc_Y();
 8001998:	f7ff f9f6 	bl	8000d88 <LG2_Get_Acc_Y>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80019a4:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80019a8:	ed93 6b04 	vldr	d6, [r3, #16]
 80019ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019b4:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80019b8:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80019bc:	ed83 7b04 	vstr	d7, [r3, #16]
		  zeroAcc[3] += LG2_Get_Acc_Z();
 80019c0:	f7ff fa22 	bl	8000e08 <LG2_Get_Acc_Z>
 80019c4:	eef0 7a40 	vmov.f32	s15, s0
 80019c8:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80019cc:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80019d0:	ed93 6b06 	vldr	d6, [r3, #24]
 80019d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019dc:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80019e0:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80019e4:	ed83 7b06 	vstr	d7, [r3, #24]
		  AccCalibLoop++;
 80019e8:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80019ec:	3301      	adds	r3, #1
 80019ee:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  while(AccCalibLoop < 50){
 80019f2:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80019f6:	2b31      	cmp	r3, #49	; 0x31
 80019f8:	ddb2      	ble.n	8001960 <main+0x540>
	  }
  }
  zeroAcc[1] = zeroAcc[1] / 50;
 80019fa:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80019fe:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a02:	ed93 6b02 	vldr	d6, [r3, #8]
 8001a06:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8001da8 <main+0x988>
 8001a0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a12:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a16:	ed83 7b02 	vstr	d7, [r3, #8]
  zeroAcc[2] = zeroAcc[2] / 50;
 8001a1a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a1e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a22:	ed93 6b04 	vldr	d6, [r3, #16]
 8001a26:	ed9f 5be0 	vldr	d5, [pc, #896]	; 8001da8 <main+0x988>
 8001a2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a2e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a32:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a36:	ed83 7b04 	vstr	d7, [r3, #16]
  zeroAcc[3] = zeroAcc[3] / 50;
 8001a3a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a3e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a42:	ed93 6b06 	vldr	d6, [r3, #24]
 8001a46:	ed9f 5bd8 	vldr	d5, [pc, #864]	; 8001da8 <main+0x988>
 8001a4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a4e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a52:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a56:	ed83 7b06 	vstr	d7, [r3, #24]


  double rotVector[4];
  rotVector[0] = 0;
 8001a5a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a5e:	f5a3 61e4 	sub.w	r1, r3, #1824	; 0x720
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
  rotVector[3] = 0;
 8001a6e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a72:	f5a3 61e4 	sub.w	r1, r3, #1824	; 0x720
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9c1 2306 	strd	r2, r3, [r1, #24]

  rotVector[1] = zeroAcc[2];
 8001a82:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a86:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001a8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a8e:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8001a92:	f5a1 61e4 	sub.w	r1, r1, #1824	; 0x720
 8001a96:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rotVector[2] = -zeroAcc[1];
 8001a9a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001a9e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001aa2:	ed93 7b02 	vldr	d7, [r3, #8]
 8001aa6:	eeb1 7b47 	vneg.f64	d7, d7
 8001aaa:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001aae:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001ab2:	ed83 7b04 	vstr	d7, [r3, #16]
  double rotVectMag =  magnitude(rotVector);
 8001ab6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc75 	bl	80013aa <magnitude>
 8001ac0:	f607 0398 	addw	r3, r7, #2200	; 0x898
 8001ac4:	ed83 0b00 	vstr	d0, [r3]
  rotVector[1] = rotVector[1] / rotVectMag;
 8001ac8:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001acc:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001ad0:	ed93 5b02 	vldr	d5, [r3, #8]
 8001ad4:	f607 0398 	addw	r3, r7, #2200	; 0x898
 8001ad8:	ed93 6b00 	vldr	d6, [r3]
 8001adc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ae0:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001ae4:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001ae8:	ed83 7b02 	vstr	d7, [r3, #8]
  rotVector[2] = rotVector[2] / rotVectMag;
 8001aec:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001af0:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001af4:	ed93 5b04 	vldr	d5, [r3, #16]
 8001af8:	f607 0398 	addw	r3, r7, #2200	; 0x898
 8001afc:	ed93 6b00 	vldr	d6, [r3]
 8001b00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b04:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b08:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001b0c:	ed83 7b04 	vstr	d7, [r3, #16]

  double zeroAccMag = magnitude(zeroAcc);
 8001b10:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fc48 	bl	80013aa <magnitude>
 8001b1a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8001b1e:	ed83 0b00 	vstr	d0, [r3]
  zeroAcc[1] = zeroAcc[1] / zeroAccMag;
 8001b22:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b26:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001b2a:	ed93 5b02 	vldr	d5, [r3, #8]
 8001b2e:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8001b32:	ed93 6b00 	vldr	d6, [r3]
 8001b36:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b3a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b3e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001b42:	ed83 7b02 	vstr	d7, [r3, #8]
  zeroAcc[2] = zeroAcc[2] / zeroAccMag;
 8001b46:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b4a:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001b4e:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b52:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8001b56:	ed93 6b00 	vldr	d6, [r3]
 8001b5a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b5e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b62:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001b66:	ed83 7b04 	vstr	d7, [r3, #16]
  zeroAcc[3] = zeroAcc[3] / zeroAccMag;
 8001b6a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b6e:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001b72:	ed93 5b06 	vldr	d5, [r3, #24]
 8001b76:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8001b7a:	ed93 6b00 	vldr	d6, [r3]
 8001b7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b82:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001b86:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001b8a:	ed83 7b06 	vstr	d7, [r3, #24]

  double rotAngle =acos(dotProduct(zeroAcc, z));
 8001b8e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001b92:	4987      	ldr	r1, [pc, #540]	; (8001db0 <main+0x990>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fbda 	bl	800134e <dotProduct>
 8001b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba2:	f019 fe15 	bl	801b7d0 <acos>
 8001ba6:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8001baa:	ed83 0b00 	vstr	d0, [r3]

  rotQuaternion[0] = cos(rotAngle/2);
 8001bae:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001bba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001bbe:	eeb0 0b46 	vmov.f64	d0, d6
 8001bc2:	f019 fd6d 	bl	801b6a0 <cos>
 8001bc6:	eeb0 7b40 	vmov.f64	d7, d0
 8001bca:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001bce:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001bd2:	ed83 7b00 	vstr	d7, [r3]
  rotQuaternion[1] = rotVector[1] * sin(rotAngle/2);
 8001bd6:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001bda:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001bde:	ed93 8b02 	vldr	d8, [r3, #8]
 8001be2:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8001be6:	ed93 7b00 	vldr	d7, [r3]
 8001bea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001bee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001bf2:	eeb0 0b46 	vmov.f64	d0, d6
 8001bf6:	f019 fd9f 	bl	801b738 <sin>
 8001bfa:	eeb0 7b40 	vmov.f64	d7, d0
 8001bfe:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c02:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c06:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001c0a:	ed83 7b02 	vstr	d7, [r3, #8]
  rotQuaternion[2] = rotVector[2] * sin(rotAngle/2);
 8001c0e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c12:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001c16:	ed93 8b04 	vldr	d8, [r3, #16]
 8001c1a:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8001c1e:	ed93 7b00 	vldr	d7, [r3]
 8001c22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c26:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c2a:	eeb0 0b46 	vmov.f64	d0, d6
 8001c2e:	f019 fd83 	bl	801b738 <sin>
 8001c32:	eeb0 7b40 	vmov.f64	d7, d0
 8001c36:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c3a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c3e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001c42:	ed83 7b04 	vstr	d7, [r3, #16]
  rotQuaternion[3] = rotVector[3] * sin(rotAngle/2);
 8001c46:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c4a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8001c4e:	ed93 8b06 	vldr	d8, [r3, #24]
 8001c52:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c5e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c62:	eeb0 0b46 	vmov.f64	d0, d6
 8001c66:	f019 fd67 	bl	801b738 <sin>
 8001c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c6e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c72:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c76:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001c7a:	ed83 7b06 	vstr	d7, [r3, #24]
  sprintf( data_gyro, "rot quat: %f, %f, %f, %f\n",rotQuaternion[0], rotQuaternion[1], rotQuaternion[2], rotQuaternion[3]);
 8001c7e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c82:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001c86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001c8a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001c8e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001c92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c96:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8001c9a:	f5a1 6197 	sub.w	r1, r1, #1208	; 0x4b8
 8001c9e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001ca2:	f607 1458 	addw	r4, r7, #2392	; 0x958
 8001ca6:	f5a4 6497 	sub.w	r4, r4, #1208	; 0x4b8
 8001caa:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001cae:	f507 7617 	add.w	r6, r7, #604	; 0x25c
 8001cb2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cba:	e9cd 2300 	strd	r2, r3, [sp]
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	493c      	ldr	r1, [pc, #240]	; (8001db4 <main+0x994>)
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f015 ffe1 	bl	8017c8c <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001cca:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fb1e 	bl	8000310 <strlen>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f014 fcf3 	bl	80166c8 <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ce6:	f002 fd0f 	bl	8004708 <HAL_Delay>
  sprintf( data_gyro, "Zero Acc: %f, %f, %f, %f\n",rotAngle, zeroAcc[1], zeroAcc[2], zeroAcc[3]);
 8001cea:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001cee:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8001cf2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cf6:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8001cfa:	f5a1 61a1 	sub.w	r1, r1, #1288	; 0x508
 8001cfe:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001d02:	f607 1458 	addw	r4, r7, #2392	; 0x958
 8001d06:	f5a4 64a1 	sub.w	r4, r4, #1288	; 0x508
 8001d0a:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001d0e:	f507 7617 	add.w	r6, r7, #604	; 0x25c
 8001d12:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d1a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d1e:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	4924      	ldr	r1, [pc, #144]	; (8001db8 <main+0x998>)
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f015 ffaf 	bl	8017c8c <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001d2e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe faec 	bl	8000310 <strlen>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f014 fcc1 	bl	80166c8 <CDC_Transmit_HS>

  multiplyQuat(rotQuaternion, x, &x);
 8001d46:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <main+0x99c>)
 8001d4c:	491b      	ldr	r1, [pc, #108]	; (8001dbc <main+0x99c>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa22 	bl	8001198 <multiplyQuat>
  multiplyQuat(rotQuaternion, y, &y);
 8001d54:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <main+0x9a0>)
 8001d5a:	4919      	ldr	r1, [pc, #100]	; (8001dc0 <main+0x9a0>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fa1b 	bl	8001198 <multiplyQuat>
  multiplyQuat(rotQuaternion, z, &z);
 8001d62:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <main+0x990>)
 8001d68:	4911      	ldr	r1, [pc, #68]	; (8001db0 <main+0x990>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa14 	bl	8001198 <multiplyQuat>
  rotQuaternion[1] = - rotQuaternion[1];
 8001d70:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001d74:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001d78:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d7c:	eeb1 7b47 	vneg.f64	d7, d7
 8001d80:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001d84:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001d88:	ed83 7b02 	vstr	d7, [r3, #8]
  rotQuaternion[2] = - rotQuaternion[2];
 8001d8c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001d90:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001d94:	ed93 7b04 	vldr	d7, [r3, #16]
 8001d98:	eeb1 7b47 	vneg.f64	d7, d7
 8001d9c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001da0:	e010      	b.n	8001dc4 <main+0x9a4>
 8001da2:	bf00      	nop
 8001da4:	f3af 8000 	nop.w
 8001da8:	00000000 	.word	0x00000000
 8001dac:	40490000 	.word	0x40490000
 8001db0:	24000d58 	.word	0x24000d58
 8001db4:	0801c660 	.word	0x0801c660
 8001db8:	0801c67c 	.word	0x0801c67c
 8001dbc:	24000d18 	.word	0x24000d18
 8001dc0:	24000d38 	.word	0x24000d38
 8001dc4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001dc8:	ed83 7b04 	vstr	d7, [r3, #16]
  rotQuaternion[3] = - rotQuaternion[3];
 8001dcc:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001dd0:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001dd4:	ed93 7b06 	vldr	d7, [r3, #24]
 8001dd8:	eeb1 7b47 	vneg.f64	d7, d7
 8001ddc:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001de0:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001de4:	ed83 7b06 	vstr	d7, [r3, #24]
  multiplyQuat(x, rotQuaternion, &x);
 8001de8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <main+0xa3c>)
 8001dee:	4619      	mov	r1, r3
 8001df0:	481a      	ldr	r0, [pc, #104]	; (8001e5c <main+0xa3c>)
 8001df2:	f7ff f9d1 	bl	8001198 <multiplyQuat>
  multiplyQuat(y, rotQuaternion, &y);
 8001df6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <main+0xa40>)
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <main+0xa40>)
 8001e00:	f7ff f9ca 	bl	8001198 <multiplyQuat>
  multiplyQuat(z, rotQuaternion, &z);
 8001e04:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001e08:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <main+0xa44>)
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4815      	ldr	r0, [pc, #84]	; (8001e64 <main+0xa44>)
 8001e0e:	f7ff f9c3 	bl	8001198 <multiplyQuat>

  sprintf( data_gyro, "zero z: %f, %f, %f\n",z[1], z[2], z[3]);
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <main+0xa44>)
 8001e14:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <main+0xa44>)
 8001e1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e1e:	4911      	ldr	r1, [pc, #68]	; (8001e64 <main+0xa44>)
 8001e20:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001e24:	f507 7617 	add.w	r6, r7, #604	; 0x25c
 8001e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8001e30:	4622      	mov	r2, r4
 8001e32:	462b      	mov	r3, r5
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <main+0xa48>)
 8001e36:	4630      	mov	r0, r6
 8001e38:	f015 ff28 	bl	8017c8c <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001e3c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fa65 	bl	8000310 <strlen>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f014 fc3a 	bl	80166c8 <CDC_Transmit_HS>


  for(int i = 0; i < 3; i++){
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8001e5a:	e028      	b.n	8001eae <main+0xa8e>
 8001e5c:	24000d18 	.word	0x24000d18
 8001e60:	24000d38 	.word	0x24000d38
 8001e64:	24000d58 	.word	0x24000d58
 8001e68:	0801c698 	.word	0x0801c698
	  VelocityExt[i] = 0;
 8001e6c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001e70:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 8001e74:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	18d1      	adds	r1, r2, r3
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9c1 2300 	strd	r2, r3, [r1]
	  PosExt[i] = 0;
 8001e88:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8001e8c:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8001e90:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	18d1      	adds	r1, r2, r3
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0; i < 3; i++){
 8001ea4:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8001eae:	f8d7 392c 	ldr.w	r3, [r7, #2348]	; 0x92c
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	ddda      	ble.n	8001e6c <main+0xa4c>
  }

  uint32_t timeStop = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 3928 	str.w	r3, [r7, #2344]	; 0x928
  int accelerating = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
  while(1){
	  float Gx;
	  float Gy;
	  float Gz;

	  if(LG2_Read_Register(0x1E) & (1 << 1)){ //checks if new data from gyroscope
 8001ec2:	201e      	movs	r0, #30
 8001ec4:	f7fe fe1a 	bl	8000afc <LG2_Read_Register>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8175 	beq.w	80021be <main+0xd9e>
		  elapsedTime = (TIM13->CNT /1000);
 8001ed4:	4bf0      	ldr	r3, [pc, #960]	; (8002298 <main+0xe78>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	4af0      	ldr	r2, [pc, #960]	; (800229c <main+0xe7c>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ee8:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8001eec:	ed83 7b00 	vstr	d7, [r3]
		  TIM13->CNT = 0;
 8001ef0:	4be9      	ldr	r3, [pc, #932]	; (8002298 <main+0xe78>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
		  Gx = LG2_Get_Gyro_X();
 8001ef6:	f7fe fe57 	bl	8000ba8 <LG2_Get_Gyro_X>
 8001efa:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8001efe:	ed83 0a00 	vstr	s0, [r3]
		  Gy= LG2_Get_Gyro_Y();
 8001f02:	f7fe fe89 	bl	8000c18 <LG2_Get_Gyro_Y>
 8001f06:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f0a:	ed83 0a00 	vstr	s0, [r3]
		  Gz = LG2_Get_Gyro_Z();
 8001f0e:	f7fe febb 	bl	8000c88 <LG2_Get_Gyro_Z>
 8001f12:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001f16:	ed83 0a00 	vstr	s0, [r3]

		  double Wx = (Gx - calOmegaX) * (2 * PI / 360000) * elapsedTime;
 8001f1a:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f26:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8001f2a:	ed93 7b00 	vldr	d7, [r3]
 8001f2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f32:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8002288 <main+0xe68>
 8001f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f3a:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8001f3e:	ed93 6b00 	vldr	d6, [r3]
 8001f42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f46:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8001f4a:	ed83 7b00 	vstr	d7, [r3]
		  double Wy = (Gy- calOmegaY) * (2 * PI / 360000) * elapsedTime;
 8001f4e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f5a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8001f5e:	ed93 7b00 	vldr	d7, [r3]
 8001f62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f66:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8002288 <main+0xe68>
 8001f6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f6e:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8001f72:	ed93 6b00 	vldr	d6, [r3]
 8001f76:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f7a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8001f7e:	ed83 7b00 	vstr	d7, [r3]
		  double Wz = (Gz - calOmegaZ) * (2 * PI / 360000) * elapsedTime;
 8001f82:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f8e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8001f92:	ed93 7b00 	vldr	d7, [r3]
 8001f96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f9a:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002288 <main+0xe68>
 8001f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fa2:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8001fa6:	ed93 6b00 	vldr	d6, [r3]
 8001faa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001fae:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001fb2:	ed83 7b00 	vstr	d7, [r3]

		  double W = sqrt(Wx*Wx + Wy*Wy + Wz*Wz);
 8001fb6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8001fba:	ed93 7b00 	vldr	d7, [r3]
 8001fbe:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001fc2:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8001fc6:	ed93 7b00 	vldr	d7, [r3]
 8001fca:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001fce:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fd2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001fd6:	ed93 7b00 	vldr	d7, [r3]
 8001fda:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001fde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fe2:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fec:	f019 fc1c 	bl	801b828 <sqrt>
 8001ff0:	ed84 0b00 	vstr	d0, [r4]

		  Wx /= W;
 8001ff4:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001ff8:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8001ffc:	ed92 5b00 	vldr	d5, [r2]
 8002000:	ed93 6b00 	vldr	d6, [r3]
 8002004:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002008:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800200c:	ed83 7b00 	vstr	d7, [r3]
		  Wy /= W;
 8002010:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002014:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002018:	ed92 5b00 	vldr	d5, [r2]
 800201c:	ed93 6b00 	vldr	d6, [r3]
 8002020:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002024:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002028:	ed83 7b00 	vstr	d7, [r3]
		  Wz /= W;
 800202c:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002030:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8002034:	ed92 5b00 	vldr	d5, [r2]
 8002038:	ed93 6b00 	vldr	d6, [r3]
 800203c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002040:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8002044:	ed83 7b00 	vstr	d7, [r3]

		  rotQuaternion[0] = cos(W/2);
 8002048:	f607 0358 	addw	r3, r7, #2136	; 0x858
 800204c:	ed93 7b00 	vldr	d7, [r3]
 8002050:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002054:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002058:	eeb0 0b46 	vmov.f64	d0, d6
 800205c:	f019 fb20 	bl	801b6a0 <cos>
 8002060:	eeb0 7b40 	vmov.f64	d7, d0
 8002064:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002068:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800206c:	ed83 7b00 	vstr	d7, [r3]
		  rotQuaternion[1] = Wx * sin(W/2);
 8002070:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002074:	ed93 7b00 	vldr	d7, [r3]
 8002078:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800207c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002080:	eeb0 0b46 	vmov.f64	d0, d6
 8002084:	f019 fb58 	bl	801b738 <sin>
 8002088:	eeb0 6b40 	vmov.f64	d6, d0
 800208c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8002090:	ed93 7b00 	vldr	d7, [r3]
 8002094:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002098:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800209c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80020a0:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = Wy * sin(W/2);
 80020a4:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80020a8:	ed93 7b00 	vldr	d7, [r3]
 80020ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80020b0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80020b4:	eeb0 0b46 	vmov.f64	d0, d6
 80020b8:	f019 fb3e 	bl	801b738 <sin>
 80020bc:	eeb0 6b40 	vmov.f64	d6, d0
 80020c0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80020c4:	ed93 7b00 	vldr	d7, [r3]
 80020c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020cc:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80020d0:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80020d4:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = Wz * sin(W/2);
 80020d8:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80020dc:	ed93 7b00 	vldr	d7, [r3]
 80020e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80020e4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80020e8:	eeb0 0b46 	vmov.f64	d0, d6
 80020ec:	f019 fb24 	bl	801b738 <sin>
 80020f0:	eeb0 6b40 	vmov.f64	d6, d0
 80020f4:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80020f8:	ed93 7b00 	vldr	d7, [r3]
 80020fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002100:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002104:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8002108:	ed83 7b06 	vstr	d7, [r3, #24]

		  multiplyQuat(rotQuaternion, x, &x);
 800210c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8002110:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <main+0xe80>)
 8002112:	4963      	ldr	r1, [pc, #396]	; (80022a0 <main+0xe80>)
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff f83f 	bl	8001198 <multiplyQuat>
		  multiplyQuat(rotQuaternion, y, &y);
 800211a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800211e:	4a61      	ldr	r2, [pc, #388]	; (80022a4 <main+0xe84>)
 8002120:	4960      	ldr	r1, [pc, #384]	; (80022a4 <main+0xe84>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f838 	bl	8001198 <multiplyQuat>
		  multiplyQuat(rotQuaternion, z, &z);
 8002128:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800212c:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <main+0xe88>)
 800212e:	495e      	ldr	r1, [pc, #376]	; (80022a8 <main+0xe88>)
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f831 	bl	8001198 <multiplyQuat>
		  rotQuaternion[1] = - rotQuaternion[1];
 8002136:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800213a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800213e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002142:	eeb1 7b47 	vneg.f64	d7, d7
 8002146:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800214a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800214e:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = - rotQuaternion[2];
 8002152:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002156:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800215a:	ed93 7b04 	vldr	d7, [r3, #16]
 800215e:	eeb1 7b47 	vneg.f64	d7, d7
 8002162:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002166:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800216a:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = - rotQuaternion[3];
 800216e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002172:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8002176:	ed93 7b06 	vldr	d7, [r3, #24]
 800217a:	eeb1 7b47 	vneg.f64	d7, d7
 800217e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002182:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8002186:	ed83 7b06 	vstr	d7, [r3, #24]
		  multiplyQuat(x, rotQuaternion, &x);
 800218a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800218e:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <main+0xe80>)
 8002190:	4619      	mov	r1, r3
 8002192:	4843      	ldr	r0, [pc, #268]	; (80022a0 <main+0xe80>)
 8002194:	f7ff f800 	bl	8001198 <multiplyQuat>
		  multiplyQuat(y, rotQuaternion, &y);
 8002198:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800219c:	4a41      	ldr	r2, [pc, #260]	; (80022a4 <main+0xe84>)
 800219e:	4619      	mov	r1, r3
 80021a0:	4840      	ldr	r0, [pc, #256]	; (80022a4 <main+0xe84>)
 80021a2:	f7fe fff9 	bl	8001198 <multiplyQuat>
		  multiplyQuat(z, rotQuaternion, &z);
 80021a6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <main+0xe88>)
 80021ac:	4619      	mov	r1, r3
 80021ae:	483e      	ldr	r0, [pc, #248]	; (80022a8 <main+0xe88>)
 80021b0:	f7fe fff2 	bl	8001198 <multiplyQuat>
		  	  counter++;
 80021b4:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80021b8:	3301      	adds	r3, #1
 80021ba:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950


	  }

  double SensorAcc[4];
  SensorAcc[0] = 0;
 80021be:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80021c2:	f6a3 1158 	subw	r1, r3, #2392	; 0x958
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]

  double AccExt[4];
  AccExt[0] = 0;
 80021d2:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80021d6:	f6a3 1138 	subw	r1, r3, #2360	; 0x938
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9c1 2300 	strd	r2, r3, [r1]


  if(LG2_Read_Register(0x1E) & 1){ //checks if new data from accelerometer
 80021e6:	201e      	movs	r0, #30
 80021e8:	f7fe fc88 	bl	8000afc <LG2_Read_Register>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8165 	beq.w	80024c2 <main+0x10a2>
	  double elapsedTime = (TIM14->CNT / 1000.0);
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <main+0xe8c>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002204:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002208:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002290 <main+0xe70>
 800220c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002210:	ed03 7b02 	vstr	d7, [r3, #-8]
	  TIM14->CNT = 0;
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <main+0xe8c>)
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
	  counter++;
 800221a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800221e:	3301      	adds	r3, #1
 8002220:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950

	  SensorAcc[1] = LG2_Get_Acc_X();
 8002224:	f7fe fd68 	bl	8000cf8 <LG2_Get_Acc_X>
 8002228:	eef0 7a40 	vmov.f32	s15, s0
 800222c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002230:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002234:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 8002238:	ed83 7b02 	vstr	d7, [r3, #8]
	  SensorAcc[2] = LG2_Get_Acc_Y();
 800223c:	f7fe fda4 	bl	8000d88 <LG2_Get_Acc_Y>
 8002240:	eef0 7a40 	vmov.f32	s15, s0
 8002244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002248:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800224c:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 8002250:	ed83 7b04 	vstr	d7, [r3, #16]
	  SensorAcc[3] = LG2_Get_Acc_Z();
 8002254:	f7fe fdd8 	bl	8000e08 <LG2_Get_Acc_Z>
 8002258:	eef0 7a40 	vmov.f32	s15, s0
 800225c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002260:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002264:	f6a3 1358 	subw	r3, r3, #2392	; 0x958
 8002268:	ed83 7b06 	vstr	d7, [r3, #24]

	  AccExt[1] = 0;
 800226c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002270:	f6a3 1138 	subw	r1, r3, #2360	; 0x938
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002280:	e016      	b.n	80022b0 <main+0xe90>
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	211935c7 	.word	0x211935c7
 800228c:	3ef24d15 	.word	0x3ef24d15
 8002290:	00000000 	.word	0x00000000
 8002294:	408f4000 	.word	0x408f4000
 8002298:	40001c00 	.word	0x40001c00
 800229c:	10624dd3 	.word	0x10624dd3
 80022a0:	24000d18 	.word	0x24000d18
 80022a4:	24000d38 	.word	0x24000d38
 80022a8:	24000d58 	.word	0x24000d58
 80022ac:	40002000 	.word	0x40002000
	  AccExt[2] = 0;
 80022b0:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80022b4:	f6a3 1138 	subw	r1, r3, #2360	; 0x938
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  AccExt[3] = dotProduct(SensorAcc, z) - 9.8;
 80022c4:	463b      	mov	r3, r7
 80022c6:	499c      	ldr	r1, [pc, #624]	; (8002538 <main+0x1118>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f840 	bl	800134e <dotProduct>
 80022ce:	eeb0 7b40 	vmov.f64	d7, d0
 80022d2:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8002528 <main+0x1108>
 80022d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022da:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80022de:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 80022e2:	ed83 7b06 	vstr	d7, [r3, #24]


	  double accMag = magnitude(SensorAcc);
 80022e6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80022ea:	461c      	mov	r4, r3
 80022ec:	463b      	mov	r3, r7
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f85b 	bl	80013aa <magnitude>
 80022f4:	ed84 0b00 	vstr	d0, [r4]
	  if(AccExt[3] > 0.25 || AccExt[3] < -0.25){
 80022f8:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80022fc:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 8002300:	ed93 7b06 	vldr	d7, [r3, #24]
 8002304:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
 8002308:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	dc0c      	bgt.n	800232c <main+0xf0c>
 8002312:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002316:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800231a:	ed93 7b06 	vldr	d7, [r3, #24]
 800231e:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8002322:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	d503      	bpl.n	8002334 <main+0xf14>
	  accelerating = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8002332:	e006      	b.n	8002342 <main+0xf22>

	 }else{
	  accelerating = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	  timeStop = HAL_GetTick();
 800233a:	f002 f9d9 	bl	80046f0 <HAL_GetTick>
 800233e:	f8c7 0928 	str.w	r0, [r7, #2344]	; 0x928

	 }

	  if(accelerating || (HAL_GetTick() - timeStop < 100)){
 8002342:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <main+0xf3a>
 800234a:	f002 f9d1 	bl	80046f0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b63      	cmp	r3, #99	; 0x63
 8002358:	d859      	bhi.n	800240e <main+0xfee>
		  VelocityExt[0] += AccExt[1] * elapsedTime/1000;
 800235a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800235e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8002362:	ed93 6b00 	vldr	d6, [r3]
 8002366:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800236a:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 800236e:	ed93 5b02 	vldr	d5, [r3, #8]
 8002372:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002376:	ed13 7b02 	vldr	d7, [r3, #-8]
 800237a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800237e:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 8002530 <main+0x1110>
 8002382:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002386:	ee36 7b07 	vadd.f64	d7, d6, d7
 800238a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800238e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8002392:	ed83 7b00 	vstr	d7, [r3]
		  VelocityExt[1] += AccExt[2] * elapsedTime/1000;
 8002396:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800239a:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800239e:	ed93 6b02 	vldr	d6, [r3, #8]
 80023a2:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80023a6:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 80023aa:	ed93 5b04 	vldr	d5, [r3, #16]
 80023ae:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80023b2:	ed13 7b02 	vldr	d7, [r3, #-8]
 80023b6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80023ba:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8002530 <main+0x1110>
 80023be:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80023c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023c6:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80023ca:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80023ce:	ed83 7b02 	vstr	d7, [r3, #8]
		  VelocityExt[2] += AccExt[3] * elapsedTime/1000;
 80023d2:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80023d6:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80023da:	ed93 6b04 	vldr	d6, [r3, #16]
 80023de:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80023e2:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 80023e6:	ed93 5b06 	vldr	d5, [r3, #24]
 80023ea:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80023ee:	ed13 7b02 	vldr	d7, [r3, #-8]
 80023f2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80023f6:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 8002530 <main+0x1110>
 80023fa:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80023fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002402:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002406:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800240a:	ed83 7b04 	vstr	d7, [r3, #16]

	  }

	  PosExt[0] += VelocityExt[0] * elapsedTime/1000;
 800240e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002412:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8002416:	ed93 6b00 	vldr	d6, [r3]
 800241a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800241e:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8002422:	ed93 5b00 	vldr	d5, [r3]
 8002426:	f607 0358 	addw	r3, r7, #2136	; 0x858
 800242a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800242e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002432:	ed9f 4b3f 	vldr	d4, [pc, #252]	; 8002530 <main+0x1110>
 8002436:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800243a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800243e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002442:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8002446:	ed83 7b00 	vstr	d7, [r3]
	  PosExt[1] += VelocityExt[1] * elapsedTime/1000;
 800244a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800244e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8002452:	ed93 6b02 	vldr	d6, [r3, #8]
 8002456:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800245a:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800245e:	ed93 5b02 	vldr	d5, [r3, #8]
 8002462:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002466:	ed13 7b02 	vldr	d7, [r3, #-8]
 800246a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800246e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8002530 <main+0x1110>
 8002472:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002476:	ee36 7b07 	vadd.f64	d7, d6, d7
 800247a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800247e:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8002482:	ed83 7b02 	vstr	d7, [r3, #8]
	  PosExt[2] += VelocityExt[2] * elapsedTime/1000;
 8002486:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800248a:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800248e:	ed93 6b04 	vldr	d6, [r3, #16]
 8002492:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8002496:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800249a:	ed93 5b04 	vldr	d5, [r3, #16]
 800249e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80024a2:	ed13 7b02 	vldr	d7, [r3, #-8]
 80024a6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80024aa:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8002530 <main+0x1110>
 80024ae:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80024b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024b6:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80024ba:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80024be:	ed83 7b04 	vstr	d7, [r3, #16]
  }
	  if(counter > 100){
 80024c2:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	f77f acfb 	ble.w	8001ec2 <main+0xaa2>
		counter = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
		//float magnitude = sqrt((x[1]*x[1]) + (x[2]*x[2]) + x[3] * x[3]);
		char data_gyro[500];
	    sprintf( data_gyro, "Mag: %f   Z: %f, %f, %f\n", VelocityExt[2], z[1],z[2],z[3]);
 80024d2:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80024d6:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80024da:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <main+0x1118>)
 80024e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024e4:	4914      	ldr	r1, [pc, #80]	; (8002538 <main+0x1118>)
 80024e6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80024ea:	4c13      	ldr	r4, [pc, #76]	; (8002538 <main+0x1118>)
 80024ec:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 80024f0:	f107 0644 	add.w	r6, r7, #68	; 0x44
 80024f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80024f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80024fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002500:	4642      	mov	r2, r8
 8002502:	464b      	mov	r3, r9
 8002504:	490d      	ldr	r1, [pc, #52]	; (800253c <main+0x111c>)
 8002506:	4630      	mov	r0, r6
 8002508:	f015 fbc0 	bl	8017c8c <siprintf>
	    CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 800250c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fefd 	bl	8000310 <strlen>
 8002516:	4602      	mov	r2, r0
 8002518:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f014 f8d2 	bl	80166c8 <CDC_Transmit_HS>
  while(1){
 8002524:	e4cd      	b.n	8001ec2 <main+0xaa2>
 8002526:	bf00      	nop
 8002528:	9999999a 	.word	0x9999999a
 800252c:	40239999 	.word	0x40239999
 8002530:	00000000 	.word	0x00000000
 8002534:	408f4000 	.word	0x408f4000
 8002538:	24000d58 	.word	0x24000d58
 800253c:	0801c6ac 	.word	0x0801c6ac

08002540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b09c      	sub	sp, #112	; 0x70
 8002544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254a:	224c      	movs	r2, #76	; 0x4c
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f014 fd46 	bl	8016fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2220      	movs	r2, #32
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f014 fd40 	bl	8016fe0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002560:	2002      	movs	r0, #2
 8002562:	f007 fb83 	bl	8009c6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <SystemClock_Config+0xf4>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <SystemClock_Config+0xf4>)
 8002574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <SystemClock_Config+0xf4>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002586:	bf00      	nop
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <SystemClock_Config+0xf4>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002594:	d1f8      	bne.n	8002588 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002596:	2323      	movs	r3, #35	; 0x23
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800259a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025a8:	2301      	movs	r3, #1
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ac:	2302      	movs	r3, #2
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b0:	2302      	movs	r3, #2
 80025b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025b4:	2304      	movs	r3, #4
 80025b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80025b8:	2310      	movs	r3, #16
 80025ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80025bc:	2301      	movs	r3, #1
 80025be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80025c0:	230c      	movs	r3, #12
 80025c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025c4:	2302      	movs	r3, #2
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80025c8:	230c      	movs	r3, #12
 80025ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4618      	mov	r0, r3
 80025da:	f007 fb91 	bl	8009d00 <HAL_RCC_OscConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80025e4:	f000 ff4a 	bl	800347c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e8:	233f      	movs	r3, #63	; 0x3f
 80025ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ec:	2303      	movs	r3, #3
 80025ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80025f4:	2308      	movs	r3, #8
 80025f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80025f8:	2340      	movs	r3, #64	; 0x40
 80025fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80025fc:	2340      	movs	r3, #64	; 0x40
 80025fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002606:	2340      	movs	r3, #64	; 0x40
 8002608:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f007 ff50 	bl	800a4b4 <HAL_RCC_ClockConfig>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800261a:	f000 ff2f 	bl	800347c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800261e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002622:	2100      	movs	r1, #0
 8002624:	2000      	movs	r0, #0
 8002626:	f008 f8fb 	bl	800a820 <HAL_RCC_MCOConfig>
}
 800262a:	bf00      	nop
 800262c:	3770      	adds	r7, #112	; 0x70
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	58024800 	.word	0x58024800

08002638 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b0ae      	sub	sp, #184	; 0xb8
 800263c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	22b8      	movs	r2, #184	; 0xb8
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f014 fccb 	bl	8016fe0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800264a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002656:	2304      	movs	r3, #4
 8002658:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800265a:	2310      	movs	r3, #16
 800265c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800265e:	2304      	movs	r3, #4
 8002660:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002662:	2302      	movs	r3, #2
 8002664:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800266a:	23c0      	movs	r3, #192	; 0xc0
 800266c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8002676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002682:	463b      	mov	r3, r7
 8002684:	4618      	mov	r0, r3
 8002686:	f008 fb0b 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002690:	f000 fef4 	bl	800347c <Error_Handler>
  }
}
 8002694:	bf00      	nop
 8002696:	37b8      	adds	r7, #184	; 0xb8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80026a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026ae:	463b      	mov	r3, r7
 80026b0:	2224      	movs	r2, #36	; 0x24
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f014 fc93 	bl	8016fe0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026bc:	4a31      	ldr	r2, [pc, #196]	; (8002784 <MX_ADC1_Init+0xe8>)
 80026be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026c2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80026c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026da:	4b29      	ldr	r3, [pc, #164]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <MX_ADC1_Init+0xe4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <MX_ADC1_Init+0xe4>)
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <MX_ADC1_Init+0xe4>)
 8002708:	2200      	movs	r2, #0
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <MX_ADC1_Init+0xe4>)
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <MX_ADC1_Init+0xe4>)
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800271a:	4819      	ldr	r0, [pc, #100]	; (8002780 <MX_ADC1_Init+0xe4>)
 800271c:	f002 fa74 	bl	8004c08 <HAL_ADC_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002726:	f000 fea9 	bl	800347c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	4812      	ldr	r0, [pc, #72]	; (8002780 <MX_ADC1_Init+0xe4>)
 8002736:	f003 faaf 	bl	8005c98 <HAL_ADCEx_MultiModeConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002740:	f000 fe9c 	bl	800347c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <MX_ADC1_Init+0xec>)
 8002746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002748:	2306      	movs	r3, #6
 800274a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 800274c:	2303      	movs	r3, #3
 800274e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002750:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002754:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002756:	2304      	movs	r3, #4
 8002758:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002764:	463b      	mov	r3, r7
 8002766:	4619      	mov	r1, r3
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_ADC1_Init+0xe4>)
 800276a:	f002 fc55 	bl	8005018 <HAL_ADC_ConfigChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002774:	f000 fe82 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	3730      	adds	r7, #48	; 0x30
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	240002f4 	.word	0x240002f4
 8002784:	40022000 	.word	0x40022000
 8002788:	2a000400 	.word	0x2a000400

0800278c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	2224      	movs	r2, #36	; 0x24
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f014 fc21 	bl	8016fe0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800279e:	4b2f      	ldr	r3, [pc, #188]	; (800285c <MX_ADC3_Init+0xd0>)
 80027a0:	4a2f      	ldr	r2, [pc, #188]	; (8002860 <MX_ADC3_Init+0xd4>)
 80027a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <MX_ADC3_Init+0xd0>)
 80027a6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80027aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_ADC3_Init+0xd0>)
 80027ae:	2208      	movs	r2, #8
 80027b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <MX_ADC3_Init+0xd0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <MX_ADC3_Init+0xd0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027be:	4b27      	ldr	r3, [pc, #156]	; (800285c <MX_ADC3_Init+0xd0>)
 80027c0:	2204      	movs	r2, #4
 80027c2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <MX_ADC3_Init+0xd0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <MX_ADC3_Init+0xd0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MX_ADC3_Init+0xd0>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <MX_ADC3_Init+0xd0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <MX_ADC3_Init+0xd0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <MX_ADC3_Init+0xd0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <MX_ADC3_Init+0xd0>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <MX_ADC3_Init+0xd0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <MX_ADC3_Init+0xd0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <MX_ADC3_Init+0xd0>)
 8002800:	2200      	movs	r2, #0
 8002802:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <MX_ADC3_Init+0xd0>)
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_ADC3_Init+0xd0>)
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002812:	4812      	ldr	r0, [pc, #72]	; (800285c <MX_ADC3_Init+0xd0>)
 8002814:	f002 f9f8 	bl	8004c08 <HAL_ADC_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800281e:	f000 fe2d 	bl	800347c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_ADC3_Init+0xd8>)
 8002824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002826:	2306      	movs	r3, #6
 8002828:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800282e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002832:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002834:	2304      	movs	r3, #4
 8002836:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_ADC3_Init+0xd0>)
 8002846:	f002 fbe7 	bl	8005018 <HAL_ADC_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002850:	f000 fe14 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	24000364 	.word	0x24000364
 8002860:	58026000 	.word	0x58026000
 8002864:	04300002 	.word	0x04300002

08002868 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 800286e:	4a2f      	ldr	r2, [pc, #188]	; (800292c <MX_FDCAN3_Init+0xc4>)
 8002870:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002880:	2200      	movs	r2, #0
 8002882:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002886:	2200      	movs	r2, #0
 8002888:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 800288c:	2200      	movs	r2, #0
 800288e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002892:	2210      	movs	r2, #16
 8002894:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002898:	2201      	movs	r2, #1
 800289a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 800289e:	2202      	movs	r2, #2
 80028a0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028a4:	2202      	movs	r2, #2
 80028a6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028bc:	2201      	movs	r2, #1
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028da:	2204      	movs	r2, #4
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028e6:	2204      	movs	r2, #4
 80028e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028f2:	2204      	movs	r2, #4
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 800290a:	2200      	movs	r2, #0
 800290c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002910:	2204      	movs	r2, #4
 8002912:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <MX_FDCAN3_Init+0xc0>)
 8002916:	f005 f871 	bl	80079fc <HAL_FDCAN_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8002920:	f000 fdac 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	240004c4 	.word	0x240004c4
 800292c:	4000d400 	.word	0x4000d400

08002930 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <MX_I2C2_Init+0x78>)
 8002938:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_I2C2_Init+0x74>)
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <MX_I2C2_Init+0x7c>)
 800293e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002948:	2201      	movs	r2, #1
 800294a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_I2C2_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <MX_I2C2_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800296a:	480e      	ldr	r0, [pc, #56]	; (80029a4 <MX_I2C2_Init+0x74>)
 800296c:	f005 fd84 	bl	8008478 <HAL_I2C_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002976:	f000 fd81 	bl	800347c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800297a:	2100      	movs	r1, #0
 800297c:	4809      	ldr	r0, [pc, #36]	; (80029a4 <MX_I2C2_Init+0x74>)
 800297e:	f005 fe25 	bl	80085cc <HAL_I2CEx_ConfigAnalogFilter>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002988:	f000 fd78 	bl	800347c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800298c:	2100      	movs	r1, #0
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_I2C2_Init+0x74>)
 8002990:	f005 fe67 	bl	8008662 <HAL_I2CEx_ConfigDigitalFilter>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800299a:	f000 fd6f 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	24000564 	.word	0x24000564
 80029a8:	40005800 	.word	0x40005800
 80029ac:	00c0eaff 	.word	0x00c0eaff

080029b0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <MX_SDMMC2_SD_Init+0x34>)
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <MX_SDMMC2_SD_Init+0x38>)
 80029b8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <MX_SDMMC2_SD_Init+0x34>)
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <MX_SDMMC2_SD_Init+0x34>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <MX_SDMMC2_SD_Init+0x34>)
 80029c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029cc:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <MX_SDMMC2_SD_Init+0x34>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <MX_SDMMC2_SD_Init+0x34>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	240005b8 	.word	0x240005b8
 80029e8:	48022400 	.word	0x48022400

080029ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <MX_SPI1_Init+0xa4>)
 80029f2:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <MX_SPI1_Init+0xa8>)
 80029f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <MX_SPI1_Init+0xa4>)
 80029f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80029fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a06:	2207      	movs	r2, #7
 8002a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a20:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002a24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a7c:	4804      	ldr	r0, [pc, #16]	; (8002a90 <MX_SPI1_Init+0xa4>)
 8002a7e:	f00c f959 	bl	800ed34 <HAL_SPI_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002a88:	f000 fcf8 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	24000634 	.word	0x24000634
 8002a94:	40013000 	.word	0x40013000

08002a98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <MX_SPI2_Init+0xa8>)
 8002aa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002aa4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002aa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ac4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ad0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_SPI2_Init+0xa4>)
 8002b2a:	f00c f903 	bl	800ed34 <HAL_SPI_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002b34:	f000 fca2 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	240006bc 	.word	0x240006bc
 8002b40:	40003800 	.word	0x40003800

08002b44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b4a:	4a28      	ldr	r2, [pc, #160]	; (8002bec <MX_SPI3_Init+0xa8>)
 8002b4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b5e:	2207      	movs	r2, #7
 8002b60:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b74:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b78:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002b7c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <MX_SPI3_Init+0xa4>)
 8002bd6:	f00c f8ad 	bl	800ed34 <HAL_SPI_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002be0:	f000 fc4c 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	24000744 	.word	0x24000744
 8002bec:	40003c00 	.word	0x40003c00

08002bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf6:	f107 031c 	add.w	r3, r7, #28
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c02:	463b      	mov	r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
 8002c10:	615a      	str	r2, [r3, #20]
 8002c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c2a:	225a      	movs	r2, #90	; 0x5a
 8002c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c3a:	4818      	ldr	r0, [pc, #96]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c3c:	f00c fee8 	bl	800fa10 <HAL_TIM_PWM_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002c46:	f000 fc19 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4810      	ldr	r0, [pc, #64]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c5a:	f00d fe55 	bl	8010908 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002c64:	f000 fc0a 	bl	800347c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c68:	2360      	movs	r3, #96	; 0x60
 8002c6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c78:	463b      	mov	r3, r7
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c80:	f00d f95a 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002c8a:	f000 fbf7 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c8e:	4803      	ldr	r0, [pc, #12]	; (8002c9c <MX_TIM2_Init+0xac>)
 8002c90:	f001 f92a 	bl	8003ee8 <HAL_TIM_MspPostInit>

}
 8002c94:	bf00      	nop
 8002c96:	3728      	adds	r7, #40	; 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	240007cc 	.word	0x240007cc

08002ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
 8002cc0:	615a      	str	r2, [r3, #20]
 8002cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cc4:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002cc6:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <MX_TIM3_Init+0xc4>)
 8002cc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002cd8:	225a      	movs	r2, #90	; 0x5a
 8002cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ce8:	481d      	ldr	r0, [pc, #116]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002cea:	f00c fe91 	bl	800fa10 <HAL_TIM_PWM_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002cf4:	f000 fbc2 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	4619      	mov	r1, r3
 8002d06:	4816      	ldr	r0, [pc, #88]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002d08:	f00d fdfe 	bl	8010908 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d12:	f000 fbb3 	bl	800347c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d16:	2360      	movs	r3, #96	; 0x60
 8002d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d26:	463b      	mov	r3, r7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002d2e:	f00d f903 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d38:	f000 fba0 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4807      	ldr	r0, [pc, #28]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002d44:	f00d f8f8 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d4e:	f000 fb95 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d52:	4803      	ldr	r0, [pc, #12]	; (8002d60 <MX_TIM3_Init+0xc0>)
 8002d54:	f001 f8c8 	bl	8003ee8 <HAL_TIM_MspPostInit>

}
 8002d58:	bf00      	nop
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	24000818 	.word	0x24000818
 8002d64:	40000400 	.word	0x40000400

08002d68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
 8002d88:	615a      	str	r2, [r3, #20]
 8002d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d8c:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002d8e:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <MX_TIM4_Init+0xf4>)
 8002d90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002d94:	221c      	movs	r2, #28
 8002d96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d98:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002da0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002da4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002db2:	4829      	ldr	r0, [pc, #164]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002db4:	f00c fe2c 	bl	800fa10 <HAL_TIM_PWM_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002dbe:	f000 fb5d 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4821      	ldr	r0, [pc, #132]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002dd2:	f00d fd99 	bl	8010908 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002ddc:	f000 fb4e 	bl	800347c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de0:	2360      	movs	r3, #96	; 0x60
 8002de2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df0:	463b      	mov	r3, r7
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	4818      	ldr	r0, [pc, #96]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002df8:	f00d f89e 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002e02:	f000 fb3b 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e06:	463b      	mov	r3, r7
 8002e08:	2204      	movs	r2, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002e0e:	f00d f893 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002e18:	f000 fb30 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	2208      	movs	r2, #8
 8002e20:	4619      	mov	r1, r3
 8002e22:	480d      	ldr	r0, [pc, #52]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002e24:	f00d f888 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002e2e:	f000 fb25 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e32:	463b      	mov	r3, r7
 8002e34:	220c      	movs	r2, #12
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002e3a:	f00d f87d 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002e44:	f000 fb1a 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e48:	4803      	ldr	r0, [pc, #12]	; (8002e58 <MX_TIM4_Init+0xf0>)
 8002e4a:	f001 f84d 	bl	8003ee8 <HAL_TIM_MspPostInit>

}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	24000864 	.word	0x24000864
 8002e5c:	40000800 	.word	0x40000800

08002e60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e66:	f107 031c 	add.w	r3, r7, #28
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e72:	463b      	mov	r3, r7
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	615a      	str	r2, [r3, #20]
 8002e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002e86:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <MX_TIM5_Init+0xb0>)
 8002e88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002e98:	225a      	movs	r2, #90	; 0x5a
 8002e9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ea8:	4818      	ldr	r0, [pc, #96]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002eaa:	f00c fdb1 	bl	800fa10 <HAL_TIM_PWM_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002eb4:	f000 fae2 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4811      	ldr	r0, [pc, #68]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002ec8:	f00d fd1e 	bl	8010908 <HAL_TIMEx_MasterConfigSynchronization>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002ed2:	f000 fad3 	bl	800347c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed6:	2360      	movs	r3, #96	; 0x60
 8002ed8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	220c      	movs	r2, #12
 8002eea:	4619      	mov	r1, r3
 8002eec:	4807      	ldr	r0, [pc, #28]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002eee:	f00d f823 	bl	800ff38 <HAL_TIM_PWM_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002ef8:	f000 fac0 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002efc:	4803      	ldr	r0, [pc, #12]	; (8002f0c <MX_TIM5_Init+0xac>)
 8002efe:	f000 fff3 	bl	8003ee8 <HAL_TIM_MspPostInit>

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	240008b0 	.word	0x240008b0
 8002f10:	40000c00 	.word	0x40000c00

08002f14 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <MX_TIM13_Init+0x44>)
 8002f1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f20:	2263      	movs	r2, #99	; 0x63
 8002f22:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f30:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f3e:	4805      	ldr	r0, [pc, #20]	; (8002f54 <MX_TIM13_Init+0x40>)
 8002f40:	f00c fc91 	bl	800f866 <HAL_TIM_Base_Init>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002f4a:	f000 fa97 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	240008fc 	.word	0x240008fc
 8002f58:	40001c00 	.word	0x40001c00

08002f5c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f62:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <MX_TIM14_Init+0x44>)
 8002f64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f68:	2263      	movs	r2, #99	; 0x63
 8002f6a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f78:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_TIM14_Init+0x40>)
 8002f88:	f00c fc6d 	bl	800f866 <HAL_TIM_Base_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002f92:	f000 fa73 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	24000948 	.word	0x24000948
 8002fa0:	40002000 	.word	0x40002000

08002fa4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <MX_UART4_Init+0x90>)
 8002faa:	4a23      	ldr	r2, [pc, #140]	; (8003038 <MX_UART4_Init+0x94>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002fae:	4b21      	ldr	r3, [pc, #132]	; (8003034 <MX_UART4_Init+0x90>)
 8002fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <MX_UART4_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <MX_UART4_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <MX_UART4_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <MX_UART4_Init+0x90>)
 8002fca:	220c      	movs	r2, #12
 8002fcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <MX_UART4_Init+0x90>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_UART4_Init+0x90>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_UART4_Init+0x90>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_UART4_Init+0x90>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <MX_UART4_Init+0x90>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fec:	4811      	ldr	r0, [pc, #68]	; (8003034 <MX_UART4_Init+0x90>)
 8002fee:	f00d fd45 	bl	8010a7c <HAL_UART_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002ff8:	f000 fa40 	bl	800347c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <MX_UART4_Init+0x90>)
 8003000:	f00e fe4b 	bl	8011c9a <HAL_UARTEx_SetTxFifoThreshold>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800300a:	f000 fa37 	bl	800347c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800300e:	2100      	movs	r1, #0
 8003010:	4808      	ldr	r0, [pc, #32]	; (8003034 <MX_UART4_Init+0x90>)
 8003012:	f00e fe80 	bl	8011d16 <HAL_UARTEx_SetRxFifoThreshold>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800301c:	f000 fa2e 	bl	800347c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_UART4_Init+0x90>)
 8003022:	f00e fe01 	bl	8011c28 <HAL_UARTEx_DisableFifoMode>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800302c:	f000 fa26 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	24000bec 	.word	0x24000bec
 8003038:	40004c00 	.word	0x40004c00

0800303c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003040:	4b22      	ldr	r3, [pc, #136]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003042:	4a23      	ldr	r2, [pc, #140]	; (80030d0 <MX_USART6_UART_Init+0x94>)
 8003044:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800304c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <MX_USART6_UART_Init+0x90>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <MX_USART6_UART_Init+0x90>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <MX_USART6_UART_Init+0x90>)
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003080:	2200      	movs	r2, #0
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003084:	4811      	ldr	r0, [pc, #68]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003086:	f00d fcf9 	bl	8010a7c <HAL_UART_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003090:	f000 f9f4 	bl	800347c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003094:	2100      	movs	r1, #0
 8003096:	480d      	ldr	r0, [pc, #52]	; (80030cc <MX_USART6_UART_Init+0x90>)
 8003098:	f00e fdff 	bl	8011c9a <HAL_UARTEx_SetTxFifoThreshold>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80030a2:	f000 f9eb 	bl	800347c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a6:	2100      	movs	r1, #0
 80030a8:	4808      	ldr	r0, [pc, #32]	; (80030cc <MX_USART6_UART_Init+0x90>)
 80030aa:	f00e fe34 	bl	8011d16 <HAL_UARTEx_SetRxFifoThreshold>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80030b4:	f000 f9e2 	bl	800347c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80030b8:	4804      	ldr	r0, [pc, #16]	; (80030cc <MX_USART6_UART_Init+0x90>)
 80030ba:	f00e fdb5 	bl	8011c28 <HAL_UARTEx_DisableFifoMode>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80030c4:	f000 f9da 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	24000c80 	.word	0x24000c80
 80030d0:	40011400 	.word	0x40011400

080030d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <MX_DMA_Init+0xbc>)
 80030dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <MX_DMA_Init+0xbc>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <MX_DMA_Init+0xbc>)
 80030ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030f8:	4b25      	ldr	r3, [pc, #148]	; (8003190 <MX_DMA_Init+0xbc>)
 80030fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <MX_DMA_Init+0xbc>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <MX_DMA_Init+0xbc>)
 800310a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	200b      	movs	r0, #11
 800311c:	f002 ff79 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003120:	200b      	movs	r0, #11
 8003122:	f002 ff90 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	200c      	movs	r0, #12
 800312c:	f002 ff71 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003130:	200c      	movs	r0, #12
 8003132:	f002 ff88 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	200d      	movs	r0, #13
 800313c:	f002 ff69 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003140:	200d      	movs	r0, #13
 8003142:	f002 ff80 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	200e      	movs	r0, #14
 800314c:	f002 ff61 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003150:	200e      	movs	r0, #14
 8003152:	f002 ff78 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	200f      	movs	r0, #15
 800315c:	f002 ff59 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003160:	200f      	movs	r0, #15
 8003162:	f002 ff70 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2010      	movs	r0, #16
 800316c:	f002 ff51 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003170:	2010      	movs	r0, #16
 8003172:	f002 ff68 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2046      	movs	r0, #70	; 0x46
 800317c:	f002 ff49 	bl	8006012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003180:	2046      	movs	r0, #70	; 0x46
 8003182:	f002 ff60 	bl	8006046 <HAL_NVIC_EnableIRQ>

}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	58024400 	.word	0x58024400

08003194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031aa:	4bac      	ldr	r3, [pc, #688]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b0:	4aaa      	ldr	r2, [pc, #680]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031b2:	f043 0310 	orr.w	r3, r3, #16
 80031b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ba:	4ba8      	ldr	r3, [pc, #672]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031c8:	4ba4      	ldr	r3, [pc, #656]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ce:	4aa3      	ldr	r2, [pc, #652]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031d0:	f043 0320 	orr.w	r3, r3, #32
 80031d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d8:	4ba0      	ldr	r3, [pc, #640]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031e6:	4b9d      	ldr	r3, [pc, #628]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ec:	4a9b      	ldr	r2, [pc, #620]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f6:	4b99      	ldr	r3, [pc, #612]	; (800345c <MX_GPIO_Init+0x2c8>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003204:	4b95      	ldr	r3, [pc, #596]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320a:	4a94      	ldr	r2, [pc, #592]	; (800345c <MX_GPIO_Init+0x2c8>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003214:	4b91      	ldr	r3, [pc, #580]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	4b8e      	ldr	r3, [pc, #568]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003228:	4a8c      	ldr	r2, [pc, #560]	; (800345c <MX_GPIO_Init+0x2c8>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003232:	4b8a      	ldr	r3, [pc, #552]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003246:	4a85      	ldr	r2, [pc, #532]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003250:	4b82      	ldr	r3, [pc, #520]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800325e:	4b7f      	ldr	r3, [pc, #508]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003264:	4a7d      	ldr	r2, [pc, #500]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326e:	4b7b      	ldr	r3, [pc, #492]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327c:	4b77      	ldr	r3, [pc, #476]	; (800345c <MX_GPIO_Init+0x2c8>)
 800327e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003282:	4a76      	ldr	r2, [pc, #472]	; (800345c <MX_GPIO_Init+0x2c8>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800328c:	4b73      	ldr	r3, [pc, #460]	; (800345c <MX_GPIO_Init+0x2c8>)
 800328e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800329a:	2200      	movs	r2, #0
 800329c:	f241 5104 	movw	r1, #5380	; 0x1504
 80032a0:	486f      	ldr	r0, [pc, #444]	; (8003460 <MX_GPIO_Init+0x2cc>)
 80032a2:	f005 f8cf 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	f248 0106 	movw	r1, #32774	; 0x8006
 80032ac:	486d      	ldr	r0, [pc, #436]	; (8003464 <MX_GPIO_Init+0x2d0>)
 80032ae:	f005 f8c9 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2130      	movs	r1, #48	; 0x30
 80032b6:	486c      	ldr	r0, [pc, #432]	; (8003468 <MX_GPIO_Init+0x2d4>)
 80032b8:	f005 f8c4 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2102      	movs	r1, #2
 80032c0:	486a      	ldr	r0, [pc, #424]	; (800346c <MX_GPIO_Init+0x2d8>)
 80032c2:	f005 f8bf 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80032c6:	2200      	movs	r2, #0
 80032c8:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80032cc:	4868      	ldr	r0, [pc, #416]	; (8003470 <MX_GPIO_Init+0x2dc>)
 80032ce:	f005 f8b9 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	210e      	movs	r1, #14
 80032d6:	4867      	ldr	r0, [pc, #412]	; (8003474 <MX_GPIO_Init+0x2e0>)
 80032d8:	f005 f8b4 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	f240 3101 	movw	r1, #769	; 0x301
 80032e2:	4865      	ldr	r0, [pc, #404]	; (8003478 <MX_GPIO_Init+0x2e4>)
 80032e4:	f005 f8ae 	bl	8008444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80032e8:	f241 5304 	movw	r3, #5380	; 0x1504
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ee:	2301      	movs	r3, #1
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f6:	2300      	movs	r3, #0
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fe:	4619      	mov	r1, r3
 8003300:	4857      	ldr	r0, [pc, #348]	; (8003460 <MX_GPIO_Init+0x2cc>)
 8003302:	f004 fedf 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8003306:	f248 0306 	movw	r3, #32774	; 0x8006
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330c:	2301      	movs	r3, #1
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331c:	4619      	mov	r1, r3
 800331e:	4851      	ldr	r0, [pc, #324]	; (8003464 <MX_GPIO_Init+0x2d0>)
 8003320:	f004 fed0 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003324:	2330      	movs	r3, #48	; 0x30
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003328:	2301      	movs	r3, #1
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003338:	4619      	mov	r1, r3
 800333a:	484b      	ldr	r0, [pc, #300]	; (8003468 <MX_GPIO_Init+0x2d4>)
 800333c:	f004 fec2 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8003340:	2302      	movs	r3, #2
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003344:	2301      	movs	r3, #1
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003354:	4619      	mov	r1, r3
 8003356:	4845      	ldr	r0, [pc, #276]	; (800346c <MX_GPIO_Init+0x2d8>)
 8003358:	f004 feb4 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 800335c:	2304      	movs	r3, #4
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003364:	2301      	movs	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	483f      	ldr	r0, [pc, #252]	; (800346c <MX_GPIO_Init+0x2d8>)
 8003370:	f004 fea8 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8003374:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337a:	2301      	movs	r3, #1
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338a:	4619      	mov	r1, r3
 800338c:	4838      	ldr	r0, [pc, #224]	; (8003470 <MX_GPIO_Init+0x2dc>)
 800338e:	f004 fe99 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8003392:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800339c:	2301      	movs	r3, #1
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	4619      	mov	r1, r3
 80033a6:	4832      	ldr	r0, [pc, #200]	; (8003470 <MX_GPIO_Init+0x2dc>)
 80033a8:	f004 fe8c 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80033ac:	2301      	movs	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b4:	2301      	movs	r3, #1
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80033b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033bc:	4619      	mov	r1, r3
 80033be:	482d      	ldr	r0, [pc, #180]	; (8003474 <MX_GPIO_Init+0x2e0>)
 80033c0:	f004 fe80 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80033c4:	230e      	movs	r3, #14
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c8:	2301      	movs	r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	2300      	movs	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	4826      	ldr	r0, [pc, #152]	; (8003474 <MX_GPIO_Init+0x2e0>)
 80033dc:	f004 fe72 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80033e0:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ea:	2301      	movs	r3, #1
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f2:	4619      	mov	r1, r3
 80033f4:	481a      	ldr	r0, [pc, #104]	; (8003460 <MX_GPIO_Init+0x2cc>)
 80033f6:	f004 fe65 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80033fa:	f240 3301 	movw	r3, #769	; 0x301
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003400:	2301      	movs	r3, #1
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800340c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003410:	4619      	mov	r1, r3
 8003412:	4819      	ldr	r0, [pc, #100]	; (8003478 <MX_GPIO_Init+0x2e4>)
 8003414:	f004 fe56 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8003418:	2310      	movs	r3, #16
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8003424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003428:	4619      	mov	r1, r3
 800342a:	4812      	ldr	r0, [pc, #72]	; (8003474 <MX_GPIO_Init+0x2e0>)
 800342c:	f004 fe4a 	bl	80080c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343e:	2300      	movs	r3, #0
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003442:	2300      	movs	r3, #0
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_GPIO_Init+0x2d0>)
 800344e:	f004 fe39 	bl	80080c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003452:	bf00      	nop
 8003454:	3738      	adds	r7, #56	; 0x38
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	58024400 	.word	0x58024400
 8003460:	58021000 	.word	0x58021000
 8003464:	58020000 	.word	0x58020000
 8003468:	58020800 	.word	0x58020800
 800346c:	58020400 	.word	0x58020400
 8003470:	58021400 	.word	0x58021400
 8003474:	58021800 	.word	0x58021800
 8003478:	58020c00 	.word	0x58020c00

0800347c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003480:	b672      	cpsid	i
}
 8003482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003484:	e7fe      	b.n	8003484 <Error_Handler+0x8>
	...

08003488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_MspInit+0x30>)
 8003490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_MspInit+0x30>)
 8003496:	f043 0302 	orr.w	r3, r3, #2
 800349a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_MspInit+0x30>)
 80034a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	58024400 	.word	0x58024400

080034bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_ADC_MspInit+0x194>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d159      	bne.n	8003592 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80034e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034e4:	4a5b      	ldr	r2, [pc, #364]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80034e6:	f043 0320 	orr.w	r3, r3, #32
 80034ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034ee:	4b59      	ldr	r3, [pc, #356]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80034f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fc:	4b55      	ldr	r3, [pc, #340]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80034fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003502:	4a54      	ldr	r2, [pc, #336]	; (8003654 <HAL_ADC_MspInit+0x198>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800350c:	4b51      	ldr	r3, [pc, #324]	; (8003654 <HAL_ADC_MspInit+0x198>)
 800350e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800351a:	2301      	movs	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800351e:	2303      	movs	r3, #3
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	484a      	ldr	r0, [pc, #296]	; (8003658 <HAL_ADC_MspInit+0x19c>)
 800352e:	f004 fdc9 	bl	80080c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8003532:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003534:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <HAL_ADC_MspInit+0x1a4>)
 8003536:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003538:	4b48      	ldr	r3, [pc, #288]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 800353a:	2209      	movs	r2, #9
 800353c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800354a:	4b44      	ldr	r3, [pc, #272]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 800354c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003550:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003552:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003558:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 800355c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003560:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003568:	4b3c      	ldr	r3, [pc, #240]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 800356a:	2200      	movs	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003570:	2200      	movs	r2, #0
 8003572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003574:	4839      	ldr	r0, [pc, #228]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003576:	f002 fd81 	bl	800607c <HAL_DMA_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003580:	f7ff ff7c 	bl	800347c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 8003588:	659a      	str	r2, [r3, #88]	; 0x58
 800358a:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_ADC_MspInit+0x1a0>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003590:	e059      	b.n	8003646 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a33      	ldr	r2, [pc, #204]	; (8003664 <HAL_ADC_MspInit+0x1a8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d154      	bne.n	8003646 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_ADC_MspInit+0x198>)
 800359e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80035a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80035ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_ADC_MspInit+0x198>)
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80035d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80035dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80035e0:	f001 f8b6 	bl	8004750 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80035e4:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 80035e6:	4a21      	ldr	r2, [pc, #132]	; (800366c <HAL_ADC_MspInit+0x1b0>)
 80035e8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 80035ec:	2273      	movs	r2, #115	; 0x73
 80035ee:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 80035fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003602:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003604:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 8003606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800360a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 800360e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003612:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003614:	4b14      	ldr	r3, [pc, #80]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 8003616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800361a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 800361e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003622:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800362a:	480f      	ldr	r0, [pc, #60]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 800362c:	f002 fd26 	bl	800607c <HAL_DMA_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8003636:	f7ff ff21 	bl	800347c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 800363e:	659a      	str	r2, [r3, #88]	; 0x58
 8003640:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_ADC_MspInit+0x1ac>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003646:	bf00      	nop
 8003648:	3730      	adds	r7, #48	; 0x30
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40022000 	.word	0x40022000
 8003654:	58024400 	.word	0x58024400
 8003658:	58020800 	.word	0x58020800
 800365c:	240003d4 	.word	0x240003d4
 8003660:	40020088 	.word	0x40020088
 8003664:	58026000 	.word	0x58026000
 8003668:	2400044c 	.word	0x2400044c
 800366c:	400204b8 	.word	0x400204b8

08003670 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0b8      	sub	sp, #224	; 0xe0
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003688:	f107 0310 	add.w	r3, r7, #16
 800368c:	22b8      	movs	r2, #184	; 0xb8
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f013 fca5 	bl	8016fe0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a26      	ldr	r2, [pc, #152]	; (8003734 <HAL_FDCAN_MspInit+0xc4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d144      	bne.n	800372a <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80036a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	4618      	mov	r0, r3
 80036b6:	f007 faf3 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 80036c0:	f7ff fedc 	bl	800347c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_FDCAN_MspInit+0xc8>)
 80036c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80036ca:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <HAL_FDCAN_MspInit+0xc8>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80036d4:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_FDCAN_MspInit+0xc8>)
 80036d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_FDCAN_MspInit+0xc8>)
 80036e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e8:	4a13      	ldr	r2, [pc, #76]	; (8003738 <HAL_FDCAN_MspInit+0xc8>)
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_FDCAN_MspInit+0xc8>)
 80036f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003700:	23c0      	movs	r3, #192	; 0xc0
 8003702:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003718:	2302      	movs	r3, #2
 800371a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800371e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003722:	4619      	mov	r1, r3
 8003724:	4805      	ldr	r0, [pc, #20]	; (800373c <HAL_FDCAN_MspInit+0xcc>)
 8003726:	f004 fccd 	bl	80080c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	37e0      	adds	r7, #224	; 0xe0
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	4000d400 	.word	0x4000d400
 8003738:	58024400 	.word	0x58024400
 800373c:	58021400 	.word	0x58021400

08003740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b0b8      	sub	sp, #224	; 0xe0
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	22b8      	movs	r2, #184	; 0xb8
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f013 fc3d 	bl	8016fe0 <memset>
  if(hi2c->Instance==I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <HAL_I2C_MspInit+0xd4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d14d      	bne.n	800380c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003770:	f04f 0208 	mov.w	r2, #8
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	4618      	mov	r0, r3
 8003788:	f007 fa8a 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003792:	f7ff fe73 	bl	800347c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_I2C_MspInit+0xd8>)
 8003798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_I2C_MspInit+0xd8>)
 800379e:	f043 0320 	orr.w	r3, r3, #32
 80037a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a6:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_I2C_MspInit+0xd8>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b4:	2303      	movs	r3, #3
 80037b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ba:	2312      	movs	r3, #18
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037cc:	2304      	movs	r3, #4
 80037ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037d6:	4619      	mov	r1, r3
 80037d8:	4810      	ldr	r0, [pc, #64]	; (800381c <HAL_I2C_MspInit+0xdc>)
 80037da:	f004 fc73 	bl	80080c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <HAL_I2C_MspInit+0xd8>)
 80037e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <HAL_I2C_MspInit+0xd8>)
 80037e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_I2C_MspInit+0xd8>)
 80037f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2101      	movs	r1, #1
 8003800:	2021      	movs	r0, #33	; 0x21
 8003802:	f002 fc06 	bl	8006012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003806:	2021      	movs	r0, #33	; 0x21
 8003808:	f002 fc1d 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800380c:	bf00      	nop
 800380e:	37e0      	adds	r7, #224	; 0xe0
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40005800 	.word	0x40005800
 8003818:	58024400 	.word	0x58024400
 800381c:	58021400 	.word	0x58021400

08003820 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b0ba      	sub	sp, #232	; 0xe8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003838:	f107 0318 	add.w	r3, r7, #24
 800383c:	22b8      	movs	r2, #184	; 0xb8
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f013 fbcd 	bl	8016fe0 <memset>
  if(hsd->Instance==SDMMC2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <HAL_SD_MspInit+0x1a0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	f040 80b3 	bne.w	80039b8 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800385e:	2300      	movs	r3, #0
 8003860:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003862:	f107 0318 	add.w	r3, r7, #24
 8003866:	4618      	mov	r0, r3
 8003868:	f007 fa1a 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003872:	f7ff fe03 	bl	800347c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8003876:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 8003878:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800387c:	4a51      	ldr	r2, [pc, #324]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 800387e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003882:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003886:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 8003888:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800388c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 8003896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389a:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a4:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 80038a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 80038b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b8:	4a42      	ldr	r2, [pc, #264]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 80038ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038c2:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <HAL_SD_MspInit+0x1a4>)
 80038c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e2:	2303      	movs	r3, #3
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80038e8:	230b      	movs	r3, #11
 80038ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4834      	ldr	r0, [pc, #208]	; (80039c8 <HAL_SD_MspInit+0x1a8>)
 80038f6:	f004 fbe5 	bl	80080c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003906:	2301      	movs	r3, #1
 8003908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390c:	2303      	movs	r3, #3
 800390e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003912:	230b      	movs	r3, #11
 8003914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800391c:	4619      	mov	r1, r3
 800391e:	482a      	ldr	r0, [pc, #168]	; (80039c8 <HAL_SD_MspInit+0x1a8>)
 8003920:	f004 fbd0 	bl	80080c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003932:	2301      	movs	r3, #1
 8003934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800393e:	230b      	movs	r3, #11
 8003940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003944:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003948:	4619      	mov	r1, r3
 800394a:	4820      	ldr	r0, [pc, #128]	; (80039cc <HAL_SD_MspInit+0x1ac>)
 800394c:	f004 fbba 	bl	80080c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003964:	2303      	movs	r3, #3
 8003966:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800396a:	230b      	movs	r3, #11
 800396c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003970:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003974:	4619      	mov	r1, r3
 8003976:	4815      	ldr	r0, [pc, #84]	; (80039cc <HAL_SD_MspInit+0x1ac>)
 8003978:	f004 fba4 	bl	80080c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800397c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003996:	230a      	movs	r3, #10
 8003998:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800399c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039a0:	4619      	mov	r1, r3
 80039a2:	480a      	ldr	r0, [pc, #40]	; (80039cc <HAL_SD_MspInit+0x1ac>)
 80039a4:	f004 fb8e 	bl	80080c4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	207c      	movs	r0, #124	; 0x7c
 80039ae:	f002 fb30 	bl	8006012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80039b2:	207c      	movs	r0, #124	; 0x7c
 80039b4:	f002 fb47 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80039b8:	bf00      	nop
 80039ba:	37e8      	adds	r7, #232	; 0xe8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	48022400 	.word	0x48022400
 80039c4:	58024400 	.word	0x58024400
 80039c8:	58020c00 	.word	0x58020c00
 80039cc:	58021800 	.word	0x58021800

080039d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	; 0x38
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a4f      	ldr	r2, [pc, #316]	; (8003b2c <HAL_SPI_MspInit+0x15c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d12e      	bne.n	8003a50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039f2:	4b4f      	ldr	r3, [pc, #316]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 80039f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039f8:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 80039fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a10:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a16:	4a46      	ldr	r2, [pc, #280]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a20:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a2e:	23e0      	movs	r3, #224	; 0xe0
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a3e:	2305      	movs	r3, #5
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a46:	4619      	mov	r1, r3
 8003a48:	483a      	ldr	r0, [pc, #232]	; (8003b34 <HAL_SPI_MspInit+0x164>)
 8003a4a:	f004 fb3b 	bl	80080c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a4e:	e068      	b.n	8003b22 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a38      	ldr	r2, [pc, #224]	; (8003b38 <HAL_SPI_MspInit+0x168>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d12f      	bne.n	8003aba <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a5a:	4b35      	ldr	r3, [pc, #212]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a60:	4a33      	ldr	r2, [pc, #204]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a6a:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a88:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003a96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4822      	ldr	r0, [pc, #136]	; (8003b3c <HAL_SPI_MspInit+0x16c>)
 8003ab4:	f004 fb06 	bl	80080c4 <HAL_GPIO_Init>
}
 8003ab8:	e033      	b.n	8003b22 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_SPI_MspInit+0x170>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d12e      	bne.n	8003b22 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003ad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <HAL_SPI_MspInit+0x160>)
 8003af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003b00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b12:	2306      	movs	r3, #6
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4809      	ldr	r0, [pc, #36]	; (8003b44 <HAL_SPI_MspInit+0x174>)
 8003b1e:	f004 fad1 	bl	80080c4 <HAL_GPIO_Init>
}
 8003b22:	bf00      	nop
 8003b24:	3738      	adds	r7, #56	; 0x38
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40013000 	.word	0x40013000
 8003b30:	58024400 	.word	0x58024400
 8003b34:	58020000 	.word	0x58020000
 8003b38:	40003800 	.word	0x40003800
 8003b3c:	58020400 	.word	0x58020400
 8003b40:	40003c00 	.word	0x40003c00
 8003b44:	58020800 	.word	0x58020800

08003b48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d15d      	bne.n	8003c26 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b6a:	4b8e      	ldr	r3, [pc, #568]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b70:	4a8c      	ldr	r2, [pc, #560]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b7a:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b88:	4b86      	ldr	r3, [pc, #536]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b8e:	4a85      	ldr	r2, [pc, #532]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b98:	4b82      	ldr	r3, [pc, #520]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003baa:	2302      	movs	r3, #2
 8003bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4879      	ldr	r0, [pc, #484]	; (8003da8 <HAL_TIM_PWM_MspInit+0x260>)
 8003bc2:	f004 fa7f 	bl	80080c4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003bc6:	4b79      	ldr	r3, [pc, #484]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bc8:	4a79      	ldr	r2, [pc, #484]	; (8003db0 <HAL_TIM_PWM_MspInit+0x268>)
 8003bca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003bcc:	4b77      	ldr	r3, [pc, #476]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bce:	2214      	movs	r2, #20
 8003bd0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bd4:	2240      	movs	r2, #64	; 0x40
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd8:	4b74      	ldr	r3, [pc, #464]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003be6:	4b71      	ldr	r3, [pc, #452]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bec:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bee:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bf4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003bfc:	4b6b      	ldr	r3, [pc, #428]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c02:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003c08:	4868      	ldr	r0, [pc, #416]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003c0a:	f002 fa37 	bl	800607c <HAL_DMA_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003c14:	f7ff fc32 	bl	800347c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a64      	ldr	r2, [pc, #400]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c1e:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_TIM_PWM_MspInit+0x264>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003c24:	e119      	b.n	8003e5a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a62      	ldr	r2, [pc, #392]	; (8003db4 <HAL_TIM_PWM_MspInit+0x26c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d16d      	bne.n	8003d0c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c30:	4b5c      	ldr	r3, [pc, #368]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c36:	4a5b      	ldr	r2, [pc, #364]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c40:	4b58      	ldr	r3, [pc, #352]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003c4e:	4b5a      	ldr	r3, [pc, #360]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c50:	4a5a      	ldr	r2, [pc, #360]	; (8003dbc <HAL_TIM_PWM_MspInit+0x274>)
 8003c52:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003c54:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c56:	2218      	movs	r2, #24
 8003c58:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c60:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c6e:	4b52      	ldr	r3, [pc, #328]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c74:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c76:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c7c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003c7e:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003c90:	4849      	ldr	r0, [pc, #292]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003c92:	f002 f9f3 	bl	800607c <HAL_DMA_Init>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003c9c:	f7ff fbee 	bl	800347c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca6:	4a44      	ldr	r2, [pc, #272]	; (8003db8 <HAL_TIM_PWM_MspInit+0x270>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003cac:	4b44      	ldr	r3, [pc, #272]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cae:	4a45      	ldr	r2, [pc, #276]	; (8003dc4 <HAL_TIM_PWM_MspInit+0x27c>)
 8003cb0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cb4:	2217      	movs	r2, #23
 8003cb6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cbe:	4b40      	ldr	r3, [pc, #256]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cd2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cda:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003cdc:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003cee:	4834      	ldr	r0, [pc, #208]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003cf0:	f002 f9c4 	bl	800607c <HAL_DMA_Init>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003cfa:	f7ff fbbf 	bl	800347c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2f      	ldr	r2, [pc, #188]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
 8003d04:	4a2e      	ldr	r2, [pc, #184]	; (8003dc0 <HAL_TIM_PWM_MspInit+0x278>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d0a:	e0a6      	b.n	8003e5a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <HAL_TIM_PWM_MspInit+0x280>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d15e      	bne.n	8003dd4 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d1c:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_TIM_PWM_MspInit+0x25c>)
 8003d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d36:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <HAL_TIM_PWM_MspInit+0x288>)
 8003d38:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d3c:	221f      	movs	r2, #31
 8003d3e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d42:	2240      	movs	r2, #64	; 0x40
 8003d44:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d46:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d52:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d5a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d62:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003d76:	4815      	ldr	r0, [pc, #84]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d78:	f002 f980 	bl	800607c <HAL_DMA_Init>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003d82:	f7ff fb7b 	bl	800347c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_TIM_PWM_MspInit+0x284>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	201e      	movs	r0, #30
 8003d98:	f002 f93b 	bl	8006012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d9c:	201e      	movs	r0, #30
 8003d9e:	f002 f952 	bl	8006046 <HAL_NVIC_EnableIRQ>
}
 8003da2:	e05a      	b.n	8003e5a <HAL_TIM_PWM_MspInit+0x312>
 8003da4:	58024400 	.word	0x58024400
 8003da8:	58020000 	.word	0x58020000
 8003dac:	24000994 	.word	0x24000994
 8003db0:	40020028 	.word	0x40020028
 8003db4:	40000400 	.word	0x40000400
 8003db8:	24000a0c 	.word	0x24000a0c
 8003dbc:	40020058 	.word	0x40020058
 8003dc0:	24000a84 	.word	0x24000a84
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	24000afc 	.word	0x24000afc
 8003dd0:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_TIM_PWM_MspInit+0x31c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d13d      	bne.n	8003e5a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <HAL_TIM_PWM_MspInit+0x320>)
 8003de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003de4:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <HAL_TIM_PWM_MspInit+0x320>)
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_TIM_PWM_MspInit+0x320>)
 8003df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_TIM_PWM_MspInit+0x328>)
 8003e00:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e04:	223a      	movs	r2, #58	; 0x3a
 8003e06:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e0e:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e1a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e22:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e2a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003e32:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003e3e:	480b      	ldr	r0, [pc, #44]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e40:	f002 f91c 	bl	800607c <HAL_DMA_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003e4a:	f7ff fb17 	bl	800347c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
 8003e54:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <HAL_TIM_PWM_MspInit+0x324>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e5a:	bf00      	nop
 8003e5c:	3730      	adds	r7, #48	; 0x30
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	58024400 	.word	0x58024400
 8003e6c:	24000b74 	.word	0x24000b74
 8003e70:	40020040 	.word	0x40020040

08003e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_TIM_Base_MspInit+0x68>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10f      	bne.n	8003ea6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003e86:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8003e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8003e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8003e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003ea4:	e013      	b.n	8003ece <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <HAL_TIM_Base_MspInit+0x70>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10e      	bne.n	8003ece <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8003eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_TIM_Base_MspInit+0x6c>)
 8003ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40001c00 	.word	0x40001c00
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	40002000 	.word	0x40002000

08003ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f08:	d120      	bne.n	8003f4c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f10:	4a50      	ldr	r2, [pc, #320]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003f12:	f043 0302 	orr.w	r3, r3, #2
 8003f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f1a:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f32:	2302      	movs	r3, #2
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f3e:	f107 031c 	add.w	r3, r7, #28
 8003f42:	4619      	mov	r1, r3
 8003f44:	4844      	ldr	r0, [pc, #272]	; (8004058 <HAL_TIM_MspPostInit+0x170>)
 8003f46:	f004 f8bd 	bl	80080c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003f4a:	e07f      	b.n	800404c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a42      	ldr	r2, [pc, #264]	; (800405c <HAL_TIM_MspPostInit+0x174>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d11f      	bne.n	8003f96 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f5c:	4a3d      	ldr	r2, [pc, #244]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003f5e:	f043 0302 	orr.w	r3, r3, #2
 8003f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f74:	2330      	movs	r3, #48	; 0x30
 8003f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f84:	2302      	movs	r3, #2
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f88:	f107 031c 	add.w	r3, r7, #28
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4832      	ldr	r0, [pc, #200]	; (8004058 <HAL_TIM_MspPostInit+0x170>)
 8003f90:	f004 f898 	bl	80080c4 <HAL_GPIO_Init>
}
 8003f94:	e05a      	b.n	800404c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a31      	ldr	r2, [pc, #196]	; (8004060 <HAL_TIM_MspPostInit+0x178>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d131      	bne.n	8004004 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fa0:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fb0:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8003fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003fbe:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4822      	ldr	r0, [pc, #136]	; (8004064 <HAL_TIM_MspPostInit+0x17c>)
 8003fdc:	f004 f872 	bl	80080c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fea:	2302      	movs	r3, #2
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4819      	ldr	r0, [pc, #100]	; (8004064 <HAL_TIM_MspPostInit+0x17c>)
 8003ffe:	f004 f861 	bl	80080c4 <HAL_GPIO_Init>
}
 8004002:	e023      	b.n	800404c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_TIM_MspPostInit+0x180>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d11e      	bne.n	800404c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8004010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004014:	4a0f      	ldr	r2, [pc, #60]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_TIM_MspPostInit+0x16c>)
 8004020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800402c:	2308      	movs	r3, #8
 800402e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004034:	2302      	movs	r3, #2
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2300      	movs	r3, #0
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800403c:	2302      	movs	r3, #2
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	f107 031c 	add.w	r3, r7, #28
 8004044:	4619      	mov	r1, r3
 8004046:	4809      	ldr	r0, [pc, #36]	; (800406c <HAL_TIM_MspPostInit+0x184>)
 8004048:	f004 f83c 	bl	80080c4 <HAL_GPIO_Init>
}
 800404c:	bf00      	nop
 800404e:	3730      	adds	r7, #48	; 0x30
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	58024400 	.word	0x58024400
 8004058:	58020400 	.word	0x58020400
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800
 8004064:	58020c00 	.word	0x58020c00
 8004068:	40000c00 	.word	0x40000c00
 800406c:	58020000 	.word	0x58020000

08004070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b0ba      	sub	sp, #232	; 0xe8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004088:	f107 0318 	add.w	r3, r7, #24
 800408c:	22b8      	movs	r2, #184	; 0xb8
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f012 ffa5 	bl	8016fe0 <memset>
  if(huart->Instance==UART4)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a4d      	ldr	r2, [pc, #308]	; (80041d0 <HAL_UART_MspInit+0x160>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d147      	bne.n	8004130 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80040a0:	f04f 0202 	mov.w	r2, #2
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040b2:	f107 0318 	add.w	r3, r7, #24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f006 fdf2 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040c2:	f7ff f9db 	bl	800347c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80040c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040cc:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80040ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040d6:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80040d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e4:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80040e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ea:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_UART_MspInit+0x164>)
 80040f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410a:	2302      	movs	r3, #2
 800410c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800411c:	2308      	movs	r3, #8
 800411e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004122:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004126:	4619      	mov	r1, r3
 8004128:	482b      	ldr	r0, [pc, #172]	; (80041d8 <HAL_UART_MspInit+0x168>)
 800412a:	f003 ffcb 	bl	80080c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800412e:	e04a      	b.n	80041c6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_UART_MspInit+0x16c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d145      	bne.n	80041c6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800413a:	f04f 0201 	mov.w	r2, #1
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800414c:	f107 0318 	add.w	r3, r7, #24
 8004150:	4618      	mov	r0, r3
 8004152:	f006 fda5 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800415c:	f7ff f98e 	bl	800347c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004168:	f043 0320 	orr.w	r3, r3, #32
 800416c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_UART_MspInit+0x164>)
 8004190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800419c:	23c0      	movs	r3, #192	; 0xc0
 800419e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	2302      	movs	r3, #2
 80041a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80041b4:	2307      	movs	r3, #7
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041be:	4619      	mov	r1, r3
 80041c0:	4807      	ldr	r0, [pc, #28]	; (80041e0 <HAL_UART_MspInit+0x170>)
 80041c2:	f003 ff7f 	bl	80080c4 <HAL_GPIO_Init>
}
 80041c6:	bf00      	nop
 80041c8:	37e8      	adds	r7, #232	; 0xe8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40004c00 	.word	0x40004c00
 80041d4:	58024400 	.word	0x58024400
 80041d8:	58020400 	.word	0x58020400
 80041dc:	40011400 	.word	0x40011400
 80041e0:	58020800 	.word	0x58020800

080041e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041e8:	e7fe      	b.n	80041e8 <NMI_Handler+0x4>

080041ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ee:	e7fe      	b.n	80041ee <HardFault_Handler+0x4>

080041f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f4:	e7fe      	b.n	80041f4 <MemManage_Handler+0x4>

080041f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041fa:	e7fe      	b.n	80041fa <BusFault_Handler+0x4>

080041fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004200:	e7fe      	b.n	8004200 <UsageFault_Handler+0x4>

08004202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004230:	f000 fa4a 	bl	80046c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}

08004238 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <DMA1_Stream0_IRQHandler+0x10>)
 800423e:	f002 fa77 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	24000afc 	.word	0x24000afc

0800424c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8004250:	4802      	ldr	r0, [pc, #8]	; (800425c <DMA1_Stream1_IRQHandler+0x10>)
 8004252:	f002 fa6d 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	24000994 	.word	0x24000994

08004260 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <DMA1_Stream2_IRQHandler+0x10>)
 8004266:	f002 fa63 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	24000b74 	.word	0x24000b74

08004274 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <DMA1_Stream3_IRQHandler+0x10>)
 800427a:	f002 fa59 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	24000a0c 	.word	0x24000a0c

08004288 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <DMA1_Stream4_IRQHandler+0x10>)
 800428e:	f002 fa4f 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	24000a84 	.word	0x24000a84

0800429c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042a0:	4802      	ldr	r0, [pc, #8]	; (80042ac <DMA1_Stream5_IRQHandler+0x10>)
 80042a2:	f002 fa45 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	240003d4 	.word	0x240003d4

080042b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042b4:	4802      	ldr	r0, [pc, #8]	; (80042c0 <TIM4_IRQHandler+0x10>)
 80042b6:	f00b fd1f 	bl	800fcf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	24000864 	.word	0x24000864

080042c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <I2C2_EV_IRQHandler+0x10>)
 80042ca:	f004 f965 	bl	8008598 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	24000564 	.word	0x24000564

080042d8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <DMA2_Stream7_IRQHandler+0x10>)
 80042de:	f002 fa27 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2400044c 	.word	0x2400044c

080042ec <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80042f0:	4802      	ldr	r0, [pc, #8]	; (80042fc <OTG_HS_IRQHandler+0x10>)
 80042f2:	f004 fb5b 	bl	80089ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2400227c 	.word	0x2400227c

08004300 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8004304:	4802      	ldr	r0, [pc, #8]	; (8004310 <SDMMC2_IRQHandler+0x10>)
 8004306:	f009 fb21 	bl	800d94c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	240005b8 	.word	0x240005b8

08004314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return 1;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_kill>:

int _kill(int pid, int sig)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800432e:	f012 fe1f 	bl	8016f70 <__errno>
 8004332:	4603      	mov	r3, r0
 8004334:	2216      	movs	r2, #22
 8004336:	601a      	str	r2, [r3, #0]
  return -1;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_exit>:

void _exit (int status)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800434c:	f04f 31ff 	mov.w	r1, #4294967295
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ffe7 	bl	8004324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004356:	e7fe      	b.n	8004356 <_exit+0x12>

08004358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e00a      	b.n	8004380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800436a:	f3af 8000 	nop.w
 800436e:	4601      	mov	r1, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	60ba      	str	r2, [r7, #8]
 8004376:	b2ca      	uxtb	r2, r1
 8004378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3301      	adds	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	dbf0      	blt.n	800436a <_read+0x12>
  }

  return len;
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e009      	b.n	80043b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	60ba      	str	r2, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3301      	adds	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	dbf1      	blt.n	80043a4 <_write+0x12>
  }
  return len;
 80043c0:	687b      	ldr	r3, [r7, #4]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_close>:

int _close(int file)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f2:	605a      	str	r2, [r3, #4]
  return 0;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <_isatty>:

int _isatty(int file)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <_sbrk+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <_sbrk+0x60>)
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x64>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <_sbrk+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d207      	bcs.n	8004474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004464:	f012 fd84 	bl	8016f70 <__errno>
 8004468:	4603      	mov	r3, r0
 800446a:	220c      	movs	r2, #12
 800446c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e009      	b.n	8004488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <_sbrk+0x64>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <_sbrk+0x64>)
 8004484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	24050000 	.word	0x24050000
 8004494:	00000800 	.word	0x00000800
 8004498:	24000d78 	.word	0x24000d78
 800449c:	240029b8 	.word	0x240029b8

080044a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80044a4:	4b32      	ldr	r3, [pc, #200]	; (8004570 <SystemInit+0xd0>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	4a31      	ldr	r2, [pc, #196]	; (8004570 <SystemInit+0xd0>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044b4:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <SystemInit+0xd4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d807      	bhi.n	80044d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <SystemInit+0xd4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 030f 	bic.w	r3, r3, #15
 80044c8:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <SystemInit+0xd4>)
 80044ca:	f043 0307 	orr.w	r3, r3, #7
 80044ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80044d0:	4b29      	ldr	r3, [pc, #164]	; (8004578 <SystemInit+0xd8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <SystemInit+0xd8>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044dc:	4b26      	ldr	r3, [pc, #152]	; (8004578 <SystemInit+0xd8>)
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <SystemInit+0xd8>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4924      	ldr	r1, [pc, #144]	; (8004578 <SystemInit+0xd8>)
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <SystemInit+0xdc>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <SystemInit+0xd4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <SystemInit+0xd4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 030f 	bic.w	r3, r3, #15
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <SystemInit+0xd4>)
 8004504:	f043 0307 	orr.w	r3, r3, #7
 8004508:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800450a:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <SystemInit+0xd8>)
 800450c:	2200      	movs	r2, #0
 800450e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <SystemInit+0xd8>)
 8004512:	2200      	movs	r2, #0
 8004514:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <SystemInit+0xd8>)
 8004518:	2200      	movs	r2, #0
 800451a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <SystemInit+0xd8>)
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <SystemInit+0xe0>)
 8004520:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <SystemInit+0xd8>)
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <SystemInit+0xe4>)
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <SystemInit+0xd8>)
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <SystemInit+0xe8>)
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <SystemInit+0xd8>)
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <SystemInit+0xd8>)
 8004536:	4a14      	ldr	r2, [pc, #80]	; (8004588 <SystemInit+0xe8>)
 8004538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <SystemInit+0xd8>)
 800453c:	2200      	movs	r2, #0
 800453e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <SystemInit+0xd8>)
 8004542:	4a11      	ldr	r2, [pc, #68]	; (8004588 <SystemInit+0xe8>)
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <SystemInit+0xd8>)
 8004548:	2200      	movs	r2, #0
 800454a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <SystemInit+0xd8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <SystemInit+0xd8>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <SystemInit+0xd8>)
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <SystemInit+0xec>)
 8004560:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004564:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00
 8004574:	52002000 	.word	0x52002000
 8004578:	58024400 	.word	0x58024400
 800457c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004580:	02020200 	.word	0x02020200
 8004584:	01ff0000 	.word	0x01ff0000
 8004588:	01010280 	.word	0x01010280
 800458c:	52004000 	.word	0x52004000

08004590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004594:	f7ff ff84 	bl	80044a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004598:	480c      	ldr	r0, [pc, #48]	; (80045cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800459a:	490d      	ldr	r1, [pc, #52]	; (80045d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800459c:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800459e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a0:	e002      	b.n	80045a8 <LoopCopyDataInit>

080045a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045a6:	3304      	adds	r3, #4

080045a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045ac:	d3f9      	bcc.n	80045a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045b0:	4c0a      	ldr	r4, [pc, #40]	; (80045dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80045b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045b4:	e001      	b.n	80045ba <LoopFillZerobss>

080045b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b8:	3204      	adds	r2, #4

080045ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045bc:	d3fb      	bcc.n	80045b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045be:	f012 fcdd 	bl	8016f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045c2:	f7fc ff2d 	bl	8001420 <main>
  bx  lr
 80045c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80045cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80045d0:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 80045d4:	0801cec0 	.word	0x0801cec0
  ldr r2, =_sbss
 80045d8:	240002d8 	.word	0x240002d8
  ldr r4, =_ebss
 80045dc:	240029b8 	.word	0x240029b8

080045e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045e0:	e7fe      	b.n	80045e0 <ADC3_IRQHandler>
	...

080045e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ea:	2003      	movs	r0, #3
 80045ec:	f001 fd06 	bl	8005ffc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045f0:	f006 f980 	bl	800a8f4 <HAL_RCC_GetSysClockFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_Init+0x68>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	4913      	ldr	r1, [pc, #76]	; (8004650 <HAL_Init+0x6c>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800460e:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_Init+0x68>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <HAL_Init+0x6c>)
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <HAL_Init+0x70>)
 8004626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <HAL_Init+0x74>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800462e:	200f      	movs	r0, #15
 8004630:	f000 f814 	bl	800465c <HAL_InitTick>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e002      	b.n	8004644 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800463e:	f7fe ff23 	bl	8003488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58024400 	.word	0x58024400
 8004650:	0801c7d8 	.word	0x0801c7d8
 8004654:	24000004 	.word	0x24000004
 8004658:	24000000 	.word	0x24000000

0800465c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004664:	4b15      	ldr	r3, [pc, #84]	; (80046bc <HAL_InitTick+0x60>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e021      	b.n	80046b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_InitTick+0x64>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <HAL_InitTick+0x60>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	4618      	mov	r0, r3
 8004688:	f001 fceb 	bl	8006062 <HAL_SYSTICK_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e00e      	b.n	80046b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b0f      	cmp	r3, #15
 800469a:	d80a      	bhi.n	80046b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800469c:	2200      	movs	r2, #0
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	f001 fcb5 	bl	8006012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046a8:	4a06      	ldr	r2, [pc, #24]	; (80046c4 <HAL_InitTick+0x68>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	2400000c 	.word	0x2400000c
 80046c0:	24000000 	.word	0x24000000
 80046c4:	24000008 	.word	0x24000008

080046c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_IncTick+0x20>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_IncTick+0x24>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4413      	add	r3, r2
 80046d8:	4a04      	ldr	r2, [pc, #16]	; (80046ec <HAL_IncTick+0x24>)
 80046da:	6013      	str	r3, [r2, #0]
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2400000c 	.word	0x2400000c
 80046ec:	24000d7c 	.word	0x24000d7c

080046f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return uwTick;
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <HAL_GetTick+0x14>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	24000d7c 	.word	0x24000d7c

08004708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004710:	f7ff ffee 	bl	80046f0 <HAL_GetTick>
 8004714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d005      	beq.n	800472e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_Delay+0x44>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800472e:	bf00      	nop
 8004730:	f7ff ffde 	bl	80046f0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	429a      	cmp	r2, r3
 800473e:	d8f7      	bhi.n	8004730 <HAL_Delay+0x28>
  {
  }
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	2400000c 	.word	0x2400000c

08004750 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	58000400 	.word	0x58000400

0800477c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3360      	adds	r3, #96	; 0x60
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a10      	ldr	r2, [pc, #64]	; (8004844 <LL_ADC_SetOffset+0x60>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10b      	bne.n	8004820 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800481e:	e00b      	b.n	8004838 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	430b      	orrs	r3, r1
 8004832:	431a      	orrs	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	601a      	str	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	58026000 	.word	0x58026000

08004848 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3360      	adds	r3, #96	; 0x60
 8004856:	461a      	mov	r2, r3
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	611a      	str	r2, [r3, #16]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3360      	adds	r3, #96	; 0x60
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	601a      	str	r2, [r3, #0]
  }
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	58026000 	.word	0x58026000

080048ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <LL_ADC_SetOffsetSaturation+0x40>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10e      	bne.n	800491e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3360      	adds	r3, #96	; 0x60
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	431a      	orrs	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	58026000 	.word	0x58026000

08004930 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <LL_ADC_SetOffsetSign+0x40>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10e      	bne.n	8004962 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3360      	adds	r3, #96	; 0x60
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	431a      	orrs	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58026000 	.word	0x58026000

08004974 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3360      	adds	r3, #96	; 0x60
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <LL_ADC_SetOffsetState+0x50>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80049a6:	e007      	b.n	80049b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	601a      	str	r2, [r3, #0]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	58026000 	.word	0x58026000

080049c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3330      	adds	r3, #48	; 0x30
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	4413      	add	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	211f      	movs	r1, #31
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 011f 	and.w	r1, r3, #31
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0e5b      	lsrs	r3, r3, #25
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	4413      	add	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	0d1b      	lsrs	r3, r3, #20
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2107      	movs	r1, #7
 8004a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	401a      	ands	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	0d1b      	lsrs	r3, r3, #20
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	; (8004af0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d115      	bne.n	8004ab8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f003 0318 	and.w	r3, r3, #24
 8004aa2:	4914      	ldr	r1, [pc, #80]	; (8004af4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004aa4:	40d9      	lsrs	r1, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	400b      	ands	r3, r1
 8004aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004ab6:	e014      	b.n	8004ae2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f003 0318 	and.w	r3, r3, #24
 8004ace:	4909      	ldr	r1, [pc, #36]	; (8004af4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004ad0:	40d9      	lsrs	r1, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	400b      	ands	r3, r1
 8004ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ada:	431a      	orrs	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	58026000 	.word	0x58026000
 8004af4:	000fffff 	.word	0x000fffff

08004af8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6093      	str	r3, [r2, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	5fffffc0 	.word	0x5fffffc0

08004b1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b30:	d101      	bne.n	8004b36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <LL_ADC_EnableInternalRegulator+0x24>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	6fffffc0 	.word	0x6fffffc0

08004b6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b80:	d101      	bne.n	8004b86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <LL_ADC_IsEnabled+0x18>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <LL_ADC_IsEnabled+0x1a>
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d101      	bne.n	8004bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d101      	bne.n	8004bf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e1ee      	b.n	8005000 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fe fc43 	bl	80034bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff67 	bl	8004b1c <LL_ADC_IsDeepPowerDownEnabled>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff4d 	bl	8004af8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff82 	bl	8004b6c <LL_ADC_IsInternalRegulatorEnabled>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d114      	bne.n	8004c98 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff ff66 	bl	8004b44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c78:	4b8e      	ldr	r3, [pc, #568]	; (8004eb4 <HAL_ADC_Init+0x2ac>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	4a8e      	ldr	r2, [pc, #568]	; (8004eb8 <HAL_ADC_Init+0x2b0>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	3301      	adds	r3, #1
 8004c88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c8a:	e002      	b.n	8004c92 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f9      	bne.n	8004c8c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff65 	bl	8004b6c <LL_ADC_IsInternalRegulatorEnabled>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cac:	f043 0210 	orr.w	r2, r3, #16
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb8:	f043 0201 	orr.w	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff76 	bl	8004bba <LL_ADC_REG_IsConversionOngoing>
 8004cce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 8188 	bne.w	8004fee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 8184 	bne.w	8004fee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff4a 	bl	8004b94 <LL_ADC_IsEnabled>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d136      	bne.n	8004d74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6c      	ldr	r2, [pc, #432]	; (8004ebc <HAL_ADC_Init+0x2b4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_ADC_Init+0x112>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a6a      	ldr	r2, [pc, #424]	; (8004ec0 <HAL_ADC_Init+0x2b8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d10e      	bne.n	8004d38 <HAL_ADC_Init+0x130>
 8004d1a:	4868      	ldr	r0, [pc, #416]	; (8004ebc <HAL_ADC_Init+0x2b4>)
 8004d1c:	f7ff ff3a 	bl	8004b94 <LL_ADC_IsEnabled>
 8004d20:	4604      	mov	r4, r0
 8004d22:	4867      	ldr	r0, [pc, #412]	; (8004ec0 <HAL_ADC_Init+0x2b8>)
 8004d24:	f7ff ff36 	bl	8004b94 <LL_ADC_IsEnabled>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4323      	orrs	r3, r4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e008      	b.n	8004d4a <HAL_ADC_Init+0x142>
 8004d38:	4862      	ldr	r0, [pc, #392]	; (8004ec4 <HAL_ADC_Init+0x2bc>)
 8004d3a:	f7ff ff2b 	bl	8004b94 <LL_ADC_IsEnabled>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d012      	beq.n	8004d74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a5a      	ldr	r2, [pc, #360]	; (8004ebc <HAL_ADC_Init+0x2b4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_ADC_Init+0x15a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a58      	ldr	r2, [pc, #352]	; (8004ec0 <HAL_ADC_Init+0x2b8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_ADC_Init+0x15e>
 8004d62:	4a59      	ldr	r2, [pc, #356]	; (8004ec8 <HAL_ADC_Init+0x2c0>)
 8004d64:	e000      	b.n	8004d68 <HAL_ADC_Init+0x160>
 8004d66:	4a59      	ldr	r2, [pc, #356]	; (8004ecc <HAL_ADC_Init+0x2c4>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7ff fd04 	bl	800477c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_ADC_Init+0x2bc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d129      	bne.n	8004dd2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7e5b      	ldrb	r3, [r3, #25]
 8004d82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004d88:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004d8e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d013      	beq.n	8004dc0 <HAL_ADC_Init+0x1b8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d00d      	beq.n	8004dbc <HAL_ADC_Init+0x1b4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b1c      	cmp	r3, #28
 8004da6:	d007      	beq.n	8004db8 <HAL_ADC_Init+0x1b0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b18      	cmp	r3, #24
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_Init+0x1ac>
 8004db0:	2318      	movs	r3, #24
 8004db2:	e006      	b.n	8004dc2 <HAL_ADC_Init+0x1ba>
 8004db4:	2300      	movs	r3, #0
 8004db6:	e004      	b.n	8004dc2 <HAL_ADC_Init+0x1ba>
 8004db8:	2310      	movs	r3, #16
 8004dba:	e002      	b.n	8004dc2 <HAL_ADC_Init+0x1ba>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	e000      	b.n	8004dc2 <HAL_ADC_Init+0x1ba>
 8004dc0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004dc2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e00e      	b.n	8004df0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7e5b      	ldrb	r3, [r3, #25]
 8004dd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ddc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004de2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d106      	bne.n	8004e08 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	045b      	lsls	r3, r3, #17
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a26      	ldr	r2, [pc, #152]	; (8004ec4 <HAL_ADC_Init+0x2bc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d115      	bne.n	8004e5a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <HAL_ADC_Init+0x2c8>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	611a      	str	r2, [r3, #16]
 8004e58:	e009      	b.n	8004e6e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <HAL_ADC_Init+0x2cc>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fea1 	bl	8004bba <LL_ADC_REG_IsConversionOngoing>
 8004e78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff feae 	bl	8004be0 <LL_ADC_INJ_IsConversionOngoing>
 8004e84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 808e 	bne.w	8004faa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 808a 	bne.w	8004faa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <HAL_ADC_Init+0x2bc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	7e1b      	ldrb	r3, [r3, #24]
 8004ea4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e018      	b.n	8004ee6 <HAL_ADC_Init+0x2de>
 8004eb4:	24000000 	.word	0x24000000
 8004eb8:	053e2d63 	.word	0x053e2d63
 8004ebc:	40022000 	.word	0x40022000
 8004ec0:	40022100 	.word	0x40022100
 8004ec4:	58026000 	.word	0x58026000
 8004ec8:	40022300 	.word	0x40022300
 8004ecc:	58026300 	.word	0x58026300
 8004ed0:	fff04007 	.word	0xfff04007
 8004ed4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7e1b      	ldrb	r3, [r3, #24]
 8004edc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b46      	ldr	r3, [pc, #280]	; (8005008 <HAL_ADC_Init+0x400>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d137      	bne.n	8004f74 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	; (800500c <HAL_ADC_Init+0x404>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d116      	bne.n	8004f42 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	4b3d      	ldr	r3, [pc, #244]	; (8005010 <HAL_ADC_Init+0x408>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f26:	4311      	orrs	r1, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f2c:	4311      	orrs	r1, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f32:	430a      	orrs	r2, r1
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	611a      	str	r2, [r3, #16]
 8004f40:	e020      	b.n	8004f84 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <HAL_ADC_Init+0x40c>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0411      	lsls	r1, r2, #16
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f58:	4311      	orrs	r1, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f5e:	4311      	orrs	r1, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f64:	430a      	orrs	r2, r1
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	611a      	str	r2, [r3, #16]
 8004f72:	e007      	b.n	8004f84 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_ADC_Init+0x404>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d002      	beq.n	8004faa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fd63 	bl	8005a70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10c      	bne.n	8004fcc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	f023 010f 	bic.w	r1, r3, #15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8004fca:	e007      	b.n	8004fdc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 020f 	bic.w	r2, r2, #15
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe0:	f023 0303 	bic.w	r3, r3, #3
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	661a      	str	r2, [r3, #96]	; 0x60
 8004fec:	e007      	b.n	8004ffe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ffe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3724      	adds	r7, #36	; 0x24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}
 8005008:	ffffbffc 	.word	0xffffbffc
 800500c:	58026000 	.word	0x58026000
 8005010:	fc00f81f 	.word	0xfc00f81f
 8005014:	fc00f81e 	.word	0xfc00f81e

08005018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b0b9      	sub	sp, #228	; 0xe4
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005032:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4aa9      	ldr	r2, [pc, #676]	; (80052e0 <HAL_ADC_ConfigChannel+0x2c8>)
 800503a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d102      	bne.n	800504c <HAL_ADC_ConfigChannel+0x34>
 8005046:	2302      	movs	r3, #2
 8005048:	f000 bcfa 	b.w	8005a40 <HAL_ADC_ConfigChannel+0xa28>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fdae 	bl	8004bba <LL_ADC_REG_IsConversionOngoing>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	f040 84de 	bne.w	8005a22 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a9e      	ldr	r2, [pc, #632]	; (80052e4 <HAL_ADC_ConfigChannel+0x2cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d033      	beq.n	80050d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005078:	2b00      	cmp	r3, #0
 800507a:	d108      	bne.n	800508e <HAL_ADC_ConfigChannel+0x76>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	0e9b      	lsrs	r3, r3, #26
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2201      	movs	r2, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	e01d      	b.n	80050ca <HAL_ADC_ConfigChannel+0xb2>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800509a:	fa93 f3a3 	rbit	r3, r3
 800509e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80050b2:	2320      	movs	r3, #32
 80050b4:	e004      	b.n	80050c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80050b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2201      	movs	r2, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	69d1      	ldr	r1, [r2, #28]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	f7ff fc6f 	bl	80049c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fd63 	bl	8004bba <LL_ADC_REG_IsConversionOngoing>
 80050f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fd6f 	bl	8004be0 <LL_ADC_INJ_IsConversionOngoing>
 8005102:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 8270 	bne.w	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005114:	2b00      	cmp	r3, #0
 8005116:	f040 826b 	bne.w	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	461a      	mov	r2, r3
 8005128:	f7ff fc7a 	bl	8004a20 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6c      	ldr	r2, [pc, #432]	; (80052e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	08db      	lsrs	r3, r3, #3
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005150:	e032      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005152:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_ADC_ConfigChannel+0x2d0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800515a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515e:	d10b      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x160>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	e01d      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x19c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_ADC_ConfigChannel+0x186>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	089b      	lsrs	r3, r3, #2
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	e00a      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x19c>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d048      	beq.n	8005252 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	6919      	ldr	r1, [r3, #16]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d0:	f7ff fb08 	bl	80047e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a42      	ldr	r2, [pc, #264]	; (80052e4 <HAL_ADC_ConfigChannel+0x2cc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d119      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6919      	ldr	r1, [r3, #16]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f7ff fba0 	bl	8004930 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	6919      	ldr	r1, [r3, #16]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d102      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x1f0>
 8005202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005206:	e000      	b.n	800520a <HAL_ADC_ConfigChannel+0x1f2>
 8005208:	2300      	movs	r3, #0
 800520a:	461a      	mov	r2, r3
 800520c:	f7ff fb6e 	bl	80048ec <LL_ADC_SetOffsetSaturation>
 8005210:	e1ee      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6919      	ldr	r1, [r3, #16]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <HAL_ADC_ConfigChannel+0x212>
 8005224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005228:	e000      	b.n	800522c <HAL_ADC_ConfigChannel+0x214>
 800522a:	2300      	movs	r3, #0
 800522c:	461a      	mov	r2, r3
 800522e:	f7ff fb3b 	bl	80048a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6919      	ldr	r1, [r3, #16]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	7e1b      	ldrb	r3, [r3, #24]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d102      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x230>
 8005242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005246:	e000      	b.n	800524a <HAL_ADC_ConfigChannel+0x232>
 8005248:	2300      	movs	r3, #0
 800524a:	461a      	mov	r2, r3
 800524c:	f7ff fb12 	bl	8004874 <LL_ADC_SetDataRightShift>
 8005250:	e1ce      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a23      	ldr	r2, [pc, #140]	; (80052e4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	f040 8181 	bne.w	8005560 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff faef 	bl	8004848 <LL_ADC_GetOffsetChannel>
 800526a:	4603      	mov	r3, r0
 800526c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <HAL_ADC_ConfigChannel+0x272>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2100      	movs	r1, #0
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fae4 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005280:	4603      	mov	r3, r0
 8005282:	0e9b      	lsrs	r3, r3, #26
 8005284:	f003 021f 	and.w	r2, r3, #31
 8005288:	e01e      	b.n	80052c8 <HAL_ADC_ConfigChannel+0x2b0>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fad9 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80052a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80052b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80052b8:	2320      	movs	r3, #32
 80052ba:	e004      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80052bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052c0:	fab3 f383 	clz	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <HAL_ADC_ConfigChannel+0x2d4>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	0e9b      	lsrs	r3, r3, #26
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	e01e      	b.n	800531e <HAL_ADC_ConfigChannel+0x306>
 80052e0:	47ff0000 	.word	0x47ff0000
 80052e4:	58026000 	.word	0x58026000
 80052e8:	5c001000 	.word	0x5c001000
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005310:	2320      	movs	r3, #32
 8005312:	e004      	b.n	800531e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	429a      	cmp	r2, r3
 8005320:	d106      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fb22 	bl	8004974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fa86 	bl	8004848 <LL_ADC_GetOffsetChannel>
 800533c:	4603      	mov	r3, r0
 800533e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_ADC_ConfigChannel+0x344>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2101      	movs	r1, #1
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fa7b 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005352:	4603      	mov	r3, r0
 8005354:	0e9b      	lsrs	r3, r3, #26
 8005356:	f003 021f 	and.w	r2, r3, #31
 800535a:	e01e      	b.n	800539a <HAL_ADC_ConfigChannel+0x382>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fa70 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005368:	4603      	mov	r3, r0
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800537a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800537e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800538a:	2320      	movs	r3, #32
 800538c:	e004      	b.n	8005398 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800538e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x39a>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	0e9b      	lsrs	r3, r3, #26
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	e018      	b.n	80053e4 <HAL_ADC_ConfigChannel+0x3cc>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053be:	fa93 f3a3 	rbit	r3, r3
 80053c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80053c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80053ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80053d6:	2320      	movs	r3, #32
 80053d8:	e004      	b.n	80053e4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80053da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d106      	bne.n	80053f6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2200      	movs	r2, #0
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fabf 	bl	8004974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2102      	movs	r1, #2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fa23 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005402:	4603      	mov	r3, r0
 8005404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x40a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2102      	movs	r1, #2
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff fa18 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005418:	4603      	mov	r3, r0
 800541a:	0e9b      	lsrs	r3, r3, #26
 800541c:	f003 021f 	and.w	r2, r3, #31
 8005420:	e01e      	b.n	8005460 <HAL_ADC_ConfigChannel+0x448>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fa0d 	bl	8004848 <LL_ADC_GetOffsetChannel>
 800542e:	4603      	mov	r3, r0
 8005430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005450:	2320      	movs	r3, #32
 8005452:	e004      	b.n	800545e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005468:	2b00      	cmp	r3, #0
 800546a:	d105      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x460>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	0e9b      	lsrs	r3, r3, #26
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	e014      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x48a>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800548c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005494:	2320      	movs	r3, #32
 8005496:	e004      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800549c:	fab3 f383 	clz	r3, r3
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d106      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2102      	movs	r1, #2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fa60 	bl	8004974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2103      	movs	r1, #3
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff f9c4 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x4c8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2103      	movs	r1, #3
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff f9b9 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80054d6:	4603      	mov	r3, r0
 80054d8:	0e9b      	lsrs	r3, r3, #26
 80054da:	f003 021f 	and.w	r2, r3, #31
 80054de:	e017      	b.n	8005510 <HAL_ADC_ConfigChannel+0x4f8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2103      	movs	r1, #3
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff f9ae 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80054ec:	4603      	mov	r3, r0
 80054ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80054fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005502:	2320      	movs	r3, #32
 8005504:	e003      	b.n	800550e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x510>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0e9b      	lsrs	r3, r3, #26
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	e011      	b.n	800554c <HAL_ADC_ConfigChannel+0x534>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005530:	fa93 f3a3 	rbit	r3, r3
 8005534:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005538:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800553a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e003      	b.n	800554c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	429a      	cmp	r2, r3
 800554e:	d14f      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2200      	movs	r2, #0
 8005556:	2103      	movs	r1, #3
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fa0b 	bl	8004974 <LL_ADC_SetOffsetState>
 800555e:	e047      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	069b      	lsls	r3, r3, #26
 8005570:	429a      	cmp	r2, r3
 8005572:	d107      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005582:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	069b      	lsls	r3, r3, #26
 8005594:	429a      	cmp	r2, r3
 8005596:	d107      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	069b      	lsls	r3, r3, #26
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d107      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	069b      	lsls	r3, r3, #26
 80055dc:	429a      	cmp	r2, r3
 80055de:	d107      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff facd 	bl	8004b94 <LL_ADC_IsEnabled>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 8219 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	461a      	mov	r2, r3
 8005610:	f7ff fa32 	bl	8004a78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4aa1      	ldr	r2, [pc, #644]	; (80058a0 <HAL_ADC_ConfigChannel+0x888>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f040 812e 	bne.w	800587c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x630>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	3301      	adds	r3, #1
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2b09      	cmp	r3, #9
 800563e:	bf94      	ite	ls
 8005640:	2301      	movls	r3, #1
 8005642:	2300      	movhi	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e019      	b.n	800567c <HAL_ADC_ConfigChannel+0x664>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005650:	fa93 f3a3 	rbit	r3, r3
 8005654:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005658:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800565a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005660:	2320      	movs	r3, #32
 8005662:	e003      	b.n	800566c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005666:	fab3 f383 	clz	r3, r3
 800566a:	b2db      	uxtb	r3, r3
 800566c:	3301      	adds	r3, #1
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2b09      	cmp	r3, #9
 8005674:	bf94      	ite	ls
 8005676:	2301      	movls	r3, #1
 8005678:	2300      	movhi	r3, #0
 800567a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800567c:	2b00      	cmp	r3, #0
 800567e:	d079      	beq.n	8005774 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <HAL_ADC_ConfigChannel+0x684>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	0e9b      	lsrs	r3, r3, #26
 8005692:	3301      	adds	r3, #1
 8005694:	069b      	lsls	r3, r3, #26
 8005696:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800569a:	e015      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x6b0>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a4:	fa93 f3a3 	rbit	r3, r3
 80056a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80056aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80056ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80056b4:	2320      	movs	r3, #32
 80056b6:	e003      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80056b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3301      	adds	r3, #1
 80056c2:	069b      	lsls	r3, r3, #26
 80056c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_ADC_ConfigChannel+0x6d0>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	0e9b      	lsrs	r3, r3, #26
 80056da:	3301      	adds	r3, #1
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	e017      	b.n	8005718 <HAL_ADC_ConfigChannel+0x700>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f0:	fa93 f3a3 	rbit	r3, r3
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80056fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005700:	2320      	movs	r3, #32
 8005702:	e003      	b.n	800570c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	fab3 f383 	clz	r3, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	3301      	adds	r3, #1
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	ea42 0103 	orr.w	r1, r2, r3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <HAL_ADC_ConfigChannel+0x726>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	0e9b      	lsrs	r3, r3, #26
 800572e:	3301      	adds	r3, #1
 8005730:	f003 021f 	and.w	r2, r3, #31
 8005734:	4613      	mov	r3, r2
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	4413      	add	r3, r2
 800573a:	051b      	lsls	r3, r3, #20
 800573c:	e018      	b.n	8005770 <HAL_ADC_ConfigChannel+0x758>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005756:	2320      	movs	r3, #32
 8005758:	e003      	b.n	8005762 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
 8005762:	3301      	adds	r3, #1
 8005764:	f003 021f 	and.w	r2, r3, #31
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005770:	430b      	orrs	r3, r1
 8005772:	e07e      	b.n	8005872 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x778>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0e9b      	lsrs	r3, r3, #26
 8005786:	3301      	adds	r3, #1
 8005788:	069b      	lsls	r3, r3, #26
 800578a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800578e:	e015      	b.n	80057bc <HAL_ADC_ConfigChannel+0x7a4>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	fa93 f3a3 	rbit	r3, r3
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80057a8:	2320      	movs	r3, #32
 80057aa:	e003      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	069b      	lsls	r3, r3, #26
 80057b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <HAL_ADC_ConfigChannel+0x7c4>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	0e9b      	lsrs	r3, r3, #26
 80057ce:	3301      	adds	r3, #1
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	2101      	movs	r1, #1
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	e017      	b.n	800580c <HAL_ADC_ConfigChannel+0x7f4>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fa93 f3a3 	rbit	r3, r3
 80057e8:	61bb      	str	r3, [r7, #24]
  return result;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80057f4:	2320      	movs	r3, #32
 80057f6:	e003      	b.n	8005800 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	fab3 f383 	clz	r3, r3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	3301      	adds	r3, #1
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2101      	movs	r1, #1
 8005808:	fa01 f303 	lsl.w	r3, r1, r3
 800580c:	ea42 0103 	orr.w	r1, r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x820>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	0e9b      	lsrs	r3, r3, #26
 8005822:	3301      	adds	r3, #1
 8005824:	f003 021f 	and.w	r2, r3, #31
 8005828:	4613      	mov	r3, r2
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	4413      	add	r3, r2
 800582e:	3b1e      	subs	r3, #30
 8005830:	051b      	lsls	r3, r3, #20
 8005832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005836:	e01b      	b.n	8005870 <HAL_ADC_ConfigChannel+0x858>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	fa93 f3a3 	rbit	r3, r3
 8005844:	60fb      	str	r3, [r7, #12]
  return result;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005850:	2320      	movs	r3, #32
 8005852:	e003      	b.n	800585c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	fab3 f383 	clz	r3, r3
 800585a:	b2db      	uxtb	r3, r3
 800585c:	3301      	adds	r3, #1
 800585e:	f003 021f 	and.w	r2, r3, #31
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	3b1e      	subs	r3, #30
 800586a:	051b      	lsls	r3, r3, #20
 800586c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005870:	430b      	orrs	r3, r1
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	4619      	mov	r1, r3
 8005878:	f7ff f8d2 	bl	8004a20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f280 80d7 	bge.w	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <HAL_ADC_ConfigChannel+0x88c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_ADC_ConfigChannel+0x882>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <HAL_ADC_ConfigChannel+0x890>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10a      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x898>
 800589a:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_ADC_ConfigChannel+0x894>)
 800589c:	e009      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x89a>
 800589e:	bf00      	nop
 80058a0:	47ff0000 	.word	0x47ff0000
 80058a4:	40022000 	.word	0x40022000
 80058a8:	40022100 	.word	0x40022100
 80058ac:	40022300 	.word	0x40022300
 80058b0:	4b65      	ldr	r3, [pc, #404]	; (8005a48 <HAL_ADC_ConfigChannel+0xa30>)
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe ff88 	bl	80047c8 <LL_ADC_GetCommonPathInternalCh>
 80058b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a62      	ldr	r2, [pc, #392]	; (8005a4c <HAL_ADC_ConfigChannel+0xa34>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_ADC_ConfigChannel+0x8b8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a61      	ldr	r2, [pc, #388]	; (8005a50 <HAL_ADC_ConfigChannel+0xa38>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10e      	bne.n	80058ee <HAL_ADC_ConfigChannel+0x8d6>
 80058d0:	485e      	ldr	r0, [pc, #376]	; (8005a4c <HAL_ADC_ConfigChannel+0xa34>)
 80058d2:	f7ff f95f 	bl	8004b94 <LL_ADC_IsEnabled>
 80058d6:	4604      	mov	r4, r0
 80058d8:	485d      	ldr	r0, [pc, #372]	; (8005a50 <HAL_ADC_ConfigChannel+0xa38>)
 80058da:	f7ff f95b 	bl	8004b94 <LL_ADC_IsEnabled>
 80058de:	4603      	mov	r3, r0
 80058e0:	4323      	orrs	r3, r4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	e008      	b.n	8005900 <HAL_ADC_ConfigChannel+0x8e8>
 80058ee:	4859      	ldr	r0, [pc, #356]	; (8005a54 <HAL_ADC_ConfigChannel+0xa3c>)
 80058f0:	f7ff f950 	bl	8004b94 <LL_ADC_IsEnabled>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8084 	beq.w	8005a0e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a53      	ldr	r2, [pc, #332]	; (8005a58 <HAL_ADC_ConfigChannel+0xa40>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d132      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x95e>
 8005910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d12c      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a4c      	ldr	r2, [pc, #304]	; (8005a54 <HAL_ADC_ConfigChannel+0xa3c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	f040 8086 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a47      	ldr	r2, [pc, #284]	; (8005a4c <HAL_ADC_ConfigChannel+0xa34>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_ADC_ConfigChannel+0x924>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a46      	ldr	r2, [pc, #280]	; (8005a50 <HAL_ADC_ConfigChannel+0xa38>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x928>
 800593c:	4a47      	ldr	r2, [pc, #284]	; (8005a5c <HAL_ADC_ConfigChannel+0xa44>)
 800593e:	e000      	b.n	8005942 <HAL_ADC_ConfigChannel+0x92a>
 8005940:	4a41      	ldr	r2, [pc, #260]	; (8005a48 <HAL_ADC_ConfigChannel+0xa30>)
 8005942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fe ff28 	bl	80047a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005952:	4b43      	ldr	r3, [pc, #268]	; (8005a60 <HAL_ADC_ConfigChannel+0xa48>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	4a42      	ldr	r2, [pc, #264]	; (8005a64 <HAL_ADC_ConfigChannel+0xa4c>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	099b      	lsrs	r3, r3, #6
 8005960:	3301      	adds	r3, #1
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005966:	e002      	b.n	800596e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3b01      	subs	r3, #1
 800596c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f9      	bne.n	8005968 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005974:	e05e      	b.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3b      	ldr	r2, [pc, #236]	; (8005a68 <HAL_ADC_ConfigChannel+0xa50>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d120      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x9aa>
 8005980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11a      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <HAL_ADC_ConfigChannel+0xa3c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d14e      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <HAL_ADC_ConfigChannel+0xa34>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_ADC_ConfigChannel+0x992>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <HAL_ADC_ConfigChannel+0xa38>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x996>
 80059aa:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <HAL_ADC_ConfigChannel+0xa44>)
 80059ac:	e000      	b.n	80059b0 <HAL_ADC_ConfigChannel+0x998>
 80059ae:	4a26      	ldr	r2, [pc, #152]	; (8005a48 <HAL_ADC_ConfigChannel+0xa30>)
 80059b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7fe fef1 	bl	80047a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059c0:	e038      	b.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <HAL_ADC_ConfigChannel+0xa54>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d133      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
 80059cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d12d      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_ADC_ConfigChannel+0xa3c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d128      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <HAL_ADC_ConfigChannel+0xa34>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_ADC_ConfigChannel+0x9de>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_ADC_ConfigChannel+0xa38>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d101      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x9e2>
 80059f6:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <HAL_ADC_ConfigChannel+0xa44>)
 80059f8:	e000      	b.n	80059fc <HAL_ADC_ConfigChannel+0x9e4>
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <HAL_ADC_ConfigChannel+0xa30>)
 80059fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fecb 	bl	80047a2 <LL_ADC_SetCommonPathInternalCh>
 8005a0c:	e012      	b.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005a20:	e008      	b.n	8005a34 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	37e4      	adds	r7, #228	; 0xe4
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd90      	pop	{r4, r7, pc}
 8005a48:	58026300 	.word	0x58026300
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	40022100 	.word	0x40022100
 8005a54:	58026000 	.word	0x58026000
 8005a58:	c7520000 	.word	0xc7520000
 8005a5c:	40022300 	.word	0x40022300
 8005a60:	24000000 	.word	0x24000000
 8005a64:	053e2d63 	.word	0x053e2d63
 8005a68:	c3210000 	.word	0xc3210000
 8005a6c:	cb840000 	.word	0xcb840000

08005a70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a6c      	ldr	r2, [pc, #432]	; (8005c30 <ADC_ConfigureBoostMode+0x1c0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <ADC_ConfigureBoostMode+0x1c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6b      	ldr	r2, [pc, #428]	; (8005c34 <ADC_ConfigureBoostMode+0x1c4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d109      	bne.n	8005aa0 <ADC_ConfigureBoostMode+0x30>
 8005a8c:	4b6a      	ldr	r3, [pc, #424]	; (8005c38 <ADC_ConfigureBoostMode+0x1c8>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e008      	b.n	8005ab2 <ADC_ConfigureBoostMode+0x42>
 8005aa0:	4b66      	ldr	r3, [pc, #408]	; (8005c3c <ADC_ConfigureBoostMode+0x1cc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01c      	beq.n	8005af0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005ab6:	f005 f897 	bl	800abe8 <HAL_RCC_GetHCLKFreq>
 8005aba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ac4:	d010      	beq.n	8005ae8 <ADC_ConfigureBoostMode+0x78>
 8005ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aca:	d873      	bhi.n	8005bb4 <ADC_ConfigureBoostMode+0x144>
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d002      	beq.n	8005ad8 <ADC_ConfigureBoostMode+0x68>
 8005ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad6:	d16d      	bne.n	8005bb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	60fb      	str	r3, [r7, #12]
        break;
 8005ae6:	e068      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	60fb      	str	r3, [r7, #12]
        break;
 8005aee:	e064      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005af0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	f006 fa72 	bl	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005afc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005b06:	d051      	beq.n	8005bac <ADC_ConfigureBoostMode+0x13c>
 8005b08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005b0c:	d854      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b12:	d047      	beq.n	8005ba4 <ADC_ConfigureBoostMode+0x134>
 8005b14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b18:	d84e      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b1e:	d03d      	beq.n	8005b9c <ADC_ConfigureBoostMode+0x12c>
 8005b20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b24:	d848      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b2a:	d033      	beq.n	8005b94 <ADC_ConfigureBoostMode+0x124>
 8005b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b30:	d842      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b36:	d029      	beq.n	8005b8c <ADC_ConfigureBoostMode+0x11c>
 8005b38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b3c:	d83c      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b42:	d01a      	beq.n	8005b7a <ADC_ConfigureBoostMode+0x10a>
 8005b44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b48:	d836      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b4e:	d014      	beq.n	8005b7a <ADC_ConfigureBoostMode+0x10a>
 8005b50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b54:	d830      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5a:	d00e      	beq.n	8005b7a <ADC_ConfigureBoostMode+0x10a>
 8005b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b60:	d82a      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b66:	d008      	beq.n	8005b7a <ADC_ConfigureBoostMode+0x10a>
 8005b68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b6c:	d824      	bhi.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
 8005b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b72:	d002      	beq.n	8005b7a <ADC_ConfigureBoostMode+0x10a>
 8005b74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b78:	d11e      	bne.n	8005bb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	0c9b      	lsrs	r3, r3, #18
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	60fb      	str	r3, [r7, #12]
        break;
 8005b8a:	e016      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	60fb      	str	r3, [r7, #12]
        break;
 8005b92:	e012      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	60fb      	str	r3, [r7, #12]
        break;
 8005b9a:	e00e      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	099b      	lsrs	r3, r3, #6
 8005ba0:	60fb      	str	r3, [r7, #12]
        break;
 8005ba2:	e00a      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	09db      	lsrs	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
        break;
 8005baa:	e006      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	60fb      	str	r3, [r7, #12]
        break;
 8005bb2:	e002      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
        break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005bb8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <ADC_ConfigureBoostMode+0x1d0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d808      	bhi.n	8005bda <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bd6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005bd8:	e025      	b.n	8005c26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <ADC_ConfigureBoostMode+0x1d4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d80a      	bhi.n	8005bf8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf4:	609a      	str	r2, [r3, #8]
}
 8005bf6:	e016      	b.n	8005c26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <ADC_ConfigureBoostMode+0x1d8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d80a      	bhi.n	8005c16 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	e007      	b.n	8005c26 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005c24:	609a      	str	r2, [r3, #8]
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40022000 	.word	0x40022000
 8005c34:	40022100 	.word	0x40022100
 8005c38:	40022300 	.word	0x40022300
 8005c3c:	58026300 	.word	0x58026300
 8005c40:	005f5e10 	.word	0x005f5e10
 8005c44:	00bebc20 	.word	0x00bebc20
 8005c48:	017d7840 	.word	0x017d7840

08005c4c <LL_ADC_IsEnabled>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <LL_ADC_IsEnabled+0x18>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <LL_ADC_IsEnabled+0x1a>
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_ADC_REG_IsConversionOngoing>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d101      	bne.n	8005c8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005c98:	b590      	push	{r4, r7, lr}
 8005c9a:	b0a3      	sub	sp, #140	; 0x8c
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e0c1      	b.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a5e      	ldr	r2, [pc, #376]	; (8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d102      	bne.n	8005cd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005cd0:	4b5d      	ldr	r3, [pc, #372]	; (8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e001      	b.n	8005cda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0a0      	b.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ffb9 	bl	8005c72 <LL_ADC_REG_IsConversionOngoing>
 8005d00:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ffb2 	bl	8005c72 <LL_ADC_REG_IsConversionOngoing>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 8081 	bne.w	8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005d16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d17c      	bne.n	8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a48      	ldr	r2, [pc, #288]	; (8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a46      	ldr	r2, [pc, #280]	; (8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d101      	bne.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005d32:	4b46      	ldr	r3, [pc, #280]	; (8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005d34:	e000      	b.n	8005d38 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005d36:	4b46      	ldr	r3, [pc, #280]	; (8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005d38:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d039      	beq.n	8005db6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a39      	ldr	r2, [pc, #228]	; (8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10e      	bne.n	8005d86 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005d68:	4836      	ldr	r0, [pc, #216]	; (8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d6a:	f7ff ff6f 	bl	8005c4c <LL_ADC_IsEnabled>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4835      	ldr	r0, [pc, #212]	; (8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d72:	f7ff ff6b 	bl	8005c4c <LL_ADC_IsEnabled>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4323      	orrs	r3, r4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	2300      	movne	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	e008      	b.n	8005d98 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005d86:	4833      	ldr	r0, [pc, #204]	; (8005e54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005d88:	f7ff ff60 	bl	8005c4c <LL_ADC_IsEnabled>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d047      	beq.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	6811      	ldr	r1, [r2, #0]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	6892      	ldr	r2, [r2, #8]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	431a      	orrs	r2, r3
 8005db0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005db4:	e03a      	b.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dc0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10e      	bne.n	8005df4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005dd6:	481b      	ldr	r0, [pc, #108]	; (8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005dd8:	f7ff ff38 	bl	8005c4c <LL_ADC_IsEnabled>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	481a      	ldr	r0, [pc, #104]	; (8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005de0:	f7ff ff34 	bl	8005c4c <LL_ADC_IsEnabled>
 8005de4:	4603      	mov	r3, r0
 8005de6:	4323      	orrs	r3, r4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e008      	b.n	8005e06 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005df4:	4817      	ldr	r0, [pc, #92]	; (8005e54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005df6:	f7ff ff29 	bl	8005c4c <LL_ADC_IsEnabled>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d010      	beq.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005e14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e16:	e009      	b.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005e2a:	e000      	b.n	8005e2e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005e36:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	378c      	adds	r7, #140	; 0x8c
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000
 8005e48:	40022100 	.word	0x40022100
 8005e4c:	40022300 	.word	0x40022300
 8005e50:	58026300 	.word	0x58026300
 8005e54:	58026000 	.word	0x58026000
 8005e58:	fffff0e0 	.word	0xfffff0e0

08005e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <__NVIC_SetPriorityGrouping+0x40>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e8a:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <__NVIC_SetPriorityGrouping+0x40>)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	60d3      	str	r3, [r2, #12]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	e000ed00 	.word	0xe000ed00
 8005ea0:	05fa0000 	.word	0x05fa0000

08005ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <__NVIC_GetPriorityGrouping+0x18>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	f003 0307 	and.w	r3, r3, #7
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	db0b      	blt.n	8005eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	f003 021f 	and.w	r2, r3, #31
 8005ed8:	4907      	ldr	r1, [pc, #28]	; (8005ef8 <__NVIC_EnableIRQ+0x38>)
 8005eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	e000e100 	.word	0xe000e100

08005efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	db0a      	blt.n	8005f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	490c      	ldr	r1, [pc, #48]	; (8005f48 <__NVIC_SetPriority+0x4c>)
 8005f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f1a:	0112      	lsls	r2, r2, #4
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	440b      	add	r3, r1
 8005f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f24:	e00a      	b.n	8005f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	4908      	ldr	r1, [pc, #32]	; (8005f4c <__NVIC_SetPriority+0x50>)
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	3b04      	subs	r3, #4
 8005f34:	0112      	lsls	r2, r2, #4
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	440b      	add	r3, r1
 8005f3a:	761a      	strb	r2, [r3, #24]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000e100 	.word	0xe000e100
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b089      	sub	sp, #36	; 0x24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f1c3 0307 	rsb	r3, r3, #7
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	bf28      	it	cs
 8005f6e:	2304      	movcs	r3, #4
 8005f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3304      	adds	r3, #4
 8005f76:	2b06      	cmp	r3, #6
 8005f78:	d902      	bls.n	8005f80 <NVIC_EncodePriority+0x30>
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	3b03      	subs	r3, #3
 8005f7e:	e000      	b.n	8005f82 <NVIC_EncodePriority+0x32>
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	401a      	ands	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f98:	f04f 31ff 	mov.w	r1, #4294967295
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa2:	43d9      	mvns	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa8:	4313      	orrs	r3, r2
         );
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3724      	adds	r7, #36	; 0x24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
	...

08005fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fc8:	d301      	bcc.n	8005fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e00f      	b.n	8005fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <SysTick_Config+0x40>)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fd6:	210f      	movs	r1, #15
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	f7ff ff8e 	bl	8005efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <SysTick_Config+0x40>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fe6:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <SysTick_Config+0x40>)
 8005fe8:	2207      	movs	r2, #7
 8005fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	e000e010 	.word	0xe000e010

08005ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ff29 	bl	8005e5c <__NVIC_SetPriorityGrouping>
}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	4603      	mov	r3, r0
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006020:	f7ff ff40 	bl	8005ea4 <__NVIC_GetPriorityGrouping>
 8006024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	6978      	ldr	r0, [r7, #20]
 800602c:	f7ff ff90 	bl	8005f50 <NVIC_EncodePriority>
 8006030:	4602      	mov	r2, r0
 8006032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff ff5f 	bl	8005efc <__NVIC_SetPriority>
}
 800603e:	bf00      	nop
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff33 	bl	8005ec0 <__NVIC_EnableIRQ>
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ffa4 	bl	8005fb8 <SysTick_Config>
 8006070:	4603      	mov	r3, r0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006084:	f7fe fb34 	bl	80046f0 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e314      	b.n	80066be <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a66      	ldr	r2, [pc, #408]	; (8006234 <HAL_DMA_Init+0x1b8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d04a      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a65      	ldr	r2, [pc, #404]	; (8006238 <HAL_DMA_Init+0x1bc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d045      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a63      	ldr	r2, [pc, #396]	; (800623c <HAL_DMA_Init+0x1c0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d040      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a62      	ldr	r2, [pc, #392]	; (8006240 <HAL_DMA_Init+0x1c4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d03b      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a60      	ldr	r2, [pc, #384]	; (8006244 <HAL_DMA_Init+0x1c8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d036      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5f      	ldr	r2, [pc, #380]	; (8006248 <HAL_DMA_Init+0x1cc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d031      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5d      	ldr	r2, [pc, #372]	; (800624c <HAL_DMA_Init+0x1d0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02c      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5c      	ldr	r2, [pc, #368]	; (8006250 <HAL_DMA_Init+0x1d4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d027      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5a      	ldr	r2, [pc, #360]	; (8006254 <HAL_DMA_Init+0x1d8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a59      	ldr	r2, [pc, #356]	; (8006258 <HAL_DMA_Init+0x1dc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01d      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <HAL_DMA_Init+0x1e0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a56      	ldr	r2, [pc, #344]	; (8006260 <HAL_DMA_Init+0x1e4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a54      	ldr	r2, [pc, #336]	; (8006264 <HAL_DMA_Init+0x1e8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a53      	ldr	r2, [pc, #332]	; (8006268 <HAL_DMA_Init+0x1ec>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a51      	ldr	r2, [pc, #324]	; (800626c <HAL_DMA_Init+0x1f0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_DMA_Init+0xb8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a50      	ldr	r2, [pc, #320]	; (8006270 <HAL_DMA_Init+0x1f4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <HAL_DMA_Init+0xbc>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_DMA_Init+0xbe>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 813c 	beq.w	80063b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a37      	ldr	r2, [pc, #220]	; (8006234 <HAL_DMA_Init+0x1b8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d04a      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a36      	ldr	r2, [pc, #216]	; (8006238 <HAL_DMA_Init+0x1bc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d045      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a34      	ldr	r2, [pc, #208]	; (800623c <HAL_DMA_Init+0x1c0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d040      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a33      	ldr	r2, [pc, #204]	; (8006240 <HAL_DMA_Init+0x1c4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d03b      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a31      	ldr	r2, [pc, #196]	; (8006244 <HAL_DMA_Init+0x1c8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d036      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a30      	ldr	r2, [pc, #192]	; (8006248 <HAL_DMA_Init+0x1cc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d031      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2e      	ldr	r2, [pc, #184]	; (800624c <HAL_DMA_Init+0x1d0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d02c      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2d      	ldr	r2, [pc, #180]	; (8006250 <HAL_DMA_Init+0x1d4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d027      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2b      	ldr	r2, [pc, #172]	; (8006254 <HAL_DMA_Init+0x1d8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d022      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2a      	ldr	r2, [pc, #168]	; (8006258 <HAL_DMA_Init+0x1dc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d01d      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a28      	ldr	r2, [pc, #160]	; (800625c <HAL_DMA_Init+0x1e0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d018      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a27      	ldr	r2, [pc, #156]	; (8006260 <HAL_DMA_Init+0x1e4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a25      	ldr	r2, [pc, #148]	; (8006264 <HAL_DMA_Init+0x1e8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00e      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a24      	ldr	r2, [pc, #144]	; (8006268 <HAL_DMA_Init+0x1ec>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a22      	ldr	r2, [pc, #136]	; (800626c <HAL_DMA_Init+0x1f0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_DMA_Init+0x174>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a21      	ldr	r2, [pc, #132]	; (8006270 <HAL_DMA_Init+0x1f4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <HAL_DMA_Init+0x186>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e007      	b.n	8006212 <HAL_DMA_Init+0x196>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006212:	e02f      	b.n	8006274 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006214:	f7fe fa6c 	bl	80046f0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b05      	cmp	r3, #5
 8006220:	d928      	bls.n	8006274 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2203      	movs	r2, #3
 800622c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e244      	b.n	80066be <HAL_DMA_Init+0x642>
 8006234:	40020010 	.word	0x40020010
 8006238:	40020028 	.word	0x40020028
 800623c:	40020040 	.word	0x40020040
 8006240:	40020058 	.word	0x40020058
 8006244:	40020070 	.word	0x40020070
 8006248:	40020088 	.word	0x40020088
 800624c:	400200a0 	.word	0x400200a0
 8006250:	400200b8 	.word	0x400200b8
 8006254:	40020410 	.word	0x40020410
 8006258:	40020428 	.word	0x40020428
 800625c:	40020440 	.word	0x40020440
 8006260:	40020458 	.word	0x40020458
 8006264:	40020470 	.word	0x40020470
 8006268:	40020488 	.word	0x40020488
 800626c:	400204a0 	.word	0x400204a0
 8006270:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1c8      	bne.n	8006214 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <HAL_DMA_Init+0x424>)
 800628e:	4013      	ands	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800629a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d107      	bne.n	80062d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	4313      	orrs	r3, r2
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b28      	cmp	r3, #40	; 0x28
 80062de:	d903      	bls.n	80062e8 <HAL_DMA_Init+0x26c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b2e      	cmp	r3, #46	; 0x2e
 80062e6:	d91f      	bls.n	8006328 <HAL_DMA_Init+0x2ac>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b3e      	cmp	r3, #62	; 0x3e
 80062ee:	d903      	bls.n	80062f8 <HAL_DMA_Init+0x27c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b42      	cmp	r3, #66	; 0x42
 80062f6:	d917      	bls.n	8006328 <HAL_DMA_Init+0x2ac>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b46      	cmp	r3, #70	; 0x46
 80062fe:	d903      	bls.n	8006308 <HAL_DMA_Init+0x28c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b48      	cmp	r3, #72	; 0x48
 8006306:	d90f      	bls.n	8006328 <HAL_DMA_Init+0x2ac>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b4e      	cmp	r3, #78	; 0x4e
 800630e:	d903      	bls.n	8006318 <HAL_DMA_Init+0x29c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b52      	cmp	r3, #82	; 0x52
 8006316:	d907      	bls.n	8006328 <HAL_DMA_Init+0x2ac>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b73      	cmp	r3, #115	; 0x73
 800631e:	d905      	bls.n	800632c <HAL_DMA_Init+0x2b0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b77      	cmp	r3, #119	; 0x77
 8006326:	d801      	bhi.n	800632c <HAL_DMA_Init+0x2b0>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_DMA_Init+0x2b2>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006338:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 0307 	bic.w	r3, r3, #7
 8006350:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b04      	cmp	r3, #4
 8006362:	d117      	bne.n	8006394 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00e      	beq.n	8006394 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f9b6 	bl	80076e8 <DMA_CheckFifoParam>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2240      	movs	r2, #64	; 0x40
 8006386:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e194      	b.n	80066be <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f8f1 	bl	8007584 <DMA_CalcBaseAndBitshift>
 80063a2:	4603      	mov	r3, r0
 80063a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	223f      	movs	r2, #63	; 0x3f
 80063b0:	409a      	lsls	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	609a      	str	r2, [r3, #8]
 80063b6:	e0ca      	b.n	800654e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a39      	ldr	r2, [pc, #228]	; (80064a4 <HAL_DMA_Init+0x428>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d022      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a38      	ldr	r2, [pc, #224]	; (80064a8 <HAL_DMA_Init+0x42c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d01d      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a36      	ldr	r2, [pc, #216]	; (80064ac <HAL_DMA_Init+0x430>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d018      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a35      	ldr	r2, [pc, #212]	; (80064b0 <HAL_DMA_Init+0x434>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a33      	ldr	r2, [pc, #204]	; (80064b4 <HAL_DMA_Init+0x438>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00e      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a32      	ldr	r2, [pc, #200]	; (80064b8 <HAL_DMA_Init+0x43c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a30      	ldr	r2, [pc, #192]	; (80064bc <HAL_DMA_Init+0x440>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <HAL_DMA_Init+0x38c>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <HAL_DMA_Init+0x444>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d101      	bne.n	800640c <HAL_DMA_Init+0x390>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <HAL_DMA_Init+0x392>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 8094 	beq.w	800653c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_DMA_Init+0x428>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d021      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_DMA_Init+0x42c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d01c      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1f      	ldr	r2, [pc, #124]	; (80064ac <HAL_DMA_Init+0x430>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d017      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <HAL_DMA_Init+0x434>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d012      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <HAL_DMA_Init+0x438>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00d      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <HAL_DMA_Init+0x43c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d008      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <HAL_DMA_Init+0x440>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <HAL_DMA_Init+0x3e6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <HAL_DMA_Init+0x444>)
 8006460:	4293      	cmp	r3, r2
 8006462:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <HAL_DMA_Init+0x448>)
 8006480:	4013      	ands	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d01d      	beq.n	80064c8 <HAL_DMA_Init+0x44c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b80      	cmp	r3, #128	; 0x80
 8006492:	d102      	bne.n	800649a <HAL_DMA_Init+0x41e>
 8006494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006498:	e017      	b.n	80064ca <HAL_DMA_Init+0x44e>
 800649a:	2300      	movs	r3, #0
 800649c:	e015      	b.n	80064ca <HAL_DMA_Init+0x44e>
 800649e:	bf00      	nop
 80064a0:	fe10803f 	.word	0xfe10803f
 80064a4:	58025408 	.word	0x58025408
 80064a8:	5802541c 	.word	0x5802541c
 80064ac:	58025430 	.word	0x58025430
 80064b0:	58025444 	.word	0x58025444
 80064b4:	58025458 	.word	0x58025458
 80064b8:	5802546c 	.word	0x5802546c
 80064bc:	58025480 	.word	0x58025480
 80064c0:	58025494 	.word	0x58025494
 80064c4:	fffe000f 	.word	0xfffe000f
 80064c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68d2      	ldr	r2, [r2, #12]
 80064ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	4b6e      	ldr	r3, [pc, #440]	; (80066c8 <HAL_DMA_Init+0x64c>)
 8006510:	4413      	add	r3, r2
 8006512:	4a6e      	ldr	r2, [pc, #440]	; (80066cc <HAL_DMA_Init+0x650>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	009a      	lsls	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 f82f 	bl	8007584 <DMA_CalcBaseAndBitshift>
 8006526:	4603      	mov	r3, r0
 8006528:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2201      	movs	r2, #1
 8006534:	409a      	lsls	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]
 800653a:	e008      	b.n	800654e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2203      	movs	r2, #3
 8006546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0b7      	b.n	80066be <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a5f      	ldr	r2, [pc, #380]	; (80066d0 <HAL_DMA_Init+0x654>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d072      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a5d      	ldr	r2, [pc, #372]	; (80066d4 <HAL_DMA_Init+0x658>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d06d      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a5c      	ldr	r2, [pc, #368]	; (80066d8 <HAL_DMA_Init+0x65c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d068      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a5a      	ldr	r2, [pc, #360]	; (80066dc <HAL_DMA_Init+0x660>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d063      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a59      	ldr	r2, [pc, #356]	; (80066e0 <HAL_DMA_Init+0x664>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d05e      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a57      	ldr	r2, [pc, #348]	; (80066e4 <HAL_DMA_Init+0x668>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d059      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a56      	ldr	r2, [pc, #344]	; (80066e8 <HAL_DMA_Init+0x66c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d054      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a54      	ldr	r2, [pc, #336]	; (80066ec <HAL_DMA_Init+0x670>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d04f      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a53      	ldr	r2, [pc, #332]	; (80066f0 <HAL_DMA_Init+0x674>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d04a      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a51      	ldr	r2, [pc, #324]	; (80066f4 <HAL_DMA_Init+0x678>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d045      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a50      	ldr	r2, [pc, #320]	; (80066f8 <HAL_DMA_Init+0x67c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d040      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a4e      	ldr	r2, [pc, #312]	; (80066fc <HAL_DMA_Init+0x680>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d03b      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a4d      	ldr	r2, [pc, #308]	; (8006700 <HAL_DMA_Init+0x684>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d036      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a4b      	ldr	r2, [pc, #300]	; (8006704 <HAL_DMA_Init+0x688>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d031      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a4a      	ldr	r2, [pc, #296]	; (8006708 <HAL_DMA_Init+0x68c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d02c      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a48      	ldr	r2, [pc, #288]	; (800670c <HAL_DMA_Init+0x690>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a47      	ldr	r2, [pc, #284]	; (8006710 <HAL_DMA_Init+0x694>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a45      	ldr	r2, [pc, #276]	; (8006714 <HAL_DMA_Init+0x698>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01d      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a44      	ldr	r2, [pc, #272]	; (8006718 <HAL_DMA_Init+0x69c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a42      	ldr	r2, [pc, #264]	; (800671c <HAL_DMA_Init+0x6a0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a41      	ldr	r2, [pc, #260]	; (8006720 <HAL_DMA_Init+0x6a4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3f      	ldr	r2, [pc, #252]	; (8006724 <HAL_DMA_Init+0x6a8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3e      	ldr	r2, [pc, #248]	; (8006728 <HAL_DMA_Init+0x6ac>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_DMA_Init+0x5c2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a3c      	ldr	r2, [pc, #240]	; (800672c <HAL_DMA_Init+0x6b0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_DMA_Init+0x5c6>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <HAL_DMA_Init+0x5c8>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d032      	beq.n	80066ae <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f8c9 	bl	80077e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d102      	bne.n	800665c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006670:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d010      	beq.n	800669c <HAL_DMA_Init+0x620>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b08      	cmp	r3, #8
 8006680:	d80c      	bhi.n	800669c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 f946 	bl	8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e008      	b.n	80066ae <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	a7fdabf8 	.word	0xa7fdabf8
 80066cc:	cccccccd 	.word	0xcccccccd
 80066d0:	40020010 	.word	0x40020010
 80066d4:	40020028 	.word	0x40020028
 80066d8:	40020040 	.word	0x40020040
 80066dc:	40020058 	.word	0x40020058
 80066e0:	40020070 	.word	0x40020070
 80066e4:	40020088 	.word	0x40020088
 80066e8:	400200a0 	.word	0x400200a0
 80066ec:	400200b8 	.word	0x400200b8
 80066f0:	40020410 	.word	0x40020410
 80066f4:	40020428 	.word	0x40020428
 80066f8:	40020440 	.word	0x40020440
 80066fc:	40020458 	.word	0x40020458
 8006700:	40020470 	.word	0x40020470
 8006704:	40020488 	.word	0x40020488
 8006708:	400204a0 	.word	0x400204a0
 800670c:	400204b8 	.word	0x400204b8
 8006710:	58025408 	.word	0x58025408
 8006714:	5802541c 	.word	0x5802541c
 8006718:	58025430 	.word	0x58025430
 800671c:	58025444 	.word	0x58025444
 8006720:	58025458 	.word	0x58025458
 8006724:	5802546c 	.word	0x5802546c
 8006728:	58025480 	.word	0x58025480
 800672c:	58025494 	.word	0x58025494

08006730 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800673c:	4b67      	ldr	r3, [pc, #412]	; (80068dc <HAL_DMA_IRQHandler+0x1ac>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a67      	ldr	r2, [pc, #412]	; (80068e0 <HAL_DMA_IRQHandler+0x1b0>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0a9b      	lsrs	r3, r3, #10
 8006748:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006754:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a5f      	ldr	r2, [pc, #380]	; (80068e4 <HAL_DMA_IRQHandler+0x1b4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d04a      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a5d      	ldr	r2, [pc, #372]	; (80068e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d045      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a5c      	ldr	r2, [pc, #368]	; (80068ec <HAL_DMA_IRQHandler+0x1bc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d040      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a5a      	ldr	r2, [pc, #360]	; (80068f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d03b      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a59      	ldr	r2, [pc, #356]	; (80068f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d036      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a57      	ldr	r2, [pc, #348]	; (80068f8 <HAL_DMA_IRQHandler+0x1c8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d031      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a56      	ldr	r2, [pc, #344]	; (80068fc <HAL_DMA_IRQHandler+0x1cc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d02c      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a54      	ldr	r2, [pc, #336]	; (8006900 <HAL_DMA_IRQHandler+0x1d0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d027      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a53      	ldr	r2, [pc, #332]	; (8006904 <HAL_DMA_IRQHandler+0x1d4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d022      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a51      	ldr	r2, [pc, #324]	; (8006908 <HAL_DMA_IRQHandler+0x1d8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a50      	ldr	r2, [pc, #320]	; (800690c <HAL_DMA_IRQHandler+0x1dc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a4e      	ldr	r2, [pc, #312]	; (8006910 <HAL_DMA_IRQHandler+0x1e0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a4d      	ldr	r2, [pc, #308]	; (8006914 <HAL_DMA_IRQHandler+0x1e4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a4b      	ldr	r2, [pc, #300]	; (8006918 <HAL_DMA_IRQHandler+0x1e8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a4a      	ldr	r2, [pc, #296]	; (800691c <HAL_DMA_IRQHandler+0x1ec>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_DMA_IRQHandler+0xd2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a48      	ldr	r2, [pc, #288]	; (8006920 <HAL_DMA_IRQHandler+0x1f0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_DMA_IRQHandler+0xd6>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <HAL_DMA_IRQHandler+0xd8>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 842b 	beq.w	8007064 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006812:	f003 031f 	and.w	r3, r3, #31
 8006816:	2208      	movs	r2, #8
 8006818:	409a      	lsls	r2, r3
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	4013      	ands	r3, r2
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80a2 	beq.w	8006968 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2e      	ldr	r2, [pc, #184]	; (80068e4 <HAL_DMA_IRQHandler+0x1b4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d04a      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d045      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2b      	ldr	r2, [pc, #172]	; (80068ec <HAL_DMA_IRQHandler+0x1bc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d040      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d03b      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a28      	ldr	r2, [pc, #160]	; (80068f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d036      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <HAL_DMA_IRQHandler+0x1c8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d031      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a25      	ldr	r2, [pc, #148]	; (80068fc <HAL_DMA_IRQHandler+0x1cc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d02c      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a24      	ldr	r2, [pc, #144]	; (8006900 <HAL_DMA_IRQHandler+0x1d0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d027      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a22      	ldr	r2, [pc, #136]	; (8006904 <HAL_DMA_IRQHandler+0x1d4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d022      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a21      	ldr	r2, [pc, #132]	; (8006908 <HAL_DMA_IRQHandler+0x1d8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d01d      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1f      	ldr	r2, [pc, #124]	; (800690c <HAL_DMA_IRQHandler+0x1dc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1e      	ldr	r2, [pc, #120]	; (8006910 <HAL_DMA_IRQHandler+0x1e0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <HAL_DMA_IRQHandler+0x1e4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <HAL_DMA_IRQHandler+0x1e8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a19      	ldr	r2, [pc, #100]	; (800691c <HAL_DMA_IRQHandler+0x1ec>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x194>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a18      	ldr	r2, [pc, #96]	; (8006920 <HAL_DMA_IRQHandler+0x1f0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d12f      	bne.n	8006924 <HAL_DMA_IRQHandler+0x1f4>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	e02e      	b.n	8006938 <HAL_DMA_IRQHandler+0x208>
 80068da:	bf00      	nop
 80068dc:	24000000 	.word	0x24000000
 80068e0:	1b4e81b5 	.word	0x1b4e81b5
 80068e4:	40020010 	.word	0x40020010
 80068e8:	40020028 	.word	0x40020028
 80068ec:	40020040 	.word	0x40020040
 80068f0:	40020058 	.word	0x40020058
 80068f4:	40020070 	.word	0x40020070
 80068f8:	40020088 	.word	0x40020088
 80068fc:	400200a0 	.word	0x400200a0
 8006900:	400200b8 	.word	0x400200b8
 8006904:	40020410 	.word	0x40020410
 8006908:	40020428 	.word	0x40020428
 800690c:	40020440 	.word	0x40020440
 8006910:	40020458 	.word	0x40020458
 8006914:	40020470 	.word	0x40020470
 8006918:	40020488 	.word	0x40020488
 800691c:	400204a0 	.word	0x400204a0
 8006920:	400204b8 	.word	0x400204b8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	2b00      	cmp	r3, #0
 8006930:	bf14      	ite	ne
 8006932:	2301      	movne	r3, #1
 8006934:	2300      	moveq	r3, #0
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d015      	beq.n	8006968 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0204 	bic.w	r2, r2, #4
 800694a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2208      	movs	r2, #8
 8006956:	409a      	lsls	r2, r3
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f043 0201 	orr.w	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d06e      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a69      	ldr	r2, [pc, #420]	; (8006b28 <HAL_DMA_IRQHandler+0x3f8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d04a      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a67      	ldr	r2, [pc, #412]	; (8006b2c <HAL_DMA_IRQHandler+0x3fc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d045      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a66      	ldr	r2, [pc, #408]	; (8006b30 <HAL_DMA_IRQHandler+0x400>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d040      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a64      	ldr	r2, [pc, #400]	; (8006b34 <HAL_DMA_IRQHandler+0x404>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d03b      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a63      	ldr	r2, [pc, #396]	; (8006b38 <HAL_DMA_IRQHandler+0x408>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d036      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a61      	ldr	r2, [pc, #388]	; (8006b3c <HAL_DMA_IRQHandler+0x40c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d031      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a60      	ldr	r2, [pc, #384]	; (8006b40 <HAL_DMA_IRQHandler+0x410>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d02c      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a5e      	ldr	r2, [pc, #376]	; (8006b44 <HAL_DMA_IRQHandler+0x414>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d027      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a5d      	ldr	r2, [pc, #372]	; (8006b48 <HAL_DMA_IRQHandler+0x418>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a5b      	ldr	r2, [pc, #364]	; (8006b4c <HAL_DMA_IRQHandler+0x41c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a5a      	ldr	r2, [pc, #360]	; (8006b50 <HAL_DMA_IRQHandler+0x420>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a58      	ldr	r2, [pc, #352]	; (8006b54 <HAL_DMA_IRQHandler+0x424>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a57      	ldr	r2, [pc, #348]	; (8006b58 <HAL_DMA_IRQHandler+0x428>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a55      	ldr	r2, [pc, #340]	; (8006b5c <HAL_DMA_IRQHandler+0x42c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a54      	ldr	r2, [pc, #336]	; (8006b60 <HAL_DMA_IRQHandler+0x430>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_DMA_IRQHandler+0x2ee>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a52      	ldr	r2, [pc, #328]	; (8006b64 <HAL_DMA_IRQHandler+0x434>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d10a      	bne.n	8006a34 <HAL_DMA_IRQHandler+0x304>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	e003      	b.n	8006a3c <HAL_DMA_IRQHandler+0x30c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00d      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2201      	movs	r2, #1
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a54:	f043 0202 	orr.w	r2, r3, #2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	2204      	movs	r2, #4
 8006a66:	409a      	lsls	r2, r3
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 808f 	beq.w	8006b90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <HAL_DMA_IRQHandler+0x3f8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d04a      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <HAL_DMA_IRQHandler+0x3fc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d045      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <HAL_DMA_IRQHandler+0x400>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d040      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a27      	ldr	r2, [pc, #156]	; (8006b34 <HAL_DMA_IRQHandler+0x404>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d03b      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a26      	ldr	r2, [pc, #152]	; (8006b38 <HAL_DMA_IRQHandler+0x408>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d036      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <HAL_DMA_IRQHandler+0x40c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d031      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a23      	ldr	r2, [pc, #140]	; (8006b40 <HAL_DMA_IRQHandler+0x410>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d02c      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a21      	ldr	r2, [pc, #132]	; (8006b44 <HAL_DMA_IRQHandler+0x414>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d027      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <HAL_DMA_IRQHandler+0x418>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d022      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1e      	ldr	r2, [pc, #120]	; (8006b4c <HAL_DMA_IRQHandler+0x41c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01d      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1d      	ldr	r2, [pc, #116]	; (8006b50 <HAL_DMA_IRQHandler+0x420>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d018      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <HAL_DMA_IRQHandler+0x424>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d013      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1a      	ldr	r2, [pc, #104]	; (8006b58 <HAL_DMA_IRQHandler+0x428>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00e      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_DMA_IRQHandler+0x42c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <HAL_DMA_IRQHandler+0x430>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_DMA_IRQHandler+0x3e2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <HAL_DMA_IRQHandler+0x434>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d12a      	bne.n	8006b68 <HAL_DMA_IRQHandler+0x438>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	e023      	b.n	8006b70 <HAL_DMA_IRQHandler+0x440>
 8006b28:	40020010 	.word	0x40020010
 8006b2c:	40020028 	.word	0x40020028
 8006b30:	40020040 	.word	0x40020040
 8006b34:	40020058 	.word	0x40020058
 8006b38:	40020070 	.word	0x40020070
 8006b3c:	40020088 	.word	0x40020088
 8006b40:	400200a0 	.word	0x400200a0
 8006b44:	400200b8 	.word	0x400200b8
 8006b48:	40020410 	.word	0x40020410
 8006b4c:	40020428 	.word	0x40020428
 8006b50:	40020440 	.word	0x40020440
 8006b54:	40020458 	.word	0x40020458
 8006b58:	40020470 	.word	0x40020470
 8006b5c:	40020488 	.word	0x40020488
 8006b60:	400204a0 	.word	0x400204a0
 8006b64:	400204b8 	.word	0x400204b8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b88:	f043 0204 	orr.w	r2, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2210      	movs	r2, #16
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a6 	beq.w	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a85      	ldr	r2, [pc, #532]	; (8006dc0 <HAL_DMA_IRQHandler+0x690>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d04a      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a83      	ldr	r2, [pc, #524]	; (8006dc4 <HAL_DMA_IRQHandler+0x694>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d045      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a82      	ldr	r2, [pc, #520]	; (8006dc8 <HAL_DMA_IRQHandler+0x698>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d040      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a80      	ldr	r2, [pc, #512]	; (8006dcc <HAL_DMA_IRQHandler+0x69c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d03b      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a7f      	ldr	r2, [pc, #508]	; (8006dd0 <HAL_DMA_IRQHandler+0x6a0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d036      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a7d      	ldr	r2, [pc, #500]	; (8006dd4 <HAL_DMA_IRQHandler+0x6a4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d031      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a7c      	ldr	r2, [pc, #496]	; (8006dd8 <HAL_DMA_IRQHandler+0x6a8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d02c      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a7a      	ldr	r2, [pc, #488]	; (8006ddc <HAL_DMA_IRQHandler+0x6ac>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d027      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a79      	ldr	r2, [pc, #484]	; (8006de0 <HAL_DMA_IRQHandler+0x6b0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d022      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a77      	ldr	r2, [pc, #476]	; (8006de4 <HAL_DMA_IRQHandler+0x6b4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d01d      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a76      	ldr	r2, [pc, #472]	; (8006de8 <HAL_DMA_IRQHandler+0x6b8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d018      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a74      	ldr	r2, [pc, #464]	; (8006dec <HAL_DMA_IRQHandler+0x6bc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a73      	ldr	r2, [pc, #460]	; (8006df0 <HAL_DMA_IRQHandler+0x6c0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00e      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a71      	ldr	r2, [pc, #452]	; (8006df4 <HAL_DMA_IRQHandler+0x6c4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d009      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a70      	ldr	r2, [pc, #448]	; (8006df8 <HAL_DMA_IRQHandler+0x6c8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d004      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x516>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a6e      	ldr	r2, [pc, #440]	; (8006dfc <HAL_DMA_IRQHandler+0x6cc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d10a      	bne.n	8006c5c <HAL_DMA_IRQHandler+0x52c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bf14      	ite	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	2300      	moveq	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e009      	b.n	8006c70 <HAL_DMA_IRQHandler+0x540>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bf14      	ite	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	2300      	moveq	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d03e      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d108      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d024      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	e01f      	b.n	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01b      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
 8006cc2:	e016      	b.n	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d107      	bne.n	8006ce2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0208 	bic.w	r2, r2, #8
 8006ce0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8110 	beq.w	8006f28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2c      	ldr	r2, [pc, #176]	; (8006dc0 <HAL_DMA_IRQHandler+0x690>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d04a      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2b      	ldr	r2, [pc, #172]	; (8006dc4 <HAL_DMA_IRQHandler+0x694>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d045      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a29      	ldr	r2, [pc, #164]	; (8006dc8 <HAL_DMA_IRQHandler+0x698>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d040      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <HAL_DMA_IRQHandler+0x69c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d03b      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a26      	ldr	r2, [pc, #152]	; (8006dd0 <HAL_DMA_IRQHandler+0x6a0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d036      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a25      	ldr	r2, [pc, #148]	; (8006dd4 <HAL_DMA_IRQHandler+0x6a4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d031      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a23      	ldr	r2, [pc, #140]	; (8006dd8 <HAL_DMA_IRQHandler+0x6a8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d02c      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <HAL_DMA_IRQHandler+0x6ac>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d027      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <HAL_DMA_IRQHandler+0x6b0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d022      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <HAL_DMA_IRQHandler+0x6b4>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d01d      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_DMA_IRQHandler+0x6b8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d018      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <HAL_DMA_IRQHandler+0x6bc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d013      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a1a      	ldr	r2, [pc, #104]	; (8006df0 <HAL_DMA_IRQHandler+0x6c0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00e      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_DMA_IRQHandler+0x6c4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d009      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <HAL_DMA_IRQHandler+0x6c8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x678>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <HAL_DMA_IRQHandler+0x6cc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d12b      	bne.n	8006e00 <HAL_DMA_IRQHandler+0x6d0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf14      	ite	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	2300      	moveq	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	e02a      	b.n	8006e14 <HAL_DMA_IRQHandler+0x6e4>
 8006dbe:	bf00      	nop
 8006dc0:	40020010 	.word	0x40020010
 8006dc4:	40020028 	.word	0x40020028
 8006dc8:	40020040 	.word	0x40020040
 8006dcc:	40020058 	.word	0x40020058
 8006dd0:	40020070 	.word	0x40020070
 8006dd4:	40020088 	.word	0x40020088
 8006dd8:	400200a0 	.word	0x400200a0
 8006ddc:	400200b8 	.word	0x400200b8
 8006de0:	40020410 	.word	0x40020410
 8006de4:	40020428 	.word	0x40020428
 8006de8:	40020440 	.word	0x40020440
 8006dec:	40020458 	.word	0x40020458
 8006df0:	40020470 	.word	0x40020470
 8006df4:	40020488 	.word	0x40020488
 8006df8:	400204a0 	.word	0x400204a0
 8006dfc:	400204b8 	.word	0x400204b8
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	bf14      	ite	ne
 8006e0e:	2301      	movne	r3, #1
 8006e10:	2300      	moveq	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8087 	beq.w	8006f28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2220      	movs	r2, #32
 8006e24:	409a      	lsls	r2, r3
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d139      	bne.n	8006eaa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0216 	bic.w	r2, r2, #22
 8006e44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <HAL_DMA_IRQHandler+0x736>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0208 	bic.w	r2, r2, #8
 8006e74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	223f      	movs	r2, #63	; 0x3f
 8006e80:	409a      	lsls	r2, r3
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 834a 	beq.w	8007534 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
          }
          return;
 8006ea8:	e344      	b.n	8007534 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d018      	beq.n	8006eea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d108      	bne.n	8006ed8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d02c      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	4798      	blx	r3
 8006ed6:	e027      	b.n	8006f28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d023      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
 8006ee8:	e01e      	b.n	8006f28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10f      	bne.n	8006f18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0210 	bic.w	r2, r2, #16
 8006f06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8306 	beq.w	800753e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8088 	beq.w	8007050 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2204      	movs	r2, #4
 8006f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a7a      	ldr	r2, [pc, #488]	; (8007138 <HAL_DMA_IRQHandler+0xa08>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d04a      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a79      	ldr	r2, [pc, #484]	; (800713c <HAL_DMA_IRQHandler+0xa0c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d045      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a77      	ldr	r2, [pc, #476]	; (8007140 <HAL_DMA_IRQHandler+0xa10>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d040      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a76      	ldr	r2, [pc, #472]	; (8007144 <HAL_DMA_IRQHandler+0xa14>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d03b      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a74      	ldr	r2, [pc, #464]	; (8007148 <HAL_DMA_IRQHandler+0xa18>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d036      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a73      	ldr	r2, [pc, #460]	; (800714c <HAL_DMA_IRQHandler+0xa1c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d031      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a71      	ldr	r2, [pc, #452]	; (8007150 <HAL_DMA_IRQHandler+0xa20>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02c      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_DMA_IRQHandler+0xa24>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d027      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a6e      	ldr	r2, [pc, #440]	; (8007158 <HAL_DMA_IRQHandler+0xa28>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d022      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a6d      	ldr	r2, [pc, #436]	; (800715c <HAL_DMA_IRQHandler+0xa2c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d01d      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a6b      	ldr	r2, [pc, #428]	; (8007160 <HAL_DMA_IRQHandler+0xa30>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6a      	ldr	r2, [pc, #424]	; (8007164 <HAL_DMA_IRQHandler+0xa34>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a68      	ldr	r2, [pc, #416]	; (8007168 <HAL_DMA_IRQHandler+0xa38>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a67      	ldr	r2, [pc, #412]	; (800716c <HAL_DMA_IRQHandler+0xa3c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a65      	ldr	r2, [pc, #404]	; (8007170 <HAL_DMA_IRQHandler+0xa40>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_DMA_IRQHandler+0x8b8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a64      	ldr	r2, [pc, #400]	; (8007174 <HAL_DMA_IRQHandler+0xa44>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d108      	bne.n	8006ffa <HAL_DMA_IRQHandler+0x8ca>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0201 	bic.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e007      	b.n	800700a <HAL_DMA_IRQHandler+0x8da>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0201 	bic.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007012:	429a      	cmp	r2, r3
 8007014:	d307      	bcc.n	8007026 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f2      	bne.n	800700a <HAL_DMA_IRQHandler+0x8da>
 8007024:	e000      	b.n	8007028 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007026:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2203      	movs	r2, #3
 800703a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800703e:	e003      	b.n	8007048 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8272 	beq.w	800753e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	4798      	blx	r3
 8007062:	e26c      	b.n	800753e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a43      	ldr	r2, [pc, #268]	; (8007178 <HAL_DMA_IRQHandler+0xa48>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d022      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a42      	ldr	r2, [pc, #264]	; (800717c <HAL_DMA_IRQHandler+0xa4c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01d      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a40      	ldr	r2, [pc, #256]	; (8007180 <HAL_DMA_IRQHandler+0xa50>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d018      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <HAL_DMA_IRQHandler+0xa54>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <HAL_DMA_IRQHandler+0xa58>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3c      	ldr	r2, [pc, #240]	; (800718c <HAL_DMA_IRQHandler+0xa5c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3a      	ldr	r2, [pc, #232]	; (8007190 <HAL_DMA_IRQHandler+0xa60>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x984>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a39      	ldr	r2, [pc, #228]	; (8007194 <HAL_DMA_IRQHandler+0xa64>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d101      	bne.n	80070b8 <HAL_DMA_IRQHandler+0x988>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <HAL_DMA_IRQHandler+0x98a>
 80070b8:	2300      	movs	r3, #0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 823f 	beq.w	800753e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	2204      	movs	r2, #4
 80070d2:	409a      	lsls	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80cd 	beq.w	8007278 <HAL_DMA_IRQHandler+0xb48>
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80c7 	beq.w	8007278 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2204      	movs	r2, #4
 80070f4:	409a      	lsls	r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d049      	beq.n	8007198 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8210 	beq.w	8007538 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007120:	e20a      	b.n	8007538 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8206 	beq.w	8007538 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007134:	e200      	b.n	8007538 <HAL_DMA_IRQHandler+0xe08>
 8007136:	bf00      	nop
 8007138:	40020010 	.word	0x40020010
 800713c:	40020028 	.word	0x40020028
 8007140:	40020040 	.word	0x40020040
 8007144:	40020058 	.word	0x40020058
 8007148:	40020070 	.word	0x40020070
 800714c:	40020088 	.word	0x40020088
 8007150:	400200a0 	.word	0x400200a0
 8007154:	400200b8 	.word	0x400200b8
 8007158:	40020410 	.word	0x40020410
 800715c:	40020428 	.word	0x40020428
 8007160:	40020440 	.word	0x40020440
 8007164:	40020458 	.word	0x40020458
 8007168:	40020470 	.word	0x40020470
 800716c:	40020488 	.word	0x40020488
 8007170:	400204a0 	.word	0x400204a0
 8007174:	400204b8 	.word	0x400204b8
 8007178:	58025408 	.word	0x58025408
 800717c:	5802541c 	.word	0x5802541c
 8007180:	58025430 	.word	0x58025430
 8007184:	58025444 	.word	0x58025444
 8007188:	58025458 	.word	0x58025458
 800718c:	5802546c 	.word	0x5802546c
 8007190:	58025480 	.word	0x58025480
 8007194:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d160      	bne.n	8007264 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a7f      	ldr	r2, [pc, #508]	; (80073a4 <HAL_DMA_IRQHandler+0xc74>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d04a      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a7d      	ldr	r2, [pc, #500]	; (80073a8 <HAL_DMA_IRQHandler+0xc78>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d045      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a7c      	ldr	r2, [pc, #496]	; (80073ac <HAL_DMA_IRQHandler+0xc7c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d040      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a7a      	ldr	r2, [pc, #488]	; (80073b0 <HAL_DMA_IRQHandler+0xc80>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d03b      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a79      	ldr	r2, [pc, #484]	; (80073b4 <HAL_DMA_IRQHandler+0xc84>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d036      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a77      	ldr	r2, [pc, #476]	; (80073b8 <HAL_DMA_IRQHandler+0xc88>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d031      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a76      	ldr	r2, [pc, #472]	; (80073bc <HAL_DMA_IRQHandler+0xc8c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d02c      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a74      	ldr	r2, [pc, #464]	; (80073c0 <HAL_DMA_IRQHandler+0xc90>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d027      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a73      	ldr	r2, [pc, #460]	; (80073c4 <HAL_DMA_IRQHandler+0xc94>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a71      	ldr	r2, [pc, #452]	; (80073c8 <HAL_DMA_IRQHandler+0xc98>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01d      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a70      	ldr	r2, [pc, #448]	; (80073cc <HAL_DMA_IRQHandler+0xc9c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d018      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a6e      	ldr	r2, [pc, #440]	; (80073d0 <HAL_DMA_IRQHandler+0xca0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a6d      	ldr	r2, [pc, #436]	; (80073d4 <HAL_DMA_IRQHandler+0xca4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00e      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a6b      	ldr	r2, [pc, #428]	; (80073d8 <HAL_DMA_IRQHandler+0xca8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d009      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a6a      	ldr	r2, [pc, #424]	; (80073dc <HAL_DMA_IRQHandler+0xcac>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_DMA_IRQHandler+0xb12>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a68      	ldr	r2, [pc, #416]	; (80073e0 <HAL_DMA_IRQHandler+0xcb0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <HAL_DMA_IRQHandler+0xb24>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0208 	bic.w	r2, r2, #8
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e007      	b.n	8007264 <HAL_DMA_IRQHandler+0xb34>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0204 	bic.w	r2, r2, #4
 8007262:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8165 	beq.w	8007538 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007276:	e15f      	b.n	8007538 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2202      	movs	r2, #2
 8007282:	409a      	lsls	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4013      	ands	r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80c5 	beq.w	8007418 <HAL_DMA_IRQHandler+0xce8>
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80bf 	beq.w	8007418 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	2202      	movs	r2, #2
 80072a4:	409a      	lsls	r2, r3
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d018      	beq.n	80072e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 813a 	beq.w	800753c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072d0:	e134      	b.n	800753c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8130 	beq.w	800753c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072e4:	e12a      	b.n	800753c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8089 	bne.w	8007404 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2b      	ldr	r2, [pc, #172]	; (80073a4 <HAL_DMA_IRQHandler+0xc74>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d04a      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <HAL_DMA_IRQHandler+0xc78>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d045      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a28      	ldr	r2, [pc, #160]	; (80073ac <HAL_DMA_IRQHandler+0xc7c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d040      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <HAL_DMA_IRQHandler+0xc80>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d03b      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a25      	ldr	r2, [pc, #148]	; (80073b4 <HAL_DMA_IRQHandler+0xc84>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d036      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <HAL_DMA_IRQHandler+0xc88>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d031      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a22      	ldr	r2, [pc, #136]	; (80073bc <HAL_DMA_IRQHandler+0xc8c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d02c      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <HAL_DMA_IRQHandler+0xc90>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d027      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <HAL_DMA_IRQHandler+0xc94>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d022      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1d      	ldr	r2, [pc, #116]	; (80073c8 <HAL_DMA_IRQHandler+0xc98>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01d      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <HAL_DMA_IRQHandler+0xc9c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d018      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <HAL_DMA_IRQHandler+0xca0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a19      	ldr	r2, [pc, #100]	; (80073d4 <HAL_DMA_IRQHandler+0xca4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <HAL_DMA_IRQHandler+0xca8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a16      	ldr	r2, [pc, #88]	; (80073dc <HAL_DMA_IRQHandler+0xcac>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_DMA_IRQHandler+0xc62>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a14      	ldr	r2, [pc, #80]	; (80073e0 <HAL_DMA_IRQHandler+0xcb0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d128      	bne.n	80073e4 <HAL_DMA_IRQHandler+0xcb4>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0214 	bic.w	r2, r2, #20
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	e027      	b.n	80073f4 <HAL_DMA_IRQHandler+0xcc4>
 80073a4:	40020010 	.word	0x40020010
 80073a8:	40020028 	.word	0x40020028
 80073ac:	40020040 	.word	0x40020040
 80073b0:	40020058 	.word	0x40020058
 80073b4:	40020070 	.word	0x40020070
 80073b8:	40020088 	.word	0x40020088
 80073bc:	400200a0 	.word	0x400200a0
 80073c0:	400200b8 	.word	0x400200b8
 80073c4:	40020410 	.word	0x40020410
 80073c8:	40020428 	.word	0x40020428
 80073cc:	40020440 	.word	0x40020440
 80073d0:	40020458 	.word	0x40020458
 80073d4:	40020470 	.word	0x40020470
 80073d8:	40020488 	.word	0x40020488
 80073dc:	400204a0 	.word	0x400204a0
 80073e0:	400204b8 	.word	0x400204b8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 020a 	bic.w	r2, r2, #10
 80073f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8097 	beq.w	800753c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007416:	e091      	b.n	800753c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2208      	movs	r2, #8
 8007422:	409a      	lsls	r2, r3
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8088 	beq.w	800753e <HAL_DMA_IRQHandler+0xe0e>
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8082 	beq.w	800753e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a41      	ldr	r2, [pc, #260]	; (8007544 <HAL_DMA_IRQHandler+0xe14>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d04a      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a3f      	ldr	r2, [pc, #252]	; (8007548 <HAL_DMA_IRQHandler+0xe18>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d045      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3e      	ldr	r2, [pc, #248]	; (800754c <HAL_DMA_IRQHandler+0xe1c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d040      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a3c      	ldr	r2, [pc, #240]	; (8007550 <HAL_DMA_IRQHandler+0xe20>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d03b      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a3b      	ldr	r2, [pc, #236]	; (8007554 <HAL_DMA_IRQHandler+0xe24>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d036      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a39      	ldr	r2, [pc, #228]	; (8007558 <HAL_DMA_IRQHandler+0xe28>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d031      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a38      	ldr	r2, [pc, #224]	; (800755c <HAL_DMA_IRQHandler+0xe2c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d02c      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a36      	ldr	r2, [pc, #216]	; (8007560 <HAL_DMA_IRQHandler+0xe30>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d027      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a35      	ldr	r2, [pc, #212]	; (8007564 <HAL_DMA_IRQHandler+0xe34>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d022      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a33      	ldr	r2, [pc, #204]	; (8007568 <HAL_DMA_IRQHandler+0xe38>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01d      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a32      	ldr	r2, [pc, #200]	; (800756c <HAL_DMA_IRQHandler+0xe3c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d018      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a30      	ldr	r2, [pc, #192]	; (8007570 <HAL_DMA_IRQHandler+0xe40>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a2f      	ldr	r2, [pc, #188]	; (8007574 <HAL_DMA_IRQHandler+0xe44>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00e      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2d      	ldr	r2, [pc, #180]	; (8007578 <HAL_DMA_IRQHandler+0xe48>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d009      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a2c      	ldr	r2, [pc, #176]	; (800757c <HAL_DMA_IRQHandler+0xe4c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <HAL_DMA_IRQHandler+0xdaa>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a2a      	ldr	r2, [pc, #168]	; (8007580 <HAL_DMA_IRQHandler+0xe50>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <HAL_DMA_IRQHandler+0xdbc>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 021c 	bic.w	r2, r2, #28
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e007      	b.n	80074fc <HAL_DMA_IRQHandler+0xdcc>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 020e 	bic.w	r2, r2, #14
 80074fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
 8007532:	e004      	b.n	800753e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007534:	bf00      	nop
 8007536:	e002      	b.n	800753e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007538:	bf00      	nop
 800753a:	e000      	b.n	800753e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800753c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800753e:	3728      	adds	r7, #40	; 0x28
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40020010 	.word	0x40020010
 8007548:	40020028 	.word	0x40020028
 800754c:	40020040 	.word	0x40020040
 8007550:	40020058 	.word	0x40020058
 8007554:	40020070 	.word	0x40020070
 8007558:	40020088 	.word	0x40020088
 800755c:	400200a0 	.word	0x400200a0
 8007560:	400200b8 	.word	0x400200b8
 8007564:	40020410 	.word	0x40020410
 8007568:	40020428 	.word	0x40020428
 800756c:	40020440 	.word	0x40020440
 8007570:	40020458 	.word	0x40020458
 8007574:	40020470 	.word	0x40020470
 8007578:	40020488 	.word	0x40020488
 800757c:	400204a0 	.word	0x400204a0
 8007580:	400204b8 	.word	0x400204b8

08007584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a42      	ldr	r2, [pc, #264]	; (800769c <DMA_CalcBaseAndBitshift+0x118>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d04a      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a41      	ldr	r2, [pc, #260]	; (80076a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d045      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3f      	ldr	r2, [pc, #252]	; (80076a4 <DMA_CalcBaseAndBitshift+0x120>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d040      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3e      	ldr	r2, [pc, #248]	; (80076a8 <DMA_CalcBaseAndBitshift+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d03b      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3c      	ldr	r2, [pc, #240]	; (80076ac <DMA_CalcBaseAndBitshift+0x128>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d036      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a3b      	ldr	r2, [pc, #236]	; (80076b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d031      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a39      	ldr	r2, [pc, #228]	; (80076b4 <DMA_CalcBaseAndBitshift+0x130>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02c      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a38      	ldr	r2, [pc, #224]	; (80076b8 <DMA_CalcBaseAndBitshift+0x134>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d027      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a36      	ldr	r2, [pc, #216]	; (80076bc <DMA_CalcBaseAndBitshift+0x138>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d022      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a35      	ldr	r2, [pc, #212]	; (80076c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d01d      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <DMA_CalcBaseAndBitshift+0x140>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d018      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a32      	ldr	r2, [pc, #200]	; (80076c8 <DMA_CalcBaseAndBitshift+0x144>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a30      	ldr	r2, [pc, #192]	; (80076cc <DMA_CalcBaseAndBitshift+0x148>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00e      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2f      	ldr	r2, [pc, #188]	; (80076d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d009      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a2d      	ldr	r2, [pc, #180]	; (80076d4 <DMA_CalcBaseAndBitshift+0x150>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <DMA_CalcBaseAndBitshift+0xa8>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <DMA_CalcBaseAndBitshift+0x154>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d101      	bne.n	8007630 <DMA_CalcBaseAndBitshift+0xac>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <DMA_CalcBaseAndBitshift+0xae>
 8007630:	2300      	movs	r3, #0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d024      	beq.n	8007680 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	3b10      	subs	r3, #16
 800763e:	4a27      	ldr	r2, [pc, #156]	; (80076dc <DMA_CalcBaseAndBitshift+0x158>)
 8007640:	fba2 2303 	umull	r2, r3, r2, r3
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	4a24      	ldr	r2, [pc, #144]	; (80076e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007650:	5cd3      	ldrb	r3, [r2, r3]
 8007652:	461a      	mov	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d908      	bls.n	8007670 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007666:	4013      	ands	r3, r2
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	659a      	str	r2, [r3, #88]	; 0x58
 800766e:	e00d      	b.n	800768c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	4b1b      	ldr	r3, [pc, #108]	; (80076e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007678:	4013      	ands	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6593      	str	r3, [r2, #88]	; 0x58
 800767e:	e005      	b.n	800768c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8
 80076dc:	aaaaaaab 	.word	0xaaaaaaab
 80076e0:	0801c7e8 	.word	0x0801c7e8
 80076e4:	fffffc00 	.word	0xfffffc00

080076e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d120      	bne.n	800773e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b03      	cmp	r3, #3
 8007702:	d858      	bhi.n	80077b6 <DMA_CheckFifoParam+0xce>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <DMA_CheckFifoParam+0x24>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	0800771d 	.word	0x0800771d
 8007710:	0800772f 	.word	0x0800772f
 8007714:	0800771d 	.word	0x0800771d
 8007718:	080077b7 	.word	0x080077b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d048      	beq.n	80077ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800772c:	e045      	b.n	80077ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007736:	d142      	bne.n	80077be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800773c:	e03f      	b.n	80077be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007746:	d123      	bne.n	8007790 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	2b03      	cmp	r3, #3
 800774e:	d838      	bhi.n	80077c2 <DMA_CheckFifoParam+0xda>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <DMA_CheckFifoParam+0x70>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	0800776f 	.word	0x0800776f
 8007760:	08007769 	.word	0x08007769
 8007764:	08007781 	.word	0x08007781
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
        break;
 800776c:	e030      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d025      	beq.n	80077c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800777e:	e022      	b.n	80077c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007788:	d11f      	bne.n	80077ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800778e:	e01c      	b.n	80077ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	2b02      	cmp	r3, #2
 8007796:	d902      	bls.n	800779e <DMA_CheckFifoParam+0xb6>
 8007798:	2b03      	cmp	r3, #3
 800779a:	d003      	beq.n	80077a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800779c:	e018      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
        break;
 80077a2:	e015      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00e      	beq.n	80077ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
    break;
 80077b4:	e00b      	b.n	80077ce <DMA_CheckFifoParam+0xe6>
        break;
 80077b6:	bf00      	nop
 80077b8:	e00a      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077ba:	bf00      	nop
 80077bc:	e008      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077be:	bf00      	nop
 80077c0:	e006      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077c2:	bf00      	nop
 80077c4:	e004      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077c6:	bf00      	nop
 80077c8:	e002      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
        break;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <DMA_CheckFifoParam+0xe8>
    break;
 80077ce:	bf00      	nop
    }
  }

  return status;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d022      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a36      	ldr	r2, [pc, #216]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01d      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a35      	ldr	r2, [pc, #212]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d018      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a33      	ldr	r2, [pc, #204]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a32      	ldr	r2, [pc, #200]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00e      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a30      	ldr	r2, [pc, #192]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d009      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d004      	beq.n	800783e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d101      	bne.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007842:	2300      	movs	r3, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01a      	beq.n	800787e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3b08      	subs	r3, #8
 8007850:	4a28      	ldr	r2, [pc, #160]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4b26      	ldr	r3, [pc, #152]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a24      	ldr	r2, [pc, #144]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800786c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2201      	movs	r2, #1
 8007876:	409a      	lsls	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800787c:	e024      	b.n	80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	3b10      	subs	r3, #16
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007888:	fba2 2303 	umull	r2, r3, r2, r3
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d806      	bhi.n	80078a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d902      	bls.n	80078a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3308      	adds	r3, #8
 80078a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a16      	ldr	r2, [pc, #88]	; (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2201      	movs	r2, #1
 80078c2:	409a      	lsls	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	58025408 	.word	0x58025408
 80078d8:	5802541c 	.word	0x5802541c
 80078dc:	58025430 	.word	0x58025430
 80078e0:	58025444 	.word	0x58025444
 80078e4:	58025458 	.word	0x58025458
 80078e8:	5802546c 	.word	0x5802546c
 80078ec:	58025480 	.word	0x58025480
 80078f0:	58025494 	.word	0x58025494
 80078f4:	cccccccd 	.word	0xcccccccd
 80078f8:	16009600 	.word	0x16009600
 80078fc:	58025880 	.word	0x58025880
 8007900:	aaaaaaab 	.word	0xaaaaaaab
 8007904:	400204b8 	.word	0x400204b8
 8007908:	4002040f 	.word	0x4002040f
 800790c:	10008200 	.word	0x10008200
 8007910:	40020880 	.word	0x40020880

08007914 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04a      	beq.n	80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d847      	bhi.n	80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a25      	ldr	r2, [pc, #148]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d022      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a24      	ldr	r2, [pc, #144]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d01d      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d101      	bne.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007984:	2300      	movs	r3, #0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4b17      	ldr	r3, [pc, #92]	; (80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800799c:	671a      	str	r2, [r3, #112]	; 0x70
 800799e:	e009      	b.n	80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4b14      	ldr	r3, [pc, #80]	; (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	461a      	mov	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a11      	ldr	r2, [pc, #68]	; (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	2201      	movs	r2, #1
 80079ba:	409a      	lsls	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	58025408 	.word	0x58025408
 80079d0:	5802541c 	.word	0x5802541c
 80079d4:	58025430 	.word	0x58025430
 80079d8:	58025444 	.word	0x58025444
 80079dc:	58025458 	.word	0x58025458
 80079e0:	5802546c 	.word	0x5802546c
 80079e4:	58025480 	.word	0x58025480
 80079e8:	58025494 	.word	0x58025494
 80079ec:	1600963f 	.word	0x1600963f
 80079f0:	58025940 	.word	0x58025940
 80079f4:	1000823f 	.word	0x1000823f
 80079f8:	40020940 	.word	0x40020940

080079fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b098      	sub	sp, #96	; 0x60
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007a04:	4a84      	ldr	r2, [pc, #528]	; (8007c18 <HAL_FDCAN_Init+0x21c>)
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	224c      	movs	r2, #76	; 0x4c
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f00f fad8 	bl	8016fc4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e1c6      	b.n	8007dac <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a7e      	ldr	r2, [pc, #504]	; (8007c1c <HAL_FDCAN_Init+0x220>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d106      	bne.n	8007a36 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a30:	461a      	mov	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fb fe10 	bl	8003670 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0210 	bic.w	r2, r2, #16
 8007a5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a60:	f7fc fe46 	bl	80046f0 <HAL_GetTick>
 8007a64:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a66:	e014      	b.n	8007a92 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a68:	f7fc fe42 	bl	80046f0 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b0a      	cmp	r3, #10
 8007a74:	d90d      	bls.n	8007a92 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a7c:	f043 0201 	orr.w	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2203      	movs	r2, #3
 8007a8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e18c      	b.n	8007dac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d0e3      	beq.n	8007a68 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ab0:	f7fc fe1e 	bl	80046f0 <HAL_GetTick>
 8007ab4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ab6:	e014      	b.n	8007ae2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007ab8:	f7fc fe1a 	bl	80046f0 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b0a      	cmp	r3, #10
 8007ac4:	d90d      	bls.n	8007ae2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007acc:	f043 0201 	orr.w	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e164      	b.n	8007dac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0e3      	beq.n	8007ab8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0202 	orr.w	r2, r2, #2
 8007afe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7c1b      	ldrb	r3, [r3, #16]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b16:	619a      	str	r2, [r3, #24]
 8007b18:	e007      	b.n	8007b2a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7c5b      	ldrb	r3, [r3, #17]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d108      	bne.n	8007b44 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b40:	619a      	str	r2, [r3, #24]
 8007b42:	e007      	b.n	8007b54 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7c9b      	ldrb	r3, [r3, #18]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d108      	bne.n	8007b6e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b6a:	619a      	str	r2, [r3, #24]
 8007b6c:	e007      	b.n	8007b7e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699a      	ldr	r2, [r3, #24]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007ba2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0210 	bic.w	r2, r2, #16
 8007bb2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d108      	bne.n	8007bce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0204 	orr.w	r2, r2, #4
 8007bca:	619a      	str	r2, [r3, #24]
 8007bcc:	e030      	b.n	8007c30 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02c      	beq.n	8007c30 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d020      	beq.n	8007c20 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0210 	orr.w	r2, r2, #16
 8007bfc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d114      	bne.n	8007c30 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699a      	ldr	r2, [r3, #24]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0220 	orr.w	r2, r2, #32
 8007c14:	619a      	str	r2, [r3, #24]
 8007c16:	e00b      	b.n	8007c30 <HAL_FDCAN_Init+0x234>
 8007c18:	0801c750 	.word	0x0801c750
 8007c1c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0220 	orr.w	r2, r2, #32
 8007c2e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c40:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c48:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c58:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c5a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c64:	d115      	bne.n	8007c92 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	3b01      	subs	r3, #1
 8007c72:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c74:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c7e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c8e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c90:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb8:	4413      	add	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d011      	beq.n	8007ce2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007cc6:	f023 0107 	bic.w	r1, r3, #7
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	3360      	adds	r3, #96	; 0x60
 8007cd2:	443b      	add	r3, r7
 8007cd4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d011      	beq.n	8007d0e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007cf2:	f023 0107 	bic.w	r1, r3, #7
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	3360      	adds	r3, #96	; 0x60
 8007cfe:	443b      	add	r3, r7
 8007d00:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d012      	beq.n	8007d3c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d1e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	3360      	adds	r3, #96	; 0x60
 8007d2a:	443b      	add	r3, r7
 8007d2c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d30:	011a      	lsls	r2, r3, #4
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d012      	beq.n	8007d6a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d4c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	3360      	adds	r3, #96	; 0x60
 8007d58:	443b      	add	r3, r7
 8007d5a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d5e:	021a      	lsls	r2, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a11      	ldr	r2, [pc, #68]	; (8007db4 <HAL_FDCAN_Init+0x3b8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d107      	bne.n	8007d84 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f022 0203 	bic.w	r2, r2, #3
 8007d82:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f80b 	bl	8007db8 <FDCAN_CalcultateRamBlockAddresses>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007da8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3760      	adds	r7, #96	; 0x60
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	4000a000 	.word	0x4000a000

08007db8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007dce:	4ba7      	ldr	r3, [pc, #668]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	0091      	lsls	r1, r2, #2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	041a      	lsls	r2, r3, #16
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	4413      	add	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e0e:	4b97      	ldr	r3, [pc, #604]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0091      	lsls	r1, r2, #2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	430b      	orrs	r3, r1
 8007e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e28:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	041a      	lsls	r2, r3, #16
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	4413      	add	r3, r2
 8007e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007e50:	4b86      	ldr	r3, [pc, #536]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	0091      	lsls	r1, r2, #2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	041a      	lsls	r2, r3, #16
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e98:	4b74      	ldr	r3, [pc, #464]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	0091      	lsls	r1, r2, #2
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	6812      	ldr	r2, [r2, #0]
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007eb2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eba:	041a      	lsls	r2, r3, #16
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ee0:	4b62      	ldr	r3, [pc, #392]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	0091      	lsls	r1, r2, #2
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	430b      	orrs	r3, r1
 8007eee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007f0c:	4b57      	ldr	r3, [pc, #348]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	0091      	lsls	r1, r2, #2
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f26:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	041a      	lsls	r2, r3, #16
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	4413      	add	r3, r2
 8007f44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007f4e:	4b47      	ldr	r3, [pc, #284]	; (800806c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	0091      	lsls	r1, r2, #2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f68:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f70:	041a      	lsls	r2, r3, #16
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f84:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	061a      	lsls	r2, r3, #24
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f9c:	4b34      	ldr	r3, [pc, #208]	; (8008070 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009a      	lsls	r2, r3, #2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	441a      	add	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	441a      	add	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	441a      	add	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007fea:	fb01 f303 	mul.w	r3, r1, r3
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	441a      	add	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008002:	fb01 f303 	mul.w	r3, r1, r3
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	441a      	add	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008032:	fb01 f303 	mul.w	r3, r1, r3
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	441a      	add	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800804e:	fb01 f303 	mul.w	r3, r1, r3
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	4a04      	ldr	r2, [pc, #16]	; (8008074 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d915      	bls.n	8008094 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008068:	e006      	b.n	8008078 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800806a:	bf00      	nop
 800806c:	ffff0003 	.word	0xffff0003
 8008070:	10002b00 	.word	0x10002b00
 8008074:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800807e:	f043 0220 	orr.w	r2, r3, #32
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2203      	movs	r2, #3
 800808c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e010      	b.n	80080b6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	e005      	b.n	80080a8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d3f3      	bcc.n	800809c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop

080080c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b089      	sub	sp, #36	; 0x24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080d2:	4b86      	ldr	r3, [pc, #536]	; (80082ec <HAL_GPIO_Init+0x228>)
 80080d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080d6:	e18c      	b.n	80083f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2101      	movs	r1, #1
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	4013      	ands	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 817e 	beq.w	80083ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d005      	beq.n	8008108 <HAL_GPIO_Init+0x44>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f003 0303 	and.w	r3, r3, #3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d130      	bne.n	800816a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	2203      	movs	r2, #3
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	43db      	mvns	r3, r3
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	4013      	ands	r3, r2
 800811e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4313      	orrs	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800813e:	2201      	movs	r2, #1
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43db      	mvns	r3, r3
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	4013      	ands	r3, r2
 800814c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	091b      	lsrs	r3, r3, #4
 8008154:	f003 0201 	and.w	r2, r3, #1
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4313      	orrs	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d017      	beq.n	80081a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	2203      	movs	r2, #3
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	43db      	mvns	r3, r3
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	4013      	ands	r3, r2
 800818c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	4313      	orrs	r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d123      	bne.n	80081fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	08da      	lsrs	r2, r3, #3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3208      	adds	r2, #8
 80081ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	220f      	movs	r2, #15
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43db      	mvns	r3, r3
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	4013      	ands	r3, r2
 80081d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	08da      	lsrs	r2, r3, #3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3208      	adds	r2, #8
 80081f4:	69b9      	ldr	r1, [r7, #24]
 80081f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	2203      	movs	r2, #3
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	43db      	mvns	r3, r3
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	4013      	ands	r3, r2
 8008210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f003 0203 	and.w	r2, r3, #3
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	fa02 f303 	lsl.w	r3, r2, r3
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	4313      	orrs	r3, r2
 8008226:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80d8 	beq.w	80083ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800823c:	4b2c      	ldr	r3, [pc, #176]	; (80082f0 <HAL_GPIO_Init+0x22c>)
 800823e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008242:	4a2b      	ldr	r2, [pc, #172]	; (80082f0 <HAL_GPIO_Init+0x22c>)
 8008244:	f043 0302 	orr.w	r3, r3, #2
 8008248:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800824c:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <HAL_GPIO_Init+0x22c>)
 800824e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800825a:	4a26      	ldr	r2, [pc, #152]	; (80082f4 <HAL_GPIO_Init+0x230>)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	089b      	lsrs	r3, r3, #2
 8008260:	3302      	adds	r3, #2
 8008262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	220f      	movs	r2, #15
 8008272:	fa02 f303 	lsl.w	r3, r2, r3
 8008276:	43db      	mvns	r3, r3
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	4013      	ands	r3, r2
 800827c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a1d      	ldr	r2, [pc, #116]	; (80082f8 <HAL_GPIO_Init+0x234>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d04a      	beq.n	800831c <HAL_GPIO_Init+0x258>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1c      	ldr	r2, [pc, #112]	; (80082fc <HAL_GPIO_Init+0x238>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d02b      	beq.n	80082e6 <HAL_GPIO_Init+0x222>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <HAL_GPIO_Init+0x23c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d025      	beq.n	80082e2 <HAL_GPIO_Init+0x21e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <HAL_GPIO_Init+0x240>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01f      	beq.n	80082de <HAL_GPIO_Init+0x21a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <HAL_GPIO_Init+0x244>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d019      	beq.n	80082da <HAL_GPIO_Init+0x216>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a18      	ldr	r2, [pc, #96]	; (800830c <HAL_GPIO_Init+0x248>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <HAL_GPIO_Init+0x212>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a17      	ldr	r2, [pc, #92]	; (8008310 <HAL_GPIO_Init+0x24c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00d      	beq.n	80082d2 <HAL_GPIO_Init+0x20e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a16      	ldr	r2, [pc, #88]	; (8008314 <HAL_GPIO_Init+0x250>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d007      	beq.n	80082ce <HAL_GPIO_Init+0x20a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a15      	ldr	r2, [pc, #84]	; (8008318 <HAL_GPIO_Init+0x254>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d101      	bne.n	80082ca <HAL_GPIO_Init+0x206>
 80082c6:	2309      	movs	r3, #9
 80082c8:	e029      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082ca:	230a      	movs	r3, #10
 80082cc:	e027      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082ce:	2307      	movs	r3, #7
 80082d0:	e025      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082d2:	2306      	movs	r3, #6
 80082d4:	e023      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082d6:	2305      	movs	r3, #5
 80082d8:	e021      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082da:	2304      	movs	r3, #4
 80082dc:	e01f      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082de:	2303      	movs	r3, #3
 80082e0:	e01d      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e01b      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e019      	b.n	800831e <HAL_GPIO_Init+0x25a>
 80082ea:	bf00      	nop
 80082ec:	58000080 	.word	0x58000080
 80082f0:	58024400 	.word	0x58024400
 80082f4:	58000400 	.word	0x58000400
 80082f8:	58020000 	.word	0x58020000
 80082fc:	58020400 	.word	0x58020400
 8008300:	58020800 	.word	0x58020800
 8008304:	58020c00 	.word	0x58020c00
 8008308:	58021000 	.word	0x58021000
 800830c:	58021400 	.word	0x58021400
 8008310:	58021800 	.word	0x58021800
 8008314:	58021c00 	.word	0x58021c00
 8008318:	58022400 	.word	0x58022400
 800831c:	2300      	movs	r3, #0
 800831e:	69fa      	ldr	r2, [r7, #28]
 8008320:	f002 0203 	and.w	r2, r2, #3
 8008324:	0092      	lsls	r2, r2, #2
 8008326:	4093      	lsls	r3, r2
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	4313      	orrs	r3, r2
 800832c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800832e:	4938      	ldr	r1, [pc, #224]	; (8008410 <HAL_GPIO_Init+0x34c>)
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	089b      	lsrs	r3, r3, #2
 8008334:	3302      	adds	r3, #2
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800833c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	43db      	mvns	r3, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	4013      	ands	r3, r2
 800834c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800836a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	43db      	mvns	r3, r3
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	4013      	ands	r3, r2
 80083a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	43db      	mvns	r3, r3
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	4013      	ands	r3, r2
 80083d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	3301      	adds	r3, #1
 80083f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f47f ae6b 	bne.w	80080d8 <HAL_GPIO_Init+0x14>
  }
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	3724      	adds	r7, #36	; 0x24
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	58000400 	.word	0x58000400

08008414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691a      	ldr	r2, [r3, #16]
 8008424:	887b      	ldrh	r3, [r7, #2]
 8008426:	4013      	ands	r3, r2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800842c:	2301      	movs	r3, #1
 800842e:	73fb      	strb	r3, [r7, #15]
 8008430:	e001      	b.n	8008436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	807b      	strh	r3, [r7, #2]
 8008450:	4613      	mov	r3, r2
 8008452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008454:	787b      	ldrb	r3, [r7, #1]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800845a:	887a      	ldrh	r2, [r7, #2]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008460:	e003      	b.n	800846a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	041a      	lsls	r2, r3, #16
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	619a      	str	r2, [r3, #24]
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
	...

08008478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e07f      	b.n	800858a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fb f94e 	bl	8003740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2224      	movs	r2, #36	; 0x24
 80084a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0201 	bic.w	r2, r2, #1
 80084ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d107      	bne.n	80084f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084ee:	609a      	str	r2, [r3, #8]
 80084f0:	e006      	b.n	8008500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d104      	bne.n	8008512 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6859      	ldr	r1, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <HAL_I2C_Init+0x11c>)
 800851e:	430b      	orrs	r3, r1
 8008520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69d9      	ldr	r1, [r3, #28]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1a      	ldr	r2, [r3, #32]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	02008000 	.word	0x02008000

08008598 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	68f9      	ldr	r1, [r7, #12]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
  }
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d138      	bne.n	8008654 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e032      	b.n	8008656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2224      	movs	r2, #36	; 0x24
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0201 	bic.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800861e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6819      	ldr	r1, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e000      	b.n	8008656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008654:	2302      	movs	r3, #2
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b20      	cmp	r3, #32
 8008676:	d139      	bne.n	80086ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008682:	2302      	movs	r3, #2
 8008684:	e033      	b.n	80086ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2224      	movs	r2, #36	; 0x24
 8008692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0201 	bic.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80086b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0201 	orr.w	r2, r2, #1
 80086d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e000      	b.n	80086ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086ec:	2302      	movs	r3, #2
  }
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086fc:	b08f      	sub	sp, #60	; 0x3c
 80086fe:	af0a      	add	r7, sp, #40	; 0x28
 8008700:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e116      	b.n	800893a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f00e f916 	bl	8016958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2203      	movs	r2, #3
 8008730:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f00a fa5b 	bl	8012c06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	687e      	ldr	r6, [r7, #4]
 8008758:	466d      	mov	r5, sp
 800875a:	f106 0410 	add.w	r4, r6, #16
 800875e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800876a:	e885 0003 	stmia.w	r5, {r0, r1}
 800876e:	1d33      	adds	r3, r6, #4
 8008770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008772:	6838      	ldr	r0, [r7, #0]
 8008774:	f00a f926 	bl	80129c4 <USB_CoreInit>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e0d7      	b.n	800893a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2100      	movs	r1, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f00a fa49 	bl	8012c28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
 800879a:	e04a      	b.n	8008832 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800879c:	7bfa      	ldrb	r2, [r7, #15]
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	333d      	adds	r3, #61	; 0x3d
 80087ac:	2201      	movs	r2, #1
 80087ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80087b0:	7bfa      	ldrb	r2, [r7, #15]
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4613      	mov	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	333c      	adds	r3, #60	; 0x3c
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80087c4:	7bfa      	ldrb	r2, [r7, #15]
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	b298      	uxth	r0, r3
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	3356      	adds	r3, #86	; 0x56
 80087d8:	4602      	mov	r2, r0
 80087da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80087dc:	7bfa      	ldrb	r2, [r7, #15]
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	3340      	adds	r3, #64	; 0x40
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087f0:	7bfa      	ldrb	r2, [r7, #15]
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4613      	mov	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	3344      	adds	r3, #68	; 0x44
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008804:	7bfa      	ldrb	r2, [r7, #15]
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	4613      	mov	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	3348      	adds	r3, #72	; 0x48
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008818:	7bfa      	ldrb	r2, [r7, #15]
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	334c      	adds	r3, #76	; 0x4c
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	3301      	adds	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
 8008832:	7bfa      	ldrb	r2, [r7, #15]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d3af      	bcc.n	800879c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	e044      	b.n	80088cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008842:	7bfa      	ldrb	r2, [r7, #15]
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	440b      	add	r3, r1
 8008850:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008854:	2200      	movs	r2, #0
 8008856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008858:	7bfa      	ldrb	r2, [r7, #15]
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800886a:	7bfa      	ldrb	r2, [r7, #15]
 800886c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800886e:	7bfa      	ldrb	r2, [r7, #15]
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008884:	7bfa      	ldrb	r2, [r7, #15]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800889a:	7bfa      	ldrb	r2, [r7, #15]
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80088b0:	7bfa      	ldrb	r2, [r7, #15]
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	3301      	adds	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
 80088cc:	7bfa      	ldrb	r2, [r7, #15]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d3b5      	bcc.n	8008842 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	687e      	ldr	r6, [r7, #4]
 80088de:	466d      	mov	r5, sp
 80088e0:	f106 0410 	add.w	r4, r6, #16
 80088e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80088f4:	1d33      	adds	r3, r6, #4
 80088f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088f8:	6838      	ldr	r0, [r7, #0]
 80088fa:	f00a f9e1 	bl	8012cc0 <USB_DevInit>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e014      	b.n	800893a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b01      	cmp	r3, #1
 8008926:	d102      	bne.n	800892e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f96f 	bl	8009c0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f00b fa23 	bl	8013d7e <USB_DevDisconnect>

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008942 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_PCD_Start+0x1c>
 800895a:	2302      	movs	r3, #2
 800895c:	e022      	b.n	80089a4 <HAL_PCD_Start+0x62>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008976:	2b01      	cmp	r3, #1
 8008978:	d105      	bne.n	8008986 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4618      	mov	r0, r3
 800898c:	f00a f92a 	bl	8012be4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f00b f9d1 	bl	8013d3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80089ac:	b590      	push	{r4, r7, lr}
 80089ae:	b08d      	sub	sp, #52	; 0x34
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f00b fa8f 	bl	8013ee6 <USB_GetMode>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f040 84b7 	bne.w	800933e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f00b f9f3 	bl	8013dc0 <USB_ReadInterrupts>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 84ad 	beq.w	800933c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	0a1b      	lsrs	r3, r3, #8
 80089ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f00b f9e0 	bl	8013dc0 <USB_ReadInterrupts>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d107      	bne.n	8008a1a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f002 0202 	and.w	r2, r2, #2
 8008a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f00b f9ce 	bl	8013dc0 <USB_ReadInterrupts>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f003 0310 	and.w	r3, r3, #16
 8008a2a:	2b10      	cmp	r3, #16
 8008a2c:	d161      	bne.n	8008af2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0210 	bic.w	r2, r2, #16
 8008a3c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f003 020f 	and.w	r2, r3, #15
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4413      	add	r3, r2
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	0c5b      	lsrs	r3, r3, #17
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d124      	bne.n	8008ab4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d035      	beq.n	8008ae2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	461a      	mov	r2, r3
 8008a88:	6a38      	ldr	r0, [r7, #32]
 8008a8a:	f00b f805 	bl	8013a98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	091b      	lsrs	r3, r3, #4
 8008a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a9a:	441a      	add	r2, r3
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	695a      	ldr	r2, [r3, #20]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	091b      	lsrs	r3, r3, #4
 8008aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aac:	441a      	add	r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	615a      	str	r2, [r3, #20]
 8008ab2:	e016      	b.n	8008ae2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	0c5b      	lsrs	r3, r3, #17
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	2b06      	cmp	r3, #6
 8008abe:	d110      	bne.n	8008ae2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6a38      	ldr	r0, [r7, #32]
 8008acc:	f00a ffe4 	bl	8013a98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	091b      	lsrs	r3, r3, #4
 8008ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008adc:	441a      	add	r2, r3
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	699a      	ldr	r2, [r3, #24]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0210 	orr.w	r2, r2, #16
 8008af0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f00b f962 	bl	8013dc0 <USB_ReadInterrupts>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b06:	f040 80a7 	bne.w	8008c58 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00b f967 	bl	8013de6 <USB_ReadDevAllOutEpInterrupt>
 8008b18:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008b1a:	e099      	b.n	8008c50 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 808e 	beq.w	8008c44 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f00b f98b 	bl	8013e4e <USB_ReadDevOutEPInterrupt>
 8008b38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b50:	461a      	mov	r2, r3
 8008b52:	2301      	movs	r3, #1
 8008b54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fed1 	bl	8009900 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00c      	beq.n	8008b82 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b74:	461a      	mov	r2, r3
 8008b76:	2308      	movs	r3, #8
 8008b78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 ffa7 	bl	8009ad0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f003 0310 	and.w	r3, r3, #16
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b98:	461a      	mov	r2, r3
 8008b9a:	2310      	movs	r3, #16
 8008b9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d030      	beq.n	8008c0a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb0:	2b80      	cmp	r3, #128	; 0x80
 8008bb2:	d109      	bne.n	8008bc8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bc6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bca:	4613      	mov	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	3304      	adds	r3, #4
 8008bdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	78db      	ldrb	r3, [r3, #3]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d108      	bne.n	8008bf8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2200      	movs	r2, #0
 8008bea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f00d ffa8 	bl	8016b48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	461a      	mov	r2, r3
 8008c06:	2302      	movs	r3, #2
 8008c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	461a      	mov	r2, r3
 8008c22:	2320      	movs	r3, #32
 8008c24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d009      	beq.n	8008c44 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	3301      	adds	r3, #1
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	085b      	lsrs	r3, r3, #1
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f47f af62 	bne.w	8008b1c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f00b f8af 	bl	8013dc0 <USB_ReadInterrupts>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c6c:	f040 80db 	bne.w	8008e26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00b f8d0 	bl	8013e1a <USB_ReadDevAllInEpInterrupt>
 8008c7a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c80:	e0cd      	b.n	8008e1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80c2 	beq.w	8008e12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c94:	b2d2      	uxtb	r2, r2
 8008c96:	4611      	mov	r1, r2
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f00b f8f6 	bl	8013e8a <USB_ReadDevInEPInterrupt>
 8008c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d057      	beq.n	8008d5a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	69f9      	ldr	r1, [r7, #28]
 8008cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cca:	4013      	ands	r3, r2
 8008ccc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cda:	461a      	mov	r2, r3
 8008cdc:	2301      	movs	r3, #1
 8008cde:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d132      	bne.n	8008d4e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cec:	4613      	mov	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	3348      	adds	r3, #72	; 0x48
 8008cf8:	6819      	ldr	r1, [r3, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4403      	add	r3, r0
 8008d08:	3344      	adds	r3, #68	; 0x44
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4419      	add	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d12:	4613      	mov	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4403      	add	r3, r0
 8008d1c:	3348      	adds	r3, #72	; 0x48
 8008d1e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d113      	bne.n	8008d4e <HAL_PCD_IRQHandler+0x3a2>
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	334c      	adds	r3, #76	; 0x4c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d108      	bne.n	8008d4e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d46:	461a      	mov	r2, r3
 8008d48:	2101      	movs	r1, #1
 8008d4a:	f00b f8ff 	bl	8013f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f00d fe72 	bl	8016a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d008      	beq.n	8008d76 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	461a      	mov	r2, r3
 8008d72:	2308      	movs	r3, #8
 8008d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f003 0310 	and.w	r3, r3, #16
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d008      	beq.n	8008d92 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2310      	movs	r3, #16
 8008d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d008      	beq.n	8008dae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	461a      	mov	r2, r3
 8008daa:	2340      	movs	r3, #64	; 0x40
 8008dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d023      	beq.n	8008e00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dba:	6a38      	ldr	r0, [r7, #32]
 8008dbc:	f00a f8de 	bl	8012f7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	3338      	adds	r3, #56	; 0x38
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	4413      	add	r3, r2
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	78db      	ldrb	r3, [r3, #3]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d108      	bne.n	8008dee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2200      	movs	r2, #0
 8008de0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f00d febf 	bl	8016b6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fcea 	bl	80097e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	3301      	adds	r3, #1
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f47f af2e 	bne.w	8008c82 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f00a ffc8 	bl	8013dc0 <USB_ReadInterrupts>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e3a:	d122      	bne.n	8008e82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d108      	bne.n	8008e6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e62:	2100      	movs	r1, #0
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fef5 	bl	8009c54 <HAL_PCDEx_LPM_Callback>
 8008e6a:	e002      	b.n	8008e72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f00d fe5d 	bl	8016b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695a      	ldr	r2, [r3, #20]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f00a ff9a 	bl	8013dc0 <USB_ReadInterrupts>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e96:	d112      	bne.n	8008ebe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d102      	bne.n	8008eae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f00d fe19 	bl	8016ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695a      	ldr	r2, [r3, #20]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f00a ff7c 	bl	8013dc0 <USB_ReadInterrupts>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ed2:	d121      	bne.n	8008f18 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695a      	ldr	r2, [r3, #20]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008ee2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d111      	bne.n	8008f12 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efc:	089b      	lsrs	r3, r3, #2
 8008efe:	f003 020f 	and.w	r2, r3, #15
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008f08:	2101      	movs	r1, #1
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fea2 	bl	8009c54 <HAL_PCDEx_LPM_Callback>
 8008f10:	e002      	b.n	8008f18 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f00d fde4 	bl	8016ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f00a ff4f 	bl	8013dc0 <USB_ReadInterrupts>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2c:	f040 80b7 	bne.w	800909e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2110      	movs	r1, #16
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f00a f816 	bl	8012f7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f50:	2300      	movs	r3, #0
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f54:	e046      	b.n	8008fe4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f62:	461a      	mov	r2, r3
 8008f64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f96:	461a      	mov	r2, r3
 8008f98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d3b3      	bcc.n	8008f56 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ffc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009000:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	2b00      	cmp	r3, #0
 8009008:	d016      	beq.n	8009038 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800901a:	f043 030b 	orr.w	r3, r3, #11
 800901e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009030:	f043 030b 	orr.w	r3, r3, #11
 8009034:	6453      	str	r3, [r2, #68]	; 0x44
 8009036:	e015      	b.n	8009064 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903e:	695a      	ldr	r2, [r3, #20]
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009046:	4619      	mov	r1, r3
 8009048:	f242 032b 	movw	r3, #8235	; 0x202b
 800904c:	4313      	orrs	r3, r2
 800904e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905e:	f043 030b 	orr.w	r3, r3, #11
 8009062:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009072:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009076:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009088:	461a      	mov	r2, r3
 800908a:	f00a ff5f 	bl	8013f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800909c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f00a fe8c 	bl	8013dc0 <USB_ReadInterrupts>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b2:	d124      	bne.n	80090fe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f00a ff23 	bl	8013f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f009 ffd7 	bl	8013076 <USB_GetDevSpeed>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681c      	ldr	r4, [r3, #0]
 80090d4:	f001 fd88 	bl	800abe8 <HAL_RCC_GetHCLKFreq>
 80090d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	f009 fcdc 	bl	8012aa0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f00d fcd0 	bl	8016a8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	695a      	ldr	r2, [r3, #20]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80090fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f00a fe5c 	bl	8013dc0 <USB_ReadInterrupts>
 8009108:	4603      	mov	r3, r0
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b08      	cmp	r3, #8
 8009110:	d10a      	bne.n	8009128 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f00d fcad 	bl	8016a72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f002 0208 	and.w	r2, r2, #8
 8009126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4618      	mov	r0, r3
 800912e:	f00a fe47 	bl	8013dc0 <USB_ReadInterrupts>
 8009132:	4603      	mov	r3, r0
 8009134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d122      	bne.n	8009182 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009148:	2301      	movs	r3, #1
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
 800914c:	e014      	b.n	8009178 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009152:	4613      	mov	r3, r2
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	440b      	add	r3, r1
 800915c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d105      	bne.n	8009172 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fb09 	bl	8009784 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	3301      	adds	r3, #1
 8009176:	627b      	str	r3, [r7, #36]	; 0x24
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917e:	429a      	cmp	r2, r3
 8009180:	d3e5      	bcc.n	800914e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f00a fe1a 	bl	8013dc0 <USB_ReadInterrupts>
 800918c:	4603      	mov	r3, r0
 800918e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009196:	d13b      	bne.n	8009210 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009198:	2301      	movs	r3, #1
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
 800919c:	e02b      	b.n	80091f6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	4613      	mov	r3, r2
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	440b      	add	r3, r1
 80091bc:	3340      	adds	r3, #64	; 0x40
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d115      	bne.n	80091f0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80091c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	da12      	bge.n	80091f0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ce:	4613      	mov	r3, r2
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	333f      	adds	r3, #63	; 0x3f
 80091da:	2201      	movs	r2, #1
 80091dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 faca 	bl	8009784 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	3301      	adds	r3, #1
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d3ce      	bcc.n	800919e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695a      	ldr	r2, [r3, #20]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800920e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f00a fdd3 	bl	8013dc0 <USB_ReadInterrupts>
 800921a:	4603      	mov	r3, r0
 800921c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009224:	d155      	bne.n	80092d2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009226:	2301      	movs	r3, #1
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
 800922a:	e045      	b.n	80092b8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d12e      	bne.n	80092b2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009254:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009256:	2b00      	cmp	r3, #0
 8009258:	da2b      	bge.n	80092b2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009266:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800926a:	429a      	cmp	r2, r3
 800926c:	d121      	bne.n	80092b2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009272:	4613      	mov	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009280:	2201      	movs	r2, #1
 8009282:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092ae:	6053      	str	r3, [r2, #4]
            break;
 80092b0:	e007      	b.n	80092c2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	3301      	adds	r3, #1
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092be:	429a      	cmp	r2, r3
 80092c0:	d3b4      	bcc.n	800922c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695a      	ldr	r2, [r3, #20]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80092d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f00a fd72 	bl	8013dc0 <USB_ReadInterrupts>
 80092dc:	4603      	mov	r3, r0
 80092de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e6:	d10a      	bne.n	80092fe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f00d fc51 	bl	8016b90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	695a      	ldr	r2, [r3, #20]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80092fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f00a fd5c 	bl	8013dc0 <USB_ReadInterrupts>
 8009308:	4603      	mov	r3, r0
 800930a:	f003 0304 	and.w	r3, r3, #4
 800930e:	2b04      	cmp	r3, #4
 8009310:	d115      	bne.n	800933e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f00d fc41 	bl	8016bac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6859      	ldr	r1, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	e000      	b.n	800933e <HAL_PCD_IRQHandler+0x992>
      return;
 800933c:	bf00      	nop
    }
  }
}
 800933e:	3734      	adds	r7, #52	; 0x34
 8009340:	46bd      	mov	sp, r7
 8009342:	bd90      	pop	{r4, r7, pc}

08009344 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_PCD_SetAddress+0x1a>
 800935a:	2302      	movs	r3, #2
 800935c:	e013      	b.n	8009386 <HAL_PCD_SetAddress+0x42>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f00a fcba 	bl	8013cf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	461a      	mov	r2, r3
 800939c:	4603      	mov	r3, r0
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	460b      	mov	r3, r1
 80093a2:	803b      	strh	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80093ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	da0f      	bge.n	80093d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 020f 	and.w	r2, r3, #15
 80093ba:	4613      	mov	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	3338      	adds	r3, #56	; 0x38
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2201      	movs	r2, #1
 80093d0:	705a      	strb	r2, [r3, #1]
 80093d2:	e00f      	b.n	80093f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 020f 	and.w	r2, r3, #15
 80093da:	4613      	mov	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	4413      	add	r3, r2
 80093ea:	3304      	adds	r3, #4
 80093ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009400:	883a      	ldrh	r2, [r7, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	78ba      	ldrb	r2, [r7, #2]
 800940a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800941e:	78bb      	ldrb	r3, [r7, #2]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d102      	bne.n	800942a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009430:	2b01      	cmp	r3, #1
 8009432:	d101      	bne.n	8009438 <HAL_PCD_EP_Open+0xaa>
 8009434:	2302      	movs	r3, #2
 8009436:	e00e      	b.n	8009456 <HAL_PCD_EP_Open+0xc8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68f9      	ldr	r1, [r7, #12]
 8009446:	4618      	mov	r0, r3
 8009448:	f009 fe3a 	bl	80130c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009454:	7afb      	ldrb	r3, [r7, #11]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	460b      	mov	r3, r1
 8009468:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800946a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	da0f      	bge.n	8009492 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	f003 020f 	and.w	r2, r3, #15
 8009478:	4613      	mov	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	3338      	adds	r3, #56	; 0x38
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	4413      	add	r3, r2
 8009486:	3304      	adds	r3, #4
 8009488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	705a      	strb	r2, [r3, #1]
 8009490:	e00f      	b.n	80094b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	f003 020f 	and.w	r2, r3, #15
 8009498:	4613      	mov	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4413      	add	r3, r2
 80094a8:	3304      	adds	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d101      	bne.n	80094cc <HAL_PCD_EP_Close+0x6e>
 80094c8:	2302      	movs	r3, #2
 80094ca:	e00e      	b.n	80094ea <HAL_PCD_EP_Close+0x8c>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68f9      	ldr	r1, [r7, #12]
 80094da:	4618      	mov	r0, r3
 80094dc:	f009 fe78 	bl	80131d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b086      	sub	sp, #24
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
 80094fe:	460b      	mov	r3, r1
 8009500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009502:	7afb      	ldrb	r3, [r7, #11]
 8009504:	f003 020f 	and.w	r2, r3, #15
 8009508:	4613      	mov	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	3304      	adds	r3, #4
 800951a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2200      	movs	r2, #0
 800952c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2200      	movs	r2, #0
 8009532:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	f003 030f 	and.w	r3, r3, #15
 800953a:	b2da      	uxtb	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d102      	bne.n	800954e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	6979      	ldr	r1, [r7, #20]
 800955c:	f009 ff14 	bl	8013388 <USB_EPStartXfer>

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	f003 020f 	and.w	r2, r3, #15
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	4613      	mov	r3, r2
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4413      	add	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	440b      	add	r3, r1
 8009588:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800958c:	681b      	ldr	r3, [r3, #0]
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
 80095a6:	460b      	mov	r3, r1
 80095a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	f003 020f 	and.w	r2, r3, #15
 80095b0:	4613      	mov	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	3338      	adds	r3, #56	; 0x38
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4413      	add	r3, r2
 80095be:	3304      	adds	r3, #4
 80095c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2200      	movs	r2, #0
 80095d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2201      	movs	r2, #1
 80095d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095da:	7afb      	ldrb	r3, [r7, #11]
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d102      	bne.n	80095f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	461a      	mov	r2, r3
 8009600:	6979      	ldr	r1, [r7, #20]
 8009602:	f009 fec1 	bl	8013388 <USB_EPStartXfer>

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	f003 020f 	and.w	r2, r3, #15
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d901      	bls.n	800962e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e050      	b.n	80096d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800962e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009632:	2b00      	cmp	r3, #0
 8009634:	da0f      	bge.n	8009656 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	f003 020f 	and.w	r2, r3, #15
 800963c:	4613      	mov	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	3338      	adds	r3, #56	; 0x38
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	3304      	adds	r3, #4
 800964c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	705a      	strb	r2, [r3, #1]
 8009654:	e00d      	b.n	8009672 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4613      	mov	r3, r2
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	4413      	add	r3, r2
 8009668:	3304      	adds	r3, #4
 800966a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	b2da      	uxtb	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_PCD_EP_SetStall+0x82>
 800968e:	2302      	movs	r3, #2
 8009690:	e01e      	b.n	80096d0 <HAL_PCD_EP_SetStall+0xc0>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f00a fa51 	bl	8013b48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	b2d9      	uxtb	r1, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096c0:	461a      	mov	r2, r3
 80096c2:	f00a fc43 	bl	8013f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	f003 020f 	and.w	r2, r3, #15
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d901      	bls.n	80096f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e042      	b.n	800977c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da0f      	bge.n	800971e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	f003 020f 	and.w	r2, r3, #15
 8009704:	4613      	mov	r3, r2
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	3338      	adds	r3, #56	; 0x38
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	4413      	add	r3, r2
 8009712:	3304      	adds	r3, #4
 8009714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	705a      	strb	r2, [r3, #1]
 800971c:	e00f      	b.n	800973e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	f003 020f 	and.w	r2, r3, #15
 8009724:	4613      	mov	r3, r2
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	3304      	adds	r3, #4
 8009736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	b2da      	uxtb	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_PCD_EP_ClrStall+0x86>
 800975a:	2302      	movs	r3, #2
 800975c:	e00e      	b.n	800977c <HAL_PCD_EP_ClrStall+0xa4>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	4618      	mov	r0, r3
 800976e:	f00a fa59 	bl	8013c24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009794:	2b00      	cmp	r3, #0
 8009796:	da0c      	bge.n	80097b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	f003 020f 	and.w	r2, r3, #15
 800979e:	4613      	mov	r3, r2
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	3338      	adds	r3, #56	; 0x38
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	4413      	add	r3, r2
 80097ac:	3304      	adds	r3, #4
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e00c      	b.n	80097cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68f9      	ldr	r1, [r7, #12]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f00a f878 	bl	80138c8 <USB_EPStopXfer>
 80097d8:	4603      	mov	r3, r0
 80097da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80097dc:	7afb      	ldrb	r3, [r7, #11]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b08a      	sub	sp, #40	; 0x28
 80097ea:	af02      	add	r7, sp, #8
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	3338      	adds	r3, #56	; 0x38
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	695a      	ldr	r2, [r3, #20]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	429a      	cmp	r2, r3
 8009818:	d901      	bls.n	800981e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e06c      	b.n	80098f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	691a      	ldr	r2, [r3, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	429a      	cmp	r2, r3
 8009832:	d902      	bls.n	800983a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3303      	adds	r3, #3
 800983e:	089b      	lsrs	r3, r3, #2
 8009840:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009842:	e02b      	b.n	800989c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	429a      	cmp	r2, r3
 8009858:	d902      	bls.n	8009860 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	3303      	adds	r3, #3
 8009864:	089b      	lsrs	r3, r3, #2
 8009866:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68d9      	ldr	r1, [r3, #12]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	b2da      	uxtb	r2, r3
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009878:	b2db      	uxtb	r3, r3
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4603      	mov	r3, r0
 800987e:	6978      	ldr	r0, [r7, #20]
 8009880:	f00a f8cc 	bl	8013a1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	441a      	add	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	695a      	ldr	r2, [r3, #20]
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	441a      	add	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d809      	bhi.n	80098c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	695a      	ldr	r2, [r3, #20]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d203      	bcs.n	80098c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1be      	bne.n	8009844 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	691a      	ldr	r2, [r3, #16]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d811      	bhi.n	80098f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	2201      	movs	r2, #1
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	43db      	mvns	r3, r3
 80098ec:	6939      	ldr	r1, [r7, #16]
 80098ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098f2:	4013      	ands	r3, r2
 80098f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	333c      	adds	r3, #60	; 0x3c
 8009918:	3304      	adds	r3, #4
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d17b      	bne.n	8009a2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f003 0308 	and.w	r3, r3, #8
 800993c:	2b00      	cmp	r3, #0
 800993e:	d015      	beq.n	800996c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	4a61      	ldr	r2, [pc, #388]	; (8009ac8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	f240 80b9 	bls.w	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80b3 	beq.w	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009962:	461a      	mov	r2, r3
 8009964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009968:	6093      	str	r3, [r2, #8]
 800996a:	e0a7      	b.n	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f003 0320 	and.w	r3, r3, #32
 8009972:	2b00      	cmp	r3, #0
 8009974:	d009      	beq.n	800998a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	461a      	mov	r2, r3
 8009984:	2320      	movs	r3, #32
 8009986:	6093      	str	r3, [r2, #8]
 8009988:	e098      	b.n	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009990:	2b00      	cmp	r3, #0
 8009992:	f040 8093 	bne.w	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4a4b      	ldr	r2, [pc, #300]	; (8009ac8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d90f      	bls.n	80099be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b4:	461a      	mov	r2, r3
 80099b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ba:	6093      	str	r3, [r2, #8]
 80099bc:	e07e      	b.n	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	4413      	add	r3, r2
 80099d0:	3304      	adds	r3, #4
 80099d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6a1a      	ldr	r2, [r3, #32]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	0159      	lsls	r1, r3, #5
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	440b      	add	r3, r1
 80099e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ea:	1ad2      	subs	r2, r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d114      	bne.n	8009a20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	f00a fa9e 	bl	8013f4c <USB_EP0_OutStart>
 8009a10:	e006      	b.n	8009a20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	441a      	add	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f00c ffee 	bl	8016a08 <HAL_PCD_DataOutStageCallback>
 8009a2c:	e046      	b.n	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4a26      	ldr	r2, [pc, #152]	; (8009acc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d124      	bne.n	8009a80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00a      	beq.n	8009a56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a52:	6093      	str	r3, [r2, #8]
 8009a54:	e032      	b.n	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d008      	beq.n	8009a72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2320      	movs	r3, #32
 8009a70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f00c ffc5 	bl	8016a08 <HAL_PCD_DataOutStageCallback>
 8009a7e:	e01d      	b.n	8009abc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d114      	bne.n	8009ab0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009a86:	6879      	ldr	r1, [r7, #4]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	440b      	add	r3, r1
 8009a94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d108      	bne.n	8009ab0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f00a fa4e 	bl	8013f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f00c ffa6 	bl	8016a08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	4f54300a 	.word	0x4f54300a
 8009acc:	4f54310a 	.word	0x4f54310a

08009ad0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	333c      	adds	r3, #60	; 0x3c
 8009ae8:	3304      	adds	r3, #4
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4a15      	ldr	r2, [pc, #84]	; (8009b58 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d90e      	bls.n	8009b24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f00c ff5d 	bl	80169e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d90c      	bls.n	8009b4c <PCD_EP_OutSetupPacket_int+0x7c>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d108      	bne.n	8009b4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b44:	461a      	mov	r2, r3
 8009b46:	2101      	movs	r1, #1
 8009b48:	f00a fa00 	bl	8013f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	4f54300a 	.word	0x4f54300a

08009b5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009b74:	78fb      	ldrb	r3, [r7, #3]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d107      	bne.n	8009b8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009b7a:	883b      	ldrh	r3, [r7, #0]
 8009b7c:	0419      	lsls	r1, r3, #16
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	629a      	str	r2, [r3, #40]	; 0x28
 8009b88:	e028      	b.n	8009bdc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	0c1b      	lsrs	r3, r3, #16
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	4413      	add	r3, r2
 8009b96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]
 8009b9c:	e00d      	b.n	8009bba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	3340      	adds	r3, #64	; 0x40
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	0c1b      	lsrs	r3, r3, #16
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	73fb      	strb	r3, [r7, #15]
 8009bba:	7bfa      	ldrb	r2, [r7, #15]
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d3ec      	bcc.n	8009b9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009bc4:	883b      	ldrh	r3, [r7, #0]
 8009bc6:	0418      	lsls	r0, r3, #16
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	4302      	orrs	r2, r0
 8009bd4:	3340      	adds	r3, #64	; 0x40
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	887a      	ldrh	r2, [r7, #2]
 8009bfc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c3a:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <HAL_PCDEx_ActivateLPM+0x44>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	10000003 	.word	0x10000003

08009c54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <HAL_PWREx_ConfigSupply+0x70>)
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d00a      	beq.n	8009c96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c80:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <HAL_PWREx_ConfigSupply+0x70>)
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d001      	beq.n	8009c92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e01f      	b.n	8009cd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	e01d      	b.n	8009cd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c96:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <HAL_PWREx_ConfigSupply+0x70>)
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f023 0207 	bic.w	r2, r3, #7
 8009c9e:	490f      	ldr	r1, [pc, #60]	; (8009cdc <HAL_PWREx_ConfigSupply+0x70>)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ca6:	f7fa fd23 	bl	80046f0 <HAL_GetTick>
 8009caa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cac:	e009      	b.n	8009cc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009cae:	f7fa fd1f 	bl	80046f0 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cbc:	d901      	bls.n	8009cc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e007      	b.n	8009cd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <HAL_PWREx_ConfigSupply+0x70>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cce:	d1ee      	bne.n	8009cae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	58024800 	.word	0x58024800

08009ce0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009ce4:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4a04      	ldr	r2, [pc, #16]	; (8009cfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cee:	60d3      	str	r3, [r2, #12]
}
 8009cf0:	bf00      	nop
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	58024800 	.word	0x58024800

08009d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08c      	sub	sp, #48	; 0x30
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e3c8      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 8087 	beq.w	8009e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d20:	4b88      	ldr	r3, [pc, #544]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d2a:	4b86      	ldr	r3, [pc, #536]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d007      	beq.n	8009d46 <HAL_RCC_OscConfig+0x46>
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	2b18      	cmp	r3, #24
 8009d3a:	d110      	bne.n	8009d5e <HAL_RCC_OscConfig+0x5e>
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d10b      	bne.n	8009d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d46:	4b7f      	ldr	r3, [pc, #508]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d06c      	beq.n	8009e2c <HAL_RCC_OscConfig+0x12c>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d168      	bne.n	8009e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e3a2      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d66:	d106      	bne.n	8009d76 <HAL_RCC_OscConfig+0x76>
 8009d68:	4b76      	ldr	r3, [pc, #472]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a75      	ldr	r2, [pc, #468]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	e02e      	b.n	8009dd4 <HAL_RCC_OscConfig+0xd4>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10c      	bne.n	8009d98 <HAL_RCC_OscConfig+0x98>
 8009d7e:	4b71      	ldr	r3, [pc, #452]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a70      	ldr	r2, [pc, #448]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	4b6e      	ldr	r3, [pc, #440]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a6d      	ldr	r2, [pc, #436]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	e01d      	b.n	8009dd4 <HAL_RCC_OscConfig+0xd4>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009da0:	d10c      	bne.n	8009dbc <HAL_RCC_OscConfig+0xbc>
 8009da2:	4b68      	ldr	r3, [pc, #416]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a67      	ldr	r2, [pc, #412]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	4b65      	ldr	r3, [pc, #404]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a64      	ldr	r2, [pc, #400]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009db8:	6013      	str	r3, [r2, #0]
 8009dba:	e00b      	b.n	8009dd4 <HAL_RCC_OscConfig+0xd4>
 8009dbc:	4b61      	ldr	r3, [pc, #388]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a60      	ldr	r2, [pc, #384]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	4b5e      	ldr	r3, [pc, #376]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a5d      	ldr	r2, [pc, #372]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d013      	beq.n	8009e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ddc:	f7fa fc88 	bl	80046f0 <HAL_GetTick>
 8009de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009de2:	e008      	b.n	8009df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009de4:	f7fa fc84 	bl	80046f0 <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b64      	cmp	r3, #100	; 0x64
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e356      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009df6:	4b53      	ldr	r3, [pc, #332]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0f0      	beq.n	8009de4 <HAL_RCC_OscConfig+0xe4>
 8009e02:	e014      	b.n	8009e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e04:	f7fa fc74 	bl	80046f0 <HAL_GetTick>
 8009e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e0c:	f7fa fc70 	bl	80046f0 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b64      	cmp	r3, #100	; 0x64
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e342      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e1e:	4b49      	ldr	r3, [pc, #292]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f0      	bne.n	8009e0c <HAL_RCC_OscConfig+0x10c>
 8009e2a:	e000      	b.n	8009e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 808c 	beq.w	8009f54 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e3c:	4b41      	ldr	r3, [pc, #260]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e46:	4b3f      	ldr	r3, [pc, #252]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d007      	beq.n	8009e62 <HAL_RCC_OscConfig+0x162>
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	2b18      	cmp	r3, #24
 8009e56:	d137      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x1c8>
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	f003 0303 	and.w	r3, r3, #3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d132      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e62:	4b38      	ldr	r3, [pc, #224]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <HAL_RCC_OscConfig+0x17a>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e314      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e7a:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f023 0219 	bic.w	r2, r3, #25
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	492f      	ldr	r1, [pc, #188]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e8c:	f7fa fc30 	bl	80046f0 <HAL_GetTick>
 8009e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e92:	e008      	b.n	8009ea6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e94:	f7fa fc2c 	bl	80046f0 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e2fe      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ea6:	4b27      	ldr	r3, [pc, #156]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 0304 	and.w	r3, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0f0      	beq.n	8009e94 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eb2:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	061b      	lsls	r3, r3, #24
 8009ec0:	4920      	ldr	r1, [pc, #128]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ec6:	e045      	b.n	8009f54 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d026      	beq.n	8009f1e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ed0:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f023 0219 	bic.w	r2, r3, #25
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4919      	ldr	r1, [pc, #100]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee2:	f7fa fc05 	bl	80046f0 <HAL_GetTick>
 8009ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ee8:	e008      	b.n	8009efc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eea:	f7fa fc01 	bl	80046f0 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d901      	bls.n	8009efc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e2d3      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009efc:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0f0      	beq.n	8009eea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f08:	4b0e      	ldr	r3, [pc, #56]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	061b      	lsls	r3, r3, #24
 8009f16:	490b      	ldr	r1, [pc, #44]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	604b      	str	r3, [r1, #4]
 8009f1c:	e01a      	b.n	8009f54 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a08      	ldr	r2, [pc, #32]	; (8009f44 <HAL_RCC_OscConfig+0x244>)
 8009f24:	f023 0301 	bic.w	r3, r3, #1
 8009f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f2a:	f7fa fbe1 	bl	80046f0 <HAL_GetTick>
 8009f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f30:	e00a      	b.n	8009f48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f32:	f7fa fbdd 	bl	80046f0 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d903      	bls.n	8009f48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e2af      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
 8009f44:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f48:	4b96      	ldr	r3, [pc, #600]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1ee      	bne.n	8009f32 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d06a      	beq.n	800a036 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f60:	4b90      	ldr	r3, [pc, #576]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f6a:	4b8e      	ldr	r3, [pc, #568]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d007      	beq.n	8009f86 <HAL_RCC_OscConfig+0x286>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b18      	cmp	r3, #24
 8009f7a:	d11b      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x2b4>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d116      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f86:	4b87      	ldr	r3, [pc, #540]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <HAL_RCC_OscConfig+0x29e>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	2b80      	cmp	r3, #128	; 0x80
 8009f98:	d001      	beq.n	8009f9e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e282      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f9e:	4b81      	ldr	r3, [pc, #516]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	061b      	lsls	r3, r3, #24
 8009fac:	497d      	ldr	r1, [pc, #500]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fb2:	e040      	b.n	800a036 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d023      	beq.n	800a004 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009fbc:	4b79      	ldr	r3, [pc, #484]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a78      	ldr	r2, [pc, #480]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc8:	f7fa fb92 	bl	80046f0 <HAL_GetTick>
 8009fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fce:	e008      	b.n	8009fe2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fd0:	f7fa fb8e 	bl	80046f0 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e260      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fe2:	4b70      	ldr	r3, [pc, #448]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0f0      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fee:	4b6d      	ldr	r3, [pc, #436]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	061b      	lsls	r3, r3, #24
 8009ffc:	4969      	ldr	r1, [pc, #420]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60cb      	str	r3, [r1, #12]
 800a002:	e018      	b.n	800a036 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a004:	4b67      	ldr	r3, [pc, #412]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a66      	ldr	r2, [pc, #408]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a00a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a00e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7fa fb6e 	bl	80046f0 <HAL_GetTick>
 800a014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a018:	f7fa fb6a 	bl	80046f0 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e23c      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a02a:	4b5e      	ldr	r3, [pc, #376]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0308 	and.w	r3, r3, #8
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d036      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d019      	beq.n	800a07e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a04a:	4b56      	ldr	r3, [pc, #344]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04e:	4a55      	ldr	r2, [pc, #340]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a050:	f043 0301 	orr.w	r3, r3, #1
 800a054:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a056:	f7fa fb4b 	bl	80046f0 <HAL_GetTick>
 800a05a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a05c:	e008      	b.n	800a070 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a05e:	f7fa fb47 	bl	80046f0 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e219      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a070:	4b4c      	ldr	r3, [pc, #304]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0f0      	beq.n	800a05e <HAL_RCC_OscConfig+0x35e>
 800a07c:	e018      	b.n	800a0b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a07e:	4b49      	ldr	r3, [pc, #292]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a082:	4a48      	ldr	r2, [pc, #288]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a084:	f023 0301 	bic.w	r3, r3, #1
 800a088:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a08a:	f7fa fb31 	bl	80046f0 <HAL_GetTick>
 800a08e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a090:	e008      	b.n	800a0a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a092:	f7fa fb2d 	bl	80046f0 <HAL_GetTick>
 800a096:	4602      	mov	r2, r0
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d901      	bls.n	800a0a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e1ff      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0a4:	4b3f      	ldr	r3, [pc, #252]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1f0      	bne.n	800a092 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0320 	and.w	r3, r3, #32
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d036      	beq.n	800a12a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d019      	beq.n	800a0f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0c4:	4b37      	ldr	r3, [pc, #220]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a36      	ldr	r2, [pc, #216]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a0ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0d0:	f7fa fb0e 	bl	80046f0 <HAL_GetTick>
 800a0d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0d8:	f7fa fb0a 	bl	80046f0 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e1dc      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0ea:	4b2e      	ldr	r3, [pc, #184]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0f0      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x3d8>
 800a0f6:	e018      	b.n	800a12a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0f8:	4b2a      	ldr	r3, [pc, #168]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a29      	ldr	r2, [pc, #164]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a0fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a102:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a104:	f7fa faf4 	bl	80046f0 <HAL_GetTick>
 800a108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a10a:	e008      	b.n	800a11e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a10c:	f7fa faf0 	bl	80046f0 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e1c2      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a11e:	4b21      	ldr	r3, [pc, #132]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1f0      	bne.n	800a10c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 8086 	beq.w	800a244 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a138:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <HAL_RCC_OscConfig+0x4a8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1a      	ldr	r2, [pc, #104]	; (800a1a8 <HAL_RCC_OscConfig+0x4a8>)
 800a13e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a144:	f7fa fad4 	bl	80046f0 <HAL_GetTick>
 800a148:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a14a:	e008      	b.n	800a15e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a14c:	f7fa fad0 	bl	80046f0 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	2b64      	cmp	r3, #100	; 0x64
 800a158:	d901      	bls.n	800a15e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e1a2      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <HAL_RCC_OscConfig+0x4a8>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0f0      	beq.n	800a14c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d106      	bne.n	800a180 <HAL_RCC_OscConfig+0x480>
 800a172:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a176:	4a0b      	ldr	r2, [pc, #44]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a178:	f043 0301 	orr.w	r3, r3, #1
 800a17c:	6713      	str	r3, [r2, #112]	; 0x70
 800a17e:	e032      	b.n	800a1e6 <HAL_RCC_OscConfig+0x4e6>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d111      	bne.n	800a1ac <HAL_RCC_OscConfig+0x4ac>
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	4a05      	ldr	r2, [pc, #20]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	6713      	str	r3, [r2, #112]	; 0x70
 800a194:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a198:	4a02      	ldr	r2, [pc, #8]	; (800a1a4 <HAL_RCC_OscConfig+0x4a4>)
 800a19a:	f023 0304 	bic.w	r3, r3, #4
 800a19e:	6713      	str	r3, [r2, #112]	; 0x70
 800a1a0:	e021      	b.n	800a1e6 <HAL_RCC_OscConfig+0x4e6>
 800a1a2:	bf00      	nop
 800a1a4:	58024400 	.word	0x58024400
 800a1a8:	58024800 	.word	0x58024800
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	2b05      	cmp	r3, #5
 800a1b2:	d10c      	bne.n	800a1ce <HAL_RCC_OscConfig+0x4ce>
 800a1b4:	4b83      	ldr	r3, [pc, #524]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b8:	4a82      	ldr	r2, [pc, #520]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1ba:	f043 0304 	orr.w	r3, r3, #4
 800a1be:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c0:	4b80      	ldr	r3, [pc, #512]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c4:	4a7f      	ldr	r2, [pc, #508]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1c6:	f043 0301 	orr.w	r3, r3, #1
 800a1ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a1cc:	e00b      	b.n	800a1e6 <HAL_RCC_OscConfig+0x4e6>
 800a1ce:	4b7d      	ldr	r3, [pc, #500]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a7c      	ldr	r2, [pc, #496]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1d4:	f023 0301 	bic.w	r3, r3, #1
 800a1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1da:	4b7a      	ldr	r3, [pc, #488]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	4a79      	ldr	r2, [pc, #484]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a1e0:	f023 0304 	bic.w	r3, r3, #4
 800a1e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d015      	beq.n	800a21a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ee:	f7fa fa7f 	bl	80046f0 <HAL_GetTick>
 800a1f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1f4:	e00a      	b.n	800a20c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1f6:	f7fa fa7b 	bl	80046f0 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	f241 3288 	movw	r2, #5000	; 0x1388
 800a204:	4293      	cmp	r3, r2
 800a206:	d901      	bls.n	800a20c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e14b      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a20c:	4b6d      	ldr	r3, [pc, #436]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0ee      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x4f6>
 800a218:	e014      	b.n	800a244 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21a:	f7fa fa69 	bl	80046f0 <HAL_GetTick>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a220:	e00a      	b.n	800a238 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a222:	f7fa fa65 	bl	80046f0 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	4293      	cmp	r3, r2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e135      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a238:	4b62      	ldr	r3, [pc, #392]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1ee      	bne.n	800a222 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 812a 	beq.w	800a4a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a24e:	4b5d      	ldr	r3, [pc, #372]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a256:	2b18      	cmp	r3, #24
 800a258:	f000 80ba 	beq.w	800a3d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b02      	cmp	r3, #2
 800a262:	f040 8095 	bne.w	800a390 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a266:	4b57      	ldr	r3, [pc, #348]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a56      	ldr	r2, [pc, #344]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a26c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a272:	f7fa fa3d 	bl	80046f0 <HAL_GetTick>
 800a276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a278:	e008      	b.n	800a28c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a27a:	f7fa fa39 	bl	80046f0 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e10b      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a28c:	4b4d      	ldr	r3, [pc, #308]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1f0      	bne.n	800a27a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a298:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a29a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a29c:	4b4a      	ldr	r3, [pc, #296]	; (800a3c8 <HAL_RCC_OscConfig+0x6c8>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a2a8:	0112      	lsls	r2, r2, #4
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	4945      	ldr	r1, [pc, #276]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	628b      	str	r3, [r1, #40]	; 0x28
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	025b      	lsls	r3, r3, #9
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	041b      	lsls	r3, r3, #16
 800a2d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	061b      	lsls	r3, r3, #24
 800a2de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2e2:	4938      	ldr	r1, [pc, #224]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a2e8:	4b36      	ldr	r3, [pc, #216]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4a35      	ldr	r2, [pc, #212]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2f4:	4b33      	ldr	r3, [pc, #204]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a2f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2f8:	4b34      	ldr	r3, [pc, #208]	; (800a3cc <HAL_RCC_OscConfig+0x6cc>)
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a300:	00d2      	lsls	r2, r2, #3
 800a302:	4930      	ldr	r1, [pc, #192]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a304:	4313      	orrs	r3, r2
 800a306:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a308:	4b2e      	ldr	r3, [pc, #184]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	f023 020c 	bic.w	r2, r3, #12
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a314:	492b      	ldr	r1, [pc, #172]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a316:	4313      	orrs	r3, r2
 800a318:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a31a:	4b2a      	ldr	r3, [pc, #168]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31e:	f023 0202 	bic.w	r2, r3, #2
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a326:	4927      	ldr	r1, [pc, #156]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a32c:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a338:	4b22      	ldr	r3, [pc, #136]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	4a21      	ldr	r2, [pc, #132]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a33e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a344:	4b1f      	ldr	r3, [pc, #124]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	4a1e      	ldr	r2, [pc, #120]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a34a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a34e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a350:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	4a1b      	ldr	r2, [pc, #108]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a35c:	4b19      	ldr	r3, [pc, #100]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a18      	ldr	r2, [pc, #96]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a368:	f7fa f9c2 	bl	80046f0 <HAL_GetTick>
 800a36c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a370:	f7fa f9be 	bl	80046f0 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e090      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a382:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f0      	beq.n	800a370 <HAL_RCC_OscConfig+0x670>
 800a38e:	e088      	b.n	800a4a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a0b      	ldr	r2, [pc, #44]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a39a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39c:	f7fa f9a8 	bl	80046f0 <HAL_GetTick>
 800a3a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3a4:	f7fa f9a4 	bl	80046f0 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e076      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3b6:	4b03      	ldr	r3, [pc, #12]	; (800a3c4 <HAL_RCC_OscConfig+0x6c4>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f0      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x6a4>
 800a3c2:	e06e      	b.n	800a4a2 <HAL_RCC_OscConfig+0x7a2>
 800a3c4:	58024400 	.word	0x58024400
 800a3c8:	fffffc0c 	.word	0xfffffc0c
 800a3cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a3d0:	4b36      	ldr	r3, [pc, #216]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a3d6:	4b35      	ldr	r3, [pc, #212]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d031      	beq.n	800a448 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f003 0203 	and.w	r2, r3, #3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d12a      	bne.n	800a448 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	091b      	lsrs	r3, r3, #4
 800a3f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d122      	bne.n	800a448 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a40e:	429a      	cmp	r2, r3
 800a410:	d11a      	bne.n	800a448 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	0a5b      	lsrs	r3, r3, #9
 800a416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a420:	429a      	cmp	r2, r3
 800a422:	d111      	bne.n	800a448 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	0c1b      	lsrs	r3, r3, #16
 800a428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a432:	429a      	cmp	r2, r3
 800a434:	d108      	bne.n	800a448 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	0e1b      	lsrs	r3, r3, #24
 800a43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a442:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a444:	429a      	cmp	r2, r3
 800a446:	d001      	beq.n	800a44c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e02b      	b.n	800a4a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a44c:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a450:	08db      	lsrs	r3, r3, #3
 800a452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a456:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d01f      	beq.n	800a4a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a462:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a46e:	f7fa f93f 	bl	80046f0 <HAL_GetTick>
 800a472:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a474:	bf00      	nop
 800a476:	f7fa f93b 	bl	80046f0 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	4293      	cmp	r3, r2
 800a480:	d0f9      	beq.n	800a476 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a482:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a486:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <HAL_RCC_OscConfig+0x7b0>)
 800a488:	4013      	ands	r3, r2
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a48e:	00d2      	lsls	r2, r2, #3
 800a490:	4906      	ldr	r1, [pc, #24]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a492:	4313      	orrs	r3, r2
 800a494:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	4a04      	ldr	r2, [pc, #16]	; (800a4ac <HAL_RCC_OscConfig+0x7ac>)
 800a49c:	f043 0301 	orr.w	r3, r3, #1
 800a4a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3730      	adds	r7, #48	; 0x30
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	ffff0007 	.word	0xffff0007

0800a4b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e19c      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a4c8:	4b8a      	ldr	r3, [pc, #552]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d910      	bls.n	800a4f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4d6:	4b87      	ldr	r3, [pc, #540]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f023 020f 	bic.w	r2, r3, #15
 800a4de:	4985      	ldr	r1, [pc, #532]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4e6:	4b83      	ldr	r3, [pc, #524]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d001      	beq.n	800a4f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e184      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d010      	beq.n	800a526 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	4b7b      	ldr	r3, [pc, #492]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a510:	429a      	cmp	r2, r3
 800a512:	d908      	bls.n	800a526 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a514:	4b78      	ldr	r3, [pc, #480]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	4975      	ldr	r1, [pc, #468]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a522:	4313      	orrs	r3, r2
 800a524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0308 	and.w	r3, r3, #8
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d010      	beq.n	800a554 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	695a      	ldr	r2, [r3, #20]
 800a536:	4b70      	ldr	r3, [pc, #448]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a53e:	429a      	cmp	r2, r3
 800a540:	d908      	bls.n	800a554 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a542:	4b6d      	ldr	r3, [pc, #436]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	496a      	ldr	r1, [pc, #424]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a550:	4313      	orrs	r3, r2
 800a552:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d010      	beq.n	800a582 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	699a      	ldr	r2, [r3, #24]
 800a564:	4b64      	ldr	r3, [pc, #400]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d908      	bls.n	800a582 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a570:	4b61      	ldr	r3, [pc, #388]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	495e      	ldr	r1, [pc, #376]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d010      	beq.n	800a5b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	69da      	ldr	r2, [r3, #28]
 800a592:	4b59      	ldr	r3, [pc, #356]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d908      	bls.n	800a5b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a59e:	4b56      	ldr	r3, [pc, #344]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	4953      	ldr	r1, [pc, #332]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d010      	beq.n	800a5de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	4b4d      	ldr	r3, [pc, #308]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	f003 030f 	and.w	r3, r3, #15
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d908      	bls.n	800a5de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5cc:	4b4a      	ldr	r3, [pc, #296]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	f023 020f 	bic.w	r2, r3, #15
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	4947      	ldr	r1, [pc, #284]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d055      	beq.n	800a696 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5ea:	4b43      	ldr	r3, [pc, #268]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	4940      	ldr	r1, [pc, #256]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	2b02      	cmp	r3, #2
 800a602:	d107      	bne.n	800a614 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a604:	4b3c      	ldr	r3, [pc, #240]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d121      	bne.n	800a654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e0f6      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d107      	bne.n	800a62c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a61c:	4b36      	ldr	r3, [pc, #216]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d115      	bne.n	800a654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e0ea      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d107      	bne.n	800a644 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a634:	4b30      	ldr	r3, [pc, #192]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d109      	bne.n	800a654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e0de      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a644:	4b2c      	ldr	r3, [pc, #176]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e0d6      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a654:	4b28      	ldr	r3, [pc, #160]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f023 0207 	bic.w	r2, r3, #7
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	4925      	ldr	r1, [pc, #148]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a662:	4313      	orrs	r3, r2
 800a664:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a666:	f7fa f843 	bl	80046f0 <HAL_GetTick>
 800a66a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a66c:	e00a      	b.n	800a684 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a66e:	f7fa f83f 	bl	80046f0 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d901      	bls.n	800a684 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e0be      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a684:	4b1c      	ldr	r3, [pc, #112]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	429a      	cmp	r2, r3
 800a694:	d1eb      	bne.n	800a66e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d010      	beq.n	800a6c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	f003 030f 	and.w	r3, r3, #15
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d208      	bcs.n	800a6c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6b2:	4b11      	ldr	r3, [pc, #68]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f023 020f 	bic.w	r2, r3, #15
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	490e      	ldr	r1, [pc, #56]	; (800a6f8 <HAL_RCC_ClockConfig+0x244>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6c4:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 030f 	and.w	r3, r3, #15
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d214      	bcs.n	800a6fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6d2:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f023 020f 	bic.w	r2, r3, #15
 800a6da:	4906      	ldr	r1, [pc, #24]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6e2:	4b04      	ldr	r3, [pc, #16]	; (800a6f4 <HAL_RCC_ClockConfig+0x240>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 030f 	and.w	r3, r3, #15
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d005      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e086      	b.n	800a802 <HAL_RCC_ClockConfig+0x34e>
 800a6f4:	52002000 	.word	0x52002000
 800a6f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	d010      	beq.n	800a72a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	4b3f      	ldr	r3, [pc, #252]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a714:	429a      	cmp	r2, r3
 800a716:	d208      	bcs.n	800a72a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a718:	4b3c      	ldr	r3, [pc, #240]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	4939      	ldr	r1, [pc, #228]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a726:	4313      	orrs	r3, r2
 800a728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0308 	and.w	r3, r3, #8
 800a732:	2b00      	cmp	r3, #0
 800a734:	d010      	beq.n	800a758 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	695a      	ldr	r2, [r3, #20]
 800a73a:	4b34      	ldr	r3, [pc, #208]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a73c:	69db      	ldr	r3, [r3, #28]
 800a73e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a742:	429a      	cmp	r2, r3
 800a744:	d208      	bcs.n	800a758 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a746:	4b31      	ldr	r3, [pc, #196]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	492e      	ldr	r1, [pc, #184]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a754:	4313      	orrs	r3, r2
 800a756:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0310 	and.w	r3, r3, #16
 800a760:	2b00      	cmp	r3, #0
 800a762:	d010      	beq.n	800a786 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699a      	ldr	r2, [r3, #24]
 800a768:	4b28      	ldr	r3, [pc, #160]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a770:	429a      	cmp	r2, r3
 800a772:	d208      	bcs.n	800a786 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a774:	4b25      	ldr	r3, [pc, #148]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	4922      	ldr	r1, [pc, #136]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a782:	4313      	orrs	r3, r2
 800a784:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d010      	beq.n	800a7b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69da      	ldr	r2, [r3, #28]
 800a796:	4b1d      	ldr	r3, [pc, #116]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d208      	bcs.n	800a7b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a7a2:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	4917      	ldr	r1, [pc, #92]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a7b4:	f000 f89e 	bl	800a8f4 <HAL_RCC_GetSysClockFreq>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	4b14      	ldr	r3, [pc, #80]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	0a1b      	lsrs	r3, r3, #8
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	4912      	ldr	r1, [pc, #72]	; (800a810 <HAL_RCC_ClockConfig+0x35c>)
 800a7c6:	5ccb      	ldrb	r3, [r1, r3]
 800a7c8:	f003 031f 	and.w	r3, r3, #31
 800a7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7d2:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <HAL_RCC_ClockConfig+0x358>)
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f003 030f 	and.w	r3, r3, #15
 800a7da:	4a0d      	ldr	r2, [pc, #52]	; (800a810 <HAL_RCC_ClockConfig+0x35c>)
 800a7dc:	5cd3      	ldrb	r3, [r2, r3]
 800a7de:	f003 031f 	and.w	r3, r3, #31
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <HAL_RCC_ClockConfig+0x360>)
 800a7ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7ec:	4a0a      	ldr	r2, [pc, #40]	; (800a818 <HAL_RCC_ClockConfig+0x364>)
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <HAL_RCC_ClockConfig+0x368>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7f9 ff30 	bl	800465c <HAL_InitTick>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	58024400 	.word	0x58024400
 800a810:	0801c7d8 	.word	0x0801c7d8
 800a814:	24000004 	.word	0x24000004
 800a818:	24000000 	.word	0x24000000
 800a81c:	24000008 	.word	0x24000008

0800a820 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08c      	sub	sp, #48	; 0x30
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d12a      	bne.n	800a888 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a832:	4b2d      	ldr	r3, [pc, #180]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a838:	4a2b      	ldr	r2, [pc, #172]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a842:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a850:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a856:	2302      	movs	r3, #2
 800a858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a85a:	2303      	movs	r3, #3
 800a85c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85e:	2300      	movs	r3, #0
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a862:	2300      	movs	r3, #0
 800a864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a866:	f107 031c 	add.w	r3, r7, #28
 800a86a:	4619      	mov	r1, r3
 800a86c:	481f      	ldr	r0, [pc, #124]	; (800a8ec <HAL_RCC_MCOConfig+0xcc>)
 800a86e:	f7fd fc29 	bl	80080c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a872:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	430b      	orrs	r3, r1
 800a880:	4919      	ldr	r1, [pc, #100]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a882:	4313      	orrs	r3, r2
 800a884:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a886:	e02a      	b.n	800a8de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a888:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a88a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a88e:	4a16      	ldr	r2, [pc, #88]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a890:	f043 0304 	orr.w	r3, r3, #4
 800a894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a898:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a89a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a8a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a8bc:	f107 031c 	add.w	r3, r7, #28
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	480b      	ldr	r0, [pc, #44]	; (800a8f0 <HAL_RCC_MCOConfig+0xd0>)
 800a8c4:	f7fd fbfe 	bl	80080c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a8c8:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	01d9      	lsls	r1, r3, #7
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	430b      	orrs	r3, r1
 800a8d8:	4903      	ldr	r1, [pc, #12]	; (800a8e8 <HAL_RCC_MCOConfig+0xc8>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	610b      	str	r3, [r1, #16]
}
 800a8de:	bf00      	nop
 800a8e0:	3730      	adds	r7, #48	; 0x30
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	58020000 	.word	0x58020000
 800a8f0:	58020800 	.word	0x58020800

0800a8f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b089      	sub	sp, #36	; 0x24
 800a8f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8fa:	4bb3      	ldr	r3, [pc, #716]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a902:	2b18      	cmp	r3, #24
 800a904:	f200 8155 	bhi.w	800abb2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a908:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90e:	bf00      	nop
 800a910:	0800a975 	.word	0x0800a975
 800a914:	0800abb3 	.word	0x0800abb3
 800a918:	0800abb3 	.word	0x0800abb3
 800a91c:	0800abb3 	.word	0x0800abb3
 800a920:	0800abb3 	.word	0x0800abb3
 800a924:	0800abb3 	.word	0x0800abb3
 800a928:	0800abb3 	.word	0x0800abb3
 800a92c:	0800abb3 	.word	0x0800abb3
 800a930:	0800a99b 	.word	0x0800a99b
 800a934:	0800abb3 	.word	0x0800abb3
 800a938:	0800abb3 	.word	0x0800abb3
 800a93c:	0800abb3 	.word	0x0800abb3
 800a940:	0800abb3 	.word	0x0800abb3
 800a944:	0800abb3 	.word	0x0800abb3
 800a948:	0800abb3 	.word	0x0800abb3
 800a94c:	0800abb3 	.word	0x0800abb3
 800a950:	0800a9a1 	.word	0x0800a9a1
 800a954:	0800abb3 	.word	0x0800abb3
 800a958:	0800abb3 	.word	0x0800abb3
 800a95c:	0800abb3 	.word	0x0800abb3
 800a960:	0800abb3 	.word	0x0800abb3
 800a964:	0800abb3 	.word	0x0800abb3
 800a968:	0800abb3 	.word	0x0800abb3
 800a96c:	0800abb3 	.word	0x0800abb3
 800a970:	0800a9a7 	.word	0x0800a9a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a974:	4b94      	ldr	r3, [pc, #592]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d009      	beq.n	800a994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a980:	4b91      	ldr	r3, [pc, #580]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	08db      	lsrs	r3, r3, #3
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	4a90      	ldr	r2, [pc, #576]	; (800abcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a98c:	fa22 f303 	lsr.w	r3, r2, r3
 800a990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a992:	e111      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a994:	4b8d      	ldr	r3, [pc, #564]	; (800abcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a996:	61bb      	str	r3, [r7, #24]
      break;
 800a998:	e10e      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a99a:	4b8d      	ldr	r3, [pc, #564]	; (800abd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a99c:	61bb      	str	r3, [r7, #24]
      break;
 800a99e:	e10b      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a9a0:	4b8c      	ldr	r3, [pc, #560]	; (800abd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a9a2:	61bb      	str	r3, [r7, #24]
      break;
 800a9a4:	e108      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9a6:	4b88      	ldr	r3, [pc, #544]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a9b0:	4b85      	ldr	r3, [pc, #532]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b4:	091b      	lsrs	r3, r3, #4
 800a9b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9bc:	4b82      	ldr	r3, [pc, #520]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9c6:	4b80      	ldr	r3, [pc, #512]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ca:	08db      	lsrs	r3, r3, #3
 800a9cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	fb02 f303 	mul.w	r3, r2, r3
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 80e1 	beq.w	800abac <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	f000 8083 	beq.w	800aaf8 <HAL_RCC_GetSysClockFreq+0x204>
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	f200 80a1 	bhi.w	800ab3c <HAL_RCC_GetSysClockFreq+0x248>
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d003      	beq.n	800aa08 <HAL_RCC_GetSysClockFreq+0x114>
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d056      	beq.n	800aab4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aa06:	e099      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa08:	4b6f      	ldr	r3, [pc, #444]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0320 	and.w	r3, r3, #32
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d02d      	beq.n	800aa70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa14:	4b6c      	ldr	r3, [pc, #432]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	08db      	lsrs	r3, r3, #3
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	4a6b      	ldr	r2, [pc, #428]	; (800abcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa20:	fa22 f303 	lsr.w	r3, r2, r3
 800aa24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	ee07 3a90 	vmov	s15, r3
 800aa2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3e:	4b62      	ldr	r3, [pc, #392]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa52:	eddf 5a61 	vldr	s11, [pc, #388]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa6e:	e087      	b.n	800ab80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800abdc <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b51      	ldr	r3, [pc, #324]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa96:	eddf 5a50 	vldr	s11, [pc, #320]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aab2:	e065      	b.n	800ab80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800abe0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac6:	4b40      	ldr	r3, [pc, #256]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aada:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaf6:	e043      	b.n	800ab80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eddf 6a38 	vldr	s13, [pc, #224]	; 800abe4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ab06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0a:	4b2f      	ldr	r3, [pc, #188]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab3a:	e021      	b.n	800ab80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab46:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abe0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4e:	4b1e      	ldr	r3, [pc, #120]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab80:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab84:	0a5b      	lsrs	r3, r3, #9
 800ab86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	ee07 3a90 	vmov	s15, r3
 800ab94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab98:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba4:	ee17 3a90 	vmov	r3, s15
 800aba8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800abaa:	e005      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800abac:	2300      	movs	r3, #0
 800abae:	61bb      	str	r3, [r7, #24]
      break;
 800abb0:	e002      	b.n	800abb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800abb2:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abb4:	61bb      	str	r3, [r7, #24]
      break;
 800abb6:	bf00      	nop
  }

  return sysclockfreq;
 800abb8:	69bb      	ldr	r3, [r7, #24]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3724      	adds	r7, #36	; 0x24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	58024400 	.word	0x58024400
 800abcc:	03d09000 	.word	0x03d09000
 800abd0:	003d0900 	.word	0x003d0900
 800abd4:	02faf080 	.word	0x02faf080
 800abd8:	46000000 	.word	0x46000000
 800abdc:	4c742400 	.word	0x4c742400
 800abe0:	4a742400 	.word	0x4a742400
 800abe4:	4c3ebc20 	.word	0x4c3ebc20

0800abe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abee:	f7ff fe81 	bl	800a8f4 <HAL_RCC_GetSysClockFreq>
 800abf2:	4602      	mov	r2, r0
 800abf4:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <HAL_RCC_GetHCLKFreq+0x50>)
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	0a1b      	lsrs	r3, r3, #8
 800abfa:	f003 030f 	and.w	r3, r3, #15
 800abfe:	490f      	ldr	r1, [pc, #60]	; (800ac3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ac00:	5ccb      	ldrb	r3, [r1, r3]
 800ac02:	f003 031f 	and.w	r3, r3, #31
 800ac06:	fa22 f303 	lsr.w	r3, r2, r3
 800ac0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	f003 030f 	and.w	r3, r3, #15
 800ac14:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ac16:	5cd3      	ldrb	r3, [r2, r3]
 800ac18:	f003 031f 	and.w	r3, r3, #31
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac22:	4a07      	ldr	r2, [pc, #28]	; (800ac40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac26:	4a07      	ldr	r2, [pc, #28]	; (800ac44 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac2c:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	58024400 	.word	0x58024400
 800ac3c:	0801c7d8 	.word	0x0801c7d8
 800ac40:	24000004 	.word	0x24000004
 800ac44:	24000000 	.word	0x24000000

0800ac48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac4c:	f7ff ffcc 	bl	800abe8 <HAL_RCC_GetHCLKFreq>
 800ac50:	4602      	mov	r2, r0
 800ac52:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	091b      	lsrs	r3, r3, #4
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	4904      	ldr	r1, [pc, #16]	; (800ac70 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac5e:	5ccb      	ldrb	r3, [r1, r3]
 800ac60:	f003 031f 	and.w	r3, r3, #31
 800ac64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	58024400 	.word	0x58024400
 800ac70:	0801c7d8 	.word	0x0801c7d8

0800ac74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac78:	f7ff ffb6 	bl	800abe8 <HAL_RCC_GetHCLKFreq>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	f003 0307 	and.w	r3, r3, #7
 800ac88:	4904      	ldr	r1, [pc, #16]	; (800ac9c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac8a:	5ccb      	ldrb	r3, [r1, r3]
 800ac8c:	f003 031f 	and.w	r3, r3, #31
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	58024400 	.word	0x58024400
 800ac9c:	0801c7d8 	.word	0x0801c7d8

0800aca0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aca4:	b0c6      	sub	sp, #280	; 0x118
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800acac:	2300      	movs	r3, #0
 800acae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800acb2:	2300      	movs	r3, #0
 800acb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800acc4:	2500      	movs	r5, #0
 800acc6:	ea54 0305 	orrs.w	r3, r4, r5
 800acca:	d049      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acd6:	d02f      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800acd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acdc:	d828      	bhi.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ace2:	d01a      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ace4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ace8:	d822      	bhi.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800acee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acf2:	d007      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acf4:	e01c      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acf6:	4bab      	ldr	r3, [pc, #684]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	4aaa      	ldr	r2, [pc, #680]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad02:	e01a      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad08:	3308      	adds	r3, #8
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 fa49 	bl	800d1a4 <RCCEx_PLL2_Config>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad18:	e00f      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1e:	3328      	adds	r3, #40	; 0x28
 800ad20:	2102      	movs	r1, #2
 800ad22:	4618      	mov	r0, r3
 800ad24:	f002 faf0 	bl	800d308 <RCCEx_PLL3_Config>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad2e:	e004      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad36:	e000      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad42:	4b98      	ldr	r3, [pc, #608]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad50:	4a94      	ldr	r2, [pc, #592]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad52:	430b      	orrs	r3, r1
 800ad54:	6513      	str	r3, [r2, #80]	; 0x50
 800ad56:	e003      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad6c:	f04f 0900 	mov.w	r9, #0
 800ad70:	ea58 0309 	orrs.w	r3, r8, r9
 800ad74:	d047      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d82a      	bhi.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad80:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800ad9d 	.word	0x0800ad9d
 800ad8c:	0800adab 	.word	0x0800adab
 800ad90:	0800adc1 	.word	0x0800adc1
 800ad94:	0800addf 	.word	0x0800addf
 800ad98:	0800addf 	.word	0x0800addf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9c:	4b81      	ldr	r3, [pc, #516]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	4a80      	ldr	r2, [pc, #512]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ada2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ada8:	e01a      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	3308      	adds	r3, #8
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f002 f9f6 	bl	800d1a4 <RCCEx_PLL2_Config>
 800adb8:	4603      	mov	r3, r0
 800adba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adbe:	e00f      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc4:	3328      	adds	r3, #40	; 0x28
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f002 fa9d 	bl	800d308 <RCCEx_PLL3_Config>
 800adce:	4603      	mov	r3, r0
 800add0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800add4:	e004      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800addc:	e000      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800adde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ade8:	4b6e      	ldr	r3, [pc, #440]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adec:	f023 0107 	bic.w	r1, r3, #7
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf6:	4a6b      	ldr	r2, [pc, #428]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adf8:	430b      	orrs	r3, r1
 800adfa:	6513      	str	r3, [r2, #80]	; 0x50
 800adfc:	e003      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ae12:	f04f 0b00 	mov.w	fp, #0
 800ae16:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae1a:	d05b      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae28:	d03b      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ae2a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae2e:	d834      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae34:	d037      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae3a:	d82e      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae40:	d033      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ae42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae46:	d828      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae4c:	d01a      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ae4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae52:	d822      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ae58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae5c:	d007      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ae5e:	e01c      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae60:	4b50      	ldr	r3, [pc, #320]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	4a4f      	ldr	r2, [pc, #316]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae6c:	e01e      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae72:	3308      	adds	r3, #8
 800ae74:	2100      	movs	r1, #0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f002 f994 	bl	800d1a4 <RCCEx_PLL2_Config>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae82:	e013      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	3328      	adds	r3, #40	; 0x28
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f002 fa3b 	bl	800d308 <RCCEx_PLL3_Config>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae98:	e008      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aea0:	e004      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aea2:	bf00      	nop
 800aea4:	e002      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aea6:	bf00      	nop
 800aea8:	e000      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aeaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10b      	bne.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aeb4:	4b3b      	ldr	r3, [pc, #236]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aec4:	4a37      	ldr	r2, [pc, #220]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aec6:	430b      	orrs	r3, r1
 800aec8:	6593      	str	r3, [r2, #88]	; 0x58
 800aeca:	e003      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aee4:	2300      	movs	r3, #0
 800aee6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aeea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aeee:	460b      	mov	r3, r1
 800aef0:	4313      	orrs	r3, r2
 800aef2:	d05d      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aefc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af00:	d03b      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800af02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af06:	d834      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af0c:	d037      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800af0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af12:	d82e      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af18:	d033      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800af1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af1e:	d828      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af24:	d01a      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800af26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af2a:	d822      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af34:	d007      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800af36:	e01c      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af38:	4b1a      	ldr	r3, [pc, #104]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a19      	ldr	r2, [pc, #100]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af44:	e01e      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4a:	3308      	adds	r3, #8
 800af4c:	2100      	movs	r1, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f002 f928 	bl	800d1a4 <RCCEx_PLL2_Config>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af5a:	e013      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af60:	3328      	adds	r3, #40	; 0x28
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f002 f9cf 	bl	800d308 <RCCEx_PLL3_Config>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af70:	e008      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af78:	e004      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af7a:	bf00      	nop
 800af7c:	e002      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af7e:	bf00      	nop
 800af80:	e000      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10d      	bne.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af8c:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af9c:	4a01      	ldr	r2, [pc, #4]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af9e:	430b      	orrs	r3, r1
 800afa0:	6593      	str	r3, [r2, #88]	; 0x58
 800afa2:	e005      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800afa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800afb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800afbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afc0:	2300      	movs	r3, #0
 800afc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afc6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800afca:	460b      	mov	r3, r1
 800afcc:	4313      	orrs	r3, r2
 800afce:	d03a      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800afd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd6:	2b30      	cmp	r3, #48	; 0x30
 800afd8:	d01f      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800afda:	2b30      	cmp	r3, #48	; 0x30
 800afdc:	d819      	bhi.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afde:	2b20      	cmp	r3, #32
 800afe0:	d00c      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	d815      	bhi.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d019      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afea:	2b10      	cmp	r3, #16
 800afec:	d111      	bne.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afee:	4baa      	ldr	r3, [pc, #680]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	4aa9      	ldr	r2, [pc, #676]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800affa:	e011      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800affc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b000:	3308      	adds	r3, #8
 800b002:	2102      	movs	r1, #2
 800b004:	4618      	mov	r0, r3
 800b006:	f002 f8cd 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b00a:	4603      	mov	r3, r0
 800b00c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b010:	e006      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b018:	e002      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b01a:	bf00      	nop
 800b01c:	e000      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b01e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b028:	4b9b      	ldr	r3, [pc, #620]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b02a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b036:	4a98      	ldr	r2, [pc, #608]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b038:	430b      	orrs	r3, r1
 800b03a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b03c:	e003      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b042:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b056:	2300      	movs	r3, #0
 800b058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b05c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b060:	460b      	mov	r3, r1
 800b062:	4313      	orrs	r3, r2
 800b064:	d051      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b070:	d035      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b076:	d82e      	bhi.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b078:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b07c:	d031      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b07e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b082:	d828      	bhi.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b088:	d01a      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b08e:	d822      	bhi.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b090:	2b00      	cmp	r3, #0
 800b092:	d003      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b098:	d007      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b09a:	e01c      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b09c:	4b7e      	ldr	r3, [pc, #504]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	4a7d      	ldr	r2, [pc, #500]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0a8:	e01c      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ae:	3308      	adds	r3, #8
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 f876 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0be:	e011      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c4:	3328      	adds	r3, #40	; 0x28
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 f91d 	bl	800d308 <RCCEx_PLL3_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0d4:	e006      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0dc:	e002      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0de:	bf00      	nop
 800b0e0:	e000      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10a      	bne.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0ec:	4b6a      	ldr	r3, [pc, #424]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0fa:	4a67      	ldr	r2, [pc, #412]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b100:	e003      	b.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b102:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b106:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b116:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b11a:	2300      	movs	r3, #0
 800b11c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b120:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b124:	460b      	mov	r3, r1
 800b126:	4313      	orrs	r3, r2
 800b128:	d053      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b134:	d033      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b13a:	d82c      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b13c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b140:	d02f      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b146:	d826      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b14c:	d02b      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b14e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b152:	d820      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b158:	d012      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b15e:	d81a      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d022      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b168:	d115      	bne.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16e:	3308      	adds	r3, #8
 800b170:	2101      	movs	r1, #1
 800b172:	4618      	mov	r0, r3
 800b174:	f002 f816 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b17e:	e015      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b184:	3328      	adds	r3, #40	; 0x28
 800b186:	2101      	movs	r1, #1
 800b188:	4618      	mov	r0, r3
 800b18a:	f002 f8bd 	bl	800d308 <RCCEx_PLL3_Config>
 800b18e:	4603      	mov	r3, r0
 800b190:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b194:	e00a      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b19c:	e006      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b19e:	bf00      	nop
 800b1a0:	e004      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1a2:	bf00      	nop
 800b1a4:	e002      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1a6:	bf00      	nop
 800b1a8:	e000      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10a      	bne.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1b4:	4b38      	ldr	r3, [pc, #224]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1c2:	4a35      	ldr	r2, [pc, #212]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1c4:	430b      	orrs	r3, r1
 800b1c6:	6513      	str	r3, [r2, #80]	; 0x50
 800b1c8:	e003      	b.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b1de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	d058      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1fe:	d033      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b204:	d82c      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20a:	d02f      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b210:	d826      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b216:	d02b      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b21c:	d820      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b222:	d012      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b228:	d81a      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d022      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b22e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b232:	d115      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b238:	3308      	adds	r3, #8
 800b23a:	2101      	movs	r1, #1
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 ffb1 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b248:	e015      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24e:	3328      	adds	r3, #40	; 0x28
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f002 f858 	bl	800d308 <RCCEx_PLL3_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b25e:	e00a      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b266:	e006      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b268:	bf00      	nop
 800b26a:	e004      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b26c:	bf00      	nop
 800b26e:	e002      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b270:	bf00      	nop
 800b272:	e000      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b274:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b276:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10e      	bne.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b27e:	4b06      	ldr	r3, [pc, #24]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b282:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b28e:	4a02      	ldr	r2, [pc, #8]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b290:	430b      	orrs	r3, r1
 800b292:	6593      	str	r3, [r2, #88]	; 0x58
 800b294:	e006      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b296:	bf00      	nop
 800b298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b29c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b2b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b2ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	d037      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ce:	d00e      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d4:	d816      	bhi.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d018      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2de:	d111      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2e0:	4bc4      	ldr	r3, [pc, #784]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4ac3      	ldr	r2, [pc, #780]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2ec:	e00f      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f001 ff54 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b302:	e004      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b30a:	e000      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b30c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b30e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10a      	bne.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b316:	4bb7      	ldr	r3, [pc, #732]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b31a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b324:	4ab3      	ldr	r2, [pc, #716]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b326:	430b      	orrs	r3, r1
 800b328:	6513      	str	r3, [r2, #80]	; 0x50
 800b32a:	e003      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b32c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b330:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b344:	2300      	movs	r3, #0
 800b346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b34a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b34e:	460b      	mov	r3, r1
 800b350:	4313      	orrs	r3, r2
 800b352:	d039      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d81c      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b35e:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b3a1 	.word	0x0800b3a1
 800b368:	0800b375 	.word	0x0800b375
 800b36c:	0800b383 	.word	0x0800b383
 800b370:	0800b3a1 	.word	0x0800b3a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b374:	4b9f      	ldr	r3, [pc, #636]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	4a9e      	ldr	r2, [pc, #632]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b37a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b37e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b380:	e00f      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b386:	3308      	adds	r3, #8
 800b388:	2102      	movs	r1, #2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 ff0a 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b390:	4603      	mov	r3, r0
 800b392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b396:	e004      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b39e:	e000      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b3aa:	4b92      	ldr	r3, [pc, #584]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ae:	f023 0103 	bic.w	r1, r3, #3
 800b3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3b8:	4a8e      	ldr	r2, [pc, #568]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3ba:	430b      	orrs	r3, r1
 800b3bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3be:	e003      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b3d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	f000 8099 	beq.w	800b51c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3ea:	4b83      	ldr	r3, [pc, #524]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a82      	ldr	r2, [pc, #520]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3f6:	f7f9 f97b 	bl	80046f0 <HAL_GetTick>
 800b3fa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3fe:	e00b      	b.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b400:	f7f9 f976 	bl	80046f0 <HAL_GetTick>
 800b404:	4602      	mov	r2, r0
 800b406:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	2b64      	cmp	r3, #100	; 0x64
 800b40e:	d903      	bls.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b416:	e005      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b418:	4b77      	ldr	r3, [pc, #476]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0ed      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d173      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b42c:	4b71      	ldr	r3, [pc, #452]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b42e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b438:	4053      	eors	r3, r2
 800b43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d015      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b442:	4b6c      	ldr	r3, [pc, #432]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b44a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b44e:	4b69      	ldr	r3, [pc, #420]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b452:	4a68      	ldr	r2, [pc, #416]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b458:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b45a:	4b66      	ldr	r3, [pc, #408]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b45e:	4a65      	ldr	r2, [pc, #404]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b464:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b466:	4a63      	ldr	r2, [pc, #396]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b46c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b47a:	d118      	bne.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b47c:	f7f9 f938 	bl	80046f0 <HAL_GetTick>
 800b480:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b484:	e00d      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b486:	f7f9 f933 	bl	80046f0 <HAL_GetTick>
 800b48a:	4602      	mov	r2, r0
 800b48c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b490:	1ad2      	subs	r2, r2, r3
 800b492:	f241 3388 	movw	r3, #5000	; 0x1388
 800b496:	429a      	cmp	r2, r3
 800b498:	d903      	bls.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b49a:	2303      	movs	r3, #3
 800b49c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b4a0:	e005      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4a2:	4b54      	ldr	r3, [pc, #336]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0eb      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b4ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d129      	bne.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4c6:	d10e      	bne.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b4c8:	4b4a      	ldr	r3, [pc, #296]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4d8:	091a      	lsrs	r2, r3, #4
 800b4da:	4b48      	ldr	r3, [pc, #288]	; (800b5fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b4dc:	4013      	ands	r3, r2
 800b4de:	4a45      	ldr	r2, [pc, #276]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	6113      	str	r3, [r2, #16]
 800b4e4:	e005      	b.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b4e6:	4b43      	ldr	r3, [pc, #268]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	4a42      	ldr	r2, [pc, #264]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4f0:	6113      	str	r3, [r2, #16]
 800b4f2:	4b40      	ldr	r3, [pc, #256]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b502:	4a3c      	ldr	r2, [pc, #240]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b504:	430b      	orrs	r3, r1
 800b506:	6713      	str	r3, [r2, #112]	; 0x70
 800b508:	e008      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b50a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b50e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b512:	e003      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f002 0301 	and.w	r3, r2, #1
 800b528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b52c:	2300      	movs	r3, #0
 800b52e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b532:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b536:	460b      	mov	r3, r1
 800b538:	4313      	orrs	r3, r2
 800b53a:	f000 808f 	beq.w	800b65c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b544:	2b28      	cmp	r3, #40	; 0x28
 800b546:	d871      	bhi.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b548:	a201      	add	r2, pc, #4	; (adr r2, 800b550 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54e:	bf00      	nop
 800b550:	0800b635 	.word	0x0800b635
 800b554:	0800b62d 	.word	0x0800b62d
 800b558:	0800b62d 	.word	0x0800b62d
 800b55c:	0800b62d 	.word	0x0800b62d
 800b560:	0800b62d 	.word	0x0800b62d
 800b564:	0800b62d 	.word	0x0800b62d
 800b568:	0800b62d 	.word	0x0800b62d
 800b56c:	0800b62d 	.word	0x0800b62d
 800b570:	0800b601 	.word	0x0800b601
 800b574:	0800b62d 	.word	0x0800b62d
 800b578:	0800b62d 	.word	0x0800b62d
 800b57c:	0800b62d 	.word	0x0800b62d
 800b580:	0800b62d 	.word	0x0800b62d
 800b584:	0800b62d 	.word	0x0800b62d
 800b588:	0800b62d 	.word	0x0800b62d
 800b58c:	0800b62d 	.word	0x0800b62d
 800b590:	0800b617 	.word	0x0800b617
 800b594:	0800b62d 	.word	0x0800b62d
 800b598:	0800b62d 	.word	0x0800b62d
 800b59c:	0800b62d 	.word	0x0800b62d
 800b5a0:	0800b62d 	.word	0x0800b62d
 800b5a4:	0800b62d 	.word	0x0800b62d
 800b5a8:	0800b62d 	.word	0x0800b62d
 800b5ac:	0800b62d 	.word	0x0800b62d
 800b5b0:	0800b635 	.word	0x0800b635
 800b5b4:	0800b62d 	.word	0x0800b62d
 800b5b8:	0800b62d 	.word	0x0800b62d
 800b5bc:	0800b62d 	.word	0x0800b62d
 800b5c0:	0800b62d 	.word	0x0800b62d
 800b5c4:	0800b62d 	.word	0x0800b62d
 800b5c8:	0800b62d 	.word	0x0800b62d
 800b5cc:	0800b62d 	.word	0x0800b62d
 800b5d0:	0800b635 	.word	0x0800b635
 800b5d4:	0800b62d 	.word	0x0800b62d
 800b5d8:	0800b62d 	.word	0x0800b62d
 800b5dc:	0800b62d 	.word	0x0800b62d
 800b5e0:	0800b62d 	.word	0x0800b62d
 800b5e4:	0800b62d 	.word	0x0800b62d
 800b5e8:	0800b62d 	.word	0x0800b62d
 800b5ec:	0800b62d 	.word	0x0800b62d
 800b5f0:	0800b635 	.word	0x0800b635
 800b5f4:	58024400 	.word	0x58024400
 800b5f8:	58024800 	.word	0x58024800
 800b5fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b604:	3308      	adds	r3, #8
 800b606:	2101      	movs	r1, #1
 800b608:	4618      	mov	r0, r3
 800b60a:	f001 fdcb 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b60e:	4603      	mov	r3, r0
 800b610:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b614:	e00f      	b.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61a:	3328      	adds	r3, #40	; 0x28
 800b61c:	2101      	movs	r1, #1
 800b61e:	4618      	mov	r0, r3
 800b620:	f001 fe72 	bl	800d308 <RCCEx_PLL3_Config>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b62a:	e004      	b.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b632:	e000      	b.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b634:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b63e:	4bbf      	ldr	r3, [pc, #764]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b642:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b64c:	4abb      	ldr	r2, [pc, #748]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b64e:	430b      	orrs	r3, r1
 800b650:	6553      	str	r3, [r2, #84]	; 0x54
 800b652:	e003      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f002 0302 	and.w	r3, r2, #2
 800b668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b66c:	2300      	movs	r3, #0
 800b66e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b672:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b676:	460b      	mov	r3, r1
 800b678:	4313      	orrs	r3, r2
 800b67a:	d041      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b682:	2b05      	cmp	r3, #5
 800b684:	d824      	bhi.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6d9 	.word	0x0800b6d9
 800b690:	0800b6a5 	.word	0x0800b6a5
 800b694:	0800b6bb 	.word	0x0800b6bb
 800b698:	0800b6d9 	.word	0x0800b6d9
 800b69c:	0800b6d9 	.word	0x0800b6d9
 800b6a0:	0800b6d9 	.word	0x0800b6d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f001 fd79 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6b8:	e00f      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6be:	3328      	adds	r3, #40	; 0x28
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f001 fe20 	bl	800d308 <RCCEx_PLL3_Config>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6ce:	e004      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6d6:	e000      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10a      	bne.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6e2:	4b96      	ldr	r3, [pc, #600]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e6:	f023 0107 	bic.w	r1, r3, #7
 800b6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f0:	4a92      	ldr	r2, [pc, #584]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6f2:	430b      	orrs	r3, r1
 800b6f4:	6553      	str	r3, [r2, #84]	; 0x54
 800b6f6:	e003      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	f002 0304 	and.w	r3, r2, #4
 800b70c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b710:	2300      	movs	r3, #0
 800b712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b716:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b71a:	460b      	mov	r3, r1
 800b71c:	4313      	orrs	r3, r2
 800b71e:	d044      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b728:	2b05      	cmp	r3, #5
 800b72a:	d825      	bhi.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b72c:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b732:	bf00      	nop
 800b734:	0800b781 	.word	0x0800b781
 800b738:	0800b74d 	.word	0x0800b74d
 800b73c:	0800b763 	.word	0x0800b763
 800b740:	0800b781 	.word	0x0800b781
 800b744:	0800b781 	.word	0x0800b781
 800b748:	0800b781 	.word	0x0800b781
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b750:	3308      	adds	r3, #8
 800b752:	2101      	movs	r1, #1
 800b754:	4618      	mov	r0, r3
 800b756:	f001 fd25 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b760:	e00f      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b766:	3328      	adds	r3, #40	; 0x28
 800b768:	2101      	movs	r1, #1
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 fdcc 	bl	800d308 <RCCEx_PLL3_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b776:	e004      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b77e:	e000      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b782:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10b      	bne.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b78a:	4b6c      	ldr	r3, [pc, #432]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78e:	f023 0107 	bic.w	r1, r3, #7
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b79a:	4a68      	ldr	r2, [pc, #416]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b79c:	430b      	orrs	r3, r1
 800b79e:	6593      	str	r3, [r2, #88]	; 0x58
 800b7a0:	e003      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f002 0320 	and.w	r3, r2, #32
 800b7b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b7c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	d055      	beq.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d6:	d033      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7dc:	d82c      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e2:	d02f      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e8:	d826      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7ee:	d02b      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b7f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7f4:	d820      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fa:	d012      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b800:	d81a      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d022      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b80a:	d115      	bne.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b810:	3308      	adds	r3, #8
 800b812:	2100      	movs	r1, #0
 800b814:	4618      	mov	r0, r3
 800b816:	f001 fcc5 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b820:	e015      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b826:	3328      	adds	r3, #40	; 0x28
 800b828:	2102      	movs	r1, #2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 fd6c 	bl	800d308 <RCCEx_PLL3_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b836:	e00a      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b83e:	e006      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b840:	bf00      	nop
 800b842:	e004      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b844:	bf00      	nop
 800b846:	e002      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b848:	bf00      	nop
 800b84a:	e000      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b84c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b84e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10b      	bne.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b856:	4b39      	ldr	r3, [pc, #228]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b866:	4a35      	ldr	r2, [pc, #212]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b868:	430b      	orrs	r3, r1
 800b86a:	6553      	str	r3, [r2, #84]	; 0x54
 800b86c:	e003      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b872:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b886:	2300      	movs	r3, #0
 800b888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b88c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b890:	460b      	mov	r3, r1
 800b892:	4313      	orrs	r3, r2
 800b894:	d058      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b89e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8a2:	d033      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b8a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8a8:	d82c      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ae:	d02f      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b4:	d826      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8ba:	d02b      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b8bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8c0:	d820      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c6:	d012      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b8c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8cc:	d81a      	bhi.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d022      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d6:	d115      	bne.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8dc:	3308      	adds	r3, #8
 800b8de:	2100      	movs	r1, #0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f001 fc5f 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8ec:	e015      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f2:	3328      	adds	r3, #40	; 0x28
 800b8f4:	2102      	movs	r1, #2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 fd06 	bl	800d308 <RCCEx_PLL3_Config>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b902:	e00a      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b90a:	e006      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b90c:	bf00      	nop
 800b90e:	e004      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b910:	bf00      	nop
 800b912:	e002      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b914:	bf00      	nop
 800b916:	e000      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10e      	bne.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b922:	4b06      	ldr	r3, [pc, #24]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b926:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b932:	4a02      	ldr	r2, [pc, #8]	; (800b93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b934:	430b      	orrs	r3, r1
 800b936:	6593      	str	r3, [r2, #88]	; 0x58
 800b938:	e006      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b93a:	bf00      	nop
 800b93c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b944:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b958:	2300      	movs	r3, #0
 800b95a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b95e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b962:	460b      	mov	r3, r1
 800b964:	4313      	orrs	r3, r2
 800b966:	d055      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b970:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b974:	d033      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b976:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b97a:	d82c      	bhi.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b97c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b980:	d02f      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b986:	d826      	bhi.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b988:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b98c:	d02b      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b98e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b992:	d820      	bhi.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b998:	d012      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b99a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b99e:	d81a      	bhi.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d022      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a8:	d115      	bne.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 fbf6 	bl	800d1a4 <RCCEx_PLL2_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9be:	e015      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c4:	3328      	adds	r3, #40	; 0x28
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 fc9d 	bl	800d308 <RCCEx_PLL3_Config>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9d4:	e00a      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9dc:	e006      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9de:	bf00      	nop
 800b9e0:	e004      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9e2:	bf00      	nop
 800b9e4:	e002      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9e6:	bf00      	nop
 800b9e8:	e000      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10b      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9f4:	4ba0      	ldr	r3, [pc, #640]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba04:	4a9c      	ldr	r2, [pc, #624]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba06:	430b      	orrs	r3, r1
 800ba08:	6593      	str	r3, [r2, #88]	; 0x58
 800ba0a:	e003      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f002 0308 	and.w	r3, r2, #8
 800ba20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba24:	2300      	movs	r3, #0
 800ba26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba2a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4313      	orrs	r3, r2
 800ba32:	d01e      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba40:	d10c      	bne.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba46:	3328      	adds	r3, #40	; 0x28
 800ba48:	2102      	movs	r1, #2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f001 fc5c 	bl	800d308 <RCCEx_PLL3_Config>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ba5c:	4b86      	ldr	r3, [pc, #536]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba6c:	4a82      	ldr	r2, [pc, #520]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f002 0310 	and.w	r3, r2, #16
 800ba7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba82:	2300      	movs	r3, #0
 800ba84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba88:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	d01e      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba9e:	d10c      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800baa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa4:	3328      	adds	r3, #40	; 0x28
 800baa6:	2102      	movs	r1, #2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 fc2d 	bl	800d308 <RCCEx_PLL3_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800baba:	4b6f      	ldr	r3, [pc, #444]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800babc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800babe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baca:	4a6b      	ldr	r2, [pc, #428]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bacc:	430b      	orrs	r3, r1
 800bace:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800badc:	67bb      	str	r3, [r7, #120]	; 0x78
 800bade:	2300      	movs	r3, #0
 800bae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bae2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bae6:	460b      	mov	r3, r1
 800bae8:	4313      	orrs	r3, r2
 800baea:	d03e      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800baf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baf8:	d022      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bafa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bafe:	d81b      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d003      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bb04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb08:	d00b      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bb0a:	e015      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	3308      	adds	r3, #8
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 fb45 	bl	800d1a4 <RCCEx_PLL2_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb20:	e00f      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb26:	3328      	adds	r3, #40	; 0x28
 800bb28:	2102      	movs	r1, #2
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 fbec 	bl	800d308 <RCCEx_PLL3_Config>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb36:	e004      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb3e:	e000      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bb40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb4a:	4b4b      	ldr	r3, [pc, #300]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb5a:	4a47      	ldr	r2, [pc, #284]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb5c:	430b      	orrs	r3, r1
 800bb5e:	6593      	str	r3, [r2, #88]	; 0x58
 800bb60:	e003      	b.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb76:	673b      	str	r3, [r7, #112]	; 0x70
 800bb78:	2300      	movs	r3, #0
 800bb7a:	677b      	str	r3, [r7, #116]	; 0x74
 800bb7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bb80:	460b      	mov	r3, r1
 800bb82:	4313      	orrs	r3, r2
 800bb84:	d03b      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb92:	d01f      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb98:	d818      	bhi.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bb9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9e:	d003      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bba4:	d007      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bba6:	e011      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba8:	4b33      	ldr	r3, [pc, #204]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbac:	4a32      	ldr	r2, [pc, #200]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbb4:	e00f      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbba:	3328      	adds	r3, #40	; 0x28
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 fba2 	bl	800d308 <RCCEx_PLL3_Config>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbca:	e004      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbd2:	e000      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bbd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10b      	bne.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbde:	4b26      	ldr	r3, [pc, #152]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbee:	4a22      	ldr	r2, [pc, #136]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	6553      	str	r3, [r2, #84]	; 0x54
 800bbf4:	e003      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bc0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bc14:	460b      	mov	r3, r1
 800bc16:	4313      	orrs	r3, r2
 800bc18:	d034      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bc24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc28:	d007      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bc2a:	e011      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc2c:	4b12      	ldr	r3, [pc, #72]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	4a11      	ldr	r2, [pc, #68]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc38:	e00e      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3e:	3308      	adds	r3, #8
 800bc40:	2102      	movs	r1, #2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f001 faae 	bl	800d1a4 <RCCEx_PLL2_Config>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc4e:	e003      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10d      	bne.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc60:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc6e:	4a02      	ldr	r2, [pc, #8]	; (800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc70:	430b      	orrs	r3, r1
 800bc72:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc74:	e006      	b.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bc76:	bf00      	nop
 800bc78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bc90:	663b      	str	r3, [r7, #96]	; 0x60
 800bc92:	2300      	movs	r3, #0
 800bc94:	667b      	str	r3, [r7, #100]	; 0x64
 800bc96:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	d00c      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca4:	3328      	adds	r3, #40	; 0x28
 800bca6:	2102      	movs	r1, #2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f001 fb2d 	bl	800d308 <RCCEx_PLL3_Config>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bcc6:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcc8:	2300      	movs	r3, #0
 800bcca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bccc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	d036      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bce0:	d018      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bce6:	d811      	bhi.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcec:	d014      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bcee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcf2:	d80b      	bhi.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d011      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bcf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcfc:	d106      	bne.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcfe:	4bb7      	ldr	r3, [pc, #732]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	4ab6      	ldr	r2, [pc, #728]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bd0a:	e008      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd12:	e004      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd14:	bf00      	nop
 800bd16:	e002      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd18:	bf00      	nop
 800bd1a:	e000      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10a      	bne.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd26:	4bad      	ldr	r3, [pc, #692]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd34:	4aa9      	ldr	r2, [pc, #676]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd36:	430b      	orrs	r3, r1
 800bd38:	6553      	str	r3, [r2, #84]	; 0x54
 800bd3a:	e003      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd50:	653b      	str	r3, [r7, #80]	; 0x50
 800bd52:	2300      	movs	r3, #0
 800bd54:	657b      	str	r3, [r7, #84]	; 0x54
 800bd56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	d009      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd60:	4b9e      	ldr	r3, [pc, #632]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	4a9b      	ldr	r2, [pc, #620]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd70:	430b      	orrs	r3, r1
 800bd72:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bd80:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd82:	2300      	movs	r3, #0
 800bd84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd86:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	d009      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd90:	4b92      	ldr	r3, [pc, #584]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd94:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd9e:	4a8f      	ldr	r2, [pc, #572]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bda0:	430b      	orrs	r3, r1
 800bda2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bdb0:	643b      	str	r3, [r7, #64]	; 0x40
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	647b      	str	r3, [r7, #68]	; 0x44
 800bdb6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	d00e      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bdc0:	4b86      	ldr	r3, [pc, #536]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	4a85      	ldr	r2, [pc, #532]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdca:	6113      	str	r3, [r2, #16]
 800bdcc:	4b83      	ldr	r3, [pc, #524]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdce:	6919      	ldr	r1, [r3, #16]
 800bdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bdd8:	4a80      	ldr	r2, [pc, #512]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdda:	430b      	orrs	r3, r1
 800bddc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bdde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bdea:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdec:	2300      	movs	r3, #0
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	d009      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bdfa:	4b78      	ldr	r3, [pc, #480]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be08:	4a74      	ldr	r2, [pc, #464]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be0a:	430b      	orrs	r3, r1
 800be0c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800be1a:	633b      	str	r3, [r7, #48]	; 0x30
 800be1c:	2300      	movs	r3, #0
 800be1e:	637b      	str	r3, [r7, #52]	; 0x34
 800be20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800be24:	460b      	mov	r3, r1
 800be26:	4313      	orrs	r3, r2
 800be28:	d00a      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be2a:	4b6c      	ldr	r3, [pc, #432]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800be32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be3a:	4a68      	ldr	r2, [pc, #416]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be3c:	430b      	orrs	r3, r1
 800be3e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	2100      	movs	r1, #0
 800be4a:	62b9      	str	r1, [r7, #40]	; 0x28
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be56:	460b      	mov	r3, r1
 800be58:	4313      	orrs	r3, r2
 800be5a:	d011      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be60:	3308      	adds	r3, #8
 800be62:	2100      	movs	r1, #0
 800be64:	4618      	mov	r0, r3
 800be66:	f001 f99d 	bl	800d1a4 <RCCEx_PLL2_Config>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be74:	2b00      	cmp	r3, #0
 800be76:	d003      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	2100      	movs	r1, #0
 800be8a:	6239      	str	r1, [r7, #32]
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
 800be92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be96:	460b      	mov	r3, r1
 800be98:	4313      	orrs	r3, r2
 800be9a:	d011      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea0:	3308      	adds	r3, #8
 800bea2:	2101      	movs	r1, #1
 800bea4:	4618      	mov	r0, r3
 800bea6:	f001 f97d 	bl	800d1a4 <RCCEx_PLL2_Config>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800beb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	2100      	movs	r1, #0
 800beca:	61b9      	str	r1, [r7, #24]
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	61fb      	str	r3, [r7, #28]
 800bed2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bed6:	460b      	mov	r3, r1
 800bed8:	4313      	orrs	r3, r2
 800beda:	d011      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee0:	3308      	adds	r3, #8
 800bee2:	2102      	movs	r1, #2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 f95d 	bl	800d1a4 <RCCEx_PLL2_Config>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d003      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800befc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	6139      	str	r1, [r7, #16]
 800bf0c:	f003 0308 	and.w	r3, r3, #8
 800bf10:	617b      	str	r3, [r7, #20]
 800bf12:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf16:	460b      	mov	r3, r1
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	d011      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf20:	3328      	adds	r3, #40	; 0x28
 800bf22:	2100      	movs	r1, #0
 800bf24:	4618      	mov	r0, r3
 800bf26:	f001 f9ef 	bl	800d308 <RCCEx_PLL3_Config>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bf30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	f003 0310 	and.w	r3, r3, #16
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf56:	460b      	mov	r3, r1
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	d011      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf60:	3328      	adds	r3, #40	; 0x28
 800bf62:	2101      	movs	r1, #1
 800bf64:	4618      	mov	r0, r3
 800bf66:	f001 f9cf 	bl	800d308 <RCCEx_PLL3_Config>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	2100      	movs	r1, #0
 800bf8a:	6039      	str	r1, [r7, #0]
 800bf8c:	f003 0320 	and.w	r3, r3, #32
 800bf90:	607b      	str	r3, [r7, #4]
 800bf92:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf96:	460b      	mov	r3, r1
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	d011      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa0:	3328      	adds	r3, #40	; 0x28
 800bfa2:	2102      	movs	r1, #2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 f9af 	bl	800d308 <RCCEx_PLL3_Config>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bfb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bfc0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d101      	bne.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	e000      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bfcc:	2301      	movs	r3, #1
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfda:	bf00      	nop
 800bfdc:	58024400 	.word	0x58024400

0800bfe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b090      	sub	sp, #64	; 0x40
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bff2:	430b      	orrs	r3, r1
 800bff4:	f040 8094 	bne.w	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bff8:	4b9b      	ldr	r3, [pc, #620]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bffc:	f003 0307 	and.w	r3, r3, #7
 800c000:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	2b04      	cmp	r3, #4
 800c006:	f200 8087 	bhi.w	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c00a:	a201      	add	r2, pc, #4	; (adr r2, 800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c010:	0800c025 	.word	0x0800c025
 800c014:	0800c04d 	.word	0x0800c04d
 800c018:	0800c075 	.word	0x0800c075
 800c01c:	0800c111 	.word	0x0800c111
 800c020:	0800c09d 	.word	0x0800c09d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c024:	4b90      	ldr	r3, [pc, #576]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c030:	d108      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c036:	4618      	mov	r0, r3
 800c038:	f000 ff62 	bl	800cf00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c040:	f000 bc93 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	f000 bc8f 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c04c:	4b86      	ldr	r3, [pc, #536]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c058:	d108      	bne.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c05a:	f107 0318 	add.w	r3, r7, #24
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 fca6 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c068:	f000 bc7f 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c070:	f000 bc7b 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c074:	4b7c      	ldr	r3, [pc, #496]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c07c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c080:	d108      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fde6 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c090:	f000 bc6b 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c098:	f000 bc67 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c09c:	4b72      	ldr	r3, [pc, #456]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0a6:	4b70      	ldr	r3, [pc, #448]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d10c      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0b8:	4b6b      	ldr	r3, [pc, #428]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	08db      	lsrs	r3, r3, #3
 800c0be:	f003 0303 	and.w	r3, r3, #3
 800c0c2:	4a6a      	ldr	r2, [pc, #424]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ca:	e01f      	b.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0cc:	4b66      	ldr	r3, [pc, #408]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0d8:	d106      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0e0:	d102      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0e2:	4b63      	ldr	r3, [pc, #396]	; (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e6:	e011      	b.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0e8:	4b5f      	ldr	r3, [pc, #380]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0f4:	d106      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fc:	d102      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0fe:	4b5d      	ldr	r3, [pc, #372]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c102:	e003      	b.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c108:	f000 bc2f 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c10c:	f000 bc2d 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c110:	4b59      	ldr	r3, [pc, #356]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c114:	f000 bc29 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11c:	f000 bc25 	b.w	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c124:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c128:	430b      	orrs	r3, r1
 800c12a:	f040 80a7 	bne.w	800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c12e:	4b4e      	ldr	r3, [pc, #312]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c132:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c136:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c13e:	d054      	beq.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c146:	f200 808b 	bhi.w	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c150:	f000 8083 	beq.w	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c15a:	f200 8081 	bhi.w	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c164:	d02f      	beq.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c16c:	d878      	bhi.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	2b00      	cmp	r3, #0
 800c172:	d004      	beq.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c17a:	d012      	beq.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c17c:	e070      	b.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c17e:	4b3a      	ldr	r3, [pc, #232]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c18a:	d107      	bne.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c190:	4618      	mov	r0, r3
 800c192:	f000 feb5 	bl	800cf00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19a:	e3e6      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a0:	e3e3      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1a2:	4b31      	ldr	r3, [pc, #196]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1ae:	d107      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b0:	f107 0318 	add.w	r3, r7, #24
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fbfb 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1be:	e3d4      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c4:	e3d1      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c6:	4b28      	ldr	r3, [pc, #160]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1d2:	d107      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1d4:	f107 030c 	add.w	r3, r7, #12
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fd3d 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1e2:	e3c2      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e8:	e3bf      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1ea:	4b1f      	ldr	r3, [pc, #124]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1f4:	4b1c      	ldr	r3, [pc, #112]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 0304 	and.w	r3, r3, #4
 800c1fc:	2b04      	cmp	r3, #4
 800c1fe:	d10c      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c206:	4b18      	ldr	r3, [pc, #96]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	08db      	lsrs	r3, r3, #3
 800c20c:	f003 0303 	and.w	r3, r3, #3
 800c210:	4a16      	ldr	r2, [pc, #88]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c212:	fa22 f303 	lsr.w	r3, r2, r3
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c218:	e01e      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c21a:	4b13      	ldr	r3, [pc, #76]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c226:	d106      	bne.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c22e:	d102      	bne.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c230:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c234:	e010      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c23e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c242:	d106      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c24a:	d102      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c24c:	4b09      	ldr	r3, [pc, #36]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c250:	e002      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c256:	e388      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c258:	e387      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c25a:	4b07      	ldr	r3, [pc, #28]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25e:	e384      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c264:	e381      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c266:	bf00      	nop
 800c268:	58024400 	.word	0x58024400
 800c26c:	03d09000 	.word	0x03d09000
 800c270:	003d0900 	.word	0x003d0900
 800c274:	02faf080 	.word	0x02faf080
 800c278:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c280:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c284:	430b      	orrs	r3, r1
 800c286:	f040 809c 	bne.w	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c28a:	4b9e      	ldr	r3, [pc, #632]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c28e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c292:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c29a:	d054      	beq.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2a2:	f200 808b 	bhi.w	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2ac:	f000 8083 	beq.w	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2b6:	f200 8081 	bhi.w	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c0:	d02f      	beq.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c8:	d878      	bhi.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d004      	beq.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2d6:	d012      	beq.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c2d8:	e070      	b.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2da:	4b8a      	ldr	r3, [pc, #552]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2e6:	d107      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fe07 	bl	800cf00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f6:	e338      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fc:	e335      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2fe:	4b81      	ldr	r3, [pc, #516]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c30a:	d107      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c30c:	f107 0318 	add.w	r3, r7, #24
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fb4d 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31a:	e326      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c320:	e323      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c322:	4b78      	ldr	r3, [pc, #480]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c32a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c32e:	d107      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c330:	f107 030c 	add.w	r3, r7, #12
 800c334:	4618      	mov	r0, r3
 800c336:	f000 fc8f 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c33e:	e314      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c344:	e311      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c346:	4b6f      	ldr	r3, [pc, #444]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c34a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c34e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c350:	4b6c      	ldr	r3, [pc, #432]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0304 	and.w	r3, r3, #4
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d10c      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d109      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c362:	4b68      	ldr	r3, [pc, #416]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	08db      	lsrs	r3, r3, #3
 800c368:	f003 0303 	and.w	r3, r3, #3
 800c36c:	4a66      	ldr	r2, [pc, #408]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c36e:	fa22 f303 	lsr.w	r3, r2, r3
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c374:	e01e      	b.n	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c376:	4b63      	ldr	r3, [pc, #396]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c382:	d106      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c38a:	d102      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c38c:	4b5f      	ldr	r3, [pc, #380]	; (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c390:	e010      	b.n	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c392:	4b5c      	ldr	r3, [pc, #368]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c39a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c39e:	d106      	bne.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a6:	d102      	bne.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3a8:	4b59      	ldr	r3, [pc, #356]	; (800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ac:	e002      	b.n	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3b2:	e2da      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3b4:	e2d9      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3b6:	4b57      	ldr	r3, [pc, #348]	; (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ba:	e2d6      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c0:	e2d3      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c3ca:	430b      	orrs	r3, r1
 800c3cc:	f040 80a7 	bne.w	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3d0:	4b4c      	ldr	r3, [pc, #304]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c3d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3e0:	d055      	beq.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3e8:	f200 8096 	bhi.w	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3f2:	f000 8084 	beq.w	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3fc:	f200 808c 	bhi.w	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c406:	d030      	beq.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c40e:	f200 8083 	bhi.w	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c41e:	d012      	beq.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c420:	e07a      	b.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c422:	4b38      	ldr	r3, [pc, #224]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c42e:	d107      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fd63 	bl	800cf00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43e:	e294      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c444:	e291      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c446:	4b2f      	ldr	r3, [pc, #188]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c44e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c452:	d107      	bne.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c454:	f107 0318 	add.w	r3, r7, #24
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 faa9 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c462:	e282      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c468:	e27f      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c46a:	4b26      	ldr	r3, [pc, #152]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c476:	d107      	bne.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c478:	f107 030c 	add.w	r3, r7, #12
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fbeb 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c486:	e270      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	e26d      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c48e:	4b1d      	ldr	r3, [pc, #116]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c496:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c498:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d10c      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4aa:	4b16      	ldr	r3, [pc, #88]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	08db      	lsrs	r3, r3, #3
 800c4b0:	f003 0303 	and.w	r3, r3, #3
 800c4b4:	4a14      	ldr	r2, [pc, #80]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4bc:	e01e      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4be:	4b11      	ldr	r3, [pc, #68]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ca:	d106      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4d2:	d102      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d8:	e010      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4da:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e6:	d106      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ee:	d102      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4f0:	4b07      	ldr	r3, [pc, #28]	; (800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4f4:	e002      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4fa:	e236      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4fc:	e235      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4fe:	4b05      	ldr	r3, [pc, #20]	; (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c502:	e232      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c504:	58024400 	.word	0x58024400
 800c508:	03d09000 	.word	0x03d09000
 800c50c:	003d0900 	.word	0x003d0900
 800c510:	02faf080 	.word	0x02faf080
 800c514:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c51c:	e225      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c51e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c522:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c526:	430b      	orrs	r3, r1
 800c528:	f040 8085 	bne.w	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c52c:	4b9c      	ldr	r3, [pc, #624]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c530:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c534:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c53c:	d06b      	beq.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c544:	d874      	bhi.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c54c:	d056      	beq.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c554:	d86c      	bhi.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c558:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c55c:	d03b      	beq.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c564:	d864      	bhi.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c56c:	d021      	beq.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c574:	d85c      	bhi.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c582:	d004      	beq.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c584:	e054      	b.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c586:	f7fe fb5f 	bl	800ac48 <HAL_RCC_GetPCLK1Freq>
 800c58a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c58c:	e1ed      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c58e:	4b84      	ldr	r3, [pc, #528]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c59a:	d107      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c59c:	f107 0318 	add.w	r3, r7, #24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fa05 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5aa:	e1de      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b0:	e1db      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5b2:	4b7b      	ldr	r3, [pc, #492]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5be:	d107      	bne.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5c0:	f107 030c 	add.w	r3, r7, #12
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fb47 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ce:	e1cc      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d4:	e1c9      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5d6:	4b72      	ldr	r3, [pc, #456]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	2b04      	cmp	r3, #4
 800c5e0:	d109      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5e2:	4b6f      	ldr	r3, [pc, #444]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	08db      	lsrs	r3, r3, #3
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	4a6d      	ldr	r2, [pc, #436]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f4:	e1b9      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	e1b6      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5fc:	4b68      	ldr	r3, [pc, #416]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c608:	d102      	bne.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c60a:	4b67      	ldr	r3, [pc, #412]	; (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60e:	e1ac      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c614:	e1a9      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c616:	4b62      	ldr	r3, [pc, #392]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c622:	d102      	bne.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c624:	4b61      	ldr	r3, [pc, #388]	; (800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c628:	e19f      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62e:	e19c      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c634:	e199      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c63a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c63e:	430b      	orrs	r3, r1
 800c640:	d173      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c642:	4b57      	ldr	r3, [pc, #348]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c64a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c652:	d02f      	beq.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c65a:	d863      	bhi.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d004      	beq.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c668:	d012      	beq.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c66a:	e05b      	b.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c66c:	4b4c      	ldr	r3, [pc, #304]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c678:	d107      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c67a:	f107 0318 	add.w	r3, r7, #24
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 f996 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c688:	e16f      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68e:	e16c      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c690:	4b43      	ldr	r3, [pc, #268]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c69c:	d107      	bne.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69e:	f107 030c 	add.w	r3, r7, #12
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fad8 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ac:	e15d      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b2:	e15a      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6b4:	4b3a      	ldr	r3, [pc, #232]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6be:	4b38      	ldr	r3, [pc, #224]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0304 	and.w	r3, r3, #4
 800c6c6:	2b04      	cmp	r3, #4
 800c6c8:	d10c      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d109      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6d0:	4b33      	ldr	r3, [pc, #204]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	08db      	lsrs	r3, r3, #3
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	4a32      	ldr	r2, [pc, #200]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c6dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6e2:	e01e      	b.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6e4:	4b2e      	ldr	r3, [pc, #184]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6f0:	d106      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6f8:	d102      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6fa:	4b2b      	ldr	r3, [pc, #172]	; (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fe:	e010      	b.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c700:	4b27      	ldr	r3, [pc, #156]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c70c:	d106      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c714:	d102      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c716:	4b25      	ldr	r3, [pc, #148]	; (800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71a:	e002      	b.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c720:	e123      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c722:	e122      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c728:	e11f      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c72e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c732:	430b      	orrs	r3, r1
 800c734:	d13c      	bne.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c73a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c73e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	2b00      	cmp	r3, #0
 800c744:	d004      	beq.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c74c:	d012      	beq.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c74e:	e023      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c750:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c75c:	d107      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c75e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c762:	4618      	mov	r0, r3
 800c764:	f000 fbcc 	bl	800cf00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c76c:	e0fd      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c772:	e0fa      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c774:	4b0a      	ldr	r3, [pc, #40]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c77c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c780:	d107      	bne.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c782:	f107 0318 	add.w	r3, r7, #24
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f912 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c790:	e0eb      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c796:	e0e8      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79c:	e0e5      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c79e:	bf00      	nop
 800c7a0:	58024400 	.word	0x58024400
 800c7a4:	03d09000 	.word	0x03d09000
 800c7a8:	003d0900 	.word	0x003d0900
 800c7ac:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c7b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c7b8:	430b      	orrs	r3, r1
 800c7ba:	f040 8085 	bne.w	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c7be:	4b6d      	ldr	r3, [pc, #436]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c7c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7ce:	d06b      	beq.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7d6:	d874      	bhi.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7de:	d056      	beq.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7e6:	d86c      	bhi.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7ee:	d03b      	beq.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7f6:	d864      	bhi.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7fe:	d021      	beq.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c806:	d85c      	bhi.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c814:	d004      	beq.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c816:	e054      	b.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c818:	f000 f8b4 	bl	800c984 <HAL_RCCEx_GetD3PCLK1Freq>
 800c81c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c81e:	e0a4      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c820:	4b54      	ldr	r3, [pc, #336]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c82c:	d107      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82e:	f107 0318 	add.w	r3, r7, #24
 800c832:	4618      	mov	r0, r3
 800c834:	f000 f8bc 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83c:	e095      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c842:	e092      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c844:	4b4b      	ldr	r3, [pc, #300]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c850:	d107      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c852:	f107 030c 	add.w	r3, r7, #12
 800c856:	4618      	mov	r0, r3
 800c858:	f000 f9fe 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c860:	e083      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c866:	e080      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c868:	4b42      	ldr	r3, [pc, #264]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b04      	cmp	r3, #4
 800c872:	d109      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c874:	4b3f      	ldr	r3, [pc, #252]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	08db      	lsrs	r3, r3, #3
 800c87a:	f003 0303 	and.w	r3, r3, #3
 800c87e:	4a3e      	ldr	r2, [pc, #248]	; (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c880:	fa22 f303 	lsr.w	r3, r2, r3
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c886:	e070      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88c:	e06d      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c88e:	4b39      	ldr	r3, [pc, #228]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c89a:	d102      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c89c:	4b37      	ldr	r3, [pc, #220]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a0:	e063      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a6:	e060      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8a8:	4b32      	ldr	r3, [pc, #200]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8b4:	d102      	bne.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c8b6:	4b32      	ldr	r3, [pc, #200]	; (800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ba:	e056      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c0:	e053      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c6:	e050      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	d148      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8d4:	4b27      	ldr	r3, [pc, #156]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e4:	d02a      	beq.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ec:	d838      	bhi.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d004      	beq.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8fa:	d00d      	beq.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c8fc:	e030      	b.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8fe:	4b1d      	ldr	r3, [pc, #116]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c90a:	d102      	bne.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c90c:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c910:	e02b      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c916:	e028      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c918:	4b16      	ldr	r3, [pc, #88]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c924:	d107      	bne.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 fae8 	bl	800cf00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c934:	e019      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93a:	e016      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c93c:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c948:	d107      	bne.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94a:	f107 0318 	add.w	r3, r7, #24
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 f82e 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c958:	e007      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95e:	e004      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c964:	e001      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3740      	adds	r7, #64	; 0x40
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	58024400 	.word	0x58024400
 800c978:	03d09000 	.word	0x03d09000
 800c97c:	003d0900 	.word	0x003d0900
 800c980:	02faf080 	.word	0x02faf080

0800c984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c988:	f7fe f92e 	bl	800abe8 <HAL_RCC_GetHCLKFreq>
 800c98c:	4602      	mov	r2, r0
 800c98e:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	091b      	lsrs	r3, r3, #4
 800c994:	f003 0307 	and.w	r3, r3, #7
 800c998:	4904      	ldr	r1, [pc, #16]	; (800c9ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c99a:	5ccb      	ldrb	r3, [r1, r3]
 800c99c:	f003 031f 	and.w	r3, r3, #31
 800c9a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	58024400 	.word	0x58024400
 800c9ac:	0801c7d8 	.word	0x0801c7d8

0800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b089      	sub	sp, #36	; 0x24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9b8:	4ba1      	ldr	r3, [pc, #644]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9bc:	f003 0303 	and.w	r3, r3, #3
 800c9c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9c2:	4b9f      	ldr	r3, [pc, #636]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c6:	0b1b      	lsrs	r3, r3, #12
 800c9c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9ce:	4b9c      	ldr	r3, [pc, #624]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d2:	091b      	lsrs	r3, r3, #4
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9da:	4b99      	ldr	r3, [pc, #612]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9de:	08db      	lsrs	r3, r3, #3
 800c9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ea:	ee07 3a90 	vmov	s15, r3
 800c9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 8111 	beq.w	800cc20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	f000 8083 	beq.w	800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	f200 80a1 	bhi.w	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d056      	beq.n	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca1a:	e099      	b.n	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca1c:	4b88      	ldr	r3, [pc, #544]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d02d      	beq.n	800ca84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca28:	4b85      	ldr	r3, [pc, #532]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	08db      	lsrs	r3, r3, #3
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	4a84      	ldr	r2, [pc, #528]	; (800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca34:	fa22 f303 	lsr.w	r3, r2, r3
 800ca38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	ee07 3a90 	vmov	s15, r3
 800ca40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca52:	4b7b      	ldr	r3, [pc, #492]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5a:	ee07 3a90 	vmov	s15, r3
 800ca5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca82:	e087      	b.n	800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca96:	4b6a      	ldr	r3, [pc, #424]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac6:	e065      	b.n	800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cada:	4b59      	ldr	r3, [pc, #356]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caea:	ed97 6a03 	vldr	s12, [r7, #12]
 800caee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb0a:	e043      	b.n	800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	ee07 3a90 	vmov	s15, r3
 800cb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1e:	4b48      	ldr	r3, [pc, #288]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb4e:	e021      	b.n	800cb94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb62:	4b37      	ldr	r3, [pc, #220]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6a:	ee07 3a90 	vmov	s15, r3
 800cb6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb94:	4b2a      	ldr	r3, [pc, #168]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb98:	0a5b      	lsrs	r3, r3, #9
 800cb9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbae:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbba:	ee17 2a90 	vmov	r2, s15
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc6:	0c1b      	lsrs	r3, r3, #16
 800cbc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbcc:	ee07 3a90 	vmov	s15, r3
 800cbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbdc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbe8:	ee17 2a90 	vmov	r2, s15
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbf0:	4b13      	ldr	r3, [pc, #76]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf4:	0e1b      	lsrs	r3, r3, #24
 800cbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc16:	ee17 2a90 	vmov	r2, s15
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc1e:	e008      	b.n	800cc32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	609a      	str	r2, [r3, #8]
}
 800cc32:	bf00      	nop
 800cc34:	3724      	adds	r7, #36	; 0x24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	58024400 	.word	0x58024400
 800cc44:	03d09000 	.word	0x03d09000
 800cc48:	46000000 	.word	0x46000000
 800cc4c:	4c742400 	.word	0x4c742400
 800cc50:	4a742400 	.word	0x4a742400
 800cc54:	4c3ebc20 	.word	0x4c3ebc20

0800cc58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b089      	sub	sp, #36	; 0x24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc60:	4ba1      	ldr	r3, [pc, #644]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc64:	f003 0303 	and.w	r3, r3, #3
 800cc68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc6a:	4b9f      	ldr	r3, [pc, #636]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	0d1b      	lsrs	r3, r3, #20
 800cc70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc76:	4b9c      	ldr	r3, [pc, #624]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7a:	0a1b      	lsrs	r3, r3, #8
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc82:	4b99      	ldr	r3, [pc, #612]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc86:	08db      	lsrs	r3, r3, #3
 800cc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
 800cc92:	ee07 3a90 	vmov	s15, r3
 800cc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 8111 	beq.w	800cec8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	f000 8083 	beq.w	800cdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	f200 80a1 	bhi.w	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d056      	beq.n	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccc2:	e099      	b.n	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc4:	4b88      	ldr	r3, [pc, #544]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0320 	and.w	r3, r3, #32
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d02d      	beq.n	800cd2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccd0:	4b85      	ldr	r3, [pc, #532]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	08db      	lsrs	r3, r3, #3
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	4a84      	ldr	r2, [pc, #528]	; (800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	ee07 3a90 	vmov	s15, r3
 800cce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfa:	4b7b      	ldr	r3, [pc, #492]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd2a:	e087      	b.n	800ce3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cef4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3e:	4b6a      	ldr	r3, [pc, #424]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd46:	ee07 3a90 	vmov	s15, r3
 800cd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6e:	e065      	b.n	800ce3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd82:	4b59      	ldr	r3, [pc, #356]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdb2:	e043      	b.n	800ce3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	ee07 3a90 	vmov	s15, r3
 800cdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cefc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc6:	4b48      	ldr	r3, [pc, #288]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdce:	ee07 3a90 	vmov	s15, r3
 800cdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf6:	e021      	b.n	800ce3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce0a:	4b37      	ldr	r3, [pc, #220]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce3c:	4b2a      	ldr	r3, [pc, #168]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce40:	0a5b      	lsrs	r3, r3, #9
 800ce42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce62:	ee17 2a90 	vmov	r2, s15
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce6a:	4b1f      	ldr	r3, [pc, #124]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6e:	0c1b      	lsrs	r3, r3, #16
 800ce70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce74:	ee07 3a90 	vmov	s15, r3
 800ce78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce90:	ee17 2a90 	vmov	r2, s15
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce98:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce9c:	0e1b      	lsrs	r3, r3, #24
 800ce9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cebe:	ee17 2a90 	vmov	r2, s15
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cec6:	e008      	b.n	800ceda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	609a      	str	r2, [r3, #8]
}
 800ceda:	bf00      	nop
 800cedc:	3724      	adds	r7, #36	; 0x24
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	58024400 	.word	0x58024400
 800ceec:	03d09000 	.word	0x03d09000
 800cef0:	46000000 	.word	0x46000000
 800cef4:	4c742400 	.word	0x4c742400
 800cef8:	4a742400 	.word	0x4a742400
 800cefc:	4c3ebc20 	.word	0x4c3ebc20

0800cf00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b089      	sub	sp, #36	; 0x24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf08:	4ba0      	ldr	r3, [pc, #640]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0c:	f003 0303 	and.w	r3, r3, #3
 800cf10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cf12:	4b9e      	ldr	r3, [pc, #632]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf16:	091b      	lsrs	r3, r3, #4
 800cf18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf1e:	4b9b      	ldr	r3, [pc, #620]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf28:	4b98      	ldr	r3, [pc, #608]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2c:	08db      	lsrs	r3, r3, #3
 800cf2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	fb02 f303 	mul.w	r3, r2, r3
 800cf38:	ee07 3a90 	vmov	s15, r3
 800cf3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 8111 	beq.w	800d16e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	f000 8083 	beq.w	800d05a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	f200 80a1 	bhi.w	800d09e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d056      	beq.n	800d016 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf68:	e099      	b.n	800d09e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf6a:	4b88      	ldr	r3, [pc, #544]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f003 0320 	and.w	r3, r3, #32
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d02d      	beq.n	800cfd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf76:	4b85      	ldr	r3, [pc, #532]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	08db      	lsrs	r3, r3, #3
 800cf7c:	f003 0303 	and.w	r3, r3, #3
 800cf80:	4a83      	ldr	r2, [pc, #524]	; (800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf82:	fa22 f303 	lsr.w	r3, r2, r3
 800cf86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	ee07 3a90 	vmov	s15, r3
 800cf98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa0:	4b7a      	ldr	r3, [pc, #488]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa8:	ee07 3a90 	vmov	s15, r3
 800cfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfcc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfd0:	e087      	b.n	800d0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	ee07 3a90 	vmov	s15, r3
 800cfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d198 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe4:	4b69      	ldr	r3, [pc, #420]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d014:	e065      	b.n	800d0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	ee07 3a90 	vmov	s15, r3
 800d01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d020:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d19c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d028:	4b58      	ldr	r3, [pc, #352]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d038:	ed97 6a03 	vldr	s12, [r7, #12]
 800d03c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d058:	e043      	b.n	800d0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	ee07 3a90 	vmov	s15, r3
 800d060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d064:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d06c:	4b47      	ldr	r3, [pc, #284]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d074:	ee07 3a90 	vmov	s15, r3
 800d078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d080:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d08c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d09c:	e021      	b.n	800d0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d198 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0b0:	4b36      	ldr	r3, [pc, #216]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b8:	ee07 3a90 	vmov	s15, r3
 800d0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0e2:	4b2a      	ldr	r3, [pc, #168]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e6:	0a5b      	lsrs	r3, r3, #9
 800d0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ec:	ee07 3a90 	vmov	s15, r3
 800d0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d108:	ee17 2a90 	vmov	r2, s15
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d110:	4b1e      	ldr	r3, [pc, #120]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d114:	0c1b      	lsrs	r3, r3, #16
 800d116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d11a:	ee07 3a90 	vmov	s15, r3
 800d11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d136:	ee17 2a90 	vmov	r2, s15
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d13e:	4b13      	ldr	r3, [pc, #76]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d142:	0e1b      	lsrs	r3, r3, #24
 800d144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d148:	ee07 3a90 	vmov	s15, r3
 800d14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d154:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d158:	edd7 6a07 	vldr	s13, [r7, #28]
 800d15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d164:	ee17 2a90 	vmov	r2, s15
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d16c:	e008      	b.n	800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	609a      	str	r2, [r3, #8]
}
 800d180:	bf00      	nop
 800d182:	3724      	adds	r7, #36	; 0x24
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	58024400 	.word	0x58024400
 800d190:	03d09000 	.word	0x03d09000
 800d194:	46000000 	.word	0x46000000
 800d198:	4c742400 	.word	0x4c742400
 800d19c:	4a742400 	.word	0x4a742400
 800d1a0:	4c3ebc20 	.word	0x4c3ebc20

0800d1a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d1b2:	4b53      	ldr	r3, [pc, #332]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b6:	f003 0303 	and.w	r3, r3, #3
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d101      	bne.n	800d1c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e099      	b.n	800d2f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d1c2:	4b4f      	ldr	r3, [pc, #316]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a4e      	ldr	r2, [pc, #312]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d1c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1ce:	f7f7 fa8f 	bl	80046f0 <HAL_GetTick>
 800d1d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1d4:	e008      	b.n	800d1e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1d6:	f7f7 fa8b 	bl	80046f0 <HAL_GetTick>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d901      	bls.n	800d1e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e086      	b.n	800d2f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1e8:	4b45      	ldr	r3, [pc, #276]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1f0      	bne.n	800d1d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1f4:	4b42      	ldr	r3, [pc, #264]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	031b      	lsls	r3, r3, #12
 800d202:	493f      	ldr	r1, [pc, #252]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d204:	4313      	orrs	r3, r2
 800d206:	628b      	str	r3, [r1, #40]	; 0x28
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	3b01      	subs	r3, #1
 800d218:	025b      	lsls	r3, r3, #9
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	431a      	orrs	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	3b01      	subs	r3, #1
 800d224:	041b      	lsls	r3, r3, #16
 800d226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d22a:	431a      	orrs	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	3b01      	subs	r3, #1
 800d232:	061b      	lsls	r3, r3, #24
 800d234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d238:	4931      	ldr	r1, [pc, #196]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d23e:	4b30      	ldr	r3, [pc, #192]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	492d      	ldr	r1, [pc, #180]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d24c:	4313      	orrs	r3, r2
 800d24e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d250:	4b2b      	ldr	r3, [pc, #172]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	f023 0220 	bic.w	r2, r3, #32
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	4928      	ldr	r1, [pc, #160]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d262:	4b27      	ldr	r3, [pc, #156]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	4a26      	ldr	r2, [pc, #152]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d268:	f023 0310 	bic.w	r3, r3, #16
 800d26c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d26e:	4b24      	ldr	r3, [pc, #144]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d272:	4b24      	ldr	r3, [pc, #144]	; (800d304 <RCCEx_PLL2_Config+0x160>)
 800d274:	4013      	ands	r3, r2
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	69d2      	ldr	r2, [r2, #28]
 800d27a:	00d2      	lsls	r2, r2, #3
 800d27c:	4920      	ldr	r1, [pc, #128]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d27e:	4313      	orrs	r3, r2
 800d280:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d282:	4b1f      	ldr	r3, [pc, #124]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d286:	4a1e      	ldr	r2, [pc, #120]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d288:	f043 0310 	orr.w	r3, r3, #16
 800d28c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d106      	bne.n	800d2a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d294:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d298:	4a19      	ldr	r2, [pc, #100]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d29a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d29e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2a0:	e00f      	b.n	800d2c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d106      	bne.n	800d2b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d2a8:	4b15      	ldr	r3, [pc, #84]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	4a14      	ldr	r2, [pc, #80]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2b4:	e005      	b.n	800d2c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d2b6:	4b12      	ldr	r3, [pc, #72]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ba:	4a11      	ldr	r2, [pc, #68]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d2c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d2c2:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a0e      	ldr	r2, [pc, #56]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ce:	f7f7 fa0f 	bl	80046f0 <HAL_GetTick>
 800d2d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2d4:	e008      	b.n	800d2e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2d6:	f7f7 fa0b 	bl	80046f0 <HAL_GetTick>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d901      	bls.n	800d2e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e006      	b.n	800d2f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2e8:	4b05      	ldr	r3, [pc, #20]	; (800d300 <RCCEx_PLL2_Config+0x15c>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d0f0      	beq.n	800d2d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	58024400 	.word	0x58024400
 800d304:	ffff0007 	.word	0xffff0007

0800d308 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d316:	4b53      	ldr	r3, [pc, #332]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31a:	f003 0303 	and.w	r3, r3, #3
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d101      	bne.n	800d326 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e099      	b.n	800d45a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d326:	4b4f      	ldr	r3, [pc, #316]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a4e      	ldr	r2, [pc, #312]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d32c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d332:	f7f7 f9dd 	bl	80046f0 <HAL_GetTick>
 800d336:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d338:	e008      	b.n	800d34c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d33a:	f7f7 f9d9 	bl	80046f0 <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	2b02      	cmp	r3, #2
 800d346:	d901      	bls.n	800d34c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e086      	b.n	800d45a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d34c:	4b45      	ldr	r3, [pc, #276]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1f0      	bne.n	800d33a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d358:	4b42      	ldr	r3, [pc, #264]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d35c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	051b      	lsls	r3, r3, #20
 800d366:	493f      	ldr	r1, [pc, #252]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d368:	4313      	orrs	r3, r2
 800d36a:	628b      	str	r3, [r1, #40]	; 0x28
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	3b01      	subs	r3, #1
 800d372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	025b      	lsls	r3, r3, #9
 800d37e:	b29b      	uxth	r3, r3
 800d380:	431a      	orrs	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	3b01      	subs	r3, #1
 800d388:	041b      	lsls	r3, r3, #16
 800d38a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d38e:	431a      	orrs	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	3b01      	subs	r3, #1
 800d396:	061b      	lsls	r3, r3, #24
 800d398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d39c:	4931      	ldr	r1, [pc, #196]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d3a2:	4b30      	ldr	r3, [pc, #192]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	492d      	ldr	r1, [pc, #180]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d3b4:	4b2b      	ldr	r3, [pc, #172]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	4928      	ldr	r1, [pc, #160]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d3c6:	4b27      	ldr	r3, [pc, #156]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ca:	4a26      	ldr	r2, [pc, #152]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d3d2:	4b24      	ldr	r3, [pc, #144]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3d6:	4b24      	ldr	r3, [pc, #144]	; (800d468 <RCCEx_PLL3_Config+0x160>)
 800d3d8:	4013      	ands	r3, r2
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	69d2      	ldr	r2, [r2, #28]
 800d3de:	00d2      	lsls	r2, r2, #3
 800d3e0:	4920      	ldr	r1, [pc, #128]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3e6:	4b1f      	ldr	r3, [pc, #124]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ea:	4a1e      	ldr	r2, [pc, #120]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d106      	bne.n	800d406 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3f8:	4b1a      	ldr	r3, [pc, #104]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	4a19      	ldr	r2, [pc, #100]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d3fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d402:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d404:	e00f      	b.n	800d426 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d106      	bne.n	800d41a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d40c:	4b15      	ldr	r3, [pc, #84]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	4a14      	ldr	r2, [pc, #80]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d416:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d418:	e005      	b.n	800d426 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d41a:	4b12      	ldr	r3, [pc, #72]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	4a11      	ldr	r2, [pc, #68]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d426:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a0e      	ldr	r2, [pc, #56]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d432:	f7f7 f95d 	bl	80046f0 <HAL_GetTick>
 800d436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d438:	e008      	b.n	800d44c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d43a:	f7f7 f959 	bl	80046f0 <HAL_GetTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	2b02      	cmp	r3, #2
 800d446:	d901      	bls.n	800d44c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d448:	2303      	movs	r3, #3
 800d44a:	e006      	b.n	800d45a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <RCCEx_PLL3_Config+0x15c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d0f0      	beq.n	800d43a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	58024400 	.word	0x58024400
 800d468:	ffff0007 	.word	0xffff0007

0800d46c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b08a      	sub	sp, #40	; 0x28
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e075      	b.n	800d56a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d105      	bne.n	800d496 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7f6 f9c5 	bl	8003820 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2204      	movs	r2, #4
 800d49a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f868 	bl	800d574 <HAL_SD_InitCard>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e05d      	b.n	800d56a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d4ae:	f107 0308 	add.w	r3, r7, #8
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 fdaf 	bl	800e018 <HAL_SD_GetCardStatus>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e052      	b.n	800d56a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d4c4:	7e3b      	ldrb	r3, [r7, #24]
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d4ca:	7e7b      	ldrb	r3, [r7, #25]
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d10a      	bne.n	800d4ee <HAL_SD_Init+0x82>
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <HAL_SD_Init+0x78>
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d004      	beq.n	800d4ee <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4ea:	659a      	str	r2, [r3, #88]	; 0x58
 800d4ec:	e00b      	b.n	800d506 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d104      	bne.n	800d500 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4fc:	659a      	str	r2, [r3, #88]	; 0x58
 800d4fe:	e002      	b.n	800d506 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fe6d 	bl	800e1ec <HAL_SD_ConfigWideBusOperation>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d001      	beq.n	800d51c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	e026      	b.n	800d56a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d51c:	f7f7 f8e8 	bl	80046f0 <HAL_GetTick>
 800d520:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d522:	e011      	b.n	800d548 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d524:	f7f7 f8e4 	bl	80046f0 <HAL_GetTick>
 800d528:	4602      	mov	r2, r0
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	d109      	bne.n	800d548 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d53a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d544:	2303      	movs	r3, #3
 800d546:	e010      	b.n	800d56a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 ff61 	bl	800e410 <HAL_SD_GetCardState>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b04      	cmp	r3, #4
 800d552:	d1e7      	bne.n	800d524 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3728      	adds	r7, #40	; 0x28
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d574:	b590      	push	{r4, r7, lr}
 800d576:	b08d      	sub	sp, #52	; 0x34
 800d578:	af02      	add	r7, sp, #8
 800d57a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d580:	2300      	movs	r3, #0
 800d582:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d584:	2300      	movs	r3, #0
 800d586:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d588:	2300      	movs	r3, #0
 800d58a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d58c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d590:	f04f 0100 	mov.w	r1, #0
 800d594:	f7fe fd24 	bl	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d598:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d109      	bne.n	800d5b4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d5ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e070      	b.n	800d696 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	0a1b      	lsrs	r3, r3, #8
 800d5b8:	4a39      	ldr	r2, [pc, #228]	; (800d6a0 <HAL_SD_InitCard+0x12c>)
 800d5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d5be:	091b      	lsrs	r3, r3, #4
 800d5c0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681c      	ldr	r4, [r3, #0]
 800d5c6:	466a      	mov	r2, sp
 800d5c8:	f107 0318 	add.w	r3, r7, #24
 800d5cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800d5d4:	f107 030c 	add.w	r3, r7, #12
 800d5d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f004 fc28 	bl	8011e30 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f004 fc6b 	bl	8011ec0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d007      	beq.n	800d612 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d602:	4a28      	ldr	r2, [pc, #160]	; (800d6a4 <HAL_SD_InitCard+0x130>)
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	fbb2 f3f3 	udiv	r3, r2, r3
 800d60a:	3301      	adds	r3, #1
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7f7 f87b 	bl	8004708 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 ffea 	bl	800e5ec <SD_PowerON>
 800d618:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00b      	beq.n	800d638 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	431a      	orrs	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e02e      	b.n	800d696 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 ff09 	bl	800e450 <SD_InitCard>
 800d63e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d640:	6a3b      	ldr	r3, [r7, #32]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00b      	beq.n	800d65e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d652:	6a3b      	ldr	r3, [r7, #32]
 800d654:	431a      	orrs	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e01b      	b.n	800d696 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d666:	4618      	mov	r0, r3
 800d668:	f004 fcc0 	bl	8011fec <SDMMC_CmdBlockLength>
 800d66c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00f      	beq.n	800d694 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a0b      	ldr	r2, [pc, #44]	; (800d6a8 <HAL_SD_InitCard+0x134>)
 800d67a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	431a      	orrs	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d690:	2301      	movs	r3, #1
 800d692:	e000      	b.n	800d696 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	372c      	adds	r7, #44	; 0x2c
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd90      	pop	{r4, r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	014f8b59 	.word	0x014f8b59
 800d6a4:	00012110 	.word	0x00012110
 800d6a8:	1fe00fff 	.word	0x1fe00fff

0800d6ac <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08c      	sub	sp, #48	; 0x30
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d107      	bne.n	800d6d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e08d      	b.n	800d7f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	f040 8086 	bne.w	800d7ee <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	441a      	add	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d907      	bls.n	800d706 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d702:	2301      	movs	r3, #1
 800d704:	e074      	b.n	800d7f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2203      	movs	r2, #3
 800d70a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2200      	movs	r2, #0
 800d714:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	025a      	lsls	r2, r3, #9
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d002      	beq.n	800d732 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	025b      	lsls	r3, r3, #9
 800d730:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
 800d736:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	025b      	lsls	r3, r3, #9
 800d73c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d73e:	2390      	movs	r3, #144	; 0x90
 800d740:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d742:	2302      	movs	r3, #2
 800d744:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d746:	2300      	movs	r3, #0
 800d748:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f107 0210 	add.w	r2, r7, #16
 800d756:	4611      	mov	r1, r2
 800d758:	4618      	mov	r0, r3
 800d75a:	f004 fc1b 	bl	8011f94 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68da      	ldr	r2, [r3, #12]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d76c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2201      	movs	r2, #1
 800d77c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d90a      	bls.n	800d79a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2282      	movs	r2, #130	; 0x82
 800d788:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d790:	4618      	mov	r0, r3
 800d792:	f004 fc71 	bl	8012078 <SDMMC_CmdReadMultiBlock>
 800d796:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d798:	e009      	b.n	800d7ae <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2281      	movs	r2, #129	; 0x81
 800d79e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f004 fc43 	bl	8012032 <SDMMC_CmdReadSingleBlock>
 800d7ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d012      	beq.n	800d7da <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a0f      	ldr	r2, [pc, #60]	; (800d7f8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e00a      	b.n	800d7f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d7e8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e000      	b.n	800d7f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d7ee:	2302      	movs	r3, #2
  }
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3730      	adds	r7, #48	; 0x30
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	1fe00fff 	.word	0x1fe00fff

0800d7fc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08c      	sub	sp, #48	; 0x30
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
 800d808:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d107      	bne.n	800d824 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d818:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	e08d      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	f040 8086 	bne.w	800d93e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	441a      	add	r2, r3
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d842:	429a      	cmp	r2, r3
 800d844:	d907      	bls.n	800d856 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e074      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2203      	movs	r2, #3
 800d85a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2200      	movs	r2, #0
 800d864:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	68ba      	ldr	r2, [r7, #8]
 800d86a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	025a      	lsls	r2, r3, #9
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d002      	beq.n	800d882 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	025b      	lsls	r3, r3, #9
 800d880:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d882:	f04f 33ff 	mov.w	r3, #4294967295
 800d886:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	025b      	lsls	r3, r3, #9
 800d88c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d88e:	2390      	movs	r3, #144	; 0x90
 800d890:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d892:	2300      	movs	r3, #0
 800d894:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d896:	2300      	movs	r3, #0
 800d898:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d89a:	2300      	movs	r3, #0
 800d89c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f107 0210 	add.w	r2, r7, #16
 800d8a6:	4611      	mov	r1, r2
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f004 fb73 	bl	8011f94 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68da      	ldr	r2, [r3, #12]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8bc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d90a      	bls.n	800d8ea <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	22a0      	movs	r2, #160	; 0xa0
 800d8d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f004 fc0f 	bl	8012104 <SDMMC_CmdWriteMultiBlock>
 800d8e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8e8:	e009      	b.n	800d8fe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2290      	movs	r2, #144	; 0x90
 800d8ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f004 fbe1 	bl	80120be <SDMMC_CmdWriteSingleBlock>
 800d8fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d900:	2b00      	cmp	r3, #0
 800d902:	d012      	beq.n	800d92a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a0f      	ldr	r2, [pc, #60]	; (800d948 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	431a      	orrs	r2, r3
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	e00a      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d938:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e000      	b.n	800d940 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d93e:	2302      	movs	r3, #2
  }
}
 800d940:	4618      	mov	r0, r3
 800d942:	3730      	adds	r7, #48	; 0x30
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	1fe00fff 	.word	0x1fe00fff

0800d94c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d958:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d008      	beq.n	800d97a <HAL_SD_IRQHandler+0x2e>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f003 0308 	and.w	r3, r3, #8
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d003      	beq.n	800d97a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f001 f926 	bl	800ebc4 <SD_Read_IT>
 800d978:	e19a      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 80ac 	beq.w	800dae2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d992:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	4b59      	ldr	r3, [pc, #356]	; (800db04 <HAL_SD_IRQHandler+0x1b8>)
 800d9a0:	400b      	ands	r3, r1
 800d9a2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d9b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9c2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f003 0308 	and.w	r3, r3, #8
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d038      	beq.n	800da40 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f003 0302 	and.w	r3, r3, #2
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d104      	bne.n	800d9e2 <HAL_SD_IRQHandler+0x96>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d011      	beq.n	800da06 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f004 fbb0 	bl	801214c <SDMMC_CmdStopTransfer>
 800d9ec:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d008      	beq.n	800da06 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f95b 	bl	800dcbc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a3f      	ldr	r2, [pc, #252]	; (800db08 <HAL_SD_IRQHandler+0x1bc>)
 800da0c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d104      	bne.n	800da30 <HAL_SD_IRQHandler+0xe4>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f006 fbb1 	bl	8014198 <HAL_SD_RxCpltCallback>
 800da36:	e13b      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f006 fba3 	bl	8014184 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800da3e:	e137      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 8132 	beq.w	800dcb0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2200      	movs	r2, #0
 800da52:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2200      	movs	r2, #0
 800da5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2200      	movs	r2, #0
 800da62:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f003 0302 	and.w	r3, r3, #2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d104      	bne.n	800da78 <HAL_SD_IRQHandler+0x12c>
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f003 0320 	and.w	r3, r3, #32
 800da74:	2b00      	cmp	r3, #0
 800da76:	d011      	beq.n	800da9c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f004 fb65 	bl	801214c <SDMMC_CmdStopTransfer>
 800da82:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d008      	beq.n	800da9c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	431a      	orrs	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f910 	bl	800dcbc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f003 0310 	and.w	r3, r3, #16
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d104      	bne.n	800dabe <HAL_SD_IRQHandler+0x172>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f003 0320 	and.w	r3, r3, #32
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d002      	beq.n	800dac4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f006 fb60 	bl	8014184 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <HAL_SD_IRQHandler+0x18e>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 80eb 	beq.w	800dcb0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f006 fb5c 	bl	8014198 <HAL_SD_RxCpltCallback>
}
 800dae0:	e0e6      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00d      	beq.n	800db0c <HAL_SD_IRQHandler+0x1c0>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f003 0308 	and.w	r3, r3, #8
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d008      	beq.n	800db0c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f001 f8a8 	bl	800ec50 <SD_Write_IT>
 800db00:	e0d6      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
 800db02:	bf00      	nop
 800db04:	ffff3ec5 	.word	0xffff3ec5
 800db08:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db12:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 809d 	beq.w	800dc56 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db22:	f003 0302 	and.w	r3, r3, #2
 800db26:	2b00      	cmp	r3, #0
 800db28:	d005      	beq.n	800db36 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2e:	f043 0202 	orr.w	r2, r3, #2
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3c:	f003 0308 	and.w	r3, r3, #8
 800db40:	2b00      	cmp	r3, #0
 800db42:	d005      	beq.n	800db50 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db48:	f043 0208 	orr.w	r2, r3, #8
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db56:	f003 0320 	and.w	r3, r3, #32
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d005      	beq.n	800db6a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db62:	f043 0220 	orr.w	r2, r3, #32
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db70:	f003 0310 	and.w	r3, r3, #16
 800db74:	2b00      	cmp	r3, #0
 800db76:	d005      	beq.n	800db84 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7c:	f043 0210 	orr.w	r2, r3, #16
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a4b      	ldr	r2, [pc, #300]	; (800dcb8 <HAL_SD_IRQHandler+0x36c>)
 800db8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800db9a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68da      	ldr	r2, [r3, #12]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbaa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dbba:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68da      	ldr	r2, [r3, #12]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dbca:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f004 fabb 	bl	801214c <SDMMC_CmdStopTransfer>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbdc:	431a      	orrs	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68da      	ldr	r2, [r3, #12]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbf0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbfa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f003 0308 	and.w	r3, r3, #8
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00a      	beq.n	800dc1c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f851 	bl	800dcbc <HAL_SD_ErrorCallback>
}
 800dc1a:	e049      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d044      	beq.n	800dcb0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d040      	beq.n	800dcb0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dc3c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2200      	movs	r2, #0
 800dc44:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f834 	bl	800dcbc <HAL_SD_ErrorCallback>
}
 800dc54:	e02c      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d025      	beq.n	800dcb0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10c      	bne.n	800dc96 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f003 0320 	and.w	r3, r3, #32
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d003      	beq.n	800dc8e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f001 f84a 	bl	800ed20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dc8c:	e010      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 f832 	bl	800ecf8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dc94:	e00c      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f003 0320 	and.w	r3, r3, #32
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d003      	beq.n	800dca8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f001 f833 	bl	800ed0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dca6:	e003      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f001 f81b 	bl	800ece4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dcae:	e7ff      	b.n	800dcb0 <HAL_SD_IRQHandler+0x364>
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	18000f3a 	.word	0x18000f3a

0800dcbc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcde:	0f9b      	lsrs	r3, r3, #30
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcea:	0e9b      	lsrs	r3, r3, #26
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 030f 	and.w	r3, r3, #15
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcfc:	0e1b      	lsrs	r3, r3, #24
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	f003 0303 	and.w	r3, r3, #3
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd0e:	0c1b      	lsrs	r3, r3, #16
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd1a:	0a1b      	lsrs	r3, r3, #8
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd30:	0d1b      	lsrs	r3, r3, #20
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd3c:	0c1b      	lsrs	r3, r3, #16
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd4e:	0bdb      	lsrs	r3, r3, #15
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd60:	0b9b      	lsrs	r3, r3, #14
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd72:	0b5b      	lsrs	r3, r3, #13
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd84:	0b1b      	lsrs	r3, r3, #12
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2200      	movs	r2, #0
 800dd96:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d163      	bne.n	800de68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dda4:	009a      	lsls	r2, r3, #2
 800dda6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ddaa:	4013      	ands	r3, r2
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ddb0:	0f92      	lsrs	r2, r2, #30
 800ddb2:	431a      	orrs	r2, r3
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddbc:	0edb      	lsrs	r3, r3, #27
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	f003 0307 	and.w	r3, r3, #7
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddce:	0e1b      	lsrs	r3, r3, #24
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0307 	and.w	r3, r3, #7
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde0:	0d5b      	lsrs	r3, r3, #21
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	f003 0307 	and.w	r3, r3, #7
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddf2:	0c9b      	lsrs	r3, r3, #18
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de04:	0bdb      	lsrs	r3, r3, #15
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 0307 	and.w	r3, r3, #7
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	7e1b      	ldrb	r3, [r3, #24]
 800de20:	b2db      	uxtb	r3, r3
 800de22:	f003 0307 	and.w	r3, r3, #7
 800de26:	3302      	adds	r3, #2
 800de28:	2201      	movs	r2, #1
 800de2a:	fa02 f303 	lsl.w	r3, r2, r3
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800de32:	fb03 f202 	mul.w	r2, r3, r2
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	7a1b      	ldrb	r3, [r3, #8]
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	f003 030f 	and.w	r3, r3, #15
 800de44:	2201      	movs	r2, #1
 800de46:	409a      	lsls	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800de54:	0a52      	lsrs	r2, r2, #9
 800de56:	fb03 f202 	mul.w	r2, r3, r2
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de64:	655a      	str	r2, [r3, #84]	; 0x54
 800de66:	e031      	b.n	800decc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d11d      	bne.n	800deac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de74:	041b      	lsls	r3, r3, #16
 800de76:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7e:	0c1b      	lsrs	r3, r3, #16
 800de80:	431a      	orrs	r2, r3
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	3301      	adds	r3, #1
 800de8c:	029a      	lsls	r2, r3, #10
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dea0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	655a      	str	r2, [r3, #84]	; 0x54
 800deaa:	e00f      	b.n	800decc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a58      	ldr	r2, [pc, #352]	; (800e014 <HAL_SD_GetCardCSD+0x344>)
 800deb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	e09d      	b.n	800e008 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded0:	0b9b      	lsrs	r3, r3, #14
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee2:	09db      	lsrs	r3, r3, #7
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deea:	b2da      	uxtb	r2, r3
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def4:	b2db      	uxtb	r3, r3
 800def6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defa:	b2da      	uxtb	r2, r3
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df04:	0fdb      	lsrs	r3, r3, #31
 800df06:	b2da      	uxtb	r2, r3
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df10:	0f5b      	lsrs	r3, r3, #29
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 0303 	and.w	r3, r3, #3
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df22:	0e9b      	lsrs	r3, r3, #26
 800df24:	b2db      	uxtb	r3, r3
 800df26:	f003 0307 	and.w	r3, r3, #7
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df34:	0d9b      	lsrs	r3, r3, #22
 800df36:	b2db      	uxtb	r3, r3
 800df38:	f003 030f 	and.w	r3, r3, #15
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df46:	0d5b      	lsrs	r3, r3, #21
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	2200      	movs	r2, #0
 800df5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df62:	0c1b      	lsrs	r3, r3, #16
 800df64:	b2db      	uxtb	r3, r3
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df76:	0bdb      	lsrs	r3, r3, #15
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df8a:	0b9b      	lsrs	r3, r3, #14
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	f003 0301 	and.w	r3, r3, #1
 800df92:	b2da      	uxtb	r2, r3
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df9e:	0b5b      	lsrs	r3, r3, #13
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfb2:	0b1b      	lsrs	r3, r3, #12
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	f003 0301 	and.w	r3, r3, #1
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfc6:	0a9b      	lsrs	r3, r3, #10
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 0303 	and.w	r3, r3, #3
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfda:	0a1b      	lsrs	r3, r3, #8
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 0303 	and.w	r3, r3, #3
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfee:	085b      	lsrs	r3, r3, #1
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	1fe00fff 	.word	0x1fe00fff

0800e018 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b094      	sub	sp, #80	; 0x50
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b03      	cmp	r3, #3
 800e032:	d101      	bne.n	800e038 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e034:	2301      	movs	r3, #1
 800e036:	e0a7      	b.n	800e188 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e038:	f107 0308 	add.w	r3, r7, #8
 800e03c:	4619      	mov	r1, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fb62 	bl	800e708 <SD_SendSDStatus>
 800e044:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d011      	beq.n	800e070 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a4f      	ldr	r2, [pc, #316]	; (800e190 <HAL_SD_GetCardStatus+0x178>)
 800e052:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e05a:	431a      	orrs	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e06e:	e070      	b.n	800e152 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	099b      	lsrs	r3, r3, #6
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f003 0303 	and.w	r3, r3, #3
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	095b      	lsrs	r3, r3, #5
 800e084:	b2db      	uxtb	r3, r3
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	0a1b      	lsrs	r3, r3, #8
 800e094:	b29b      	uxth	r3, r3
 800e096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	0e1b      	lsrs	r3, r3, #24
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	061a      	lsls	r2, r3, #24
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	021b      	lsls	r3, r3, #8
 800e0b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e0b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	0a1b      	lsrs	r3, r3, #8
 800e0bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	0e1b      	lsrs	r3, r3, #24
 800e0c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	0a1b      	lsrs	r3, r3, #8
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	0d1b      	lsrs	r3, r3, #20
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 030f 	and.w	r3, r3, #15
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	0c1b      	lsrs	r3, r3, #16
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	b29b      	uxth	r3, r3
 800e102:	4313      	orrs	r3, r2
 800e104:	b29a      	uxth	r2, r3
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	0a9b      	lsrs	r3, r3, #10
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e114:	b2da      	uxtb	r2, r3
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	0a1b      	lsrs	r3, r3, #8
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	f003 0303 	and.w	r3, r3, #3
 800e124:	b2da      	uxtb	r2, r3
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	091b      	lsrs	r3, r3, #4
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	f003 030f 	and.w	r3, r3, #15
 800e134:	b2da      	uxtb	r2, r3
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f003 030f 	and.w	r3, r3, #15
 800e142:	b2da      	uxtb	r2, r3
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	0e1b      	lsrs	r3, r3, #24
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e15a:	4618      	mov	r0, r3
 800e15c:	f003 ff46 	bl	8011fec <SDMMC_CmdBlockLength>
 800e160:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00d      	beq.n	800e184 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a08      	ldr	r2, [pc, #32]	; (800e190 <HAL_SD_GetCardStatus+0x178>)
 800e16e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e174:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e184:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3750      	adds	r7, #80	; 0x50
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	1fe00fff 	.word	0x1fe00fff

0800e194 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e1ec:	b590      	push	{r4, r7, lr}
 800e1ee:	b08d      	sub	sp, #52	; 0x34
 800e1f0:	af02      	add	r7, sp, #8
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2203      	movs	r2, #3
 800e200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d02e      	beq.n	800e26a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e212:	d106      	bne.n	800e222 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e218:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	635a      	str	r2, [r3, #52]	; 0x34
 800e220:	e029      	b.n	800e276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e228:	d10a      	bne.n	800e240 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fb64 	bl	800e8f8 <SD_WideBus_Enable>
 800e230:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	431a      	orrs	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	635a      	str	r2, [r3, #52]	; 0x34
 800e23e:	e01a      	b.n	800e276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d10a      	bne.n	800e25c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fba1 	bl	800e98e <SD_WideBus_Disable>
 800e24c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	431a      	orrs	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	635a      	str	r2, [r3, #52]	; 0x34
 800e25a:	e00c      	b.n	800e276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e260:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	635a      	str	r2, [r3, #52]	; 0x34
 800e268:	e005      	b.n	800e276 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d007      	beq.n	800e28e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a5f      	ldr	r2, [pc, #380]	; (800e400 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e284:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e28c:	e096      	b.n	800e3bc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e28e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e292:	f04f 0100 	mov.w	r1, #0
 800e296:	f7fd fea3 	bl	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e29a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f000 8083 	beq.w	800e3aa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	695a      	ldr	r2, [r3, #20]
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	4950      	ldr	r1, [pc, #320]	; (800e404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2c2:	fba1 1303 	umull	r1, r3, r1, r3
 800e2c6:	0e1b      	lsrs	r3, r3, #24
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d303      	bcc.n	800e2d4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	695b      	ldr	r3, [r3, #20]
 800e2d0:	61bb      	str	r3, [r7, #24]
 800e2d2:	e05a      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2dc:	d103      	bne.n	800e2e6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	695b      	ldr	r3, [r3, #20]
 800e2e2:	61bb      	str	r3, [r7, #24]
 800e2e4:	e051      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ee:	d126      	bne.n	800e33e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10e      	bne.n	800e316 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	4a43      	ldr	r2, [pc, #268]	; (800e408 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d906      	bls.n	800e30e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	4a40      	ldr	r2, [pc, #256]	; (800e404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e304:	fba2 2303 	umull	r2, r3, r2, r3
 800e308:	0e5b      	lsrs	r3, r3, #25
 800e30a:	61bb      	str	r3, [r7, #24]
 800e30c:	e03d      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	695b      	ldr	r3, [r3, #20]
 800e312:	61bb      	str	r3, [r7, #24]
 800e314:	e039      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	005b      	lsls	r3, r3, #1
 800e31c:	69fa      	ldr	r2, [r7, #28]
 800e31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e322:	4a39      	ldr	r2, [pc, #228]	; (800e408 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d906      	bls.n	800e336 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	4a36      	ldr	r2, [pc, #216]	; (800e404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e32c:	fba2 2303 	umull	r2, r3, r2, r3
 800e330:	0e5b      	lsrs	r3, r3, #25
 800e332:	61bb      	str	r3, [r7, #24]
 800e334:	e029      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	695b      	ldr	r3, [r3, #20]
 800e33a:	61bb      	str	r3, [r7, #24]
 800e33c:	e025      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10e      	bne.n	800e364 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	4a30      	ldr	r2, [pc, #192]	; (800e40c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d906      	bls.n	800e35c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	4a2c      	ldr	r2, [pc, #176]	; (800e404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e352:	fba2 2303 	umull	r2, r3, r2, r3
 800e356:	0e1b      	lsrs	r3, r3, #24
 800e358:	61bb      	str	r3, [r7, #24]
 800e35a:	e016      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	61bb      	str	r3, [r7, #24]
 800e362:	e012      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e370:	4a26      	ldr	r2, [pc, #152]	; (800e40c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d906      	bls.n	800e384 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	4a22      	ldr	r2, [pc, #136]	; (800e404 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e37a:	fba2 2303 	umull	r2, r3, r2, r3
 800e37e:	0e1b      	lsrs	r3, r3, #24
 800e380:	61bb      	str	r3, [r7, #24]
 800e382:	e002      	b.n	800e38a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681c      	ldr	r4, [r3, #0]
 800e38e:	466a      	mov	r2, sp
 800e390:	f107 0314 	add.w	r3, r7, #20
 800e394:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e398:	e882 0003 	stmia.w	r2, {r0, r1}
 800e39c:	f107 0308 	add.w	r3, r7, #8
 800e3a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f003 fd44 	bl	8011e30 <SDMMC_Init>
 800e3a8:	e008      	b.n	800e3bc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f003 fe11 	bl	8011fec <SDMMC_CmdBlockLength>
 800e3ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00c      	beq.n	800e3ec <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a0a      	ldr	r2, [pc, #40]	; (800e400 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e3d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	431a      	orrs	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	372c      	adds	r7, #44	; 0x2c
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd90      	pop	{r4, r7, pc}
 800e400:	1fe00fff 	.word	0x1fe00fff
 800e404:	55e63b89 	.word	0x55e63b89
 800e408:	02faf080 	.word	0x02faf080
 800e40c:	017d7840 	.word	0x017d7840

0800e410 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e41c:	f107 030c 	add.w	r3, r7, #12
 800e420:	4619      	mov	r1, r3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fa40 	bl	800e8a8 <SD_SendStatus>
 800e428:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	431a      	orrs	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	0a5b      	lsrs	r3, r3, #9
 800e440:	f003 030f 	and.w	r3, r3, #15
 800e444:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e446:	693b      	ldr	r3, [r7, #16]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3718      	adds	r7, #24
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b090      	sub	sp, #64	; 0x40
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e458:	2300      	movs	r3, #0
 800e45a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e45c:	f7f6 f948 	bl	80046f0 <HAL_GetTick>
 800e460:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4618      	mov	r0, r3
 800e468:	f003 fd3b 	bl	8011ee2 <SDMMC_GetPowerState>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d102      	bne.n	800e478 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e472:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e476:	e0b5      	b.n	800e5e4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e47c:	2b03      	cmp	r3, #3
 800e47e:	d02e      	beq.n	800e4de <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4618      	mov	r0, r3
 800e486:	f003 ff86 	bl	8012396 <SDMMC_CmdSendCID>
 800e48a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <SD_InitCard+0x46>
    {
      return errorstate;
 800e492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e494:	e0a6      	b.n	800e5e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2100      	movs	r1, #0
 800e49c:	4618      	mov	r0, r3
 800e49e:	f003 fd66 	bl	8011f6e <SDMMC_GetResponse>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2104      	movs	r1, #4
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f003 fd5d 	bl	8011f6e <SDMMC_GetResponse>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2108      	movs	r1, #8
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f003 fd54 	bl	8011f6e <SDMMC_GetResponse>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	210c      	movs	r1, #12
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f003 fd4b 	bl	8011f6e <SDMMC_GetResponse>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d01d      	beq.n	800e522 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e4e6:	e019      	b.n	800e51c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f107 020a 	add.w	r2, r7, #10
 800e4f0:	4611      	mov	r1, r2
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f003 ff8e 	bl	8012414 <SDMMC_CmdSetRelAdd>
 800e4f8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d001      	beq.n	800e504 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	e06f      	b.n	800e5e4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e504:	f7f6 f8f4 	bl	80046f0 <HAL_GetTick>
 800e508:	4602      	mov	r2, r0
 800e50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	f241 3287 	movw	r2, #4999	; 0x1387
 800e512:	4293      	cmp	r3, r2
 800e514:	d902      	bls.n	800e51c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e516:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e51a:	e063      	b.n	800e5e4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e51c:	897b      	ldrh	r3, [r7, #10]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0e2      	beq.n	800e4e8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e526:	2b03      	cmp	r3, #3
 800e528:	d036      	beq.n	800e598 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e52a:	897b      	ldrh	r3, [r7, #10]
 800e52c:	461a      	mov	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53a:	041b      	lsls	r3, r3, #16
 800e53c:	4619      	mov	r1, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	f003 ff48 	bl	80123d4 <SDMMC_CmdSendCSD>
 800e544:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <SD_InitCard+0x100>
    {
      return errorstate;
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	e049      	b.n	800e5e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2100      	movs	r1, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f003 fd09 	bl	8011f6e <SDMMC_GetResponse>
 800e55c:	4602      	mov	r2, r0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2104      	movs	r1, #4
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fd00 	bl	8011f6e <SDMMC_GetResponse>
 800e56e:	4602      	mov	r2, r0
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2108      	movs	r1, #8
 800e57a:	4618      	mov	r0, r3
 800e57c:	f003 fcf7 	bl	8011f6e <SDMMC_GetResponse>
 800e580:	4602      	mov	r2, r0
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	210c      	movs	r1, #12
 800e58c:	4618      	mov	r0, r3
 800e58e:	f003 fcee 	bl	8011f6e <SDMMC_GetResponse>
 800e592:	4602      	mov	r2, r0
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2104      	movs	r1, #4
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f003 fce5 	bl	8011f6e <SDMMC_GetResponse>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	0d1a      	lsrs	r2, r3, #20
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e5ac:	f107 030c 	add.w	r3, r7, #12
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff fb8c 	bl	800dcd0 <HAL_SD_GetCardCSD>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5c2:	e00f      	b.n	800e5e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5cc:	041b      	lsls	r3, r3, #16
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f003 fdf7 	bl	80121c4 <SDMMC_CmdSelDesel>
 800e5d6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <SD_InitCard+0x192>
  {
    return errorstate;
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	e000      	b.n	800e5e4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3740      	adds	r7, #64	; 0x40
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4618      	mov	r0, r3
 800e606:	f003 fe00 	bl	801220a <SDMMC_CmdGoIdleState>
 800e60a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	e072      	b.n	800e6fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f003 fe13 	bl	8012246 <SDMMC_CmdOperCond>
 800e620:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e628:	d10d      	bne.n	800e646 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4618      	mov	r0, r3
 800e636:	f003 fde8 	bl	801220a <SDMMC_CmdGoIdleState>
 800e63a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <SD_PowerON+0x60>
    {
      return errorstate;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	e05a      	b.n	800e6fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e650:	2b01      	cmp	r3, #1
 800e652:	d137      	bne.n	800e6c4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2100      	movs	r1, #0
 800e65a:	4618      	mov	r0, r3
 800e65c:	f003 fe13 	bl	8012286 <SDMMC_CmdAppCommand>
 800e660:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d02d      	beq.n	800e6c4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e66c:	e046      	b.n	800e6fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2100      	movs	r1, #0
 800e674:	4618      	mov	r0, r3
 800e676:	f003 fe06 	bl	8012286 <SDMMC_CmdAppCommand>
 800e67a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d001      	beq.n	800e686 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	e03a      	b.n	800e6fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	491e      	ldr	r1, [pc, #120]	; (800e704 <SD_PowerON+0x118>)
 800e68c:	4618      	mov	r0, r3
 800e68e:	f003 fe1d 	bl	80122cc <SDMMC_CmdAppOperCommand>
 800e692:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d002      	beq.n	800e6a0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e69a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e69e:	e02d      	b.n	800e6fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f003 fc61 	bl	8011f6e <SDMMC_GetResponse>
 800e6ac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	0fdb      	lsrs	r3, r3, #31
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d101      	bne.n	800e6ba <SD_PowerON+0xce>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e000      	b.n	800e6bc <SD_PowerON+0xd0>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	613b      	str	r3, [r7, #16]

    count++;
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d802      	bhi.n	800e6d4 <SD_PowerON+0xe8>
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d0cc      	beq.n	800e66e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d902      	bls.n	800e6e4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e6de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e6e2:	e00b      	b.n	800e6fc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3718      	adds	r7, #24
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	c1100000 	.word	0xc1100000

0800e708 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b08c      	sub	sp, #48	; 0x30
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e712:	f7f5 ffed 	bl	80046f0 <HAL_GetTick>
 800e716:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2100      	movs	r1, #0
 800e722:	4618      	mov	r0, r3
 800e724:	f003 fc23 	bl	8011f6e <SDMMC_GetResponse>
 800e728:	4603      	mov	r3, r0
 800e72a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e72e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e732:	d102      	bne.n	800e73a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e738:	e0b0      	b.n	800e89c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2140      	movs	r1, #64	; 0x40
 800e740:	4618      	mov	r0, r3
 800e742:	f003 fc53 	bl	8011fec <SDMMC_CmdBlockLength>
 800e746:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e748:	6a3b      	ldr	r3, [r7, #32]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d005      	beq.n	800e75a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	e0a0      	b.n	800e89c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e762:	041b      	lsls	r3, r3, #16
 800e764:	4619      	mov	r1, r3
 800e766:	4610      	mov	r0, r2
 800e768:	f003 fd8d 	bl	8012286 <SDMMC_CmdAppCommand>
 800e76c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e76e:	6a3b      	ldr	r3, [r7, #32]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	e08d      	b.n	800e89c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e780:	f04f 33ff 	mov.w	r3, #4294967295
 800e784:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e786:	2340      	movs	r3, #64	; 0x40
 800e788:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e78a:	2360      	movs	r3, #96	; 0x60
 800e78c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e78e:	2302      	movs	r3, #2
 800e790:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e792:	2300      	movs	r3, #0
 800e794:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e796:	2301      	movs	r3, #1
 800e798:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f107 0208 	add.w	r2, r7, #8
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f003 fbf5 	bl	8011f94 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f003 fe75 	bl	801249e <SDMMC_CmdStatusRegister>
 800e7b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d02b      	beq.n	800e814 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	e069      	b.n	800e89c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d013      	beq.n	800e7fe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7da:	e00d      	b.n	800e7f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f003 fb4f 	bl	8011e84 <SDMMC_ReadFIFO>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	601a      	str	r2, [r3, #0]
        pData++;
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	2b07      	cmp	r3, #7
 800e7fc:	d9ee      	bls.n	800e7dc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7fe:	f7f5 ff77 	bl	80046f0 <HAL_GetTick>
 800e802:	4602      	mov	r2, r0
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e80c:	d102      	bne.n	800e814 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e80e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e812:	e043      	b.n	800e89c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e81a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d0d2      	beq.n	800e7c8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e828:	f003 0308 	and.w	r3, r3, #8
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d001      	beq.n	800e834 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e830:	2308      	movs	r3, #8
 800e832:	e033      	b.n	800e89c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e842:	2302      	movs	r3, #2
 800e844:	e02a      	b.n	800e89c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84c:	f003 0320 	and.w	r3, r3, #32
 800e850:	2b00      	cmp	r3, #0
 800e852:	d017      	beq.n	800e884 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e854:	2320      	movs	r3, #32
 800e856:	e021      	b.n	800e89c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f003 fb11 	bl	8011e84 <SDMMC_ReadFIFO>
 800e862:	4602      	mov	r2, r0
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	601a      	str	r2, [r3, #0]
    pData++;
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	3304      	adds	r3, #4
 800e86c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e86e:	f7f5 ff3f 	bl	80046f0 <HAL_GetTick>
 800e872:	4602      	mov	r2, r0
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87c:	d102      	bne.n	800e884 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e87e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e882:	e00b      	b.n	800e89c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1e2      	bne.n	800e858 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a03      	ldr	r2, [pc, #12]	; (800e8a4 <SD_SendSDStatus+0x19c>)
 800e898:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3730      	adds	r7, #48	; 0x30
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	18000f3a 	.word	0x18000f3a

0800e8a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d102      	bne.n	800e8be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e8b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e8bc:	e018      	b.n	800e8f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c6:	041b      	lsls	r3, r3, #16
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	f003 fdc4 	bl	8012458 <SDMMC_CmdSendStatus>
 800e8d0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	e009      	b.n	800e8f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f003 fb43 	bl	8011f6e <SDMMC_GetResponse>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e900:	2300      	movs	r3, #0
 800e902:	60fb      	str	r3, [r7, #12]
 800e904:	2300      	movs	r3, #0
 800e906:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2100      	movs	r1, #0
 800e90e:	4618      	mov	r0, r3
 800e910:	f003 fb2d 	bl	8011f6e <SDMMC_GetResponse>
 800e914:	4603      	mov	r3, r0
 800e916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e91a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e91e:	d102      	bne.n	800e926 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e924:	e02f      	b.n	800e986 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e926:	f107 030c 	add.w	r3, r7, #12
 800e92a:	4619      	mov	r1, r3
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 f879 	bl	800ea24 <SD_FindSCR>
 800e932:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d001      	beq.n	800e93e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	e023      	b.n	800e986 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e944:	2b00      	cmp	r3, #0
 800e946:	d01c      	beq.n	800e982 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e950:	041b      	lsls	r3, r3, #16
 800e952:	4619      	mov	r1, r3
 800e954:	4610      	mov	r0, r2
 800e956:	f003 fc96 	bl	8012286 <SDMMC_CmdAppCommand>
 800e95a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	e00f      	b.n	800e986 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2102      	movs	r1, #2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f003 fccd 	bl	801230c <SDMMC_CmdBusWidth>
 800e972:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	e003      	b.n	800e986 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e97e:	2300      	movs	r3, #0
 800e980:	e001      	b.n	800e986 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e986:	4618      	mov	r0, r3
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b086      	sub	sp, #24
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e996:	2300      	movs	r3, #0
 800e998:	60fb      	str	r3, [r7, #12]
 800e99a:	2300      	movs	r3, #0
 800e99c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f003 fae2 	bl	8011f6e <SDMMC_GetResponse>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9b4:	d102      	bne.n	800e9bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9ba:	e02f      	b.n	800ea1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9bc:	f107 030c 	add.w	r3, r7, #12
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f82e 	bl	800ea24 <SD_FindSCR>
 800e9c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	e023      	b.n	800ea1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d01c      	beq.n	800ea18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9e6:	041b      	lsls	r3, r3, #16
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f003 fc4b 	bl	8012286 <SDMMC_CmdAppCommand>
 800e9f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	e00f      	b.n	800ea1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f003 fc82 	bl	801230c <SDMMC_CmdBusWidth>
 800ea08:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	e003      	b.n	800ea1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea14:	2300      	movs	r3, #0
 800ea16:	e001      	b.n	800ea1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b08e      	sub	sp, #56	; 0x38
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ea2e:	f7f5 fe5f 	bl	80046f0 <HAL_GetTick>
 800ea32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ea34:	2300      	movs	r3, #0
 800ea36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60bb      	str	r3, [r7, #8]
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2108      	movs	r1, #8
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f003 face 	bl	8011fec <SDMMC_CmdBlockLength>
 800ea50:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	e0ad      	b.n	800ebb8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea64:	041b      	lsls	r3, r3, #16
 800ea66:	4619      	mov	r1, r3
 800ea68:	4610      	mov	r0, r2
 800ea6a:	f003 fc0c 	bl	8012286 <SDMMC_CmdAppCommand>
 800ea6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	e09e      	b.n	800ebb8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ea7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ea80:	2308      	movs	r3, #8
 800ea82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ea84:	2330      	movs	r3, #48	; 0x30
 800ea86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ea88:	2302      	movs	r3, #2
 800ea8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ea90:	2301      	movs	r3, #1
 800ea92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f107 0210 	add.w	r2, r7, #16
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f003 fa78 	bl	8011f94 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f003 fc52 	bl	8012352 <SDMMC_CmdSendSCR>
 800eaae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d027      	beq.n	800eb06 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800eab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab8:	e07e      	b.n	800ebb8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d113      	bne.n	800eaf0 <SD_FindSCR+0xcc>
 800eac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d110      	bne.n	800eaf0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f003 f9d6 	bl	8011e84 <SDMMC_ReadFIFO>
 800ead8:	4603      	mov	r3, r0
 800eada:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f003 f9cf 	bl	8011e84 <SDMMC_ReadFIFO>
 800eae6:	4603      	mov	r3, r0
 800eae8:	60fb      	str	r3, [r7, #12]
      index++;
 800eaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaec:	3301      	adds	r3, #1
 800eaee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eaf0:	f7f5 fdfe 	bl	80046f0 <HAL_GetTick>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafe:	d102      	bne.n	800eb06 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eb00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb04:	e058      	b.n	800ebb8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb0c:	f240 532a 	movw	r3, #1322	; 0x52a
 800eb10:	4013      	ands	r3, r2
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d0d1      	beq.n	800eaba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1c:	f003 0308 	and.w	r3, r3, #8
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d005      	beq.n	800eb30 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2208      	movs	r2, #8
 800eb2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	e043      	b.n	800ebb8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb36:	f003 0302 	and.w	r3, r3, #2
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d005      	beq.n	800eb4a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2202      	movs	r2, #2
 800eb44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eb46:	2302      	movs	r3, #2
 800eb48:	e036      	b.n	800ebb8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb50:	f003 0320 	and.w	r3, r3, #32
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d005      	beq.n	800eb64 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2220      	movs	r2, #32
 800eb5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eb60:	2320      	movs	r3, #32
 800eb62:	e029      	b.n	800ebb8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a15      	ldr	r2, [pc, #84]	; (800ebc0 <SD_FindSCR+0x19c>)
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	061a      	lsls	r2, r3, #24
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	021b      	lsls	r3, r3, #8
 800eb74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	0a1b      	lsrs	r3, r3, #8
 800eb7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	0e1b      	lsrs	r3, r3, #24
 800eb88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	601a      	str	r2, [r3, #0]
    scr++;
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	3304      	adds	r3, #4
 800eb92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	061a      	lsls	r2, r3, #24
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	021b      	lsls	r3, r3, #8
 800eb9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eba0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	0a1b      	lsrs	r3, r3, #8
 800eba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ebaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	0e1b      	lsrs	r3, r3, #24
 800ebb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3738      	adds	r7, #56	; 0x38
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	18000f3a 	.word	0x18000f3a

0800ebc4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b086      	sub	sp, #24
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd6:	2b1f      	cmp	r3, #31
 800ebd8:	d936      	bls.n	800ec48 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ebda:	2300      	movs	r3, #0
 800ebdc:	617b      	str	r3, [r7, #20]
 800ebde:	e027      	b.n	800ec30 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f003 f94d 	bl	8011e84 <SDMMC_ReadFIFO>
 800ebea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	0a1b      	lsrs	r3, r3, #8
 800ebfe:	b2da      	uxtb	r2, r3
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	3301      	adds	r3, #1
 800ec08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	0c1b      	lsrs	r3, r3, #16
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	3301      	adds	r3, #1
 800ec18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	0e1b      	lsrs	r3, r3, #24
 800ec1e:	b2da      	uxtb	r2, r3
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	3301      	adds	r3, #1
 800ec28:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	617b      	str	r3, [r7, #20]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	2b07      	cmp	r3, #7
 800ec34:	d9d4      	bls.n	800ebe0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec40:	f1a3 0220 	sub.w	r2, r3, #32
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ec48:	bf00      	nop
 800ec4a:	3718      	adds	r7, #24
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	69db      	ldr	r3, [r3, #28]
 800ec5c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	2b1f      	cmp	r3, #31
 800ec64:	d93a      	bls.n	800ecdc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ec66:	2300      	movs	r3, #0
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	e02b      	b.n	800ecc4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	3301      	adds	r3, #1
 800ec76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	021a      	lsls	r2, r3, #8
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	4313      	orrs	r3, r2
 800ec82:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	3301      	adds	r3, #1
 800ec88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	041a      	lsls	r2, r3, #16
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	061a      	lsls	r2, r3, #24
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f107 020c 	add.w	r2, r7, #12
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f003 f8f0 	bl	8011e9e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	2b07      	cmp	r3, #7
 800ecc8:	d9d0      	bls.n	800ec6c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a1b      	ldr	r3, [r3, #32]
 800ecd4:	f1a3 0220 	sub.w	r2, r3, #32
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	621a      	str	r2, [r3, #32]
  }
}
 800ecdc:	bf00      	nop
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ed14:	bf00      	nop
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e10f      	b.n	800ef66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a87      	ldr	r2, [pc, #540]	; (800ef70 <HAL_SPI_Init+0x23c>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d00f      	beq.n	800ed76 <HAL_SPI_Init+0x42>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a86      	ldr	r2, [pc, #536]	; (800ef74 <HAL_SPI_Init+0x240>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d00a      	beq.n	800ed76 <HAL_SPI_Init+0x42>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a84      	ldr	r2, [pc, #528]	; (800ef78 <HAL_SPI_Init+0x244>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d005      	beq.n	800ed76 <HAL_SPI_Init+0x42>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	2b0f      	cmp	r3, #15
 800ed70:	d901      	bls.n	800ed76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e0f7      	b.n	800ef66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fd5a 	bl	800f830 <SPI_GetPacketSize>
 800ed7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a7b      	ldr	r2, [pc, #492]	; (800ef70 <HAL_SPI_Init+0x23c>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d00c      	beq.n	800eda2 <HAL_SPI_Init+0x6e>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a79      	ldr	r2, [pc, #484]	; (800ef74 <HAL_SPI_Init+0x240>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d007      	beq.n	800eda2 <HAL_SPI_Init+0x6e>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a78      	ldr	r2, [pc, #480]	; (800ef78 <HAL_SPI_Init+0x244>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d002      	beq.n	800eda2 <HAL_SPI_Init+0x6e>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b08      	cmp	r3, #8
 800eda0:	d811      	bhi.n	800edc6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eda6:	4a72      	ldr	r2, [pc, #456]	; (800ef70 <HAL_SPI_Init+0x23c>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d009      	beq.n	800edc0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a70      	ldr	r2, [pc, #448]	; (800ef74 <HAL_SPI_Init+0x240>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d004      	beq.n	800edc0 <HAL_SPI_Init+0x8c>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a6f      	ldr	r2, [pc, #444]	; (800ef78 <HAL_SPI_Init+0x244>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d104      	bne.n	800edca <HAL_SPI_Init+0x96>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b10      	cmp	r3, #16
 800edc4:	d901      	bls.n	800edca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e0cd      	b.n	800ef66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d106      	bne.n	800ede4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7f4 fdf6 	bl	80039d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2202      	movs	r2, #2
 800ede8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f022 0201 	bic.w	r2, r2, #1
 800edfa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ee06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee10:	d119      	bne.n	800ee46 <HAL_SPI_Init+0x112>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee1a:	d103      	bne.n	800ee24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d008      	beq.n	800ee36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10c      	bne.n	800ee46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee34:	d107      	bne.n	800ee46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ee44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00f      	beq.n	800ee72 <HAL_SPI_Init+0x13e>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	2b06      	cmp	r3, #6
 800ee58:	d90b      	bls.n	800ee72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	430a      	orrs	r2, r1
 800ee6e:	601a      	str	r2, [r3, #0]
 800ee70:	e007      	b.n	800ee82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	69da      	ldr	r2, [r3, #28]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee8a:	431a      	orrs	r2, r3
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee94:	ea42 0103 	orr.w	r1, r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	68da      	ldr	r2, [r3, #12]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	430a      	orrs	r2, r1
 800eea2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeac:	431a      	orrs	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb2:	431a      	orrs	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	431a      	orrs	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	431a      	orrs	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	431a      	orrs	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	431a      	orrs	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	431a      	orrs	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eed6:	431a      	orrs	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	431a      	orrs	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eee2:	ea42 0103 	orr.w	r1, r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	430a      	orrs	r2, r1
 800eef0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d113      	bne.n	800ef22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f022 0201 	bic.w	r2, r2, #1
 800ef30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00a      	beq.n	800ef54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	430a      	orrs	r2, r1
 800ef52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	40013000 	.word	0x40013000
 800ef74:	40003800 	.word	0x40003800
 800ef78:	40003c00 	.word	0x40003c00

0800ef7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b08a      	sub	sp, #40	; 0x28
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	603b      	str	r3, [r7, #0]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3320      	adds	r3, #32
 800ef92:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d101      	bne.n	800efa6 <HAL_SPI_Transmit+0x2a>
 800efa2:	2302      	movs	r3, #2
 800efa4:	e1e1      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2201      	movs	r2, #1
 800efaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efae:	f7f5 fb9f 	bl	80046f0 <HAL_GetTick>
 800efb2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d007      	beq.n	800efd0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800efc0:	2302      	movs	r3, #2
 800efc2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efcc:	7efb      	ldrb	r3, [r7, #27]
 800efce:	e1cc      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <HAL_SPI_Transmit+0x60>
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d107      	bne.n	800efec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800efdc:	2301      	movs	r3, #1
 800efde:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efe8:	7efb      	ldrb	r3, [r7, #27]
 800efea:	e1be      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2203      	movs	r2, #3
 800eff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	88fa      	ldrh	r2, [r7, #6]
 800f006:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	88fa      	ldrh	r2, [r7, #6]
 800f00e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f03c:	d108      	bne.n	800f050 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	e009      	b.n	800f064 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f062:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	4b96      	ldr	r3, [pc, #600]	; (800f2c4 <HAL_SPI_Transmit+0x348>)
 800f06c:	4013      	ands	r3, r2
 800f06e:	88f9      	ldrh	r1, [r7, #6]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	6812      	ldr	r2, [r2, #0]
 800f074:	430b      	orrs	r3, r1
 800f076:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f042 0201 	orr.w	r2, r2, #1
 800f086:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f090:	d107      	bne.n	800f0a2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	2b0f      	cmp	r3, #15
 800f0a8:	d947      	bls.n	800f13a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f0aa:	e03f      	b.n	800f12c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	695b      	ldr	r3, [r3, #20]
 800f0b2:	f003 0302 	and.w	r3, r3, #2
 800f0b6:	2b02      	cmp	r3, #2
 800f0b8:	d114      	bne.n	800f0e4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	6812      	ldr	r2, [r2, #0]
 800f0c4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0ca:	1d1a      	adds	r2, r3, #4
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f0e2:	e023      	b.n	800f12c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0e4:	f7f5 fb04 	bl	80046f0 <HAL_GetTick>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d803      	bhi.n	800f0fc <HAL_SPI_Transmit+0x180>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fa:	d102      	bne.n	800f102 <HAL_SPI_Transmit+0x186>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d114      	bne.n	800f12c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f000 fac6 	bl	800f694 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f116:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2201      	movs	r2, #1
 800f124:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f128:	2303      	movs	r3, #3
 800f12a:	e11e      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f132:	b29b      	uxth	r3, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1b9      	bne.n	800f0ac <HAL_SPI_Transmit+0x130>
 800f138:	e0f1      	b.n	800f31e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	2b07      	cmp	r3, #7
 800f140:	f240 80e6 	bls.w	800f310 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f144:	e05d      	b.n	800f202 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	f003 0302 	and.w	r3, r3, #2
 800f150:	2b02      	cmp	r3, #2
 800f152:	d132      	bne.n	800f1ba <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d918      	bls.n	800f192 <HAL_SPI_Transmit+0x216>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f164:	2b00      	cmp	r3, #0
 800f166:	d014      	beq.n	800f192 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6812      	ldr	r2, [r2, #0]
 800f172:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f178:	1d1a      	adds	r2, r3, #4
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f184:	b29b      	uxth	r3, r3
 800f186:	3b02      	subs	r3, #2
 800f188:	b29a      	uxth	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f190:	e037      	b.n	800f202 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f196:	881a      	ldrh	r2, [r3, #0]
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1a0:	1c9a      	adds	r2, r3, #2
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f1b8:	e023      	b.n	800f202 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1ba:	f7f5 fa99 	bl	80046f0 <HAL_GetTick>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	683a      	ldr	r2, [r7, #0]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d803      	bhi.n	800f1d2 <HAL_SPI_Transmit+0x256>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d0:	d102      	bne.n	800f1d8 <HAL_SPI_Transmit+0x25c>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d114      	bne.n	800f202 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f000 fa5b 	bl	800f694 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e0b3      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f208:	b29b      	uxth	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d19b      	bne.n	800f146 <HAL_SPI_Transmit+0x1ca>
 800f20e:	e086      	b.n	800f31e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	f003 0302 	and.w	r3, r3, #2
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	d154      	bne.n	800f2c8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f224:	b29b      	uxth	r3, r3
 800f226:	2b03      	cmp	r3, #3
 800f228:	d918      	bls.n	800f25c <HAL_SPI_Transmit+0x2e0>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f22e:	2b40      	cmp	r3, #64	; 0x40
 800f230:	d914      	bls.n	800f25c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	6812      	ldr	r2, [r2, #0]
 800f23c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f242:	1d1a      	adds	r2, r3, #4
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f24e:	b29b      	uxth	r3, r3
 800f250:	3b04      	subs	r3, #4
 800f252:	b29a      	uxth	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f25a:	e059      	b.n	800f310 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f262:	b29b      	uxth	r3, r3
 800f264:	2b01      	cmp	r3, #1
 800f266:	d917      	bls.n	800f298 <HAL_SPI_Transmit+0x31c>
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d013      	beq.n	800f298 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f274:	881a      	ldrh	r2, [r3, #0]
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f27e:	1c9a      	adds	r2, r3, #2
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	3b02      	subs	r3, #2
 800f28e:	b29a      	uxth	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f296:	e03b      	b.n	800f310 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	3320      	adds	r3, #32
 800f2a2:	7812      	ldrb	r2, [r2, #0]
 800f2a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f2c2:	e025      	b.n	800f310 <HAL_SPI_Transmit+0x394>
 800f2c4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2c8:	f7f5 fa12 	bl	80046f0 <HAL_GetTick>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d803      	bhi.n	800f2e0 <HAL_SPI_Transmit+0x364>
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2de:	d102      	bne.n	800f2e6 <HAL_SPI_Transmit+0x36a>
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d114      	bne.n	800f310 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f000 f9d4 	bl	800f694 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f30c:	2303      	movs	r3, #3
 800f30e:	e02c      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f316:	b29b      	uxth	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f47f af79 	bne.w	800f210 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2200      	movs	r2, #0
 800f326:	2108      	movs	r1, #8
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f000 fa53 	bl	800f7d4 <SPI_WaitOnFlagUntilTimeout>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d007      	beq.n	800f344 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f33a:	f043 0220 	orr.w	r2, r3, #32
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 f9a5 	bl	800f694 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2201      	movs	r2, #1
 800f356:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	e000      	b.n	800f36a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f368:	7efb      	ldrb	r3, [r7, #27]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3720      	adds	r7, #32
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop

0800f374 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b088      	sub	sp, #32
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	603b      	str	r3, [r7, #0]
 800f380:	4613      	mov	r3, r2
 800f382:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f384:	2300      	movs	r3, #0
 800f386:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3330      	adds	r3, #48	; 0x30
 800f38e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f396:	2b01      	cmp	r3, #1
 800f398:	d101      	bne.n	800f39e <HAL_SPI_Receive+0x2a>
 800f39a:	2302      	movs	r3, #2
 800f39c:	e173      	b.n	800f686 <HAL_SPI_Receive+0x312>
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3a6:	f7f5 f9a3 	bl	80046f0 <HAL_GetTick>
 800f3aa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d007      	beq.n	800f3c8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3c4:	7ffb      	ldrb	r3, [r7, #31]
 800f3c6:	e15e      	b.n	800f686 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d002      	beq.n	800f3d4 <HAL_SPI_Receive+0x60>
 800f3ce:	88fb      	ldrh	r3, [r7, #6]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d107      	bne.n	800f3e4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3e0:	7ffb      	ldrb	r3, [r7, #31]
 800f3e2:	e150      	b.n	800f686 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2204      	movs	r2, #4
 800f3e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	88fa      	ldrh	r2, [r7, #6]
 800f3fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	88fa      	ldrh	r2, [r7, #6]
 800f406:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2200      	movs	r2, #0
 800f40e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2200      	movs	r2, #0
 800f414:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f434:	d108      	bne.n	800f448 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f444:	601a      	str	r2, [r3, #0]
 800f446:	e009      	b.n	800f45c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f45a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	685a      	ldr	r2, [r3, #4]
 800f462:	4b8b      	ldr	r3, [pc, #556]	; (800f690 <HAL_SPI_Receive+0x31c>)
 800f464:	4013      	ands	r3, r2
 800f466:	88f9      	ldrh	r1, [r7, #6]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	6812      	ldr	r2, [r2, #0]
 800f46c:	430b      	orrs	r3, r1
 800f46e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0201 	orr.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f488:	d107      	bne.n	800f49a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f498:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	2b0f      	cmp	r3, #15
 800f4a0:	d948      	bls.n	800f534 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f4a2:	e040      	b.n	800f526 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	695a      	ldr	r2, [r3, #20]
 800f4aa:	f248 0308 	movw	r3, #32776	; 0x8008
 800f4ae:	4013      	ands	r3, r2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d014      	beq.n	800f4de <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f4be:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4c4:	1d1a      	adds	r2, r3, #4
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f4dc:	e023      	b.n	800f526 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4de:	f7f5 f907 	bl	80046f0 <HAL_GetTick>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	1ad3      	subs	r3, r2, r3
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d803      	bhi.n	800f4f6 <HAL_SPI_Receive+0x182>
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f4:	d102      	bne.n	800f4fc <HAL_SPI_Receive+0x188>
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d114      	bne.n	800f526 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f000 f8c9 	bl	800f694 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2201      	movs	r2, #1
 800f51e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f522:	2303      	movs	r3, #3
 800f524:	e0af      	b.n	800f686 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1b8      	bne.n	800f4a4 <HAL_SPI_Receive+0x130>
 800f532:	e095      	b.n	800f660 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	2b07      	cmp	r3, #7
 800f53a:	f240 808b 	bls.w	800f654 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f53e:	e03f      	b.n	800f5c0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	695b      	ldr	r3, [r3, #20]
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d114      	bne.n	800f578 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f552:	69ba      	ldr	r2, [r7, #24]
 800f554:	8812      	ldrh	r2, [r2, #0]
 800f556:	b292      	uxth	r2, r2
 800f558:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f55e:	1c9a      	adds	r2, r3, #2
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	3b01      	subs	r3, #1
 800f56e:	b29a      	uxth	r2, r3
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f576:	e023      	b.n	800f5c0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f578:	f7f5 f8ba 	bl	80046f0 <HAL_GetTick>
 800f57c:	4602      	mov	r2, r0
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	429a      	cmp	r2, r3
 800f586:	d803      	bhi.n	800f590 <HAL_SPI_Receive+0x21c>
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f58e:	d102      	bne.n	800f596 <HAL_SPI_Receive+0x222>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d114      	bne.n	800f5c0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f000 f87c 	bl	800f694 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e062      	b.n	800f686 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1b9      	bne.n	800f540 <HAL_SPI_Receive+0x1cc>
 800f5cc:	e048      	b.n	800f660 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d117      	bne.n	800f60c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5e8:	7812      	ldrb	r2, [r2, #0]
 800f5ea:	b2d2      	uxtb	r2, r2
 800f5ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5f2:	1c5a      	adds	r2, r3, #1
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	3b01      	subs	r3, #1
 800f602:	b29a      	uxth	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f60a:	e023      	b.n	800f654 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f60c:	f7f5 f870 	bl	80046f0 <HAL_GetTick>
 800f610:	4602      	mov	r2, r0
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d803      	bhi.n	800f624 <HAL_SPI_Receive+0x2b0>
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f622:	d102      	bne.n	800f62a <HAL_SPI_Receive+0x2b6>
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d114      	bne.n	800f654 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f000 f832 	bl	800f694 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2200      	movs	r2, #0
 800f634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f63e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2201      	movs	r2, #1
 800f64c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f650:	2303      	movs	r3, #3
 800f652:	e018      	b.n	800f686 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1b6      	bne.n	800f5ce <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 f817 	bl	800f694 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2201      	movs	r2, #1
 800f672:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f680:	2301      	movs	r3, #1
 800f682:	e000      	b.n	800f686 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f684:	7ffb      	ldrb	r3, [r7, #31]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	ffff0000 	.word	0xffff0000

0800f694 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	695b      	ldr	r3, [r3, #20]
 800f6a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	699a      	ldr	r2, [r3, #24]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f042 0208 	orr.w	r2, r2, #8
 800f6b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	699a      	ldr	r2, [r3, #24]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f042 0210 	orr.w	r2, r2, #16
 800f6c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f022 0201 	bic.w	r2, r2, #1
 800f6d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	6919      	ldr	r1, [r3, #16]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	4b3c      	ldr	r3, [pc, #240]	; (800f7d0 <SPI_CloseTransfer+0x13c>)
 800f6e0:	400b      	ands	r3, r1
 800f6e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	689a      	ldr	r2, [r3, #8]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f6f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b04      	cmp	r3, #4
 800f6fe:	d014      	beq.n	800f72a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f003 0320 	and.w	r3, r3, #32
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00f      	beq.n	800f72a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f710:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	699a      	ldr	r2, [r3, #24]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f042 0220 	orr.w	r2, r2, #32
 800f728:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f730:	b2db      	uxtb	r3, r3
 800f732:	2b03      	cmp	r3, #3
 800f734:	d014      	beq.n	800f760 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00f      	beq.n	800f760 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f746:	f043 0204 	orr.w	r2, r3, #4
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	699a      	ldr	r2, [r3, #24]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f75e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00f      	beq.n	800f78a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f770:	f043 0201 	orr.w	r2, r3, #1
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	699a      	ldr	r2, [r3, #24]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f788:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00f      	beq.n	800f7b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f79a:	f043 0208 	orr.w	r2, r3, #8
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f7b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f7c4:	bf00      	nop
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	fffffc90 	.word	0xfffffc90

0800f7d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f7e4:	e010      	b.n	800f808 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7e6:	f7f4 ff83 	bl	80046f0 <HAL_GetTick>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d803      	bhi.n	800f7fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fc:	d102      	bne.n	800f804 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d101      	bne.n	800f808 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f804:	2303      	movs	r3, #3
 800f806:	e00f      	b.n	800f828 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	695a      	ldr	r2, [r3, #20]
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	4013      	ands	r3, r2
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	429a      	cmp	r2, r3
 800f816:	bf0c      	ite	eq
 800f818:	2301      	moveq	r3, #1
 800f81a:	2300      	movne	r3, #0
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	461a      	mov	r2, r3
 800f820:	79fb      	ldrb	r3, [r7, #7]
 800f822:	429a      	cmp	r2, r3
 800f824:	d0df      	beq.n	800f7e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f826:	2300      	movs	r3, #0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f83c:	095b      	lsrs	r3, r3, #5
 800f83e:	3301      	adds	r3, #1
 800f840:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	3301      	adds	r3, #1
 800f848:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	3307      	adds	r3, #7
 800f84e:	08db      	lsrs	r3, r3, #3
 800f850:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	fb02 f303 	mul.w	r3, r2, r3
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr

0800f866 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b082      	sub	sp, #8
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f874:	2301      	movs	r3, #1
 800f876:	e049      	b.n	800f90c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d106      	bne.n	800f892 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f7f4 faf1 	bl	8003e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2202      	movs	r2, #2
 800f896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4610      	mov	r0, r2
 800f8a6:	f000 fc8d 	bl	80101c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2201      	movs	r2, #1
 800f906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b01      	cmp	r3, #1
 800f926:	d001      	beq.n	800f92c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	e056      	b.n	800f9da <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2202      	movs	r2, #2
 800f930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4a2b      	ldr	r2, [pc, #172]	; (800f9e8 <HAL_TIM_Base_Start+0xd4>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d02c      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f946:	d027      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a27      	ldr	r2, [pc, #156]	; (800f9ec <HAL_TIM_Base_Start+0xd8>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d022      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a26      	ldr	r2, [pc, #152]	; (800f9f0 <HAL_TIM_Base_Start+0xdc>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d01d      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a24      	ldr	r2, [pc, #144]	; (800f9f4 <HAL_TIM_Base_Start+0xe0>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d018      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a23      	ldr	r2, [pc, #140]	; (800f9f8 <HAL_TIM_Base_Start+0xe4>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d013      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a21      	ldr	r2, [pc, #132]	; (800f9fc <HAL_TIM_Base_Start+0xe8>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d00e      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a20      	ldr	r2, [pc, #128]	; (800fa00 <HAL_TIM_Base_Start+0xec>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d009      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a1e      	ldr	r2, [pc, #120]	; (800fa04 <HAL_TIM_Base_Start+0xf0>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d004      	beq.n	800f998 <HAL_TIM_Base_Start+0x84>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a1d      	ldr	r2, [pc, #116]	; (800fa08 <HAL_TIM_Base_Start+0xf4>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d115      	bne.n	800f9c4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	689a      	ldr	r2, [r3, #8]
 800f99e:	4b1b      	ldr	r3, [pc, #108]	; (800fa0c <HAL_TIM_Base_Start+0xf8>)
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b06      	cmp	r3, #6
 800f9a8:	d015      	beq.n	800f9d6 <HAL_TIM_Base_Start+0xc2>
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9b0:	d011      	beq.n	800f9d6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f042 0201 	orr.w	r2, r2, #1
 800f9c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9c2:	e008      	b.n	800f9d6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f042 0201 	orr.w	r2, r2, #1
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	e000      	b.n	800f9d8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	40010000 	.word	0x40010000
 800f9ec:	40000400 	.word	0x40000400
 800f9f0:	40000800 	.word	0x40000800
 800f9f4:	40000c00 	.word	0x40000c00
 800f9f8:	40010400 	.word	0x40010400
 800f9fc:	40001800 	.word	0x40001800
 800fa00:	40014000 	.word	0x40014000
 800fa04:	4000e000 	.word	0x4000e000
 800fa08:	4000e400 	.word	0x4000e400
 800fa0c:	00010007 	.word	0x00010007

0800fa10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d101      	bne.n	800fa22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e049      	b.n	800fab6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7f4 f886 	bl	8003b48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2202      	movs	r2, #2
 800fa40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3304      	adds	r3, #4
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4610      	mov	r0, r2
 800fa50:	f000 fbb8 	bl	80101c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2201      	movs	r2, #1
 800fa58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2201      	movs	r2, #1
 800fa68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2201      	movs	r2, #1
 800fa78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2201      	movs	r2, #1
 800fa98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2201      	movs	r2, #1
 800faa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d109      	bne.n	800fae4 <HAL_TIM_PWM_Start+0x24>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b01      	cmp	r3, #1
 800fada:	bf14      	ite	ne
 800fadc:	2301      	movne	r3, #1
 800fade:	2300      	moveq	r3, #0
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	e03c      	b.n	800fb5e <HAL_TIM_PWM_Start+0x9e>
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b04      	cmp	r3, #4
 800fae8:	d109      	bne.n	800fafe <HAL_TIM_PWM_Start+0x3e>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	bf14      	ite	ne
 800faf6:	2301      	movne	r3, #1
 800faf8:	2300      	moveq	r3, #0
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	e02f      	b.n	800fb5e <HAL_TIM_PWM_Start+0x9e>
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	2b08      	cmp	r3, #8
 800fb02:	d109      	bne.n	800fb18 <HAL_TIM_PWM_Start+0x58>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	bf14      	ite	ne
 800fb10:	2301      	movne	r3, #1
 800fb12:	2300      	moveq	r3, #0
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	e022      	b.n	800fb5e <HAL_TIM_PWM_Start+0x9e>
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2b0c      	cmp	r3, #12
 800fb1c:	d109      	bne.n	800fb32 <HAL_TIM_PWM_Start+0x72>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	bf14      	ite	ne
 800fb2a:	2301      	movne	r3, #1
 800fb2c:	2300      	moveq	r3, #0
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	e015      	b.n	800fb5e <HAL_TIM_PWM_Start+0x9e>
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	2b10      	cmp	r3, #16
 800fb36:	d109      	bne.n	800fb4c <HAL_TIM_PWM_Start+0x8c>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	bf14      	ite	ne
 800fb44:	2301      	movne	r3, #1
 800fb46:	2300      	moveq	r3, #0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	e008      	b.n	800fb5e <HAL_TIM_PWM_Start+0x9e>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb52:	b2db      	uxtb	r3, r3
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	bf14      	ite	ne
 800fb58:	2301      	movne	r3, #1
 800fb5a:	2300      	moveq	r3, #0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	e0ab      	b.n	800fcbe <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d104      	bne.n	800fb76 <HAL_TIM_PWM_Start+0xb6>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2202      	movs	r2, #2
 800fb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb74:	e023      	b.n	800fbbe <HAL_TIM_PWM_Start+0xfe>
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2b04      	cmp	r3, #4
 800fb7a:	d104      	bne.n	800fb86 <HAL_TIM_PWM_Start+0xc6>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2202      	movs	r2, #2
 800fb80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb84:	e01b      	b.n	800fbbe <HAL_TIM_PWM_Start+0xfe>
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	2b08      	cmp	r3, #8
 800fb8a:	d104      	bne.n	800fb96 <HAL_TIM_PWM_Start+0xd6>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb94:	e013      	b.n	800fbbe <HAL_TIM_PWM_Start+0xfe>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b0c      	cmp	r3, #12
 800fb9a:	d104      	bne.n	800fba6 <HAL_TIM_PWM_Start+0xe6>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2202      	movs	r2, #2
 800fba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fba4:	e00b      	b.n	800fbbe <HAL_TIM_PWM_Start+0xfe>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2b10      	cmp	r3, #16
 800fbaa:	d104      	bne.n	800fbb6 <HAL_TIM_PWM_Start+0xf6>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2202      	movs	r2, #2
 800fbb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbb4:	e003      	b.n	800fbbe <HAL_TIM_PWM_Start+0xfe>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2202      	movs	r2, #2
 800fbba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	6839      	ldr	r1, [r7, #0]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f000 fe78 	bl	80108bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a3d      	ldr	r2, [pc, #244]	; (800fcc8 <HAL_TIM_PWM_Start+0x208>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d013      	beq.n	800fbfe <HAL_TIM_PWM_Start+0x13e>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a3c      	ldr	r2, [pc, #240]	; (800fccc <HAL_TIM_PWM_Start+0x20c>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d00e      	beq.n	800fbfe <HAL_TIM_PWM_Start+0x13e>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a3a      	ldr	r2, [pc, #232]	; (800fcd0 <HAL_TIM_PWM_Start+0x210>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d009      	beq.n	800fbfe <HAL_TIM_PWM_Start+0x13e>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a39      	ldr	r2, [pc, #228]	; (800fcd4 <HAL_TIM_PWM_Start+0x214>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d004      	beq.n	800fbfe <HAL_TIM_PWM_Start+0x13e>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a37      	ldr	r2, [pc, #220]	; (800fcd8 <HAL_TIM_PWM_Start+0x218>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d101      	bne.n	800fc02 <HAL_TIM_PWM_Start+0x142>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	e000      	b.n	800fc04 <HAL_TIM_PWM_Start+0x144>
 800fc02:	2300      	movs	r3, #0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d007      	beq.n	800fc18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fc16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a2a      	ldr	r2, [pc, #168]	; (800fcc8 <HAL_TIM_PWM_Start+0x208>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d02c      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc2a:	d027      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a2a      	ldr	r2, [pc, #168]	; (800fcdc <HAL_TIM_PWM_Start+0x21c>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d022      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a29      	ldr	r2, [pc, #164]	; (800fce0 <HAL_TIM_PWM_Start+0x220>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d01d      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a27      	ldr	r2, [pc, #156]	; (800fce4 <HAL_TIM_PWM_Start+0x224>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d018      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a1f      	ldr	r2, [pc, #124]	; (800fccc <HAL_TIM_PWM_Start+0x20c>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d013      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a23      	ldr	r2, [pc, #140]	; (800fce8 <HAL_TIM_PWM_Start+0x228>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d00e      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a1b      	ldr	r2, [pc, #108]	; (800fcd0 <HAL_TIM_PWM_Start+0x210>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d009      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a1f      	ldr	r2, [pc, #124]	; (800fcec <HAL_TIM_PWM_Start+0x22c>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d004      	beq.n	800fc7c <HAL_TIM_PWM_Start+0x1bc>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a1e      	ldr	r2, [pc, #120]	; (800fcf0 <HAL_TIM_PWM_Start+0x230>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d115      	bne.n	800fca8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	689a      	ldr	r2, [r3, #8]
 800fc82:	4b1c      	ldr	r3, [pc, #112]	; (800fcf4 <HAL_TIM_PWM_Start+0x234>)
 800fc84:	4013      	ands	r3, r2
 800fc86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b06      	cmp	r3, #6
 800fc8c:	d015      	beq.n	800fcba <HAL_TIM_PWM_Start+0x1fa>
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc94:	d011      	beq.n	800fcba <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f042 0201 	orr.w	r2, r2, #1
 800fca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fca6:	e008      	b.n	800fcba <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f042 0201 	orr.w	r2, r2, #1
 800fcb6:	601a      	str	r2, [r3, #0]
 800fcb8:	e000      	b.n	800fcbc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fcbc:	2300      	movs	r3, #0
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	40010000 	.word	0x40010000
 800fccc:	40010400 	.word	0x40010400
 800fcd0:	40014000 	.word	0x40014000
 800fcd4:	40014400 	.word	0x40014400
 800fcd8:	40014800 	.word	0x40014800
 800fcdc:	40000400 	.word	0x40000400
 800fce0:	40000800 	.word	0x40000800
 800fce4:	40000c00 	.word	0x40000c00
 800fce8:	40001800 	.word	0x40001800
 800fcec:	4000e000 	.word	0x4000e000
 800fcf0:	4000e400 	.word	0x4000e400
 800fcf4:	00010007 	.word	0x00010007

0800fcf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	f003 0302 	and.w	r3, r3, #2
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	d122      	bne.n	800fd54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	f003 0302 	and.w	r3, r3, #2
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	d11b      	bne.n	800fd54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f06f 0202 	mvn.w	r2, #2
 800fd24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	699b      	ldr	r3, [r3, #24]
 800fd32:	f003 0303 	and.w	r3, r3, #3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d003      	beq.n	800fd42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 fa24 	bl	8010188 <HAL_TIM_IC_CaptureCallback>
 800fd40:	e005      	b.n	800fd4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fa16 	bl	8010174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 fa27 	bl	801019c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	f003 0304 	and.w	r3, r3, #4
 800fd5e:	2b04      	cmp	r3, #4
 800fd60:	d122      	bne.n	800fda8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	f003 0304 	and.w	r3, r3, #4
 800fd6c:	2b04      	cmp	r3, #4
 800fd6e:	d11b      	bne.n	800fda8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f06f 0204 	mvn.w	r2, #4
 800fd78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2202      	movs	r2, #2
 800fd7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	699b      	ldr	r3, [r3, #24]
 800fd86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f9fa 	bl	8010188 <HAL_TIM_IC_CaptureCallback>
 800fd94:	e005      	b.n	800fda2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f9ec 	bl	8010174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 f9fd 	bl	801019c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	f003 0308 	and.w	r3, r3, #8
 800fdb2:	2b08      	cmp	r3, #8
 800fdb4:	d122      	bne.n	800fdfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f003 0308 	and.w	r3, r3, #8
 800fdc0:	2b08      	cmp	r3, #8
 800fdc2:	d11b      	bne.n	800fdfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f06f 0208 	mvn.w	r2, #8
 800fdcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2204      	movs	r2, #4
 800fdd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	f003 0303 	and.w	r3, r3, #3
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f9d0 	bl	8010188 <HAL_TIM_IC_CaptureCallback>
 800fde8:	e005      	b.n	800fdf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f9c2 	bl	8010174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 f9d3 	bl	801019c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	691b      	ldr	r3, [r3, #16]
 800fe02:	f003 0310 	and.w	r3, r3, #16
 800fe06:	2b10      	cmp	r3, #16
 800fe08:	d122      	bne.n	800fe50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	f003 0310 	and.w	r3, r3, #16
 800fe14:	2b10      	cmp	r3, #16
 800fe16:	d11b      	bne.n	800fe50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f06f 0210 	mvn.w	r2, #16
 800fe20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2208      	movs	r2, #8
 800fe26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d003      	beq.n	800fe3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 f9a6 	bl	8010188 <HAL_TIM_IC_CaptureCallback>
 800fe3c:	e005      	b.n	800fe4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f998 	bl	8010174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 f9a9 	bl	801019c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d10e      	bne.n	800fe7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	f003 0301 	and.w	r3, r3, #1
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d107      	bne.n	800fe7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f06f 0201 	mvn.w	r2, #1
 800fe74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 f972 	bl	8010160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe86:	2b80      	cmp	r3, #128	; 0x80
 800fe88:	d10e      	bne.n	800fea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe94:	2b80      	cmp	r3, #128	; 0x80
 800fe96:	d107      	bne.n	800fea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fdd6 	bl	8010a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feb6:	d10e      	bne.n	800fed6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fec2:	2b80      	cmp	r3, #128	; 0x80
 800fec4:	d107      	bne.n	800fed6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 fdc9 	bl	8010a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fee0:	2b40      	cmp	r3, #64	; 0x40
 800fee2:	d10e      	bne.n	800ff02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feee:	2b40      	cmp	r3, #64	; 0x40
 800fef0:	d107      	bne.n	800ff02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f957 	bl	80101b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	f003 0320 	and.w	r3, r3, #32
 800ff0c:	2b20      	cmp	r3, #32
 800ff0e:	d10e      	bne.n	800ff2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	f003 0320 	and.w	r3, r3, #32
 800ff1a:	2b20      	cmp	r3, #32
 800ff1c:	d107      	bne.n	800ff2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f06f 0220 	mvn.w	r2, #32
 800ff26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 fd89 	bl	8010a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ff2e:	bf00      	nop
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
	...

0800ff38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff44:	2300      	movs	r3, #0
 800ff46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d101      	bne.n	800ff56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ff52:	2302      	movs	r3, #2
 800ff54:	e0ff      	b.n	8010156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2b14      	cmp	r3, #20
 800ff62:	f200 80f0 	bhi.w	8010146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ff66:	a201      	add	r2, pc, #4	; (adr r2, 800ff6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ff68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff6c:	0800ffc1 	.word	0x0800ffc1
 800ff70:	08010147 	.word	0x08010147
 800ff74:	08010147 	.word	0x08010147
 800ff78:	08010147 	.word	0x08010147
 800ff7c:	08010001 	.word	0x08010001
 800ff80:	08010147 	.word	0x08010147
 800ff84:	08010147 	.word	0x08010147
 800ff88:	08010147 	.word	0x08010147
 800ff8c:	08010043 	.word	0x08010043
 800ff90:	08010147 	.word	0x08010147
 800ff94:	08010147 	.word	0x08010147
 800ff98:	08010147 	.word	0x08010147
 800ff9c:	08010083 	.word	0x08010083
 800ffa0:	08010147 	.word	0x08010147
 800ffa4:	08010147 	.word	0x08010147
 800ffa8:	08010147 	.word	0x08010147
 800ffac:	080100c5 	.word	0x080100c5
 800ffb0:	08010147 	.word	0x08010147
 800ffb4:	08010147 	.word	0x08010147
 800ffb8:	08010147 	.word	0x08010147
 800ffbc:	08010105 	.word	0x08010105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68b9      	ldr	r1, [r7, #8]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f000 f9a2 	bl	8010310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	699a      	ldr	r2, [r3, #24]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f042 0208 	orr.w	r2, r2, #8
 800ffda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	699a      	ldr	r2, [r3, #24]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f022 0204 	bic.w	r2, r2, #4
 800ffea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6999      	ldr	r1, [r3, #24]
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	691a      	ldr	r2, [r3, #16]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	430a      	orrs	r2, r1
 800fffc:	619a      	str	r2, [r3, #24]
      break;
 800fffe:	e0a5      	b.n	801014c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	68b9      	ldr	r1, [r7, #8]
 8010006:	4618      	mov	r0, r3
 8010008:	f000 fa12 	bl	8010430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	699a      	ldr	r2, [r3, #24]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801001a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	699a      	ldr	r2, [r3, #24]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801002a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	6999      	ldr	r1, [r3, #24]
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	691b      	ldr	r3, [r3, #16]
 8010036:	021a      	lsls	r2, r3, #8
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	430a      	orrs	r2, r1
 801003e:	619a      	str	r2, [r3, #24]
      break;
 8010040:	e084      	b.n	801014c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	68b9      	ldr	r1, [r7, #8]
 8010048:	4618      	mov	r0, r3
 801004a:	f000 fa7b 	bl	8010544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	69da      	ldr	r2, [r3, #28]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f042 0208 	orr.w	r2, r2, #8
 801005c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	69da      	ldr	r2, [r3, #28]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f022 0204 	bic.w	r2, r2, #4
 801006c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	69d9      	ldr	r1, [r3, #28]
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	691a      	ldr	r2, [r3, #16]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	430a      	orrs	r2, r1
 801007e:	61da      	str	r2, [r3, #28]
      break;
 8010080:	e064      	b.n	801014c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	68b9      	ldr	r1, [r7, #8]
 8010088:	4618      	mov	r0, r3
 801008a:	f000 fae3 	bl	8010654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	69da      	ldr	r2, [r3, #28]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801009c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	69da      	ldr	r2, [r3, #28]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	69d9      	ldr	r1, [r3, #28]
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	021a      	lsls	r2, r3, #8
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	430a      	orrs	r2, r1
 80100c0:	61da      	str	r2, [r3, #28]
      break;
 80100c2:	e043      	b.n	801014c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68b9      	ldr	r1, [r7, #8]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fb2c 	bl	8010728 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f042 0208 	orr.w	r2, r2, #8
 80100de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f022 0204 	bic.w	r2, r2, #4
 80100ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	691a      	ldr	r2, [r3, #16]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	430a      	orrs	r2, r1
 8010100:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010102:	e023      	b.n	801014c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	68b9      	ldr	r1, [r7, #8]
 801010a:	4618      	mov	r0, r3
 801010c:	f000 fb70 	bl	80107f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801011e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801012e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	021a      	lsls	r2, r3, #8
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	430a      	orrs	r2, r1
 8010142:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010144:	e002      	b.n	801014c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	75fb      	strb	r3, [r7, #23]
      break;
 801014a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010154:	7dfb      	ldrb	r3, [r7, #23]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop

08010160 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010168:	bf00      	nop
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010190:	bf00      	nop
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80101a4:	bf00      	nop
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80101b8:	bf00      	nop
 80101ba:	370c      	adds	r7, #12
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr

080101c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4a44      	ldr	r2, [pc, #272]	; (80102e8 <TIM_Base_SetConfig+0x124>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d013      	beq.n	8010204 <TIM_Base_SetConfig+0x40>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101e2:	d00f      	beq.n	8010204 <TIM_Base_SetConfig+0x40>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4a41      	ldr	r2, [pc, #260]	; (80102ec <TIM_Base_SetConfig+0x128>)
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d00b      	beq.n	8010204 <TIM_Base_SetConfig+0x40>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	4a40      	ldr	r2, [pc, #256]	; (80102f0 <TIM_Base_SetConfig+0x12c>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d007      	beq.n	8010204 <TIM_Base_SetConfig+0x40>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a3f      	ldr	r2, [pc, #252]	; (80102f4 <TIM_Base_SetConfig+0x130>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d003      	beq.n	8010204 <TIM_Base_SetConfig+0x40>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a3e      	ldr	r2, [pc, #248]	; (80102f8 <TIM_Base_SetConfig+0x134>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d108      	bne.n	8010216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801020a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	4313      	orrs	r3, r2
 8010214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a33      	ldr	r2, [pc, #204]	; (80102e8 <TIM_Base_SetConfig+0x124>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d027      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010224:	d023      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4a30      	ldr	r2, [pc, #192]	; (80102ec <TIM_Base_SetConfig+0x128>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d01f      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4a2f      	ldr	r2, [pc, #188]	; (80102f0 <TIM_Base_SetConfig+0x12c>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d01b      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4a2e      	ldr	r2, [pc, #184]	; (80102f4 <TIM_Base_SetConfig+0x130>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d017      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4a2d      	ldr	r2, [pc, #180]	; (80102f8 <TIM_Base_SetConfig+0x134>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d013      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4a2c      	ldr	r2, [pc, #176]	; (80102fc <TIM_Base_SetConfig+0x138>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d00f      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4a2b      	ldr	r2, [pc, #172]	; (8010300 <TIM_Base_SetConfig+0x13c>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d00b      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a2a      	ldr	r2, [pc, #168]	; (8010304 <TIM_Base_SetConfig+0x140>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d007      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a29      	ldr	r2, [pc, #164]	; (8010308 <TIM_Base_SetConfig+0x144>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d003      	beq.n	801026e <TIM_Base_SetConfig+0xaa>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a28      	ldr	r2, [pc, #160]	; (801030c <TIM_Base_SetConfig+0x148>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d108      	bne.n	8010280 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	68fa      	ldr	r2, [r7, #12]
 801027c:	4313      	orrs	r3, r2
 801027e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	695b      	ldr	r3, [r3, #20]
 801028a:	4313      	orrs	r3, r2
 801028c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	689a      	ldr	r2, [r3, #8]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a10      	ldr	r2, [pc, #64]	; (80102e8 <TIM_Base_SetConfig+0x124>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d00f      	beq.n	80102cc <TIM_Base_SetConfig+0x108>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4a12      	ldr	r2, [pc, #72]	; (80102f8 <TIM_Base_SetConfig+0x134>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d00b      	beq.n	80102cc <TIM_Base_SetConfig+0x108>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4a11      	ldr	r2, [pc, #68]	; (80102fc <TIM_Base_SetConfig+0x138>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d007      	beq.n	80102cc <TIM_Base_SetConfig+0x108>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4a10      	ldr	r2, [pc, #64]	; (8010300 <TIM_Base_SetConfig+0x13c>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d003      	beq.n	80102cc <TIM_Base_SetConfig+0x108>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	4a0f      	ldr	r2, [pc, #60]	; (8010304 <TIM_Base_SetConfig+0x140>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d103      	bne.n	80102d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	691a      	ldr	r2, [r3, #16]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	615a      	str	r2, [r3, #20]
}
 80102da:	bf00      	nop
 80102dc:	3714      	adds	r7, #20
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	40010000 	.word	0x40010000
 80102ec:	40000400 	.word	0x40000400
 80102f0:	40000800 	.word	0x40000800
 80102f4:	40000c00 	.word	0x40000c00
 80102f8:	40010400 	.word	0x40010400
 80102fc:	40014000 	.word	0x40014000
 8010300:	40014400 	.word	0x40014400
 8010304:	40014800 	.word	0x40014800
 8010308:	4000e000 	.word	0x4000e000
 801030c:	4000e400 	.word	0x4000e400

08010310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010310:	b480      	push	{r7}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6a1b      	ldr	r3, [r3, #32]
 801031e:	f023 0201 	bic.w	r2, r3, #1
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	699b      	ldr	r3, [r3, #24]
 8010336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	4b37      	ldr	r3, [pc, #220]	; (8010418 <TIM_OC1_SetConfig+0x108>)
 801033c:	4013      	ands	r3, r2
 801033e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f023 0303 	bic.w	r3, r3, #3
 8010346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	4313      	orrs	r3, r2
 8010350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	f023 0302 	bic.w	r3, r3, #2
 8010358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	697a      	ldr	r2, [r7, #20]
 8010360:	4313      	orrs	r3, r2
 8010362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a2d      	ldr	r2, [pc, #180]	; (801041c <TIM_OC1_SetConfig+0x10c>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d00f      	beq.n	801038c <TIM_OC1_SetConfig+0x7c>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a2c      	ldr	r2, [pc, #176]	; (8010420 <TIM_OC1_SetConfig+0x110>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d00b      	beq.n	801038c <TIM_OC1_SetConfig+0x7c>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	4a2b      	ldr	r2, [pc, #172]	; (8010424 <TIM_OC1_SetConfig+0x114>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d007      	beq.n	801038c <TIM_OC1_SetConfig+0x7c>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a2a      	ldr	r2, [pc, #168]	; (8010428 <TIM_OC1_SetConfig+0x118>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d003      	beq.n	801038c <TIM_OC1_SetConfig+0x7c>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a29      	ldr	r2, [pc, #164]	; (801042c <TIM_OC1_SetConfig+0x11c>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d10c      	bne.n	80103a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	f023 0308 	bic.w	r3, r3, #8
 8010392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	697a      	ldr	r2, [r7, #20]
 801039a:	4313      	orrs	r3, r2
 801039c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	f023 0304 	bic.w	r3, r3, #4
 80103a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4a1c      	ldr	r2, [pc, #112]	; (801041c <TIM_OC1_SetConfig+0x10c>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d00f      	beq.n	80103ce <TIM_OC1_SetConfig+0xbe>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4a1b      	ldr	r2, [pc, #108]	; (8010420 <TIM_OC1_SetConfig+0x110>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d00b      	beq.n	80103ce <TIM_OC1_SetConfig+0xbe>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4a1a      	ldr	r2, [pc, #104]	; (8010424 <TIM_OC1_SetConfig+0x114>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d007      	beq.n	80103ce <TIM_OC1_SetConfig+0xbe>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a19      	ldr	r2, [pc, #100]	; (8010428 <TIM_OC1_SetConfig+0x118>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d003      	beq.n	80103ce <TIM_OC1_SetConfig+0xbe>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a18      	ldr	r2, [pc, #96]	; (801042c <TIM_OC1_SetConfig+0x11c>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d111      	bne.n	80103f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	695b      	ldr	r3, [r3, #20]
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	4313      	orrs	r3, r2
 80103e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	699b      	ldr	r3, [r3, #24]
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	685a      	ldr	r2, [r3, #4]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	697a      	ldr	r2, [r7, #20]
 801040a:	621a      	str	r2, [r3, #32]
}
 801040c:	bf00      	nop
 801040e:	371c      	adds	r7, #28
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	fffeff8f 	.word	0xfffeff8f
 801041c:	40010000 	.word	0x40010000
 8010420:	40010400 	.word	0x40010400
 8010424:	40014000 	.word	0x40014000
 8010428:	40014400 	.word	0x40014400
 801042c:	40014800 	.word	0x40014800

08010430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010430:	b480      	push	{r7}
 8010432:	b087      	sub	sp, #28
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a1b      	ldr	r3, [r3, #32]
 801043e:	f023 0210 	bic.w	r2, r3, #16
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a1b      	ldr	r3, [r3, #32]
 801044a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	4b34      	ldr	r3, [pc, #208]	; (801052c <TIM_OC2_SetConfig+0xfc>)
 801045c:	4013      	ands	r3, r2
 801045e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	021b      	lsls	r3, r3, #8
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	4313      	orrs	r3, r2
 8010472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	f023 0320 	bic.w	r3, r3, #32
 801047a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	697a      	ldr	r2, [r7, #20]
 8010484:	4313      	orrs	r3, r2
 8010486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4a29      	ldr	r2, [pc, #164]	; (8010530 <TIM_OC2_SetConfig+0x100>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d003      	beq.n	8010498 <TIM_OC2_SetConfig+0x68>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	4a28      	ldr	r2, [pc, #160]	; (8010534 <TIM_OC2_SetConfig+0x104>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d10d      	bne.n	80104b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801049e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	011b      	lsls	r3, r3, #4
 80104a6:	697a      	ldr	r2, [r7, #20]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4a1e      	ldr	r2, [pc, #120]	; (8010530 <TIM_OC2_SetConfig+0x100>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d00f      	beq.n	80104dc <TIM_OC2_SetConfig+0xac>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	4a1d      	ldr	r2, [pc, #116]	; (8010534 <TIM_OC2_SetConfig+0x104>)
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d00b      	beq.n	80104dc <TIM_OC2_SetConfig+0xac>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4a1c      	ldr	r2, [pc, #112]	; (8010538 <TIM_OC2_SetConfig+0x108>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d007      	beq.n	80104dc <TIM_OC2_SetConfig+0xac>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	4a1b      	ldr	r2, [pc, #108]	; (801053c <TIM_OC2_SetConfig+0x10c>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d003      	beq.n	80104dc <TIM_OC2_SetConfig+0xac>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4a1a      	ldr	r2, [pc, #104]	; (8010540 <TIM_OC2_SetConfig+0x110>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d113      	bne.n	8010504 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	695b      	ldr	r3, [r3, #20]
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	693a      	ldr	r2, [r7, #16]
 80104f4:	4313      	orrs	r3, r2
 80104f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	4313      	orrs	r3, r2
 8010502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	685a      	ldr	r2, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	621a      	str	r2, [r3, #32]
}
 801051e:	bf00      	nop
 8010520:	371c      	adds	r7, #28
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop
 801052c:	feff8fff 	.word	0xfeff8fff
 8010530:	40010000 	.word	0x40010000
 8010534:	40010400 	.word	0x40010400
 8010538:	40014000 	.word	0x40014000
 801053c:	40014400 	.word	0x40014400
 8010540:	40014800 	.word	0x40014800

08010544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010544:	b480      	push	{r7}
 8010546:	b087      	sub	sp, #28
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a1b      	ldr	r3, [r3, #32]
 8010552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a1b      	ldr	r3, [r3, #32]
 801055e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	69db      	ldr	r3, [r3, #28]
 801056a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	4b33      	ldr	r3, [pc, #204]	; (801063c <TIM_OC3_SetConfig+0xf8>)
 8010570:	4013      	ands	r3, r2
 8010572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f023 0303 	bic.w	r3, r3, #3
 801057a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	4313      	orrs	r3, r2
 8010584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801058c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	689b      	ldr	r3, [r3, #8]
 8010592:	021b      	lsls	r3, r3, #8
 8010594:	697a      	ldr	r2, [r7, #20]
 8010596:	4313      	orrs	r3, r2
 8010598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4a28      	ldr	r2, [pc, #160]	; (8010640 <TIM_OC3_SetConfig+0xfc>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d003      	beq.n	80105aa <TIM_OC3_SetConfig+0x66>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4a27      	ldr	r2, [pc, #156]	; (8010644 <TIM_OC3_SetConfig+0x100>)
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d10d      	bne.n	80105c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	021b      	lsls	r3, r3, #8
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4a1d      	ldr	r2, [pc, #116]	; (8010640 <TIM_OC3_SetConfig+0xfc>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d00f      	beq.n	80105ee <TIM_OC3_SetConfig+0xaa>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4a1c      	ldr	r2, [pc, #112]	; (8010644 <TIM_OC3_SetConfig+0x100>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d00b      	beq.n	80105ee <TIM_OC3_SetConfig+0xaa>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4a1b      	ldr	r2, [pc, #108]	; (8010648 <TIM_OC3_SetConfig+0x104>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d007      	beq.n	80105ee <TIM_OC3_SetConfig+0xaa>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	4a1a      	ldr	r2, [pc, #104]	; (801064c <TIM_OC3_SetConfig+0x108>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d003      	beq.n	80105ee <TIM_OC3_SetConfig+0xaa>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4a19      	ldr	r2, [pc, #100]	; (8010650 <TIM_OC3_SetConfig+0x10c>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d113      	bne.n	8010616 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	695b      	ldr	r3, [r3, #20]
 8010602:	011b      	lsls	r3, r3, #4
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	4313      	orrs	r3, r2
 8010608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	011b      	lsls	r3, r3, #4
 8010610:	693a      	ldr	r2, [r7, #16]
 8010612:	4313      	orrs	r3, r2
 8010614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	693a      	ldr	r2, [r7, #16]
 801061a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	697a      	ldr	r2, [r7, #20]
 801062e:	621a      	str	r2, [r3, #32]
}
 8010630:	bf00      	nop
 8010632:	371c      	adds	r7, #28
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr
 801063c:	fffeff8f 	.word	0xfffeff8f
 8010640:	40010000 	.word	0x40010000
 8010644:	40010400 	.word	0x40010400
 8010648:	40014000 	.word	0x40014000
 801064c:	40014400 	.word	0x40014400
 8010650:	40014800 	.word	0x40014800

08010654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010654:	b480      	push	{r7}
 8010656:	b087      	sub	sp, #28
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a1b      	ldr	r3, [r3, #32]
 8010662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	69db      	ldr	r3, [r3, #28]
 801067a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	4b24      	ldr	r3, [pc, #144]	; (8010710 <TIM_OC4_SetConfig+0xbc>)
 8010680:	4013      	ands	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801068a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	021b      	lsls	r3, r3, #8
 8010692:	68fa      	ldr	r2, [r7, #12]
 8010694:	4313      	orrs	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801069e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	031b      	lsls	r3, r3, #12
 80106a6:	693a      	ldr	r2, [r7, #16]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4a19      	ldr	r2, [pc, #100]	; (8010714 <TIM_OC4_SetConfig+0xc0>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d00f      	beq.n	80106d4 <TIM_OC4_SetConfig+0x80>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4a18      	ldr	r2, [pc, #96]	; (8010718 <TIM_OC4_SetConfig+0xc4>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d00b      	beq.n	80106d4 <TIM_OC4_SetConfig+0x80>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4a17      	ldr	r2, [pc, #92]	; (801071c <TIM_OC4_SetConfig+0xc8>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d007      	beq.n	80106d4 <TIM_OC4_SetConfig+0x80>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4a16      	ldr	r2, [pc, #88]	; (8010720 <TIM_OC4_SetConfig+0xcc>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d003      	beq.n	80106d4 <TIM_OC4_SetConfig+0x80>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4a15      	ldr	r2, [pc, #84]	; (8010724 <TIM_OC4_SetConfig+0xd0>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d109      	bne.n	80106e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80106da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	695b      	ldr	r3, [r3, #20]
 80106e0:	019b      	lsls	r3, r3, #6
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	4313      	orrs	r3, r2
 80106e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	697a      	ldr	r2, [r7, #20]
 80106ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	685a      	ldr	r2, [r3, #4]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	621a      	str	r2, [r3, #32]
}
 8010702:	bf00      	nop
 8010704:	371c      	adds	r7, #28
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	feff8fff 	.word	0xfeff8fff
 8010714:	40010000 	.word	0x40010000
 8010718:	40010400 	.word	0x40010400
 801071c:	40014000 	.word	0x40014000
 8010720:	40014400 	.word	0x40014400
 8010724:	40014800 	.word	0x40014800

08010728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010728:	b480      	push	{r7}
 801072a:	b087      	sub	sp, #28
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6a1b      	ldr	r3, [r3, #32]
 8010736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a1b      	ldr	r3, [r3, #32]
 8010742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801074e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	4b21      	ldr	r3, [pc, #132]	; (80107d8 <TIM_OC5_SetConfig+0xb0>)
 8010754:	4013      	ands	r3, r2
 8010756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68fa      	ldr	r2, [r7, #12]
 801075e:	4313      	orrs	r3, r2
 8010760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010768:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	041b      	lsls	r3, r3, #16
 8010770:	693a      	ldr	r2, [r7, #16]
 8010772:	4313      	orrs	r3, r2
 8010774:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4a18      	ldr	r2, [pc, #96]	; (80107dc <TIM_OC5_SetConfig+0xb4>)
 801077a:	4293      	cmp	r3, r2
 801077c:	d00f      	beq.n	801079e <TIM_OC5_SetConfig+0x76>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4a17      	ldr	r2, [pc, #92]	; (80107e0 <TIM_OC5_SetConfig+0xb8>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d00b      	beq.n	801079e <TIM_OC5_SetConfig+0x76>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4a16      	ldr	r2, [pc, #88]	; (80107e4 <TIM_OC5_SetConfig+0xbc>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d007      	beq.n	801079e <TIM_OC5_SetConfig+0x76>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4a15      	ldr	r2, [pc, #84]	; (80107e8 <TIM_OC5_SetConfig+0xc0>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d003      	beq.n	801079e <TIM_OC5_SetConfig+0x76>
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	4a14      	ldr	r2, [pc, #80]	; (80107ec <TIM_OC5_SetConfig+0xc4>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d109      	bne.n	80107b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80107a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	695b      	ldr	r3, [r3, #20]
 80107aa:	021b      	lsls	r3, r3, #8
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	685a      	ldr	r2, [r3, #4]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	693a      	ldr	r2, [r7, #16]
 80107ca:	621a      	str	r2, [r3, #32]
}
 80107cc:	bf00      	nop
 80107ce:	371c      	adds	r7, #28
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr
 80107d8:	fffeff8f 	.word	0xfffeff8f
 80107dc:	40010000 	.word	0x40010000
 80107e0:	40010400 	.word	0x40010400
 80107e4:	40014000 	.word	0x40014000
 80107e8:	40014400 	.word	0x40014400
 80107ec:	40014800 	.word	0x40014800

080107f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b087      	sub	sp, #28
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6a1b      	ldr	r3, [r3, #32]
 801080a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	4b22      	ldr	r3, [pc, #136]	; (80108a4 <TIM_OC6_SetConfig+0xb4>)
 801081c:	4013      	ands	r3, r2
 801081e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	021b      	lsls	r3, r3, #8
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	4313      	orrs	r3, r2
 801082a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	051b      	lsls	r3, r3, #20
 801083a:	693a      	ldr	r2, [r7, #16]
 801083c:	4313      	orrs	r3, r2
 801083e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	4a19      	ldr	r2, [pc, #100]	; (80108a8 <TIM_OC6_SetConfig+0xb8>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d00f      	beq.n	8010868 <TIM_OC6_SetConfig+0x78>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	4a18      	ldr	r2, [pc, #96]	; (80108ac <TIM_OC6_SetConfig+0xbc>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d00b      	beq.n	8010868 <TIM_OC6_SetConfig+0x78>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	4a17      	ldr	r2, [pc, #92]	; (80108b0 <TIM_OC6_SetConfig+0xc0>)
 8010854:	4293      	cmp	r3, r2
 8010856:	d007      	beq.n	8010868 <TIM_OC6_SetConfig+0x78>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4a16      	ldr	r2, [pc, #88]	; (80108b4 <TIM_OC6_SetConfig+0xc4>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d003      	beq.n	8010868 <TIM_OC6_SetConfig+0x78>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	4a15      	ldr	r2, [pc, #84]	; (80108b8 <TIM_OC6_SetConfig+0xc8>)
 8010864:	4293      	cmp	r3, r2
 8010866:	d109      	bne.n	801087c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801086e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	695b      	ldr	r3, [r3, #20]
 8010874:	029b      	lsls	r3, r3, #10
 8010876:	697a      	ldr	r2, [r7, #20]
 8010878:	4313      	orrs	r3, r2
 801087a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	697a      	ldr	r2, [r7, #20]
 8010880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	68fa      	ldr	r2, [r7, #12]
 8010886:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	685a      	ldr	r2, [r3, #4]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	693a      	ldr	r2, [r7, #16]
 8010894:	621a      	str	r2, [r3, #32]
}
 8010896:	bf00      	nop
 8010898:	371c      	adds	r7, #28
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	feff8fff 	.word	0xfeff8fff
 80108a8:	40010000 	.word	0x40010000
 80108ac:	40010400 	.word	0x40010400
 80108b0:	40014000 	.word	0x40014000
 80108b4:	40014400 	.word	0x40014400
 80108b8:	40014800 	.word	0x40014800

080108bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80108bc:	b480      	push	{r7}
 80108be:	b087      	sub	sp, #28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	f003 031f 	and.w	r3, r3, #31
 80108ce:	2201      	movs	r2, #1
 80108d0:	fa02 f303 	lsl.w	r3, r2, r3
 80108d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6a1a      	ldr	r2, [r3, #32]
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	43db      	mvns	r3, r3
 80108de:	401a      	ands	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6a1a      	ldr	r2, [r3, #32]
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	f003 031f 	and.w	r3, r3, #31
 80108ee:	6879      	ldr	r1, [r7, #4]
 80108f0:	fa01 f303 	lsl.w	r3, r1, r3
 80108f4:	431a      	orrs	r2, r3
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	621a      	str	r2, [r3, #32]
}
 80108fa:	bf00      	nop
 80108fc:	371c      	adds	r7, #28
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
	...

08010908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010918:	2b01      	cmp	r3, #1
 801091a:	d101      	bne.n	8010920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801091c:	2302      	movs	r3, #2
 801091e:	e077      	b.n	8010a10 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2201      	movs	r2, #1
 8010924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2202      	movs	r2, #2
 801092c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a35      	ldr	r2, [pc, #212]	; (8010a1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d004      	beq.n	8010954 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a34      	ldr	r2, [pc, #208]	; (8010a20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d108      	bne.n	8010966 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801095a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	4313      	orrs	r3, r2
 8010964:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801096c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	4313      	orrs	r3, r2
 8010976:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a25      	ldr	r2, [pc, #148]	; (8010a1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d02c      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010992:	d027      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a22      	ldr	r2, [pc, #136]	; (8010a24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801099a:	4293      	cmp	r3, r2
 801099c:	d022      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	4a21      	ldr	r2, [pc, #132]	; (8010a28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d01d      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a1f      	ldr	r2, [pc, #124]	; (8010a2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d018      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4a1a      	ldr	r2, [pc, #104]	; (8010a20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d013      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a1b      	ldr	r2, [pc, #108]	; (8010a30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d00e      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	4a1a      	ldr	r2, [pc, #104]	; (8010a34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d009      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a18      	ldr	r2, [pc, #96]	; (8010a38 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d004      	beq.n	80109e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4a17      	ldr	r2, [pc, #92]	; (8010a3c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d10c      	bne.n	80109fe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2201      	movs	r2, #1
 8010a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3714      	adds	r7, #20
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr
 8010a1c:	40010000 	.word	0x40010000
 8010a20:	40010400 	.word	0x40010400
 8010a24:	40000400 	.word	0x40000400
 8010a28:	40000800 	.word	0x40000800
 8010a2c:	40000c00 	.word	0x40000c00
 8010a30:	40001800 	.word	0x40001800
 8010a34:	40014000 	.word	0x40014000
 8010a38:	4000e000 	.word	0x4000e000
 8010a3c:	4000e400 	.word	0x4000e400

08010a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a48:	bf00      	nop
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010a5c:	bf00      	nop
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010a70:	bf00      	nop
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d101      	bne.n	8010a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e042      	b.n	8010b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d106      	bne.n	8010aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7f3 fae5 	bl	8004070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2224      	movs	r2, #36	; 0x24
 8010aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f022 0201 	bic.w	r2, r2, #1
 8010abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f82c 	bl	8010b1c <UART_SetConfig>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d101      	bne.n	8010ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010aca:	2301      	movs	r3, #1
 8010acc:	e022      	b.n	8010b14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d002      	beq.n	8010adc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 fe8c 	bl	80117f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	685a      	ldr	r2, [r3, #4]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	689a      	ldr	r2, [r3, #8]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f042 0201 	orr.w	r2, r2, #1
 8010b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f000 ff13 	bl	8011938 <UART_CheckIdleState>
 8010b12:	4603      	mov	r3, r0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b20:	b092      	sub	sp, #72	; 0x48
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	689a      	ldr	r2, [r3, #8]
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	691b      	ldr	r3, [r3, #16]
 8010b34:	431a      	orrs	r2, r3
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	695b      	ldr	r3, [r3, #20]
 8010b3a:	431a      	orrs	r2, r3
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	69db      	ldr	r3, [r3, #28]
 8010b40:	4313      	orrs	r3, r2
 8010b42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	4bbe      	ldr	r3, [pc, #760]	; (8010e44 <UART_SetConfig+0x328>)
 8010b4c:	4013      	ands	r3, r2
 8010b4e:	697a      	ldr	r2, [r7, #20]
 8010b50:	6812      	ldr	r2, [r2, #0]
 8010b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b54:	430b      	orrs	r3, r1
 8010b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	68da      	ldr	r2, [r3, #12]
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	430a      	orrs	r2, r1
 8010b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	699b      	ldr	r3, [r3, #24]
 8010b72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4ab3      	ldr	r2, [pc, #716]	; (8010e48 <UART_SetConfig+0x32c>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d004      	beq.n	8010b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b84:	4313      	orrs	r3, r2
 8010b86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	689a      	ldr	r2, [r3, #8]
 8010b8e:	4baf      	ldr	r3, [pc, #700]	; (8010e4c <UART_SetConfig+0x330>)
 8010b90:	4013      	ands	r3, r2
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	6812      	ldr	r2, [r2, #0]
 8010b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b98:	430b      	orrs	r3, r1
 8010b9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba2:	f023 010f 	bic.w	r1, r3, #15
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	430a      	orrs	r2, r1
 8010bb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4aa6      	ldr	r2, [pc, #664]	; (8010e50 <UART_SetConfig+0x334>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d177      	bne.n	8010cac <UART_SetConfig+0x190>
 8010bbc:	4ba5      	ldr	r3, [pc, #660]	; (8010e54 <UART_SetConfig+0x338>)
 8010bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bc4:	2b28      	cmp	r3, #40	; 0x28
 8010bc6:	d86d      	bhi.n	8010ca4 <UART_SetConfig+0x188>
 8010bc8:	a201      	add	r2, pc, #4	; (adr r2, 8010bd0 <UART_SetConfig+0xb4>)
 8010bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bce:	bf00      	nop
 8010bd0:	08010c75 	.word	0x08010c75
 8010bd4:	08010ca5 	.word	0x08010ca5
 8010bd8:	08010ca5 	.word	0x08010ca5
 8010bdc:	08010ca5 	.word	0x08010ca5
 8010be0:	08010ca5 	.word	0x08010ca5
 8010be4:	08010ca5 	.word	0x08010ca5
 8010be8:	08010ca5 	.word	0x08010ca5
 8010bec:	08010ca5 	.word	0x08010ca5
 8010bf0:	08010c7d 	.word	0x08010c7d
 8010bf4:	08010ca5 	.word	0x08010ca5
 8010bf8:	08010ca5 	.word	0x08010ca5
 8010bfc:	08010ca5 	.word	0x08010ca5
 8010c00:	08010ca5 	.word	0x08010ca5
 8010c04:	08010ca5 	.word	0x08010ca5
 8010c08:	08010ca5 	.word	0x08010ca5
 8010c0c:	08010ca5 	.word	0x08010ca5
 8010c10:	08010c85 	.word	0x08010c85
 8010c14:	08010ca5 	.word	0x08010ca5
 8010c18:	08010ca5 	.word	0x08010ca5
 8010c1c:	08010ca5 	.word	0x08010ca5
 8010c20:	08010ca5 	.word	0x08010ca5
 8010c24:	08010ca5 	.word	0x08010ca5
 8010c28:	08010ca5 	.word	0x08010ca5
 8010c2c:	08010ca5 	.word	0x08010ca5
 8010c30:	08010c8d 	.word	0x08010c8d
 8010c34:	08010ca5 	.word	0x08010ca5
 8010c38:	08010ca5 	.word	0x08010ca5
 8010c3c:	08010ca5 	.word	0x08010ca5
 8010c40:	08010ca5 	.word	0x08010ca5
 8010c44:	08010ca5 	.word	0x08010ca5
 8010c48:	08010ca5 	.word	0x08010ca5
 8010c4c:	08010ca5 	.word	0x08010ca5
 8010c50:	08010c95 	.word	0x08010c95
 8010c54:	08010ca5 	.word	0x08010ca5
 8010c58:	08010ca5 	.word	0x08010ca5
 8010c5c:	08010ca5 	.word	0x08010ca5
 8010c60:	08010ca5 	.word	0x08010ca5
 8010c64:	08010ca5 	.word	0x08010ca5
 8010c68:	08010ca5 	.word	0x08010ca5
 8010c6c:	08010ca5 	.word	0x08010ca5
 8010c70:	08010c9d 	.word	0x08010c9d
 8010c74:	2301      	movs	r3, #1
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7a:	e326      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010c7c:	2304      	movs	r3, #4
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e322      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010c84:	2308      	movs	r3, #8
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e31e      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010c8c:	2310      	movs	r3, #16
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e31a      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010c94:	2320      	movs	r3, #32
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e316      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010c9c:	2340      	movs	r3, #64	; 0x40
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e312      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010ca4:	2380      	movs	r3, #128	; 0x80
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e30e      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4a69      	ldr	r2, [pc, #420]	; (8010e58 <UART_SetConfig+0x33c>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d130      	bne.n	8010d18 <UART_SetConfig+0x1fc>
 8010cb6:	4b67      	ldr	r3, [pc, #412]	; (8010e54 <UART_SetConfig+0x338>)
 8010cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cba:	f003 0307 	and.w	r3, r3, #7
 8010cbe:	2b05      	cmp	r3, #5
 8010cc0:	d826      	bhi.n	8010d10 <UART_SetConfig+0x1f4>
 8010cc2:	a201      	add	r2, pc, #4	; (adr r2, 8010cc8 <UART_SetConfig+0x1ac>)
 8010cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc8:	08010ce1 	.word	0x08010ce1
 8010ccc:	08010ce9 	.word	0x08010ce9
 8010cd0:	08010cf1 	.word	0x08010cf1
 8010cd4:	08010cf9 	.word	0x08010cf9
 8010cd8:	08010d01 	.word	0x08010d01
 8010cdc:	08010d09 	.word	0x08010d09
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce6:	e2f0      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010ce8:	2304      	movs	r3, #4
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cee:	e2ec      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010cf0:	2308      	movs	r3, #8
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e2e8      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010cf8:	2310      	movs	r3, #16
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e2e4      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d00:	2320      	movs	r3, #32
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e2e0      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d08:	2340      	movs	r3, #64	; 0x40
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e2dc      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d10:	2380      	movs	r3, #128	; 0x80
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d16:	e2d8      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a4f      	ldr	r2, [pc, #316]	; (8010e5c <UART_SetConfig+0x340>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d130      	bne.n	8010d84 <UART_SetConfig+0x268>
 8010d22:	4b4c      	ldr	r3, [pc, #304]	; (8010e54 <UART_SetConfig+0x338>)
 8010d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d26:	f003 0307 	and.w	r3, r3, #7
 8010d2a:	2b05      	cmp	r3, #5
 8010d2c:	d826      	bhi.n	8010d7c <UART_SetConfig+0x260>
 8010d2e:	a201      	add	r2, pc, #4	; (adr r2, 8010d34 <UART_SetConfig+0x218>)
 8010d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d34:	08010d4d 	.word	0x08010d4d
 8010d38:	08010d55 	.word	0x08010d55
 8010d3c:	08010d5d 	.word	0x08010d5d
 8010d40:	08010d65 	.word	0x08010d65
 8010d44:	08010d6d 	.word	0x08010d6d
 8010d48:	08010d75 	.word	0x08010d75
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e2ba      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d54:	2304      	movs	r3, #4
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e2b6      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d5c:	2308      	movs	r3, #8
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e2b2      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d64:	2310      	movs	r3, #16
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e2ae      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d6c:	2320      	movs	r3, #32
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e2aa      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d74:	2340      	movs	r3, #64	; 0x40
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e2a6      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d7c:	2380      	movs	r3, #128	; 0x80
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e2a2      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a35      	ldr	r2, [pc, #212]	; (8010e60 <UART_SetConfig+0x344>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d130      	bne.n	8010df0 <UART_SetConfig+0x2d4>
 8010d8e:	4b31      	ldr	r3, [pc, #196]	; (8010e54 <UART_SetConfig+0x338>)
 8010d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d92:	f003 0307 	and.w	r3, r3, #7
 8010d96:	2b05      	cmp	r3, #5
 8010d98:	d826      	bhi.n	8010de8 <UART_SetConfig+0x2cc>
 8010d9a:	a201      	add	r2, pc, #4	; (adr r2, 8010da0 <UART_SetConfig+0x284>)
 8010d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da0:	08010db9 	.word	0x08010db9
 8010da4:	08010dc1 	.word	0x08010dc1
 8010da8:	08010dc9 	.word	0x08010dc9
 8010dac:	08010dd1 	.word	0x08010dd1
 8010db0:	08010dd9 	.word	0x08010dd9
 8010db4:	08010de1 	.word	0x08010de1
 8010db8:	2300      	movs	r3, #0
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e284      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010dc0:	2304      	movs	r3, #4
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e280      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010dc8:	2308      	movs	r3, #8
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e27c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010dd0:	2310      	movs	r3, #16
 8010dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd6:	e278      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010dd8:	2320      	movs	r3, #32
 8010dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dde:	e274      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010de0:	2340      	movs	r3, #64	; 0x40
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de6:	e270      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010de8:	2380      	movs	r3, #128	; 0x80
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dee:	e26c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4a1b      	ldr	r2, [pc, #108]	; (8010e64 <UART_SetConfig+0x348>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d142      	bne.n	8010e80 <UART_SetConfig+0x364>
 8010dfa:	4b16      	ldr	r3, [pc, #88]	; (8010e54 <UART_SetConfig+0x338>)
 8010dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dfe:	f003 0307 	and.w	r3, r3, #7
 8010e02:	2b05      	cmp	r3, #5
 8010e04:	d838      	bhi.n	8010e78 <UART_SetConfig+0x35c>
 8010e06:	a201      	add	r2, pc, #4	; (adr r2, 8010e0c <UART_SetConfig+0x2f0>)
 8010e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e0c:	08010e25 	.word	0x08010e25
 8010e10:	08010e2d 	.word	0x08010e2d
 8010e14:	08010e35 	.word	0x08010e35
 8010e18:	08010e3d 	.word	0x08010e3d
 8010e1c:	08010e69 	.word	0x08010e69
 8010e20:	08010e71 	.word	0x08010e71
 8010e24:	2300      	movs	r3, #0
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2a:	e24e      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e2c:	2304      	movs	r3, #4
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e32:	e24a      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e34:	2308      	movs	r3, #8
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3a:	e246      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e3c:	2310      	movs	r3, #16
 8010e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e42:	e242      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e44:	cfff69f3 	.word	0xcfff69f3
 8010e48:	58000c00 	.word	0x58000c00
 8010e4c:	11fff4ff 	.word	0x11fff4ff
 8010e50:	40011000 	.word	0x40011000
 8010e54:	58024400 	.word	0x58024400
 8010e58:	40004400 	.word	0x40004400
 8010e5c:	40004800 	.word	0x40004800
 8010e60:	40004c00 	.word	0x40004c00
 8010e64:	40005000 	.word	0x40005000
 8010e68:	2320      	movs	r3, #32
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e22c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e70:	2340      	movs	r3, #64	; 0x40
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e228      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e78:	2380      	movs	r3, #128	; 0x80
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e224      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4ab1      	ldr	r2, [pc, #708]	; (801114c <UART_SetConfig+0x630>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d176      	bne.n	8010f78 <UART_SetConfig+0x45c>
 8010e8a:	4bb1      	ldr	r3, [pc, #708]	; (8011150 <UART_SetConfig+0x634>)
 8010e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e92:	2b28      	cmp	r3, #40	; 0x28
 8010e94:	d86c      	bhi.n	8010f70 <UART_SetConfig+0x454>
 8010e96:	a201      	add	r2, pc, #4	; (adr r2, 8010e9c <UART_SetConfig+0x380>)
 8010e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e9c:	08010f41 	.word	0x08010f41
 8010ea0:	08010f71 	.word	0x08010f71
 8010ea4:	08010f71 	.word	0x08010f71
 8010ea8:	08010f71 	.word	0x08010f71
 8010eac:	08010f71 	.word	0x08010f71
 8010eb0:	08010f71 	.word	0x08010f71
 8010eb4:	08010f71 	.word	0x08010f71
 8010eb8:	08010f71 	.word	0x08010f71
 8010ebc:	08010f49 	.word	0x08010f49
 8010ec0:	08010f71 	.word	0x08010f71
 8010ec4:	08010f71 	.word	0x08010f71
 8010ec8:	08010f71 	.word	0x08010f71
 8010ecc:	08010f71 	.word	0x08010f71
 8010ed0:	08010f71 	.word	0x08010f71
 8010ed4:	08010f71 	.word	0x08010f71
 8010ed8:	08010f71 	.word	0x08010f71
 8010edc:	08010f51 	.word	0x08010f51
 8010ee0:	08010f71 	.word	0x08010f71
 8010ee4:	08010f71 	.word	0x08010f71
 8010ee8:	08010f71 	.word	0x08010f71
 8010eec:	08010f71 	.word	0x08010f71
 8010ef0:	08010f71 	.word	0x08010f71
 8010ef4:	08010f71 	.word	0x08010f71
 8010ef8:	08010f71 	.word	0x08010f71
 8010efc:	08010f59 	.word	0x08010f59
 8010f00:	08010f71 	.word	0x08010f71
 8010f04:	08010f71 	.word	0x08010f71
 8010f08:	08010f71 	.word	0x08010f71
 8010f0c:	08010f71 	.word	0x08010f71
 8010f10:	08010f71 	.word	0x08010f71
 8010f14:	08010f71 	.word	0x08010f71
 8010f18:	08010f71 	.word	0x08010f71
 8010f1c:	08010f61 	.word	0x08010f61
 8010f20:	08010f71 	.word	0x08010f71
 8010f24:	08010f71 	.word	0x08010f71
 8010f28:	08010f71 	.word	0x08010f71
 8010f2c:	08010f71 	.word	0x08010f71
 8010f30:	08010f71 	.word	0x08010f71
 8010f34:	08010f71 	.word	0x08010f71
 8010f38:	08010f71 	.word	0x08010f71
 8010f3c:	08010f69 	.word	0x08010f69
 8010f40:	2301      	movs	r3, #1
 8010f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f46:	e1c0      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f48:	2304      	movs	r3, #4
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e1bc      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f50:	2308      	movs	r3, #8
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e1b8      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f58:	2310      	movs	r3, #16
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e1b4      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f60:	2320      	movs	r3, #32
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e1b0      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f68:	2340      	movs	r3, #64	; 0x40
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6e:	e1ac      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f70:	2380      	movs	r3, #128	; 0x80
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f76:	e1a8      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4a75      	ldr	r2, [pc, #468]	; (8011154 <UART_SetConfig+0x638>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d130      	bne.n	8010fe4 <UART_SetConfig+0x4c8>
 8010f82:	4b73      	ldr	r3, [pc, #460]	; (8011150 <UART_SetConfig+0x634>)
 8010f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f86:	f003 0307 	and.w	r3, r3, #7
 8010f8a:	2b05      	cmp	r3, #5
 8010f8c:	d826      	bhi.n	8010fdc <UART_SetConfig+0x4c0>
 8010f8e:	a201      	add	r2, pc, #4	; (adr r2, 8010f94 <UART_SetConfig+0x478>)
 8010f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f94:	08010fad 	.word	0x08010fad
 8010f98:	08010fb5 	.word	0x08010fb5
 8010f9c:	08010fbd 	.word	0x08010fbd
 8010fa0:	08010fc5 	.word	0x08010fc5
 8010fa4:	08010fcd 	.word	0x08010fcd
 8010fa8:	08010fd5 	.word	0x08010fd5
 8010fac:	2300      	movs	r3, #0
 8010fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb2:	e18a      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fb4:	2304      	movs	r3, #4
 8010fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fba:	e186      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fbc:	2308      	movs	r3, #8
 8010fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc2:	e182      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fc4:	2310      	movs	r3, #16
 8010fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fca:	e17e      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fcc:	2320      	movs	r3, #32
 8010fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd2:	e17a      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fd4:	2340      	movs	r3, #64	; 0x40
 8010fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fda:	e176      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fdc:	2380      	movs	r3, #128	; 0x80
 8010fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe2:	e172      	b.n	80112ca <UART_SetConfig+0x7ae>
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4a5b      	ldr	r2, [pc, #364]	; (8011158 <UART_SetConfig+0x63c>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d130      	bne.n	8011050 <UART_SetConfig+0x534>
 8010fee:	4b58      	ldr	r3, [pc, #352]	; (8011150 <UART_SetConfig+0x634>)
 8010ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff2:	f003 0307 	and.w	r3, r3, #7
 8010ff6:	2b05      	cmp	r3, #5
 8010ff8:	d826      	bhi.n	8011048 <UART_SetConfig+0x52c>
 8010ffa:	a201      	add	r2, pc, #4	; (adr r2, 8011000 <UART_SetConfig+0x4e4>)
 8010ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011000:	08011019 	.word	0x08011019
 8011004:	08011021 	.word	0x08011021
 8011008:	08011029 	.word	0x08011029
 801100c:	08011031 	.word	0x08011031
 8011010:	08011039 	.word	0x08011039
 8011014:	08011041 	.word	0x08011041
 8011018:	2300      	movs	r3, #0
 801101a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101e:	e154      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011020:	2304      	movs	r3, #4
 8011022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011026:	e150      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011028:	2308      	movs	r3, #8
 801102a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102e:	e14c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011030:	2310      	movs	r3, #16
 8011032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011036:	e148      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011038:	2320      	movs	r3, #32
 801103a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103e:	e144      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011040:	2340      	movs	r3, #64	; 0x40
 8011042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011046:	e140      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011048:	2380      	movs	r3, #128	; 0x80
 801104a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104e:	e13c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a41      	ldr	r2, [pc, #260]	; (801115c <UART_SetConfig+0x640>)
 8011056:	4293      	cmp	r3, r2
 8011058:	f040 8082 	bne.w	8011160 <UART_SetConfig+0x644>
 801105c:	4b3c      	ldr	r3, [pc, #240]	; (8011150 <UART_SetConfig+0x634>)
 801105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011064:	2b28      	cmp	r3, #40	; 0x28
 8011066:	d86d      	bhi.n	8011144 <UART_SetConfig+0x628>
 8011068:	a201      	add	r2, pc, #4	; (adr r2, 8011070 <UART_SetConfig+0x554>)
 801106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106e:	bf00      	nop
 8011070:	08011115 	.word	0x08011115
 8011074:	08011145 	.word	0x08011145
 8011078:	08011145 	.word	0x08011145
 801107c:	08011145 	.word	0x08011145
 8011080:	08011145 	.word	0x08011145
 8011084:	08011145 	.word	0x08011145
 8011088:	08011145 	.word	0x08011145
 801108c:	08011145 	.word	0x08011145
 8011090:	0801111d 	.word	0x0801111d
 8011094:	08011145 	.word	0x08011145
 8011098:	08011145 	.word	0x08011145
 801109c:	08011145 	.word	0x08011145
 80110a0:	08011145 	.word	0x08011145
 80110a4:	08011145 	.word	0x08011145
 80110a8:	08011145 	.word	0x08011145
 80110ac:	08011145 	.word	0x08011145
 80110b0:	08011125 	.word	0x08011125
 80110b4:	08011145 	.word	0x08011145
 80110b8:	08011145 	.word	0x08011145
 80110bc:	08011145 	.word	0x08011145
 80110c0:	08011145 	.word	0x08011145
 80110c4:	08011145 	.word	0x08011145
 80110c8:	08011145 	.word	0x08011145
 80110cc:	08011145 	.word	0x08011145
 80110d0:	0801112d 	.word	0x0801112d
 80110d4:	08011145 	.word	0x08011145
 80110d8:	08011145 	.word	0x08011145
 80110dc:	08011145 	.word	0x08011145
 80110e0:	08011145 	.word	0x08011145
 80110e4:	08011145 	.word	0x08011145
 80110e8:	08011145 	.word	0x08011145
 80110ec:	08011145 	.word	0x08011145
 80110f0:	08011135 	.word	0x08011135
 80110f4:	08011145 	.word	0x08011145
 80110f8:	08011145 	.word	0x08011145
 80110fc:	08011145 	.word	0x08011145
 8011100:	08011145 	.word	0x08011145
 8011104:	08011145 	.word	0x08011145
 8011108:	08011145 	.word	0x08011145
 801110c:	08011145 	.word	0x08011145
 8011110:	0801113d 	.word	0x0801113d
 8011114:	2301      	movs	r3, #1
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e0d6      	b.n	80112ca <UART_SetConfig+0x7ae>
 801111c:	2304      	movs	r3, #4
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e0d2      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011124:	2308      	movs	r3, #8
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e0ce      	b.n	80112ca <UART_SetConfig+0x7ae>
 801112c:	2310      	movs	r3, #16
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e0ca      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011134:	2320      	movs	r3, #32
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e0c6      	b.n	80112ca <UART_SetConfig+0x7ae>
 801113c:	2340      	movs	r3, #64	; 0x40
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e0c2      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011144:	2380      	movs	r3, #128	; 0x80
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e0be      	b.n	80112ca <UART_SetConfig+0x7ae>
 801114c:	40011400 	.word	0x40011400
 8011150:	58024400 	.word	0x58024400
 8011154:	40007800 	.word	0x40007800
 8011158:	40007c00 	.word	0x40007c00
 801115c:	40011800 	.word	0x40011800
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4aad      	ldr	r2, [pc, #692]	; (801141c <UART_SetConfig+0x900>)
 8011166:	4293      	cmp	r3, r2
 8011168:	d176      	bne.n	8011258 <UART_SetConfig+0x73c>
 801116a:	4bad      	ldr	r3, [pc, #692]	; (8011420 <UART_SetConfig+0x904>)
 801116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801116e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011172:	2b28      	cmp	r3, #40	; 0x28
 8011174:	d86c      	bhi.n	8011250 <UART_SetConfig+0x734>
 8011176:	a201      	add	r2, pc, #4	; (adr r2, 801117c <UART_SetConfig+0x660>)
 8011178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801117c:	08011221 	.word	0x08011221
 8011180:	08011251 	.word	0x08011251
 8011184:	08011251 	.word	0x08011251
 8011188:	08011251 	.word	0x08011251
 801118c:	08011251 	.word	0x08011251
 8011190:	08011251 	.word	0x08011251
 8011194:	08011251 	.word	0x08011251
 8011198:	08011251 	.word	0x08011251
 801119c:	08011229 	.word	0x08011229
 80111a0:	08011251 	.word	0x08011251
 80111a4:	08011251 	.word	0x08011251
 80111a8:	08011251 	.word	0x08011251
 80111ac:	08011251 	.word	0x08011251
 80111b0:	08011251 	.word	0x08011251
 80111b4:	08011251 	.word	0x08011251
 80111b8:	08011251 	.word	0x08011251
 80111bc:	08011231 	.word	0x08011231
 80111c0:	08011251 	.word	0x08011251
 80111c4:	08011251 	.word	0x08011251
 80111c8:	08011251 	.word	0x08011251
 80111cc:	08011251 	.word	0x08011251
 80111d0:	08011251 	.word	0x08011251
 80111d4:	08011251 	.word	0x08011251
 80111d8:	08011251 	.word	0x08011251
 80111dc:	08011239 	.word	0x08011239
 80111e0:	08011251 	.word	0x08011251
 80111e4:	08011251 	.word	0x08011251
 80111e8:	08011251 	.word	0x08011251
 80111ec:	08011251 	.word	0x08011251
 80111f0:	08011251 	.word	0x08011251
 80111f4:	08011251 	.word	0x08011251
 80111f8:	08011251 	.word	0x08011251
 80111fc:	08011241 	.word	0x08011241
 8011200:	08011251 	.word	0x08011251
 8011204:	08011251 	.word	0x08011251
 8011208:	08011251 	.word	0x08011251
 801120c:	08011251 	.word	0x08011251
 8011210:	08011251 	.word	0x08011251
 8011214:	08011251 	.word	0x08011251
 8011218:	08011251 	.word	0x08011251
 801121c:	08011249 	.word	0x08011249
 8011220:	2301      	movs	r3, #1
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e050      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011228:	2304      	movs	r3, #4
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e04c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011230:	2308      	movs	r3, #8
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e048      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011238:	2310      	movs	r3, #16
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e044      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011240:	2320      	movs	r3, #32
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e040      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011248:	2340      	movs	r3, #64	; 0x40
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124e:	e03c      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011250:	2380      	movs	r3, #128	; 0x80
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011256:	e038      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a71      	ldr	r2, [pc, #452]	; (8011424 <UART_SetConfig+0x908>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d130      	bne.n	80112c4 <UART_SetConfig+0x7a8>
 8011262:	4b6f      	ldr	r3, [pc, #444]	; (8011420 <UART_SetConfig+0x904>)
 8011264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011266:	f003 0307 	and.w	r3, r3, #7
 801126a:	2b05      	cmp	r3, #5
 801126c:	d826      	bhi.n	80112bc <UART_SetConfig+0x7a0>
 801126e:	a201      	add	r2, pc, #4	; (adr r2, 8011274 <UART_SetConfig+0x758>)
 8011270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011274:	0801128d 	.word	0x0801128d
 8011278:	08011295 	.word	0x08011295
 801127c:	0801129d 	.word	0x0801129d
 8011280:	080112a5 	.word	0x080112a5
 8011284:	080112ad 	.word	0x080112ad
 8011288:	080112b5 	.word	0x080112b5
 801128c:	2302      	movs	r3, #2
 801128e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011292:	e01a      	b.n	80112ca <UART_SetConfig+0x7ae>
 8011294:	2304      	movs	r3, #4
 8011296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129a:	e016      	b.n	80112ca <UART_SetConfig+0x7ae>
 801129c:	2308      	movs	r3, #8
 801129e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a2:	e012      	b.n	80112ca <UART_SetConfig+0x7ae>
 80112a4:	2310      	movs	r3, #16
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e00e      	b.n	80112ca <UART_SetConfig+0x7ae>
 80112ac:	2320      	movs	r3, #32
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e00a      	b.n	80112ca <UART_SetConfig+0x7ae>
 80112b4:	2340      	movs	r3, #64	; 0x40
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e006      	b.n	80112ca <UART_SetConfig+0x7ae>
 80112bc:	2380      	movs	r3, #128	; 0x80
 80112be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c2:	e002      	b.n	80112ca <UART_SetConfig+0x7ae>
 80112c4:	2380      	movs	r3, #128	; 0x80
 80112c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	4a55      	ldr	r2, [pc, #340]	; (8011424 <UART_SetConfig+0x908>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	f040 80f8 	bne.w	80114c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80112d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112da:	2b20      	cmp	r3, #32
 80112dc:	dc46      	bgt.n	801136c <UART_SetConfig+0x850>
 80112de:	2b02      	cmp	r3, #2
 80112e0:	db75      	blt.n	80113ce <UART_SetConfig+0x8b2>
 80112e2:	3b02      	subs	r3, #2
 80112e4:	2b1e      	cmp	r3, #30
 80112e6:	d872      	bhi.n	80113ce <UART_SetConfig+0x8b2>
 80112e8:	a201      	add	r2, pc, #4	; (adr r2, 80112f0 <UART_SetConfig+0x7d4>)
 80112ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ee:	bf00      	nop
 80112f0:	08011373 	.word	0x08011373
 80112f4:	080113cf 	.word	0x080113cf
 80112f8:	0801137b 	.word	0x0801137b
 80112fc:	080113cf 	.word	0x080113cf
 8011300:	080113cf 	.word	0x080113cf
 8011304:	080113cf 	.word	0x080113cf
 8011308:	0801138b 	.word	0x0801138b
 801130c:	080113cf 	.word	0x080113cf
 8011310:	080113cf 	.word	0x080113cf
 8011314:	080113cf 	.word	0x080113cf
 8011318:	080113cf 	.word	0x080113cf
 801131c:	080113cf 	.word	0x080113cf
 8011320:	080113cf 	.word	0x080113cf
 8011324:	080113cf 	.word	0x080113cf
 8011328:	0801139b 	.word	0x0801139b
 801132c:	080113cf 	.word	0x080113cf
 8011330:	080113cf 	.word	0x080113cf
 8011334:	080113cf 	.word	0x080113cf
 8011338:	080113cf 	.word	0x080113cf
 801133c:	080113cf 	.word	0x080113cf
 8011340:	080113cf 	.word	0x080113cf
 8011344:	080113cf 	.word	0x080113cf
 8011348:	080113cf 	.word	0x080113cf
 801134c:	080113cf 	.word	0x080113cf
 8011350:	080113cf 	.word	0x080113cf
 8011354:	080113cf 	.word	0x080113cf
 8011358:	080113cf 	.word	0x080113cf
 801135c:	080113cf 	.word	0x080113cf
 8011360:	080113cf 	.word	0x080113cf
 8011364:	080113cf 	.word	0x080113cf
 8011368:	080113c1 	.word	0x080113c1
 801136c:	2b40      	cmp	r3, #64	; 0x40
 801136e:	d02a      	beq.n	80113c6 <UART_SetConfig+0x8aa>
 8011370:	e02d      	b.n	80113ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011372:	f7fb fb07 	bl	800c984 <HAL_RCCEx_GetD3PCLK1Freq>
 8011376:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011378:	e02f      	b.n	80113da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801137e:	4618      	mov	r0, r3
 8011380:	f7fb fb16 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011388:	e027      	b.n	80113da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801138a:	f107 0318 	add.w	r3, r7, #24
 801138e:	4618      	mov	r0, r3
 8011390:	f7fb fc62 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011398:	e01f      	b.n	80113da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801139a:	4b21      	ldr	r3, [pc, #132]	; (8011420 <UART_SetConfig+0x904>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f003 0320 	and.w	r3, r3, #32
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d009      	beq.n	80113ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113a6:	4b1e      	ldr	r3, [pc, #120]	; (8011420 <UART_SetConfig+0x904>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	08db      	lsrs	r3, r3, #3
 80113ac:	f003 0303 	and.w	r3, r3, #3
 80113b0:	4a1d      	ldr	r2, [pc, #116]	; (8011428 <UART_SetConfig+0x90c>)
 80113b2:	fa22 f303 	lsr.w	r3, r2, r3
 80113b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113b8:	e00f      	b.n	80113da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80113ba:	4b1b      	ldr	r3, [pc, #108]	; (8011428 <UART_SetConfig+0x90c>)
 80113bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113be:	e00c      	b.n	80113da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113c0:	4b1a      	ldr	r3, [pc, #104]	; (801142c <UART_SetConfig+0x910>)
 80113c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113c4:	e009      	b.n	80113da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113cc:	e005      	b.n	80113da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80113ce:	2300      	movs	r3, #0
 80113d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113d2:	2301      	movs	r3, #1
 80113d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80113da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 81ee 	beq.w	80117be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113e6:	4a12      	ldr	r2, [pc, #72]	; (8011430 <UART_SetConfig+0x914>)
 80113e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113ec:	461a      	mov	r2, r3
 80113ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80113f4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	685a      	ldr	r2, [r3, #4]
 80113fa:	4613      	mov	r3, r2
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	4413      	add	r3, r2
 8011400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011402:	429a      	cmp	r2, r3
 8011404:	d305      	bcc.n	8011412 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801140c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801140e:	429a      	cmp	r2, r3
 8011410:	d910      	bls.n	8011434 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011418:	e1d1      	b.n	80117be <UART_SetConfig+0xca2>
 801141a:	bf00      	nop
 801141c:	40011c00 	.word	0x40011c00
 8011420:	58024400 	.word	0x58024400
 8011424:	58000c00 	.word	0x58000c00
 8011428:	03d09000 	.word	0x03d09000
 801142c:	003d0900 	.word	0x003d0900
 8011430:	0801c7f0 	.word	0x0801c7f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011436:	2200      	movs	r2, #0
 8011438:	60bb      	str	r3, [r7, #8]
 801143a:	60fa      	str	r2, [r7, #12]
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011440:	4ac0      	ldr	r2, [pc, #768]	; (8011744 <UART_SetConfig+0xc28>)
 8011442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011446:	b29b      	uxth	r3, r3
 8011448:	2200      	movs	r2, #0
 801144a:	603b      	str	r3, [r7, #0]
 801144c:	607a      	str	r2, [r7, #4]
 801144e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011452:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011456:	f7ef f96f 	bl	8000738 <__aeabi_uldivmod>
 801145a:	4602      	mov	r2, r0
 801145c:	460b      	mov	r3, r1
 801145e:	4610      	mov	r0, r2
 8011460:	4619      	mov	r1, r3
 8011462:	f04f 0200 	mov.w	r2, #0
 8011466:	f04f 0300 	mov.w	r3, #0
 801146a:	020b      	lsls	r3, r1, #8
 801146c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011470:	0202      	lsls	r2, r0, #8
 8011472:	6979      	ldr	r1, [r7, #20]
 8011474:	6849      	ldr	r1, [r1, #4]
 8011476:	0849      	lsrs	r1, r1, #1
 8011478:	2000      	movs	r0, #0
 801147a:	460c      	mov	r4, r1
 801147c:	4605      	mov	r5, r0
 801147e:	eb12 0804 	adds.w	r8, r2, r4
 8011482:	eb43 0905 	adc.w	r9, r3, r5
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	469a      	mov	sl, r3
 801148e:	4693      	mov	fp, r2
 8011490:	4652      	mov	r2, sl
 8011492:	465b      	mov	r3, fp
 8011494:	4640      	mov	r0, r8
 8011496:	4649      	mov	r1, r9
 8011498:	f7ef f94e 	bl	8000738 <__aeabi_uldivmod>
 801149c:	4602      	mov	r2, r0
 801149e:	460b      	mov	r3, r1
 80114a0:	4613      	mov	r3, r2
 80114a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114aa:	d308      	bcc.n	80114be <UART_SetConfig+0x9a2>
 80114ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114b2:	d204      	bcs.n	80114be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114ba:	60da      	str	r2, [r3, #12]
 80114bc:	e17f      	b.n	80117be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80114be:	2301      	movs	r3, #1
 80114c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114c4:	e17b      	b.n	80117be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	69db      	ldr	r3, [r3, #28]
 80114ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114ce:	f040 80bd 	bne.w	801164c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80114d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114d6:	2b20      	cmp	r3, #32
 80114d8:	dc48      	bgt.n	801156c <UART_SetConfig+0xa50>
 80114da:	2b00      	cmp	r3, #0
 80114dc:	db7b      	blt.n	80115d6 <UART_SetConfig+0xaba>
 80114de:	2b20      	cmp	r3, #32
 80114e0:	d879      	bhi.n	80115d6 <UART_SetConfig+0xaba>
 80114e2:	a201      	add	r2, pc, #4	; (adr r2, 80114e8 <UART_SetConfig+0x9cc>)
 80114e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e8:	08011573 	.word	0x08011573
 80114ec:	0801157b 	.word	0x0801157b
 80114f0:	080115d7 	.word	0x080115d7
 80114f4:	080115d7 	.word	0x080115d7
 80114f8:	08011583 	.word	0x08011583
 80114fc:	080115d7 	.word	0x080115d7
 8011500:	080115d7 	.word	0x080115d7
 8011504:	080115d7 	.word	0x080115d7
 8011508:	08011593 	.word	0x08011593
 801150c:	080115d7 	.word	0x080115d7
 8011510:	080115d7 	.word	0x080115d7
 8011514:	080115d7 	.word	0x080115d7
 8011518:	080115d7 	.word	0x080115d7
 801151c:	080115d7 	.word	0x080115d7
 8011520:	080115d7 	.word	0x080115d7
 8011524:	080115d7 	.word	0x080115d7
 8011528:	080115a3 	.word	0x080115a3
 801152c:	080115d7 	.word	0x080115d7
 8011530:	080115d7 	.word	0x080115d7
 8011534:	080115d7 	.word	0x080115d7
 8011538:	080115d7 	.word	0x080115d7
 801153c:	080115d7 	.word	0x080115d7
 8011540:	080115d7 	.word	0x080115d7
 8011544:	080115d7 	.word	0x080115d7
 8011548:	080115d7 	.word	0x080115d7
 801154c:	080115d7 	.word	0x080115d7
 8011550:	080115d7 	.word	0x080115d7
 8011554:	080115d7 	.word	0x080115d7
 8011558:	080115d7 	.word	0x080115d7
 801155c:	080115d7 	.word	0x080115d7
 8011560:	080115d7 	.word	0x080115d7
 8011564:	080115d7 	.word	0x080115d7
 8011568:	080115c9 	.word	0x080115c9
 801156c:	2b40      	cmp	r3, #64	; 0x40
 801156e:	d02e      	beq.n	80115ce <UART_SetConfig+0xab2>
 8011570:	e031      	b.n	80115d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011572:	f7f9 fb69 	bl	800ac48 <HAL_RCC_GetPCLK1Freq>
 8011576:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011578:	e033      	b.n	80115e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801157a:	f7f9 fb7b 	bl	800ac74 <HAL_RCC_GetPCLK2Freq>
 801157e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011580:	e02f      	b.n	80115e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011586:	4618      	mov	r0, r3
 8011588:	f7fb fa12 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011590:	e027      	b.n	80115e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011592:	f107 0318 	add.w	r3, r7, #24
 8011596:	4618      	mov	r0, r3
 8011598:	f7fb fb5e 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115a0:	e01f      	b.n	80115e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115a2:	4b69      	ldr	r3, [pc, #420]	; (8011748 <UART_SetConfig+0xc2c>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f003 0320 	and.w	r3, r3, #32
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d009      	beq.n	80115c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115ae:	4b66      	ldr	r3, [pc, #408]	; (8011748 <UART_SetConfig+0xc2c>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	08db      	lsrs	r3, r3, #3
 80115b4:	f003 0303 	and.w	r3, r3, #3
 80115b8:	4a64      	ldr	r2, [pc, #400]	; (801174c <UART_SetConfig+0xc30>)
 80115ba:	fa22 f303 	lsr.w	r3, r2, r3
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115c0:	e00f      	b.n	80115e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80115c2:	4b62      	ldr	r3, [pc, #392]	; (801174c <UART_SetConfig+0xc30>)
 80115c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115c6:	e00c      	b.n	80115e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115c8:	4b61      	ldr	r3, [pc, #388]	; (8011750 <UART_SetConfig+0xc34>)
 80115ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115cc:	e009      	b.n	80115e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115d4:	e005      	b.n	80115e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80115d6:	2300      	movs	r3, #0
 80115d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115da:	2301      	movs	r3, #1
 80115dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80115e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f000 80ea 	beq.w	80117be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ee:	4a55      	ldr	r2, [pc, #340]	; (8011744 <UART_SetConfig+0xc28>)
 80115f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115f4:	461a      	mov	r2, r3
 80115f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80115fc:	005a      	lsls	r2, r3, #1
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	085b      	lsrs	r3, r3, #1
 8011604:	441a      	add	r2, r3
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	fbb2 f3f3 	udiv	r3, r2, r3
 801160e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011612:	2b0f      	cmp	r3, #15
 8011614:	d916      	bls.n	8011644 <UART_SetConfig+0xb28>
 8011616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801161c:	d212      	bcs.n	8011644 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801161e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011620:	b29b      	uxth	r3, r3
 8011622:	f023 030f 	bic.w	r3, r3, #15
 8011626:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162a:	085b      	lsrs	r3, r3, #1
 801162c:	b29b      	uxth	r3, r3
 801162e:	f003 0307 	and.w	r3, r3, #7
 8011632:	b29a      	uxth	r2, r3
 8011634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011636:	4313      	orrs	r3, r2
 8011638:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011640:	60da      	str	r2, [r3, #12]
 8011642:	e0bc      	b.n	80117be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011644:	2301      	movs	r3, #1
 8011646:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801164a:	e0b8      	b.n	80117be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801164c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011650:	2b20      	cmp	r3, #32
 8011652:	dc4b      	bgt.n	80116ec <UART_SetConfig+0xbd0>
 8011654:	2b00      	cmp	r3, #0
 8011656:	f2c0 8087 	blt.w	8011768 <UART_SetConfig+0xc4c>
 801165a:	2b20      	cmp	r3, #32
 801165c:	f200 8084 	bhi.w	8011768 <UART_SetConfig+0xc4c>
 8011660:	a201      	add	r2, pc, #4	; (adr r2, 8011668 <UART_SetConfig+0xb4c>)
 8011662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011666:	bf00      	nop
 8011668:	080116f3 	.word	0x080116f3
 801166c:	080116fb 	.word	0x080116fb
 8011670:	08011769 	.word	0x08011769
 8011674:	08011769 	.word	0x08011769
 8011678:	08011703 	.word	0x08011703
 801167c:	08011769 	.word	0x08011769
 8011680:	08011769 	.word	0x08011769
 8011684:	08011769 	.word	0x08011769
 8011688:	08011713 	.word	0x08011713
 801168c:	08011769 	.word	0x08011769
 8011690:	08011769 	.word	0x08011769
 8011694:	08011769 	.word	0x08011769
 8011698:	08011769 	.word	0x08011769
 801169c:	08011769 	.word	0x08011769
 80116a0:	08011769 	.word	0x08011769
 80116a4:	08011769 	.word	0x08011769
 80116a8:	08011723 	.word	0x08011723
 80116ac:	08011769 	.word	0x08011769
 80116b0:	08011769 	.word	0x08011769
 80116b4:	08011769 	.word	0x08011769
 80116b8:	08011769 	.word	0x08011769
 80116bc:	08011769 	.word	0x08011769
 80116c0:	08011769 	.word	0x08011769
 80116c4:	08011769 	.word	0x08011769
 80116c8:	08011769 	.word	0x08011769
 80116cc:	08011769 	.word	0x08011769
 80116d0:	08011769 	.word	0x08011769
 80116d4:	08011769 	.word	0x08011769
 80116d8:	08011769 	.word	0x08011769
 80116dc:	08011769 	.word	0x08011769
 80116e0:	08011769 	.word	0x08011769
 80116e4:	08011769 	.word	0x08011769
 80116e8:	0801175b 	.word	0x0801175b
 80116ec:	2b40      	cmp	r3, #64	; 0x40
 80116ee:	d037      	beq.n	8011760 <UART_SetConfig+0xc44>
 80116f0:	e03a      	b.n	8011768 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116f2:	f7f9 faa9 	bl	800ac48 <HAL_RCC_GetPCLK1Freq>
 80116f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116f8:	e03c      	b.n	8011774 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116fa:	f7f9 fabb 	bl	800ac74 <HAL_RCC_GetPCLK2Freq>
 80116fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011700:	e038      	b.n	8011774 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011706:	4618      	mov	r0, r3
 8011708:	f7fb f952 	bl	800c9b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011710:	e030      	b.n	8011774 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011712:	f107 0318 	add.w	r3, r7, #24
 8011716:	4618      	mov	r0, r3
 8011718:	f7fb fa9e 	bl	800cc58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011720:	e028      	b.n	8011774 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011722:	4b09      	ldr	r3, [pc, #36]	; (8011748 <UART_SetConfig+0xc2c>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f003 0320 	and.w	r3, r3, #32
 801172a:	2b00      	cmp	r3, #0
 801172c:	d012      	beq.n	8011754 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801172e:	4b06      	ldr	r3, [pc, #24]	; (8011748 <UART_SetConfig+0xc2c>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	08db      	lsrs	r3, r3, #3
 8011734:	f003 0303 	and.w	r3, r3, #3
 8011738:	4a04      	ldr	r2, [pc, #16]	; (801174c <UART_SetConfig+0xc30>)
 801173a:	fa22 f303 	lsr.w	r3, r2, r3
 801173e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011740:	e018      	b.n	8011774 <UART_SetConfig+0xc58>
 8011742:	bf00      	nop
 8011744:	0801c7f0 	.word	0x0801c7f0
 8011748:	58024400 	.word	0x58024400
 801174c:	03d09000 	.word	0x03d09000
 8011750:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011754:	4b24      	ldr	r3, [pc, #144]	; (80117e8 <UART_SetConfig+0xccc>)
 8011756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011758:	e00c      	b.n	8011774 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801175a:	4b24      	ldr	r3, [pc, #144]	; (80117ec <UART_SetConfig+0xcd0>)
 801175c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801175e:	e009      	b.n	8011774 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011766:	e005      	b.n	8011774 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011768:	2300      	movs	r3, #0
 801176a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801176c:	2301      	movs	r3, #1
 801176e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011772:	bf00      	nop
    }

    if (pclk != 0U)
 8011774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011776:	2b00      	cmp	r3, #0
 8011778:	d021      	beq.n	80117be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177e:	4a1c      	ldr	r2, [pc, #112]	; (80117f0 <UART_SetConfig+0xcd4>)
 8011780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011784:	461a      	mov	r2, r3
 8011786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011788:	fbb3 f2f2 	udiv	r2, r3, r2
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	085b      	lsrs	r3, r3, #1
 8011792:	441a      	add	r2, r3
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	fbb2 f3f3 	udiv	r3, r2, r3
 801179c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a0:	2b0f      	cmp	r3, #15
 80117a2:	d909      	bls.n	80117b8 <UART_SetConfig+0xc9c>
 80117a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117aa:	d205      	bcs.n	80117b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	60da      	str	r2, [r3, #12]
 80117b6:	e002      	b.n	80117be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80117b8:	2301      	movs	r3, #1
 80117ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2201      	movs	r2, #1
 80117c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	2201      	movs	r2, #1
 80117ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	2200      	movs	r2, #0
 80117d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2200      	movs	r2, #0
 80117d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80117da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3748      	adds	r7, #72	; 0x48
 80117e2:	46bd      	mov	sp, r7
 80117e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117e8:	03d09000 	.word	0x03d09000
 80117ec:	003d0900 	.word	0x003d0900
 80117f0:	0801c7f0 	.word	0x0801c7f0

080117f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011800:	f003 0301 	and.w	r3, r3, #1
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00a      	beq.n	801181e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	430a      	orrs	r2, r1
 801181c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011822:	f003 0302 	and.w	r3, r3, #2
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00a      	beq.n	8011840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	430a      	orrs	r2, r1
 801183e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011844:	f003 0304 	and.w	r3, r3, #4
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	430a      	orrs	r2, r1
 8011860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011866:	f003 0308 	and.w	r3, r3, #8
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00a      	beq.n	8011884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	430a      	orrs	r2, r1
 8011882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011888:	f003 0310 	and.w	r3, r3, #16
 801188c:	2b00      	cmp	r3, #0
 801188e:	d00a      	beq.n	80118a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	689b      	ldr	r3, [r3, #8]
 8011896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	430a      	orrs	r2, r1
 80118a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118aa:	f003 0320 	and.w	r3, r3, #32
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d00a      	beq.n	80118c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	430a      	orrs	r2, r1
 80118c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d01a      	beq.n	801190a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	430a      	orrs	r2, r1
 80118e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118f2:	d10a      	bne.n	801190a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	430a      	orrs	r2, r1
 8011908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00a      	beq.n	801192c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	430a      	orrs	r2, r1
 801192a:	605a      	str	r2, [r3, #4]
  }
}
 801192c:	bf00      	nop
 801192e:	370c      	adds	r7, #12
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr

08011938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b098      	sub	sp, #96	; 0x60
 801193c:	af02      	add	r7, sp, #8
 801193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011948:	f7f2 fed2 	bl	80046f0 <HAL_GetTick>
 801194c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	f003 0308 	and.w	r3, r3, #8
 8011958:	2b08      	cmp	r3, #8
 801195a:	d12f      	bne.n	80119bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801195c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011960:	9300      	str	r3, [sp, #0]
 8011962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011964:	2200      	movs	r2, #0
 8011966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f88e 	bl	8011a8c <UART_WaitOnFlagUntilTimeout>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d022      	beq.n	80119bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197e:	e853 3f00 	ldrex	r3, [r3]
 8011982:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801198a:	653b      	str	r3, [r7, #80]	; 0x50
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	461a      	mov	r2, r3
 8011992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011994:	647b      	str	r3, [r7, #68]	; 0x44
 8011996:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801199a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801199c:	e841 2300 	strex	r3, r2, [r1]
 80119a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d1e6      	bne.n	8011976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2220      	movs	r2, #32
 80119ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119b8:	2303      	movs	r3, #3
 80119ba:	e063      	b.n	8011a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f003 0304 	and.w	r3, r3, #4
 80119c6:	2b04      	cmp	r3, #4
 80119c8:	d149      	bne.n	8011a5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119ce:	9300      	str	r3, [sp, #0]
 80119d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119d2:	2200      	movs	r2, #0
 80119d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 f857 	bl	8011a8c <UART_WaitOnFlagUntilTimeout>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d03c      	beq.n	8011a5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ec:	e853 3f00 	ldrex	r3, [r3]
 80119f0:	623b      	str	r3, [r7, #32]
   return(result);
 80119f2:	6a3b      	ldr	r3, [r7, #32]
 80119f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	461a      	mov	r2, r3
 8011a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a02:	633b      	str	r3, [r7, #48]	; 0x30
 8011a04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a0a:	e841 2300 	strex	r3, r2, [r1]
 8011a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d1e6      	bne.n	80119e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	3308      	adds	r3, #8
 8011a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	e853 3f00 	ldrex	r3, [r3]
 8011a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f023 0301 	bic.w	r3, r3, #1
 8011a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	3308      	adds	r3, #8
 8011a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a36:	61fa      	str	r2, [r7, #28]
 8011a38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a3a:	69b9      	ldr	r1, [r7, #24]
 8011a3c:	69fa      	ldr	r2, [r7, #28]
 8011a3e:	e841 2300 	strex	r3, r2, [r1]
 8011a42:	617b      	str	r3, [r7, #20]
   return(result);
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1e5      	bne.n	8011a16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2220      	movs	r2, #32
 8011a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2200      	movs	r2, #0
 8011a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a5a:	2303      	movs	r3, #3
 8011a5c:	e012      	b.n	8011a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2220      	movs	r2, #32
 8011a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3758      	adds	r7, #88	; 0x58
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	603b      	str	r3, [r7, #0]
 8011a98:	4613      	mov	r3, r2
 8011a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a9c:	e049      	b.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa4:	d045      	beq.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011aa6:	f7f2 fe23 	bl	80046f0 <HAL_GetTick>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	69ba      	ldr	r2, [r7, #24]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d302      	bcc.n	8011abc <UART_WaitOnFlagUntilTimeout+0x30>
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d101      	bne.n	8011ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011abc:	2303      	movs	r3, #3
 8011abe:	e048      	b.n	8011b52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f003 0304 	and.w	r3, r3, #4
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d031      	beq.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	69db      	ldr	r3, [r3, #28]
 8011ad4:	f003 0308 	and.w	r3, r3, #8
 8011ad8:	2b08      	cmp	r3, #8
 8011ada:	d110      	bne.n	8011afe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2208      	movs	r2, #8
 8011ae2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f000 f839 	bl	8011b5c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2208      	movs	r2, #8
 8011aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	2200      	movs	r2, #0
 8011af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011afa:	2301      	movs	r3, #1
 8011afc:	e029      	b.n	8011b52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	69db      	ldr	r3, [r3, #28]
 8011b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b0c:	d111      	bne.n	8011b32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f000 f81f 	bl	8011b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2220      	movs	r2, #32
 8011b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b2e:	2303      	movs	r3, #3
 8011b30:	e00f      	b.n	8011b52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	69da      	ldr	r2, [r3, #28]
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	68ba      	ldr	r2, [r7, #8]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	bf0c      	ite	eq
 8011b42:	2301      	moveq	r3, #1
 8011b44:	2300      	movne	r3, #0
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	461a      	mov	r2, r3
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d0a6      	beq.n	8011a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
	...

08011b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b095      	sub	sp, #84	; 0x54
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b6c:	e853 3f00 	ldrex	r3, [r3]
 8011b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b82:	643b      	str	r3, [r7, #64]	; 0x40
 8011b84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b8a:	e841 2300 	strex	r3, r2, [r1]
 8011b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1e6      	bne.n	8011b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	3308      	adds	r3, #8
 8011b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	6a3b      	ldr	r3, [r7, #32]
 8011ba0:	e853 3f00 	ldrex	r3, [r3]
 8011ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ba6:	69fa      	ldr	r2, [r7, #28]
 8011ba8:	4b1e      	ldr	r3, [pc, #120]	; (8011c24 <UART_EndRxTransfer+0xc8>)
 8011baa:	4013      	ands	r3, r2
 8011bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	3308      	adds	r3, #8
 8011bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bbe:	e841 2300 	strex	r3, r2, [r1]
 8011bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d1e5      	bne.n	8011b96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d118      	bne.n	8011c04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	e853 3f00 	ldrex	r3, [r3]
 8011bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	f023 0310 	bic.w	r3, r3, #16
 8011be6:	647b      	str	r3, [r7, #68]	; 0x44
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	461a      	mov	r2, r3
 8011bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf4:	6979      	ldr	r1, [r7, #20]
 8011bf6:	69ba      	ldr	r2, [r7, #24]
 8011bf8:	e841 2300 	strex	r3, r2, [r1]
 8011bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d1e6      	bne.n	8011bd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2220      	movs	r2, #32
 8011c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c18:	bf00      	nop
 8011c1a:	3754      	adds	r7, #84	; 0x54
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	effffffe 	.word	0xeffffffe

08011c28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d101      	bne.n	8011c3e <HAL_UARTEx_DisableFifoMode+0x16>
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	e027      	b.n	8011c8e <HAL_UARTEx_DisableFifoMode+0x66>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2224      	movs	r2, #36	; 0x24
 8011c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f022 0201 	bic.w	r2, r2, #1
 8011c64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011c6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2220      	movs	r2, #32
 8011c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2200      	movs	r2, #0
 8011c88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3714      	adds	r7, #20
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b084      	sub	sp, #16
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
 8011ca2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d101      	bne.n	8011cb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011cae:	2302      	movs	r3, #2
 8011cb0:	e02d      	b.n	8011d0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2224      	movs	r2, #36	; 0x24
 8011cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f022 0201 	bic.w	r2, r2, #1
 8011cd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	683a      	ldr	r2, [r7, #0]
 8011cea:	430a      	orrs	r2, r1
 8011cec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 f850 	bl	8011d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2220      	movs	r2, #32
 8011d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2200      	movs	r2, #0
 8011d08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d0c:	2300      	movs	r3, #0
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}

08011d16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d16:	b580      	push	{r7, lr}
 8011d18:	b084      	sub	sp, #16
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
 8011d1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d101      	bne.n	8011d2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011d2a:	2302      	movs	r3, #2
 8011d2c:	e02d      	b.n	8011d8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2201      	movs	r2, #1
 8011d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2224      	movs	r2, #36	; 0x24
 8011d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f022 0201 	bic.w	r2, r2, #1
 8011d54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	683a      	ldr	r2, [r7, #0]
 8011d66:	430a      	orrs	r2, r1
 8011d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 f812 	bl	8011d94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2220      	movs	r2, #32
 8011d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
	...

08011d94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d108      	bne.n	8011db6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2201      	movs	r2, #1
 8011db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011db4:	e031      	b.n	8011e1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011db6:	2310      	movs	r3, #16
 8011db8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011dba:	2310      	movs	r3, #16
 8011dbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	689b      	ldr	r3, [r3, #8]
 8011dc4:	0e5b      	lsrs	r3, r3, #25
 8011dc6:	b2db      	uxtb	r3, r3
 8011dc8:	f003 0307 	and.w	r3, r3, #7
 8011dcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	0f5b      	lsrs	r3, r3, #29
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	f003 0307 	and.w	r3, r3, #7
 8011ddc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011dde:	7bbb      	ldrb	r3, [r7, #14]
 8011de0:	7b3a      	ldrb	r2, [r7, #12]
 8011de2:	4911      	ldr	r1, [pc, #68]	; (8011e28 <UARTEx_SetNbDataToProcess+0x94>)
 8011de4:	5c8a      	ldrb	r2, [r1, r2]
 8011de6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011dea:	7b3a      	ldrb	r2, [r7, #12]
 8011dec:	490f      	ldr	r1, [pc, #60]	; (8011e2c <UARTEx_SetNbDataToProcess+0x98>)
 8011dee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
 8011dfe:	7b7a      	ldrb	r2, [r7, #13]
 8011e00:	4909      	ldr	r1, [pc, #36]	; (8011e28 <UARTEx_SetNbDataToProcess+0x94>)
 8011e02:	5c8a      	ldrb	r2, [r1, r2]
 8011e04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e08:	7b7a      	ldrb	r2, [r7, #13]
 8011e0a:	4908      	ldr	r1, [pc, #32]	; (8011e2c <UARTEx_SetNbDataToProcess+0x98>)
 8011e0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011e1a:	bf00      	nop
 8011e1c:	3714      	adds	r7, #20
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop
 8011e28:	0801c808 	.word	0x0801c808
 8011e2c:	0801c810 	.word	0x0801c810

08011e30 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011e30:	b084      	sub	sp, #16
 8011e32:	b480      	push	{r7}
 8011e34:	b085      	sub	sp, #20
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	f107 001c 	add.w	r0, r7, #28
 8011e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011e42:	2300      	movs	r3, #0
 8011e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011e46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011e48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011e4a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011e4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011e52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011e56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	685a      	ldr	r2, [r3, #4]
 8011e62:	4b07      	ldr	r3, [pc, #28]	; (8011e80 <SDMMC_Init+0x50>)
 8011e64:	4013      	ands	r3, r2
 8011e66:	68fa      	ldr	r2, [r7, #12]
 8011e68:	431a      	orrs	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	b004      	add	sp, #16
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	ffc02c00 	.word	0xffc02c00

08011e84 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011eb2:	2300      	movs	r3, #0
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f043 0203 	orr.w	r2, r3, #3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	370c      	adds	r7, #12
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr

08011ee2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011ee2:	b480      	push	{r7}
 8011ee4:	b083      	sub	sp, #12
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f003 0303 	and.w	r3, r3, #3
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	370c      	adds	r7, #12
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr
	...

08011f00 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b085      	sub	sp, #20
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011f24:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011f2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	4313      	orrs	r3, r2
 8011f30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68da      	ldr	r2, [r3, #12]
 8011f36:	4b06      	ldr	r3, [pc, #24]	; (8011f50 <SDMMC_SendCommand+0x50>)
 8011f38:	4013      	ands	r3, r2
 8011f3a:	68fa      	ldr	r2, [r7, #12]
 8011f3c:	431a      	orrs	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011f42:	2300      	movs	r3, #0
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3714      	adds	r7, #20
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	fffee0c0 	.word	0xfffee0c0

08011f54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	691b      	ldr	r3, [r3, #16]
 8011f60:	b2db      	uxtb	r3, r3
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	370c      	adds	r7, #12
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr

08011f6e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011f6e:	b480      	push	{r7}
 8011f70:	b085      	sub	sp, #20
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6078      	str	r0, [r7, #4]
 8011f76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	3314      	adds	r3, #20
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	4413      	add	r3, r2
 8011f82:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3714      	adds	r7, #20
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b085      	sub	sp, #20
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011fba:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011fc0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011fc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011fc8:	68fa      	ldr	r2, [r7, #12]
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	431a      	orrs	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011fde:	2300      	movs	r3, #0

}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr

08011fec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b088      	sub	sp, #32
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011ffa:	2310      	movs	r3, #16
 8011ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012004:	2300      	movs	r3, #0
 8012006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801200c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801200e:	f107 0308 	add.w	r3, r7, #8
 8012012:	4619      	mov	r1, r3
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7ff ff73 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801201a:	f241 3288 	movw	r2, #5000	; 0x1388
 801201e:	2110      	movs	r1, #16
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f000 fa5f 	bl	80124e4 <SDMMC_GetCmdResp1>
 8012026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012028:	69fb      	ldr	r3, [r7, #28]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3720      	adds	r7, #32
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b088      	sub	sp, #32
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
 801203a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012040:	2311      	movs	r3, #17
 8012042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801204a:	2300      	movs	r3, #0
 801204c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801204e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012054:	f107 0308 	add.w	r3, r7, #8
 8012058:	4619      	mov	r1, r3
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7ff ff50 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012060:	f241 3288 	movw	r2, #5000	; 0x1388
 8012064:	2111      	movs	r1, #17
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fa3c 	bl	80124e4 <SDMMC_GetCmdResp1>
 801206c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801206e:	69fb      	ldr	r3, [r7, #28]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3720      	adds	r7, #32
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b088      	sub	sp, #32
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012086:	2312      	movs	r3, #18
 8012088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801208a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801208e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012090:	2300      	movs	r3, #0
 8012092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801209a:	f107 0308 	add.w	r3, r7, #8
 801209e:	4619      	mov	r1, r3
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f7ff ff2d 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80120a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80120aa:	2112      	movs	r1, #18
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 fa19 	bl	80124e4 <SDMMC_GetCmdResp1>
 80120b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120b4:	69fb      	ldr	r3, [r7, #28]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3720      	adds	r7, #32
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}

080120be <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80120be:	b580      	push	{r7, lr}
 80120c0:	b088      	sub	sp, #32
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80120cc:	2318      	movs	r3, #24
 80120ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120d6:	2300      	movs	r3, #0
 80120d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120e0:	f107 0308 	add.w	r3, r7, #8
 80120e4:	4619      	mov	r1, r3
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7ff ff0a 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80120ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80120f0:	2118      	movs	r1, #24
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f9f6 	bl	80124e4 <SDMMC_GetCmdResp1>
 80120f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120fa:	69fb      	ldr	r3, [r7, #28]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3720      	adds	r7, #32
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b088      	sub	sp, #32
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012112:	2319      	movs	r3, #25
 8012114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012116:	f44f 7380 	mov.w	r3, #256	; 0x100
 801211a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801211c:	2300      	movs	r3, #0
 801211e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012124:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012126:	f107 0308 	add.w	r3, r7, #8
 801212a:	4619      	mov	r1, r3
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7ff fee7 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012132:	f241 3288 	movw	r2, #5000	; 0x1388
 8012136:	2119      	movs	r1, #25
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 f9d3 	bl	80124e4 <SDMMC_GetCmdResp1>
 801213e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012140:	69fb      	ldr	r3, [r7, #28]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3720      	adds	r7, #32
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b088      	sub	sp, #32
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012154:	2300      	movs	r3, #0
 8012156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012158:	230c      	movs	r3, #12
 801215a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801215c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012162:	2300      	movs	r3, #0
 8012164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801216a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012184:	f107 0308 	add.w	r3, r7, #8
 8012188:	4619      	mov	r1, r3
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f7ff feb8 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012190:	4a0b      	ldr	r2, [pc, #44]	; (80121c0 <SDMMC_CmdStopTransfer+0x74>)
 8012192:	210c      	movs	r1, #12
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 f9a5 	bl	80124e4 <SDMMC_GetCmdResp1>
 801219a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80121ae:	d101      	bne.n	80121b4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80121b0:	2300      	movs	r3, #0
 80121b2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80121b4:	69fb      	ldr	r3, [r7, #28]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	05f5e100 	.word	0x05f5e100

080121c4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b088      	sub	sp, #32
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80121d2:	2307      	movs	r3, #7
 80121d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121dc:	2300      	movs	r3, #0
 80121de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121e6:	f107 0308 	add.w	r3, r7, #8
 80121ea:	4619      	mov	r1, r3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff fe87 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80121f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80121f6:	2107      	movs	r1, #7
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 f973 	bl	80124e4 <SDMMC_GetCmdResp1>
 80121fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012200:	69fb      	ldr	r3, [r7, #28]
}
 8012202:	4618      	mov	r0, r3
 8012204:	3720      	adds	r7, #32
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b088      	sub	sp, #32
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012212:	2300      	movs	r3, #0
 8012214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012216:	2300      	movs	r3, #0
 8012218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801221a:	2300      	movs	r3, #0
 801221c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801221e:	2300      	movs	r3, #0
 8012220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012226:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012228:	f107 0308 	add.w	r3, r7, #8
 801222c:	4619      	mov	r1, r3
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ff fe66 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 fb97 	bl	8012968 <SDMMC_GetCmdError>
 801223a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801223c:	69fb      	ldr	r3, [r7, #28]
}
 801223e:	4618      	mov	r0, r3
 8012240:	3720      	adds	r7, #32
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b088      	sub	sp, #32
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801224e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012254:	2308      	movs	r3, #8
 8012256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012258:	f44f 7380 	mov.w	r3, #256	; 0x100
 801225c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801225e:	2300      	movs	r3, #0
 8012260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012266:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012268:	f107 0308 	add.w	r3, r7, #8
 801226c:	4619      	mov	r1, r3
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff fe46 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f000 fb29 	bl	80128cc <SDMMC_GetCmdResp7>
 801227a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801227c:	69fb      	ldr	r3, [r7, #28]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3720      	adds	r7, #32
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}

08012286 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012286:	b580      	push	{r7, lr}
 8012288:	b088      	sub	sp, #32
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
 801228e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012294:	2337      	movs	r3, #55	; 0x37
 8012296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012298:	f44f 7380 	mov.w	r3, #256	; 0x100
 801229c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801229e:	2300      	movs	r3, #0
 80122a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122a8:	f107 0308 	add.w	r3, r7, #8
 80122ac:	4619      	mov	r1, r3
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f7ff fe26 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80122b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80122b8:	2137      	movs	r1, #55	; 0x37
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 f912 	bl	80124e4 <SDMMC_GetCmdResp1>
 80122c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122c2:	69fb      	ldr	r3, [r7, #28]
}
 80122c4:	4618      	mov	r0, r3
 80122c6:	3720      	adds	r7, #32
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b088      	sub	sp, #32
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80122da:	2329      	movs	r3, #41	; 0x29
 80122dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122e4:	2300      	movs	r3, #0
 80122e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122ee:	f107 0308 	add.w	r3, r7, #8
 80122f2:	4619      	mov	r1, r3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f7ff fe03 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 fa2e 	bl	801275c <SDMMC_GetCmdResp3>
 8012300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012302:	69fb      	ldr	r3, [r7, #28]
}
 8012304:	4618      	mov	r0, r3
 8012306:	3720      	adds	r7, #32
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b088      	sub	sp, #32
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801231a:	2306      	movs	r3, #6
 801231c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801231e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012324:	2300      	movs	r3, #0
 8012326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801232c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801232e:	f107 0308 	add.w	r3, r7, #8
 8012332:	4619      	mov	r1, r3
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7ff fde3 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801233a:	f241 3288 	movw	r2, #5000	; 0x1388
 801233e:	2106      	movs	r1, #6
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 f8cf 	bl	80124e4 <SDMMC_GetCmdResp1>
 8012346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012348:	69fb      	ldr	r3, [r7, #28]
}
 801234a:	4618      	mov	r0, r3
 801234c:	3720      	adds	r7, #32
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b088      	sub	sp, #32
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801235a:	2300      	movs	r3, #0
 801235c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801235e:	2333      	movs	r3, #51	; 0x33
 8012360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012368:	2300      	movs	r3, #0
 801236a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801236c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012372:	f107 0308 	add.w	r3, r7, #8
 8012376:	4619      	mov	r1, r3
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7ff fdc1 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012382:	2133      	movs	r1, #51	; 0x33
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f000 f8ad 	bl	80124e4 <SDMMC_GetCmdResp1>
 801238a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801238c:	69fb      	ldr	r3, [r7, #28]
}
 801238e:	4618      	mov	r0, r3
 8012390:	3720      	adds	r7, #32
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012396:	b580      	push	{r7, lr}
 8012398:	b088      	sub	sp, #32
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801239e:	2300      	movs	r3, #0
 80123a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80123a2:	2302      	movs	r3, #2
 80123a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80123a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80123aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123ac:	2300      	movs	r3, #0
 80123ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123b6:	f107 0308 	add.w	r3, r7, #8
 80123ba:	4619      	mov	r1, r3
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f7ff fd9f 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f000 f980 	bl	80126c8 <SDMMC_GetCmdResp2>
 80123c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ca:	69fb      	ldr	r3, [r7, #28]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3720      	adds	r7, #32
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b088      	sub	sp, #32
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80123e2:	2309      	movs	r3, #9
 80123e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80123e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80123ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123ec:	2300      	movs	r3, #0
 80123ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123f6:	f107 0308 	add.w	r3, r7, #8
 80123fa:	4619      	mov	r1, r3
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff fd7f 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 f960 	bl	80126c8 <SDMMC_GetCmdResp2>
 8012408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801240a:	69fb      	ldr	r3, [r7, #28]
}
 801240c:	4618      	mov	r0, r3
 801240e:	3720      	adds	r7, #32
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b088      	sub	sp, #32
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801241e:	2300      	movs	r3, #0
 8012420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012422:	2303      	movs	r3, #3
 8012424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012426:	f44f 7380 	mov.w	r3, #256	; 0x100
 801242a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801242c:	2300      	movs	r3, #0
 801242e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012436:	f107 0308 	add.w	r3, r7, #8
 801243a:	4619      	mov	r1, r3
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7ff fd5f 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012442:	683a      	ldr	r2, [r7, #0]
 8012444:	2103      	movs	r1, #3
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 f9c8 	bl	80127dc <SDMMC_GetCmdResp6>
 801244c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801244e:	69fb      	ldr	r3, [r7, #28]
}
 8012450:	4618      	mov	r0, r3
 8012452:	3720      	adds	r7, #32
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b088      	sub	sp, #32
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012466:	230d      	movs	r3, #13
 8012468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801246a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801246e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012470:	2300      	movs	r3, #0
 8012472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801247a:	f107 0308 	add.w	r3, r7, #8
 801247e:	4619      	mov	r1, r3
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f7ff fd3d 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012486:	f241 3288 	movw	r2, #5000	; 0x1388
 801248a:	210d      	movs	r1, #13
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 f829 	bl	80124e4 <SDMMC_GetCmdResp1>
 8012492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012494:	69fb      	ldr	r3, [r7, #28]
}
 8012496:	4618      	mov	r0, r3
 8012498:	3720      	adds	r7, #32
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b088      	sub	sp, #32
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80124a6:	2300      	movs	r3, #0
 80124a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80124aa:	230d      	movs	r3, #13
 80124ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124b4:	2300      	movs	r3, #0
 80124b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124be:	f107 0308 	add.w	r3, r7, #8
 80124c2:	4619      	mov	r1, r3
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7ff fd1b 	bl	8011f00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80124ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ce:	210d      	movs	r1, #13
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 f807 	bl	80124e4 <SDMMC_GetCmdResp1>
 80124d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124d8:	69fb      	ldr	r3, [r7, #28]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3720      	adds	r7, #32
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b088      	sub	sp, #32
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	460b      	mov	r3, r1
 80124ee:	607a      	str	r2, [r7, #4]
 80124f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80124f2:	4b70      	ldr	r3, [pc, #448]	; (80126b4 <SDMMC_GetCmdResp1+0x1d0>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a70      	ldr	r2, [pc, #448]	; (80126b8 <SDMMC_GetCmdResp1+0x1d4>)
 80124f8:	fba2 2303 	umull	r2, r3, r2, r3
 80124fc:	0a5a      	lsrs	r2, r3, #9
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	fb02 f303 	mul.w	r3, r2, r3
 8012504:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	1e5a      	subs	r2, r3, #1
 801250a:	61fa      	str	r2, [r7, #28]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d102      	bne.n	8012516 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012514:	e0c9      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801251a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	4b67      	ldr	r3, [pc, #412]	; (80126bc <SDMMC_GetCmdResp1+0x1d8>)
 8012520:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012522:	2b00      	cmp	r3, #0
 8012524:	d0ef      	beq.n	8012506 <SDMMC_GetCmdResp1+0x22>
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1ea      	bne.n	8012506 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012534:	f003 0304 	and.w	r3, r3, #4
 8012538:	2b00      	cmp	r3, #0
 801253a:	d004      	beq.n	8012546 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2204      	movs	r2, #4
 8012540:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012542:	2304      	movs	r3, #4
 8012544:	e0b1      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801254a:	f003 0301 	and.w	r3, r3, #1
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2201      	movs	r2, #1
 8012556:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012558:	2301      	movs	r3, #1
 801255a:	e0a6      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	4a58      	ldr	r2, [pc, #352]	; (80126c0 <SDMMC_GetCmdResp1+0x1dc>)
 8012560:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f7ff fcf6 	bl	8011f54 <SDMMC_GetCommandResponse>
 8012568:	4603      	mov	r3, r0
 801256a:	461a      	mov	r2, r3
 801256c:	7afb      	ldrb	r3, [r7, #11]
 801256e:	4293      	cmp	r3, r2
 8012570:	d001      	beq.n	8012576 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012572:	2301      	movs	r3, #1
 8012574:	e099      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012576:	2100      	movs	r1, #0
 8012578:	68f8      	ldr	r0, [r7, #12]
 801257a:	f7ff fcf8 	bl	8011f6e <SDMMC_GetResponse>
 801257e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012580:	697a      	ldr	r2, [r7, #20]
 8012582:	4b50      	ldr	r3, [pc, #320]	; (80126c4 <SDMMC_GetCmdResp1+0x1e0>)
 8012584:	4013      	ands	r3, r2
 8012586:	2b00      	cmp	r3, #0
 8012588:	d101      	bne.n	801258e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801258a:	2300      	movs	r3, #0
 801258c:	e08d      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2b00      	cmp	r3, #0
 8012592:	da02      	bge.n	801259a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012598:	e087      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d001      	beq.n	80125a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80125a4:	2340      	movs	r3, #64	; 0x40
 80125a6:	e080      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d001      	beq.n	80125b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80125b2:	2380      	movs	r3, #128	; 0x80
 80125b4:	e079      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d002      	beq.n	80125c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80125c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125c4:	e071      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d002      	beq.n	80125d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80125d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125d4:	e069      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80125e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125e4:	e061      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d002      	beq.n	80125f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80125f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125f4:	e059      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d002      	beq.n	8012606 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012604:	e051      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801260c:	2b00      	cmp	r3, #0
 801260e:	d002      	beq.n	8012616 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012614:	e049      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801261c:	2b00      	cmp	r3, #0
 801261e:	d002      	beq.n	8012626 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012624:	e041      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012634:	e039      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801263c:	2b00      	cmp	r3, #0
 801263e:	d002      	beq.n	8012646 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012644:	e031      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801264c:	2b00      	cmp	r3, #0
 801264e:	d002      	beq.n	8012656 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012654:	e029      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801265c:	2b00      	cmp	r3, #0
 801265e:	d002      	beq.n	8012666 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012660:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012664:	e021      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012670:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012674:	e019      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012684:	e011      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012690:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012694:	e009      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f003 0308 	and.w	r3, r3, #8
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80126a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80126a4:	e001      	b.n	80126aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80126a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3720      	adds	r7, #32
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	24000000 	.word	0x24000000
 80126b8:	10624dd3 	.word	0x10624dd3
 80126bc:	00200045 	.word	0x00200045
 80126c0:	002000c5 	.word	0x002000c5
 80126c4:	fdffe008 	.word	0xfdffe008

080126c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b085      	sub	sp, #20
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126d0:	4b1f      	ldr	r3, [pc, #124]	; (8012750 <SDMMC_GetCmdResp2+0x88>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4a1f      	ldr	r2, [pc, #124]	; (8012754 <SDMMC_GetCmdResp2+0x8c>)
 80126d6:	fba2 2303 	umull	r2, r3, r2, r3
 80126da:	0a5b      	lsrs	r3, r3, #9
 80126dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80126e0:	fb02 f303 	mul.w	r3, r2, r3
 80126e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	1e5a      	subs	r2, r3, #1
 80126ea:	60fa      	str	r2, [r7, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d102      	bne.n	80126f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126f4:	e026      	b.n	8012744 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012702:	2b00      	cmp	r3, #0
 8012704:	d0ef      	beq.n	80126e6 <SDMMC_GetCmdResp2+0x1e>
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801270c:	2b00      	cmp	r3, #0
 801270e:	d1ea      	bne.n	80126e6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012714:	f003 0304 	and.w	r3, r3, #4
 8012718:	2b00      	cmp	r3, #0
 801271a:	d004      	beq.n	8012726 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2204      	movs	r2, #4
 8012720:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012722:	2304      	movs	r3, #4
 8012724:	e00e      	b.n	8012744 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801272a:	f003 0301 	and.w	r3, r3, #1
 801272e:	2b00      	cmp	r3, #0
 8012730:	d004      	beq.n	801273c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2201      	movs	r2, #1
 8012736:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012738:	2301      	movs	r3, #1
 801273a:	e003      	b.n	8012744 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	4a06      	ldr	r2, [pc, #24]	; (8012758 <SDMMC_GetCmdResp2+0x90>)
 8012740:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012742:	2300      	movs	r3, #0
}
 8012744:	4618      	mov	r0, r3
 8012746:	3714      	adds	r7, #20
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr
 8012750:	24000000 	.word	0x24000000
 8012754:	10624dd3 	.word	0x10624dd3
 8012758:	002000c5 	.word	0x002000c5

0801275c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801275c:	b480      	push	{r7}
 801275e:	b085      	sub	sp, #20
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012764:	4b1a      	ldr	r3, [pc, #104]	; (80127d0 <SDMMC_GetCmdResp3+0x74>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4a1a      	ldr	r2, [pc, #104]	; (80127d4 <SDMMC_GetCmdResp3+0x78>)
 801276a:	fba2 2303 	umull	r2, r3, r2, r3
 801276e:	0a5b      	lsrs	r3, r3, #9
 8012770:	f241 3288 	movw	r2, #5000	; 0x1388
 8012774:	fb02 f303 	mul.w	r3, r2, r3
 8012778:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	1e5a      	subs	r2, r3, #1
 801277e:	60fa      	str	r2, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d102      	bne.n	801278a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012788:	e01b      	b.n	80127c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801278e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012796:	2b00      	cmp	r3, #0
 8012798:	d0ef      	beq.n	801277a <SDMMC_GetCmdResp3+0x1e>
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d1ea      	bne.n	801277a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a8:	f003 0304 	and.w	r3, r3, #4
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d004      	beq.n	80127ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2204      	movs	r2, #4
 80127b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127b6:	2304      	movs	r3, #4
 80127b8:	e003      	b.n	80127c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	4a06      	ldr	r2, [pc, #24]	; (80127d8 <SDMMC_GetCmdResp3+0x7c>)
 80127be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3714      	adds	r7, #20
 80127c6:	46bd      	mov	sp, r7
 80127c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop
 80127d0:	24000000 	.word	0x24000000
 80127d4:	10624dd3 	.word	0x10624dd3
 80127d8:	002000c5 	.word	0x002000c5

080127dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b088      	sub	sp, #32
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	460b      	mov	r3, r1
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127ea:	4b35      	ldr	r3, [pc, #212]	; (80128c0 <SDMMC_GetCmdResp6+0xe4>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4a35      	ldr	r2, [pc, #212]	; (80128c4 <SDMMC_GetCmdResp6+0xe8>)
 80127f0:	fba2 2303 	umull	r2, r3, r2, r3
 80127f4:	0a5b      	lsrs	r3, r3, #9
 80127f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80127fa:	fb02 f303 	mul.w	r3, r2, r3
 80127fe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	1e5a      	subs	r2, r3, #1
 8012804:	61fa      	str	r2, [r7, #28]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d102      	bne.n	8012810 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801280a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801280e:	e052      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012814:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801281c:	2b00      	cmp	r3, #0
 801281e:	d0ef      	beq.n	8012800 <SDMMC_GetCmdResp6+0x24>
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012826:	2b00      	cmp	r3, #0
 8012828:	d1ea      	bne.n	8012800 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801282e:	f003 0304 	and.w	r3, r3, #4
 8012832:	2b00      	cmp	r3, #0
 8012834:	d004      	beq.n	8012840 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	2204      	movs	r2, #4
 801283a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801283c:	2304      	movs	r3, #4
 801283e:	e03a      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012844:	f003 0301 	and.w	r3, r3, #1
 8012848:	2b00      	cmp	r3, #0
 801284a:	d004      	beq.n	8012856 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2201      	movs	r2, #1
 8012850:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012852:	2301      	movs	r3, #1
 8012854:	e02f      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012856:	68f8      	ldr	r0, [r7, #12]
 8012858:	f7ff fb7c 	bl	8011f54 <SDMMC_GetCommandResponse>
 801285c:	4603      	mov	r3, r0
 801285e:	461a      	mov	r2, r3
 8012860:	7afb      	ldrb	r3, [r7, #11]
 8012862:	4293      	cmp	r3, r2
 8012864:	d001      	beq.n	801286a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012866:	2301      	movs	r3, #1
 8012868:	e025      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	4a16      	ldr	r2, [pc, #88]	; (80128c8 <SDMMC_GetCmdResp6+0xec>)
 801286e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012870:	2100      	movs	r1, #0
 8012872:	68f8      	ldr	r0, [r7, #12]
 8012874:	f7ff fb7b 	bl	8011f6e <SDMMC_GetResponse>
 8012878:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012880:	2b00      	cmp	r3, #0
 8012882:	d106      	bne.n	8012892 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	0c1b      	lsrs	r3, r3, #16
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801288e:	2300      	movs	r3, #0
 8012890:	e011      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801289c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80128a0:	e009      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d002      	beq.n	80128b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80128ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128b0:	e001      	b.n	80128b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80128b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3720      	adds	r7, #32
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	24000000 	.word	0x24000000
 80128c4:	10624dd3 	.word	0x10624dd3
 80128c8:	002000c5 	.word	0x002000c5

080128cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b085      	sub	sp, #20
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128d4:	4b22      	ldr	r3, [pc, #136]	; (8012960 <SDMMC_GetCmdResp7+0x94>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a22      	ldr	r2, [pc, #136]	; (8012964 <SDMMC_GetCmdResp7+0x98>)
 80128da:	fba2 2303 	umull	r2, r3, r2, r3
 80128de:	0a5b      	lsrs	r3, r3, #9
 80128e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80128e4:	fb02 f303 	mul.w	r3, r2, r3
 80128e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	1e5a      	subs	r2, r3, #1
 80128ee:	60fa      	str	r2, [r7, #12]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d102      	bne.n	80128fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128f8:	e02c      	b.n	8012954 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012906:	2b00      	cmp	r3, #0
 8012908:	d0ef      	beq.n	80128ea <SDMMC_GetCmdResp7+0x1e>
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1ea      	bne.n	80128ea <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012918:	f003 0304 	and.w	r3, r3, #4
 801291c:	2b00      	cmp	r3, #0
 801291e:	d004      	beq.n	801292a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2204      	movs	r2, #4
 8012924:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012926:	2304      	movs	r3, #4
 8012928:	e014      	b.n	8012954 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801292e:	f003 0301 	and.w	r3, r3, #1
 8012932:	2b00      	cmp	r3, #0
 8012934:	d004      	beq.n	8012940 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2201      	movs	r2, #1
 801293a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801293c:	2301      	movs	r3, #1
 801293e:	e009      	b.n	8012954 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012948:	2b00      	cmp	r3, #0
 801294a:	d002      	beq.n	8012952 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2240      	movs	r2, #64	; 0x40
 8012950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012952:	2300      	movs	r3, #0

}
 8012954:	4618      	mov	r0, r3
 8012956:	3714      	adds	r7, #20
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr
 8012960:	24000000 	.word	0x24000000
 8012964:	10624dd3 	.word	0x10624dd3

08012968 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012968:	b480      	push	{r7}
 801296a:	b085      	sub	sp, #20
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012970:	4b11      	ldr	r3, [pc, #68]	; (80129b8 <SDMMC_GetCmdError+0x50>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4a11      	ldr	r2, [pc, #68]	; (80129bc <SDMMC_GetCmdError+0x54>)
 8012976:	fba2 2303 	umull	r2, r3, r2, r3
 801297a:	0a5b      	lsrs	r3, r3, #9
 801297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012980:	fb02 f303 	mul.w	r3, r2, r3
 8012984:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	1e5a      	subs	r2, r3, #1
 801298a:	60fa      	str	r2, [r7, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d102      	bne.n	8012996 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012994:	e009      	b.n	80129aa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0f1      	beq.n	8012986 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	4a06      	ldr	r2, [pc, #24]	; (80129c0 <SDMMC_GetCmdError+0x58>)
 80129a6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3714      	adds	r7, #20
 80129ae:	46bd      	mov	sp, r7
 80129b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b4:	4770      	bx	lr
 80129b6:	bf00      	nop
 80129b8:	24000000 	.word	0x24000000
 80129bc:	10624dd3 	.word	0x10624dd3
 80129c0:	002000c5 	.word	0x002000c5

080129c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80129c4:	b084      	sub	sp, #16
 80129c6:	b580      	push	{r7, lr}
 80129c8:	b084      	sub	sp, #16
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	f107 001c 	add.w	r0, r7, #28
 80129d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80129d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d120      	bne.n	8012a1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	68da      	ldr	r2, [r3, #12]
 80129ec:	4b2a      	ldr	r3, [pc, #168]	; (8012a98 <USB_CoreInit+0xd4>)
 80129ee:	4013      	ands	r3, r2
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d105      	bne.n	8012a12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f001 faf8 	bl	8014008 <USB_CoreReset>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73fb      	strb	r3, [r7, #15]
 8012a1c:	e01a      	b.n	8012a54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f001 faec 	bl	8014008 <USB_CoreReset>
 8012a30:	4603      	mov	r3, r0
 8012a32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d106      	bne.n	8012a48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	639a      	str	r2, [r3, #56]	; 0x38
 8012a46:	e005      	b.n	8012a54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d116      	bne.n	8012a88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a68:	4b0c      	ldr	r3, [pc, #48]	; (8012a9c <USB_CoreInit+0xd8>)
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	689b      	ldr	r3, [r3, #8]
 8012a74:	f043 0206 	orr.w	r2, r3, #6
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	f043 0220 	orr.w	r2, r3, #32
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012a94:	b004      	add	sp, #16
 8012a96:	4770      	bx	lr
 8012a98:	ffbdffbf 	.word	0xffbdffbf
 8012a9c:	03ee0000 	.word	0x03ee0000

08012aa0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b087      	sub	sp, #28
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	60f8      	str	r0, [r7, #12]
 8012aa8:	60b9      	str	r1, [r7, #8]
 8012aaa:	4613      	mov	r3, r2
 8012aac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012aae:	79fb      	ldrb	r3, [r7, #7]
 8012ab0:	2b02      	cmp	r3, #2
 8012ab2:	d165      	bne.n	8012b80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	4a41      	ldr	r2, [pc, #260]	; (8012bbc <USB_SetTurnaroundTime+0x11c>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d906      	bls.n	8012aca <USB_SetTurnaroundTime+0x2a>
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	4a40      	ldr	r2, [pc, #256]	; (8012bc0 <USB_SetTurnaroundTime+0x120>)
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	d202      	bcs.n	8012aca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012ac4:	230f      	movs	r3, #15
 8012ac6:	617b      	str	r3, [r7, #20]
 8012ac8:	e062      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	4a3c      	ldr	r2, [pc, #240]	; (8012bc0 <USB_SetTurnaroundTime+0x120>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d306      	bcc.n	8012ae0 <USB_SetTurnaroundTime+0x40>
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	4a3b      	ldr	r2, [pc, #236]	; (8012bc4 <USB_SetTurnaroundTime+0x124>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d202      	bcs.n	8012ae0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012ada:	230e      	movs	r3, #14
 8012adc:	617b      	str	r3, [r7, #20]
 8012ade:	e057      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	4a38      	ldr	r2, [pc, #224]	; (8012bc4 <USB_SetTurnaroundTime+0x124>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d306      	bcc.n	8012af6 <USB_SetTurnaroundTime+0x56>
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	4a37      	ldr	r2, [pc, #220]	; (8012bc8 <USB_SetTurnaroundTime+0x128>)
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d202      	bcs.n	8012af6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012af0:	230d      	movs	r3, #13
 8012af2:	617b      	str	r3, [r7, #20]
 8012af4:	e04c      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	4a33      	ldr	r2, [pc, #204]	; (8012bc8 <USB_SetTurnaroundTime+0x128>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d306      	bcc.n	8012b0c <USB_SetTurnaroundTime+0x6c>
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	4a32      	ldr	r2, [pc, #200]	; (8012bcc <USB_SetTurnaroundTime+0x12c>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d802      	bhi.n	8012b0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012b06:	230c      	movs	r3, #12
 8012b08:	617b      	str	r3, [r7, #20]
 8012b0a:	e041      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	4a2f      	ldr	r2, [pc, #188]	; (8012bcc <USB_SetTurnaroundTime+0x12c>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d906      	bls.n	8012b22 <USB_SetTurnaroundTime+0x82>
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	4a2e      	ldr	r2, [pc, #184]	; (8012bd0 <USB_SetTurnaroundTime+0x130>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d802      	bhi.n	8012b22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012b1c:	230b      	movs	r3, #11
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	e036      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	4a2a      	ldr	r2, [pc, #168]	; (8012bd0 <USB_SetTurnaroundTime+0x130>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d906      	bls.n	8012b38 <USB_SetTurnaroundTime+0x98>
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	4a29      	ldr	r2, [pc, #164]	; (8012bd4 <USB_SetTurnaroundTime+0x134>)
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	d802      	bhi.n	8012b38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012b32:	230a      	movs	r3, #10
 8012b34:	617b      	str	r3, [r7, #20]
 8012b36:	e02b      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	4a26      	ldr	r2, [pc, #152]	; (8012bd4 <USB_SetTurnaroundTime+0x134>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d906      	bls.n	8012b4e <USB_SetTurnaroundTime+0xae>
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	4a25      	ldr	r2, [pc, #148]	; (8012bd8 <USB_SetTurnaroundTime+0x138>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d202      	bcs.n	8012b4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012b48:	2309      	movs	r3, #9
 8012b4a:	617b      	str	r3, [r7, #20]
 8012b4c:	e020      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	4a21      	ldr	r2, [pc, #132]	; (8012bd8 <USB_SetTurnaroundTime+0x138>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d306      	bcc.n	8012b64 <USB_SetTurnaroundTime+0xc4>
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	4a20      	ldr	r2, [pc, #128]	; (8012bdc <USB_SetTurnaroundTime+0x13c>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d802      	bhi.n	8012b64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012b5e:	2308      	movs	r3, #8
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	e015      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	4a1d      	ldr	r2, [pc, #116]	; (8012bdc <USB_SetTurnaroundTime+0x13c>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d906      	bls.n	8012b7a <USB_SetTurnaroundTime+0xda>
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	4a1c      	ldr	r2, [pc, #112]	; (8012be0 <USB_SetTurnaroundTime+0x140>)
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d202      	bcs.n	8012b7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012b74:	2307      	movs	r3, #7
 8012b76:	617b      	str	r3, [r7, #20]
 8012b78:	e00a      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012b7a:	2306      	movs	r3, #6
 8012b7c:	617b      	str	r3, [r7, #20]
 8012b7e:	e007      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012b80:	79fb      	ldrb	r3, [r7, #7]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d102      	bne.n	8012b8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012b86:	2309      	movs	r3, #9
 8012b88:	617b      	str	r3, [r7, #20]
 8012b8a:	e001      	b.n	8012b90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012b8c:	2309      	movs	r3, #9
 8012b8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	68da      	ldr	r2, [r3, #12]
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	029b      	lsls	r3, r3, #10
 8012ba4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012ba8:	431a      	orrs	r2, r3
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	371c      	adds	r7, #28
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr
 8012bbc:	00d8acbf 	.word	0x00d8acbf
 8012bc0:	00e4e1c0 	.word	0x00e4e1c0
 8012bc4:	00f42400 	.word	0x00f42400
 8012bc8:	01067380 	.word	0x01067380
 8012bcc:	011a499f 	.word	0x011a499f
 8012bd0:	01312cff 	.word	0x01312cff
 8012bd4:	014ca43f 	.word	0x014ca43f
 8012bd8:	016e3600 	.word	0x016e3600
 8012bdc:	01a6ab1f 	.word	0x01a6ab1f
 8012be0:	01e84800 	.word	0x01e84800

08012be4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	689b      	ldr	r3, [r3, #8]
 8012bf0:	f043 0201 	orr.w	r2, r3, #1
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	370c      	adds	r7, #12
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr

08012c06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c06:	b480      	push	{r7}
 8012c08:	b083      	sub	sp, #12
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	f023 0201 	bic.w	r2, r3, #1
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c1a:	2300      	movs	r3, #0
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	370c      	adds	r7, #12
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	460b      	mov	r3, r1
 8012c32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012c34:	2300      	movs	r3, #0
 8012c36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012c44:	78fb      	ldrb	r3, [r7, #3]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d115      	bne.n	8012c76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012c56:	2001      	movs	r0, #1
 8012c58:	f7f1 fd56 	bl	8004708 <HAL_Delay>
      ms++;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f001 f93f 	bl	8013ee6 <USB_GetMode>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d01e      	beq.n	8012cac <USB_SetCurrentMode+0x84>
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	2b31      	cmp	r3, #49	; 0x31
 8012c72:	d9f0      	bls.n	8012c56 <USB_SetCurrentMode+0x2e>
 8012c74:	e01a      	b.n	8012cac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012c76:	78fb      	ldrb	r3, [r7, #3]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d115      	bne.n	8012ca8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012c88:	2001      	movs	r0, #1
 8012c8a:	f7f1 fd3d 	bl	8004708 <HAL_Delay>
      ms++;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	3301      	adds	r3, #1
 8012c92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f001 f926 	bl	8013ee6 <USB_GetMode>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d005      	beq.n	8012cac <USB_SetCurrentMode+0x84>
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b31      	cmp	r3, #49	; 0x31
 8012ca4:	d9f0      	bls.n	8012c88 <USB_SetCurrentMode+0x60>
 8012ca6:	e001      	b.n	8012cac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	e005      	b.n	8012cb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2b32      	cmp	r3, #50	; 0x32
 8012cb0:	d101      	bne.n	8012cb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e000      	b.n	8012cb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012cb6:	2300      	movs	r3, #0
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3710      	adds	r7, #16
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b086      	sub	sp, #24
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012cda:	2300      	movs	r3, #0
 8012cdc:	613b      	str	r3, [r7, #16]
 8012cde:	e009      	b.n	8012cf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	3340      	adds	r3, #64	; 0x40
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	4413      	add	r3, r2
 8012cea:	2200      	movs	r2, #0
 8012cec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	613b      	str	r3, [r7, #16]
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	2b0e      	cmp	r3, #14
 8012cf8:	d9f2      	bls.n	8012ce0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d11c      	bne.n	8012d3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	68fa      	ldr	r2, [r7, #12]
 8012d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d0e:	f043 0302 	orr.w	r3, r3, #2
 8012d12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	601a      	str	r2, [r3, #0]
 8012d38:	e005      	b.n	8012d46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	2300      	movs	r3, #0
 8012d50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d58:	4619      	mov	r1, r3
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d60:	461a      	mov	r2, r3
 8012d62:	680b      	ldr	r3, [r1, #0]
 8012d64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d10c      	bne.n	8012d86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d104      	bne.n	8012d7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012d72:	2100      	movs	r1, #0
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 f965 	bl	8013044 <USB_SetDevSpeed>
 8012d7a:	e008      	b.n	8012d8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f000 f960 	bl	8013044 <USB_SetDevSpeed>
 8012d84:	e003      	b.n	8012d8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012d86:	2103      	movs	r1, #3
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 f95b 	bl	8013044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012d8e:	2110      	movs	r1, #16
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 f8f3 	bl	8012f7c <USB_FlushTxFifo>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d001      	beq.n	8012da0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 f91f 	bl	8012fe4 <USB_FlushRxFifo>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d001      	beq.n	8012db0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012dac:	2301      	movs	r3, #1
 8012dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012db6:	461a      	mov	r2, r3
 8012db8:	2300      	movs	r3, #0
 8012dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dce:	461a      	mov	r2, r3
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	613b      	str	r3, [r7, #16]
 8012dd8:	e043      	b.n	8012e62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	015a      	lsls	r2, r3, #5
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	4413      	add	r3, r2
 8012de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012df0:	d118      	bne.n	8012e24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d10a      	bne.n	8012e0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	015a      	lsls	r2, r3, #5
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	4413      	add	r3, r2
 8012e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e04:	461a      	mov	r2, r3
 8012e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012e0a:	6013      	str	r3, [r2, #0]
 8012e0c:	e013      	b.n	8012e36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	015a      	lsls	r2, r3, #5
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	4413      	add	r3, r2
 8012e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012e20:	6013      	str	r3, [r2, #0]
 8012e22:	e008      	b.n	8012e36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	015a      	lsls	r2, r3, #5
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	4413      	add	r3, r2
 8012e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e30:	461a      	mov	r2, r3
 8012e32:	2300      	movs	r3, #0
 8012e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	015a      	lsls	r2, r3, #5
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e42:	461a      	mov	r2, r3
 8012e44:	2300      	movs	r3, #0
 8012e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	015a      	lsls	r2, r3, #5
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	4413      	add	r3, r2
 8012e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e54:	461a      	mov	r2, r3
 8012e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	613b      	str	r3, [r7, #16]
 8012e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e64:	693a      	ldr	r2, [r7, #16]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d3b7      	bcc.n	8012dda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	613b      	str	r3, [r7, #16]
 8012e6e:	e043      	b.n	8012ef8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	015a      	lsls	r2, r3, #5
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4413      	add	r3, r2
 8012e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e86:	d118      	bne.n	8012eba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d10a      	bne.n	8012ea4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	015a      	lsls	r2, r3, #5
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	4413      	add	r3, r2
 8012e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ea0:	6013      	str	r3, [r2, #0]
 8012ea2:	e013      	b.n	8012ecc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	015a      	lsls	r2, r3, #5
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	4413      	add	r3, r2
 8012eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012eb6:	6013      	str	r3, [r2, #0]
 8012eb8:	e008      	b.n	8012ecc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	015a      	lsls	r2, r3, #5
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	2300      	movs	r3, #0
 8012eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	015a      	lsls	r2, r3, #5
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ed8:	461a      	mov	r2, r3
 8012eda:	2300      	movs	r3, #0
 8012edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eea:	461a      	mov	r2, r3
 8012eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	613b      	str	r3, [r7, #16]
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efa:	693a      	ldr	r2, [r7, #16]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d3b7      	bcc.n	8012e70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f06:	691b      	ldr	r3, [r3, #16]
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d105      	bne.n	8012f34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	699b      	ldr	r3, [r3, #24]
 8012f2c:	f043 0210 	orr.w	r2, r3, #16
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	699a      	ldr	r2, [r3, #24]
 8012f38:	4b0e      	ldr	r3, [pc, #56]	; (8012f74 <USB_DevInit+0x2b4>)
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d005      	beq.n	8012f52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	699b      	ldr	r3, [r3, #24]
 8012f4a:	f043 0208 	orr.w	r2, r3, #8
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d105      	bne.n	8012f64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	699a      	ldr	r2, [r3, #24]
 8012f5c:	4b06      	ldr	r3, [pc, #24]	; (8012f78 <USB_DevInit+0x2b8>)
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3718      	adds	r7, #24
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f70:	b004      	add	sp, #16
 8012f72:	4770      	bx	lr
 8012f74:	803c3800 	.word	0x803c3800
 8012f78:	40000004 	.word	0x40000004

08012f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012f86:	2300      	movs	r3, #0
 8012f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4a13      	ldr	r2, [pc, #76]	; (8012fe0 <USB_FlushTxFifo+0x64>)
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d901      	bls.n	8012f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012f98:	2303      	movs	r3, #3
 8012f9a:	e01b      	b.n	8012fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	691b      	ldr	r3, [r3, #16]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	daf2      	bge.n	8012f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	019b      	lsls	r3, r3, #6
 8012fac:	f043 0220 	orr.w	r2, r3, #32
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	4a08      	ldr	r2, [pc, #32]	; (8012fe0 <USB_FlushTxFifo+0x64>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d901      	bls.n	8012fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012fc2:	2303      	movs	r3, #3
 8012fc4:	e006      	b.n	8012fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	691b      	ldr	r3, [r3, #16]
 8012fca:	f003 0320 	and.w	r3, r3, #32
 8012fce:	2b20      	cmp	r3, #32
 8012fd0:	d0f0      	beq.n	8012fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr
 8012fe0:	00030d40 	.word	0x00030d40

08012fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012fec:	2300      	movs	r3, #0
 8012fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	4a11      	ldr	r2, [pc, #68]	; (8013040 <USB_FlushRxFifo+0x5c>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d901      	bls.n	8013002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012ffe:	2303      	movs	r3, #3
 8013000:	e018      	b.n	8013034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	691b      	ldr	r3, [r3, #16]
 8013006:	2b00      	cmp	r3, #0
 8013008:	daf2      	bge.n	8012ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801300a:	2300      	movs	r3, #0
 801300c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2210      	movs	r2, #16
 8013012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	3301      	adds	r3, #1
 8013018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	4a08      	ldr	r2, [pc, #32]	; (8013040 <USB_FlushRxFifo+0x5c>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d901      	bls.n	8013026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013022:	2303      	movs	r3, #3
 8013024:	e006      	b.n	8013034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	691b      	ldr	r3, [r3, #16]
 801302a:	f003 0310 	and.w	r3, r3, #16
 801302e:	2b10      	cmp	r3, #16
 8013030:	d0f0      	beq.n	8013014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3714      	adds	r7, #20
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr
 8013040:	00030d40 	.word	0x00030d40

08013044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013044:	b480      	push	{r7}
 8013046:	b085      	sub	sp, #20
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	460b      	mov	r3, r1
 801304e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	78fb      	ldrb	r3, [r7, #3]
 801305e:	68f9      	ldr	r1, [r7, #12]
 8013060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013064:	4313      	orrs	r3, r2
 8013066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013068:	2300      	movs	r3, #0
}
 801306a:	4618      	mov	r0, r3
 801306c:	3714      	adds	r7, #20
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr

08013076 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013076:	b480      	push	{r7}
 8013078:	b087      	sub	sp, #28
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	f003 0306 	and.w	r3, r3, #6
 801308e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d102      	bne.n	801309c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013096:	2300      	movs	r3, #0
 8013098:	75fb      	strb	r3, [r7, #23]
 801309a:	e00a      	b.n	80130b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2b02      	cmp	r3, #2
 80130a0:	d002      	beq.n	80130a8 <USB_GetDevSpeed+0x32>
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2b06      	cmp	r3, #6
 80130a6:	d102      	bne.n	80130ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80130a8:	2302      	movs	r3, #2
 80130aa:	75fb      	strb	r3, [r7, #23]
 80130ac:	e001      	b.n	80130b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80130ae:	230f      	movs	r3, #15
 80130b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80130b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	371c      	adds	r7, #28
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr

080130c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	785b      	ldrb	r3, [r3, #1]
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d139      	bne.n	8013150 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130e2:	69da      	ldr	r2, [r3, #28]
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	f003 030f 	and.w	r3, r3, #15
 80130ec:	2101      	movs	r1, #1
 80130ee:	fa01 f303 	lsl.w	r3, r1, r3
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	68f9      	ldr	r1, [r7, #12]
 80130f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130fa:	4313      	orrs	r3, r2
 80130fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	015a      	lsls	r2, r3, #5
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	4413      	add	r3, r2
 8013106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013110:	2b00      	cmp	r3, #0
 8013112:	d153      	bne.n	80131bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	015a      	lsls	r2, r3, #5
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	4413      	add	r3, r2
 801311c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	791b      	ldrb	r3, [r3, #4]
 801312e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013130:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	059b      	lsls	r3, r3, #22
 8013136:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013138:	431a      	orrs	r2, r3
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	0159      	lsls	r1, r3, #5
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	440b      	add	r3, r1
 8013142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013146:	4619      	mov	r1, r3
 8013148:	4b20      	ldr	r3, [pc, #128]	; (80131cc <USB_ActivateEndpoint+0x10c>)
 801314a:	4313      	orrs	r3, r2
 801314c:	600b      	str	r3, [r1, #0]
 801314e:	e035      	b.n	80131bc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013156:	69da      	ldr	r2, [r3, #28]
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	f003 030f 	and.w	r3, r3, #15
 8013160:	2101      	movs	r1, #1
 8013162:	fa01 f303 	lsl.w	r3, r1, r3
 8013166:	041b      	lsls	r3, r3, #16
 8013168:	68f9      	ldr	r1, [r7, #12]
 801316a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801316e:	4313      	orrs	r3, r2
 8013170:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	015a      	lsls	r2, r3, #5
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	4413      	add	r3, r2
 801317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013184:	2b00      	cmp	r3, #0
 8013186:	d119      	bne.n	80131bc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	015a      	lsls	r2, r3, #5
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4413      	add	r3, r2
 8013190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	689b      	ldr	r3, [r3, #8]
 801319a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	791b      	ldrb	r3, [r3, #4]
 80131a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80131a4:	430b      	orrs	r3, r1
 80131a6:	431a      	orrs	r2, r3
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	0159      	lsls	r1, r3, #5
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	440b      	add	r3, r1
 80131b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131b4:	4619      	mov	r1, r3
 80131b6:	4b05      	ldr	r3, [pc, #20]	; (80131cc <USB_ActivateEndpoint+0x10c>)
 80131b8:	4313      	orrs	r3, r2
 80131ba:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3714      	adds	r7, #20
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	10008000 	.word	0x10008000

080131d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b085      	sub	sp, #20
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	785b      	ldrb	r3, [r3, #1]
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d161      	bne.n	80132b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	015a      	lsls	r2, r3, #5
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	4413      	add	r3, r2
 80131f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013202:	d11f      	bne.n	8013244 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	015a      	lsls	r2, r3, #5
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	4413      	add	r3, r2
 801320c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	0151      	lsls	r1, r2, #5
 8013216:	68fa      	ldr	r2, [r7, #12]
 8013218:	440a      	add	r2, r1
 801321a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801321e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013222:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	015a      	lsls	r2, r3, #5
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	4413      	add	r3, r2
 801322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	0151      	lsls	r1, r2, #5
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	440a      	add	r2, r1
 801323a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801323e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013242:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801324a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	f003 030f 	and.w	r3, r3, #15
 8013254:	2101      	movs	r1, #1
 8013256:	fa01 f303 	lsl.w	r3, r1, r3
 801325a:	b29b      	uxth	r3, r3
 801325c:	43db      	mvns	r3, r3
 801325e:	68f9      	ldr	r1, [r7, #12]
 8013260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013264:	4013      	ands	r3, r2
 8013266:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801326e:	69da      	ldr	r2, [r3, #28]
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	f003 030f 	and.w	r3, r3, #15
 8013278:	2101      	movs	r1, #1
 801327a:	fa01 f303 	lsl.w	r3, r1, r3
 801327e:	b29b      	uxth	r3, r3
 8013280:	43db      	mvns	r3, r3
 8013282:	68f9      	ldr	r1, [r7, #12]
 8013284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013288:	4013      	ands	r3, r2
 801328a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	015a      	lsls	r2, r3, #5
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	4413      	add	r3, r2
 8013294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	0159      	lsls	r1, r3, #5
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	440b      	add	r3, r1
 80132a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132a6:	4619      	mov	r1, r3
 80132a8:	4b35      	ldr	r3, [pc, #212]	; (8013380 <USB_DeactivateEndpoint+0x1b0>)
 80132aa:	4013      	ands	r3, r2
 80132ac:	600b      	str	r3, [r1, #0]
 80132ae:	e060      	b.n	8013372 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	015a      	lsls	r2, r3, #5
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	4413      	add	r3, r2
 80132b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132c6:	d11f      	bne.n	8013308 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	015a      	lsls	r2, r3, #5
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	4413      	add	r3, r2
 80132d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	68ba      	ldr	r2, [r7, #8]
 80132d8:	0151      	lsls	r1, r2, #5
 80132da:	68fa      	ldr	r2, [r7, #12]
 80132dc:	440a      	add	r2, r1
 80132de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80132e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	015a      	lsls	r2, r3, #5
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	4413      	add	r3, r2
 80132f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	68ba      	ldr	r2, [r7, #8]
 80132f8:	0151      	lsls	r1, r2, #5
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	440a      	add	r2, r1
 80132fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013306:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	f003 030f 	and.w	r3, r3, #15
 8013318:	2101      	movs	r1, #1
 801331a:	fa01 f303 	lsl.w	r3, r1, r3
 801331e:	041b      	lsls	r3, r3, #16
 8013320:	43db      	mvns	r3, r3
 8013322:	68f9      	ldr	r1, [r7, #12]
 8013324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013328:	4013      	ands	r3, r2
 801332a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013332:	69da      	ldr	r2, [r3, #28]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 030f 	and.w	r3, r3, #15
 801333c:	2101      	movs	r1, #1
 801333e:	fa01 f303 	lsl.w	r3, r1, r3
 8013342:	041b      	lsls	r3, r3, #16
 8013344:	43db      	mvns	r3, r3
 8013346:	68f9      	ldr	r1, [r7, #12]
 8013348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801334c:	4013      	ands	r3, r2
 801334e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	015a      	lsls	r2, r3, #5
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	4413      	add	r3, r2
 8013358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	0159      	lsls	r1, r3, #5
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	440b      	add	r3, r1
 8013366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801336a:	4619      	mov	r1, r3
 801336c:	4b05      	ldr	r3, [pc, #20]	; (8013384 <USB_DeactivateEndpoint+0x1b4>)
 801336e:	4013      	ands	r3, r2
 8013370:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013372:	2300      	movs	r3, #0
}
 8013374:	4618      	mov	r0, r3
 8013376:	3714      	adds	r7, #20
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr
 8013380:	ec337800 	.word	0xec337800
 8013384:	eff37800 	.word	0xeff37800

08013388 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b08a      	sub	sp, #40	; 0x28
 801338c:	af02      	add	r7, sp, #8
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
 8013392:	4613      	mov	r3, r2
 8013394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	785b      	ldrb	r3, [r3, #1]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	f040 8181 	bne.w	80136ac <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d132      	bne.n	8013418 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80133b2:	69bb      	ldr	r3, [r7, #24]
 80133b4:	015a      	lsls	r2, r3, #5
 80133b6:	69fb      	ldr	r3, [r7, #28]
 80133b8:	4413      	add	r3, r2
 80133ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133be:	691a      	ldr	r2, [r3, #16]
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	0159      	lsls	r1, r3, #5
 80133c4:	69fb      	ldr	r3, [r7, #28]
 80133c6:	440b      	add	r3, r1
 80133c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133cc:	4619      	mov	r1, r3
 80133ce:	4ba5      	ldr	r3, [pc, #660]	; (8013664 <USB_EPStartXfer+0x2dc>)
 80133d0:	4013      	ands	r3, r2
 80133d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	015a      	lsls	r2, r3, #5
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	4413      	add	r3, r2
 80133dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133e0:	691b      	ldr	r3, [r3, #16]
 80133e2:	69ba      	ldr	r2, [r7, #24]
 80133e4:	0151      	lsls	r1, r2, #5
 80133e6:	69fa      	ldr	r2, [r7, #28]
 80133e8:	440a      	add	r2, r1
 80133ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	015a      	lsls	r2, r3, #5
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	4413      	add	r3, r2
 80133fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013400:	691a      	ldr	r2, [r3, #16]
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	0159      	lsls	r1, r3, #5
 8013406:	69fb      	ldr	r3, [r7, #28]
 8013408:	440b      	add	r3, r1
 801340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801340e:	4619      	mov	r1, r3
 8013410:	4b95      	ldr	r3, [pc, #596]	; (8013668 <USB_EPStartXfer+0x2e0>)
 8013412:	4013      	ands	r3, r2
 8013414:	610b      	str	r3, [r1, #16]
 8013416:	e092      	b.n	801353e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	015a      	lsls	r2, r3, #5
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	4413      	add	r3, r2
 8013420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013424:	691a      	ldr	r2, [r3, #16]
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	0159      	lsls	r1, r3, #5
 801342a:	69fb      	ldr	r3, [r7, #28]
 801342c:	440b      	add	r3, r1
 801342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013432:	4619      	mov	r1, r3
 8013434:	4b8c      	ldr	r3, [pc, #560]	; (8013668 <USB_EPStartXfer+0x2e0>)
 8013436:	4013      	ands	r3, r2
 8013438:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	015a      	lsls	r2, r3, #5
 801343e:	69fb      	ldr	r3, [r7, #28]
 8013440:	4413      	add	r3, r2
 8013442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013446:	691a      	ldr	r2, [r3, #16]
 8013448:	69bb      	ldr	r3, [r7, #24]
 801344a:	0159      	lsls	r1, r3, #5
 801344c:	69fb      	ldr	r3, [r7, #28]
 801344e:	440b      	add	r3, r1
 8013450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013454:	4619      	mov	r1, r3
 8013456:	4b83      	ldr	r3, [pc, #524]	; (8013664 <USB_EPStartXfer+0x2dc>)
 8013458:	4013      	ands	r3, r2
 801345a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d11a      	bne.n	8013498 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	691a      	ldr	r2, [r3, #16]
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	429a      	cmp	r2, r3
 801346c:	d903      	bls.n	8013476 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	689a      	ldr	r2, [r3, #8]
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	015a      	lsls	r2, r3, #5
 801347a:	69fb      	ldr	r3, [r7, #28]
 801347c:	4413      	add	r3, r2
 801347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013482:	691b      	ldr	r3, [r3, #16]
 8013484:	69ba      	ldr	r2, [r7, #24]
 8013486:	0151      	lsls	r1, r2, #5
 8013488:	69fa      	ldr	r2, [r7, #28]
 801348a:	440a      	add	r2, r1
 801348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013494:	6113      	str	r3, [r2, #16]
 8013496:	e01b      	b.n	80134d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	015a      	lsls	r2, r3, #5
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	4413      	add	r3, r2
 80134a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	6919      	ldr	r1, [r3, #16]
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	440b      	add	r3, r1
 80134b0:	1e59      	subs	r1, r3, #1
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	689b      	ldr	r3, [r3, #8]
 80134b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80134ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80134bc:	4b6b      	ldr	r3, [pc, #428]	; (801366c <USB_EPStartXfer+0x2e4>)
 80134be:	400b      	ands	r3, r1
 80134c0:	69b9      	ldr	r1, [r7, #24]
 80134c2:	0148      	lsls	r0, r1, #5
 80134c4:	69f9      	ldr	r1, [r7, #28]
 80134c6:	4401      	add	r1, r0
 80134c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80134cc:	4313      	orrs	r3, r2
 80134ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	015a      	lsls	r2, r3, #5
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	4413      	add	r3, r2
 80134d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134dc:	691a      	ldr	r2, [r3, #16]
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	691b      	ldr	r3, [r3, #16]
 80134e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134e6:	69b9      	ldr	r1, [r7, #24]
 80134e8:	0148      	lsls	r0, r1, #5
 80134ea:	69f9      	ldr	r1, [r7, #28]
 80134ec:	4401      	add	r1, r0
 80134ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80134f2:	4313      	orrs	r3, r2
 80134f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	791b      	ldrb	r3, [r3, #4]
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	d11f      	bne.n	801353e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	015a      	lsls	r2, r3, #5
 8013502:	69fb      	ldr	r3, [r7, #28]
 8013504:	4413      	add	r3, r2
 8013506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801350a:	691b      	ldr	r3, [r3, #16]
 801350c:	69ba      	ldr	r2, [r7, #24]
 801350e:	0151      	lsls	r1, r2, #5
 8013510:	69fa      	ldr	r2, [r7, #28]
 8013512:	440a      	add	r2, r1
 8013514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013518:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801351c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	015a      	lsls	r2, r3, #5
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	4413      	add	r3, r2
 8013526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352a:	691b      	ldr	r3, [r3, #16]
 801352c:	69ba      	ldr	r2, [r7, #24]
 801352e:	0151      	lsls	r1, r2, #5
 8013530:	69fa      	ldr	r2, [r7, #28]
 8013532:	440a      	add	r2, r1
 8013534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801353c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801353e:	79fb      	ldrb	r3, [r7, #7]
 8013540:	2b01      	cmp	r3, #1
 8013542:	d14b      	bne.n	80135dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	69db      	ldr	r3, [r3, #28]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d009      	beq.n	8013560 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	4413      	add	r3, r2
 8013554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013558:	461a      	mov	r2, r3
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	69db      	ldr	r3, [r3, #28]
 801355e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	791b      	ldrb	r3, [r3, #4]
 8013564:	2b01      	cmp	r3, #1
 8013566:	d128      	bne.n	80135ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013574:	2b00      	cmp	r3, #0
 8013576:	d110      	bne.n	801359a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	015a      	lsls	r2, r3, #5
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	4413      	add	r3, r2
 8013580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	69ba      	ldr	r2, [r7, #24]
 8013588:	0151      	lsls	r1, r2, #5
 801358a:	69fa      	ldr	r2, [r7, #28]
 801358c:	440a      	add	r2, r1
 801358e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013596:	6013      	str	r3, [r2, #0]
 8013598:	e00f      	b.n	80135ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	015a      	lsls	r2, r3, #5
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	4413      	add	r3, r2
 80135a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	69ba      	ldr	r2, [r7, #24]
 80135aa:	0151      	lsls	r1, r2, #5
 80135ac:	69fa      	ldr	r2, [r7, #28]
 80135ae:	440a      	add	r2, r1
 80135b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135ba:	69bb      	ldr	r3, [r7, #24]
 80135bc:	015a      	lsls	r2, r3, #5
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	4413      	add	r3, r2
 80135c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	69ba      	ldr	r2, [r7, #24]
 80135ca:	0151      	lsls	r1, r2, #5
 80135cc:	69fa      	ldr	r2, [r7, #28]
 80135ce:	440a      	add	r2, r1
 80135d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135d8:	6013      	str	r3, [r2, #0]
 80135da:	e16a      	b.n	80138b2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	015a      	lsls	r2, r3, #5
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	4413      	add	r3, r2
 80135e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	69ba      	ldr	r2, [r7, #24]
 80135ec:	0151      	lsls	r1, r2, #5
 80135ee:	69fa      	ldr	r2, [r7, #28]
 80135f0:	440a      	add	r2, r1
 80135f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	791b      	ldrb	r3, [r3, #4]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d015      	beq.n	8013630 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 8152 	beq.w	80138b2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801360e:	69fb      	ldr	r3, [r7, #28]
 8013610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	f003 030f 	and.w	r3, r3, #15
 801361e:	2101      	movs	r1, #1
 8013620:	fa01 f303 	lsl.w	r3, r1, r3
 8013624:	69f9      	ldr	r1, [r7, #28]
 8013626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801362a:	4313      	orrs	r3, r2
 801362c:	634b      	str	r3, [r1, #52]	; 0x34
 801362e:	e140      	b.n	80138b2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013636:	689b      	ldr	r3, [r3, #8]
 8013638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801363c:	2b00      	cmp	r3, #0
 801363e:	d117      	bne.n	8013670 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	69ba      	ldr	r2, [r7, #24]
 8013650:	0151      	lsls	r1, r2, #5
 8013652:	69fa      	ldr	r2, [r7, #28]
 8013654:	440a      	add	r2, r1
 8013656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801365a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801365e:	6013      	str	r3, [r2, #0]
 8013660:	e016      	b.n	8013690 <USB_EPStartXfer+0x308>
 8013662:	bf00      	nop
 8013664:	e007ffff 	.word	0xe007ffff
 8013668:	fff80000 	.word	0xfff80000
 801366c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	015a      	lsls	r2, r3, #5
 8013674:	69fb      	ldr	r3, [r7, #28]
 8013676:	4413      	add	r3, r2
 8013678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	69ba      	ldr	r2, [r7, #24]
 8013680:	0151      	lsls	r1, r2, #5
 8013682:	69fa      	ldr	r2, [r7, #28]
 8013684:	440a      	add	r2, r1
 8013686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801368a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801368e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	68d9      	ldr	r1, [r3, #12]
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	781a      	ldrb	r2, [r3, #0]
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	691b      	ldr	r3, [r3, #16]
 801369c:	b298      	uxth	r0, r3
 801369e:	79fb      	ldrb	r3, [r7, #7]
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	4603      	mov	r3, r0
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f000 f9b9 	bl	8013a1c <USB_WritePacket>
 80136aa:	e102      	b.n	80138b2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	015a      	lsls	r2, r3, #5
 80136b0:	69fb      	ldr	r3, [r7, #28]
 80136b2:	4413      	add	r3, r2
 80136b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136b8:	691a      	ldr	r2, [r3, #16]
 80136ba:	69bb      	ldr	r3, [r7, #24]
 80136bc:	0159      	lsls	r1, r3, #5
 80136be:	69fb      	ldr	r3, [r7, #28]
 80136c0:	440b      	add	r3, r1
 80136c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136c6:	4619      	mov	r1, r3
 80136c8:	4b7c      	ldr	r3, [pc, #496]	; (80138bc <USB_EPStartXfer+0x534>)
 80136ca:	4013      	ands	r3, r2
 80136cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	015a      	lsls	r2, r3, #5
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	4413      	add	r3, r2
 80136d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136da:	691a      	ldr	r2, [r3, #16]
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	0159      	lsls	r1, r3, #5
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	440b      	add	r3, r1
 80136e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136e8:	4619      	mov	r1, r3
 80136ea:	4b75      	ldr	r3, [pc, #468]	; (80138c0 <USB_EPStartXfer+0x538>)
 80136ec:	4013      	ands	r3, r2
 80136ee:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d12f      	bne.n	8013756 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	691b      	ldr	r3, [r3, #16]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d003      	beq.n	8013706 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	689a      	ldr	r2, [r3, #8]
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	689a      	ldr	r2, [r3, #8]
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	015a      	lsls	r2, r3, #5
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	4413      	add	r3, r2
 8013716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801371a:	691a      	ldr	r2, [r3, #16]
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	6a1b      	ldr	r3, [r3, #32]
 8013720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013724:	69b9      	ldr	r1, [r7, #24]
 8013726:	0148      	lsls	r0, r1, #5
 8013728:	69f9      	ldr	r1, [r7, #28]
 801372a:	4401      	add	r1, r0
 801372c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013730:	4313      	orrs	r3, r2
 8013732:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	015a      	lsls	r2, r3, #5
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	4413      	add	r3, r2
 801373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013740:	691b      	ldr	r3, [r3, #16]
 8013742:	69ba      	ldr	r2, [r7, #24]
 8013744:	0151      	lsls	r1, r2, #5
 8013746:	69fa      	ldr	r2, [r7, #28]
 8013748:	440a      	add	r2, r1
 801374a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801374e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013752:	6113      	str	r3, [r2, #16]
 8013754:	e05f      	b.n	8013816 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	691b      	ldr	r3, [r3, #16]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d123      	bne.n	80137a6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	015a      	lsls	r2, r3, #5
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	4413      	add	r3, r2
 8013766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376a:	691a      	ldr	r2, [r3, #16]
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	689b      	ldr	r3, [r3, #8]
 8013770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013774:	69b9      	ldr	r1, [r7, #24]
 8013776:	0148      	lsls	r0, r1, #5
 8013778:	69f9      	ldr	r1, [r7, #28]
 801377a:	4401      	add	r1, r0
 801377c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013780:	4313      	orrs	r3, r2
 8013782:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	015a      	lsls	r2, r3, #5
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	4413      	add	r3, r2
 801378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013790:	691b      	ldr	r3, [r3, #16]
 8013792:	69ba      	ldr	r2, [r7, #24]
 8013794:	0151      	lsls	r1, r2, #5
 8013796:	69fa      	ldr	r2, [r7, #28]
 8013798:	440a      	add	r2, r1
 801379a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801379e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137a2:	6113      	str	r3, [r2, #16]
 80137a4:	e037      	b.n	8013816 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	691a      	ldr	r2, [r3, #16]
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	689b      	ldr	r3, [r3, #8]
 80137ae:	4413      	add	r3, r2
 80137b0:	1e5a      	subs	r2, r3, #1
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	689b      	ldr	r3, [r3, #8]
 80137b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80137ba:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	8afa      	ldrh	r2, [r7, #22]
 80137c2:	fb03 f202 	mul.w	r2, r3, r2
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	015a      	lsls	r2, r3, #5
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	4413      	add	r3, r2
 80137d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d6:	691a      	ldr	r2, [r3, #16]
 80137d8:	8afb      	ldrh	r3, [r7, #22]
 80137da:	04d9      	lsls	r1, r3, #19
 80137dc:	4b39      	ldr	r3, [pc, #228]	; (80138c4 <USB_EPStartXfer+0x53c>)
 80137de:	400b      	ands	r3, r1
 80137e0:	69b9      	ldr	r1, [r7, #24]
 80137e2:	0148      	lsls	r0, r1, #5
 80137e4:	69f9      	ldr	r1, [r7, #28]
 80137e6:	4401      	add	r1, r0
 80137e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80137ec:	4313      	orrs	r3, r2
 80137ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	015a      	lsls	r2, r3, #5
 80137f4:	69fb      	ldr	r3, [r7, #28]
 80137f6:	4413      	add	r3, r2
 80137f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fc:	691a      	ldr	r2, [r3, #16]
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	6a1b      	ldr	r3, [r3, #32]
 8013802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013806:	69b9      	ldr	r1, [r7, #24]
 8013808:	0148      	lsls	r0, r1, #5
 801380a:	69f9      	ldr	r1, [r7, #28]
 801380c:	4401      	add	r1, r0
 801380e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013812:	4313      	orrs	r3, r2
 8013814:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013816:	79fb      	ldrb	r3, [r7, #7]
 8013818:	2b01      	cmp	r3, #1
 801381a:	d10d      	bne.n	8013838 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d009      	beq.n	8013838 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	68d9      	ldr	r1, [r3, #12]
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	015a      	lsls	r2, r3, #5
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	4413      	add	r3, r2
 8013830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013834:	460a      	mov	r2, r1
 8013836:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	791b      	ldrb	r3, [r3, #4]
 801383c:	2b01      	cmp	r3, #1
 801383e:	d128      	bne.n	8013892 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801384c:	2b00      	cmp	r3, #0
 801384e:	d110      	bne.n	8013872 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	015a      	lsls	r2, r3, #5
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	4413      	add	r3, r2
 8013858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	69ba      	ldr	r2, [r7, #24]
 8013860:	0151      	lsls	r1, r2, #5
 8013862:	69fa      	ldr	r2, [r7, #28]
 8013864:	440a      	add	r2, r1
 8013866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801386a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801386e:	6013      	str	r3, [r2, #0]
 8013870:	e00f      	b.n	8013892 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	015a      	lsls	r2, r3, #5
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	4413      	add	r3, r2
 801387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	69ba      	ldr	r2, [r7, #24]
 8013882:	0151      	lsls	r1, r2, #5
 8013884:	69fa      	ldr	r2, [r7, #28]
 8013886:	440a      	add	r2, r1
 8013888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013890:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	015a      	lsls	r2, r3, #5
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	4413      	add	r3, r2
 801389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	69ba      	ldr	r2, [r7, #24]
 80138a2:	0151      	lsls	r1, r2, #5
 80138a4:	69fa      	ldr	r2, [r7, #28]
 80138a6:	440a      	add	r2, r1
 80138a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80138b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80138b2:	2300      	movs	r3, #0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3720      	adds	r7, #32
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	fff80000 	.word	0xfff80000
 80138c0:	e007ffff 	.word	0xe007ffff
 80138c4:	1ff80000 	.word	0x1ff80000

080138c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b087      	sub	sp, #28
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80138d2:	2300      	movs	r3, #0
 80138d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80138d6:	2300      	movs	r3, #0
 80138d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	785b      	ldrb	r3, [r3, #1]
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d14a      	bne.n	801397c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	015a      	lsls	r2, r3, #5
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	4413      	add	r3, r2
 80138f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138fe:	f040 8086 	bne.w	8013a0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	4413      	add	r3, r2
 801390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	7812      	ldrb	r2, [r2, #0]
 8013916:	0151      	lsls	r1, r2, #5
 8013918:	693a      	ldr	r2, [r7, #16]
 801391a:	440a      	add	r2, r1
 801391c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013920:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013924:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	015a      	lsls	r2, r3, #5
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	4413      	add	r3, r2
 8013930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	683a      	ldr	r2, [r7, #0]
 8013938:	7812      	ldrb	r2, [r2, #0]
 801393a:	0151      	lsls	r1, r2, #5
 801393c:	693a      	ldr	r2, [r7, #16]
 801393e:	440a      	add	r2, r1
 8013940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013948:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	3301      	adds	r3, #1
 801394e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f242 7210 	movw	r2, #10000	; 0x2710
 8013956:	4293      	cmp	r3, r2
 8013958:	d902      	bls.n	8013960 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801395a:	2301      	movs	r3, #1
 801395c:	75fb      	strb	r3, [r7, #23]
          break;
 801395e:	e056      	b.n	8013a0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	015a      	lsls	r2, r3, #5
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	4413      	add	r3, r2
 801396a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013978:	d0e7      	beq.n	801394a <USB_EPStopXfer+0x82>
 801397a:	e048      	b.n	8013a0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	015a      	lsls	r2, r3, #5
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	4413      	add	r3, r2
 8013986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013994:	d13b      	bne.n	8013a0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	015a      	lsls	r2, r3, #5
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	4413      	add	r3, r2
 80139a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	683a      	ldr	r2, [r7, #0]
 80139a8:	7812      	ldrb	r2, [r2, #0]
 80139aa:	0151      	lsls	r1, r2, #5
 80139ac:	693a      	ldr	r2, [r7, #16]
 80139ae:	440a      	add	r2, r1
 80139b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	015a      	lsls	r2, r3, #5
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	4413      	add	r3, r2
 80139c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	683a      	ldr	r2, [r7, #0]
 80139cc:	7812      	ldrb	r2, [r2, #0]
 80139ce:	0151      	lsls	r1, r2, #5
 80139d0:	693a      	ldr	r2, [r7, #16]
 80139d2:	440a      	add	r2, r1
 80139d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	3301      	adds	r3, #1
 80139e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d902      	bls.n	80139f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80139ee:	2301      	movs	r3, #1
 80139f0:	75fb      	strb	r3, [r7, #23]
          break;
 80139f2:	e00c      	b.n	8013a0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	015a      	lsls	r2, r3, #5
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	4413      	add	r3, r2
 80139fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a0c:	d0e7      	beq.n	80139de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	371c      	adds	r7, #28
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr

08013a1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	b089      	sub	sp, #36	; 0x24
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	4611      	mov	r1, r2
 8013a28:	461a      	mov	r2, r3
 8013a2a:	460b      	mov	r3, r1
 8013a2c:	71fb      	strb	r3, [r7, #7]
 8013a2e:	4613      	mov	r3, r2
 8013a30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d123      	bne.n	8013a8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013a42:	88bb      	ldrh	r3, [r7, #4]
 8013a44:	3303      	adds	r3, #3
 8013a46:	089b      	lsrs	r3, r3, #2
 8013a48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	61bb      	str	r3, [r7, #24]
 8013a4e:	e018      	b.n	8013a82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013a50:	79fb      	ldrb	r3, [r7, #7]
 8013a52:	031a      	lsls	r2, r3, #12
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	4413      	add	r3, r2
 8013a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	3301      	adds	r3, #1
 8013a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	3301      	adds	r3, #1
 8013a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	61bb      	str	r3, [r7, #24]
 8013a82:	69ba      	ldr	r2, [r7, #24]
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d3e2      	bcc.n	8013a50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3724      	adds	r7, #36	; 0x24
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b08b      	sub	sp, #44	; 0x2c
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013aae:	88fb      	ldrh	r3, [r7, #6]
 8013ab0:	089b      	lsrs	r3, r3, #2
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013ab6:	88fb      	ldrh	r3, [r7, #6]
 8013ab8:	f003 0303 	and.w	r3, r3, #3
 8013abc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013abe:	2300      	movs	r3, #0
 8013ac0:	623b      	str	r3, [r7, #32]
 8013ac2:	e014      	b.n	8013aee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013aca:	681a      	ldr	r2, [r3, #0]
 8013acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ace:	601a      	str	r2, [r3, #0]
    pDest++;
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad8:	3301      	adds	r3, #1
 8013ada:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ade:	3301      	adds	r3, #1
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013ae8:	6a3b      	ldr	r3, [r7, #32]
 8013aea:	3301      	adds	r3, #1
 8013aec:	623b      	str	r3, [r7, #32]
 8013aee:	6a3a      	ldr	r2, [r7, #32]
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d3e6      	bcc.n	8013ac4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013af6:	8bfb      	ldrh	r3, [r7, #30]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d01e      	beq.n	8013b3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013afc:	2300      	movs	r3, #0
 8013afe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b06:	461a      	mov	r2, r3
 8013b08:	f107 0310 	add.w	r3, r7, #16
 8013b0c:	6812      	ldr	r2, [r2, #0]
 8013b0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013b10:	693a      	ldr	r2, [r7, #16]
 8013b12:	6a3b      	ldr	r3, [r7, #32]
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	00db      	lsls	r3, r3, #3
 8013b18:	fa22 f303 	lsr.w	r3, r2, r3
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b20:	701a      	strb	r2, [r3, #0]
      i++;
 8013b22:	6a3b      	ldr	r3, [r7, #32]
 8013b24:	3301      	adds	r3, #1
 8013b26:	623b      	str	r3, [r7, #32]
      pDest++;
 8013b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013b2e:	8bfb      	ldrh	r3, [r7, #30]
 8013b30:	3b01      	subs	r3, #1
 8013b32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013b34:	8bfb      	ldrh	r3, [r7, #30]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d1ea      	bne.n	8013b10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	372c      	adds	r7, #44	; 0x2c
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b48:	b480      	push	{r7}
 8013b4a:	b085      	sub	sp, #20
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	785b      	ldrb	r3, [r3, #1]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d12c      	bne.n	8013bbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	015a      	lsls	r2, r3, #5
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	db12      	blt.n	8013b9c <USB_EPSetStall+0x54>
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00f      	beq.n	8013b9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	015a      	lsls	r2, r3, #5
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	4413      	add	r3, r2
 8013b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	68ba      	ldr	r2, [r7, #8]
 8013b8c:	0151      	lsls	r1, r2, #5
 8013b8e:	68fa      	ldr	r2, [r7, #12]
 8013b90:	440a      	add	r2, r1
 8013b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	015a      	lsls	r2, r3, #5
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	68ba      	ldr	r2, [r7, #8]
 8013bac:	0151      	lsls	r1, r2, #5
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	440a      	add	r2, r1
 8013bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013bba:	6013      	str	r3, [r2, #0]
 8013bbc:	e02b      	b.n	8013c16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	015a      	lsls	r2, r3, #5
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	db12      	blt.n	8013bf6 <USB_EPSetStall+0xae>
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00f      	beq.n	8013bf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	015a      	lsls	r2, r3, #5
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	4413      	add	r3, r2
 8013bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	68ba      	ldr	r2, [r7, #8]
 8013be6:	0151      	lsls	r1, r2, #5
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	440a      	add	r2, r1
 8013bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013bf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	015a      	lsls	r2, r3, #5
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	68ba      	ldr	r2, [r7, #8]
 8013c06:	0151      	lsls	r1, r2, #5
 8013c08:	68fa      	ldr	r2, [r7, #12]
 8013c0a:	440a      	add	r2, r1
 8013c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c16:	2300      	movs	r3, #0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3714      	adds	r7, #20
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr

08013c24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b085      	sub	sp, #20
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	785b      	ldrb	r3, [r3, #1]
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d128      	bne.n	8013c92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	015a      	lsls	r2, r3, #5
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	4413      	add	r3, r2
 8013c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	68ba      	ldr	r2, [r7, #8]
 8013c50:	0151      	lsls	r1, r2, #5
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	440a      	add	r2, r1
 8013c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013c5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	791b      	ldrb	r3, [r3, #4]
 8013c64:	2b03      	cmp	r3, #3
 8013c66:	d003      	beq.n	8013c70 <USB_EPClearStall+0x4c>
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	791b      	ldrb	r3, [r3, #4]
 8013c6c:	2b02      	cmp	r3, #2
 8013c6e:	d138      	bne.n	8013ce2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	015a      	lsls	r2, r3, #5
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	4413      	add	r3, r2
 8013c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	68ba      	ldr	r2, [r7, #8]
 8013c80:	0151      	lsls	r1, r2, #5
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	440a      	add	r2, r1
 8013c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c8e:	6013      	str	r3, [r2, #0]
 8013c90:	e027      	b.n	8013ce2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	015a      	lsls	r2, r3, #5
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	4413      	add	r3, r2
 8013c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	68ba      	ldr	r2, [r7, #8]
 8013ca2:	0151      	lsls	r1, r2, #5
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	440a      	add	r2, r1
 8013ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013cb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	791b      	ldrb	r3, [r3, #4]
 8013cb6:	2b03      	cmp	r3, #3
 8013cb8:	d003      	beq.n	8013cc2 <USB_EPClearStall+0x9e>
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	791b      	ldrb	r3, [r3, #4]
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	d10f      	bne.n	8013ce2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	015a      	lsls	r2, r3, #5
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	4413      	add	r3, r2
 8013cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	68ba      	ldr	r2, [r7, #8]
 8013cd2:	0151      	lsls	r1, r2, #5
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	440a      	add	r2, r1
 8013cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ce0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013ce2:	2300      	movs	r3, #0
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3714      	adds	r7, #20
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b085      	sub	sp, #20
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	68fa      	ldr	r2, [r7, #12]
 8013d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013d12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	78fb      	ldrb	r3, [r7, #3]
 8013d1e:	011b      	lsls	r3, r3, #4
 8013d20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013d24:	68f9      	ldr	r1, [r7, #12]
 8013d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013d2e:	2300      	movs	r3, #0
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3714      	adds	r7, #20
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr

08013d3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b085      	sub	sp, #20
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013d56:	f023 0303 	bic.w	r3, r3, #3
 8013d5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	68fa      	ldr	r2, [r7, #12]
 8013d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d6a:	f023 0302 	bic.w	r3, r3, #2
 8013d6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013d70:	2300      	movs	r3, #0
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3714      	adds	r7, #20
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr

08013d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d7e:	b480      	push	{r7}
 8013d80:	b085      	sub	sp, #20
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	68fa      	ldr	r2, [r7, #12]
 8013d94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013d98:	f023 0303 	bic.w	r3, r3, #3
 8013d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	68fa      	ldr	r2, [r7, #12]
 8013da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dac:	f043 0302 	orr.w	r3, r3, #2
 8013db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013db2:	2300      	movs	r3, #0
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3714      	adds	r7, #20
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b085      	sub	sp, #20
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	695b      	ldr	r3, [r3, #20]
 8013dcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	4013      	ands	r3, r2
 8013dd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3714      	adds	r7, #20
 8013dde:	46bd      	mov	sp, r7
 8013de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de4:	4770      	bx	lr

08013de6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013de6:	b480      	push	{r7}
 8013de8:	b085      	sub	sp, #20
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df8:	699b      	ldr	r3, [r3, #24]
 8013dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e02:	69db      	ldr	r3, [r3, #28]
 8013e04:	68ba      	ldr	r2, [r7, #8]
 8013e06:	4013      	ands	r3, r2
 8013e08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	0c1b      	lsrs	r3, r3, #16
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3714      	adds	r7, #20
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr

08013e1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e1a:	b480      	push	{r7}
 8013e1c:	b085      	sub	sp, #20
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e2c:	699b      	ldr	r3, [r3, #24]
 8013e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e36:	69db      	ldr	r3, [r3, #28]
 8013e38:	68ba      	ldr	r2, [r7, #8]
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	b29b      	uxth	r3, r3
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3714      	adds	r7, #20
 8013e46:	46bd      	mov	sp, r7
 8013e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4c:	4770      	bx	lr

08013e4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013e4e:	b480      	push	{r7}
 8013e50:	b085      	sub	sp, #20
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
 8013e56:	460b      	mov	r3, r1
 8013e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013e5e:	78fb      	ldrb	r3, [r7, #3]
 8013e60:	015a      	lsls	r2, r3, #5
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	4413      	add	r3, r2
 8013e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e6a:	689b      	ldr	r3, [r3, #8]
 8013e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e74:	695b      	ldr	r3, [r3, #20]
 8013e76:	68ba      	ldr	r2, [r7, #8]
 8013e78:	4013      	ands	r3, r2
 8013e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013e7c:	68bb      	ldr	r3, [r7, #8]
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3714      	adds	r7, #20
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr

08013e8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013e8a:	b480      	push	{r7}
 8013e8c:	b087      	sub	sp, #28
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
 8013e92:	460b      	mov	r3, r1
 8013e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ea0:	691b      	ldr	r3, [r3, #16]
 8013ea2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013eae:	78fb      	ldrb	r3, [r7, #3]
 8013eb0:	f003 030f 	and.w	r3, r3, #15
 8013eb4:	68fa      	ldr	r2, [r7, #12]
 8013eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8013eba:	01db      	lsls	r3, r3, #7
 8013ebc:	b2db      	uxtb	r3, r3
 8013ebe:	693a      	ldr	r2, [r7, #16]
 8013ec0:	4313      	orrs	r3, r2
 8013ec2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ec4:	78fb      	ldrb	r3, [r7, #3]
 8013ec6:	015a      	lsls	r2, r3, #5
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	4413      	add	r3, r2
 8013ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	693a      	ldr	r2, [r7, #16]
 8013ed4:	4013      	ands	r3, r2
 8013ed6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013ed8:	68bb      	ldr	r3, [r7, #8]
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	371c      	adds	r7, #28
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee4:	4770      	bx	lr

08013ee6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013ee6:	b480      	push	{r7}
 8013ee8:	b083      	sub	sp, #12
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	695b      	ldr	r3, [r3, #20]
 8013ef2:	f003 0301 	and.w	r3, r3, #1
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	370c      	adds	r7, #12
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
	...

08013f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b085      	sub	sp, #20
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f16:	681a      	ldr	r2, [r3, #0]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f1e:	4619      	mov	r1, r3
 8013f20:	4b09      	ldr	r3, [pc, #36]	; (8013f48 <USB_ActivateSetup+0x44>)
 8013f22:	4013      	ands	r3, r2
 8013f24:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	68fa      	ldr	r2, [r7, #12]
 8013f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013f3a:	2300      	movs	r3, #0
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3714      	adds	r7, #20
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr
 8013f48:	fffff800 	.word	0xfffff800

08013f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b087      	sub	sp, #28
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	60f8      	str	r0, [r7, #12]
 8013f54:	460b      	mov	r3, r1
 8013f56:	607a      	str	r2, [r7, #4]
 8013f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	333c      	adds	r3, #60	; 0x3c
 8013f62:	3304      	adds	r3, #4
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	4a26      	ldr	r2, [pc, #152]	; (8014004 <USB_EP0_OutStart+0xb8>)
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	d90a      	bls.n	8013f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f80:	d101      	bne.n	8013f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013f82:	2300      	movs	r3, #0
 8013f84:	e037      	b.n	8013ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	2300      	movs	r3, #0
 8013f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f98:	691b      	ldr	r3, [r3, #16]
 8013f9a:	697a      	ldr	r2, [r7, #20]
 8013f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fac:	691b      	ldr	r3, [r3, #16]
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fb4:	f043 0318 	orr.w	r3, r3, #24
 8013fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fc0:	691b      	ldr	r3, [r3, #16]
 8013fc2:	697a      	ldr	r2, [r7, #20]
 8013fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013fce:	7afb      	ldrb	r3, [r7, #11]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d10f      	bne.n	8013ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fda:	461a      	mov	r2, r3
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	697a      	ldr	r2, [r7, #20]
 8013fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	371c      	adds	r7, #28
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
 8014002:	bf00      	nop
 8014004:	4f54300a 	.word	0x4f54300a

08014008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014010:	2300      	movs	r3, #0
 8014012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	3301      	adds	r3, #1
 8014018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	4a13      	ldr	r2, [pc, #76]	; (801406c <USB_CoreReset+0x64>)
 801401e:	4293      	cmp	r3, r2
 8014020:	d901      	bls.n	8014026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014022:	2303      	movs	r3, #3
 8014024:	e01b      	b.n	801405e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	691b      	ldr	r3, [r3, #16]
 801402a:	2b00      	cmp	r3, #0
 801402c:	daf2      	bge.n	8014014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801402e:	2300      	movs	r3, #0
 8014030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	691b      	ldr	r3, [r3, #16]
 8014036:	f043 0201 	orr.w	r2, r3, #1
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	3301      	adds	r3, #1
 8014042:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	4a09      	ldr	r2, [pc, #36]	; (801406c <USB_CoreReset+0x64>)
 8014048:	4293      	cmp	r3, r2
 801404a:	d901      	bls.n	8014050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801404c:	2303      	movs	r3, #3
 801404e:	e006      	b.n	801405e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	691b      	ldr	r3, [r3, #16]
 8014054:	f003 0301 	and.w	r3, r3, #1
 8014058:	2b01      	cmp	r3, #1
 801405a:	d0f0      	beq.n	801403e <USB_CoreReset+0x36>

  return HAL_OK;
 801405c:	2300      	movs	r3, #0
}
 801405e:	4618      	mov	r0, r3
 8014060:	3714      	adds	r7, #20
 8014062:	46bd      	mov	sp, r7
 8014064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014068:	4770      	bx	lr
 801406a:	bf00      	nop
 801406c:	00030d40 	.word	0x00030d40

08014070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014074:	4904      	ldr	r1, [pc, #16]	; (8014088 <MX_FATFS_Init+0x18>)
 8014076:	4805      	ldr	r0, [pc, #20]	; (801408c <MX_FATFS_Init+0x1c>)
 8014078:	f002 fa56 	bl	8016528 <FATFS_LinkDriver>
 801407c:	4603      	mov	r3, r0
 801407e:	461a      	mov	r2, r3
 8014080:	4b03      	ldr	r3, [pc, #12]	; (8014090 <MX_FATFS_Init+0x20>)
 8014082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014084:	bf00      	nop
 8014086:	bd80      	pop	{r7, pc}
 8014088:	24000d84 	.word	0x24000d84
 801408c:	0801c818 	.word	0x0801c818
 8014090:	24000d80 	.word	0x24000d80

08014094 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801409a:	2300      	movs	r3, #0
 801409c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801409e:	f000 f885 	bl	80141ac <BSP_SD_IsDetected>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d001      	beq.n	80140ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80140a8:	2302      	movs	r3, #2
 80140aa:	e012      	b.n	80140d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80140ac:	480b      	ldr	r0, [pc, #44]	; (80140dc <BSP_SD_Init+0x48>)
 80140ae:	f7f9 f9dd 	bl	800d46c <HAL_SD_Init>
 80140b2:	4603      	mov	r3, r0
 80140b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80140b6:	79fb      	ldrb	r3, [r7, #7]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d109      	bne.n	80140d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80140bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80140c0:	4806      	ldr	r0, [pc, #24]	; (80140dc <BSP_SD_Init+0x48>)
 80140c2:	f7fa f893 	bl	800e1ec <HAL_SD_ConfigWideBusOperation>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d001      	beq.n	80140d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80140cc:	2301      	movs	r3, #1
 80140ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80140d0:	79fb      	ldrb	r3, [r7, #7]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3708      	adds	r7, #8
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	240005b8 	.word	0x240005b8

080140e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b086      	sub	sp, #24
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80140ec:	2300      	movs	r3, #0
 80140ee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	68ba      	ldr	r2, [r7, #8]
 80140f4:	68f9      	ldr	r1, [r7, #12]
 80140f6:	4806      	ldr	r0, [pc, #24]	; (8014110 <BSP_SD_ReadBlocks_DMA+0x30>)
 80140f8:	f7f9 fad8 	bl	800d6ac <HAL_SD_ReadBlocks_DMA>
 80140fc:	4603      	mov	r3, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d001      	beq.n	8014106 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014102:	2301      	movs	r3, #1
 8014104:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014106:	7dfb      	ldrb	r3, [r7, #23]
}
 8014108:	4618      	mov	r0, r3
 801410a:	3718      	adds	r7, #24
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	240005b8 	.word	0x240005b8

08014114 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b086      	sub	sp, #24
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014120:	2300      	movs	r3, #0
 8014122:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	68ba      	ldr	r2, [r7, #8]
 8014128:	68f9      	ldr	r1, [r7, #12]
 801412a:	4806      	ldr	r0, [pc, #24]	; (8014144 <BSP_SD_WriteBlocks_DMA+0x30>)
 801412c:	f7f9 fb66 	bl	800d7fc <HAL_SD_WriteBlocks_DMA>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014136:	2301      	movs	r3, #1
 8014138:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801413a:	7dfb      	ldrb	r3, [r7, #23]
}
 801413c:	4618      	mov	r0, r3
 801413e:	3718      	adds	r7, #24
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	240005b8 	.word	0x240005b8

08014148 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801414c:	4805      	ldr	r0, [pc, #20]	; (8014164 <BSP_SD_GetCardState+0x1c>)
 801414e:	f7fa f95f 	bl	800e410 <HAL_SD_GetCardState>
 8014152:	4603      	mov	r3, r0
 8014154:	2b04      	cmp	r3, #4
 8014156:	bf14      	ite	ne
 8014158:	2301      	movne	r3, #1
 801415a:	2300      	moveq	r3, #0
 801415c:	b2db      	uxtb	r3, r3
}
 801415e:	4618      	mov	r0, r3
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	240005b8 	.word	0x240005b8

08014168 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014170:	6879      	ldr	r1, [r7, #4]
 8014172:	4803      	ldr	r0, [pc, #12]	; (8014180 <BSP_SD_GetCardInfo+0x18>)
 8014174:	f7fa f80e 	bl	800e194 <HAL_SD_GetCardInfo>
}
 8014178:	bf00      	nop
 801417a:	3708      	adds	r7, #8
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	240005b8 	.word	0x240005b8

08014184 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801418c:	f000 f9a0 	bl	80144d0 <BSP_SD_WriteCpltCallback>
}
 8014190:	bf00      	nop
 8014192:	3708      	adds	r7, #8
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80141a0:	f000 f9a2 	bl	80144e8 <BSP_SD_ReadCpltCallback>
}
 80141a4:	bf00      	nop
 80141a6:	3708      	adds	r7, #8
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80141b2:	2301      	movs	r3, #1
 80141b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80141b6:	f000 f80b 	bl	80141d0 <BSP_PlatformIsDetected>
 80141ba:	4603      	mov	r3, r0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d101      	bne.n	80141c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80141c0:	2300      	movs	r3, #0
 80141c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80141c4:	79fb      	ldrb	r3, [r7, #7]
 80141c6:	b2db      	uxtb	r3, r3
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3708      	adds	r7, #8
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80141d6:	2301      	movs	r3, #1
 80141d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80141da:	2104      	movs	r1, #4
 80141dc:	4806      	ldr	r0, [pc, #24]	; (80141f8 <BSP_PlatformIsDetected+0x28>)
 80141de:	f7f4 f919 	bl	8008414 <HAL_GPIO_ReadPin>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d001      	beq.n	80141ec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80141e8:	2300      	movs	r3, #0
 80141ea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80141ec:	79fb      	ldrb	r3, [r7, #7]
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	58020400 	.word	0x58020400

080141fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014204:	f7f0 fa74 	bl	80046f0 <HAL_GetTick>
 8014208:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801420a:	e006      	b.n	801421a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801420c:	f7ff ff9c 	bl	8014148 <BSP_SD_GetCardState>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014216:	2300      	movs	r3, #0
 8014218:	e009      	b.n	801422e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801421a:	f7f0 fa69 	bl	80046f0 <HAL_GetTick>
 801421e:	4602      	mov	r2, r0
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	1ad3      	subs	r3, r2, r3
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	429a      	cmp	r2, r3
 8014228:	d8f0      	bhi.n	801420c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801422a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801422e:	4618      	mov	r0, r3
 8014230:	3710      	adds	r7, #16
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
	...

08014238 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	4603      	mov	r3, r0
 8014240:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014242:	4b0b      	ldr	r3, [pc, #44]	; (8014270 <SD_CheckStatus+0x38>)
 8014244:	2201      	movs	r2, #1
 8014246:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014248:	f7ff ff7e 	bl	8014148 <BSP_SD_GetCardState>
 801424c:	4603      	mov	r3, r0
 801424e:	2b00      	cmp	r3, #0
 8014250:	d107      	bne.n	8014262 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014252:	4b07      	ldr	r3, [pc, #28]	; (8014270 <SD_CheckStatus+0x38>)
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	b2db      	uxtb	r3, r3
 8014258:	f023 0301 	bic.w	r3, r3, #1
 801425c:	b2da      	uxtb	r2, r3
 801425e:	4b04      	ldr	r3, [pc, #16]	; (8014270 <SD_CheckStatus+0x38>)
 8014260:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014262:	4b03      	ldr	r3, [pc, #12]	; (8014270 <SD_CheckStatus+0x38>)
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	b2db      	uxtb	r3, r3
}
 8014268:	4618      	mov	r0, r3
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	2400000d 	.word	0x2400000d

08014274 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
 801427a:	4603      	mov	r3, r0
 801427c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801427e:	f7ff ff09 	bl	8014094 <BSP_SD_Init>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d107      	bne.n	8014298 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014288:	79fb      	ldrb	r3, [r7, #7]
 801428a:	4618      	mov	r0, r3
 801428c:	f7ff ffd4 	bl	8014238 <SD_CheckStatus>
 8014290:	4603      	mov	r3, r0
 8014292:	461a      	mov	r2, r3
 8014294:	4b04      	ldr	r3, [pc, #16]	; (80142a8 <SD_initialize+0x34>)
 8014296:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014298:	4b03      	ldr	r3, [pc, #12]	; (80142a8 <SD_initialize+0x34>)
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	b2db      	uxtb	r3, r3
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3708      	adds	r7, #8
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
 80142a6:	bf00      	nop
 80142a8:	2400000d 	.word	0x2400000d

080142ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	4603      	mov	r3, r0
 80142b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80142b6:	79fb      	ldrb	r3, [r7, #7]
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7ff ffbd 	bl	8014238 <SD_CheckStatus>
 80142be:	4603      	mov	r3, r0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b086      	sub	sp, #24
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60b9      	str	r1, [r7, #8]
 80142d0:	607a      	str	r2, [r7, #4]
 80142d2:	603b      	str	r3, [r7, #0]
 80142d4:	4603      	mov	r3, r0
 80142d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80142d8:	2301      	movs	r3, #1
 80142da:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80142dc:	f247 5030 	movw	r0, #30000	; 0x7530
 80142e0:	f7ff ff8c 	bl	80141fc <SD_CheckStatusWithTimeout>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	da01      	bge.n	80142ee <SD_read+0x26>
  {
    return res;
 80142ea:	7dfb      	ldrb	r3, [r7, #23]
 80142ec:	e03b      	b.n	8014366 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80142ee:	683a      	ldr	r2, [r7, #0]
 80142f0:	6879      	ldr	r1, [r7, #4]
 80142f2:	68b8      	ldr	r0, [r7, #8]
 80142f4:	f7ff fef4 	bl	80140e0 <BSP_SD_ReadBlocks_DMA>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d132      	bne.n	8014364 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80142fe:	4b1c      	ldr	r3, [pc, #112]	; (8014370 <SD_read+0xa8>)
 8014300:	2200      	movs	r2, #0
 8014302:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014304:	f7f0 f9f4 	bl	80046f0 <HAL_GetTick>
 8014308:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801430a:	bf00      	nop
 801430c:	4b18      	ldr	r3, [pc, #96]	; (8014370 <SD_read+0xa8>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d108      	bne.n	8014326 <SD_read+0x5e>
 8014314:	f7f0 f9ec 	bl	80046f0 <HAL_GetTick>
 8014318:	4602      	mov	r2, r0
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	1ad3      	subs	r3, r2, r3
 801431e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014322:	4293      	cmp	r3, r2
 8014324:	d9f2      	bls.n	801430c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014326:	4b12      	ldr	r3, [pc, #72]	; (8014370 <SD_read+0xa8>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d102      	bne.n	8014334 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801432e:	2301      	movs	r3, #1
 8014330:	75fb      	strb	r3, [r7, #23]
 8014332:	e017      	b.n	8014364 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014334:	4b0e      	ldr	r3, [pc, #56]	; (8014370 <SD_read+0xa8>)
 8014336:	2200      	movs	r2, #0
 8014338:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801433a:	f7f0 f9d9 	bl	80046f0 <HAL_GetTick>
 801433e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014340:	e007      	b.n	8014352 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014342:	f7ff ff01 	bl	8014148 <BSP_SD_GetCardState>
 8014346:	4603      	mov	r3, r0
 8014348:	2b00      	cmp	r3, #0
 801434a:	d102      	bne.n	8014352 <SD_read+0x8a>
          {
            res = RES_OK;
 801434c:	2300      	movs	r3, #0
 801434e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014350:	e008      	b.n	8014364 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014352:	f7f0 f9cd 	bl	80046f0 <HAL_GetTick>
 8014356:	4602      	mov	r2, r0
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	1ad3      	subs	r3, r2, r3
 801435c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014360:	4293      	cmp	r3, r2
 8014362:	d9ee      	bls.n	8014342 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014364:	7dfb      	ldrb	r3, [r7, #23]
}
 8014366:	4618      	mov	r0, r3
 8014368:	3718      	adds	r7, #24
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	24000d8c 	.word	0x24000d8c

08014374 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b086      	sub	sp, #24
 8014378:	af00      	add	r7, sp, #0
 801437a:	60b9      	str	r1, [r7, #8]
 801437c:	607a      	str	r2, [r7, #4]
 801437e:	603b      	str	r3, [r7, #0]
 8014380:	4603      	mov	r3, r0
 8014382:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014384:	2301      	movs	r3, #1
 8014386:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014388:	4b24      	ldr	r3, [pc, #144]	; (801441c <SD_write+0xa8>)
 801438a:	2200      	movs	r2, #0
 801438c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801438e:	f247 5030 	movw	r0, #30000	; 0x7530
 8014392:	f7ff ff33 	bl	80141fc <SD_CheckStatusWithTimeout>
 8014396:	4603      	mov	r3, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	da01      	bge.n	80143a0 <SD_write+0x2c>
  {
    return res;
 801439c:	7dfb      	ldrb	r3, [r7, #23]
 801439e:	e038      	b.n	8014412 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80143a0:	683a      	ldr	r2, [r7, #0]
 80143a2:	6879      	ldr	r1, [r7, #4]
 80143a4:	68b8      	ldr	r0, [r7, #8]
 80143a6:	f7ff feb5 	bl	8014114 <BSP_SD_WriteBlocks_DMA>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d12f      	bne.n	8014410 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80143b0:	f7f0 f99e 	bl	80046f0 <HAL_GetTick>
 80143b4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143b6:	bf00      	nop
 80143b8:	4b18      	ldr	r3, [pc, #96]	; (801441c <SD_write+0xa8>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d108      	bne.n	80143d2 <SD_write+0x5e>
 80143c0:	f7f0 f996 	bl	80046f0 <HAL_GetTick>
 80143c4:	4602      	mov	r2, r0
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	1ad3      	subs	r3, r2, r3
 80143ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d9f2      	bls.n	80143b8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80143d2:	4b12      	ldr	r3, [pc, #72]	; (801441c <SD_write+0xa8>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d102      	bne.n	80143e0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80143da:	2301      	movs	r3, #1
 80143dc:	75fb      	strb	r3, [r7, #23]
 80143de:	e017      	b.n	8014410 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80143e0:	4b0e      	ldr	r3, [pc, #56]	; (801441c <SD_write+0xa8>)
 80143e2:	2200      	movs	r2, #0
 80143e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80143e6:	f7f0 f983 	bl	80046f0 <HAL_GetTick>
 80143ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80143ec:	e007      	b.n	80143fe <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80143ee:	f7ff feab 	bl	8014148 <BSP_SD_GetCardState>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d102      	bne.n	80143fe <SD_write+0x8a>
          {
            res = RES_OK;
 80143f8:	2300      	movs	r3, #0
 80143fa:	75fb      	strb	r3, [r7, #23]
            break;
 80143fc:	e008      	b.n	8014410 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80143fe:	f7f0 f977 	bl	80046f0 <HAL_GetTick>
 8014402:	4602      	mov	r2, r0
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	1ad3      	subs	r3, r2, r3
 8014408:	f247 522f 	movw	r2, #29999	; 0x752f
 801440c:	4293      	cmp	r3, r2
 801440e:	d9ee      	bls.n	80143ee <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014410:	7dfb      	ldrb	r3, [r7, #23]
}
 8014412:	4618      	mov	r0, r3
 8014414:	3718      	adds	r7, #24
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	24000d88 	.word	0x24000d88

08014420 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08c      	sub	sp, #48	; 0x30
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	603a      	str	r2, [r7, #0]
 801442a:	71fb      	strb	r3, [r7, #7]
 801442c:	460b      	mov	r3, r1
 801442e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014430:	2301      	movs	r3, #1
 8014432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014436:	4b25      	ldr	r3, [pc, #148]	; (80144cc <SD_ioctl+0xac>)
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	b2db      	uxtb	r3, r3
 801443c:	f003 0301 	and.w	r3, r3, #1
 8014440:	2b00      	cmp	r3, #0
 8014442:	d001      	beq.n	8014448 <SD_ioctl+0x28>
 8014444:	2303      	movs	r3, #3
 8014446:	e03c      	b.n	80144c2 <SD_ioctl+0xa2>

  switch (cmd)
 8014448:	79bb      	ldrb	r3, [r7, #6]
 801444a:	2b03      	cmp	r3, #3
 801444c:	d834      	bhi.n	80144b8 <SD_ioctl+0x98>
 801444e:	a201      	add	r2, pc, #4	; (adr r2, 8014454 <SD_ioctl+0x34>)
 8014450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014454:	08014465 	.word	0x08014465
 8014458:	0801446d 	.word	0x0801446d
 801445c:	08014485 	.word	0x08014485
 8014460:	0801449f 	.word	0x0801449f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014464:	2300      	movs	r3, #0
 8014466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801446a:	e028      	b.n	80144be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801446c:	f107 0308 	add.w	r3, r7, #8
 8014470:	4618      	mov	r0, r3
 8014472:	f7ff fe79 	bl	8014168 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014476:	6a3a      	ldr	r2, [r7, #32]
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801447c:	2300      	movs	r3, #0
 801447e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014482:	e01c      	b.n	80144be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014484:	f107 0308 	add.w	r3, r7, #8
 8014488:	4618      	mov	r0, r3
 801448a:	f7ff fe6d 	bl	8014168 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014490:	b29a      	uxth	r2, r3
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014496:	2300      	movs	r3, #0
 8014498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801449c:	e00f      	b.n	80144be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801449e:	f107 0308 	add.w	r3, r7, #8
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7ff fe60 	bl	8014168 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80144a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144aa:	0a5a      	lsrs	r2, r3, #9
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80144b0:	2300      	movs	r3, #0
 80144b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144b6:	e002      	b.n	80144be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80144b8:	2304      	movs	r3, #4
 80144ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80144be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3730      	adds	r7, #48	; 0x30
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
 80144ca:	bf00      	nop
 80144cc:	2400000d 	.word	0x2400000d

080144d0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80144d0:	b480      	push	{r7}
 80144d2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80144d4:	4b03      	ldr	r3, [pc, #12]	; (80144e4 <BSP_SD_WriteCpltCallback+0x14>)
 80144d6:	2201      	movs	r2, #1
 80144d8:	601a      	str	r2, [r3, #0]
}
 80144da:	bf00      	nop
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr
 80144e4:	24000d88 	.word	0x24000d88

080144e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80144e8:	b480      	push	{r7}
 80144ea:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80144ec:	4b03      	ldr	r3, [pc, #12]	; (80144fc <BSP_SD_ReadCpltCallback+0x14>)
 80144ee:	2201      	movs	r2, #1
 80144f0:	601a      	str	r2, [r3, #0]
}
 80144f2:	bf00      	nop
 80144f4:	46bd      	mov	sp, r7
 80144f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fa:	4770      	bx	lr
 80144fc:	24000d8c 	.word	0x24000d8c

08014500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b084      	sub	sp, #16
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	460b      	mov	r3, r1
 801450a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801450c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014510:	f002 fcea 	bl	8016ee8 <USBD_static_malloc>
 8014514:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d109      	bne.n	8014530 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	32b0      	adds	r2, #176	; 0xb0
 8014526:	2100      	movs	r1, #0
 8014528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801452c:	2302      	movs	r3, #2
 801452e:	e0d4      	b.n	80146da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014530:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014534:	2100      	movs	r1, #0
 8014536:	68f8      	ldr	r0, [r7, #12]
 8014538:	f002 fd52 	bl	8016fe0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	32b0      	adds	r2, #176	; 0xb0
 8014546:	68f9      	ldr	r1, [r7, #12]
 8014548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	32b0      	adds	r2, #176	; 0xb0
 8014556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	7c1b      	ldrb	r3, [r3, #16]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d138      	bne.n	80145da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014568:	4b5e      	ldr	r3, [pc, #376]	; (80146e4 <USBD_CDC_Init+0x1e4>)
 801456a:	7819      	ldrb	r1, [r3, #0]
 801456c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014570:	2202      	movs	r2, #2
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f002 fb95 	bl	8016ca2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014578:	4b5a      	ldr	r3, [pc, #360]	; (80146e4 <USBD_CDC_Init+0x1e4>)
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	f003 020f 	and.w	r2, r3, #15
 8014580:	6879      	ldr	r1, [r7, #4]
 8014582:	4613      	mov	r3, r2
 8014584:	009b      	lsls	r3, r3, #2
 8014586:	4413      	add	r3, r2
 8014588:	009b      	lsls	r3, r3, #2
 801458a:	440b      	add	r3, r1
 801458c:	3324      	adds	r3, #36	; 0x24
 801458e:	2201      	movs	r2, #1
 8014590:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014592:	4b55      	ldr	r3, [pc, #340]	; (80146e8 <USBD_CDC_Init+0x1e8>)
 8014594:	7819      	ldrb	r1, [r3, #0]
 8014596:	f44f 7300 	mov.w	r3, #512	; 0x200
 801459a:	2202      	movs	r2, #2
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f002 fb80 	bl	8016ca2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80145a2:	4b51      	ldr	r3, [pc, #324]	; (80146e8 <USBD_CDC_Init+0x1e8>)
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	f003 020f 	and.w	r2, r3, #15
 80145aa:	6879      	ldr	r1, [r7, #4]
 80145ac:	4613      	mov	r3, r2
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4413      	add	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	440b      	add	r3, r1
 80145b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80145ba:	2201      	movs	r2, #1
 80145bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80145be:	4b4b      	ldr	r3, [pc, #300]	; (80146ec <USBD_CDC_Init+0x1ec>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	f003 020f 	and.w	r2, r3, #15
 80145c6:	6879      	ldr	r1, [r7, #4]
 80145c8:	4613      	mov	r3, r2
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	4413      	add	r3, r2
 80145ce:	009b      	lsls	r3, r3, #2
 80145d0:	440b      	add	r3, r1
 80145d2:	3326      	adds	r3, #38	; 0x26
 80145d4:	2210      	movs	r2, #16
 80145d6:	801a      	strh	r2, [r3, #0]
 80145d8:	e035      	b.n	8014646 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80145da:	4b42      	ldr	r3, [pc, #264]	; (80146e4 <USBD_CDC_Init+0x1e4>)
 80145dc:	7819      	ldrb	r1, [r3, #0]
 80145de:	2340      	movs	r3, #64	; 0x40
 80145e0:	2202      	movs	r2, #2
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f002 fb5d 	bl	8016ca2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80145e8:	4b3e      	ldr	r3, [pc, #248]	; (80146e4 <USBD_CDC_Init+0x1e4>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	f003 020f 	and.w	r2, r3, #15
 80145f0:	6879      	ldr	r1, [r7, #4]
 80145f2:	4613      	mov	r3, r2
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	4413      	add	r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	440b      	add	r3, r1
 80145fc:	3324      	adds	r3, #36	; 0x24
 80145fe:	2201      	movs	r2, #1
 8014600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014602:	4b39      	ldr	r3, [pc, #228]	; (80146e8 <USBD_CDC_Init+0x1e8>)
 8014604:	7819      	ldrb	r1, [r3, #0]
 8014606:	2340      	movs	r3, #64	; 0x40
 8014608:	2202      	movs	r2, #2
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f002 fb49 	bl	8016ca2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014610:	4b35      	ldr	r3, [pc, #212]	; (80146e8 <USBD_CDC_Init+0x1e8>)
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	f003 020f 	and.w	r2, r3, #15
 8014618:	6879      	ldr	r1, [r7, #4]
 801461a:	4613      	mov	r3, r2
 801461c:	009b      	lsls	r3, r3, #2
 801461e:	4413      	add	r3, r2
 8014620:	009b      	lsls	r3, r3, #2
 8014622:	440b      	add	r3, r1
 8014624:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014628:	2201      	movs	r2, #1
 801462a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801462c:	4b2f      	ldr	r3, [pc, #188]	; (80146ec <USBD_CDC_Init+0x1ec>)
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	f003 020f 	and.w	r2, r3, #15
 8014634:	6879      	ldr	r1, [r7, #4]
 8014636:	4613      	mov	r3, r2
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	4413      	add	r3, r2
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	440b      	add	r3, r1
 8014640:	3326      	adds	r3, #38	; 0x26
 8014642:	2210      	movs	r2, #16
 8014644:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014646:	4b29      	ldr	r3, [pc, #164]	; (80146ec <USBD_CDC_Init+0x1ec>)
 8014648:	7819      	ldrb	r1, [r3, #0]
 801464a:	2308      	movs	r3, #8
 801464c:	2203      	movs	r2, #3
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f002 fb27 	bl	8016ca2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014654:	4b25      	ldr	r3, [pc, #148]	; (80146ec <USBD_CDC_Init+0x1ec>)
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	f003 020f 	and.w	r2, r3, #15
 801465c:	6879      	ldr	r1, [r7, #4]
 801465e:	4613      	mov	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	4413      	add	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	440b      	add	r3, r1
 8014668:	3324      	adds	r3, #36	; 0x24
 801466a:	2201      	movs	r2, #1
 801466c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	2200      	movs	r2, #0
 8014672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	33b0      	adds	r3, #176	; 0xb0
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	4413      	add	r3, r2
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2200      	movs	r2, #0
 801468e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2200      	movs	r2, #0
 8014696:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d101      	bne.n	80146a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80146a4:	2302      	movs	r3, #2
 80146a6:	e018      	b.n	80146da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	7c1b      	ldrb	r3, [r3, #16]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d10a      	bne.n	80146c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80146b0:	4b0d      	ldr	r3, [pc, #52]	; (80146e8 <USBD_CDC_Init+0x1e8>)
 80146b2:	7819      	ldrb	r1, [r3, #0]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80146ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f002 fbde 	bl	8016e80 <USBD_LL_PrepareReceive>
 80146c4:	e008      	b.n	80146d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80146c6:	4b08      	ldr	r3, [pc, #32]	; (80146e8 <USBD_CDC_Init+0x1e8>)
 80146c8:	7819      	ldrb	r1, [r3, #0]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80146d0:	2340      	movs	r3, #64	; 0x40
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f002 fbd4 	bl	8016e80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3710      	adds	r7, #16
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	24000097 	.word	0x24000097
 80146e8:	24000098 	.word	0x24000098
 80146ec:	24000099 	.word	0x24000099

080146f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	460b      	mov	r3, r1
 80146fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80146fc:	4b3a      	ldr	r3, [pc, #232]	; (80147e8 <USBD_CDC_DeInit+0xf8>)
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	4619      	mov	r1, r3
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f002 faf3 	bl	8016cee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014708:	4b37      	ldr	r3, [pc, #220]	; (80147e8 <USBD_CDC_DeInit+0xf8>)
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	f003 020f 	and.w	r2, r3, #15
 8014710:	6879      	ldr	r1, [r7, #4]
 8014712:	4613      	mov	r3, r2
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	4413      	add	r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	440b      	add	r3, r1
 801471c:	3324      	adds	r3, #36	; 0x24
 801471e:	2200      	movs	r2, #0
 8014720:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014722:	4b32      	ldr	r3, [pc, #200]	; (80147ec <USBD_CDC_DeInit+0xfc>)
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	4619      	mov	r1, r3
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f002 fae0 	bl	8016cee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801472e:	4b2f      	ldr	r3, [pc, #188]	; (80147ec <USBD_CDC_DeInit+0xfc>)
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	f003 020f 	and.w	r2, r3, #15
 8014736:	6879      	ldr	r1, [r7, #4]
 8014738:	4613      	mov	r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	4413      	add	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	440b      	add	r3, r1
 8014742:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014746:	2200      	movs	r2, #0
 8014748:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801474a:	4b29      	ldr	r3, [pc, #164]	; (80147f0 <USBD_CDC_DeInit+0x100>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	4619      	mov	r1, r3
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f002 facc 	bl	8016cee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014756:	4b26      	ldr	r3, [pc, #152]	; (80147f0 <USBD_CDC_DeInit+0x100>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	f003 020f 	and.w	r2, r3, #15
 801475e:	6879      	ldr	r1, [r7, #4]
 8014760:	4613      	mov	r3, r2
 8014762:	009b      	lsls	r3, r3, #2
 8014764:	4413      	add	r3, r2
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	440b      	add	r3, r1
 801476a:	3324      	adds	r3, #36	; 0x24
 801476c:	2200      	movs	r2, #0
 801476e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014770:	4b1f      	ldr	r3, [pc, #124]	; (80147f0 <USBD_CDC_DeInit+0x100>)
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	f003 020f 	and.w	r2, r3, #15
 8014778:	6879      	ldr	r1, [r7, #4]
 801477a:	4613      	mov	r3, r2
 801477c:	009b      	lsls	r3, r3, #2
 801477e:	4413      	add	r3, r2
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	440b      	add	r3, r1
 8014784:	3326      	adds	r3, #38	; 0x26
 8014786:	2200      	movs	r2, #0
 8014788:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	32b0      	adds	r2, #176	; 0xb0
 8014794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d01f      	beq.n	80147dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147a2:	687a      	ldr	r2, [r7, #4]
 80147a4:	33b0      	adds	r3, #176	; 0xb0
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	4413      	add	r3, r2
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	32b0      	adds	r2, #176	; 0xb0
 80147ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147be:	4618      	mov	r0, r3
 80147c0:	f002 fba0 	bl	8016f04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	32b0      	adds	r2, #176	; 0xb0
 80147ce:	2100      	movs	r1, #0
 80147d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2200      	movs	r2, #0
 80147d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80147dc:	2300      	movs	r3, #0
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	24000097 	.word	0x24000097
 80147ec:	24000098 	.word	0x24000098
 80147f0:	24000099 	.word	0x24000099

080147f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b086      	sub	sp, #24
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	32b0      	adds	r2, #176	; 0xb0
 8014808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801480c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801480e:	2300      	movs	r3, #0
 8014810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014812:	2300      	movs	r3, #0
 8014814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014816:	2300      	movs	r3, #0
 8014818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d101      	bne.n	8014824 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014820:	2303      	movs	r3, #3
 8014822:	e0bf      	b.n	80149a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801482c:	2b00      	cmp	r3, #0
 801482e:	d050      	beq.n	80148d2 <USBD_CDC_Setup+0xde>
 8014830:	2b20      	cmp	r3, #32
 8014832:	f040 80af 	bne.w	8014994 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	88db      	ldrh	r3, [r3, #6]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d03a      	beq.n	80148b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	b25b      	sxtb	r3, r3
 8014844:	2b00      	cmp	r3, #0
 8014846:	da1b      	bge.n	8014880 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801484e:	687a      	ldr	r2, [r7, #4]
 8014850:	33b0      	adds	r3, #176	; 0xb0
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4413      	add	r3, r2
 8014856:	685b      	ldr	r3, [r3, #4]
 8014858:	689b      	ldr	r3, [r3, #8]
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801485e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014860:	683a      	ldr	r2, [r7, #0]
 8014862:	88d2      	ldrh	r2, [r2, #6]
 8014864:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	88db      	ldrh	r3, [r3, #6]
 801486a:	2b07      	cmp	r3, #7
 801486c:	bf28      	it	cs
 801486e:	2307      	movcs	r3, #7
 8014870:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	89fa      	ldrh	r2, [r7, #14]
 8014876:	4619      	mov	r1, r3
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f001 fd89 	bl	8016390 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801487e:	e090      	b.n	80149a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	785a      	ldrb	r2, [r3, #1]
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	88db      	ldrh	r3, [r3, #6]
 801488e:	2b3f      	cmp	r3, #63	; 0x3f
 8014890:	d803      	bhi.n	801489a <USBD_CDC_Setup+0xa6>
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	88db      	ldrh	r3, [r3, #6]
 8014896:	b2da      	uxtb	r2, r3
 8014898:	e000      	b.n	801489c <USBD_CDC_Setup+0xa8>
 801489a:	2240      	movs	r2, #64	; 0x40
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80148a2:	6939      	ldr	r1, [r7, #16]
 80148a4:	693b      	ldr	r3, [r7, #16]
 80148a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80148aa:	461a      	mov	r2, r3
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f001 fd9b 	bl	80163e8 <USBD_CtlPrepareRx>
      break;
 80148b2:	e076      	b.n	80149a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	33b0      	adds	r3, #176	; 0xb0
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	4413      	add	r3, r2
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	689b      	ldr	r3, [r3, #8]
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	7850      	ldrb	r0, [r2, #1]
 80148ca:	2200      	movs	r2, #0
 80148cc:	6839      	ldr	r1, [r7, #0]
 80148ce:	4798      	blx	r3
      break;
 80148d0:	e067      	b.n	80149a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	785b      	ldrb	r3, [r3, #1]
 80148d6:	2b0b      	cmp	r3, #11
 80148d8:	d851      	bhi.n	801497e <USBD_CDC_Setup+0x18a>
 80148da:	a201      	add	r2, pc, #4	; (adr r2, 80148e0 <USBD_CDC_Setup+0xec>)
 80148dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e0:	08014911 	.word	0x08014911
 80148e4:	0801498d 	.word	0x0801498d
 80148e8:	0801497f 	.word	0x0801497f
 80148ec:	0801497f 	.word	0x0801497f
 80148f0:	0801497f 	.word	0x0801497f
 80148f4:	0801497f 	.word	0x0801497f
 80148f8:	0801497f 	.word	0x0801497f
 80148fc:	0801497f 	.word	0x0801497f
 8014900:	0801497f 	.word	0x0801497f
 8014904:	0801497f 	.word	0x0801497f
 8014908:	0801493b 	.word	0x0801493b
 801490c:	08014965 	.word	0x08014965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014916:	b2db      	uxtb	r3, r3
 8014918:	2b03      	cmp	r3, #3
 801491a:	d107      	bne.n	801492c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801491c:	f107 030a 	add.w	r3, r7, #10
 8014920:	2202      	movs	r2, #2
 8014922:	4619      	mov	r1, r3
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f001 fd33 	bl	8016390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801492a:	e032      	b.n	8014992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801492c:	6839      	ldr	r1, [r7, #0]
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f001 fcbd 	bl	80162ae <USBD_CtlError>
            ret = USBD_FAIL;
 8014934:	2303      	movs	r3, #3
 8014936:	75fb      	strb	r3, [r7, #23]
          break;
 8014938:	e02b      	b.n	8014992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014940:	b2db      	uxtb	r3, r3
 8014942:	2b03      	cmp	r3, #3
 8014944:	d107      	bne.n	8014956 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014946:	f107 030d 	add.w	r3, r7, #13
 801494a:	2201      	movs	r2, #1
 801494c:	4619      	mov	r1, r3
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f001 fd1e 	bl	8016390 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014954:	e01d      	b.n	8014992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014956:	6839      	ldr	r1, [r7, #0]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f001 fca8 	bl	80162ae <USBD_CtlError>
            ret = USBD_FAIL;
 801495e:	2303      	movs	r3, #3
 8014960:	75fb      	strb	r3, [r7, #23]
          break;
 8014962:	e016      	b.n	8014992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801496a:	b2db      	uxtb	r3, r3
 801496c:	2b03      	cmp	r3, #3
 801496e:	d00f      	beq.n	8014990 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014970:	6839      	ldr	r1, [r7, #0]
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f001 fc9b 	bl	80162ae <USBD_CtlError>
            ret = USBD_FAIL;
 8014978:	2303      	movs	r3, #3
 801497a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801497c:	e008      	b.n	8014990 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801497e:	6839      	ldr	r1, [r7, #0]
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f001 fc94 	bl	80162ae <USBD_CtlError>
          ret = USBD_FAIL;
 8014986:	2303      	movs	r3, #3
 8014988:	75fb      	strb	r3, [r7, #23]
          break;
 801498a:	e002      	b.n	8014992 <USBD_CDC_Setup+0x19e>
          break;
 801498c:	bf00      	nop
 801498e:	e008      	b.n	80149a2 <USBD_CDC_Setup+0x1ae>
          break;
 8014990:	bf00      	nop
      }
      break;
 8014992:	e006      	b.n	80149a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014994:	6839      	ldr	r1, [r7, #0]
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f001 fc89 	bl	80162ae <USBD_CtlError>
      ret = USBD_FAIL;
 801499c:	2303      	movs	r3, #3
 801499e:	75fb      	strb	r3, [r7, #23]
      break;
 80149a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3718      	adds	r7, #24
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}

080149ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	460b      	mov	r3, r1
 80149b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80149be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	32b0      	adds	r2, #176	; 0xb0
 80149ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d101      	bne.n	80149d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80149d2:	2303      	movs	r3, #3
 80149d4:	e065      	b.n	8014aa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	32b0      	adds	r2, #176	; 0xb0
 80149e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80149e6:	78fb      	ldrb	r3, [r7, #3]
 80149e8:	f003 020f 	and.w	r2, r3, #15
 80149ec:	6879      	ldr	r1, [r7, #4]
 80149ee:	4613      	mov	r3, r2
 80149f0:	009b      	lsls	r3, r3, #2
 80149f2:	4413      	add	r3, r2
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	440b      	add	r3, r1
 80149f8:	3318      	adds	r3, #24
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d02f      	beq.n	8014a60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014a00:	78fb      	ldrb	r3, [r7, #3]
 8014a02:	f003 020f 	and.w	r2, r3, #15
 8014a06:	6879      	ldr	r1, [r7, #4]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	4413      	add	r3, r2
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	440b      	add	r3, r1
 8014a12:	3318      	adds	r3, #24
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	78fb      	ldrb	r3, [r7, #3]
 8014a18:	f003 010f 	and.w	r1, r3, #15
 8014a1c:	68f8      	ldr	r0, [r7, #12]
 8014a1e:	460b      	mov	r3, r1
 8014a20:	00db      	lsls	r3, r3, #3
 8014a22:	440b      	add	r3, r1
 8014a24:	009b      	lsls	r3, r3, #2
 8014a26:	4403      	add	r3, r0
 8014a28:	3344      	adds	r3, #68	; 0x44
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014a30:	fb01 f303 	mul.w	r3, r1, r3
 8014a34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d112      	bne.n	8014a60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014a3a:	78fb      	ldrb	r3, [r7, #3]
 8014a3c:	f003 020f 	and.w	r2, r3, #15
 8014a40:	6879      	ldr	r1, [r7, #4]
 8014a42:	4613      	mov	r3, r2
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	4413      	add	r3, r2
 8014a48:	009b      	lsls	r3, r3, #2
 8014a4a:	440b      	add	r3, r1
 8014a4c:	3318      	adds	r3, #24
 8014a4e:	2200      	movs	r2, #0
 8014a50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014a52:	78f9      	ldrb	r1, [r7, #3]
 8014a54:	2300      	movs	r3, #0
 8014a56:	2200      	movs	r2, #0
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f002 f9f0 	bl	8016e3e <USBD_LL_Transmit>
 8014a5e:	e01f      	b.n	8014aa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	2200      	movs	r2, #0
 8014a64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a6e:	687a      	ldr	r2, [r7, #4]
 8014a70:	33b0      	adds	r3, #176	; 0xb0
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	4413      	add	r3, r2
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	691b      	ldr	r3, [r3, #16]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d010      	beq.n	8014aa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	33b0      	adds	r3, #176	; 0xb0
 8014a88:	009b      	lsls	r3, r3, #2
 8014a8a:	4413      	add	r3, r2
 8014a8c:	685b      	ldr	r3, [r3, #4]
 8014a8e:	691b      	ldr	r3, [r3, #16]
 8014a90:	68ba      	ldr	r2, [r7, #8]
 8014a92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014a9c:	78fa      	ldrb	r2, [r7, #3]
 8014a9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014aa0:	2300      	movs	r3, #0
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3710      	adds	r7, #16
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b084      	sub	sp, #16
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	460b      	mov	r3, r1
 8014ab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	32b0      	adds	r2, #176	; 0xb0
 8014ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	32b0      	adds	r2, #176	; 0xb0
 8014ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d101      	bne.n	8014adc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014ad8:	2303      	movs	r3, #3
 8014ada:	e01a      	b.n	8014b12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014adc:	78fb      	ldrb	r3, [r7, #3]
 8014ade:	4619      	mov	r1, r3
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f002 f9ee 	bl	8016ec2 <USBD_LL_GetRxDataSize>
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	33b0      	adds	r3, #176	; 0xb0
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	4413      	add	r3, r2
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	68db      	ldr	r3, [r3, #12]
 8014b00:	68fa      	ldr	r2, [r7, #12]
 8014b02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014b0c:	4611      	mov	r1, r2
 8014b0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014b10:	2300      	movs	r3, #0
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3710      	adds	r7, #16
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}

08014b1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014b1a:	b580      	push	{r7, lr}
 8014b1c:	b084      	sub	sp, #16
 8014b1e:	af00      	add	r7, sp, #0
 8014b20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	32b0      	adds	r2, #176	; 0xb0
 8014b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d101      	bne.n	8014b3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014b38:	2303      	movs	r3, #3
 8014b3a:	e025      	b.n	8014b88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b42:	687a      	ldr	r2, [r7, #4]
 8014b44:	33b0      	adds	r3, #176	; 0xb0
 8014b46:	009b      	lsls	r3, r3, #2
 8014b48:	4413      	add	r3, r2
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d01a      	beq.n	8014b86 <USBD_CDC_EP0_RxReady+0x6c>
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014b56:	2bff      	cmp	r3, #255	; 0xff
 8014b58:	d015      	beq.n	8014b86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	33b0      	adds	r3, #176	; 0xb0
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	4413      	add	r3, r2
 8014b68:	685b      	ldr	r3, [r3, #4]
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	68fa      	ldr	r2, [r7, #12]
 8014b6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014b72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b7a:	b292      	uxth	r2, r2
 8014b7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	22ff      	movs	r2, #255	; 0xff
 8014b82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b086      	sub	sp, #24
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b98:	2182      	movs	r1, #130	; 0x82
 8014b9a:	4818      	ldr	r0, [pc, #96]	; (8014bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014b9c:	f000 fd4f 	bl	801563e <USBD_GetEpDesc>
 8014ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	4815      	ldr	r0, [pc, #84]	; (8014bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ba6:	f000 fd4a 	bl	801563e <USBD_GetEpDesc>
 8014baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014bac:	2181      	movs	r1, #129	; 0x81
 8014bae:	4813      	ldr	r0, [pc, #76]	; (8014bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bb0:	f000 fd45 	bl	801563e <USBD_GetEpDesc>
 8014bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d002      	beq.n	8014bc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	2210      	movs	r2, #16
 8014bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d006      	beq.n	8014bd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bd0:	711a      	strb	r2, [r3, #4]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d006      	beq.n	8014bea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2200      	movs	r2, #0
 8014be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014be4:	711a      	strb	r2, [r3, #4]
 8014be6:	2200      	movs	r2, #0
 8014be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2243      	movs	r2, #67	; 0x43
 8014bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014bf0:	4b02      	ldr	r3, [pc, #8]	; (8014bfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3718      	adds	r7, #24
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	24000054 	.word	0x24000054

08014c00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b086      	sub	sp, #24
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c08:	2182      	movs	r1, #130	; 0x82
 8014c0a:	4818      	ldr	r0, [pc, #96]	; (8014c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c0c:	f000 fd17 	bl	801563e <USBD_GetEpDesc>
 8014c10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c12:	2101      	movs	r1, #1
 8014c14:	4815      	ldr	r0, [pc, #84]	; (8014c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c16:	f000 fd12 	bl	801563e <USBD_GetEpDesc>
 8014c1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c1c:	2181      	movs	r1, #129	; 0x81
 8014c1e:	4813      	ldr	r0, [pc, #76]	; (8014c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c20:	f000 fd0d 	bl	801563e <USBD_GetEpDesc>
 8014c24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	2210      	movs	r2, #16
 8014c30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d006      	beq.n	8014c46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	711a      	strb	r2, [r3, #4]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f042 0202 	orr.w	r2, r2, #2
 8014c44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d006      	beq.n	8014c5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	711a      	strb	r2, [r3, #4]
 8014c52:	2200      	movs	r2, #0
 8014c54:	f042 0202 	orr.w	r2, r2, #2
 8014c58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2243      	movs	r2, #67	; 0x43
 8014c5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c60:	4b02      	ldr	r3, [pc, #8]	; (8014c6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3718      	adds	r7, #24
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	24000054 	.word	0x24000054

08014c70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b086      	sub	sp, #24
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c78:	2182      	movs	r1, #130	; 0x82
 8014c7a:	4818      	ldr	r0, [pc, #96]	; (8014cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c7c:	f000 fcdf 	bl	801563e <USBD_GetEpDesc>
 8014c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c82:	2101      	movs	r1, #1
 8014c84:	4815      	ldr	r0, [pc, #84]	; (8014cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c86:	f000 fcda 	bl	801563e <USBD_GetEpDesc>
 8014c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c8c:	2181      	movs	r1, #129	; 0x81
 8014c8e:	4813      	ldr	r0, [pc, #76]	; (8014cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c90:	f000 fcd5 	bl	801563e <USBD_GetEpDesc>
 8014c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d002      	beq.n	8014ca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	2210      	movs	r2, #16
 8014ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d006      	beq.n	8014cb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	2200      	movs	r2, #0
 8014cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cb0:	711a      	strb	r2, [r3, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d006      	beq.n	8014cca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cc4:	711a      	strb	r2, [r3, #4]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2243      	movs	r2, #67	; 0x43
 8014cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cd0:	4b02      	ldr	r3, [pc, #8]	; (8014cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3718      	adds	r7, #24
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	24000054 	.word	0x24000054

08014ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	220a      	movs	r2, #10
 8014cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014cee:	4b03      	ldr	r3, [pc, #12]	; (8014cfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr
 8014cfc:	24000010 	.word	0x24000010

08014d00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d101      	bne.n	8014d14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014d10:	2303      	movs	r3, #3
 8014d12:	e009      	b.n	8014d28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	33b0      	adds	r3, #176	; 0xb0
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	4413      	add	r3, r2
 8014d22:	683a      	ldr	r2, [r7, #0]
 8014d24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014d26:	2300      	movs	r3, #0
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014d34:	b480      	push	{r7}
 8014d36:	b087      	sub	sp, #28
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	32b0      	adds	r2, #176	; 0xb0
 8014d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d101      	bne.n	8014d5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d56:	2303      	movs	r3, #3
 8014d58:	e008      	b.n	8014d6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	68ba      	ldr	r2, [r7, #8]
 8014d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	687a      	ldr	r2, [r7, #4]
 8014d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014d6a:	2300      	movs	r3, #0
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	371c      	adds	r7, #28
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr

08014d78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b085      	sub	sp, #20
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	32b0      	adds	r2, #176	; 0xb0
 8014d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d101      	bne.n	8014d9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014d98:	2303      	movs	r3, #3
 8014d9a:	e004      	b.n	8014da6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	683a      	ldr	r2, [r7, #0]
 8014da0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014da4:	2300      	movs	r3, #0
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3714      	adds	r7, #20
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr
	...

08014db4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	32b0      	adds	r2, #176	; 0xb0
 8014dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014dcc:	2301      	movs	r3, #1
 8014dce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d101      	bne.n	8014dda <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014dd6:	2303      	movs	r3, #3
 8014dd8:	e025      	b.n	8014e26 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d11f      	bne.n	8014e24 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	2201      	movs	r2, #1
 8014de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014dec:	4b10      	ldr	r3, [pc, #64]	; (8014e30 <USBD_CDC_TransmitPacket+0x7c>)
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	f003 020f 	and.w	r2, r3, #15
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	4613      	mov	r3, r2
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	4413      	add	r3, r2
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4403      	add	r3, r0
 8014e06:	3318      	adds	r3, #24
 8014e08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014e0a:	4b09      	ldr	r3, [pc, #36]	; (8014e30 <USBD_CDC_TransmitPacket+0x7c>)
 8014e0c:	7819      	ldrb	r1, [r3, #0]
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f002 f80f 	bl	8016e3e <USBD_LL_Transmit>

    ret = USBD_OK;
 8014e20:	2300      	movs	r3, #0
 8014e22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3710      	adds	r7, #16
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	24000097 	.word	0x24000097

08014e34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	32b0      	adds	r2, #176	; 0xb0
 8014e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	32b0      	adds	r2, #176	; 0xb0
 8014e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d101      	bne.n	8014e62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014e5e:	2303      	movs	r3, #3
 8014e60:	e018      	b.n	8014e94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	7c1b      	ldrb	r3, [r3, #16]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d10a      	bne.n	8014e80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e6a:	4b0c      	ldr	r3, [pc, #48]	; (8014e9c <USBD_CDC_ReceivePacket+0x68>)
 8014e6c:	7819      	ldrb	r1, [r3, #0]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f002 f801 	bl	8016e80 <USBD_LL_PrepareReceive>
 8014e7e:	e008      	b.n	8014e92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e80:	4b06      	ldr	r3, [pc, #24]	; (8014e9c <USBD_CDC_ReceivePacket+0x68>)
 8014e82:	7819      	ldrb	r1, [r3, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e8a:	2340      	movs	r3, #64	; 0x40
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f001 fff7 	bl	8016e80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e92:	2300      	movs	r3, #0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3710      	adds	r7, #16
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	24000098 	.word	0x24000098

08014ea0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b086      	sub	sp, #24
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d101      	bne.n	8014eb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014eb4:	2303      	movs	r3, #3
 8014eb6:	e01f      	b.n	8014ef8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d003      	beq.n	8014ede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	68ba      	ldr	r2, [r7, #8]
 8014eda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	79fa      	ldrb	r2, [r7, #7]
 8014eea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f001 fe6b 	bl	8016bc8 <USBD_LL_Init>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3718      	adds	r7, #24
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b084      	sub	sp, #16
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d101      	bne.n	8014f18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f14:	2303      	movs	r3, #3
 8014f16:	e025      	b.n	8014f64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	683a      	ldr	r2, [r7, #0]
 8014f1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	32ae      	adds	r2, #174	; 0xae
 8014f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d00f      	beq.n	8014f54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	32ae      	adds	r2, #174	; 0xae
 8014f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f44:	f107 020e 	add.w	r2, r7, #14
 8014f48:	4610      	mov	r0, r2
 8014f4a:	4798      	blx	r3
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014f5a:	1c5a      	adds	r2, r3, #1
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014f62:	2300      	movs	r3, #0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3710      	adds	r7, #16
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f001 fe79 	bl	8016c6c <USBD_LL_Start>
 8014f7a:	4603      	mov	r3, r0
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3708      	adds	r7, #8
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}

08014f84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b083      	sub	sp, #12
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014f8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	370c      	adds	r7, #12
 8014f92:	46bd      	mov	sp, r7
 8014f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f98:	4770      	bx	lr

08014f9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b084      	sub	sp, #16
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	6078      	str	r0, [r7, #4]
 8014fa2:	460b      	mov	r3, r1
 8014fa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d009      	beq.n	8014fc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	78fa      	ldrb	r2, [r7, #3]
 8014fbe:	4611      	mov	r1, r2
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	4798      	blx	r3
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}

08014fd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fd2:	b580      	push	{r7, lr}
 8014fd4:	b084      	sub	sp, #16
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
 8014fda:	460b      	mov	r3, r1
 8014fdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fe8:	685b      	ldr	r3, [r3, #4]
 8014fea:	78fa      	ldrb	r2, [r7, #3]
 8014fec:	4611      	mov	r1, r2
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	4798      	blx	r3
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d001      	beq.n	8014ffc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014ff8:	2303      	movs	r3, #3
 8014ffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b084      	sub	sp, #16
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
 801500e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015016:	6839      	ldr	r1, [r7, #0]
 8015018:	4618      	mov	r0, r3
 801501a:	f001 f90e 	bl	801623a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2201      	movs	r2, #1
 8015022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801502c:	461a      	mov	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801503a:	f003 031f 	and.w	r3, r3, #31
 801503e:	2b02      	cmp	r3, #2
 8015040:	d01a      	beq.n	8015078 <USBD_LL_SetupStage+0x72>
 8015042:	2b02      	cmp	r3, #2
 8015044:	d822      	bhi.n	801508c <USBD_LL_SetupStage+0x86>
 8015046:	2b00      	cmp	r3, #0
 8015048:	d002      	beq.n	8015050 <USBD_LL_SetupStage+0x4a>
 801504a:	2b01      	cmp	r3, #1
 801504c:	d00a      	beq.n	8015064 <USBD_LL_SetupStage+0x5e>
 801504e:	e01d      	b.n	801508c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015056:	4619      	mov	r1, r3
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f000 fb65 	bl	8015728 <USBD_StdDevReq>
 801505e:	4603      	mov	r3, r0
 8015060:	73fb      	strb	r3, [r7, #15]
      break;
 8015062:	e020      	b.n	80150a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801506a:	4619      	mov	r1, r3
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f000 fbcd 	bl	801580c <USBD_StdItfReq>
 8015072:	4603      	mov	r3, r0
 8015074:	73fb      	strb	r3, [r7, #15]
      break;
 8015076:	e016      	b.n	80150a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801507e:	4619      	mov	r1, r3
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f000 fc2f 	bl	80158e4 <USBD_StdEPReq>
 8015086:	4603      	mov	r3, r0
 8015088:	73fb      	strb	r3, [r7, #15]
      break;
 801508a:	e00c      	b.n	80150a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015092:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015096:	b2db      	uxtb	r3, r3
 8015098:	4619      	mov	r1, r3
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f001 fe46 	bl	8016d2c <USBD_LL_StallEP>
 80150a0:	4603      	mov	r3, r0
 80150a2:	73fb      	strb	r3, [r7, #15]
      break;
 80150a4:	bf00      	nop
  }

  return ret;
 80150a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b086      	sub	sp, #24
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	460b      	mov	r3, r1
 80150ba:	607a      	str	r2, [r7, #4]
 80150bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80150c2:	7afb      	ldrb	r3, [r7, #11]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d16e      	bne.n	80151a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80150ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80150d6:	2b03      	cmp	r3, #3
 80150d8:	f040 8098 	bne.w	801520c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	689a      	ldr	r2, [r3, #8]
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d913      	bls.n	8015110 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	689a      	ldr	r2, [r3, #8]
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	68db      	ldr	r3, [r3, #12]
 80150f0:	1ad2      	subs	r2, r2, r3
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	68da      	ldr	r2, [r3, #12]
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	4293      	cmp	r3, r2
 8015100:	bf28      	it	cs
 8015102:	4613      	movcs	r3, r2
 8015104:	461a      	mov	r2, r3
 8015106:	6879      	ldr	r1, [r7, #4]
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	f001 f98a 	bl	8016422 <USBD_CtlContinueRx>
 801510e:	e07d      	b.n	801520c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015116:	f003 031f 	and.w	r3, r3, #31
 801511a:	2b02      	cmp	r3, #2
 801511c:	d014      	beq.n	8015148 <USBD_LL_DataOutStage+0x98>
 801511e:	2b02      	cmp	r3, #2
 8015120:	d81d      	bhi.n	801515e <USBD_LL_DataOutStage+0xae>
 8015122:	2b00      	cmp	r3, #0
 8015124:	d002      	beq.n	801512c <USBD_LL_DataOutStage+0x7c>
 8015126:	2b01      	cmp	r3, #1
 8015128:	d003      	beq.n	8015132 <USBD_LL_DataOutStage+0x82>
 801512a:	e018      	b.n	801515e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801512c:	2300      	movs	r3, #0
 801512e:	75bb      	strb	r3, [r7, #22]
            break;
 8015130:	e018      	b.n	8015164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015138:	b2db      	uxtb	r3, r3
 801513a:	4619      	mov	r1, r3
 801513c:	68f8      	ldr	r0, [r7, #12]
 801513e:	f000 fa64 	bl	801560a <USBD_CoreFindIF>
 8015142:	4603      	mov	r3, r0
 8015144:	75bb      	strb	r3, [r7, #22]
            break;
 8015146:	e00d      	b.n	8015164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801514e:	b2db      	uxtb	r3, r3
 8015150:	4619      	mov	r1, r3
 8015152:	68f8      	ldr	r0, [r7, #12]
 8015154:	f000 fa66 	bl	8015624 <USBD_CoreFindEP>
 8015158:	4603      	mov	r3, r0
 801515a:	75bb      	strb	r3, [r7, #22]
            break;
 801515c:	e002      	b.n	8015164 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801515e:	2300      	movs	r3, #0
 8015160:	75bb      	strb	r3, [r7, #22]
            break;
 8015162:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015164:	7dbb      	ldrb	r3, [r7, #22]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d119      	bne.n	801519e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015170:	b2db      	uxtb	r3, r3
 8015172:	2b03      	cmp	r3, #3
 8015174:	d113      	bne.n	801519e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015176:	7dba      	ldrb	r2, [r7, #22]
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	32ae      	adds	r2, #174	; 0xae
 801517c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015180:	691b      	ldr	r3, [r3, #16]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00b      	beq.n	801519e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015186:	7dba      	ldrb	r2, [r7, #22]
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801518e:	7dba      	ldrb	r2, [r7, #22]
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	32ae      	adds	r2, #174	; 0xae
 8015194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015198:	691b      	ldr	r3, [r3, #16]
 801519a:	68f8      	ldr	r0, [r7, #12]
 801519c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801519e:	68f8      	ldr	r0, [r7, #12]
 80151a0:	f001 f950 	bl	8016444 <USBD_CtlSendStatus>
 80151a4:	e032      	b.n	801520c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80151a6:	7afb      	ldrb	r3, [r7, #11]
 80151a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151ac:	b2db      	uxtb	r3, r3
 80151ae:	4619      	mov	r1, r3
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f000 fa37 	bl	8015624 <USBD_CoreFindEP>
 80151b6:	4603      	mov	r3, r0
 80151b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80151ba:	7dbb      	ldrb	r3, [r7, #22]
 80151bc:	2bff      	cmp	r3, #255	; 0xff
 80151be:	d025      	beq.n	801520c <USBD_LL_DataOutStage+0x15c>
 80151c0:	7dbb      	ldrb	r3, [r7, #22]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d122      	bne.n	801520c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	2b03      	cmp	r3, #3
 80151d0:	d117      	bne.n	8015202 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80151d2:	7dba      	ldrb	r2, [r7, #22]
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	32ae      	adds	r2, #174	; 0xae
 80151d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151dc:	699b      	ldr	r3, [r3, #24]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d00f      	beq.n	8015202 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80151e2:	7dba      	ldrb	r2, [r7, #22]
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80151ea:	7dba      	ldrb	r2, [r7, #22]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	32ae      	adds	r2, #174	; 0xae
 80151f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151f4:	699b      	ldr	r3, [r3, #24]
 80151f6:	7afa      	ldrb	r2, [r7, #11]
 80151f8:	4611      	mov	r1, r2
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	4798      	blx	r3
 80151fe:	4603      	mov	r3, r0
 8015200:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015202:	7dfb      	ldrb	r3, [r7, #23]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d001      	beq.n	801520c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015208:	7dfb      	ldrb	r3, [r7, #23]
 801520a:	e000      	b.n	801520e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801520c:	2300      	movs	r3, #0
}
 801520e:	4618      	mov	r0, r3
 8015210:	3718      	adds	r7, #24
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	b086      	sub	sp, #24
 801521a:	af00      	add	r7, sp, #0
 801521c:	60f8      	str	r0, [r7, #12]
 801521e:	460b      	mov	r3, r1
 8015220:	607a      	str	r2, [r7, #4]
 8015222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015224:	7afb      	ldrb	r3, [r7, #11]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d16f      	bne.n	801530a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	3314      	adds	r3, #20
 801522e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015236:	2b02      	cmp	r3, #2
 8015238:	d15a      	bne.n	80152f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	689a      	ldr	r2, [r3, #8]
 801523e:	693b      	ldr	r3, [r7, #16]
 8015240:	68db      	ldr	r3, [r3, #12]
 8015242:	429a      	cmp	r2, r3
 8015244:	d914      	bls.n	8015270 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	689a      	ldr	r2, [r3, #8]
 801524a:	693b      	ldr	r3, [r7, #16]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	1ad2      	subs	r2, r2, r3
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	461a      	mov	r2, r3
 801525a:	6879      	ldr	r1, [r7, #4]
 801525c:	68f8      	ldr	r0, [r7, #12]
 801525e:	f001 f8b2 	bl	80163c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015262:	2300      	movs	r3, #0
 8015264:	2200      	movs	r2, #0
 8015266:	2100      	movs	r1, #0
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f001 fe09 	bl	8016e80 <USBD_LL_PrepareReceive>
 801526e:	e03f      	b.n	80152f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	68da      	ldr	r2, [r3, #12]
 8015274:	693b      	ldr	r3, [r7, #16]
 8015276:	689b      	ldr	r3, [r3, #8]
 8015278:	429a      	cmp	r2, r3
 801527a:	d11c      	bne.n	80152b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	685a      	ldr	r2, [r3, #4]
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015284:	429a      	cmp	r2, r3
 8015286:	d316      	bcc.n	80152b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015292:	429a      	cmp	r2, r3
 8015294:	d20f      	bcs.n	80152b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015296:	2200      	movs	r2, #0
 8015298:	2100      	movs	r1, #0
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f001 f893 	bl	80163c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	2200      	movs	r2, #0
 80152a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80152a8:	2300      	movs	r3, #0
 80152aa:	2200      	movs	r2, #0
 80152ac:	2100      	movs	r1, #0
 80152ae:	68f8      	ldr	r0, [r7, #12]
 80152b0:	f001 fde6 	bl	8016e80 <USBD_LL_PrepareReceive>
 80152b4:	e01c      	b.n	80152f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	2b03      	cmp	r3, #3
 80152c0:	d10f      	bne.n	80152e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152c8:	68db      	ldr	r3, [r3, #12]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d009      	beq.n	80152e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	68f8      	ldr	r0, [r7, #12]
 80152e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80152e2:	2180      	movs	r1, #128	; 0x80
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f001 fd21 	bl	8016d2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f001 f8bd 	bl	801646a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d03a      	beq.n	8015370 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80152fa:	68f8      	ldr	r0, [r7, #12]
 80152fc:	f7ff fe42 	bl	8014f84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2200      	movs	r2, #0
 8015304:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015308:	e032      	b.n	8015370 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801530a:	7afb      	ldrb	r3, [r7, #11]
 801530c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015310:	b2db      	uxtb	r3, r3
 8015312:	4619      	mov	r1, r3
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f000 f985 	bl	8015624 <USBD_CoreFindEP>
 801531a:	4603      	mov	r3, r0
 801531c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801531e:	7dfb      	ldrb	r3, [r7, #23]
 8015320:	2bff      	cmp	r3, #255	; 0xff
 8015322:	d025      	beq.n	8015370 <USBD_LL_DataInStage+0x15a>
 8015324:	7dfb      	ldrb	r3, [r7, #23]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d122      	bne.n	8015370 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015330:	b2db      	uxtb	r3, r3
 8015332:	2b03      	cmp	r3, #3
 8015334:	d11c      	bne.n	8015370 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015336:	7dfa      	ldrb	r2, [r7, #23]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	32ae      	adds	r2, #174	; 0xae
 801533c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015340:	695b      	ldr	r3, [r3, #20]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d014      	beq.n	8015370 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015346:	7dfa      	ldrb	r2, [r7, #23]
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801534e:	7dfa      	ldrb	r2, [r7, #23]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	32ae      	adds	r2, #174	; 0xae
 8015354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015358:	695b      	ldr	r3, [r3, #20]
 801535a:	7afa      	ldrb	r2, [r7, #11]
 801535c:	4611      	mov	r1, r2
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	4798      	blx	r3
 8015362:	4603      	mov	r3, r0
 8015364:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015366:	7dbb      	ldrb	r3, [r7, #22]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d001      	beq.n	8015370 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801536c:	7dbb      	ldrb	r3, [r7, #22]
 801536e:	e000      	b.n	8015372 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015370:	2300      	movs	r3, #0
}
 8015372:	4618      	mov	r0, r3
 8015374:	3718      	adds	r7, #24
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b084      	sub	sp, #16
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015382:	2300      	movs	r3, #0
 8015384:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2201      	movs	r2, #1
 801538a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2200      	movs	r2, #0
 8015392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2200      	movs	r2, #0
 801539a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2200      	movs	r2, #0
 80153a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2200      	movs	r2, #0
 80153a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d014      	beq.n	80153e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00e      	beq.n	80153e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153c8:	685b      	ldr	r3, [r3, #4]
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	6852      	ldr	r2, [r2, #4]
 80153ce:	b2d2      	uxtb	r2, r2
 80153d0:	4611      	mov	r1, r2
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	4798      	blx	r3
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d001      	beq.n	80153e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80153dc:	2303      	movs	r3, #3
 80153de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80153e0:	2340      	movs	r3, #64	; 0x40
 80153e2:	2200      	movs	r2, #0
 80153e4:	2100      	movs	r1, #0
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f001 fc5b 	bl	8016ca2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2201      	movs	r2, #1
 80153f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2240      	movs	r2, #64	; 0x40
 80153f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80153fc:	2340      	movs	r3, #64	; 0x40
 80153fe:	2200      	movs	r2, #0
 8015400:	2180      	movs	r1, #128	; 0x80
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f001 fc4d 	bl	8016ca2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2201      	movs	r2, #1
 801540c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2240      	movs	r2, #64	; 0x40
 8015412:	621a      	str	r2, [r3, #32]

  return ret;
 8015414:	7bfb      	ldrb	r3, [r7, #15]
}
 8015416:	4618      	mov	r0, r3
 8015418:	3710      	adds	r7, #16
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801541e:	b480      	push	{r7}
 8015420:	b083      	sub	sp, #12
 8015422:	af00      	add	r7, sp, #0
 8015424:	6078      	str	r0, [r7, #4]
 8015426:	460b      	mov	r3, r1
 8015428:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	78fa      	ldrb	r2, [r7, #3]
 801542e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015430:	2300      	movs	r3, #0
}
 8015432:	4618      	mov	r0, r3
 8015434:	370c      	adds	r7, #12
 8015436:	46bd      	mov	sp, r7
 8015438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543c:	4770      	bx	lr

0801543e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801543e:	b480      	push	{r7}
 8015440:	b083      	sub	sp, #12
 8015442:	af00      	add	r7, sp, #0
 8015444:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801544c:	b2db      	uxtb	r3, r3
 801544e:	2b04      	cmp	r3, #4
 8015450:	d006      	beq.n	8015460 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015458:	b2da      	uxtb	r2, r3
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2204      	movs	r2, #4
 8015464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015468:	2300      	movs	r3, #0
}
 801546a:	4618      	mov	r0, r3
 801546c:	370c      	adds	r7, #12
 801546e:	46bd      	mov	sp, r7
 8015470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015474:	4770      	bx	lr

08015476 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015476:	b480      	push	{r7}
 8015478:	b083      	sub	sp, #12
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015484:	b2db      	uxtb	r3, r3
 8015486:	2b04      	cmp	r3, #4
 8015488:	d106      	bne.n	8015498 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015490:	b2da      	uxtb	r2, r3
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015498:	2300      	movs	r3, #0
}
 801549a:	4618      	mov	r0, r3
 801549c:	370c      	adds	r7, #12
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr

080154a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b082      	sub	sp, #8
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	2b03      	cmp	r3, #3
 80154b8:	d110      	bne.n	80154dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d00b      	beq.n	80154dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154ca:	69db      	ldr	r3, [r3, #28]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d005      	beq.n	80154dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154d6:	69db      	ldr	r3, [r3, #28]
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80154dc:	2300      	movs	r3, #0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}

080154e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80154e6:	b580      	push	{r7, lr}
 80154e8:	b082      	sub	sp, #8
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
 80154ee:	460b      	mov	r3, r1
 80154f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	32ae      	adds	r2, #174	; 0xae
 80154fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d101      	bne.n	8015508 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015504:	2303      	movs	r3, #3
 8015506:	e01c      	b.n	8015542 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801550e:	b2db      	uxtb	r3, r3
 8015510:	2b03      	cmp	r3, #3
 8015512:	d115      	bne.n	8015540 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	32ae      	adds	r2, #174	; 0xae
 801551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015522:	6a1b      	ldr	r3, [r3, #32]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d00b      	beq.n	8015540 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	32ae      	adds	r2, #174	; 0xae
 8015532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015536:	6a1b      	ldr	r3, [r3, #32]
 8015538:	78fa      	ldrb	r2, [r7, #3]
 801553a:	4611      	mov	r1, r2
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015540:	2300      	movs	r3, #0
}
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801554a:	b580      	push	{r7, lr}
 801554c:	b082      	sub	sp, #8
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
 8015552:	460b      	mov	r3, r1
 8015554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	32ae      	adds	r2, #174	; 0xae
 8015560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d101      	bne.n	801556c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015568:	2303      	movs	r3, #3
 801556a:	e01c      	b.n	80155a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015572:	b2db      	uxtb	r3, r3
 8015574:	2b03      	cmp	r3, #3
 8015576:	d115      	bne.n	80155a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	32ae      	adds	r2, #174	; 0xae
 8015582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015588:	2b00      	cmp	r3, #0
 801558a:	d00b      	beq.n	80155a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	32ae      	adds	r2, #174	; 0xae
 8015596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801559c:	78fa      	ldrb	r2, [r7, #3]
 801559e:	4611      	mov	r1, r2
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155a4:	2300      	movs	r3, #0
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80155ae:	b480      	push	{r7}
 80155b0:	b083      	sub	sp, #12
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	370c      	adds	r7, #12
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b084      	sub	sp, #16
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80155cc:	2300      	movs	r3, #0
 80155ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2201      	movs	r2, #1
 80155d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d00e      	beq.n	8015600 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	6852      	ldr	r2, [r2, #4]
 80155ee:	b2d2      	uxtb	r2, r2
 80155f0:	4611      	mov	r1, r2
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	4798      	blx	r3
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d001      	beq.n	8015600 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80155fc:	2303      	movs	r3, #3
 80155fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015600:	7bfb      	ldrb	r3, [r7, #15]
}
 8015602:	4618      	mov	r0, r3
 8015604:	3710      	adds	r7, #16
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801560a:	b480      	push	{r7}
 801560c:	b083      	sub	sp, #12
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
 8015612:	460b      	mov	r3, r1
 8015614:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015616:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015618:	4618      	mov	r0, r3
 801561a:	370c      	adds	r7, #12
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr

08015624 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015624:	b480      	push	{r7}
 8015626:	b083      	sub	sp, #12
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	460b      	mov	r3, r1
 801562e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015630:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015632:	4618      	mov	r0, r3
 8015634:	370c      	adds	r7, #12
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b086      	sub	sp, #24
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	460b      	mov	r3, r1
 8015648:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015652:	2300      	movs	r3, #0
 8015654:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	885b      	ldrh	r3, [r3, #2]
 801565a:	b29a      	uxth	r2, r3
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	b29b      	uxth	r3, r3
 8015662:	429a      	cmp	r2, r3
 8015664:	d920      	bls.n	80156a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	b29b      	uxth	r3, r3
 801566c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801566e:	e013      	b.n	8015698 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015670:	f107 030a 	add.w	r3, r7, #10
 8015674:	4619      	mov	r1, r3
 8015676:	6978      	ldr	r0, [r7, #20]
 8015678:	f000 f81b 	bl	80156b2 <USBD_GetNextDesc>
 801567c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	785b      	ldrb	r3, [r3, #1]
 8015682:	2b05      	cmp	r3, #5
 8015684:	d108      	bne.n	8015698 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	789b      	ldrb	r3, [r3, #2]
 801568e:	78fa      	ldrb	r2, [r7, #3]
 8015690:	429a      	cmp	r2, r3
 8015692:	d008      	beq.n	80156a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015694:	2300      	movs	r3, #0
 8015696:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	885b      	ldrh	r3, [r3, #2]
 801569c:	b29a      	uxth	r2, r3
 801569e:	897b      	ldrh	r3, [r7, #10]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d8e5      	bhi.n	8015670 <USBD_GetEpDesc+0x32>
 80156a4:	e000      	b.n	80156a8 <USBD_GetEpDesc+0x6a>
          break;
 80156a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80156a8:	693b      	ldr	r3, [r7, #16]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3718      	adds	r7, #24
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80156b2:	b480      	push	{r7}
 80156b4:	b085      	sub	sp, #20
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	881a      	ldrh	r2, [r3, #0]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	4413      	add	r3, r2
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	461a      	mov	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	4413      	add	r3, r2
 80156dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80156de:	68fb      	ldr	r3, [r7, #12]
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3714      	adds	r7, #20
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80156ec:	b480      	push	{r7}
 80156ee:	b087      	sub	sp, #28
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	3301      	adds	r3, #1
 8015702:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801570a:	8a3b      	ldrh	r3, [r7, #16]
 801570c:	021b      	lsls	r3, r3, #8
 801570e:	b21a      	sxth	r2, r3
 8015710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015714:	4313      	orrs	r3, r2
 8015716:	b21b      	sxth	r3, r3
 8015718:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801571a:	89fb      	ldrh	r3, [r7, #14]
}
 801571c:	4618      	mov	r0, r3
 801571e:	371c      	adds	r7, #28
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b084      	sub	sp, #16
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015732:	2300      	movs	r3, #0
 8015734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801573e:	2b40      	cmp	r3, #64	; 0x40
 8015740:	d005      	beq.n	801574e <USBD_StdDevReq+0x26>
 8015742:	2b40      	cmp	r3, #64	; 0x40
 8015744:	d857      	bhi.n	80157f6 <USBD_StdDevReq+0xce>
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00f      	beq.n	801576a <USBD_StdDevReq+0x42>
 801574a:	2b20      	cmp	r3, #32
 801574c:	d153      	bne.n	80157f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	32ae      	adds	r2, #174	; 0xae
 8015758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801575c:	689b      	ldr	r3, [r3, #8]
 801575e:	6839      	ldr	r1, [r7, #0]
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	4798      	blx	r3
 8015764:	4603      	mov	r3, r0
 8015766:	73fb      	strb	r3, [r7, #15]
      break;
 8015768:	e04a      	b.n	8015800 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	785b      	ldrb	r3, [r3, #1]
 801576e:	2b09      	cmp	r3, #9
 8015770:	d83b      	bhi.n	80157ea <USBD_StdDevReq+0xc2>
 8015772:	a201      	add	r2, pc, #4	; (adr r2, 8015778 <USBD_StdDevReq+0x50>)
 8015774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015778:	080157cd 	.word	0x080157cd
 801577c:	080157e1 	.word	0x080157e1
 8015780:	080157eb 	.word	0x080157eb
 8015784:	080157d7 	.word	0x080157d7
 8015788:	080157eb 	.word	0x080157eb
 801578c:	080157ab 	.word	0x080157ab
 8015790:	080157a1 	.word	0x080157a1
 8015794:	080157eb 	.word	0x080157eb
 8015798:	080157c3 	.word	0x080157c3
 801579c:	080157b5 	.word	0x080157b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80157a0:	6839      	ldr	r1, [r7, #0]
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f000 fa3c 	bl	8015c20 <USBD_GetDescriptor>
          break;
 80157a8:	e024      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80157aa:	6839      	ldr	r1, [r7, #0]
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 fba1 	bl	8015ef4 <USBD_SetAddress>
          break;
 80157b2:	e01f      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80157b4:	6839      	ldr	r1, [r7, #0]
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 fbe0 	bl	8015f7c <USBD_SetConfig>
 80157bc:	4603      	mov	r3, r0
 80157be:	73fb      	strb	r3, [r7, #15]
          break;
 80157c0:	e018      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80157c2:	6839      	ldr	r1, [r7, #0]
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f000 fc83 	bl	80160d0 <USBD_GetConfig>
          break;
 80157ca:	e013      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80157cc:	6839      	ldr	r1, [r7, #0]
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f000 fcb4 	bl	801613c <USBD_GetStatus>
          break;
 80157d4:	e00e      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80157d6:	6839      	ldr	r1, [r7, #0]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 fce3 	bl	80161a4 <USBD_SetFeature>
          break;
 80157de:	e009      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fd07 	bl	80161f6 <USBD_ClrFeature>
          break;
 80157e8:	e004      	b.n	80157f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80157ea:	6839      	ldr	r1, [r7, #0]
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 fd5e 	bl	80162ae <USBD_CtlError>
          break;
 80157f2:	bf00      	nop
      }
      break;
 80157f4:	e004      	b.n	8015800 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80157f6:	6839      	ldr	r1, [r7, #0]
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f000 fd58 	bl	80162ae <USBD_CtlError>
      break;
 80157fe:	bf00      	nop
  }

  return ret;
 8015800:	7bfb      	ldrb	r3, [r7, #15]
}
 8015802:	4618      	mov	r0, r3
 8015804:	3710      	adds	r7, #16
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop

0801580c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015816:	2300      	movs	r3, #0
 8015818:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015822:	2b40      	cmp	r3, #64	; 0x40
 8015824:	d005      	beq.n	8015832 <USBD_StdItfReq+0x26>
 8015826:	2b40      	cmp	r3, #64	; 0x40
 8015828:	d852      	bhi.n	80158d0 <USBD_StdItfReq+0xc4>
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <USBD_StdItfReq+0x26>
 801582e:	2b20      	cmp	r3, #32
 8015830:	d14e      	bne.n	80158d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015838:	b2db      	uxtb	r3, r3
 801583a:	3b01      	subs	r3, #1
 801583c:	2b02      	cmp	r3, #2
 801583e:	d840      	bhi.n	80158c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	889b      	ldrh	r3, [r3, #4]
 8015844:	b2db      	uxtb	r3, r3
 8015846:	2b01      	cmp	r3, #1
 8015848:	d836      	bhi.n	80158b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	889b      	ldrh	r3, [r3, #4]
 801584e:	b2db      	uxtb	r3, r3
 8015850:	4619      	mov	r1, r3
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f7ff fed9 	bl	801560a <USBD_CoreFindIF>
 8015858:	4603      	mov	r3, r0
 801585a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801585c:	7bbb      	ldrb	r3, [r7, #14]
 801585e:	2bff      	cmp	r3, #255	; 0xff
 8015860:	d01d      	beq.n	801589e <USBD_StdItfReq+0x92>
 8015862:	7bbb      	ldrb	r3, [r7, #14]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d11a      	bne.n	801589e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015868:	7bba      	ldrb	r2, [r7, #14]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	32ae      	adds	r2, #174	; 0xae
 801586e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015872:	689b      	ldr	r3, [r3, #8]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d00f      	beq.n	8015898 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015878:	7bba      	ldrb	r2, [r7, #14]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015880:	7bba      	ldrb	r2, [r7, #14]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	32ae      	adds	r2, #174	; 0xae
 8015886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	6839      	ldr	r1, [r7, #0]
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	4798      	blx	r3
 8015892:	4603      	mov	r3, r0
 8015894:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015896:	e004      	b.n	80158a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015898:	2303      	movs	r3, #3
 801589a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801589c:	e001      	b.n	80158a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801589e:	2303      	movs	r3, #3
 80158a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	88db      	ldrh	r3, [r3, #6]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d110      	bne.n	80158cc <USBD_StdItfReq+0xc0>
 80158aa:	7bfb      	ldrb	r3, [r7, #15]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d10d      	bne.n	80158cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 fdc7 	bl	8016444 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80158b6:	e009      	b.n	80158cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 fcf7 	bl	80162ae <USBD_CtlError>
          break;
 80158c0:	e004      	b.n	80158cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80158c2:	6839      	ldr	r1, [r7, #0]
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f000 fcf2 	bl	80162ae <USBD_CtlError>
          break;
 80158ca:	e000      	b.n	80158ce <USBD_StdItfReq+0xc2>
          break;
 80158cc:	bf00      	nop
      }
      break;
 80158ce:	e004      	b.n	80158da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80158d0:	6839      	ldr	r1, [r7, #0]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 fceb 	bl	80162ae <USBD_CtlError>
      break;
 80158d8:	bf00      	nop
  }

  return ret;
 80158da:	7bfb      	ldrb	r3, [r7, #15]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3710      	adds	r7, #16
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b084      	sub	sp, #16
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80158ee:	2300      	movs	r3, #0
 80158f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	889b      	ldrh	r3, [r3, #4]
 80158f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015900:	2b40      	cmp	r3, #64	; 0x40
 8015902:	d007      	beq.n	8015914 <USBD_StdEPReq+0x30>
 8015904:	2b40      	cmp	r3, #64	; 0x40
 8015906:	f200 817f 	bhi.w	8015c08 <USBD_StdEPReq+0x324>
 801590a:	2b00      	cmp	r3, #0
 801590c:	d02a      	beq.n	8015964 <USBD_StdEPReq+0x80>
 801590e:	2b20      	cmp	r3, #32
 8015910:	f040 817a 	bne.w	8015c08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015914:	7bbb      	ldrb	r3, [r7, #14]
 8015916:	4619      	mov	r1, r3
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f7ff fe83 	bl	8015624 <USBD_CoreFindEP>
 801591e:	4603      	mov	r3, r0
 8015920:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015922:	7b7b      	ldrb	r3, [r7, #13]
 8015924:	2bff      	cmp	r3, #255	; 0xff
 8015926:	f000 8174 	beq.w	8015c12 <USBD_StdEPReq+0x32e>
 801592a:	7b7b      	ldrb	r3, [r7, #13]
 801592c:	2b00      	cmp	r3, #0
 801592e:	f040 8170 	bne.w	8015c12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015932:	7b7a      	ldrb	r2, [r7, #13]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801593a:	7b7a      	ldrb	r2, [r7, #13]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	32ae      	adds	r2, #174	; 0xae
 8015940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	2b00      	cmp	r3, #0
 8015948:	f000 8163 	beq.w	8015c12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801594c:	7b7a      	ldrb	r2, [r7, #13]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	32ae      	adds	r2, #174	; 0xae
 8015952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	6839      	ldr	r1, [r7, #0]
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	4798      	blx	r3
 801595e:	4603      	mov	r3, r0
 8015960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015962:	e156      	b.n	8015c12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	785b      	ldrb	r3, [r3, #1]
 8015968:	2b03      	cmp	r3, #3
 801596a:	d008      	beq.n	801597e <USBD_StdEPReq+0x9a>
 801596c:	2b03      	cmp	r3, #3
 801596e:	f300 8145 	bgt.w	8015bfc <USBD_StdEPReq+0x318>
 8015972:	2b00      	cmp	r3, #0
 8015974:	f000 809b 	beq.w	8015aae <USBD_StdEPReq+0x1ca>
 8015978:	2b01      	cmp	r3, #1
 801597a:	d03c      	beq.n	80159f6 <USBD_StdEPReq+0x112>
 801597c:	e13e      	b.n	8015bfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015984:	b2db      	uxtb	r3, r3
 8015986:	2b02      	cmp	r3, #2
 8015988:	d002      	beq.n	8015990 <USBD_StdEPReq+0xac>
 801598a:	2b03      	cmp	r3, #3
 801598c:	d016      	beq.n	80159bc <USBD_StdEPReq+0xd8>
 801598e:	e02c      	b.n	80159ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015990:	7bbb      	ldrb	r3, [r7, #14]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d00d      	beq.n	80159b2 <USBD_StdEPReq+0xce>
 8015996:	7bbb      	ldrb	r3, [r7, #14]
 8015998:	2b80      	cmp	r3, #128	; 0x80
 801599a:	d00a      	beq.n	80159b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801599c:	7bbb      	ldrb	r3, [r7, #14]
 801599e:	4619      	mov	r1, r3
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f001 f9c3 	bl	8016d2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80159a6:	2180      	movs	r1, #128	; 0x80
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f001 f9bf 	bl	8016d2c <USBD_LL_StallEP>
 80159ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80159b0:	e020      	b.n	80159f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80159b2:	6839      	ldr	r1, [r7, #0]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 fc7a 	bl	80162ae <USBD_CtlError>
              break;
 80159ba:	e01b      	b.n	80159f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	885b      	ldrh	r3, [r3, #2]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d10e      	bne.n	80159e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159c4:	7bbb      	ldrb	r3, [r7, #14]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00b      	beq.n	80159e2 <USBD_StdEPReq+0xfe>
 80159ca:	7bbb      	ldrb	r3, [r7, #14]
 80159cc:	2b80      	cmp	r3, #128	; 0x80
 80159ce:	d008      	beq.n	80159e2 <USBD_StdEPReq+0xfe>
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	88db      	ldrh	r3, [r3, #6]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d104      	bne.n	80159e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80159d8:	7bbb      	ldrb	r3, [r7, #14]
 80159da:	4619      	mov	r1, r3
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f001 f9a5 	bl	8016d2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f000 fd2e 	bl	8016444 <USBD_CtlSendStatus>

              break;
 80159e8:	e004      	b.n	80159f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80159ea:	6839      	ldr	r1, [r7, #0]
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f000 fc5e 	bl	80162ae <USBD_CtlError>
              break;
 80159f2:	bf00      	nop
          }
          break;
 80159f4:	e107      	b.n	8015c06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2b02      	cmp	r3, #2
 8015a00:	d002      	beq.n	8015a08 <USBD_StdEPReq+0x124>
 8015a02:	2b03      	cmp	r3, #3
 8015a04:	d016      	beq.n	8015a34 <USBD_StdEPReq+0x150>
 8015a06:	e04b      	b.n	8015aa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a08:	7bbb      	ldrb	r3, [r7, #14]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d00d      	beq.n	8015a2a <USBD_StdEPReq+0x146>
 8015a0e:	7bbb      	ldrb	r3, [r7, #14]
 8015a10:	2b80      	cmp	r3, #128	; 0x80
 8015a12:	d00a      	beq.n	8015a2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a14:	7bbb      	ldrb	r3, [r7, #14]
 8015a16:	4619      	mov	r1, r3
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f001 f987 	bl	8016d2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a1e:	2180      	movs	r1, #128	; 0x80
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f001 f983 	bl	8016d2c <USBD_LL_StallEP>
 8015a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a28:	e040      	b.n	8015aac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015a2a:	6839      	ldr	r1, [r7, #0]
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f000 fc3e 	bl	80162ae <USBD_CtlError>
              break;
 8015a32:	e03b      	b.n	8015aac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	885b      	ldrh	r3, [r3, #2]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d136      	bne.n	8015aaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015a3c:	7bbb      	ldrb	r3, [r7, #14]
 8015a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d004      	beq.n	8015a50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a46:	7bbb      	ldrb	r3, [r7, #14]
 8015a48:	4619      	mov	r1, r3
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f001 f98d 	bl	8016d6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f000 fcf7 	bl	8016444 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a56:	7bbb      	ldrb	r3, [r7, #14]
 8015a58:	4619      	mov	r1, r3
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f7ff fde2 	bl	8015624 <USBD_CoreFindEP>
 8015a60:	4603      	mov	r3, r0
 8015a62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a64:	7b7b      	ldrb	r3, [r7, #13]
 8015a66:	2bff      	cmp	r3, #255	; 0xff
 8015a68:	d01f      	beq.n	8015aaa <USBD_StdEPReq+0x1c6>
 8015a6a:	7b7b      	ldrb	r3, [r7, #13]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d11c      	bne.n	8015aaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015a70:	7b7a      	ldrb	r2, [r7, #13]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015a78:	7b7a      	ldrb	r2, [r7, #13]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	32ae      	adds	r2, #174	; 0xae
 8015a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a82:	689b      	ldr	r3, [r3, #8]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d010      	beq.n	8015aaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015a88:	7b7a      	ldrb	r2, [r7, #13]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	32ae      	adds	r2, #174	; 0xae
 8015a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a92:	689b      	ldr	r3, [r3, #8]
 8015a94:	6839      	ldr	r1, [r7, #0]
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	4798      	blx	r3
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015a9e:	e004      	b.n	8015aaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015aa0:	6839      	ldr	r1, [r7, #0]
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f000 fc03 	bl	80162ae <USBD_CtlError>
              break;
 8015aa8:	e000      	b.n	8015aac <USBD_StdEPReq+0x1c8>
              break;
 8015aaa:	bf00      	nop
          }
          break;
 8015aac:	e0ab      	b.n	8015c06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ab4:	b2db      	uxtb	r3, r3
 8015ab6:	2b02      	cmp	r3, #2
 8015ab8:	d002      	beq.n	8015ac0 <USBD_StdEPReq+0x1dc>
 8015aba:	2b03      	cmp	r3, #3
 8015abc:	d032      	beq.n	8015b24 <USBD_StdEPReq+0x240>
 8015abe:	e097      	b.n	8015bf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ac0:	7bbb      	ldrb	r3, [r7, #14]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d007      	beq.n	8015ad6 <USBD_StdEPReq+0x1f2>
 8015ac6:	7bbb      	ldrb	r3, [r7, #14]
 8015ac8:	2b80      	cmp	r3, #128	; 0x80
 8015aca:	d004      	beq.n	8015ad6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015acc:	6839      	ldr	r1, [r7, #0]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 fbed 	bl	80162ae <USBD_CtlError>
                break;
 8015ad4:	e091      	b.n	8015bfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	da0b      	bge.n	8015af6 <USBD_StdEPReq+0x212>
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ae4:	4613      	mov	r3, r2
 8015ae6:	009b      	lsls	r3, r3, #2
 8015ae8:	4413      	add	r3, r2
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	3310      	adds	r3, #16
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	4413      	add	r3, r2
 8015af2:	3304      	adds	r3, #4
 8015af4:	e00b      	b.n	8015b0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015af6:	7bbb      	ldrb	r3, [r7, #14]
 8015af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015afc:	4613      	mov	r3, r2
 8015afe:	009b      	lsls	r3, r3, #2
 8015b00:	4413      	add	r3, r2
 8015b02:	009b      	lsls	r3, r3, #2
 8015b04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b08:	687a      	ldr	r2, [r7, #4]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	3304      	adds	r3, #4
 8015b0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	2200      	movs	r2, #0
 8015b14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	2202      	movs	r2, #2
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f000 fc37 	bl	8016390 <USBD_CtlSendData>
              break;
 8015b22:	e06a      	b.n	8015bfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	da11      	bge.n	8015b50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b2c:	7bbb      	ldrb	r3, [r7, #14]
 8015b2e:	f003 020f 	and.w	r2, r3, #15
 8015b32:	6879      	ldr	r1, [r7, #4]
 8015b34:	4613      	mov	r3, r2
 8015b36:	009b      	lsls	r3, r3, #2
 8015b38:	4413      	add	r3, r2
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	440b      	add	r3, r1
 8015b3e:	3324      	adds	r3, #36	; 0x24
 8015b40:	881b      	ldrh	r3, [r3, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d117      	bne.n	8015b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b46:	6839      	ldr	r1, [r7, #0]
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f000 fbb0 	bl	80162ae <USBD_CtlError>
                  break;
 8015b4e:	e054      	b.n	8015bfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b50:	7bbb      	ldrb	r3, [r7, #14]
 8015b52:	f003 020f 	and.w	r2, r3, #15
 8015b56:	6879      	ldr	r1, [r7, #4]
 8015b58:	4613      	mov	r3, r2
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	4413      	add	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	440b      	add	r3, r1
 8015b62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b66:	881b      	ldrh	r3, [r3, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d104      	bne.n	8015b76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b6c:	6839      	ldr	r1, [r7, #0]
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 fb9d 	bl	80162ae <USBD_CtlError>
                  break;
 8015b74:	e041      	b.n	8015bfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	da0b      	bge.n	8015b96 <USBD_StdEPReq+0x2b2>
 8015b7e:	7bbb      	ldrb	r3, [r7, #14]
 8015b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b84:	4613      	mov	r3, r2
 8015b86:	009b      	lsls	r3, r3, #2
 8015b88:	4413      	add	r3, r2
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	3310      	adds	r3, #16
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	4413      	add	r3, r2
 8015b92:	3304      	adds	r3, #4
 8015b94:	e00b      	b.n	8015bae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b96:	7bbb      	ldrb	r3, [r7, #14]
 8015b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b9c:	4613      	mov	r3, r2
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	4413      	add	r3, r2
 8015ba2:	009b      	lsls	r3, r3, #2
 8015ba4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	4413      	add	r3, r2
 8015bac:	3304      	adds	r3, #4
 8015bae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bb0:	7bbb      	ldrb	r3, [r7, #14]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d002      	beq.n	8015bbc <USBD_StdEPReq+0x2d8>
 8015bb6:	7bbb      	ldrb	r3, [r7, #14]
 8015bb8:	2b80      	cmp	r3, #128	; 0x80
 8015bba:	d103      	bne.n	8015bc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	601a      	str	r2, [r3, #0]
 8015bc2:	e00e      	b.n	8015be2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015bc4:	7bbb      	ldrb	r3, [r7, #14]
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f001 f8ed 	bl	8016da8 <USBD_LL_IsStallEP>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d003      	beq.n	8015bdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	601a      	str	r2, [r3, #0]
 8015bda:	e002      	b.n	8015be2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	2200      	movs	r2, #0
 8015be0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	2202      	movs	r2, #2
 8015be6:	4619      	mov	r1, r3
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f000 fbd1 	bl	8016390 <USBD_CtlSendData>
              break;
 8015bee:	e004      	b.n	8015bfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015bf0:	6839      	ldr	r1, [r7, #0]
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f000 fb5b 	bl	80162ae <USBD_CtlError>
              break;
 8015bf8:	bf00      	nop
          }
          break;
 8015bfa:	e004      	b.n	8015c06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015bfc:	6839      	ldr	r1, [r7, #0]
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 fb55 	bl	80162ae <USBD_CtlError>
          break;
 8015c04:	bf00      	nop
      }
      break;
 8015c06:	e005      	b.n	8015c14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015c08:	6839      	ldr	r1, [r7, #0]
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 fb4f 	bl	80162ae <USBD_CtlError>
      break;
 8015c10:	e000      	b.n	8015c14 <USBD_StdEPReq+0x330>
      break;
 8015c12:	bf00      	nop
  }

  return ret;
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}
	...

08015c20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c32:	2300      	movs	r3, #0
 8015c34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	885b      	ldrh	r3, [r3, #2]
 8015c3a:	0a1b      	lsrs	r3, r3, #8
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	3b01      	subs	r3, #1
 8015c40:	2b06      	cmp	r3, #6
 8015c42:	f200 8128 	bhi.w	8015e96 <USBD_GetDescriptor+0x276>
 8015c46:	a201      	add	r2, pc, #4	; (adr r2, 8015c4c <USBD_GetDescriptor+0x2c>)
 8015c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c4c:	08015c69 	.word	0x08015c69
 8015c50:	08015c81 	.word	0x08015c81
 8015c54:	08015cc1 	.word	0x08015cc1
 8015c58:	08015e97 	.word	0x08015e97
 8015c5c:	08015e97 	.word	0x08015e97
 8015c60:	08015e37 	.word	0x08015e37
 8015c64:	08015e63 	.word	0x08015e63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	7c12      	ldrb	r2, [r2, #16]
 8015c74:	f107 0108 	add.w	r1, r7, #8
 8015c78:	4610      	mov	r0, r2
 8015c7a:	4798      	blx	r3
 8015c7c:	60f8      	str	r0, [r7, #12]
      break;
 8015c7e:	e112      	b.n	8015ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	7c1b      	ldrb	r3, [r3, #16]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d10d      	bne.n	8015ca4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c90:	f107 0208 	add.w	r2, r7, #8
 8015c94:	4610      	mov	r0, r2
 8015c96:	4798      	blx	r3
 8015c98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	2202      	movs	r2, #2
 8015ca0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015ca2:	e100      	b.n	8015ea6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cac:	f107 0208 	add.w	r2, r7, #8
 8015cb0:	4610      	mov	r0, r2
 8015cb2:	4798      	blx	r3
 8015cb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	2202      	movs	r2, #2
 8015cbc:	701a      	strb	r2, [r3, #0]
      break;
 8015cbe:	e0f2      	b.n	8015ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	885b      	ldrh	r3, [r3, #2]
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	2b05      	cmp	r3, #5
 8015cc8:	f200 80ac 	bhi.w	8015e24 <USBD_GetDescriptor+0x204>
 8015ccc:	a201      	add	r2, pc, #4	; (adr r2, 8015cd4 <USBD_GetDescriptor+0xb4>)
 8015cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cd2:	bf00      	nop
 8015cd4:	08015ced 	.word	0x08015ced
 8015cd8:	08015d21 	.word	0x08015d21
 8015cdc:	08015d55 	.word	0x08015d55
 8015ce0:	08015d89 	.word	0x08015d89
 8015ce4:	08015dbd 	.word	0x08015dbd
 8015ce8:	08015df1 	.word	0x08015df1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cf2:	685b      	ldr	r3, [r3, #4]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d00b      	beq.n	8015d10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	7c12      	ldrb	r2, [r2, #16]
 8015d04:	f107 0108 	add.w	r1, r7, #8
 8015d08:	4610      	mov	r0, r2
 8015d0a:	4798      	blx	r3
 8015d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d0e:	e091      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d10:	6839      	ldr	r1, [r7, #0]
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f000 facb 	bl	80162ae <USBD_CtlError>
            err++;
 8015d18:	7afb      	ldrb	r3, [r7, #11]
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d1e:	e089      	b.n	8015e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d26:	689b      	ldr	r3, [r3, #8]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d00b      	beq.n	8015d44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d32:	689b      	ldr	r3, [r3, #8]
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	7c12      	ldrb	r2, [r2, #16]
 8015d38:	f107 0108 	add.w	r1, r7, #8
 8015d3c:	4610      	mov	r0, r2
 8015d3e:	4798      	blx	r3
 8015d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d42:	e077      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d44:	6839      	ldr	r1, [r7, #0]
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f000 fab1 	bl	80162ae <USBD_CtlError>
            err++;
 8015d4c:	7afb      	ldrb	r3, [r7, #11]
 8015d4e:	3301      	adds	r3, #1
 8015d50:	72fb      	strb	r3, [r7, #11]
          break;
 8015d52:	e06f      	b.n	8015e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5a:	68db      	ldr	r3, [r3, #12]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d00b      	beq.n	8015d78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d66:	68db      	ldr	r3, [r3, #12]
 8015d68:	687a      	ldr	r2, [r7, #4]
 8015d6a:	7c12      	ldrb	r2, [r2, #16]
 8015d6c:	f107 0108 	add.w	r1, r7, #8
 8015d70:	4610      	mov	r0, r2
 8015d72:	4798      	blx	r3
 8015d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d76:	e05d      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d78:	6839      	ldr	r1, [r7, #0]
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 fa97 	bl	80162ae <USBD_CtlError>
            err++;
 8015d80:	7afb      	ldrb	r3, [r7, #11]
 8015d82:	3301      	adds	r3, #1
 8015d84:	72fb      	strb	r3, [r7, #11]
          break;
 8015d86:	e055      	b.n	8015e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d8e:	691b      	ldr	r3, [r3, #16]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d00b      	beq.n	8015dac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d9a:	691b      	ldr	r3, [r3, #16]
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	7c12      	ldrb	r2, [r2, #16]
 8015da0:	f107 0108 	add.w	r1, r7, #8
 8015da4:	4610      	mov	r0, r2
 8015da6:	4798      	blx	r3
 8015da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015daa:	e043      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dac:	6839      	ldr	r1, [r7, #0]
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f000 fa7d 	bl	80162ae <USBD_CtlError>
            err++;
 8015db4:	7afb      	ldrb	r3, [r7, #11]
 8015db6:	3301      	adds	r3, #1
 8015db8:	72fb      	strb	r3, [r7, #11]
          break;
 8015dba:	e03b      	b.n	8015e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dc2:	695b      	ldr	r3, [r3, #20]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d00b      	beq.n	8015de0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dce:	695b      	ldr	r3, [r3, #20]
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	7c12      	ldrb	r2, [r2, #16]
 8015dd4:	f107 0108 	add.w	r1, r7, #8
 8015dd8:	4610      	mov	r0, r2
 8015dda:	4798      	blx	r3
 8015ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dde:	e029      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015de0:	6839      	ldr	r1, [r7, #0]
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f000 fa63 	bl	80162ae <USBD_CtlError>
            err++;
 8015de8:	7afb      	ldrb	r3, [r7, #11]
 8015dea:	3301      	adds	r3, #1
 8015dec:	72fb      	strb	r3, [r7, #11]
          break;
 8015dee:	e021      	b.n	8015e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df6:	699b      	ldr	r3, [r3, #24]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d00b      	beq.n	8015e14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e02:	699b      	ldr	r3, [r3, #24]
 8015e04:	687a      	ldr	r2, [r7, #4]
 8015e06:	7c12      	ldrb	r2, [r2, #16]
 8015e08:	f107 0108 	add.w	r1, r7, #8
 8015e0c:	4610      	mov	r0, r2
 8015e0e:	4798      	blx	r3
 8015e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e12:	e00f      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e14:	6839      	ldr	r1, [r7, #0]
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f000 fa49 	bl	80162ae <USBD_CtlError>
            err++;
 8015e1c:	7afb      	ldrb	r3, [r7, #11]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	72fb      	strb	r3, [r7, #11]
          break;
 8015e22:	e007      	b.n	8015e34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015e24:	6839      	ldr	r1, [r7, #0]
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 fa41 	bl	80162ae <USBD_CtlError>
          err++;
 8015e2c:	7afb      	ldrb	r3, [r7, #11]
 8015e2e:	3301      	adds	r3, #1
 8015e30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015e32:	bf00      	nop
      }
      break;
 8015e34:	e037      	b.n	8015ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	7c1b      	ldrb	r3, [r3, #16]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d109      	bne.n	8015e52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e46:	f107 0208 	add.w	r2, r7, #8
 8015e4a:	4610      	mov	r0, r2
 8015e4c:	4798      	blx	r3
 8015e4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e50:	e029      	b.n	8015ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015e52:	6839      	ldr	r1, [r7, #0]
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f000 fa2a 	bl	80162ae <USBD_CtlError>
        err++;
 8015e5a:	7afb      	ldrb	r3, [r7, #11]
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8015e60:	e021      	b.n	8015ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	7c1b      	ldrb	r3, [r3, #16]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d10d      	bne.n	8015e86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e72:	f107 0208 	add.w	r2, r7, #8
 8015e76:	4610      	mov	r0, r2
 8015e78:	4798      	blx	r3
 8015e7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	2207      	movs	r2, #7
 8015e82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e84:	e00f      	b.n	8015ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 fa10 	bl	80162ae <USBD_CtlError>
        err++;
 8015e8e:	7afb      	ldrb	r3, [r7, #11]
 8015e90:	3301      	adds	r3, #1
 8015e92:	72fb      	strb	r3, [r7, #11]
      break;
 8015e94:	e007      	b.n	8015ea6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015e96:	6839      	ldr	r1, [r7, #0]
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f000 fa08 	bl	80162ae <USBD_CtlError>
      err++;
 8015e9e:	7afb      	ldrb	r3, [r7, #11]
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8015ea4:	bf00      	nop
  }

  if (err != 0U)
 8015ea6:	7afb      	ldrb	r3, [r7, #11]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d11e      	bne.n	8015eea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	88db      	ldrh	r3, [r3, #6]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d016      	beq.n	8015ee2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015eb4:	893b      	ldrh	r3, [r7, #8]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d00e      	beq.n	8015ed8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	88da      	ldrh	r2, [r3, #6]
 8015ebe:	893b      	ldrh	r3, [r7, #8]
 8015ec0:	4293      	cmp	r3, r2
 8015ec2:	bf28      	it	cs
 8015ec4:	4613      	movcs	r3, r2
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015eca:	893b      	ldrh	r3, [r7, #8]
 8015ecc:	461a      	mov	r2, r3
 8015ece:	68f9      	ldr	r1, [r7, #12]
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f000 fa5d 	bl	8016390 <USBD_CtlSendData>
 8015ed6:	e009      	b.n	8015eec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f000 f9e7 	bl	80162ae <USBD_CtlError>
 8015ee0:	e004      	b.n	8015eec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f000 faae 	bl	8016444 <USBD_CtlSendStatus>
 8015ee8:	e000      	b.n	8015eec <USBD_GetDescriptor+0x2cc>
    return;
 8015eea:	bf00      	nop
  }
}
 8015eec:	3710      	adds	r7, #16
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop

08015ef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	889b      	ldrh	r3, [r3, #4]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d131      	bne.n	8015f6a <USBD_SetAddress+0x76>
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	88db      	ldrh	r3, [r3, #6]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d12d      	bne.n	8015f6a <USBD_SetAddress+0x76>
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	885b      	ldrh	r3, [r3, #2]
 8015f12:	2b7f      	cmp	r3, #127	; 0x7f
 8015f14:	d829      	bhi.n	8015f6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	885b      	ldrh	r3, [r3, #2]
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f28:	b2db      	uxtb	r3, r3
 8015f2a:	2b03      	cmp	r3, #3
 8015f2c:	d104      	bne.n	8015f38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 f9bc 	bl	80162ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f36:	e01d      	b.n	8015f74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	7bfa      	ldrb	r2, [r7, #15]
 8015f3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f40:	7bfb      	ldrb	r3, [r7, #15]
 8015f42:	4619      	mov	r1, r3
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 ff5b 	bl	8016e00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f000 fa7a 	bl	8016444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f50:	7bfb      	ldrb	r3, [r7, #15]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d004      	beq.n	8015f60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2202      	movs	r2, #2
 8015f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f5e:	e009      	b.n	8015f74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2201      	movs	r2, #1
 8015f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f68:	e004      	b.n	8015f74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f6a:	6839      	ldr	r1, [r7, #0]
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f000 f99e 	bl	80162ae <USBD_CtlError>
  }
}
 8015f72:	bf00      	nop
 8015f74:	bf00      	nop
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}

08015f7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
 8015f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f86:	2300      	movs	r3, #0
 8015f88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	885b      	ldrh	r3, [r3, #2]
 8015f8e:	b2da      	uxtb	r2, r3
 8015f90:	4b4e      	ldr	r3, [pc, #312]	; (80160cc <USBD_SetConfig+0x150>)
 8015f92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f94:	4b4d      	ldr	r3, [pc, #308]	; (80160cc <USBD_SetConfig+0x150>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b01      	cmp	r3, #1
 8015f9a:	d905      	bls.n	8015fa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015f9c:	6839      	ldr	r1, [r7, #0]
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f000 f985 	bl	80162ae <USBD_CtlError>
    return USBD_FAIL;
 8015fa4:	2303      	movs	r3, #3
 8015fa6:	e08c      	b.n	80160c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	2b02      	cmp	r3, #2
 8015fb2:	d002      	beq.n	8015fba <USBD_SetConfig+0x3e>
 8015fb4:	2b03      	cmp	r3, #3
 8015fb6:	d029      	beq.n	801600c <USBD_SetConfig+0x90>
 8015fb8:	e075      	b.n	80160a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015fba:	4b44      	ldr	r3, [pc, #272]	; (80160cc <USBD_SetConfig+0x150>)
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d020      	beq.n	8016004 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015fc2:	4b42      	ldr	r3, [pc, #264]	; (80160cc <USBD_SetConfig+0x150>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	461a      	mov	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fcc:	4b3f      	ldr	r3, [pc, #252]	; (80160cc <USBD_SetConfig+0x150>)
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	4619      	mov	r1, r3
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f7fe ffe1 	bl	8014f9a <USBD_SetClassConfig>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015fdc:	7bfb      	ldrb	r3, [r7, #15]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d008      	beq.n	8015ff4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015fe2:	6839      	ldr	r1, [r7, #0]
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	f000 f962 	bl	80162ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2202      	movs	r2, #2
 8015fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015ff2:	e065      	b.n	80160c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 fa25 	bl	8016444 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2203      	movs	r2, #3
 8015ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016002:	e05d      	b.n	80160c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 fa1d 	bl	8016444 <USBD_CtlSendStatus>
      break;
 801600a:	e059      	b.n	80160c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801600c:	4b2f      	ldr	r3, [pc, #188]	; (80160cc <USBD_SetConfig+0x150>)
 801600e:	781b      	ldrb	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d112      	bne.n	801603a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2202      	movs	r2, #2
 8016018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801601c:	4b2b      	ldr	r3, [pc, #172]	; (80160cc <USBD_SetConfig+0x150>)
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	461a      	mov	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016026:	4b29      	ldr	r3, [pc, #164]	; (80160cc <USBD_SetConfig+0x150>)
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	4619      	mov	r1, r3
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f7fe ffd0 	bl	8014fd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 fa06 	bl	8016444 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016038:	e042      	b.n	80160c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801603a:	4b24      	ldr	r3, [pc, #144]	; (80160cc <USBD_SetConfig+0x150>)
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	461a      	mov	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	429a      	cmp	r2, r3
 8016046:	d02a      	beq.n	801609e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	b2db      	uxtb	r3, r3
 801604e:	4619      	mov	r1, r3
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7fe ffbe 	bl	8014fd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016056:	4b1d      	ldr	r3, [pc, #116]	; (80160cc <USBD_SetConfig+0x150>)
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	461a      	mov	r2, r3
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016060:	4b1a      	ldr	r3, [pc, #104]	; (80160cc <USBD_SetConfig+0x150>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	4619      	mov	r1, r3
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f7fe ff97 	bl	8014f9a <USBD_SetClassConfig>
 801606c:	4603      	mov	r3, r0
 801606e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016070:	7bfb      	ldrb	r3, [r7, #15]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d00f      	beq.n	8016096 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016076:	6839      	ldr	r1, [r7, #0]
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f000 f918 	bl	80162ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	685b      	ldr	r3, [r3, #4]
 8016082:	b2db      	uxtb	r3, r3
 8016084:	4619      	mov	r1, r3
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f7fe ffa3 	bl	8014fd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2202      	movs	r2, #2
 8016090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016094:	e014      	b.n	80160c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 f9d4 	bl	8016444 <USBD_CtlSendStatus>
      break;
 801609c:	e010      	b.n	80160c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f000 f9d0 	bl	8016444 <USBD_CtlSendStatus>
      break;
 80160a4:	e00c      	b.n	80160c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80160a6:	6839      	ldr	r1, [r7, #0]
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f000 f900 	bl	80162ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160ae:	4b07      	ldr	r3, [pc, #28]	; (80160cc <USBD_SetConfig+0x150>)
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	4619      	mov	r1, r3
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f7fe ff8c 	bl	8014fd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80160ba:	2303      	movs	r3, #3
 80160bc:	73fb      	strb	r3, [r7, #15]
      break;
 80160be:	bf00      	nop
  }

  return ret;
 80160c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160c2:	4618      	mov	r0, r3
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	24000d90 	.word	0x24000d90

080160d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	88db      	ldrh	r3, [r3, #6]
 80160de:	2b01      	cmp	r3, #1
 80160e0:	d004      	beq.n	80160ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80160e2:	6839      	ldr	r1, [r7, #0]
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f000 f8e2 	bl	80162ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80160ea:	e023      	b.n	8016134 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f2:	b2db      	uxtb	r3, r3
 80160f4:	2b02      	cmp	r3, #2
 80160f6:	dc02      	bgt.n	80160fe <USBD_GetConfig+0x2e>
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	dc03      	bgt.n	8016104 <USBD_GetConfig+0x34>
 80160fc:	e015      	b.n	801612a <USBD_GetConfig+0x5a>
 80160fe:	2b03      	cmp	r3, #3
 8016100:	d00b      	beq.n	801611a <USBD_GetConfig+0x4a>
 8016102:	e012      	b.n	801612a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2200      	movs	r2, #0
 8016108:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	3308      	adds	r3, #8
 801610e:	2201      	movs	r2, #1
 8016110:	4619      	mov	r1, r3
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 f93c 	bl	8016390 <USBD_CtlSendData>
        break;
 8016118:	e00c      	b.n	8016134 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	3304      	adds	r3, #4
 801611e:	2201      	movs	r2, #1
 8016120:	4619      	mov	r1, r3
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f000 f934 	bl	8016390 <USBD_CtlSendData>
        break;
 8016128:	e004      	b.n	8016134 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801612a:	6839      	ldr	r1, [r7, #0]
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f000 f8be 	bl	80162ae <USBD_CtlError>
        break;
 8016132:	bf00      	nop
}
 8016134:	bf00      	nop
 8016136:	3708      	adds	r7, #8
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}

0801613c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b082      	sub	sp, #8
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801614c:	b2db      	uxtb	r3, r3
 801614e:	3b01      	subs	r3, #1
 8016150:	2b02      	cmp	r3, #2
 8016152:	d81e      	bhi.n	8016192 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016154:	683b      	ldr	r3, [r7, #0]
 8016156:	88db      	ldrh	r3, [r3, #6]
 8016158:	2b02      	cmp	r3, #2
 801615a:	d004      	beq.n	8016166 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801615c:	6839      	ldr	r1, [r7, #0]
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f000 f8a5 	bl	80162ae <USBD_CtlError>
        break;
 8016164:	e01a      	b.n	801619c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2201      	movs	r2, #1
 801616a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016172:	2b00      	cmp	r3, #0
 8016174:	d005      	beq.n	8016182 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	68db      	ldr	r3, [r3, #12]
 801617a:	f043 0202 	orr.w	r2, r3, #2
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	330c      	adds	r3, #12
 8016186:	2202      	movs	r2, #2
 8016188:	4619      	mov	r1, r3
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 f900 	bl	8016390 <USBD_CtlSendData>
      break;
 8016190:	e004      	b.n	801619c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016192:	6839      	ldr	r1, [r7, #0]
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 f88a 	bl	80162ae <USBD_CtlError>
      break;
 801619a:	bf00      	nop
  }
}
 801619c:	bf00      	nop
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	885b      	ldrh	r3, [r3, #2]
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d107      	bne.n	80161c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2201      	movs	r2, #1
 80161ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 f940 	bl	8016444 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80161c4:	e013      	b.n	80161ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80161c6:	683b      	ldr	r3, [r7, #0]
 80161c8:	885b      	ldrh	r3, [r3, #2]
 80161ca:	2b02      	cmp	r3, #2
 80161cc:	d10b      	bne.n	80161e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	889b      	ldrh	r3, [r3, #4]
 80161d2:	0a1b      	lsrs	r3, r3, #8
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	b2da      	uxtb	r2, r3
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 f930 	bl	8016444 <USBD_CtlSendStatus>
}
 80161e4:	e003      	b.n	80161ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80161e6:	6839      	ldr	r1, [r7, #0]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 f860 	bl	80162ae <USBD_CtlError>
}
 80161ee:	bf00      	nop
 80161f0:	3708      	adds	r7, #8
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b082      	sub	sp, #8
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
 80161fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016206:	b2db      	uxtb	r3, r3
 8016208:	3b01      	subs	r3, #1
 801620a:	2b02      	cmp	r3, #2
 801620c:	d80b      	bhi.n	8016226 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	885b      	ldrh	r3, [r3, #2]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d10c      	bne.n	8016230 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 f910 	bl	8016444 <USBD_CtlSendStatus>
      }
      break;
 8016224:	e004      	b.n	8016230 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016226:	6839      	ldr	r1, [r7, #0]
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 f840 	bl	80162ae <USBD_CtlError>
      break;
 801622e:	e000      	b.n	8016232 <USBD_ClrFeature+0x3c>
      break;
 8016230:	bf00      	nop
  }
}
 8016232:	bf00      	nop
 8016234:	3708      	adds	r7, #8
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}

0801623a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801623a:	b580      	push	{r7, lr}
 801623c:	b084      	sub	sp, #16
 801623e:	af00      	add	r7, sp, #0
 8016240:	6078      	str	r0, [r7, #4]
 8016242:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	781a      	ldrb	r2, [r3, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	3301      	adds	r3, #1
 8016254:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	781a      	ldrb	r2, [r3, #0]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	3301      	adds	r3, #1
 8016262:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7ff fa41 	bl	80156ec <SWAPBYTE>
 801626a:	4603      	mov	r3, r0
 801626c:	461a      	mov	r2, r3
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	3301      	adds	r3, #1
 8016276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	3301      	adds	r3, #1
 801627c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801627e:	68f8      	ldr	r0, [r7, #12]
 8016280:	f7ff fa34 	bl	80156ec <SWAPBYTE>
 8016284:	4603      	mov	r3, r0
 8016286:	461a      	mov	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	3301      	adds	r3, #1
 8016290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	3301      	adds	r3, #1
 8016296:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016298:	68f8      	ldr	r0, [r7, #12]
 801629a:	f7ff fa27 	bl	80156ec <SWAPBYTE>
 801629e:	4603      	mov	r3, r0
 80162a0:	461a      	mov	r2, r3
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	80da      	strh	r2, [r3, #6]
}
 80162a6:	bf00      	nop
 80162a8:	3710      	adds	r7, #16
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}

080162ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162ae:	b580      	push	{r7, lr}
 80162b0:	b082      	sub	sp, #8
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	6078      	str	r0, [r7, #4]
 80162b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162b8:	2180      	movs	r1, #128	; 0x80
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f000 fd36 	bl	8016d2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162c0:	2100      	movs	r1, #0
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 fd32 	bl	8016d2c <USBD_LL_StallEP>
}
 80162c8:	bf00      	nop
 80162ca:	3708      	adds	r7, #8
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b086      	sub	sp, #24
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	60f8      	str	r0, [r7, #12]
 80162d8:	60b9      	str	r1, [r7, #8]
 80162da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80162dc:	2300      	movs	r3, #0
 80162de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d036      	beq.n	8016354 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80162ea:	6938      	ldr	r0, [r7, #16]
 80162ec:	f000 f836 	bl	801635c <USBD_GetLen>
 80162f0:	4603      	mov	r3, r0
 80162f2:	3301      	adds	r3, #1
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80162fe:	7dfb      	ldrb	r3, [r7, #23]
 8016300:	68ba      	ldr	r2, [r7, #8]
 8016302:	4413      	add	r3, r2
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	7812      	ldrb	r2, [r2, #0]
 8016308:	701a      	strb	r2, [r3, #0]
  idx++;
 801630a:	7dfb      	ldrb	r3, [r7, #23]
 801630c:	3301      	adds	r3, #1
 801630e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016310:	7dfb      	ldrb	r3, [r7, #23]
 8016312:	68ba      	ldr	r2, [r7, #8]
 8016314:	4413      	add	r3, r2
 8016316:	2203      	movs	r2, #3
 8016318:	701a      	strb	r2, [r3, #0]
  idx++;
 801631a:	7dfb      	ldrb	r3, [r7, #23]
 801631c:	3301      	adds	r3, #1
 801631e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016320:	e013      	b.n	801634a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016322:	7dfb      	ldrb	r3, [r7, #23]
 8016324:	68ba      	ldr	r2, [r7, #8]
 8016326:	4413      	add	r3, r2
 8016328:	693a      	ldr	r2, [r7, #16]
 801632a:	7812      	ldrb	r2, [r2, #0]
 801632c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	3301      	adds	r3, #1
 8016332:	613b      	str	r3, [r7, #16]
    idx++;
 8016334:	7dfb      	ldrb	r3, [r7, #23]
 8016336:	3301      	adds	r3, #1
 8016338:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801633a:	7dfb      	ldrb	r3, [r7, #23]
 801633c:	68ba      	ldr	r2, [r7, #8]
 801633e:	4413      	add	r3, r2
 8016340:	2200      	movs	r2, #0
 8016342:	701a      	strb	r2, [r3, #0]
    idx++;
 8016344:	7dfb      	ldrb	r3, [r7, #23]
 8016346:	3301      	adds	r3, #1
 8016348:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1e7      	bne.n	8016322 <USBD_GetString+0x52>
 8016352:	e000      	b.n	8016356 <USBD_GetString+0x86>
    return;
 8016354:	bf00      	nop
  }
}
 8016356:	3718      	adds	r7, #24
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801635c:	b480      	push	{r7}
 801635e:	b085      	sub	sp, #20
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016364:	2300      	movs	r3, #0
 8016366:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801636c:	e005      	b.n	801637a <USBD_GetLen+0x1e>
  {
    len++;
 801636e:	7bfb      	ldrb	r3, [r7, #15]
 8016370:	3301      	adds	r3, #1
 8016372:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	3301      	adds	r3, #1
 8016378:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d1f5      	bne.n	801636e <USBD_GetLen+0x12>
  }

  return len;
 8016382:	7bfb      	ldrb	r3, [r7, #15]
}
 8016384:	4618      	mov	r0, r3
 8016386:	3714      	adds	r7, #20
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr

08016390 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af00      	add	r7, sp, #0
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	60b9      	str	r1, [r7, #8]
 801639a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	2202      	movs	r2, #2
 80163a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	687a      	ldr	r2, [r7, #4]
 80163ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	2100      	movs	r1, #0
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	f000 fd41 	bl	8016e3e <USBD_LL_Transmit>

  return USBD_OK;
 80163bc:	2300      	movs	r3, #0
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3710      	adds	r7, #16
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}

080163c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80163c6:	b580      	push	{r7, lr}
 80163c8:	b084      	sub	sp, #16
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	60f8      	str	r0, [r7, #12]
 80163ce:	60b9      	str	r1, [r7, #8]
 80163d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	68ba      	ldr	r2, [r7, #8]
 80163d6:	2100      	movs	r1, #0
 80163d8:	68f8      	ldr	r0, [r7, #12]
 80163da:	f000 fd30 	bl	8016e3e <USBD_LL_Transmit>

  return USBD_OK;
 80163de:	2300      	movs	r3, #0
}
 80163e0:	4618      	mov	r0, r3
 80163e2:	3710      	adds	r7, #16
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}

080163e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	60f8      	str	r0, [r7, #12]
 80163f0:	60b9      	str	r1, [r7, #8]
 80163f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2203      	movs	r2, #3
 80163f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	687a      	ldr	r2, [r7, #4]
 8016408:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	68ba      	ldr	r2, [r7, #8]
 8016410:	2100      	movs	r1, #0
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	f000 fd34 	bl	8016e80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016418:	2300      	movs	r3, #0
}
 801641a:	4618      	mov	r0, r3
 801641c:	3710      	adds	r7, #16
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}

08016422 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016422:	b580      	push	{r7, lr}
 8016424:	b084      	sub	sp, #16
 8016426:	af00      	add	r7, sp, #0
 8016428:	60f8      	str	r0, [r7, #12]
 801642a:	60b9      	str	r1, [r7, #8]
 801642c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	68ba      	ldr	r2, [r7, #8]
 8016432:	2100      	movs	r1, #0
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f000 fd23 	bl	8016e80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801643a:	2300      	movs	r3, #0
}
 801643c:	4618      	mov	r0, r3
 801643e:	3710      	adds	r7, #16
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2204      	movs	r2, #4
 8016450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016454:	2300      	movs	r3, #0
 8016456:	2200      	movs	r2, #0
 8016458:	2100      	movs	r1, #0
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	f000 fcef 	bl	8016e3e <USBD_LL_Transmit>

  return USBD_OK;
 8016460:	2300      	movs	r3, #0
}
 8016462:	4618      	mov	r0, r3
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2205      	movs	r2, #5
 8016476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801647a:	2300      	movs	r3, #0
 801647c:	2200      	movs	r2, #0
 801647e:	2100      	movs	r1, #0
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f000 fcfd 	bl	8016e80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016486:	2300      	movs	r3, #0
}
 8016488:	4618      	mov	r0, r3
 801648a:	3708      	adds	r7, #8
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}

08016490 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016490:	b480      	push	{r7}
 8016492:	b087      	sub	sp, #28
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	4613      	mov	r3, r2
 801649c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801649e:	2301      	movs	r3, #1
 80164a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80164a2:	2300      	movs	r3, #0
 80164a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80164a6:	4b1f      	ldr	r3, [pc, #124]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164a8:	7a5b      	ldrb	r3, [r3, #9]
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d131      	bne.n	8016514 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80164b0:	4b1c      	ldr	r3, [pc, #112]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164b2:	7a5b      	ldrb	r3, [r3, #9]
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	461a      	mov	r2, r3
 80164b8:	4b1a      	ldr	r3, [pc, #104]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164ba:	2100      	movs	r1, #0
 80164bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80164be:	4b19      	ldr	r3, [pc, #100]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164c0:	7a5b      	ldrb	r3, [r3, #9]
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	4a17      	ldr	r2, [pc, #92]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164c6:	009b      	lsls	r3, r3, #2
 80164c8:	4413      	add	r3, r2
 80164ca:	68fa      	ldr	r2, [r7, #12]
 80164cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80164ce:	4b15      	ldr	r3, [pc, #84]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164d0:	7a5b      	ldrb	r3, [r3, #9]
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	461a      	mov	r2, r3
 80164d6:	4b13      	ldr	r3, [pc, #76]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164d8:	4413      	add	r3, r2
 80164da:	79fa      	ldrb	r2, [r7, #7]
 80164dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80164de:	4b11      	ldr	r3, [pc, #68]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164e0:	7a5b      	ldrb	r3, [r3, #9]
 80164e2:	b2db      	uxtb	r3, r3
 80164e4:	1c5a      	adds	r2, r3, #1
 80164e6:	b2d1      	uxtb	r1, r2
 80164e8:	4a0e      	ldr	r2, [pc, #56]	; (8016524 <FATFS_LinkDriverEx+0x94>)
 80164ea:	7251      	strb	r1, [r2, #9]
 80164ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80164ee:	7dbb      	ldrb	r3, [r7, #22]
 80164f0:	3330      	adds	r3, #48	; 0x30
 80164f2:	b2da      	uxtb	r2, r3
 80164f4:	68bb      	ldr	r3, [r7, #8]
 80164f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	3301      	adds	r3, #1
 80164fc:	223a      	movs	r2, #58	; 0x3a
 80164fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	3302      	adds	r3, #2
 8016504:	222f      	movs	r2, #47	; 0x2f
 8016506:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	3303      	adds	r3, #3
 801650c:	2200      	movs	r2, #0
 801650e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016510:	2300      	movs	r3, #0
 8016512:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016514:	7dfb      	ldrb	r3, [r7, #23]
}
 8016516:	4618      	mov	r0, r3
 8016518:	371c      	adds	r7, #28
 801651a:	46bd      	mov	sp, r7
 801651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016520:	4770      	bx	lr
 8016522:	bf00      	nop
 8016524:	24000d94 	.word	0x24000d94

08016528 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016532:	2200      	movs	r2, #0
 8016534:	6839      	ldr	r1, [r7, #0]
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7ff ffaa 	bl	8016490 <FATFS_LinkDriverEx>
 801653c:	4603      	mov	r3, r0
}
 801653e:	4618      	mov	r0, r3
 8016540:	3708      	adds	r7, #8
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
	...

08016548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801654c:	2201      	movs	r2, #1
 801654e:	4913      	ldr	r1, [pc, #76]	; (801659c <MX_USB_DEVICE_Init+0x54>)
 8016550:	4813      	ldr	r0, [pc, #76]	; (80165a0 <MX_USB_DEVICE_Init+0x58>)
 8016552:	f7fe fca5 	bl	8014ea0 <USBD_Init>
 8016556:	4603      	mov	r3, r0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d001      	beq.n	8016560 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801655c:	f7ec ff8e 	bl	800347c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016560:	4910      	ldr	r1, [pc, #64]	; (80165a4 <MX_USB_DEVICE_Init+0x5c>)
 8016562:	480f      	ldr	r0, [pc, #60]	; (80165a0 <MX_USB_DEVICE_Init+0x58>)
 8016564:	f7fe fccc 	bl	8014f00 <USBD_RegisterClass>
 8016568:	4603      	mov	r3, r0
 801656a:	2b00      	cmp	r3, #0
 801656c:	d001      	beq.n	8016572 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801656e:	f7ec ff85 	bl	800347c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016572:	490d      	ldr	r1, [pc, #52]	; (80165a8 <MX_USB_DEVICE_Init+0x60>)
 8016574:	480a      	ldr	r0, [pc, #40]	; (80165a0 <MX_USB_DEVICE_Init+0x58>)
 8016576:	f7fe fbc3 	bl	8014d00 <USBD_CDC_RegisterInterface>
 801657a:	4603      	mov	r3, r0
 801657c:	2b00      	cmp	r3, #0
 801657e:	d001      	beq.n	8016584 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016580:	f7ec ff7c 	bl	800347c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016584:	4806      	ldr	r0, [pc, #24]	; (80165a0 <MX_USB_DEVICE_Init+0x58>)
 8016586:	f7fe fcf1 	bl	8014f6c <USBD_Start>
 801658a:	4603      	mov	r3, r0
 801658c:	2b00      	cmp	r3, #0
 801658e:	d001      	beq.n	8016594 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016590:	f7ec ff74 	bl	800347c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016594:	f7f3 fba4 	bl	8009ce0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016598:	bf00      	nop
 801659a:	bd80      	pop	{r7, pc}
 801659c:	240000b0 	.word	0x240000b0
 80165a0:	24000da0 	.word	0x24000da0
 80165a4:	2400001c 	.word	0x2400001c
 80165a8:	2400009c 	.word	0x2400009c

080165ac <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80165b0:	2200      	movs	r2, #0
 80165b2:	4905      	ldr	r1, [pc, #20]	; (80165c8 <CDC_Init_HS+0x1c>)
 80165b4:	4805      	ldr	r0, [pc, #20]	; (80165cc <CDC_Init_HS+0x20>)
 80165b6:	f7fe fbbd 	bl	8014d34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80165ba:	4905      	ldr	r1, [pc, #20]	; (80165d0 <CDC_Init_HS+0x24>)
 80165bc:	4803      	ldr	r0, [pc, #12]	; (80165cc <CDC_Init_HS+0x20>)
 80165be:	f7fe fbdb 	bl	8014d78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80165c2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	bd80      	pop	{r7, pc}
 80165c8:	2400187c 	.word	0x2400187c
 80165cc:	24000da0 	.word	0x24000da0
 80165d0:	2400107c 	.word	0x2400107c

080165d4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80165d4:	b480      	push	{r7}
 80165d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80165d8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80165da:	4618      	mov	r0, r3
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr

080165e4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80165e4:	b480      	push	{r7}
 80165e6:	b083      	sub	sp, #12
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	4603      	mov	r3, r0
 80165ec:	6039      	str	r1, [r7, #0]
 80165ee:	71fb      	strb	r3, [r7, #7]
 80165f0:	4613      	mov	r3, r2
 80165f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80165f4:	79fb      	ldrb	r3, [r7, #7]
 80165f6:	2b23      	cmp	r3, #35	; 0x23
 80165f8:	d84a      	bhi.n	8016690 <CDC_Control_HS+0xac>
 80165fa:	a201      	add	r2, pc, #4	; (adr r2, 8016600 <CDC_Control_HS+0x1c>)
 80165fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016600:	08016691 	.word	0x08016691
 8016604:	08016691 	.word	0x08016691
 8016608:	08016691 	.word	0x08016691
 801660c:	08016691 	.word	0x08016691
 8016610:	08016691 	.word	0x08016691
 8016614:	08016691 	.word	0x08016691
 8016618:	08016691 	.word	0x08016691
 801661c:	08016691 	.word	0x08016691
 8016620:	08016691 	.word	0x08016691
 8016624:	08016691 	.word	0x08016691
 8016628:	08016691 	.word	0x08016691
 801662c:	08016691 	.word	0x08016691
 8016630:	08016691 	.word	0x08016691
 8016634:	08016691 	.word	0x08016691
 8016638:	08016691 	.word	0x08016691
 801663c:	08016691 	.word	0x08016691
 8016640:	08016691 	.word	0x08016691
 8016644:	08016691 	.word	0x08016691
 8016648:	08016691 	.word	0x08016691
 801664c:	08016691 	.word	0x08016691
 8016650:	08016691 	.word	0x08016691
 8016654:	08016691 	.word	0x08016691
 8016658:	08016691 	.word	0x08016691
 801665c:	08016691 	.word	0x08016691
 8016660:	08016691 	.word	0x08016691
 8016664:	08016691 	.word	0x08016691
 8016668:	08016691 	.word	0x08016691
 801666c:	08016691 	.word	0x08016691
 8016670:	08016691 	.word	0x08016691
 8016674:	08016691 	.word	0x08016691
 8016678:	08016691 	.word	0x08016691
 801667c:	08016691 	.word	0x08016691
 8016680:	08016691 	.word	0x08016691
 8016684:	08016691 	.word	0x08016691
 8016688:	08016691 	.word	0x08016691
 801668c:	08016691 	.word	0x08016691
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016690:	bf00      	nop
  }

  return (USBD_OK);
 8016692:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016694:	4618      	mov	r0, r3
 8016696:	370c      	adds	r7, #12
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr

080166a0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b082      	sub	sp, #8
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80166aa:	6879      	ldr	r1, [r7, #4]
 80166ac:	4805      	ldr	r0, [pc, #20]	; (80166c4 <CDC_Receive_HS+0x24>)
 80166ae:	f7fe fb63 	bl	8014d78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80166b2:	4804      	ldr	r0, [pc, #16]	; (80166c4 <CDC_Receive_HS+0x24>)
 80166b4:	f7fe fbbe 	bl	8014e34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80166b8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	3708      	adds	r7, #8
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	24000da0 	.word	0x24000da0

080166c8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b084      	sub	sp, #16
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	460b      	mov	r3, r1
 80166d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80166d4:	2300      	movs	r3, #0
 80166d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80166d8:	4b0d      	ldr	r3, [pc, #52]	; (8016710 <CDC_Transmit_HS+0x48>)
 80166da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80166de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80166e0:	68bb      	ldr	r3, [r7, #8]
 80166e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d001      	beq.n	80166ee <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80166ea:	2301      	movs	r3, #1
 80166ec:	e00b      	b.n	8016706 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80166ee:	887b      	ldrh	r3, [r7, #2]
 80166f0:	461a      	mov	r2, r3
 80166f2:	6879      	ldr	r1, [r7, #4]
 80166f4:	4806      	ldr	r0, [pc, #24]	; (8016710 <CDC_Transmit_HS+0x48>)
 80166f6:	f7fe fb1d 	bl	8014d34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80166fa:	4805      	ldr	r0, [pc, #20]	; (8016710 <CDC_Transmit_HS+0x48>)
 80166fc:	f7fe fb5a 	bl	8014db4 <USBD_CDC_TransmitPacket>
 8016700:	4603      	mov	r3, r0
 8016702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016704:	7bfb      	ldrb	r3, [r7, #15]
}
 8016706:	4618      	mov	r0, r3
 8016708:	3710      	adds	r7, #16
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	24000da0 	.word	0x24000da0

08016714 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016714:	b480      	push	{r7}
 8016716:	b087      	sub	sp, #28
 8016718:	af00      	add	r7, sp, #0
 801671a:	60f8      	str	r0, [r7, #12]
 801671c:	60b9      	str	r1, [r7, #8]
 801671e:	4613      	mov	r3, r2
 8016720:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016722:	2300      	movs	r3, #0
 8016724:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801672a:	4618      	mov	r0, r3
 801672c:	371c      	adds	r7, #28
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr
	...

08016738 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
 801673e:	4603      	mov	r3, r0
 8016740:	6039      	str	r1, [r7, #0]
 8016742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	2212      	movs	r2, #18
 8016748:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801674a:	4b03      	ldr	r3, [pc, #12]	; (8016758 <USBD_HS_DeviceDescriptor+0x20>)
}
 801674c:	4618      	mov	r0, r3
 801674e:	370c      	adds	r7, #12
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr
 8016758:	240000cc 	.word	0x240000cc

0801675c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801675c:	b480      	push	{r7}
 801675e:	b083      	sub	sp, #12
 8016760:	af00      	add	r7, sp, #0
 8016762:	4603      	mov	r3, r0
 8016764:	6039      	str	r1, [r7, #0]
 8016766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	2204      	movs	r2, #4
 801676c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801676e:	4b03      	ldr	r3, [pc, #12]	; (801677c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016770:	4618      	mov	r0, r3
 8016772:	370c      	adds	r7, #12
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr
 801677c:	240000e0 	.word	0x240000e0

08016780 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	4603      	mov	r3, r0
 8016788:	6039      	str	r1, [r7, #0]
 801678a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801678c:	79fb      	ldrb	r3, [r7, #7]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d105      	bne.n	801679e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016792:	683a      	ldr	r2, [r7, #0]
 8016794:	4907      	ldr	r1, [pc, #28]	; (80167b4 <USBD_HS_ProductStrDescriptor+0x34>)
 8016796:	4808      	ldr	r0, [pc, #32]	; (80167b8 <USBD_HS_ProductStrDescriptor+0x38>)
 8016798:	f7ff fd9a 	bl	80162d0 <USBD_GetString>
 801679c:	e004      	b.n	80167a8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	4904      	ldr	r1, [pc, #16]	; (80167b4 <USBD_HS_ProductStrDescriptor+0x34>)
 80167a2:	4805      	ldr	r0, [pc, #20]	; (80167b8 <USBD_HS_ProductStrDescriptor+0x38>)
 80167a4:	f7ff fd94 	bl	80162d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80167a8:	4b02      	ldr	r3, [pc, #8]	; (80167b4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3708      	adds	r7, #8
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	2400207c 	.word	0x2400207c
 80167b8:	0801c79c 	.word	0x0801c79c

080167bc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	4603      	mov	r3, r0
 80167c4:	6039      	str	r1, [r7, #0]
 80167c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80167c8:	683a      	ldr	r2, [r7, #0]
 80167ca:	4904      	ldr	r1, [pc, #16]	; (80167dc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80167cc:	4804      	ldr	r0, [pc, #16]	; (80167e0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80167ce:	f7ff fd7f 	bl	80162d0 <USBD_GetString>
  return USBD_StrDesc;
 80167d2:	4b02      	ldr	r3, [pc, #8]	; (80167dc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3708      	adds	r7, #8
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}
 80167dc:	2400207c 	.word	0x2400207c
 80167e0:	0801c7b8 	.word	0x0801c7b8

080167e4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	4603      	mov	r3, r0
 80167ec:	6039      	str	r1, [r7, #0]
 80167ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	221a      	movs	r2, #26
 80167f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80167f6:	f000 f843 	bl	8016880 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80167fa:	4b02      	ldr	r3, [pc, #8]	; (8016804 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3708      	adds	r7, #8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}
 8016804:	240000e4 	.word	0x240000e4

08016808 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	4603      	mov	r3, r0
 8016810:	6039      	str	r1, [r7, #0]
 8016812:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016814:	79fb      	ldrb	r3, [r7, #7]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d105      	bne.n	8016826 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801681a:	683a      	ldr	r2, [r7, #0]
 801681c:	4907      	ldr	r1, [pc, #28]	; (801683c <USBD_HS_ConfigStrDescriptor+0x34>)
 801681e:	4808      	ldr	r0, [pc, #32]	; (8016840 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016820:	f7ff fd56 	bl	80162d0 <USBD_GetString>
 8016824:	e004      	b.n	8016830 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016826:	683a      	ldr	r2, [r7, #0]
 8016828:	4904      	ldr	r1, [pc, #16]	; (801683c <USBD_HS_ConfigStrDescriptor+0x34>)
 801682a:	4805      	ldr	r0, [pc, #20]	; (8016840 <USBD_HS_ConfigStrDescriptor+0x38>)
 801682c:	f7ff fd50 	bl	80162d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016830:	4b02      	ldr	r3, [pc, #8]	; (801683c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016832:	4618      	mov	r0, r3
 8016834:	3708      	adds	r7, #8
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
 801683a:	bf00      	nop
 801683c:	2400207c 	.word	0x2400207c
 8016840:	0801c7bc 	.word	0x0801c7bc

08016844 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	4603      	mov	r3, r0
 801684c:	6039      	str	r1, [r7, #0]
 801684e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016850:	79fb      	ldrb	r3, [r7, #7]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d105      	bne.n	8016862 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016856:	683a      	ldr	r2, [r7, #0]
 8016858:	4907      	ldr	r1, [pc, #28]	; (8016878 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801685a:	4808      	ldr	r0, [pc, #32]	; (801687c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801685c:	f7ff fd38 	bl	80162d0 <USBD_GetString>
 8016860:	e004      	b.n	801686c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	4904      	ldr	r1, [pc, #16]	; (8016878 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016866:	4805      	ldr	r0, [pc, #20]	; (801687c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016868:	f7ff fd32 	bl	80162d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801686c:	4b02      	ldr	r3, [pc, #8]	; (8016878 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801686e:	4618      	mov	r0, r3
 8016870:	3708      	adds	r7, #8
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	2400207c 	.word	0x2400207c
 801687c:	0801c7c8 	.word	0x0801c7c8

08016880 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b084      	sub	sp, #16
 8016884:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016886:	4b0f      	ldr	r3, [pc, #60]	; (80168c4 <Get_SerialNum+0x44>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801688c:	4b0e      	ldr	r3, [pc, #56]	; (80168c8 <Get_SerialNum+0x48>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016892:	4b0e      	ldr	r3, [pc, #56]	; (80168cc <Get_SerialNum+0x4c>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016898:	68fa      	ldr	r2, [r7, #12]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4413      	add	r3, r2
 801689e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d009      	beq.n	80168ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80168a6:	2208      	movs	r2, #8
 80168a8:	4909      	ldr	r1, [pc, #36]	; (80168d0 <Get_SerialNum+0x50>)
 80168aa:	68f8      	ldr	r0, [r7, #12]
 80168ac:	f000 f814 	bl	80168d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80168b0:	2204      	movs	r2, #4
 80168b2:	4908      	ldr	r1, [pc, #32]	; (80168d4 <Get_SerialNum+0x54>)
 80168b4:	68b8      	ldr	r0, [r7, #8]
 80168b6:	f000 f80f 	bl	80168d8 <IntToUnicode>
  }
}
 80168ba:	bf00      	nop
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	1ff1e800 	.word	0x1ff1e800
 80168c8:	1ff1e804 	.word	0x1ff1e804
 80168cc:	1ff1e808 	.word	0x1ff1e808
 80168d0:	240000e6 	.word	0x240000e6
 80168d4:	240000f6 	.word	0x240000f6

080168d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80168d8:	b480      	push	{r7}
 80168da:	b087      	sub	sp, #28
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	60b9      	str	r1, [r7, #8]
 80168e2:	4613      	mov	r3, r2
 80168e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80168ea:	2300      	movs	r3, #0
 80168ec:	75fb      	strb	r3, [r7, #23]
 80168ee:	e027      	b.n	8016940 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	0f1b      	lsrs	r3, r3, #28
 80168f4:	2b09      	cmp	r3, #9
 80168f6:	d80b      	bhi.n	8016910 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	0f1b      	lsrs	r3, r3, #28
 80168fc:	b2da      	uxtb	r2, r3
 80168fe:	7dfb      	ldrb	r3, [r7, #23]
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	4619      	mov	r1, r3
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	440b      	add	r3, r1
 8016908:	3230      	adds	r2, #48	; 0x30
 801690a:	b2d2      	uxtb	r2, r2
 801690c:	701a      	strb	r2, [r3, #0]
 801690e:	e00a      	b.n	8016926 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	0f1b      	lsrs	r3, r3, #28
 8016914:	b2da      	uxtb	r2, r3
 8016916:	7dfb      	ldrb	r3, [r7, #23]
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4619      	mov	r1, r3
 801691c:	68bb      	ldr	r3, [r7, #8]
 801691e:	440b      	add	r3, r1
 8016920:	3237      	adds	r2, #55	; 0x37
 8016922:	b2d2      	uxtb	r2, r2
 8016924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	011b      	lsls	r3, r3, #4
 801692a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801692c:	7dfb      	ldrb	r3, [r7, #23]
 801692e:	005b      	lsls	r3, r3, #1
 8016930:	3301      	adds	r3, #1
 8016932:	68ba      	ldr	r2, [r7, #8]
 8016934:	4413      	add	r3, r2
 8016936:	2200      	movs	r2, #0
 8016938:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801693a:	7dfb      	ldrb	r3, [r7, #23]
 801693c:	3301      	adds	r3, #1
 801693e:	75fb      	strb	r3, [r7, #23]
 8016940:	7dfa      	ldrb	r2, [r7, #23]
 8016942:	79fb      	ldrb	r3, [r7, #7]
 8016944:	429a      	cmp	r2, r3
 8016946:	d3d3      	bcc.n	80168f0 <IntToUnicode+0x18>
  }
}
 8016948:	bf00      	nop
 801694a:	bf00      	nop
 801694c:	371c      	adds	r7, #28
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr
	...

08016958 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b0b2      	sub	sp, #200	; 0xc8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016960:	f107 0310 	add.w	r3, r7, #16
 8016964:	22b8      	movs	r2, #184	; 0xb8
 8016966:	2100      	movs	r1, #0
 8016968:	4618      	mov	r0, r3
 801696a:	f000 fb39 	bl	8016fe0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	4a1a      	ldr	r2, [pc, #104]	; (80169dc <HAL_PCD_MspInit+0x84>)
 8016974:	4293      	cmp	r3, r2
 8016976:	d12c      	bne.n	80169d2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016978:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801697c:	f04f 0300 	mov.w	r3, #0
 8016980:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016984:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801698c:	f107 0310 	add.w	r3, r7, #16
 8016990:	4618      	mov	r0, r3
 8016992:	f7f4 f985 	bl	800aca0 <HAL_RCCEx_PeriphCLKConfig>
 8016996:	4603      	mov	r3, r0
 8016998:	2b00      	cmp	r3, #0
 801699a:	d001      	beq.n	80169a0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801699c:	f7ec fd6e 	bl	800347c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80169a0:	f7f3 f99e 	bl	8009ce0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80169a4:	4b0e      	ldr	r3, [pc, #56]	; (80169e0 <HAL_PCD_MspInit+0x88>)
 80169a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80169aa:	4a0d      	ldr	r2, [pc, #52]	; (80169e0 <HAL_PCD_MspInit+0x88>)
 80169ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80169b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80169b4:	4b0a      	ldr	r3, [pc, #40]	; (80169e0 <HAL_PCD_MspInit+0x88>)
 80169b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80169ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80169be:	60fb      	str	r3, [r7, #12]
 80169c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80169c2:	2200      	movs	r2, #0
 80169c4:	2100      	movs	r1, #0
 80169c6:	204d      	movs	r0, #77	; 0x4d
 80169c8:	f7ef fb23 	bl	8006012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80169cc:	204d      	movs	r0, #77	; 0x4d
 80169ce:	f7ef fb3a 	bl	8006046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80169d2:	bf00      	nop
 80169d4:	37c8      	adds	r7, #200	; 0xc8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	40040000 	.word	0x40040000
 80169e0:	58024400 	.word	0x58024400

080169e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80169f8:	4619      	mov	r1, r3
 80169fa:	4610      	mov	r0, r2
 80169fc:	f7fe fb03 	bl	8015006 <USBD_LL_SetupStage>
}
 8016a00:	bf00      	nop
 8016a02:	3708      	adds	r7, #8
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}

08016a08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
 8016a10:	460b      	mov	r3, r1
 8016a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016a1a:	78fa      	ldrb	r2, [r7, #3]
 8016a1c:	6879      	ldr	r1, [r7, #4]
 8016a1e:	4613      	mov	r3, r2
 8016a20:	00db      	lsls	r3, r3, #3
 8016a22:	4413      	add	r3, r2
 8016a24:	009b      	lsls	r3, r3, #2
 8016a26:	440b      	add	r3, r1
 8016a28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	78fb      	ldrb	r3, [r7, #3]
 8016a30:	4619      	mov	r1, r3
 8016a32:	f7fe fb3d 	bl	80150b0 <USBD_LL_DataOutStage>
}
 8016a36:	bf00      	nop
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b082      	sub	sp, #8
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
 8016a46:	460b      	mov	r3, r1
 8016a48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016a50:	78fa      	ldrb	r2, [r7, #3]
 8016a52:	6879      	ldr	r1, [r7, #4]
 8016a54:	4613      	mov	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	4413      	add	r3, r2
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	440b      	add	r3, r1
 8016a5e:	3348      	adds	r3, #72	; 0x48
 8016a60:	681a      	ldr	r2, [r3, #0]
 8016a62:	78fb      	ldrb	r3, [r7, #3]
 8016a64:	4619      	mov	r1, r3
 8016a66:	f7fe fbd6 	bl	8015216 <USBD_LL_DataInStage>
}
 8016a6a:	bf00      	nop
 8016a6c:	3708      	adds	r7, #8
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b082      	sub	sp, #8
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7fe fd10 	bl	80154a6 <USBD_LL_SOF>
}
 8016a86:	bf00      	nop
 8016a88:	3708      	adds	r7, #8
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a8e:	b580      	push	{r7, lr}
 8016a90:	b084      	sub	sp, #16
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016a96:	2301      	movs	r3, #1
 8016a98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	691b      	ldr	r3, [r3, #16]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d102      	bne.n	8016aa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	73fb      	strb	r3, [r7, #15]
 8016aa6:	e008      	b.n	8016aba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	691b      	ldr	r3, [r3, #16]
 8016aac:	2b02      	cmp	r3, #2
 8016aae:	d102      	bne.n	8016ab6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	73fb      	strb	r3, [r7, #15]
 8016ab4:	e001      	b.n	8016aba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016ab6:	f7ec fce1 	bl	800347c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ac0:	7bfa      	ldrb	r2, [r7, #15]
 8016ac2:	4611      	mov	r1, r2
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7fe fcaa 	bl	801541e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7fe fc52 	bl	801537a <USBD_LL_Reset>
}
 8016ad6:	bf00      	nop
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
	...

08016ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7fe fca5 	bl	801543e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	6812      	ldr	r2, [r2, #0]
 8016b02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b06:	f043 0301 	orr.w	r3, r3, #1
 8016b0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6a1b      	ldr	r3, [r3, #32]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d005      	beq.n	8016b20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b14:	4b04      	ldr	r3, [pc, #16]	; (8016b28 <HAL_PCD_SuspendCallback+0x48>)
 8016b16:	691b      	ldr	r3, [r3, #16]
 8016b18:	4a03      	ldr	r2, [pc, #12]	; (8016b28 <HAL_PCD_SuspendCallback+0x48>)
 8016b1a:	f043 0306 	orr.w	r3, r3, #6
 8016b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016b20:	bf00      	nop
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	e000ed00 	.word	0xe000ed00

08016b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7fe fc9b 	bl	8015476 <USBD_LL_Resume>
}
 8016b40:	bf00      	nop
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	460b      	mov	r3, r1
 8016b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b5a:	78fa      	ldrb	r2, [r7, #3]
 8016b5c:	4611      	mov	r1, r2
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7fe fcf3 	bl	801554a <USBD_LL_IsoOUTIncomplete>
}
 8016b64:	bf00      	nop
 8016b66:	3708      	adds	r7, #8
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	460b      	mov	r3, r1
 8016b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b7e:	78fa      	ldrb	r2, [r7, #3]
 8016b80:	4611      	mov	r1, r2
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7fe fcaf 	bl	80154e6 <USBD_LL_IsoINIncomplete>
}
 8016b88:	bf00      	nop
 8016b8a:	3708      	adds	r7, #8
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b082      	sub	sp, #8
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7fe fd05 	bl	80155ae <USBD_LL_DevConnected>
}
 8016ba4:	bf00      	nop
 8016ba6:	3708      	adds	r7, #8
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7fe fd02 	bl	80155c4 <USBD_LL_DevDisconnected>
}
 8016bc0:	bf00      	nop
 8016bc2:	3708      	adds	r7, #8
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}

08016bc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	781b      	ldrb	r3, [r3, #0]
 8016bd4:	2b01      	cmp	r3, #1
 8016bd6:	d140      	bne.n	8016c5a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016bd8:	4a22      	ldr	r2, [pc, #136]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	4a20      	ldr	r2, [pc, #128]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016be4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016be8:	4b1e      	ldr	r3, [pc, #120]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016bea:	4a1f      	ldr	r2, [pc, #124]	; (8016c68 <USBD_LL_Init+0xa0>)
 8016bec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016bee:	4b1d      	ldr	r3, [pc, #116]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016bf0:	2209      	movs	r2, #9
 8016bf2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016bf4:	4b1b      	ldr	r3, [pc, #108]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016bf6:	2202      	movs	r2, #2
 8016bf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016bfa:	4b1a      	ldr	r3, [pc, #104]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016c00:	4b18      	ldr	r3, [pc, #96]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c02:	2202      	movs	r2, #2
 8016c04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016c06:	4b17      	ldr	r3, [pc, #92]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c08:	2200      	movs	r2, #0
 8016c0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016c0c:	4b15      	ldr	r3, [pc, #84]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c0e:	2200      	movs	r2, #0
 8016c10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016c12:	4b14      	ldr	r3, [pc, #80]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c14:	2200      	movs	r2, #0
 8016c16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016c18:	4b12      	ldr	r3, [pc, #72]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016c1e:	4b11      	ldr	r3, [pc, #68]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c20:	2200      	movs	r2, #0
 8016c22:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016c24:	4b0f      	ldr	r3, [pc, #60]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c26:	2200      	movs	r2, #0
 8016c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016c2a:	480e      	ldr	r0, [pc, #56]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c2c:	f7f1 fd65 	bl	80086fa <HAL_PCD_Init>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d001      	beq.n	8016c3a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016c36:	f7ec fc21 	bl	800347c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016c3e:	4809      	ldr	r0, [pc, #36]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c40:	f7f2 ffd3 	bl	8009bea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016c44:	2280      	movs	r2, #128	; 0x80
 8016c46:	2100      	movs	r1, #0
 8016c48:	4806      	ldr	r0, [pc, #24]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c4a:	f7f2 ff87 	bl	8009b5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016c4e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016c52:	2101      	movs	r1, #1
 8016c54:	4803      	ldr	r0, [pc, #12]	; (8016c64 <USBD_LL_Init+0x9c>)
 8016c56:	f7f2 ff81 	bl	8009b5c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016c5a:	2300      	movs	r3, #0
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3708      	adds	r7, #8
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	2400227c 	.word	0x2400227c
 8016c68:	40040000 	.word	0x40040000

08016c6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b084      	sub	sp, #16
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c74:	2300      	movs	r3, #0
 8016c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7f1 fe5d 	bl	8008942 <HAL_PCD_Start>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c8c:	7bfb      	ldrb	r3, [r7, #15]
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f000 f942 	bl	8016f18 <USBD_Get_USB_Status>
 8016c94:	4603      	mov	r3, r0
 8016c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3710      	adds	r7, #16
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}

08016ca2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016ca2:	b580      	push	{r7, lr}
 8016ca4:	b084      	sub	sp, #16
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	6078      	str	r0, [r7, #4]
 8016caa:	4608      	mov	r0, r1
 8016cac:	4611      	mov	r1, r2
 8016cae:	461a      	mov	r2, r3
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	70fb      	strb	r3, [r7, #3]
 8016cb4:	460b      	mov	r3, r1
 8016cb6:	70bb      	strb	r3, [r7, #2]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016cca:	78bb      	ldrb	r3, [r7, #2]
 8016ccc:	883a      	ldrh	r2, [r7, #0]
 8016cce:	78f9      	ldrb	r1, [r7, #3]
 8016cd0:	f7f2 fb5d 	bl	800938e <HAL_PCD_EP_Open>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cd8:	7bfb      	ldrb	r3, [r7, #15]
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f000 f91c 	bl	8016f18 <USBD_Get_USB_Status>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3710      	adds	r7, #16
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}

08016cee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cee:	b580      	push	{r7, lr}
 8016cf0:	b084      	sub	sp, #16
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	6078      	str	r0, [r7, #4]
 8016cf6:	460b      	mov	r3, r1
 8016cf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d08:	78fa      	ldrb	r2, [r7, #3]
 8016d0a:	4611      	mov	r1, r2
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7f2 fba6 	bl	800945e <HAL_PCD_EP_Close>
 8016d12:	4603      	mov	r3, r0
 8016d14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d16:	7bfb      	ldrb	r3, [r7, #15]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f000 f8fd 	bl	8016f18 <USBD_Get_USB_Status>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	3710      	adds	r7, #16
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	460b      	mov	r3, r1
 8016d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d46:	78fa      	ldrb	r2, [r7, #3]
 8016d48:	4611      	mov	r1, r2
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7f2 fc60 	bl	8009610 <HAL_PCD_EP_SetStall>
 8016d50:	4603      	mov	r3, r0
 8016d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d54:	7bfb      	ldrb	r3, [r7, #15]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f000 f8de 	bl	8016f18 <USBD_Get_USB_Status>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d62:	4618      	mov	r0, r3
 8016d64:	3710      	adds	r7, #16
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b084      	sub	sp, #16
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]
 8016d72:	460b      	mov	r3, r1
 8016d74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d76:	2300      	movs	r3, #0
 8016d78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d84:	78fa      	ldrb	r2, [r7, #3]
 8016d86:	4611      	mov	r1, r2
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f7f2 fca5 	bl	80096d8 <HAL_PCD_EP_ClrStall>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d92:	7bfb      	ldrb	r3, [r7, #15]
 8016d94:	4618      	mov	r0, r3
 8016d96:	f000 f8bf 	bl	8016f18 <USBD_Get_USB_Status>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	3710      	adds	r7, #16
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}

08016da8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016da8:	b480      	push	{r7}
 8016daa:	b085      	sub	sp, #20
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	460b      	mov	r3, r1
 8016db2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016dba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	da0b      	bge.n	8016ddc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016dc4:	78fb      	ldrb	r3, [r7, #3]
 8016dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016dca:	68f9      	ldr	r1, [r7, #12]
 8016dcc:	4613      	mov	r3, r2
 8016dce:	00db      	lsls	r3, r3, #3
 8016dd0:	4413      	add	r3, r2
 8016dd2:	009b      	lsls	r3, r3, #2
 8016dd4:	440b      	add	r3, r1
 8016dd6:	333e      	adds	r3, #62	; 0x3e
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	e00b      	b.n	8016df4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ddc:	78fb      	ldrb	r3, [r7, #3]
 8016dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016de2:	68f9      	ldr	r1, [r7, #12]
 8016de4:	4613      	mov	r3, r2
 8016de6:	00db      	lsls	r3, r3, #3
 8016de8:	4413      	add	r3, r2
 8016dea:	009b      	lsls	r3, r3, #2
 8016dec:	440b      	add	r3, r1
 8016dee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016df2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3714      	adds	r7, #20
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfe:	4770      	bx	lr

08016e00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	460b      	mov	r3, r1
 8016e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e1a:	78fa      	ldrb	r2, [r7, #3]
 8016e1c:	4611      	mov	r1, r2
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f2 fa90 	bl	8009344 <HAL_PCD_SetAddress>
 8016e24:	4603      	mov	r3, r0
 8016e26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e28:	7bfb      	ldrb	r3, [r7, #15]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 f874 	bl	8016f18 <USBD_Get_USB_Status>
 8016e30:	4603      	mov	r3, r0
 8016e32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e3e:	b580      	push	{r7, lr}
 8016e40:	b086      	sub	sp, #24
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	60f8      	str	r0, [r7, #12]
 8016e46:	607a      	str	r2, [r7, #4]
 8016e48:	603b      	str	r3, [r7, #0]
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e52:	2300      	movs	r3, #0
 8016e54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016e5c:	7af9      	ldrb	r1, [r7, #11]
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	687a      	ldr	r2, [r7, #4]
 8016e62:	f7f2 fb9a 	bl	800959a <HAL_PCD_EP_Transmit>
 8016e66:	4603      	mov	r3, r0
 8016e68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e6a:	7dfb      	ldrb	r3, [r7, #23]
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f000 f853 	bl	8016f18 <USBD_Get_USB_Status>
 8016e72:	4603      	mov	r3, r0
 8016e74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e76:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e78:	4618      	mov	r0, r3
 8016e7a:	3718      	adds	r7, #24
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	bd80      	pop	{r7, pc}

08016e80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b086      	sub	sp, #24
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	607a      	str	r2, [r7, #4]
 8016e8a:	603b      	str	r3, [r7, #0]
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e90:	2300      	movs	r3, #0
 8016e92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e94:	2300      	movs	r3, #0
 8016e96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016e9e:	7af9      	ldrb	r1, [r7, #11]
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	687a      	ldr	r2, [r7, #4]
 8016ea4:	f7f2 fb25 	bl	80094f2 <HAL_PCD_EP_Receive>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eac:	7dfb      	ldrb	r3, [r7, #23]
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f000 f832 	bl	8016f18 <USBD_Get_USB_Status>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016eb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3718      	adds	r7, #24
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}

08016ec2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ec2:	b580      	push	{r7, lr}
 8016ec4:	b082      	sub	sp, #8
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
 8016eca:	460b      	mov	r3, r1
 8016ecc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ed4:	78fa      	ldrb	r2, [r7, #3]
 8016ed6:	4611      	mov	r1, r2
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7f2 fb46 	bl	800956a <HAL_PCD_EP_GetRxCount>
 8016ede:	4603      	mov	r3, r0
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3708      	adds	r7, #8
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}

08016ee8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ee8:	b480      	push	{r7}
 8016eea:	b083      	sub	sp, #12
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ef0:	4b03      	ldr	r3, [pc, #12]	; (8016f00 <USBD_static_malloc+0x18>)
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	370c      	adds	r7, #12
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efc:	4770      	bx	lr
 8016efe:	bf00      	nop
 8016f00:	24002788 	.word	0x24002788

08016f04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f04:	b480      	push	{r7}
 8016f06:	b083      	sub	sp, #12
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016f0c:	bf00      	nop
 8016f0e:	370c      	adds	r7, #12
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	4603      	mov	r3, r0
 8016f20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f22:	2300      	movs	r3, #0
 8016f24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f26:	79fb      	ldrb	r3, [r7, #7]
 8016f28:	2b03      	cmp	r3, #3
 8016f2a:	d817      	bhi.n	8016f5c <USBD_Get_USB_Status+0x44>
 8016f2c:	a201      	add	r2, pc, #4	; (adr r2, 8016f34 <USBD_Get_USB_Status+0x1c>)
 8016f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f32:	bf00      	nop
 8016f34:	08016f45 	.word	0x08016f45
 8016f38:	08016f4b 	.word	0x08016f4b
 8016f3c:	08016f51 	.word	0x08016f51
 8016f40:	08016f57 	.word	0x08016f57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016f44:	2300      	movs	r3, #0
 8016f46:	73fb      	strb	r3, [r7, #15]
    break;
 8016f48:	e00b      	b.n	8016f62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016f4a:	2303      	movs	r3, #3
 8016f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8016f4e:	e008      	b.n	8016f62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016f50:	2301      	movs	r3, #1
 8016f52:	73fb      	strb	r3, [r7, #15]
    break;
 8016f54:	e005      	b.n	8016f62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016f56:	2303      	movs	r3, #3
 8016f58:	73fb      	strb	r3, [r7, #15]
    break;
 8016f5a:	e002      	b.n	8016f62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016f5c:	2303      	movs	r3, #3
 8016f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8016f60:	bf00      	nop
  }
  return usb_status;
 8016f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3714      	adds	r7, #20
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6e:	4770      	bx	lr

08016f70 <__errno>:
 8016f70:	4b01      	ldr	r3, [pc, #4]	; (8016f78 <__errno+0x8>)
 8016f72:	6818      	ldr	r0, [r3, #0]
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop
 8016f78:	24000100 	.word	0x24000100

08016f7c <__libc_init_array>:
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	4d0d      	ldr	r5, [pc, #52]	; (8016fb4 <__libc_init_array+0x38>)
 8016f80:	4c0d      	ldr	r4, [pc, #52]	; (8016fb8 <__libc_init_array+0x3c>)
 8016f82:	1b64      	subs	r4, r4, r5
 8016f84:	10a4      	asrs	r4, r4, #2
 8016f86:	2600      	movs	r6, #0
 8016f88:	42a6      	cmp	r6, r4
 8016f8a:	d109      	bne.n	8016fa0 <__libc_init_array+0x24>
 8016f8c:	4d0b      	ldr	r5, [pc, #44]	; (8016fbc <__libc_init_array+0x40>)
 8016f8e:	4c0c      	ldr	r4, [pc, #48]	; (8016fc0 <__libc_init_array+0x44>)
 8016f90:	f005 fb48 	bl	801c624 <_init>
 8016f94:	1b64      	subs	r4, r4, r5
 8016f96:	10a4      	asrs	r4, r4, #2
 8016f98:	2600      	movs	r6, #0
 8016f9a:	42a6      	cmp	r6, r4
 8016f9c:	d105      	bne.n	8016faa <__libc_init_array+0x2e>
 8016f9e:	bd70      	pop	{r4, r5, r6, pc}
 8016fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fa4:	4798      	blx	r3
 8016fa6:	3601      	adds	r6, #1
 8016fa8:	e7ee      	b.n	8016f88 <__libc_init_array+0xc>
 8016faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fae:	4798      	blx	r3
 8016fb0:	3601      	adds	r6, #1
 8016fb2:	e7f2      	b.n	8016f9a <__libc_init_array+0x1e>
 8016fb4:	0801ceb8 	.word	0x0801ceb8
 8016fb8:	0801ceb8 	.word	0x0801ceb8
 8016fbc:	0801ceb8 	.word	0x0801ceb8
 8016fc0:	0801cebc 	.word	0x0801cebc

08016fc4 <memcpy>:
 8016fc4:	440a      	add	r2, r1
 8016fc6:	4291      	cmp	r1, r2
 8016fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fcc:	d100      	bne.n	8016fd0 <memcpy+0xc>
 8016fce:	4770      	bx	lr
 8016fd0:	b510      	push	{r4, lr}
 8016fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fda:	4291      	cmp	r1, r2
 8016fdc:	d1f9      	bne.n	8016fd2 <memcpy+0xe>
 8016fde:	bd10      	pop	{r4, pc}

08016fe0 <memset>:
 8016fe0:	4402      	add	r2, r0
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d100      	bne.n	8016fea <memset+0xa>
 8016fe8:	4770      	bx	lr
 8016fea:	f803 1b01 	strb.w	r1, [r3], #1
 8016fee:	e7f9      	b.n	8016fe4 <memset+0x4>

08016ff0 <__cvt>:
 8016ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ff2:	ed2d 8b02 	vpush	{d8}
 8016ff6:	eeb0 8b40 	vmov.f64	d8, d0
 8016ffa:	b085      	sub	sp, #20
 8016ffc:	4617      	mov	r7, r2
 8016ffe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017000:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017002:	ee18 2a90 	vmov	r2, s17
 8017006:	f025 0520 	bic.w	r5, r5, #32
 801700a:	2a00      	cmp	r2, #0
 801700c:	bfb6      	itet	lt
 801700e:	222d      	movlt	r2, #45	; 0x2d
 8017010:	2200      	movge	r2, #0
 8017012:	eeb1 8b40 	vneglt.f64	d8, d0
 8017016:	2d46      	cmp	r5, #70	; 0x46
 8017018:	460c      	mov	r4, r1
 801701a:	701a      	strb	r2, [r3, #0]
 801701c:	d004      	beq.n	8017028 <__cvt+0x38>
 801701e:	2d45      	cmp	r5, #69	; 0x45
 8017020:	d100      	bne.n	8017024 <__cvt+0x34>
 8017022:	3401      	adds	r4, #1
 8017024:	2102      	movs	r1, #2
 8017026:	e000      	b.n	801702a <__cvt+0x3a>
 8017028:	2103      	movs	r1, #3
 801702a:	ab03      	add	r3, sp, #12
 801702c:	9301      	str	r3, [sp, #4]
 801702e:	ab02      	add	r3, sp, #8
 8017030:	9300      	str	r3, [sp, #0]
 8017032:	4622      	mov	r2, r4
 8017034:	4633      	mov	r3, r6
 8017036:	eeb0 0b48 	vmov.f64	d0, d8
 801703a:	f001 fd95 	bl	8018b68 <_dtoa_r>
 801703e:	2d47      	cmp	r5, #71	; 0x47
 8017040:	d101      	bne.n	8017046 <__cvt+0x56>
 8017042:	07fb      	lsls	r3, r7, #31
 8017044:	d51a      	bpl.n	801707c <__cvt+0x8c>
 8017046:	2d46      	cmp	r5, #70	; 0x46
 8017048:	eb00 0204 	add.w	r2, r0, r4
 801704c:	d10c      	bne.n	8017068 <__cvt+0x78>
 801704e:	7803      	ldrb	r3, [r0, #0]
 8017050:	2b30      	cmp	r3, #48	; 0x30
 8017052:	d107      	bne.n	8017064 <__cvt+0x74>
 8017054:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705c:	bf1c      	itt	ne
 801705e:	f1c4 0401 	rsbne	r4, r4, #1
 8017062:	6034      	strne	r4, [r6, #0]
 8017064:	6833      	ldr	r3, [r6, #0]
 8017066:	441a      	add	r2, r3
 8017068:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801706c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017070:	bf08      	it	eq
 8017072:	9203      	streq	r2, [sp, #12]
 8017074:	2130      	movs	r1, #48	; 0x30
 8017076:	9b03      	ldr	r3, [sp, #12]
 8017078:	4293      	cmp	r3, r2
 801707a:	d307      	bcc.n	801708c <__cvt+0x9c>
 801707c:	9b03      	ldr	r3, [sp, #12]
 801707e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017080:	1a1b      	subs	r3, r3, r0
 8017082:	6013      	str	r3, [r2, #0]
 8017084:	b005      	add	sp, #20
 8017086:	ecbd 8b02 	vpop	{d8}
 801708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801708c:	1c5c      	adds	r4, r3, #1
 801708e:	9403      	str	r4, [sp, #12]
 8017090:	7019      	strb	r1, [r3, #0]
 8017092:	e7f0      	b.n	8017076 <__cvt+0x86>

08017094 <__exponent>:
 8017094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017096:	4603      	mov	r3, r0
 8017098:	2900      	cmp	r1, #0
 801709a:	bfb8      	it	lt
 801709c:	4249      	neglt	r1, r1
 801709e:	f803 2b02 	strb.w	r2, [r3], #2
 80170a2:	bfb4      	ite	lt
 80170a4:	222d      	movlt	r2, #45	; 0x2d
 80170a6:	222b      	movge	r2, #43	; 0x2b
 80170a8:	2909      	cmp	r1, #9
 80170aa:	7042      	strb	r2, [r0, #1]
 80170ac:	dd2a      	ble.n	8017104 <__exponent+0x70>
 80170ae:	f10d 0407 	add.w	r4, sp, #7
 80170b2:	46a4      	mov	ip, r4
 80170b4:	270a      	movs	r7, #10
 80170b6:	46a6      	mov	lr, r4
 80170b8:	460a      	mov	r2, r1
 80170ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80170be:	fb07 1516 	mls	r5, r7, r6, r1
 80170c2:	3530      	adds	r5, #48	; 0x30
 80170c4:	2a63      	cmp	r2, #99	; 0x63
 80170c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80170ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80170ce:	4631      	mov	r1, r6
 80170d0:	dcf1      	bgt.n	80170b6 <__exponent+0x22>
 80170d2:	3130      	adds	r1, #48	; 0x30
 80170d4:	f1ae 0502 	sub.w	r5, lr, #2
 80170d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80170dc:	1c44      	adds	r4, r0, #1
 80170de:	4629      	mov	r1, r5
 80170e0:	4561      	cmp	r1, ip
 80170e2:	d30a      	bcc.n	80170fa <__exponent+0x66>
 80170e4:	f10d 0209 	add.w	r2, sp, #9
 80170e8:	eba2 020e 	sub.w	r2, r2, lr
 80170ec:	4565      	cmp	r5, ip
 80170ee:	bf88      	it	hi
 80170f0:	2200      	movhi	r2, #0
 80170f2:	4413      	add	r3, r2
 80170f4:	1a18      	subs	r0, r3, r0
 80170f6:	b003      	add	sp, #12
 80170f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017102:	e7ed      	b.n	80170e0 <__exponent+0x4c>
 8017104:	2330      	movs	r3, #48	; 0x30
 8017106:	3130      	adds	r1, #48	; 0x30
 8017108:	7083      	strb	r3, [r0, #2]
 801710a:	70c1      	strb	r1, [r0, #3]
 801710c:	1d03      	adds	r3, r0, #4
 801710e:	e7f1      	b.n	80170f4 <__exponent+0x60>

08017110 <_printf_float>:
 8017110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017114:	b08b      	sub	sp, #44	; 0x2c
 8017116:	460c      	mov	r4, r1
 8017118:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801711c:	4616      	mov	r6, r2
 801711e:	461f      	mov	r7, r3
 8017120:	4605      	mov	r5, r0
 8017122:	f002 fdff 	bl	8019d24 <_localeconv_r>
 8017126:	f8d0 b000 	ldr.w	fp, [r0]
 801712a:	4658      	mov	r0, fp
 801712c:	f7e9 f8f0 	bl	8000310 <strlen>
 8017130:	2300      	movs	r3, #0
 8017132:	9308      	str	r3, [sp, #32]
 8017134:	f8d8 3000 	ldr.w	r3, [r8]
 8017138:	f894 9018 	ldrb.w	r9, [r4, #24]
 801713c:	6822      	ldr	r2, [r4, #0]
 801713e:	3307      	adds	r3, #7
 8017140:	f023 0307 	bic.w	r3, r3, #7
 8017144:	f103 0108 	add.w	r1, r3, #8
 8017148:	f8c8 1000 	str.w	r1, [r8]
 801714c:	4682      	mov	sl, r0
 801714e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017152:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8017156:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80173b8 <_printf_float+0x2a8>
 801715a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801715e:	eeb0 6bc0 	vabs.f64	d6, d0
 8017162:	eeb4 6b47 	vcmp.f64	d6, d7
 8017166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801716a:	dd24      	ble.n	80171b6 <_printf_float+0xa6>
 801716c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017174:	d502      	bpl.n	801717c <_printf_float+0x6c>
 8017176:	232d      	movs	r3, #45	; 0x2d
 8017178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801717c:	4b90      	ldr	r3, [pc, #576]	; (80173c0 <_printf_float+0x2b0>)
 801717e:	4891      	ldr	r0, [pc, #580]	; (80173c4 <_printf_float+0x2b4>)
 8017180:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017184:	bf94      	ite	ls
 8017186:	4698      	movls	r8, r3
 8017188:	4680      	movhi	r8, r0
 801718a:	2303      	movs	r3, #3
 801718c:	6123      	str	r3, [r4, #16]
 801718e:	f022 0204 	bic.w	r2, r2, #4
 8017192:	2300      	movs	r3, #0
 8017194:	6022      	str	r2, [r4, #0]
 8017196:	9304      	str	r3, [sp, #16]
 8017198:	9700      	str	r7, [sp, #0]
 801719a:	4633      	mov	r3, r6
 801719c:	aa09      	add	r2, sp, #36	; 0x24
 801719e:	4621      	mov	r1, r4
 80171a0:	4628      	mov	r0, r5
 80171a2:	f000 f9d3 	bl	801754c <_printf_common>
 80171a6:	3001      	adds	r0, #1
 80171a8:	f040 808a 	bne.w	80172c0 <_printf_float+0x1b0>
 80171ac:	f04f 30ff 	mov.w	r0, #4294967295
 80171b0:	b00b      	add	sp, #44	; 0x2c
 80171b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80171ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171be:	d709      	bvc.n	80171d4 <_printf_float+0xc4>
 80171c0:	ee10 3a90 	vmov	r3, s1
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	bfbc      	itt	lt
 80171c8:	232d      	movlt	r3, #45	; 0x2d
 80171ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80171ce:	487e      	ldr	r0, [pc, #504]	; (80173c8 <_printf_float+0x2b8>)
 80171d0:	4b7e      	ldr	r3, [pc, #504]	; (80173cc <_printf_float+0x2bc>)
 80171d2:	e7d5      	b.n	8017180 <_printf_float+0x70>
 80171d4:	6863      	ldr	r3, [r4, #4]
 80171d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80171da:	9104      	str	r1, [sp, #16]
 80171dc:	1c59      	adds	r1, r3, #1
 80171de:	d13c      	bne.n	801725a <_printf_float+0x14a>
 80171e0:	2306      	movs	r3, #6
 80171e2:	6063      	str	r3, [r4, #4]
 80171e4:	2300      	movs	r3, #0
 80171e6:	9303      	str	r3, [sp, #12]
 80171e8:	ab08      	add	r3, sp, #32
 80171ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80171ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80171f2:	ab07      	add	r3, sp, #28
 80171f4:	6861      	ldr	r1, [r4, #4]
 80171f6:	9300      	str	r3, [sp, #0]
 80171f8:	6022      	str	r2, [r4, #0]
 80171fa:	f10d 031b 	add.w	r3, sp, #27
 80171fe:	4628      	mov	r0, r5
 8017200:	f7ff fef6 	bl	8016ff0 <__cvt>
 8017204:	9b04      	ldr	r3, [sp, #16]
 8017206:	9907      	ldr	r1, [sp, #28]
 8017208:	2b47      	cmp	r3, #71	; 0x47
 801720a:	4680      	mov	r8, r0
 801720c:	d108      	bne.n	8017220 <_printf_float+0x110>
 801720e:	1cc8      	adds	r0, r1, #3
 8017210:	db02      	blt.n	8017218 <_printf_float+0x108>
 8017212:	6863      	ldr	r3, [r4, #4]
 8017214:	4299      	cmp	r1, r3
 8017216:	dd41      	ble.n	801729c <_printf_float+0x18c>
 8017218:	f1a9 0902 	sub.w	r9, r9, #2
 801721c:	fa5f f989 	uxtb.w	r9, r9
 8017220:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017224:	d820      	bhi.n	8017268 <_printf_float+0x158>
 8017226:	3901      	subs	r1, #1
 8017228:	464a      	mov	r2, r9
 801722a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801722e:	9107      	str	r1, [sp, #28]
 8017230:	f7ff ff30 	bl	8017094 <__exponent>
 8017234:	9a08      	ldr	r2, [sp, #32]
 8017236:	9004      	str	r0, [sp, #16]
 8017238:	1813      	adds	r3, r2, r0
 801723a:	2a01      	cmp	r2, #1
 801723c:	6123      	str	r3, [r4, #16]
 801723e:	dc02      	bgt.n	8017246 <_printf_float+0x136>
 8017240:	6822      	ldr	r2, [r4, #0]
 8017242:	07d2      	lsls	r2, r2, #31
 8017244:	d501      	bpl.n	801724a <_printf_float+0x13a>
 8017246:	3301      	adds	r3, #1
 8017248:	6123      	str	r3, [r4, #16]
 801724a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d0a2      	beq.n	8017198 <_printf_float+0x88>
 8017252:	232d      	movs	r3, #45	; 0x2d
 8017254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017258:	e79e      	b.n	8017198 <_printf_float+0x88>
 801725a:	9904      	ldr	r1, [sp, #16]
 801725c:	2947      	cmp	r1, #71	; 0x47
 801725e:	d1c1      	bne.n	80171e4 <_printf_float+0xd4>
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1bf      	bne.n	80171e4 <_printf_float+0xd4>
 8017264:	2301      	movs	r3, #1
 8017266:	e7bc      	b.n	80171e2 <_printf_float+0xd2>
 8017268:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801726c:	d118      	bne.n	80172a0 <_printf_float+0x190>
 801726e:	2900      	cmp	r1, #0
 8017270:	6863      	ldr	r3, [r4, #4]
 8017272:	dd0b      	ble.n	801728c <_printf_float+0x17c>
 8017274:	6121      	str	r1, [r4, #16]
 8017276:	b913      	cbnz	r3, 801727e <_printf_float+0x16e>
 8017278:	6822      	ldr	r2, [r4, #0]
 801727a:	07d0      	lsls	r0, r2, #31
 801727c:	d502      	bpl.n	8017284 <_printf_float+0x174>
 801727e:	3301      	adds	r3, #1
 8017280:	440b      	add	r3, r1
 8017282:	6123      	str	r3, [r4, #16]
 8017284:	2300      	movs	r3, #0
 8017286:	65a1      	str	r1, [r4, #88]	; 0x58
 8017288:	9304      	str	r3, [sp, #16]
 801728a:	e7de      	b.n	801724a <_printf_float+0x13a>
 801728c:	b913      	cbnz	r3, 8017294 <_printf_float+0x184>
 801728e:	6822      	ldr	r2, [r4, #0]
 8017290:	07d2      	lsls	r2, r2, #31
 8017292:	d501      	bpl.n	8017298 <_printf_float+0x188>
 8017294:	3302      	adds	r3, #2
 8017296:	e7f4      	b.n	8017282 <_printf_float+0x172>
 8017298:	2301      	movs	r3, #1
 801729a:	e7f2      	b.n	8017282 <_printf_float+0x172>
 801729c:	f04f 0967 	mov.w	r9, #103	; 0x67
 80172a0:	9b08      	ldr	r3, [sp, #32]
 80172a2:	4299      	cmp	r1, r3
 80172a4:	db05      	blt.n	80172b2 <_printf_float+0x1a2>
 80172a6:	6823      	ldr	r3, [r4, #0]
 80172a8:	6121      	str	r1, [r4, #16]
 80172aa:	07d8      	lsls	r0, r3, #31
 80172ac:	d5ea      	bpl.n	8017284 <_printf_float+0x174>
 80172ae:	1c4b      	adds	r3, r1, #1
 80172b0:	e7e7      	b.n	8017282 <_printf_float+0x172>
 80172b2:	2900      	cmp	r1, #0
 80172b4:	bfd4      	ite	le
 80172b6:	f1c1 0202 	rsble	r2, r1, #2
 80172ba:	2201      	movgt	r2, #1
 80172bc:	4413      	add	r3, r2
 80172be:	e7e0      	b.n	8017282 <_printf_float+0x172>
 80172c0:	6823      	ldr	r3, [r4, #0]
 80172c2:	055a      	lsls	r2, r3, #21
 80172c4:	d407      	bmi.n	80172d6 <_printf_float+0x1c6>
 80172c6:	6923      	ldr	r3, [r4, #16]
 80172c8:	4642      	mov	r2, r8
 80172ca:	4631      	mov	r1, r6
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b8      	blx	r7
 80172d0:	3001      	adds	r0, #1
 80172d2:	d12a      	bne.n	801732a <_printf_float+0x21a>
 80172d4:	e76a      	b.n	80171ac <_printf_float+0x9c>
 80172d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80172da:	f240 80e2 	bls.w	80174a2 <_printf_float+0x392>
 80172de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80172e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80172e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ea:	d133      	bne.n	8017354 <_printf_float+0x244>
 80172ec:	4a38      	ldr	r2, [pc, #224]	; (80173d0 <_printf_float+0x2c0>)
 80172ee:	2301      	movs	r3, #1
 80172f0:	4631      	mov	r1, r6
 80172f2:	4628      	mov	r0, r5
 80172f4:	47b8      	blx	r7
 80172f6:	3001      	adds	r0, #1
 80172f8:	f43f af58 	beq.w	80171ac <_printf_float+0x9c>
 80172fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017300:	429a      	cmp	r2, r3
 8017302:	db02      	blt.n	801730a <_printf_float+0x1fa>
 8017304:	6823      	ldr	r3, [r4, #0]
 8017306:	07d8      	lsls	r0, r3, #31
 8017308:	d50f      	bpl.n	801732a <_printf_float+0x21a>
 801730a:	4653      	mov	r3, sl
 801730c:	465a      	mov	r2, fp
 801730e:	4631      	mov	r1, r6
 8017310:	4628      	mov	r0, r5
 8017312:	47b8      	blx	r7
 8017314:	3001      	adds	r0, #1
 8017316:	f43f af49 	beq.w	80171ac <_printf_float+0x9c>
 801731a:	f04f 0800 	mov.w	r8, #0
 801731e:	f104 091a 	add.w	r9, r4, #26
 8017322:	9b08      	ldr	r3, [sp, #32]
 8017324:	3b01      	subs	r3, #1
 8017326:	4543      	cmp	r3, r8
 8017328:	dc09      	bgt.n	801733e <_printf_float+0x22e>
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	079b      	lsls	r3, r3, #30
 801732e:	f100 8108 	bmi.w	8017542 <_printf_float+0x432>
 8017332:	68e0      	ldr	r0, [r4, #12]
 8017334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017336:	4298      	cmp	r0, r3
 8017338:	bfb8      	it	lt
 801733a:	4618      	movlt	r0, r3
 801733c:	e738      	b.n	80171b0 <_printf_float+0xa0>
 801733e:	2301      	movs	r3, #1
 8017340:	464a      	mov	r2, r9
 8017342:	4631      	mov	r1, r6
 8017344:	4628      	mov	r0, r5
 8017346:	47b8      	blx	r7
 8017348:	3001      	adds	r0, #1
 801734a:	f43f af2f 	beq.w	80171ac <_printf_float+0x9c>
 801734e:	f108 0801 	add.w	r8, r8, #1
 8017352:	e7e6      	b.n	8017322 <_printf_float+0x212>
 8017354:	9b07      	ldr	r3, [sp, #28]
 8017356:	2b00      	cmp	r3, #0
 8017358:	dc3c      	bgt.n	80173d4 <_printf_float+0x2c4>
 801735a:	4a1d      	ldr	r2, [pc, #116]	; (80173d0 <_printf_float+0x2c0>)
 801735c:	2301      	movs	r3, #1
 801735e:	4631      	mov	r1, r6
 8017360:	4628      	mov	r0, r5
 8017362:	47b8      	blx	r7
 8017364:	3001      	adds	r0, #1
 8017366:	f43f af21 	beq.w	80171ac <_printf_float+0x9c>
 801736a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801736e:	4313      	orrs	r3, r2
 8017370:	d102      	bne.n	8017378 <_printf_float+0x268>
 8017372:	6823      	ldr	r3, [r4, #0]
 8017374:	07d9      	lsls	r1, r3, #31
 8017376:	d5d8      	bpl.n	801732a <_printf_float+0x21a>
 8017378:	4653      	mov	r3, sl
 801737a:	465a      	mov	r2, fp
 801737c:	4631      	mov	r1, r6
 801737e:	4628      	mov	r0, r5
 8017380:	47b8      	blx	r7
 8017382:	3001      	adds	r0, #1
 8017384:	f43f af12 	beq.w	80171ac <_printf_float+0x9c>
 8017388:	f04f 0900 	mov.w	r9, #0
 801738c:	f104 0a1a 	add.w	sl, r4, #26
 8017390:	9b07      	ldr	r3, [sp, #28]
 8017392:	425b      	negs	r3, r3
 8017394:	454b      	cmp	r3, r9
 8017396:	dc01      	bgt.n	801739c <_printf_float+0x28c>
 8017398:	9b08      	ldr	r3, [sp, #32]
 801739a:	e795      	b.n	80172c8 <_printf_float+0x1b8>
 801739c:	2301      	movs	r3, #1
 801739e:	4652      	mov	r2, sl
 80173a0:	4631      	mov	r1, r6
 80173a2:	4628      	mov	r0, r5
 80173a4:	47b8      	blx	r7
 80173a6:	3001      	adds	r0, #1
 80173a8:	f43f af00 	beq.w	80171ac <_printf_float+0x9c>
 80173ac:	f109 0901 	add.w	r9, r9, #1
 80173b0:	e7ee      	b.n	8017390 <_printf_float+0x280>
 80173b2:	bf00      	nop
 80173b4:	f3af 8000 	nop.w
 80173b8:	ffffffff 	.word	0xffffffff
 80173bc:	7fefffff 	.word	0x7fefffff
 80173c0:	0801c830 	.word	0x0801c830
 80173c4:	0801c834 	.word	0x0801c834
 80173c8:	0801c83c 	.word	0x0801c83c
 80173cc:	0801c838 	.word	0x0801c838
 80173d0:	0801c840 	.word	0x0801c840
 80173d4:	9a08      	ldr	r2, [sp, #32]
 80173d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173d8:	429a      	cmp	r2, r3
 80173da:	bfa8      	it	ge
 80173dc:	461a      	movge	r2, r3
 80173de:	2a00      	cmp	r2, #0
 80173e0:	4691      	mov	r9, r2
 80173e2:	dc38      	bgt.n	8017456 <_printf_float+0x346>
 80173e4:	2300      	movs	r3, #0
 80173e6:	9305      	str	r3, [sp, #20]
 80173e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173ec:	f104 021a 	add.w	r2, r4, #26
 80173f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173f2:	9905      	ldr	r1, [sp, #20]
 80173f4:	9304      	str	r3, [sp, #16]
 80173f6:	eba3 0309 	sub.w	r3, r3, r9
 80173fa:	428b      	cmp	r3, r1
 80173fc:	dc33      	bgt.n	8017466 <_printf_float+0x356>
 80173fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017402:	429a      	cmp	r2, r3
 8017404:	db3c      	blt.n	8017480 <_printf_float+0x370>
 8017406:	6823      	ldr	r3, [r4, #0]
 8017408:	07da      	lsls	r2, r3, #31
 801740a:	d439      	bmi.n	8017480 <_printf_float+0x370>
 801740c:	9b08      	ldr	r3, [sp, #32]
 801740e:	9a04      	ldr	r2, [sp, #16]
 8017410:	9907      	ldr	r1, [sp, #28]
 8017412:	1a9a      	subs	r2, r3, r2
 8017414:	eba3 0901 	sub.w	r9, r3, r1
 8017418:	4591      	cmp	r9, r2
 801741a:	bfa8      	it	ge
 801741c:	4691      	movge	r9, r2
 801741e:	f1b9 0f00 	cmp.w	r9, #0
 8017422:	dc35      	bgt.n	8017490 <_printf_float+0x380>
 8017424:	f04f 0800 	mov.w	r8, #0
 8017428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801742c:	f104 0a1a 	add.w	sl, r4, #26
 8017430:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017434:	1a9b      	subs	r3, r3, r2
 8017436:	eba3 0309 	sub.w	r3, r3, r9
 801743a:	4543      	cmp	r3, r8
 801743c:	f77f af75 	ble.w	801732a <_printf_float+0x21a>
 8017440:	2301      	movs	r3, #1
 8017442:	4652      	mov	r2, sl
 8017444:	4631      	mov	r1, r6
 8017446:	4628      	mov	r0, r5
 8017448:	47b8      	blx	r7
 801744a:	3001      	adds	r0, #1
 801744c:	f43f aeae 	beq.w	80171ac <_printf_float+0x9c>
 8017450:	f108 0801 	add.w	r8, r8, #1
 8017454:	e7ec      	b.n	8017430 <_printf_float+0x320>
 8017456:	4613      	mov	r3, r2
 8017458:	4631      	mov	r1, r6
 801745a:	4642      	mov	r2, r8
 801745c:	4628      	mov	r0, r5
 801745e:	47b8      	blx	r7
 8017460:	3001      	adds	r0, #1
 8017462:	d1bf      	bne.n	80173e4 <_printf_float+0x2d4>
 8017464:	e6a2      	b.n	80171ac <_printf_float+0x9c>
 8017466:	2301      	movs	r3, #1
 8017468:	4631      	mov	r1, r6
 801746a:	4628      	mov	r0, r5
 801746c:	9204      	str	r2, [sp, #16]
 801746e:	47b8      	blx	r7
 8017470:	3001      	adds	r0, #1
 8017472:	f43f ae9b 	beq.w	80171ac <_printf_float+0x9c>
 8017476:	9b05      	ldr	r3, [sp, #20]
 8017478:	9a04      	ldr	r2, [sp, #16]
 801747a:	3301      	adds	r3, #1
 801747c:	9305      	str	r3, [sp, #20]
 801747e:	e7b7      	b.n	80173f0 <_printf_float+0x2e0>
 8017480:	4653      	mov	r3, sl
 8017482:	465a      	mov	r2, fp
 8017484:	4631      	mov	r1, r6
 8017486:	4628      	mov	r0, r5
 8017488:	47b8      	blx	r7
 801748a:	3001      	adds	r0, #1
 801748c:	d1be      	bne.n	801740c <_printf_float+0x2fc>
 801748e:	e68d      	b.n	80171ac <_printf_float+0x9c>
 8017490:	9a04      	ldr	r2, [sp, #16]
 8017492:	464b      	mov	r3, r9
 8017494:	4442      	add	r2, r8
 8017496:	4631      	mov	r1, r6
 8017498:	4628      	mov	r0, r5
 801749a:	47b8      	blx	r7
 801749c:	3001      	adds	r0, #1
 801749e:	d1c1      	bne.n	8017424 <_printf_float+0x314>
 80174a0:	e684      	b.n	80171ac <_printf_float+0x9c>
 80174a2:	9a08      	ldr	r2, [sp, #32]
 80174a4:	2a01      	cmp	r2, #1
 80174a6:	dc01      	bgt.n	80174ac <_printf_float+0x39c>
 80174a8:	07db      	lsls	r3, r3, #31
 80174aa:	d537      	bpl.n	801751c <_printf_float+0x40c>
 80174ac:	2301      	movs	r3, #1
 80174ae:	4642      	mov	r2, r8
 80174b0:	4631      	mov	r1, r6
 80174b2:	4628      	mov	r0, r5
 80174b4:	47b8      	blx	r7
 80174b6:	3001      	adds	r0, #1
 80174b8:	f43f ae78 	beq.w	80171ac <_printf_float+0x9c>
 80174bc:	4653      	mov	r3, sl
 80174be:	465a      	mov	r2, fp
 80174c0:	4631      	mov	r1, r6
 80174c2:	4628      	mov	r0, r5
 80174c4:	47b8      	blx	r7
 80174c6:	3001      	adds	r0, #1
 80174c8:	f43f ae70 	beq.w	80171ac <_printf_float+0x9c>
 80174cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80174d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80174d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d8:	d01b      	beq.n	8017512 <_printf_float+0x402>
 80174da:	9b08      	ldr	r3, [sp, #32]
 80174dc:	f108 0201 	add.w	r2, r8, #1
 80174e0:	3b01      	subs	r3, #1
 80174e2:	4631      	mov	r1, r6
 80174e4:	4628      	mov	r0, r5
 80174e6:	47b8      	blx	r7
 80174e8:	3001      	adds	r0, #1
 80174ea:	d10e      	bne.n	801750a <_printf_float+0x3fa>
 80174ec:	e65e      	b.n	80171ac <_printf_float+0x9c>
 80174ee:	2301      	movs	r3, #1
 80174f0:	464a      	mov	r2, r9
 80174f2:	4631      	mov	r1, r6
 80174f4:	4628      	mov	r0, r5
 80174f6:	47b8      	blx	r7
 80174f8:	3001      	adds	r0, #1
 80174fa:	f43f ae57 	beq.w	80171ac <_printf_float+0x9c>
 80174fe:	f108 0801 	add.w	r8, r8, #1
 8017502:	9b08      	ldr	r3, [sp, #32]
 8017504:	3b01      	subs	r3, #1
 8017506:	4543      	cmp	r3, r8
 8017508:	dcf1      	bgt.n	80174ee <_printf_float+0x3de>
 801750a:	9b04      	ldr	r3, [sp, #16]
 801750c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017510:	e6db      	b.n	80172ca <_printf_float+0x1ba>
 8017512:	f04f 0800 	mov.w	r8, #0
 8017516:	f104 091a 	add.w	r9, r4, #26
 801751a:	e7f2      	b.n	8017502 <_printf_float+0x3f2>
 801751c:	2301      	movs	r3, #1
 801751e:	4642      	mov	r2, r8
 8017520:	e7df      	b.n	80174e2 <_printf_float+0x3d2>
 8017522:	2301      	movs	r3, #1
 8017524:	464a      	mov	r2, r9
 8017526:	4631      	mov	r1, r6
 8017528:	4628      	mov	r0, r5
 801752a:	47b8      	blx	r7
 801752c:	3001      	adds	r0, #1
 801752e:	f43f ae3d 	beq.w	80171ac <_printf_float+0x9c>
 8017532:	f108 0801 	add.w	r8, r8, #1
 8017536:	68e3      	ldr	r3, [r4, #12]
 8017538:	9909      	ldr	r1, [sp, #36]	; 0x24
 801753a:	1a5b      	subs	r3, r3, r1
 801753c:	4543      	cmp	r3, r8
 801753e:	dcf0      	bgt.n	8017522 <_printf_float+0x412>
 8017540:	e6f7      	b.n	8017332 <_printf_float+0x222>
 8017542:	f04f 0800 	mov.w	r8, #0
 8017546:	f104 0919 	add.w	r9, r4, #25
 801754a:	e7f4      	b.n	8017536 <_printf_float+0x426>

0801754c <_printf_common>:
 801754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017550:	4616      	mov	r6, r2
 8017552:	4699      	mov	r9, r3
 8017554:	688a      	ldr	r2, [r1, #8]
 8017556:	690b      	ldr	r3, [r1, #16]
 8017558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801755c:	4293      	cmp	r3, r2
 801755e:	bfb8      	it	lt
 8017560:	4613      	movlt	r3, r2
 8017562:	6033      	str	r3, [r6, #0]
 8017564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017568:	4607      	mov	r7, r0
 801756a:	460c      	mov	r4, r1
 801756c:	b10a      	cbz	r2, 8017572 <_printf_common+0x26>
 801756e:	3301      	adds	r3, #1
 8017570:	6033      	str	r3, [r6, #0]
 8017572:	6823      	ldr	r3, [r4, #0]
 8017574:	0699      	lsls	r1, r3, #26
 8017576:	bf42      	ittt	mi
 8017578:	6833      	ldrmi	r3, [r6, #0]
 801757a:	3302      	addmi	r3, #2
 801757c:	6033      	strmi	r3, [r6, #0]
 801757e:	6825      	ldr	r5, [r4, #0]
 8017580:	f015 0506 	ands.w	r5, r5, #6
 8017584:	d106      	bne.n	8017594 <_printf_common+0x48>
 8017586:	f104 0a19 	add.w	sl, r4, #25
 801758a:	68e3      	ldr	r3, [r4, #12]
 801758c:	6832      	ldr	r2, [r6, #0]
 801758e:	1a9b      	subs	r3, r3, r2
 8017590:	42ab      	cmp	r3, r5
 8017592:	dc26      	bgt.n	80175e2 <_printf_common+0x96>
 8017594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017598:	1e13      	subs	r3, r2, #0
 801759a:	6822      	ldr	r2, [r4, #0]
 801759c:	bf18      	it	ne
 801759e:	2301      	movne	r3, #1
 80175a0:	0692      	lsls	r2, r2, #26
 80175a2:	d42b      	bmi.n	80175fc <_printf_common+0xb0>
 80175a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175a8:	4649      	mov	r1, r9
 80175aa:	4638      	mov	r0, r7
 80175ac:	47c0      	blx	r8
 80175ae:	3001      	adds	r0, #1
 80175b0:	d01e      	beq.n	80175f0 <_printf_common+0xa4>
 80175b2:	6823      	ldr	r3, [r4, #0]
 80175b4:	68e5      	ldr	r5, [r4, #12]
 80175b6:	6832      	ldr	r2, [r6, #0]
 80175b8:	f003 0306 	and.w	r3, r3, #6
 80175bc:	2b04      	cmp	r3, #4
 80175be:	bf08      	it	eq
 80175c0:	1aad      	subeq	r5, r5, r2
 80175c2:	68a3      	ldr	r3, [r4, #8]
 80175c4:	6922      	ldr	r2, [r4, #16]
 80175c6:	bf0c      	ite	eq
 80175c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175cc:	2500      	movne	r5, #0
 80175ce:	4293      	cmp	r3, r2
 80175d0:	bfc4      	itt	gt
 80175d2:	1a9b      	subgt	r3, r3, r2
 80175d4:	18ed      	addgt	r5, r5, r3
 80175d6:	2600      	movs	r6, #0
 80175d8:	341a      	adds	r4, #26
 80175da:	42b5      	cmp	r5, r6
 80175dc:	d11a      	bne.n	8017614 <_printf_common+0xc8>
 80175de:	2000      	movs	r0, #0
 80175e0:	e008      	b.n	80175f4 <_printf_common+0xa8>
 80175e2:	2301      	movs	r3, #1
 80175e4:	4652      	mov	r2, sl
 80175e6:	4649      	mov	r1, r9
 80175e8:	4638      	mov	r0, r7
 80175ea:	47c0      	blx	r8
 80175ec:	3001      	adds	r0, #1
 80175ee:	d103      	bne.n	80175f8 <_printf_common+0xac>
 80175f0:	f04f 30ff 	mov.w	r0, #4294967295
 80175f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f8:	3501      	adds	r5, #1
 80175fa:	e7c6      	b.n	801758a <_printf_common+0x3e>
 80175fc:	18e1      	adds	r1, r4, r3
 80175fe:	1c5a      	adds	r2, r3, #1
 8017600:	2030      	movs	r0, #48	; 0x30
 8017602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017606:	4422      	add	r2, r4
 8017608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801760c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017610:	3302      	adds	r3, #2
 8017612:	e7c7      	b.n	80175a4 <_printf_common+0x58>
 8017614:	2301      	movs	r3, #1
 8017616:	4622      	mov	r2, r4
 8017618:	4649      	mov	r1, r9
 801761a:	4638      	mov	r0, r7
 801761c:	47c0      	blx	r8
 801761e:	3001      	adds	r0, #1
 8017620:	d0e6      	beq.n	80175f0 <_printf_common+0xa4>
 8017622:	3601      	adds	r6, #1
 8017624:	e7d9      	b.n	80175da <_printf_common+0x8e>
	...

08017628 <_printf_i>:
 8017628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801762c:	7e0f      	ldrb	r7, [r1, #24]
 801762e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017630:	2f78      	cmp	r7, #120	; 0x78
 8017632:	4691      	mov	r9, r2
 8017634:	4680      	mov	r8, r0
 8017636:	460c      	mov	r4, r1
 8017638:	469a      	mov	sl, r3
 801763a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801763e:	d807      	bhi.n	8017650 <_printf_i+0x28>
 8017640:	2f62      	cmp	r7, #98	; 0x62
 8017642:	d80a      	bhi.n	801765a <_printf_i+0x32>
 8017644:	2f00      	cmp	r7, #0
 8017646:	f000 80d8 	beq.w	80177fa <_printf_i+0x1d2>
 801764a:	2f58      	cmp	r7, #88	; 0x58
 801764c:	f000 80a3 	beq.w	8017796 <_printf_i+0x16e>
 8017650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017658:	e03a      	b.n	80176d0 <_printf_i+0xa8>
 801765a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801765e:	2b15      	cmp	r3, #21
 8017660:	d8f6      	bhi.n	8017650 <_printf_i+0x28>
 8017662:	a101      	add	r1, pc, #4	; (adr r1, 8017668 <_printf_i+0x40>)
 8017664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017668:	080176c1 	.word	0x080176c1
 801766c:	080176d5 	.word	0x080176d5
 8017670:	08017651 	.word	0x08017651
 8017674:	08017651 	.word	0x08017651
 8017678:	08017651 	.word	0x08017651
 801767c:	08017651 	.word	0x08017651
 8017680:	080176d5 	.word	0x080176d5
 8017684:	08017651 	.word	0x08017651
 8017688:	08017651 	.word	0x08017651
 801768c:	08017651 	.word	0x08017651
 8017690:	08017651 	.word	0x08017651
 8017694:	080177e1 	.word	0x080177e1
 8017698:	08017705 	.word	0x08017705
 801769c:	080177c3 	.word	0x080177c3
 80176a0:	08017651 	.word	0x08017651
 80176a4:	08017651 	.word	0x08017651
 80176a8:	08017803 	.word	0x08017803
 80176ac:	08017651 	.word	0x08017651
 80176b0:	08017705 	.word	0x08017705
 80176b4:	08017651 	.word	0x08017651
 80176b8:	08017651 	.word	0x08017651
 80176bc:	080177cb 	.word	0x080177cb
 80176c0:	682b      	ldr	r3, [r5, #0]
 80176c2:	1d1a      	adds	r2, r3, #4
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	602a      	str	r2, [r5, #0]
 80176c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176d0:	2301      	movs	r3, #1
 80176d2:	e0a3      	b.n	801781c <_printf_i+0x1f4>
 80176d4:	6820      	ldr	r0, [r4, #0]
 80176d6:	6829      	ldr	r1, [r5, #0]
 80176d8:	0606      	lsls	r6, r0, #24
 80176da:	f101 0304 	add.w	r3, r1, #4
 80176de:	d50a      	bpl.n	80176f6 <_printf_i+0xce>
 80176e0:	680e      	ldr	r6, [r1, #0]
 80176e2:	602b      	str	r3, [r5, #0]
 80176e4:	2e00      	cmp	r6, #0
 80176e6:	da03      	bge.n	80176f0 <_printf_i+0xc8>
 80176e8:	232d      	movs	r3, #45	; 0x2d
 80176ea:	4276      	negs	r6, r6
 80176ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176f0:	485e      	ldr	r0, [pc, #376]	; (801786c <_printf_i+0x244>)
 80176f2:	230a      	movs	r3, #10
 80176f4:	e019      	b.n	801772a <_printf_i+0x102>
 80176f6:	680e      	ldr	r6, [r1, #0]
 80176f8:	602b      	str	r3, [r5, #0]
 80176fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80176fe:	bf18      	it	ne
 8017700:	b236      	sxthne	r6, r6
 8017702:	e7ef      	b.n	80176e4 <_printf_i+0xbc>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	6820      	ldr	r0, [r4, #0]
 8017708:	1d19      	adds	r1, r3, #4
 801770a:	6029      	str	r1, [r5, #0]
 801770c:	0601      	lsls	r1, r0, #24
 801770e:	d501      	bpl.n	8017714 <_printf_i+0xec>
 8017710:	681e      	ldr	r6, [r3, #0]
 8017712:	e002      	b.n	801771a <_printf_i+0xf2>
 8017714:	0646      	lsls	r6, r0, #25
 8017716:	d5fb      	bpl.n	8017710 <_printf_i+0xe8>
 8017718:	881e      	ldrh	r6, [r3, #0]
 801771a:	4854      	ldr	r0, [pc, #336]	; (801786c <_printf_i+0x244>)
 801771c:	2f6f      	cmp	r7, #111	; 0x6f
 801771e:	bf0c      	ite	eq
 8017720:	2308      	moveq	r3, #8
 8017722:	230a      	movne	r3, #10
 8017724:	2100      	movs	r1, #0
 8017726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801772a:	6865      	ldr	r5, [r4, #4]
 801772c:	60a5      	str	r5, [r4, #8]
 801772e:	2d00      	cmp	r5, #0
 8017730:	bfa2      	ittt	ge
 8017732:	6821      	ldrge	r1, [r4, #0]
 8017734:	f021 0104 	bicge.w	r1, r1, #4
 8017738:	6021      	strge	r1, [r4, #0]
 801773a:	b90e      	cbnz	r6, 8017740 <_printf_i+0x118>
 801773c:	2d00      	cmp	r5, #0
 801773e:	d04d      	beq.n	80177dc <_printf_i+0x1b4>
 8017740:	4615      	mov	r5, r2
 8017742:	fbb6 f1f3 	udiv	r1, r6, r3
 8017746:	fb03 6711 	mls	r7, r3, r1, r6
 801774a:	5dc7      	ldrb	r7, [r0, r7]
 801774c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017750:	4637      	mov	r7, r6
 8017752:	42bb      	cmp	r3, r7
 8017754:	460e      	mov	r6, r1
 8017756:	d9f4      	bls.n	8017742 <_printf_i+0x11a>
 8017758:	2b08      	cmp	r3, #8
 801775a:	d10b      	bne.n	8017774 <_printf_i+0x14c>
 801775c:	6823      	ldr	r3, [r4, #0]
 801775e:	07de      	lsls	r6, r3, #31
 8017760:	d508      	bpl.n	8017774 <_printf_i+0x14c>
 8017762:	6923      	ldr	r3, [r4, #16]
 8017764:	6861      	ldr	r1, [r4, #4]
 8017766:	4299      	cmp	r1, r3
 8017768:	bfde      	ittt	le
 801776a:	2330      	movle	r3, #48	; 0x30
 801776c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017774:	1b52      	subs	r2, r2, r5
 8017776:	6122      	str	r2, [r4, #16]
 8017778:	f8cd a000 	str.w	sl, [sp]
 801777c:	464b      	mov	r3, r9
 801777e:	aa03      	add	r2, sp, #12
 8017780:	4621      	mov	r1, r4
 8017782:	4640      	mov	r0, r8
 8017784:	f7ff fee2 	bl	801754c <_printf_common>
 8017788:	3001      	adds	r0, #1
 801778a:	d14c      	bne.n	8017826 <_printf_i+0x1fe>
 801778c:	f04f 30ff 	mov.w	r0, #4294967295
 8017790:	b004      	add	sp, #16
 8017792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017796:	4835      	ldr	r0, [pc, #212]	; (801786c <_printf_i+0x244>)
 8017798:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801779c:	6829      	ldr	r1, [r5, #0]
 801779e:	6823      	ldr	r3, [r4, #0]
 80177a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80177a4:	6029      	str	r1, [r5, #0]
 80177a6:	061d      	lsls	r5, r3, #24
 80177a8:	d514      	bpl.n	80177d4 <_printf_i+0x1ac>
 80177aa:	07df      	lsls	r7, r3, #31
 80177ac:	bf44      	itt	mi
 80177ae:	f043 0320 	orrmi.w	r3, r3, #32
 80177b2:	6023      	strmi	r3, [r4, #0]
 80177b4:	b91e      	cbnz	r6, 80177be <_printf_i+0x196>
 80177b6:	6823      	ldr	r3, [r4, #0]
 80177b8:	f023 0320 	bic.w	r3, r3, #32
 80177bc:	6023      	str	r3, [r4, #0]
 80177be:	2310      	movs	r3, #16
 80177c0:	e7b0      	b.n	8017724 <_printf_i+0xfc>
 80177c2:	6823      	ldr	r3, [r4, #0]
 80177c4:	f043 0320 	orr.w	r3, r3, #32
 80177c8:	6023      	str	r3, [r4, #0]
 80177ca:	2378      	movs	r3, #120	; 0x78
 80177cc:	4828      	ldr	r0, [pc, #160]	; (8017870 <_printf_i+0x248>)
 80177ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80177d2:	e7e3      	b.n	801779c <_printf_i+0x174>
 80177d4:	0659      	lsls	r1, r3, #25
 80177d6:	bf48      	it	mi
 80177d8:	b2b6      	uxthmi	r6, r6
 80177da:	e7e6      	b.n	80177aa <_printf_i+0x182>
 80177dc:	4615      	mov	r5, r2
 80177de:	e7bb      	b.n	8017758 <_printf_i+0x130>
 80177e0:	682b      	ldr	r3, [r5, #0]
 80177e2:	6826      	ldr	r6, [r4, #0]
 80177e4:	6961      	ldr	r1, [r4, #20]
 80177e6:	1d18      	adds	r0, r3, #4
 80177e8:	6028      	str	r0, [r5, #0]
 80177ea:	0635      	lsls	r5, r6, #24
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	d501      	bpl.n	80177f4 <_printf_i+0x1cc>
 80177f0:	6019      	str	r1, [r3, #0]
 80177f2:	e002      	b.n	80177fa <_printf_i+0x1d2>
 80177f4:	0670      	lsls	r0, r6, #25
 80177f6:	d5fb      	bpl.n	80177f0 <_printf_i+0x1c8>
 80177f8:	8019      	strh	r1, [r3, #0]
 80177fa:	2300      	movs	r3, #0
 80177fc:	6123      	str	r3, [r4, #16]
 80177fe:	4615      	mov	r5, r2
 8017800:	e7ba      	b.n	8017778 <_printf_i+0x150>
 8017802:	682b      	ldr	r3, [r5, #0]
 8017804:	1d1a      	adds	r2, r3, #4
 8017806:	602a      	str	r2, [r5, #0]
 8017808:	681d      	ldr	r5, [r3, #0]
 801780a:	6862      	ldr	r2, [r4, #4]
 801780c:	2100      	movs	r1, #0
 801780e:	4628      	mov	r0, r5
 8017810:	f7e8 fd86 	bl	8000320 <memchr>
 8017814:	b108      	cbz	r0, 801781a <_printf_i+0x1f2>
 8017816:	1b40      	subs	r0, r0, r5
 8017818:	6060      	str	r0, [r4, #4]
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	6123      	str	r3, [r4, #16]
 801781e:	2300      	movs	r3, #0
 8017820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017824:	e7a8      	b.n	8017778 <_printf_i+0x150>
 8017826:	6923      	ldr	r3, [r4, #16]
 8017828:	462a      	mov	r2, r5
 801782a:	4649      	mov	r1, r9
 801782c:	4640      	mov	r0, r8
 801782e:	47d0      	blx	sl
 8017830:	3001      	adds	r0, #1
 8017832:	d0ab      	beq.n	801778c <_printf_i+0x164>
 8017834:	6823      	ldr	r3, [r4, #0]
 8017836:	079b      	lsls	r3, r3, #30
 8017838:	d413      	bmi.n	8017862 <_printf_i+0x23a>
 801783a:	68e0      	ldr	r0, [r4, #12]
 801783c:	9b03      	ldr	r3, [sp, #12]
 801783e:	4298      	cmp	r0, r3
 8017840:	bfb8      	it	lt
 8017842:	4618      	movlt	r0, r3
 8017844:	e7a4      	b.n	8017790 <_printf_i+0x168>
 8017846:	2301      	movs	r3, #1
 8017848:	4632      	mov	r2, r6
 801784a:	4649      	mov	r1, r9
 801784c:	4640      	mov	r0, r8
 801784e:	47d0      	blx	sl
 8017850:	3001      	adds	r0, #1
 8017852:	d09b      	beq.n	801778c <_printf_i+0x164>
 8017854:	3501      	adds	r5, #1
 8017856:	68e3      	ldr	r3, [r4, #12]
 8017858:	9903      	ldr	r1, [sp, #12]
 801785a:	1a5b      	subs	r3, r3, r1
 801785c:	42ab      	cmp	r3, r5
 801785e:	dcf2      	bgt.n	8017846 <_printf_i+0x21e>
 8017860:	e7eb      	b.n	801783a <_printf_i+0x212>
 8017862:	2500      	movs	r5, #0
 8017864:	f104 0619 	add.w	r6, r4, #25
 8017868:	e7f5      	b.n	8017856 <_printf_i+0x22e>
 801786a:	bf00      	nop
 801786c:	0801c842 	.word	0x0801c842
 8017870:	0801c853 	.word	0x0801c853

08017874 <_scanf_float>:
 8017874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017878:	b087      	sub	sp, #28
 801787a:	4617      	mov	r7, r2
 801787c:	9303      	str	r3, [sp, #12]
 801787e:	688b      	ldr	r3, [r1, #8]
 8017880:	1e5a      	subs	r2, r3, #1
 8017882:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017886:	bf83      	ittte	hi
 8017888:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801788c:	195b      	addhi	r3, r3, r5
 801788e:	9302      	strhi	r3, [sp, #8]
 8017890:	2300      	movls	r3, #0
 8017892:	bf86      	itte	hi
 8017894:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017898:	608b      	strhi	r3, [r1, #8]
 801789a:	9302      	strls	r3, [sp, #8]
 801789c:	680b      	ldr	r3, [r1, #0]
 801789e:	468b      	mov	fp, r1
 80178a0:	2500      	movs	r5, #0
 80178a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80178a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80178aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80178ae:	4680      	mov	r8, r0
 80178b0:	460c      	mov	r4, r1
 80178b2:	465e      	mov	r6, fp
 80178b4:	46aa      	mov	sl, r5
 80178b6:	46a9      	mov	r9, r5
 80178b8:	9501      	str	r5, [sp, #4]
 80178ba:	68a2      	ldr	r2, [r4, #8]
 80178bc:	b152      	cbz	r2, 80178d4 <_scanf_float+0x60>
 80178be:	683b      	ldr	r3, [r7, #0]
 80178c0:	781b      	ldrb	r3, [r3, #0]
 80178c2:	2b4e      	cmp	r3, #78	; 0x4e
 80178c4:	d864      	bhi.n	8017990 <_scanf_float+0x11c>
 80178c6:	2b40      	cmp	r3, #64	; 0x40
 80178c8:	d83c      	bhi.n	8017944 <_scanf_float+0xd0>
 80178ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80178ce:	b2c8      	uxtb	r0, r1
 80178d0:	280e      	cmp	r0, #14
 80178d2:	d93a      	bls.n	801794a <_scanf_float+0xd6>
 80178d4:	f1b9 0f00 	cmp.w	r9, #0
 80178d8:	d003      	beq.n	80178e2 <_scanf_float+0x6e>
 80178da:	6823      	ldr	r3, [r4, #0]
 80178dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80178e0:	6023      	str	r3, [r4, #0]
 80178e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80178e6:	f1ba 0f01 	cmp.w	sl, #1
 80178ea:	f200 8113 	bhi.w	8017b14 <_scanf_float+0x2a0>
 80178ee:	455e      	cmp	r6, fp
 80178f0:	f200 8105 	bhi.w	8017afe <_scanf_float+0x28a>
 80178f4:	2501      	movs	r5, #1
 80178f6:	4628      	mov	r0, r5
 80178f8:	b007      	add	sp, #28
 80178fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017902:	2a0d      	cmp	r2, #13
 8017904:	d8e6      	bhi.n	80178d4 <_scanf_float+0x60>
 8017906:	a101      	add	r1, pc, #4	; (adr r1, 801790c <_scanf_float+0x98>)
 8017908:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801790c:	08017a4b 	.word	0x08017a4b
 8017910:	080178d5 	.word	0x080178d5
 8017914:	080178d5 	.word	0x080178d5
 8017918:	080178d5 	.word	0x080178d5
 801791c:	08017aab 	.word	0x08017aab
 8017920:	08017a83 	.word	0x08017a83
 8017924:	080178d5 	.word	0x080178d5
 8017928:	080178d5 	.word	0x080178d5
 801792c:	08017a59 	.word	0x08017a59
 8017930:	080178d5 	.word	0x080178d5
 8017934:	080178d5 	.word	0x080178d5
 8017938:	080178d5 	.word	0x080178d5
 801793c:	080178d5 	.word	0x080178d5
 8017940:	08017a11 	.word	0x08017a11
 8017944:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017948:	e7db      	b.n	8017902 <_scanf_float+0x8e>
 801794a:	290e      	cmp	r1, #14
 801794c:	d8c2      	bhi.n	80178d4 <_scanf_float+0x60>
 801794e:	a001      	add	r0, pc, #4	; (adr r0, 8017954 <_scanf_float+0xe0>)
 8017950:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017954:	08017a03 	.word	0x08017a03
 8017958:	080178d5 	.word	0x080178d5
 801795c:	08017a03 	.word	0x08017a03
 8017960:	08017a97 	.word	0x08017a97
 8017964:	080178d5 	.word	0x080178d5
 8017968:	080179b1 	.word	0x080179b1
 801796c:	080179ed 	.word	0x080179ed
 8017970:	080179ed 	.word	0x080179ed
 8017974:	080179ed 	.word	0x080179ed
 8017978:	080179ed 	.word	0x080179ed
 801797c:	080179ed 	.word	0x080179ed
 8017980:	080179ed 	.word	0x080179ed
 8017984:	080179ed 	.word	0x080179ed
 8017988:	080179ed 	.word	0x080179ed
 801798c:	080179ed 	.word	0x080179ed
 8017990:	2b6e      	cmp	r3, #110	; 0x6e
 8017992:	d809      	bhi.n	80179a8 <_scanf_float+0x134>
 8017994:	2b60      	cmp	r3, #96	; 0x60
 8017996:	d8b2      	bhi.n	80178fe <_scanf_float+0x8a>
 8017998:	2b54      	cmp	r3, #84	; 0x54
 801799a:	d077      	beq.n	8017a8c <_scanf_float+0x218>
 801799c:	2b59      	cmp	r3, #89	; 0x59
 801799e:	d199      	bne.n	80178d4 <_scanf_float+0x60>
 80179a0:	2d07      	cmp	r5, #7
 80179a2:	d197      	bne.n	80178d4 <_scanf_float+0x60>
 80179a4:	2508      	movs	r5, #8
 80179a6:	e029      	b.n	80179fc <_scanf_float+0x188>
 80179a8:	2b74      	cmp	r3, #116	; 0x74
 80179aa:	d06f      	beq.n	8017a8c <_scanf_float+0x218>
 80179ac:	2b79      	cmp	r3, #121	; 0x79
 80179ae:	e7f6      	b.n	801799e <_scanf_float+0x12a>
 80179b0:	6821      	ldr	r1, [r4, #0]
 80179b2:	05c8      	lsls	r0, r1, #23
 80179b4:	d51a      	bpl.n	80179ec <_scanf_float+0x178>
 80179b6:	9b02      	ldr	r3, [sp, #8]
 80179b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80179bc:	6021      	str	r1, [r4, #0]
 80179be:	f109 0901 	add.w	r9, r9, #1
 80179c2:	b11b      	cbz	r3, 80179cc <_scanf_float+0x158>
 80179c4:	3b01      	subs	r3, #1
 80179c6:	3201      	adds	r2, #1
 80179c8:	9302      	str	r3, [sp, #8]
 80179ca:	60a2      	str	r2, [r4, #8]
 80179cc:	68a3      	ldr	r3, [r4, #8]
 80179ce:	3b01      	subs	r3, #1
 80179d0:	60a3      	str	r3, [r4, #8]
 80179d2:	6923      	ldr	r3, [r4, #16]
 80179d4:	3301      	adds	r3, #1
 80179d6:	6123      	str	r3, [r4, #16]
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	3b01      	subs	r3, #1
 80179dc:	2b00      	cmp	r3, #0
 80179de:	607b      	str	r3, [r7, #4]
 80179e0:	f340 8084 	ble.w	8017aec <_scanf_float+0x278>
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	3301      	adds	r3, #1
 80179e8:	603b      	str	r3, [r7, #0]
 80179ea:	e766      	b.n	80178ba <_scanf_float+0x46>
 80179ec:	eb1a 0f05 	cmn.w	sl, r5
 80179f0:	f47f af70 	bne.w	80178d4 <_scanf_float+0x60>
 80179f4:	6822      	ldr	r2, [r4, #0]
 80179f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80179fa:	6022      	str	r2, [r4, #0]
 80179fc:	f806 3b01 	strb.w	r3, [r6], #1
 8017a00:	e7e4      	b.n	80179cc <_scanf_float+0x158>
 8017a02:	6822      	ldr	r2, [r4, #0]
 8017a04:	0610      	lsls	r0, r2, #24
 8017a06:	f57f af65 	bpl.w	80178d4 <_scanf_float+0x60>
 8017a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017a0e:	e7f4      	b.n	80179fa <_scanf_float+0x186>
 8017a10:	f1ba 0f00 	cmp.w	sl, #0
 8017a14:	d10e      	bne.n	8017a34 <_scanf_float+0x1c0>
 8017a16:	f1b9 0f00 	cmp.w	r9, #0
 8017a1a:	d10e      	bne.n	8017a3a <_scanf_float+0x1c6>
 8017a1c:	6822      	ldr	r2, [r4, #0]
 8017a1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017a22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017a26:	d108      	bne.n	8017a3a <_scanf_float+0x1c6>
 8017a28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017a2c:	6022      	str	r2, [r4, #0]
 8017a2e:	f04f 0a01 	mov.w	sl, #1
 8017a32:	e7e3      	b.n	80179fc <_scanf_float+0x188>
 8017a34:	f1ba 0f02 	cmp.w	sl, #2
 8017a38:	d055      	beq.n	8017ae6 <_scanf_float+0x272>
 8017a3a:	2d01      	cmp	r5, #1
 8017a3c:	d002      	beq.n	8017a44 <_scanf_float+0x1d0>
 8017a3e:	2d04      	cmp	r5, #4
 8017a40:	f47f af48 	bne.w	80178d4 <_scanf_float+0x60>
 8017a44:	3501      	adds	r5, #1
 8017a46:	b2ed      	uxtb	r5, r5
 8017a48:	e7d8      	b.n	80179fc <_scanf_float+0x188>
 8017a4a:	f1ba 0f01 	cmp.w	sl, #1
 8017a4e:	f47f af41 	bne.w	80178d4 <_scanf_float+0x60>
 8017a52:	f04f 0a02 	mov.w	sl, #2
 8017a56:	e7d1      	b.n	80179fc <_scanf_float+0x188>
 8017a58:	b97d      	cbnz	r5, 8017a7a <_scanf_float+0x206>
 8017a5a:	f1b9 0f00 	cmp.w	r9, #0
 8017a5e:	f47f af3c 	bne.w	80178da <_scanf_float+0x66>
 8017a62:	6822      	ldr	r2, [r4, #0]
 8017a64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017a68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017a6c:	f47f af39 	bne.w	80178e2 <_scanf_float+0x6e>
 8017a70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017a74:	6022      	str	r2, [r4, #0]
 8017a76:	2501      	movs	r5, #1
 8017a78:	e7c0      	b.n	80179fc <_scanf_float+0x188>
 8017a7a:	2d03      	cmp	r5, #3
 8017a7c:	d0e2      	beq.n	8017a44 <_scanf_float+0x1d0>
 8017a7e:	2d05      	cmp	r5, #5
 8017a80:	e7de      	b.n	8017a40 <_scanf_float+0x1cc>
 8017a82:	2d02      	cmp	r5, #2
 8017a84:	f47f af26 	bne.w	80178d4 <_scanf_float+0x60>
 8017a88:	2503      	movs	r5, #3
 8017a8a:	e7b7      	b.n	80179fc <_scanf_float+0x188>
 8017a8c:	2d06      	cmp	r5, #6
 8017a8e:	f47f af21 	bne.w	80178d4 <_scanf_float+0x60>
 8017a92:	2507      	movs	r5, #7
 8017a94:	e7b2      	b.n	80179fc <_scanf_float+0x188>
 8017a96:	6822      	ldr	r2, [r4, #0]
 8017a98:	0591      	lsls	r1, r2, #22
 8017a9a:	f57f af1b 	bpl.w	80178d4 <_scanf_float+0x60>
 8017a9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017aa2:	6022      	str	r2, [r4, #0]
 8017aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8017aa8:	e7a8      	b.n	80179fc <_scanf_float+0x188>
 8017aaa:	6822      	ldr	r2, [r4, #0]
 8017aac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017ab0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017ab4:	d006      	beq.n	8017ac4 <_scanf_float+0x250>
 8017ab6:	0550      	lsls	r0, r2, #21
 8017ab8:	f57f af0c 	bpl.w	80178d4 <_scanf_float+0x60>
 8017abc:	f1b9 0f00 	cmp.w	r9, #0
 8017ac0:	f43f af0f 	beq.w	80178e2 <_scanf_float+0x6e>
 8017ac4:	0591      	lsls	r1, r2, #22
 8017ac6:	bf58      	it	pl
 8017ac8:	9901      	ldrpl	r1, [sp, #4]
 8017aca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017ace:	bf58      	it	pl
 8017ad0:	eba9 0101 	subpl.w	r1, r9, r1
 8017ad4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017ad8:	bf58      	it	pl
 8017ada:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017ade:	6022      	str	r2, [r4, #0]
 8017ae0:	f04f 0900 	mov.w	r9, #0
 8017ae4:	e78a      	b.n	80179fc <_scanf_float+0x188>
 8017ae6:	f04f 0a03 	mov.w	sl, #3
 8017aea:	e787      	b.n	80179fc <_scanf_float+0x188>
 8017aec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017af0:	4639      	mov	r1, r7
 8017af2:	4640      	mov	r0, r8
 8017af4:	4798      	blx	r3
 8017af6:	2800      	cmp	r0, #0
 8017af8:	f43f aedf 	beq.w	80178ba <_scanf_float+0x46>
 8017afc:	e6ea      	b.n	80178d4 <_scanf_float+0x60>
 8017afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b06:	463a      	mov	r2, r7
 8017b08:	4640      	mov	r0, r8
 8017b0a:	4798      	blx	r3
 8017b0c:	6923      	ldr	r3, [r4, #16]
 8017b0e:	3b01      	subs	r3, #1
 8017b10:	6123      	str	r3, [r4, #16]
 8017b12:	e6ec      	b.n	80178ee <_scanf_float+0x7a>
 8017b14:	1e6b      	subs	r3, r5, #1
 8017b16:	2b06      	cmp	r3, #6
 8017b18:	d825      	bhi.n	8017b66 <_scanf_float+0x2f2>
 8017b1a:	2d02      	cmp	r5, #2
 8017b1c:	d836      	bhi.n	8017b8c <_scanf_float+0x318>
 8017b1e:	455e      	cmp	r6, fp
 8017b20:	f67f aee8 	bls.w	80178f4 <_scanf_float+0x80>
 8017b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b2c:	463a      	mov	r2, r7
 8017b2e:	4640      	mov	r0, r8
 8017b30:	4798      	blx	r3
 8017b32:	6923      	ldr	r3, [r4, #16]
 8017b34:	3b01      	subs	r3, #1
 8017b36:	6123      	str	r3, [r4, #16]
 8017b38:	e7f1      	b.n	8017b1e <_scanf_float+0x2aa>
 8017b3a:	9802      	ldr	r0, [sp, #8]
 8017b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017b44:	9002      	str	r0, [sp, #8]
 8017b46:	463a      	mov	r2, r7
 8017b48:	4640      	mov	r0, r8
 8017b4a:	4798      	blx	r3
 8017b4c:	6923      	ldr	r3, [r4, #16]
 8017b4e:	3b01      	subs	r3, #1
 8017b50:	6123      	str	r3, [r4, #16]
 8017b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b56:	fa5f fa8a 	uxtb.w	sl, sl
 8017b5a:	f1ba 0f02 	cmp.w	sl, #2
 8017b5e:	d1ec      	bne.n	8017b3a <_scanf_float+0x2c6>
 8017b60:	3d03      	subs	r5, #3
 8017b62:	b2ed      	uxtb	r5, r5
 8017b64:	1b76      	subs	r6, r6, r5
 8017b66:	6823      	ldr	r3, [r4, #0]
 8017b68:	05da      	lsls	r2, r3, #23
 8017b6a:	d52f      	bpl.n	8017bcc <_scanf_float+0x358>
 8017b6c:	055b      	lsls	r3, r3, #21
 8017b6e:	d510      	bpl.n	8017b92 <_scanf_float+0x31e>
 8017b70:	455e      	cmp	r6, fp
 8017b72:	f67f aebf 	bls.w	80178f4 <_scanf_float+0x80>
 8017b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b7e:	463a      	mov	r2, r7
 8017b80:	4640      	mov	r0, r8
 8017b82:	4798      	blx	r3
 8017b84:	6923      	ldr	r3, [r4, #16]
 8017b86:	3b01      	subs	r3, #1
 8017b88:	6123      	str	r3, [r4, #16]
 8017b8a:	e7f1      	b.n	8017b70 <_scanf_float+0x2fc>
 8017b8c:	46aa      	mov	sl, r5
 8017b8e:	9602      	str	r6, [sp, #8]
 8017b90:	e7df      	b.n	8017b52 <_scanf_float+0x2de>
 8017b92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017b96:	6923      	ldr	r3, [r4, #16]
 8017b98:	2965      	cmp	r1, #101	; 0x65
 8017b9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017b9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8017ba2:	6123      	str	r3, [r4, #16]
 8017ba4:	d00c      	beq.n	8017bc0 <_scanf_float+0x34c>
 8017ba6:	2945      	cmp	r1, #69	; 0x45
 8017ba8:	d00a      	beq.n	8017bc0 <_scanf_float+0x34c>
 8017baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bae:	463a      	mov	r2, r7
 8017bb0:	4640      	mov	r0, r8
 8017bb2:	4798      	blx	r3
 8017bb4:	6923      	ldr	r3, [r4, #16]
 8017bb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	1eb5      	subs	r5, r6, #2
 8017bbe:	6123      	str	r3, [r4, #16]
 8017bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bc4:	463a      	mov	r2, r7
 8017bc6:	4640      	mov	r0, r8
 8017bc8:	4798      	blx	r3
 8017bca:	462e      	mov	r6, r5
 8017bcc:	6825      	ldr	r5, [r4, #0]
 8017bce:	f015 0510 	ands.w	r5, r5, #16
 8017bd2:	d14e      	bne.n	8017c72 <_scanf_float+0x3fe>
 8017bd4:	7035      	strb	r5, [r6, #0]
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017be0:	d119      	bne.n	8017c16 <_scanf_float+0x3a2>
 8017be2:	9b01      	ldr	r3, [sp, #4]
 8017be4:	454b      	cmp	r3, r9
 8017be6:	eba3 0209 	sub.w	r2, r3, r9
 8017bea:	d121      	bne.n	8017c30 <_scanf_float+0x3bc>
 8017bec:	2200      	movs	r2, #0
 8017bee:	4659      	mov	r1, fp
 8017bf0:	4640      	mov	r0, r8
 8017bf2:	f000 fe7f 	bl	80188f4 <_strtod_r>
 8017bf6:	6822      	ldr	r2, [r4, #0]
 8017bf8:	9b03      	ldr	r3, [sp, #12]
 8017bfa:	f012 0f02 	tst.w	r2, #2
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	d021      	beq.n	8017c46 <_scanf_float+0x3d2>
 8017c02:	9903      	ldr	r1, [sp, #12]
 8017c04:	1d1a      	adds	r2, r3, #4
 8017c06:	600a      	str	r2, [r1, #0]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	ed83 0b00 	vstr	d0, [r3]
 8017c0e:	68e3      	ldr	r3, [r4, #12]
 8017c10:	3301      	adds	r3, #1
 8017c12:	60e3      	str	r3, [r4, #12]
 8017c14:	e66f      	b.n	80178f6 <_scanf_float+0x82>
 8017c16:	9b04      	ldr	r3, [sp, #16]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d0e7      	beq.n	8017bec <_scanf_float+0x378>
 8017c1c:	9905      	ldr	r1, [sp, #20]
 8017c1e:	230a      	movs	r3, #10
 8017c20:	462a      	mov	r2, r5
 8017c22:	3101      	adds	r1, #1
 8017c24:	4640      	mov	r0, r8
 8017c26:	f000 feed 	bl	8018a04 <_strtol_r>
 8017c2a:	9b04      	ldr	r3, [sp, #16]
 8017c2c:	9e05      	ldr	r6, [sp, #20]
 8017c2e:	1ac2      	subs	r2, r0, r3
 8017c30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017c34:	429e      	cmp	r6, r3
 8017c36:	bf28      	it	cs
 8017c38:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017c3c:	490e      	ldr	r1, [pc, #56]	; (8017c78 <_scanf_float+0x404>)
 8017c3e:	4630      	mov	r0, r6
 8017c40:	f000 f824 	bl	8017c8c <siprintf>
 8017c44:	e7d2      	b.n	8017bec <_scanf_float+0x378>
 8017c46:	9903      	ldr	r1, [sp, #12]
 8017c48:	f012 0f04 	tst.w	r2, #4
 8017c4c:	f103 0204 	add.w	r2, r3, #4
 8017c50:	600a      	str	r2, [r1, #0]
 8017c52:	d1d9      	bne.n	8017c08 <_scanf_float+0x394>
 8017c54:	eeb4 0b40 	vcmp.f64	d0, d0
 8017c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c5c:	681e      	ldr	r6, [r3, #0]
 8017c5e:	d705      	bvc.n	8017c6c <_scanf_float+0x3f8>
 8017c60:	4806      	ldr	r0, [pc, #24]	; (8017c7c <_scanf_float+0x408>)
 8017c62:	f000 f80d 	bl	8017c80 <nanf>
 8017c66:	ed86 0a00 	vstr	s0, [r6]
 8017c6a:	e7d0      	b.n	8017c0e <_scanf_float+0x39a>
 8017c6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017c70:	e7f9      	b.n	8017c66 <_scanf_float+0x3f2>
 8017c72:	2500      	movs	r5, #0
 8017c74:	e63f      	b.n	80178f6 <_scanf_float+0x82>
 8017c76:	bf00      	nop
 8017c78:	0801c864 	.word	0x0801c864
 8017c7c:	0801cc70 	.word	0x0801cc70

08017c80 <nanf>:
 8017c80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017c88 <nanf+0x8>
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	7fc00000 	.word	0x7fc00000

08017c8c <siprintf>:
 8017c8c:	b40e      	push	{r1, r2, r3}
 8017c8e:	b500      	push	{lr}
 8017c90:	b09c      	sub	sp, #112	; 0x70
 8017c92:	ab1d      	add	r3, sp, #116	; 0x74
 8017c94:	9002      	str	r0, [sp, #8]
 8017c96:	9006      	str	r0, [sp, #24]
 8017c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017c9c:	4809      	ldr	r0, [pc, #36]	; (8017cc4 <siprintf+0x38>)
 8017c9e:	9107      	str	r1, [sp, #28]
 8017ca0:	9104      	str	r1, [sp, #16]
 8017ca2:	4909      	ldr	r1, [pc, #36]	; (8017cc8 <siprintf+0x3c>)
 8017ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ca8:	9105      	str	r1, [sp, #20]
 8017caa:	6800      	ldr	r0, [r0, #0]
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	a902      	add	r1, sp, #8
 8017cb0:	f002 fe78 	bl	801a9a4 <_svfiprintf_r>
 8017cb4:	9b02      	ldr	r3, [sp, #8]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	701a      	strb	r2, [r3, #0]
 8017cba:	b01c      	add	sp, #112	; 0x70
 8017cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cc0:	b003      	add	sp, #12
 8017cc2:	4770      	bx	lr
 8017cc4:	24000100 	.word	0x24000100
 8017cc8:	ffff0208 	.word	0xffff0208

08017ccc <__sread>:
 8017ccc:	b510      	push	{r4, lr}
 8017cce:	460c      	mov	r4, r1
 8017cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cd4:	f002 ff66 	bl	801aba4 <_read_r>
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	bfab      	itete	ge
 8017cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017cde:	89a3      	ldrhlt	r3, [r4, #12]
 8017ce0:	181b      	addge	r3, r3, r0
 8017ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ce6:	bfac      	ite	ge
 8017ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cea:	81a3      	strhlt	r3, [r4, #12]
 8017cec:	bd10      	pop	{r4, pc}

08017cee <__swrite>:
 8017cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf2:	461f      	mov	r7, r3
 8017cf4:	898b      	ldrh	r3, [r1, #12]
 8017cf6:	05db      	lsls	r3, r3, #23
 8017cf8:	4605      	mov	r5, r0
 8017cfa:	460c      	mov	r4, r1
 8017cfc:	4616      	mov	r6, r2
 8017cfe:	d505      	bpl.n	8017d0c <__swrite+0x1e>
 8017d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d04:	2302      	movs	r3, #2
 8017d06:	2200      	movs	r2, #0
 8017d08:	f002 f810 	bl	8019d2c <_lseek_r>
 8017d0c:	89a3      	ldrh	r3, [r4, #12]
 8017d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d16:	81a3      	strh	r3, [r4, #12]
 8017d18:	4632      	mov	r2, r6
 8017d1a:	463b      	mov	r3, r7
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d22:	f000 be71 	b.w	8018a08 <_write_r>

08017d26 <__sseek>:
 8017d26:	b510      	push	{r4, lr}
 8017d28:	460c      	mov	r4, r1
 8017d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d2e:	f001 fffd 	bl	8019d2c <_lseek_r>
 8017d32:	1c43      	adds	r3, r0, #1
 8017d34:	89a3      	ldrh	r3, [r4, #12]
 8017d36:	bf15      	itete	ne
 8017d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8017d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d42:	81a3      	strheq	r3, [r4, #12]
 8017d44:	bf18      	it	ne
 8017d46:	81a3      	strhne	r3, [r4, #12]
 8017d48:	bd10      	pop	{r4, pc}

08017d4a <__sclose>:
 8017d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d4e:	f000 be6d 	b.w	8018a2c <_close_r>

08017d52 <sulp>:
 8017d52:	b570      	push	{r4, r5, r6, lr}
 8017d54:	4604      	mov	r4, r0
 8017d56:	460d      	mov	r5, r1
 8017d58:	4616      	mov	r6, r2
 8017d5a:	ec45 4b10 	vmov	d0, r4, r5
 8017d5e:	f002 fb83 	bl	801a468 <__ulp>
 8017d62:	b17e      	cbz	r6, 8017d84 <sulp+0x32>
 8017d64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017d68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	dd09      	ble.n	8017d84 <sulp+0x32>
 8017d70:	051b      	lsls	r3, r3, #20
 8017d72:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017d76:	2000      	movs	r0, #0
 8017d78:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8017d7c:	ec41 0b17 	vmov	d7, r0, r1
 8017d80:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08017d88 <_strtod_l>:
 8017d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d8c:	ed2d 8b0e 	vpush	{d8-d14}
 8017d90:	b097      	sub	sp, #92	; 0x5c
 8017d92:	461f      	mov	r7, r3
 8017d94:	2300      	movs	r3, #0
 8017d96:	9312      	str	r3, [sp, #72]	; 0x48
 8017d98:	4ba1      	ldr	r3, [pc, #644]	; (8018020 <_strtod_l+0x298>)
 8017d9a:	920d      	str	r2, [sp, #52]	; 0x34
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	9307      	str	r3, [sp, #28]
 8017da0:	4604      	mov	r4, r0
 8017da2:	4618      	mov	r0, r3
 8017da4:	468b      	mov	fp, r1
 8017da6:	f7e8 fab3 	bl	8000310 <strlen>
 8017daa:	f04f 0800 	mov.w	r8, #0
 8017dae:	4605      	mov	r5, r0
 8017db0:	f04f 0900 	mov.w	r9, #0
 8017db4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017dba:	7813      	ldrb	r3, [r2, #0]
 8017dbc:	2b2b      	cmp	r3, #43	; 0x2b
 8017dbe:	d04d      	beq.n	8017e5c <_strtod_l+0xd4>
 8017dc0:	d83a      	bhi.n	8017e38 <_strtod_l+0xb0>
 8017dc2:	2b0d      	cmp	r3, #13
 8017dc4:	d833      	bhi.n	8017e2e <_strtod_l+0xa6>
 8017dc6:	2b08      	cmp	r3, #8
 8017dc8:	d833      	bhi.n	8017e32 <_strtod_l+0xaa>
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d03d      	beq.n	8017e4a <_strtod_l+0xc2>
 8017dce:	2300      	movs	r3, #0
 8017dd0:	9308      	str	r3, [sp, #32]
 8017dd2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017dd4:	7833      	ldrb	r3, [r6, #0]
 8017dd6:	2b30      	cmp	r3, #48	; 0x30
 8017dd8:	f040 80b0 	bne.w	8017f3c <_strtod_l+0x1b4>
 8017ddc:	7873      	ldrb	r3, [r6, #1]
 8017dde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017de2:	2b58      	cmp	r3, #88	; 0x58
 8017de4:	d167      	bne.n	8017eb6 <_strtod_l+0x12e>
 8017de6:	9b08      	ldr	r3, [sp, #32]
 8017de8:	9301      	str	r3, [sp, #4]
 8017dea:	ab12      	add	r3, sp, #72	; 0x48
 8017dec:	9702      	str	r7, [sp, #8]
 8017dee:	9300      	str	r3, [sp, #0]
 8017df0:	4a8c      	ldr	r2, [pc, #560]	; (8018024 <_strtod_l+0x29c>)
 8017df2:	ab13      	add	r3, sp, #76	; 0x4c
 8017df4:	a911      	add	r1, sp, #68	; 0x44
 8017df6:	4620      	mov	r0, r4
 8017df8:	f001 fc8c 	bl	8019714 <__gethex>
 8017dfc:	f010 0507 	ands.w	r5, r0, #7
 8017e00:	4607      	mov	r7, r0
 8017e02:	d005      	beq.n	8017e10 <_strtod_l+0x88>
 8017e04:	2d06      	cmp	r5, #6
 8017e06:	d12b      	bne.n	8017e60 <_strtod_l+0xd8>
 8017e08:	3601      	adds	r6, #1
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	9611      	str	r6, [sp, #68]	; 0x44
 8017e0e:	9308      	str	r3, [sp, #32]
 8017e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	f040 854e 	bne.w	80188b4 <_strtod_l+0xb2c>
 8017e18:	9b08      	ldr	r3, [sp, #32]
 8017e1a:	b1e3      	cbz	r3, 8017e56 <_strtod_l+0xce>
 8017e1c:	ec49 8b17 	vmov	d7, r8, r9
 8017e20:	eeb1 0b47 	vneg.f64	d0, d7
 8017e24:	b017      	add	sp, #92	; 0x5c
 8017e26:	ecbd 8b0e 	vpop	{d8-d14}
 8017e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e2e:	2b20      	cmp	r3, #32
 8017e30:	d1cd      	bne.n	8017dce <_strtod_l+0x46>
 8017e32:	3201      	adds	r2, #1
 8017e34:	9211      	str	r2, [sp, #68]	; 0x44
 8017e36:	e7bf      	b.n	8017db8 <_strtod_l+0x30>
 8017e38:	2b2d      	cmp	r3, #45	; 0x2d
 8017e3a:	d1c8      	bne.n	8017dce <_strtod_l+0x46>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	9308      	str	r3, [sp, #32]
 8017e40:	1c53      	adds	r3, r2, #1
 8017e42:	9311      	str	r3, [sp, #68]	; 0x44
 8017e44:	7853      	ldrb	r3, [r2, #1]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d1c3      	bne.n	8017dd2 <_strtod_l+0x4a>
 8017e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e4c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	f040 852d 	bne.w	80188b0 <_strtod_l+0xb28>
 8017e56:	ec49 8b10 	vmov	d0, r8, r9
 8017e5a:	e7e3      	b.n	8017e24 <_strtod_l+0x9c>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	e7ee      	b.n	8017e3e <_strtod_l+0xb6>
 8017e60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e62:	b13a      	cbz	r2, 8017e74 <_strtod_l+0xec>
 8017e64:	2135      	movs	r1, #53	; 0x35
 8017e66:	a814      	add	r0, sp, #80	; 0x50
 8017e68:	f002 fc06 	bl	801a678 <__copybits>
 8017e6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f001 ffc8 	bl	8019e04 <_Bfree>
 8017e74:	3d01      	subs	r5, #1
 8017e76:	2d04      	cmp	r5, #4
 8017e78:	d806      	bhi.n	8017e88 <_strtod_l+0x100>
 8017e7a:	e8df f005 	tbb	[pc, r5]
 8017e7e:	030a      	.short	0x030a
 8017e80:	1714      	.short	0x1714
 8017e82:	0a          	.byte	0x0a
 8017e83:	00          	.byte	0x00
 8017e84:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8017e88:	073f      	lsls	r7, r7, #28
 8017e8a:	d5c1      	bpl.n	8017e10 <_strtod_l+0x88>
 8017e8c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017e90:	e7be      	b.n	8017e10 <_strtod_l+0x88>
 8017e92:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8017e96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017e9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017ea0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017ea4:	e7f0      	b.n	8017e88 <_strtod_l+0x100>
 8017ea6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8018028 <_strtod_l+0x2a0>
 8017eaa:	e7ed      	b.n	8017e88 <_strtod_l+0x100>
 8017eac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017eb0:	f04f 38ff 	mov.w	r8, #4294967295
 8017eb4:	e7e8      	b.n	8017e88 <_strtod_l+0x100>
 8017eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017eb8:	1c5a      	adds	r2, r3, #1
 8017eba:	9211      	str	r2, [sp, #68]	; 0x44
 8017ebc:	785b      	ldrb	r3, [r3, #1]
 8017ebe:	2b30      	cmp	r3, #48	; 0x30
 8017ec0:	d0f9      	beq.n	8017eb6 <_strtod_l+0x12e>
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d0a4      	beq.n	8017e10 <_strtod_l+0x88>
 8017ec6:	2301      	movs	r3, #1
 8017ec8:	f04f 0a00 	mov.w	sl, #0
 8017ecc:	9304      	str	r3, [sp, #16]
 8017ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8017ed2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017ed6:	f8cd a018 	str.w	sl, [sp, #24]
 8017eda:	220a      	movs	r2, #10
 8017edc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017ede:	7807      	ldrb	r7, [r0, #0]
 8017ee0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017ee4:	b2d9      	uxtb	r1, r3
 8017ee6:	2909      	cmp	r1, #9
 8017ee8:	d92a      	bls.n	8017f40 <_strtod_l+0x1b8>
 8017eea:	9907      	ldr	r1, [sp, #28]
 8017eec:	462a      	mov	r2, r5
 8017eee:	f002 fe83 	bl	801abf8 <strncmp>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d033      	beq.n	8017f5e <_strtod_l+0x1d6>
 8017ef6:	2000      	movs	r0, #0
 8017ef8:	9b06      	ldr	r3, [sp, #24]
 8017efa:	463a      	mov	r2, r7
 8017efc:	4601      	mov	r1, r0
 8017efe:	4607      	mov	r7, r0
 8017f00:	2a65      	cmp	r2, #101	; 0x65
 8017f02:	d001      	beq.n	8017f08 <_strtod_l+0x180>
 8017f04:	2a45      	cmp	r2, #69	; 0x45
 8017f06:	d117      	bne.n	8017f38 <_strtod_l+0x1b0>
 8017f08:	b91b      	cbnz	r3, 8017f12 <_strtod_l+0x18a>
 8017f0a:	9b04      	ldr	r3, [sp, #16]
 8017f0c:	4303      	orrs	r3, r0
 8017f0e:	d09c      	beq.n	8017e4a <_strtod_l+0xc2>
 8017f10:	2300      	movs	r3, #0
 8017f12:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8017f16:	f10b 0201 	add.w	r2, fp, #1
 8017f1a:	9211      	str	r2, [sp, #68]	; 0x44
 8017f1c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8017f20:	2a2b      	cmp	r2, #43	; 0x2b
 8017f22:	d071      	beq.n	8018008 <_strtod_l+0x280>
 8017f24:	2a2d      	cmp	r2, #45	; 0x2d
 8017f26:	d077      	beq.n	8018018 <_strtod_l+0x290>
 8017f28:	f04f 0e00 	mov.w	lr, #0
 8017f2c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8017f30:	2d09      	cmp	r5, #9
 8017f32:	d97f      	bls.n	8018034 <_strtod_l+0x2ac>
 8017f34:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017f38:	2500      	movs	r5, #0
 8017f3a:	e09b      	b.n	8018074 <_strtod_l+0x2ec>
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	e7c3      	b.n	8017ec8 <_strtod_l+0x140>
 8017f40:	9906      	ldr	r1, [sp, #24]
 8017f42:	2908      	cmp	r1, #8
 8017f44:	bfdd      	ittte	le
 8017f46:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017f48:	fb02 3301 	mlale	r3, r2, r1, r3
 8017f4c:	9309      	strle	r3, [sp, #36]	; 0x24
 8017f4e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017f52:	9b06      	ldr	r3, [sp, #24]
 8017f54:	3001      	adds	r0, #1
 8017f56:	3301      	adds	r3, #1
 8017f58:	9306      	str	r3, [sp, #24]
 8017f5a:	9011      	str	r0, [sp, #68]	; 0x44
 8017f5c:	e7be      	b.n	8017edc <_strtod_l+0x154>
 8017f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017f60:	195a      	adds	r2, r3, r5
 8017f62:	9211      	str	r2, [sp, #68]	; 0x44
 8017f64:	5d5a      	ldrb	r2, [r3, r5]
 8017f66:	9b06      	ldr	r3, [sp, #24]
 8017f68:	b3a3      	cbz	r3, 8017fd4 <_strtod_l+0x24c>
 8017f6a:	4607      	mov	r7, r0
 8017f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017f70:	2909      	cmp	r1, #9
 8017f72:	d912      	bls.n	8017f9a <_strtod_l+0x212>
 8017f74:	2101      	movs	r1, #1
 8017f76:	e7c3      	b.n	8017f00 <_strtod_l+0x178>
 8017f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017f7a:	1c5a      	adds	r2, r3, #1
 8017f7c:	9211      	str	r2, [sp, #68]	; 0x44
 8017f7e:	785a      	ldrb	r2, [r3, #1]
 8017f80:	3001      	adds	r0, #1
 8017f82:	2a30      	cmp	r2, #48	; 0x30
 8017f84:	d0f8      	beq.n	8017f78 <_strtod_l+0x1f0>
 8017f86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017f8a:	2b08      	cmp	r3, #8
 8017f8c:	f200 8497 	bhi.w	80188be <_strtod_l+0xb36>
 8017f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017f92:	930a      	str	r3, [sp, #40]	; 0x28
 8017f94:	4607      	mov	r7, r0
 8017f96:	2000      	movs	r0, #0
 8017f98:	4603      	mov	r3, r0
 8017f9a:	3a30      	subs	r2, #48	; 0x30
 8017f9c:	f100 0101 	add.w	r1, r0, #1
 8017fa0:	d012      	beq.n	8017fc8 <_strtod_l+0x240>
 8017fa2:	440f      	add	r7, r1
 8017fa4:	eb00 0c03 	add.w	ip, r0, r3
 8017fa8:	4619      	mov	r1, r3
 8017faa:	250a      	movs	r5, #10
 8017fac:	4561      	cmp	r1, ip
 8017fae:	d113      	bne.n	8017fd8 <_strtod_l+0x250>
 8017fb0:	1819      	adds	r1, r3, r0
 8017fb2:	2908      	cmp	r1, #8
 8017fb4:	f103 0301 	add.w	r3, r3, #1
 8017fb8:	4403      	add	r3, r0
 8017fba:	dc1c      	bgt.n	8017ff6 <_strtod_l+0x26e>
 8017fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017fbe:	210a      	movs	r1, #10
 8017fc0:	fb01 2200 	mla	r2, r1, r0, r2
 8017fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017fca:	1c50      	adds	r0, r2, #1
 8017fcc:	9011      	str	r0, [sp, #68]	; 0x44
 8017fce:	7852      	ldrb	r2, [r2, #1]
 8017fd0:	4608      	mov	r0, r1
 8017fd2:	e7cb      	b.n	8017f6c <_strtod_l+0x1e4>
 8017fd4:	9806      	ldr	r0, [sp, #24]
 8017fd6:	e7d4      	b.n	8017f82 <_strtod_l+0x1fa>
 8017fd8:	2908      	cmp	r1, #8
 8017fda:	dc04      	bgt.n	8017fe6 <_strtod_l+0x25e>
 8017fdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017fde:	436e      	muls	r6, r5
 8017fe0:	9609      	str	r6, [sp, #36]	; 0x24
 8017fe2:	3101      	adds	r1, #1
 8017fe4:	e7e2      	b.n	8017fac <_strtod_l+0x224>
 8017fe6:	f101 0e01 	add.w	lr, r1, #1
 8017fea:	f1be 0f10 	cmp.w	lr, #16
 8017fee:	bfd8      	it	le
 8017ff0:	fb05 fa0a 	mulle.w	sl, r5, sl
 8017ff4:	e7f5      	b.n	8017fe2 <_strtod_l+0x25a>
 8017ff6:	2b10      	cmp	r3, #16
 8017ff8:	bfdc      	itt	le
 8017ffa:	210a      	movle	r1, #10
 8017ffc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8018000:	e7e1      	b.n	8017fc6 <_strtod_l+0x23e>
 8018002:	2700      	movs	r7, #0
 8018004:	2101      	movs	r1, #1
 8018006:	e780      	b.n	8017f0a <_strtod_l+0x182>
 8018008:	f04f 0e00 	mov.w	lr, #0
 801800c:	f10b 0202 	add.w	r2, fp, #2
 8018010:	9211      	str	r2, [sp, #68]	; 0x44
 8018012:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8018016:	e789      	b.n	8017f2c <_strtod_l+0x1a4>
 8018018:	f04f 0e01 	mov.w	lr, #1
 801801c:	e7f6      	b.n	801800c <_strtod_l+0x284>
 801801e:	bf00      	nop
 8018020:	0801cab8 	.word	0x0801cab8
 8018024:	0801c86c 	.word	0x0801c86c
 8018028:	7ff00000 	.word	0x7ff00000
 801802c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801802e:	1c55      	adds	r5, r2, #1
 8018030:	9511      	str	r5, [sp, #68]	; 0x44
 8018032:	7852      	ldrb	r2, [r2, #1]
 8018034:	2a30      	cmp	r2, #48	; 0x30
 8018036:	d0f9      	beq.n	801802c <_strtod_l+0x2a4>
 8018038:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801803c:	2d08      	cmp	r5, #8
 801803e:	f63f af7b 	bhi.w	8017f38 <_strtod_l+0x1b0>
 8018042:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8018046:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018048:	9207      	str	r2, [sp, #28]
 801804a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801804c:	1c55      	adds	r5, r2, #1
 801804e:	9511      	str	r5, [sp, #68]	; 0x44
 8018050:	7852      	ldrb	r2, [r2, #1]
 8018052:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8018056:	2e09      	cmp	r6, #9
 8018058:	d937      	bls.n	80180ca <_strtod_l+0x342>
 801805a:	9e07      	ldr	r6, [sp, #28]
 801805c:	1bad      	subs	r5, r5, r6
 801805e:	2d08      	cmp	r5, #8
 8018060:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8018064:	dc02      	bgt.n	801806c <_strtod_l+0x2e4>
 8018066:	4565      	cmp	r5, ip
 8018068:	bfa8      	it	ge
 801806a:	4665      	movge	r5, ip
 801806c:	f1be 0f00 	cmp.w	lr, #0
 8018070:	d000      	beq.n	8018074 <_strtod_l+0x2ec>
 8018072:	426d      	negs	r5, r5
 8018074:	2b00      	cmp	r3, #0
 8018076:	d14d      	bne.n	8018114 <_strtod_l+0x38c>
 8018078:	9b04      	ldr	r3, [sp, #16]
 801807a:	4303      	orrs	r3, r0
 801807c:	f47f aec8 	bne.w	8017e10 <_strtod_l+0x88>
 8018080:	2900      	cmp	r1, #0
 8018082:	f47f aee2 	bne.w	8017e4a <_strtod_l+0xc2>
 8018086:	2a69      	cmp	r2, #105	; 0x69
 8018088:	d027      	beq.n	80180da <_strtod_l+0x352>
 801808a:	dc24      	bgt.n	80180d6 <_strtod_l+0x34e>
 801808c:	2a49      	cmp	r2, #73	; 0x49
 801808e:	d024      	beq.n	80180da <_strtod_l+0x352>
 8018090:	2a4e      	cmp	r2, #78	; 0x4e
 8018092:	f47f aeda 	bne.w	8017e4a <_strtod_l+0xc2>
 8018096:	4996      	ldr	r1, [pc, #600]	; (80182f0 <_strtod_l+0x568>)
 8018098:	a811      	add	r0, sp, #68	; 0x44
 801809a:	f001 fd93 	bl	8019bc4 <__match>
 801809e:	2800      	cmp	r0, #0
 80180a0:	f43f aed3 	beq.w	8017e4a <_strtod_l+0xc2>
 80180a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	2b28      	cmp	r3, #40	; 0x28
 80180aa:	d12d      	bne.n	8018108 <_strtod_l+0x380>
 80180ac:	4991      	ldr	r1, [pc, #580]	; (80182f4 <_strtod_l+0x56c>)
 80180ae:	aa14      	add	r2, sp, #80	; 0x50
 80180b0:	a811      	add	r0, sp, #68	; 0x44
 80180b2:	f001 fd9b 	bl	8019bec <__hexnan>
 80180b6:	2805      	cmp	r0, #5
 80180b8:	d126      	bne.n	8018108 <_strtod_l+0x380>
 80180ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180bc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80180c0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80180c4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80180c8:	e6a2      	b.n	8017e10 <_strtod_l+0x88>
 80180ca:	250a      	movs	r5, #10
 80180cc:	fb05 250c 	mla	r5, r5, ip, r2
 80180d0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80180d4:	e7b9      	b.n	801804a <_strtod_l+0x2c2>
 80180d6:	2a6e      	cmp	r2, #110	; 0x6e
 80180d8:	e7db      	b.n	8018092 <_strtod_l+0x30a>
 80180da:	4987      	ldr	r1, [pc, #540]	; (80182f8 <_strtod_l+0x570>)
 80180dc:	a811      	add	r0, sp, #68	; 0x44
 80180de:	f001 fd71 	bl	8019bc4 <__match>
 80180e2:	2800      	cmp	r0, #0
 80180e4:	f43f aeb1 	beq.w	8017e4a <_strtod_l+0xc2>
 80180e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180ea:	4984      	ldr	r1, [pc, #528]	; (80182fc <_strtod_l+0x574>)
 80180ec:	3b01      	subs	r3, #1
 80180ee:	a811      	add	r0, sp, #68	; 0x44
 80180f0:	9311      	str	r3, [sp, #68]	; 0x44
 80180f2:	f001 fd67 	bl	8019bc4 <__match>
 80180f6:	b910      	cbnz	r0, 80180fe <_strtod_l+0x376>
 80180f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180fa:	3301      	adds	r3, #1
 80180fc:	9311      	str	r3, [sp, #68]	; 0x44
 80180fe:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8018310 <_strtod_l+0x588>
 8018102:	f04f 0800 	mov.w	r8, #0
 8018106:	e683      	b.n	8017e10 <_strtod_l+0x88>
 8018108:	487d      	ldr	r0, [pc, #500]	; (8018300 <_strtod_l+0x578>)
 801810a:	f002 fd5d 	bl	801abc8 <nan>
 801810e:	ec59 8b10 	vmov	r8, r9, d0
 8018112:	e67d      	b.n	8017e10 <_strtod_l+0x88>
 8018114:	1bea      	subs	r2, r5, r7
 8018116:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801811a:	9207      	str	r2, [sp, #28]
 801811c:	9a06      	ldr	r2, [sp, #24]
 801811e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018122:	2a00      	cmp	r2, #0
 8018124:	bf08      	it	eq
 8018126:	461a      	moveq	r2, r3
 8018128:	2b10      	cmp	r3, #16
 801812a:	9206      	str	r2, [sp, #24]
 801812c:	461a      	mov	r2, r3
 801812e:	bfa8      	it	ge
 8018130:	2210      	movge	r2, #16
 8018132:	2b09      	cmp	r3, #9
 8018134:	ec59 8b17 	vmov	r8, r9, d7
 8018138:	dd0c      	ble.n	8018154 <_strtod_l+0x3cc>
 801813a:	4972      	ldr	r1, [pc, #456]	; (8018304 <_strtod_l+0x57c>)
 801813c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018140:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8018144:	ee06 aa90 	vmov	s13, sl
 8018148:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801814c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018150:	ec59 8b16 	vmov	r8, r9, d6
 8018154:	2b0f      	cmp	r3, #15
 8018156:	dc36      	bgt.n	80181c6 <_strtod_l+0x43e>
 8018158:	9907      	ldr	r1, [sp, #28]
 801815a:	2900      	cmp	r1, #0
 801815c:	f43f ae58 	beq.w	8017e10 <_strtod_l+0x88>
 8018160:	dd23      	ble.n	80181aa <_strtod_l+0x422>
 8018162:	2916      	cmp	r1, #22
 8018164:	dc0b      	bgt.n	801817e <_strtod_l+0x3f6>
 8018166:	4b67      	ldr	r3, [pc, #412]	; (8018304 <_strtod_l+0x57c>)
 8018168:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801816c:	ed93 7b00 	vldr	d7, [r3]
 8018170:	ec49 8b16 	vmov	d6, r8, r9
 8018174:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018178:	ec59 8b17 	vmov	r8, r9, d7
 801817c:	e648      	b.n	8017e10 <_strtod_l+0x88>
 801817e:	9807      	ldr	r0, [sp, #28]
 8018180:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8018184:	4281      	cmp	r1, r0
 8018186:	db1e      	blt.n	80181c6 <_strtod_l+0x43e>
 8018188:	4a5e      	ldr	r2, [pc, #376]	; (8018304 <_strtod_l+0x57c>)
 801818a:	f1c3 030f 	rsb	r3, r3, #15
 801818e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018192:	ed91 7b00 	vldr	d7, [r1]
 8018196:	ec49 8b16 	vmov	d6, r8, r9
 801819a:	1ac3      	subs	r3, r0, r3
 801819c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80181a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80181a4:	ed92 6b00 	vldr	d6, [r2]
 80181a8:	e7e4      	b.n	8018174 <_strtod_l+0x3ec>
 80181aa:	9907      	ldr	r1, [sp, #28]
 80181ac:	3116      	adds	r1, #22
 80181ae:	db0a      	blt.n	80181c6 <_strtod_l+0x43e>
 80181b0:	4b54      	ldr	r3, [pc, #336]	; (8018304 <_strtod_l+0x57c>)
 80181b2:	1b7d      	subs	r5, r7, r5
 80181b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80181b8:	ed95 7b00 	vldr	d7, [r5]
 80181bc:	ec49 8b16 	vmov	d6, r8, r9
 80181c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80181c4:	e7d8      	b.n	8018178 <_strtod_l+0x3f0>
 80181c6:	9907      	ldr	r1, [sp, #28]
 80181c8:	1a9a      	subs	r2, r3, r2
 80181ca:	440a      	add	r2, r1
 80181cc:	2a00      	cmp	r2, #0
 80181ce:	dd6f      	ble.n	80182b0 <_strtod_l+0x528>
 80181d0:	f012 000f 	ands.w	r0, r2, #15
 80181d4:	d00a      	beq.n	80181ec <_strtod_l+0x464>
 80181d6:	494b      	ldr	r1, [pc, #300]	; (8018304 <_strtod_l+0x57c>)
 80181d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80181dc:	ed91 7b00 	vldr	d7, [r1]
 80181e0:	ec49 8b16 	vmov	d6, r8, r9
 80181e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80181e8:	ec59 8b17 	vmov	r8, r9, d7
 80181ec:	f032 020f 	bics.w	r2, r2, #15
 80181f0:	d04f      	beq.n	8018292 <_strtod_l+0x50a>
 80181f2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80181f6:	dd22      	ble.n	801823e <_strtod_l+0x4b6>
 80181f8:	2500      	movs	r5, #0
 80181fa:	462e      	mov	r6, r5
 80181fc:	9506      	str	r5, [sp, #24]
 80181fe:	462f      	mov	r7, r5
 8018200:	2322      	movs	r3, #34	; 0x22
 8018202:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018310 <_strtod_l+0x588>
 8018206:	6023      	str	r3, [r4, #0]
 8018208:	f04f 0800 	mov.w	r8, #0
 801820c:	9b06      	ldr	r3, [sp, #24]
 801820e:	2b00      	cmp	r3, #0
 8018210:	f43f adfe 	beq.w	8017e10 <_strtod_l+0x88>
 8018214:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018216:	4620      	mov	r0, r4
 8018218:	f001 fdf4 	bl	8019e04 <_Bfree>
 801821c:	4639      	mov	r1, r7
 801821e:	4620      	mov	r0, r4
 8018220:	f001 fdf0 	bl	8019e04 <_Bfree>
 8018224:	4631      	mov	r1, r6
 8018226:	4620      	mov	r0, r4
 8018228:	f001 fdec 	bl	8019e04 <_Bfree>
 801822c:	9906      	ldr	r1, [sp, #24]
 801822e:	4620      	mov	r0, r4
 8018230:	f001 fde8 	bl	8019e04 <_Bfree>
 8018234:	4629      	mov	r1, r5
 8018236:	4620      	mov	r0, r4
 8018238:	f001 fde4 	bl	8019e04 <_Bfree>
 801823c:	e5e8      	b.n	8017e10 <_strtod_l+0x88>
 801823e:	2000      	movs	r0, #0
 8018240:	ec49 8b17 	vmov	d7, r8, r9
 8018244:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8018308 <_strtod_l+0x580>
 8018248:	1112      	asrs	r2, r2, #4
 801824a:	4601      	mov	r1, r0
 801824c:	2a01      	cmp	r2, #1
 801824e:	dc23      	bgt.n	8018298 <_strtod_l+0x510>
 8018250:	b108      	cbz	r0, 8018256 <_strtod_l+0x4ce>
 8018252:	ec59 8b17 	vmov	r8, r9, d7
 8018256:	4a2c      	ldr	r2, [pc, #176]	; (8018308 <_strtod_l+0x580>)
 8018258:	482c      	ldr	r0, [pc, #176]	; (801830c <_strtod_l+0x584>)
 801825a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801825e:	ed92 7b00 	vldr	d7, [r2]
 8018262:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8018266:	ec49 8b16 	vmov	d6, r8, r9
 801826a:	4a29      	ldr	r2, [pc, #164]	; (8018310 <_strtod_l+0x588>)
 801826c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018270:	ee17 1a90 	vmov	r1, s15
 8018274:	400a      	ands	r2, r1
 8018276:	4282      	cmp	r2, r0
 8018278:	ec59 8b17 	vmov	r8, r9, d7
 801827c:	d8bc      	bhi.n	80181f8 <_strtod_l+0x470>
 801827e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8018282:	4282      	cmp	r2, r0
 8018284:	bf86      	itte	hi
 8018286:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8018314 <_strtod_l+0x58c>
 801828a:	f04f 38ff 	movhi.w	r8, #4294967295
 801828e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8018292:	2200      	movs	r2, #0
 8018294:	9204      	str	r2, [sp, #16]
 8018296:	e078      	b.n	801838a <_strtod_l+0x602>
 8018298:	07d6      	lsls	r6, r2, #31
 801829a:	d504      	bpl.n	80182a6 <_strtod_l+0x51e>
 801829c:	ed9c 6b00 	vldr	d6, [ip]
 80182a0:	2001      	movs	r0, #1
 80182a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182a6:	3101      	adds	r1, #1
 80182a8:	1052      	asrs	r2, r2, #1
 80182aa:	f10c 0c08 	add.w	ip, ip, #8
 80182ae:	e7cd      	b.n	801824c <_strtod_l+0x4c4>
 80182b0:	d0ef      	beq.n	8018292 <_strtod_l+0x50a>
 80182b2:	4252      	negs	r2, r2
 80182b4:	f012 000f 	ands.w	r0, r2, #15
 80182b8:	d00a      	beq.n	80182d0 <_strtod_l+0x548>
 80182ba:	4912      	ldr	r1, [pc, #72]	; (8018304 <_strtod_l+0x57c>)
 80182bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80182c0:	ed91 7b00 	vldr	d7, [r1]
 80182c4:	ec49 8b16 	vmov	d6, r8, r9
 80182c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80182cc:	ec59 8b17 	vmov	r8, r9, d7
 80182d0:	1112      	asrs	r2, r2, #4
 80182d2:	d0de      	beq.n	8018292 <_strtod_l+0x50a>
 80182d4:	2a1f      	cmp	r2, #31
 80182d6:	dd1f      	ble.n	8018318 <_strtod_l+0x590>
 80182d8:	2500      	movs	r5, #0
 80182da:	462e      	mov	r6, r5
 80182dc:	9506      	str	r5, [sp, #24]
 80182de:	462f      	mov	r7, r5
 80182e0:	2322      	movs	r3, #34	; 0x22
 80182e2:	f04f 0800 	mov.w	r8, #0
 80182e6:	f04f 0900 	mov.w	r9, #0
 80182ea:	6023      	str	r3, [r4, #0]
 80182ec:	e78e      	b.n	801820c <_strtod_l+0x484>
 80182ee:	bf00      	nop
 80182f0:	0801c83d 	.word	0x0801c83d
 80182f4:	0801c880 	.word	0x0801c880
 80182f8:	0801c835 	.word	0x0801c835
 80182fc:	0801c9c4 	.word	0x0801c9c4
 8018300:	0801cc70 	.word	0x0801cc70
 8018304:	0801cb50 	.word	0x0801cb50
 8018308:	0801cb28 	.word	0x0801cb28
 801830c:	7ca00000 	.word	0x7ca00000
 8018310:	7ff00000 	.word	0x7ff00000
 8018314:	7fefffff 	.word	0x7fefffff
 8018318:	f012 0110 	ands.w	r1, r2, #16
 801831c:	bf18      	it	ne
 801831e:	216a      	movne	r1, #106	; 0x6a
 8018320:	9104      	str	r1, [sp, #16]
 8018322:	ec49 8b17 	vmov	d7, r8, r9
 8018326:	49be      	ldr	r1, [pc, #760]	; (8018620 <_strtod_l+0x898>)
 8018328:	2000      	movs	r0, #0
 801832a:	07d6      	lsls	r6, r2, #31
 801832c:	d504      	bpl.n	8018338 <_strtod_l+0x5b0>
 801832e:	ed91 6b00 	vldr	d6, [r1]
 8018332:	2001      	movs	r0, #1
 8018334:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018338:	1052      	asrs	r2, r2, #1
 801833a:	f101 0108 	add.w	r1, r1, #8
 801833e:	d1f4      	bne.n	801832a <_strtod_l+0x5a2>
 8018340:	b108      	cbz	r0, 8018346 <_strtod_l+0x5be>
 8018342:	ec59 8b17 	vmov	r8, r9, d7
 8018346:	9a04      	ldr	r2, [sp, #16]
 8018348:	b1c2      	cbz	r2, 801837c <_strtod_l+0x5f4>
 801834a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801834e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8018352:	2a00      	cmp	r2, #0
 8018354:	4648      	mov	r0, r9
 8018356:	dd11      	ble.n	801837c <_strtod_l+0x5f4>
 8018358:	2a1f      	cmp	r2, #31
 801835a:	f340 812e 	ble.w	80185ba <_strtod_l+0x832>
 801835e:	2a34      	cmp	r2, #52	; 0x34
 8018360:	bfde      	ittt	le
 8018362:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8018366:	f04f 32ff 	movle.w	r2, #4294967295
 801836a:	fa02 f101 	lslle.w	r1, r2, r1
 801836e:	f04f 0800 	mov.w	r8, #0
 8018372:	bfcc      	ite	gt
 8018374:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018378:	ea01 0900 	andle.w	r9, r1, r0
 801837c:	ec49 8b17 	vmov	d7, r8, r9
 8018380:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018388:	d0a6      	beq.n	80182d8 <_strtod_l+0x550>
 801838a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801838c:	9200      	str	r2, [sp, #0]
 801838e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018390:	9a06      	ldr	r2, [sp, #24]
 8018392:	4620      	mov	r0, r4
 8018394:	f001 fd9e 	bl	8019ed4 <__s2b>
 8018398:	9006      	str	r0, [sp, #24]
 801839a:	2800      	cmp	r0, #0
 801839c:	f43f af2c 	beq.w	80181f8 <_strtod_l+0x470>
 80183a0:	9b07      	ldr	r3, [sp, #28]
 80183a2:	1b7d      	subs	r5, r7, r5
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	bfb4      	ite	lt
 80183a8:	462b      	movlt	r3, r5
 80183aa:	2300      	movge	r3, #0
 80183ac:	9309      	str	r3, [sp, #36]	; 0x24
 80183ae:	9b07      	ldr	r3, [sp, #28]
 80183b0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8018600 <_strtod_l+0x878>
 80183b4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8018608 <_strtod_l+0x880>
 80183b8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8018610 <_strtod_l+0x888>
 80183bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183c0:	2500      	movs	r5, #0
 80183c2:	930c      	str	r3, [sp, #48]	; 0x30
 80183c4:	462e      	mov	r6, r5
 80183c6:	9b06      	ldr	r3, [sp, #24]
 80183c8:	4620      	mov	r0, r4
 80183ca:	6859      	ldr	r1, [r3, #4]
 80183cc:	f001 fcda 	bl	8019d84 <_Balloc>
 80183d0:	4607      	mov	r7, r0
 80183d2:	2800      	cmp	r0, #0
 80183d4:	f43f af14 	beq.w	8018200 <_strtod_l+0x478>
 80183d8:	9b06      	ldr	r3, [sp, #24]
 80183da:	691a      	ldr	r2, [r3, #16]
 80183dc:	3202      	adds	r2, #2
 80183de:	f103 010c 	add.w	r1, r3, #12
 80183e2:	0092      	lsls	r2, r2, #2
 80183e4:	300c      	adds	r0, #12
 80183e6:	f7fe fded 	bl	8016fc4 <memcpy>
 80183ea:	ec49 8b10 	vmov	d0, r8, r9
 80183ee:	aa14      	add	r2, sp, #80	; 0x50
 80183f0:	a913      	add	r1, sp, #76	; 0x4c
 80183f2:	4620      	mov	r0, r4
 80183f4:	f002 f8b4 	bl	801a560 <__d2b>
 80183f8:	ec49 8b18 	vmov	d8, r8, r9
 80183fc:	9012      	str	r0, [sp, #72]	; 0x48
 80183fe:	2800      	cmp	r0, #0
 8018400:	f43f aefe 	beq.w	8018200 <_strtod_l+0x478>
 8018404:	2101      	movs	r1, #1
 8018406:	4620      	mov	r0, r4
 8018408:	f001 fdfe 	bl	801a008 <__i2b>
 801840c:	4606      	mov	r6, r0
 801840e:	2800      	cmp	r0, #0
 8018410:	f43f aef6 	beq.w	8018200 <_strtod_l+0x478>
 8018414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018416:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018418:	2b00      	cmp	r3, #0
 801841a:	bfab      	itete	ge
 801841c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801841e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8018420:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8018424:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8018428:	bfac      	ite	ge
 801842a:	eb03 0b02 	addge.w	fp, r3, r2
 801842e:	eba2 0a03 	sublt.w	sl, r2, r3
 8018432:	9a04      	ldr	r2, [sp, #16]
 8018434:	1a9b      	subs	r3, r3, r2
 8018436:	440b      	add	r3, r1
 8018438:	4a7a      	ldr	r2, [pc, #488]	; (8018624 <_strtod_l+0x89c>)
 801843a:	3b01      	subs	r3, #1
 801843c:	4293      	cmp	r3, r2
 801843e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8018442:	f280 80cd 	bge.w	80185e0 <_strtod_l+0x858>
 8018446:	1ad2      	subs	r2, r2, r3
 8018448:	2a1f      	cmp	r2, #31
 801844a:	eba1 0102 	sub.w	r1, r1, r2
 801844e:	f04f 0001 	mov.w	r0, #1
 8018452:	f300 80b9 	bgt.w	80185c8 <_strtod_l+0x840>
 8018456:	fa00 f302 	lsl.w	r3, r0, r2
 801845a:	930b      	str	r3, [sp, #44]	; 0x2c
 801845c:	2300      	movs	r3, #0
 801845e:	930a      	str	r3, [sp, #40]	; 0x28
 8018460:	eb0b 0301 	add.w	r3, fp, r1
 8018464:	9a04      	ldr	r2, [sp, #16]
 8018466:	459b      	cmp	fp, r3
 8018468:	448a      	add	sl, r1
 801846a:	4492      	add	sl, r2
 801846c:	465a      	mov	r2, fp
 801846e:	bfa8      	it	ge
 8018470:	461a      	movge	r2, r3
 8018472:	4552      	cmp	r2, sl
 8018474:	bfa8      	it	ge
 8018476:	4652      	movge	r2, sl
 8018478:	2a00      	cmp	r2, #0
 801847a:	bfc2      	ittt	gt
 801847c:	1a9b      	subgt	r3, r3, r2
 801847e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8018482:	ebab 0b02 	subgt.w	fp, fp, r2
 8018486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018488:	2a00      	cmp	r2, #0
 801848a:	dd18      	ble.n	80184be <_strtod_l+0x736>
 801848c:	4631      	mov	r1, r6
 801848e:	4620      	mov	r0, r4
 8018490:	930f      	str	r3, [sp, #60]	; 0x3c
 8018492:	f001 fe79 	bl	801a188 <__pow5mult>
 8018496:	4606      	mov	r6, r0
 8018498:	2800      	cmp	r0, #0
 801849a:	f43f aeb1 	beq.w	8018200 <_strtod_l+0x478>
 801849e:	4601      	mov	r1, r0
 80184a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80184a2:	4620      	mov	r0, r4
 80184a4:	f001 fdc6 	bl	801a034 <__multiply>
 80184a8:	900e      	str	r0, [sp, #56]	; 0x38
 80184aa:	2800      	cmp	r0, #0
 80184ac:	f43f aea8 	beq.w	8018200 <_strtod_l+0x478>
 80184b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80184b2:	4620      	mov	r0, r4
 80184b4:	f001 fca6 	bl	8019e04 <_Bfree>
 80184b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80184ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184bc:	9212      	str	r2, [sp, #72]	; 0x48
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f300 8093 	bgt.w	80185ea <_strtod_l+0x862>
 80184c4:	9b07      	ldr	r3, [sp, #28]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	dd08      	ble.n	80184dc <_strtod_l+0x754>
 80184ca:	4639      	mov	r1, r7
 80184cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80184ce:	4620      	mov	r0, r4
 80184d0:	f001 fe5a 	bl	801a188 <__pow5mult>
 80184d4:	4607      	mov	r7, r0
 80184d6:	2800      	cmp	r0, #0
 80184d8:	f43f ae92 	beq.w	8018200 <_strtod_l+0x478>
 80184dc:	f1ba 0f00 	cmp.w	sl, #0
 80184e0:	dd08      	ble.n	80184f4 <_strtod_l+0x76c>
 80184e2:	4639      	mov	r1, r7
 80184e4:	4652      	mov	r2, sl
 80184e6:	4620      	mov	r0, r4
 80184e8:	f001 fea8 	bl	801a23c <__lshift>
 80184ec:	4607      	mov	r7, r0
 80184ee:	2800      	cmp	r0, #0
 80184f0:	f43f ae86 	beq.w	8018200 <_strtod_l+0x478>
 80184f4:	f1bb 0f00 	cmp.w	fp, #0
 80184f8:	dd08      	ble.n	801850c <_strtod_l+0x784>
 80184fa:	4631      	mov	r1, r6
 80184fc:	465a      	mov	r2, fp
 80184fe:	4620      	mov	r0, r4
 8018500:	f001 fe9c 	bl	801a23c <__lshift>
 8018504:	4606      	mov	r6, r0
 8018506:	2800      	cmp	r0, #0
 8018508:	f43f ae7a 	beq.w	8018200 <_strtod_l+0x478>
 801850c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801850e:	463a      	mov	r2, r7
 8018510:	4620      	mov	r0, r4
 8018512:	f001 ff1f 	bl	801a354 <__mdiff>
 8018516:	4605      	mov	r5, r0
 8018518:	2800      	cmp	r0, #0
 801851a:	f43f ae71 	beq.w	8018200 <_strtod_l+0x478>
 801851e:	2300      	movs	r3, #0
 8018520:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8018524:	60c3      	str	r3, [r0, #12]
 8018526:	4631      	mov	r1, r6
 8018528:	f001 fef8 	bl	801a31c <__mcmp>
 801852c:	2800      	cmp	r0, #0
 801852e:	da7d      	bge.n	801862c <_strtod_l+0x8a4>
 8018530:	ea5a 0308 	orrs.w	r3, sl, r8
 8018534:	f040 80a3 	bne.w	801867e <_strtod_l+0x8f6>
 8018538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801853c:	2b00      	cmp	r3, #0
 801853e:	f040 809e 	bne.w	801867e <_strtod_l+0x8f6>
 8018542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018546:	0d1b      	lsrs	r3, r3, #20
 8018548:	051b      	lsls	r3, r3, #20
 801854a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801854e:	f240 8096 	bls.w	801867e <_strtod_l+0x8f6>
 8018552:	696b      	ldr	r3, [r5, #20]
 8018554:	b91b      	cbnz	r3, 801855e <_strtod_l+0x7d6>
 8018556:	692b      	ldr	r3, [r5, #16]
 8018558:	2b01      	cmp	r3, #1
 801855a:	f340 8090 	ble.w	801867e <_strtod_l+0x8f6>
 801855e:	4629      	mov	r1, r5
 8018560:	2201      	movs	r2, #1
 8018562:	4620      	mov	r0, r4
 8018564:	f001 fe6a 	bl	801a23c <__lshift>
 8018568:	4631      	mov	r1, r6
 801856a:	4605      	mov	r5, r0
 801856c:	f001 fed6 	bl	801a31c <__mcmp>
 8018570:	2800      	cmp	r0, #0
 8018572:	f340 8084 	ble.w	801867e <_strtod_l+0x8f6>
 8018576:	9904      	ldr	r1, [sp, #16]
 8018578:	4a2b      	ldr	r2, [pc, #172]	; (8018628 <_strtod_l+0x8a0>)
 801857a:	464b      	mov	r3, r9
 801857c:	2900      	cmp	r1, #0
 801857e:	f000 809d 	beq.w	80186bc <_strtod_l+0x934>
 8018582:	ea02 0109 	and.w	r1, r2, r9
 8018586:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801858a:	f300 8097 	bgt.w	80186bc <_strtod_l+0x934>
 801858e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018592:	f77f aea5 	ble.w	80182e0 <_strtod_l+0x558>
 8018596:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018618 <_strtod_l+0x890>
 801859a:	ec49 8b16 	vmov	d6, r8, r9
 801859e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80185a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80185a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80185aa:	4313      	orrs	r3, r2
 80185ac:	bf08      	it	eq
 80185ae:	2322      	moveq	r3, #34	; 0x22
 80185b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80185b4:	bf08      	it	eq
 80185b6:	6023      	streq	r3, [r4, #0]
 80185b8:	e62c      	b.n	8018214 <_strtod_l+0x48c>
 80185ba:	f04f 31ff 	mov.w	r1, #4294967295
 80185be:	fa01 f202 	lsl.w	r2, r1, r2
 80185c2:	ea02 0808 	and.w	r8, r2, r8
 80185c6:	e6d9      	b.n	801837c <_strtod_l+0x5f4>
 80185c8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80185cc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80185d0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80185d4:	33e2      	adds	r3, #226	; 0xe2
 80185d6:	fa00 f303 	lsl.w	r3, r0, r3
 80185da:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80185de:	e73f      	b.n	8018460 <_strtod_l+0x6d8>
 80185e0:	2200      	movs	r2, #0
 80185e2:	2301      	movs	r3, #1
 80185e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80185e8:	e73a      	b.n	8018460 <_strtod_l+0x6d8>
 80185ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80185ec:	461a      	mov	r2, r3
 80185ee:	4620      	mov	r0, r4
 80185f0:	f001 fe24 	bl	801a23c <__lshift>
 80185f4:	9012      	str	r0, [sp, #72]	; 0x48
 80185f6:	2800      	cmp	r0, #0
 80185f8:	f47f af64 	bne.w	80184c4 <_strtod_l+0x73c>
 80185fc:	e600      	b.n	8018200 <_strtod_l+0x478>
 80185fe:	bf00      	nop
 8018600:	94a03595 	.word	0x94a03595
 8018604:	3fcfffff 	.word	0x3fcfffff
 8018608:	94a03595 	.word	0x94a03595
 801860c:	3fdfffff 	.word	0x3fdfffff
 8018610:	35afe535 	.word	0x35afe535
 8018614:	3fe00000 	.word	0x3fe00000
 8018618:	00000000 	.word	0x00000000
 801861c:	39500000 	.word	0x39500000
 8018620:	0801c898 	.word	0x0801c898
 8018624:	fffffc02 	.word	0xfffffc02
 8018628:	7ff00000 	.word	0x7ff00000
 801862c:	46cb      	mov	fp, r9
 801862e:	d15f      	bne.n	80186f0 <_strtod_l+0x968>
 8018630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018634:	f1ba 0f00 	cmp.w	sl, #0
 8018638:	d02a      	beq.n	8018690 <_strtod_l+0x908>
 801863a:	4aa7      	ldr	r2, [pc, #668]	; (80188d8 <_strtod_l+0xb50>)
 801863c:	4293      	cmp	r3, r2
 801863e:	d12b      	bne.n	8018698 <_strtod_l+0x910>
 8018640:	9b04      	ldr	r3, [sp, #16]
 8018642:	4642      	mov	r2, r8
 8018644:	b1fb      	cbz	r3, 8018686 <_strtod_l+0x8fe>
 8018646:	4ba5      	ldr	r3, [pc, #660]	; (80188dc <_strtod_l+0xb54>)
 8018648:	ea09 0303 	and.w	r3, r9, r3
 801864c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018650:	f04f 31ff 	mov.w	r1, #4294967295
 8018654:	d81a      	bhi.n	801868c <_strtod_l+0x904>
 8018656:	0d1b      	lsrs	r3, r3, #20
 8018658:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801865c:	fa01 f303 	lsl.w	r3, r1, r3
 8018660:	429a      	cmp	r2, r3
 8018662:	d119      	bne.n	8018698 <_strtod_l+0x910>
 8018664:	4b9e      	ldr	r3, [pc, #632]	; (80188e0 <_strtod_l+0xb58>)
 8018666:	459b      	cmp	fp, r3
 8018668:	d102      	bne.n	8018670 <_strtod_l+0x8e8>
 801866a:	3201      	adds	r2, #1
 801866c:	f43f adc8 	beq.w	8018200 <_strtod_l+0x478>
 8018670:	4b9a      	ldr	r3, [pc, #616]	; (80188dc <_strtod_l+0xb54>)
 8018672:	ea0b 0303 	and.w	r3, fp, r3
 8018676:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801867a:	f04f 0800 	mov.w	r8, #0
 801867e:	9b04      	ldr	r3, [sp, #16]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d188      	bne.n	8018596 <_strtod_l+0x80e>
 8018684:	e5c6      	b.n	8018214 <_strtod_l+0x48c>
 8018686:	f04f 33ff 	mov.w	r3, #4294967295
 801868a:	e7e9      	b.n	8018660 <_strtod_l+0x8d8>
 801868c:	460b      	mov	r3, r1
 801868e:	e7e7      	b.n	8018660 <_strtod_l+0x8d8>
 8018690:	ea53 0308 	orrs.w	r3, r3, r8
 8018694:	f43f af6f 	beq.w	8018576 <_strtod_l+0x7ee>
 8018698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801869a:	b1cb      	cbz	r3, 80186d0 <_strtod_l+0x948>
 801869c:	ea13 0f0b 	tst.w	r3, fp
 80186a0:	d0ed      	beq.n	801867e <_strtod_l+0x8f6>
 80186a2:	9a04      	ldr	r2, [sp, #16]
 80186a4:	4640      	mov	r0, r8
 80186a6:	4649      	mov	r1, r9
 80186a8:	f1ba 0f00 	cmp.w	sl, #0
 80186ac:	d014      	beq.n	80186d8 <_strtod_l+0x950>
 80186ae:	f7ff fb50 	bl	8017d52 <sulp>
 80186b2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80186b6:	ec59 8b17 	vmov	r8, r9, d7
 80186ba:	e7e0      	b.n	801867e <_strtod_l+0x8f6>
 80186bc:	4013      	ands	r3, r2
 80186be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80186c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80186c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80186ca:	f04f 38ff 	mov.w	r8, #4294967295
 80186ce:	e7d6      	b.n	801867e <_strtod_l+0x8f6>
 80186d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186d2:	ea13 0f08 	tst.w	r3, r8
 80186d6:	e7e3      	b.n	80186a0 <_strtod_l+0x918>
 80186d8:	f7ff fb3b 	bl	8017d52 <sulp>
 80186dc:	ee38 0b40 	vsub.f64	d0, d8, d0
 80186e0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80186e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e8:	ec59 8b10 	vmov	r8, r9, d0
 80186ec:	d1c7      	bne.n	801867e <_strtod_l+0x8f6>
 80186ee:	e5f7      	b.n	80182e0 <_strtod_l+0x558>
 80186f0:	4631      	mov	r1, r6
 80186f2:	4628      	mov	r0, r5
 80186f4:	f001 ff90 	bl	801a618 <__ratio>
 80186f8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80186fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018704:	d865      	bhi.n	80187d2 <_strtod_l+0xa4a>
 8018706:	f1ba 0f00 	cmp.w	sl, #0
 801870a:	d042      	beq.n	8018792 <_strtod_l+0xa0a>
 801870c:	4b75      	ldr	r3, [pc, #468]	; (80188e4 <_strtod_l+0xb5c>)
 801870e:	2200      	movs	r2, #0
 8018710:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8018714:	4871      	ldr	r0, [pc, #452]	; (80188dc <_strtod_l+0xb54>)
 8018716:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80188f0 <_strtod_l+0xb68>
 801871a:	ea0b 0100 	and.w	r1, fp, r0
 801871e:	4561      	cmp	r1, ip
 8018720:	f040 808e 	bne.w	8018840 <_strtod_l+0xab8>
 8018724:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8018728:	ec49 8b10 	vmov	d0, r8, r9
 801872c:	ec43 2b1c 	vmov	d12, r2, r3
 8018730:	910a      	str	r1, [sp, #40]	; 0x28
 8018732:	f001 fe99 	bl	801a468 <__ulp>
 8018736:	ec49 8b1e 	vmov	d14, r8, r9
 801873a:	4868      	ldr	r0, [pc, #416]	; (80188dc <_strtod_l+0xb54>)
 801873c:	eeac eb00 	vfma.f64	d14, d12, d0
 8018740:	ee1e 3a90 	vmov	r3, s29
 8018744:	4a68      	ldr	r2, [pc, #416]	; (80188e8 <_strtod_l+0xb60>)
 8018746:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018748:	4018      	ands	r0, r3
 801874a:	4290      	cmp	r0, r2
 801874c:	ec59 8b1e 	vmov	r8, r9, d14
 8018750:	d94e      	bls.n	80187f0 <_strtod_l+0xa68>
 8018752:	ee18 3a90 	vmov	r3, s17
 8018756:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801875a:	4293      	cmp	r3, r2
 801875c:	d104      	bne.n	8018768 <_strtod_l+0x9e0>
 801875e:	ee18 3a10 	vmov	r3, s16
 8018762:	3301      	adds	r3, #1
 8018764:	f43f ad4c 	beq.w	8018200 <_strtod_l+0x478>
 8018768:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80188e0 <_strtod_l+0xb58>
 801876c:	f04f 38ff 	mov.w	r8, #4294967295
 8018770:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018772:	4620      	mov	r0, r4
 8018774:	f001 fb46 	bl	8019e04 <_Bfree>
 8018778:	4639      	mov	r1, r7
 801877a:	4620      	mov	r0, r4
 801877c:	f001 fb42 	bl	8019e04 <_Bfree>
 8018780:	4631      	mov	r1, r6
 8018782:	4620      	mov	r0, r4
 8018784:	f001 fb3e 	bl	8019e04 <_Bfree>
 8018788:	4629      	mov	r1, r5
 801878a:	4620      	mov	r0, r4
 801878c:	f001 fb3a 	bl	8019e04 <_Bfree>
 8018790:	e619      	b.n	80183c6 <_strtod_l+0x63e>
 8018792:	f1b8 0f00 	cmp.w	r8, #0
 8018796:	d112      	bne.n	80187be <_strtod_l+0xa36>
 8018798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801879c:	b9b3      	cbnz	r3, 80187cc <_strtod_l+0xa44>
 801879e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80187a2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80187a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187aa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80187ae:	bf58      	it	pl
 80187b0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80187b4:	eeb1 7b4d 	vneg.f64	d7, d13
 80187b8:	ec53 2b17 	vmov	r2, r3, d7
 80187bc:	e7aa      	b.n	8018714 <_strtod_l+0x98c>
 80187be:	f1b8 0f01 	cmp.w	r8, #1
 80187c2:	d103      	bne.n	80187cc <_strtod_l+0xa44>
 80187c4:	f1b9 0f00 	cmp.w	r9, #0
 80187c8:	f43f ad8a 	beq.w	80182e0 <_strtod_l+0x558>
 80187cc:	4b47      	ldr	r3, [pc, #284]	; (80188ec <_strtod_l+0xb64>)
 80187ce:	2200      	movs	r2, #0
 80187d0:	e79e      	b.n	8018710 <_strtod_l+0x988>
 80187d2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80187d6:	ee20 db0d 	vmul.f64	d13, d0, d13
 80187da:	f1ba 0f00 	cmp.w	sl, #0
 80187de:	d104      	bne.n	80187ea <_strtod_l+0xa62>
 80187e0:	eeb1 7b4d 	vneg.f64	d7, d13
 80187e4:	ec53 2b17 	vmov	r2, r3, d7
 80187e8:	e794      	b.n	8018714 <_strtod_l+0x98c>
 80187ea:	eeb0 7b4d 	vmov.f64	d7, d13
 80187ee:	e7f9      	b.n	80187e4 <_strtod_l+0xa5c>
 80187f0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80187f4:	9b04      	ldr	r3, [sp, #16]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d1ba      	bne.n	8018770 <_strtod_l+0x9e8>
 80187fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80187fe:	0d1b      	lsrs	r3, r3, #20
 8018800:	051b      	lsls	r3, r3, #20
 8018802:	4299      	cmp	r1, r3
 8018804:	d1b4      	bne.n	8018770 <_strtod_l+0x9e8>
 8018806:	ec51 0b1d 	vmov	r0, r1, d13
 801880a:	f7e7 ffad 	bl	8000768 <__aeabi_d2lz>
 801880e:	f7e7 ff65 	bl	80006dc <__aeabi_l2d>
 8018812:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018816:	ec41 0b17 	vmov	d7, r0, r1
 801881a:	ea43 0308 	orr.w	r3, r3, r8
 801881e:	ea53 030a 	orrs.w	r3, r3, sl
 8018822:	ee3d db47 	vsub.f64	d13, d13, d7
 8018826:	d03c      	beq.n	80188a2 <_strtod_l+0xb1a>
 8018828:	eeb4 dbca 	vcmpe.f64	d13, d10
 801882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018830:	f53f acf0 	bmi.w	8018214 <_strtod_l+0x48c>
 8018834:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8018838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801883c:	dd98      	ble.n	8018770 <_strtod_l+0x9e8>
 801883e:	e4e9      	b.n	8018214 <_strtod_l+0x48c>
 8018840:	9804      	ldr	r0, [sp, #16]
 8018842:	b1f0      	cbz	r0, 8018882 <_strtod_l+0xafa>
 8018844:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8018848:	d81b      	bhi.n	8018882 <_strtod_l+0xafa>
 801884a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80188d0 <_strtod_l+0xb48>
 801884e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8018852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018856:	d811      	bhi.n	801887c <_strtod_l+0xaf4>
 8018858:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801885c:	ee1d 3a10 	vmov	r3, s26
 8018860:	2b01      	cmp	r3, #1
 8018862:	bf38      	it	cc
 8018864:	2301      	movcc	r3, #1
 8018866:	ee0d 3a10 	vmov	s26, r3
 801886a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801886e:	f1ba 0f00 	cmp.w	sl, #0
 8018872:	d113      	bne.n	801889c <_strtod_l+0xb14>
 8018874:	eeb1 7b4d 	vneg.f64	d7, d13
 8018878:	ec53 2b17 	vmov	r2, r3, d7
 801887c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8018880:	1a43      	subs	r3, r0, r1
 8018882:	eeb0 0b48 	vmov.f64	d0, d8
 8018886:	ec43 2b1c 	vmov	d12, r2, r3
 801888a:	910a      	str	r1, [sp, #40]	; 0x28
 801888c:	f001 fdec 	bl	801a468 <__ulp>
 8018890:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018892:	eeac 8b00 	vfma.f64	d8, d12, d0
 8018896:	ec59 8b18 	vmov	r8, r9, d8
 801889a:	e7ab      	b.n	80187f4 <_strtod_l+0xa6c>
 801889c:	eeb0 7b4d 	vmov.f64	d7, d13
 80188a0:	e7ea      	b.n	8018878 <_strtod_l+0xaf0>
 80188a2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80188a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188aa:	f57f af61 	bpl.w	8018770 <_strtod_l+0x9e8>
 80188ae:	e4b1      	b.n	8018214 <_strtod_l+0x48c>
 80188b0:	2300      	movs	r3, #0
 80188b2:	9308      	str	r3, [sp, #32]
 80188b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80188b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80188b8:	6013      	str	r3, [r2, #0]
 80188ba:	f7ff baad 	b.w	8017e18 <_strtod_l+0x90>
 80188be:	2a65      	cmp	r2, #101	; 0x65
 80188c0:	f43f ab9f 	beq.w	8018002 <_strtod_l+0x27a>
 80188c4:	2a45      	cmp	r2, #69	; 0x45
 80188c6:	f43f ab9c 	beq.w	8018002 <_strtod_l+0x27a>
 80188ca:	2101      	movs	r1, #1
 80188cc:	f7ff bbd4 	b.w	8018078 <_strtod_l+0x2f0>
 80188d0:	ffc00000 	.word	0xffc00000
 80188d4:	41dfffff 	.word	0x41dfffff
 80188d8:	000fffff 	.word	0x000fffff
 80188dc:	7ff00000 	.word	0x7ff00000
 80188e0:	7fefffff 	.word	0x7fefffff
 80188e4:	3ff00000 	.word	0x3ff00000
 80188e8:	7c9fffff 	.word	0x7c9fffff
 80188ec:	bff00000 	.word	0xbff00000
 80188f0:	7fe00000 	.word	0x7fe00000

080188f4 <_strtod_r>:
 80188f4:	4b01      	ldr	r3, [pc, #4]	; (80188fc <_strtod_r+0x8>)
 80188f6:	f7ff ba47 	b.w	8017d88 <_strtod_l>
 80188fa:	bf00      	nop
 80188fc:	24000168 	.word	0x24000168

08018900 <_strtol_l.constprop.0>:
 8018900:	2b01      	cmp	r3, #1
 8018902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018906:	d001      	beq.n	801890c <_strtol_l.constprop.0+0xc>
 8018908:	2b24      	cmp	r3, #36	; 0x24
 801890a:	d906      	bls.n	801891a <_strtol_l.constprop.0+0x1a>
 801890c:	f7fe fb30 	bl	8016f70 <__errno>
 8018910:	2316      	movs	r3, #22
 8018912:	6003      	str	r3, [r0, #0]
 8018914:	2000      	movs	r0, #0
 8018916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801891a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018a00 <_strtol_l.constprop.0+0x100>
 801891e:	460d      	mov	r5, r1
 8018920:	462e      	mov	r6, r5
 8018922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018926:	f814 700c 	ldrb.w	r7, [r4, ip]
 801892a:	f017 0708 	ands.w	r7, r7, #8
 801892e:	d1f7      	bne.n	8018920 <_strtol_l.constprop.0+0x20>
 8018930:	2c2d      	cmp	r4, #45	; 0x2d
 8018932:	d132      	bne.n	801899a <_strtol_l.constprop.0+0x9a>
 8018934:	782c      	ldrb	r4, [r5, #0]
 8018936:	2701      	movs	r7, #1
 8018938:	1cb5      	adds	r5, r6, #2
 801893a:	2b00      	cmp	r3, #0
 801893c:	d05b      	beq.n	80189f6 <_strtol_l.constprop.0+0xf6>
 801893e:	2b10      	cmp	r3, #16
 8018940:	d109      	bne.n	8018956 <_strtol_l.constprop.0+0x56>
 8018942:	2c30      	cmp	r4, #48	; 0x30
 8018944:	d107      	bne.n	8018956 <_strtol_l.constprop.0+0x56>
 8018946:	782c      	ldrb	r4, [r5, #0]
 8018948:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801894c:	2c58      	cmp	r4, #88	; 0x58
 801894e:	d14d      	bne.n	80189ec <_strtol_l.constprop.0+0xec>
 8018950:	786c      	ldrb	r4, [r5, #1]
 8018952:	2310      	movs	r3, #16
 8018954:	3502      	adds	r5, #2
 8018956:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801895a:	f108 38ff 	add.w	r8, r8, #4294967295
 801895e:	f04f 0c00 	mov.w	ip, #0
 8018962:	fbb8 f9f3 	udiv	r9, r8, r3
 8018966:	4666      	mov	r6, ip
 8018968:	fb03 8a19 	mls	sl, r3, r9, r8
 801896c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8018970:	f1be 0f09 	cmp.w	lr, #9
 8018974:	d816      	bhi.n	80189a4 <_strtol_l.constprop.0+0xa4>
 8018976:	4674      	mov	r4, lr
 8018978:	42a3      	cmp	r3, r4
 801897a:	dd24      	ble.n	80189c6 <_strtol_l.constprop.0+0xc6>
 801897c:	f1bc 0f00 	cmp.w	ip, #0
 8018980:	db1e      	blt.n	80189c0 <_strtol_l.constprop.0+0xc0>
 8018982:	45b1      	cmp	r9, r6
 8018984:	d31c      	bcc.n	80189c0 <_strtol_l.constprop.0+0xc0>
 8018986:	d101      	bne.n	801898c <_strtol_l.constprop.0+0x8c>
 8018988:	45a2      	cmp	sl, r4
 801898a:	db19      	blt.n	80189c0 <_strtol_l.constprop.0+0xc0>
 801898c:	fb06 4603 	mla	r6, r6, r3, r4
 8018990:	f04f 0c01 	mov.w	ip, #1
 8018994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018998:	e7e8      	b.n	801896c <_strtol_l.constprop.0+0x6c>
 801899a:	2c2b      	cmp	r4, #43	; 0x2b
 801899c:	bf04      	itt	eq
 801899e:	782c      	ldrbeq	r4, [r5, #0]
 80189a0:	1cb5      	addeq	r5, r6, #2
 80189a2:	e7ca      	b.n	801893a <_strtol_l.constprop.0+0x3a>
 80189a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80189a8:	f1be 0f19 	cmp.w	lr, #25
 80189ac:	d801      	bhi.n	80189b2 <_strtol_l.constprop.0+0xb2>
 80189ae:	3c37      	subs	r4, #55	; 0x37
 80189b0:	e7e2      	b.n	8018978 <_strtol_l.constprop.0+0x78>
 80189b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80189b6:	f1be 0f19 	cmp.w	lr, #25
 80189ba:	d804      	bhi.n	80189c6 <_strtol_l.constprop.0+0xc6>
 80189bc:	3c57      	subs	r4, #87	; 0x57
 80189be:	e7db      	b.n	8018978 <_strtol_l.constprop.0+0x78>
 80189c0:	f04f 3cff 	mov.w	ip, #4294967295
 80189c4:	e7e6      	b.n	8018994 <_strtol_l.constprop.0+0x94>
 80189c6:	f1bc 0f00 	cmp.w	ip, #0
 80189ca:	da05      	bge.n	80189d8 <_strtol_l.constprop.0+0xd8>
 80189cc:	2322      	movs	r3, #34	; 0x22
 80189ce:	6003      	str	r3, [r0, #0]
 80189d0:	4646      	mov	r6, r8
 80189d2:	b942      	cbnz	r2, 80189e6 <_strtol_l.constprop.0+0xe6>
 80189d4:	4630      	mov	r0, r6
 80189d6:	e79e      	b.n	8018916 <_strtol_l.constprop.0+0x16>
 80189d8:	b107      	cbz	r7, 80189dc <_strtol_l.constprop.0+0xdc>
 80189da:	4276      	negs	r6, r6
 80189dc:	2a00      	cmp	r2, #0
 80189de:	d0f9      	beq.n	80189d4 <_strtol_l.constprop.0+0xd4>
 80189e0:	f1bc 0f00 	cmp.w	ip, #0
 80189e4:	d000      	beq.n	80189e8 <_strtol_l.constprop.0+0xe8>
 80189e6:	1e69      	subs	r1, r5, #1
 80189e8:	6011      	str	r1, [r2, #0]
 80189ea:	e7f3      	b.n	80189d4 <_strtol_l.constprop.0+0xd4>
 80189ec:	2430      	movs	r4, #48	; 0x30
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d1b1      	bne.n	8018956 <_strtol_l.constprop.0+0x56>
 80189f2:	2308      	movs	r3, #8
 80189f4:	e7af      	b.n	8018956 <_strtol_l.constprop.0+0x56>
 80189f6:	2c30      	cmp	r4, #48	; 0x30
 80189f8:	d0a5      	beq.n	8018946 <_strtol_l.constprop.0+0x46>
 80189fa:	230a      	movs	r3, #10
 80189fc:	e7ab      	b.n	8018956 <_strtol_l.constprop.0+0x56>
 80189fe:	bf00      	nop
 8018a00:	0801c8c1 	.word	0x0801c8c1

08018a04 <_strtol_r>:
 8018a04:	f7ff bf7c 	b.w	8018900 <_strtol_l.constprop.0>

08018a08 <_write_r>:
 8018a08:	b538      	push	{r3, r4, r5, lr}
 8018a0a:	4d07      	ldr	r5, [pc, #28]	; (8018a28 <_write_r+0x20>)
 8018a0c:	4604      	mov	r4, r0
 8018a0e:	4608      	mov	r0, r1
 8018a10:	4611      	mov	r1, r2
 8018a12:	2200      	movs	r2, #0
 8018a14:	602a      	str	r2, [r5, #0]
 8018a16:	461a      	mov	r2, r3
 8018a18:	f7eb fcbb 	bl	8004392 <_write>
 8018a1c:	1c43      	adds	r3, r0, #1
 8018a1e:	d102      	bne.n	8018a26 <_write_r+0x1e>
 8018a20:	682b      	ldr	r3, [r5, #0]
 8018a22:	b103      	cbz	r3, 8018a26 <_write_r+0x1e>
 8018a24:	6023      	str	r3, [r4, #0]
 8018a26:	bd38      	pop	{r3, r4, r5, pc}
 8018a28:	240029b0 	.word	0x240029b0

08018a2c <_close_r>:
 8018a2c:	b538      	push	{r3, r4, r5, lr}
 8018a2e:	4d06      	ldr	r5, [pc, #24]	; (8018a48 <_close_r+0x1c>)
 8018a30:	2300      	movs	r3, #0
 8018a32:	4604      	mov	r4, r0
 8018a34:	4608      	mov	r0, r1
 8018a36:	602b      	str	r3, [r5, #0]
 8018a38:	f7eb fcc7 	bl	80043ca <_close>
 8018a3c:	1c43      	adds	r3, r0, #1
 8018a3e:	d102      	bne.n	8018a46 <_close_r+0x1a>
 8018a40:	682b      	ldr	r3, [r5, #0]
 8018a42:	b103      	cbz	r3, 8018a46 <_close_r+0x1a>
 8018a44:	6023      	str	r3, [r4, #0]
 8018a46:	bd38      	pop	{r3, r4, r5, pc}
 8018a48:	240029b0 	.word	0x240029b0

08018a4c <quorem>:
 8018a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a50:	6903      	ldr	r3, [r0, #16]
 8018a52:	690c      	ldr	r4, [r1, #16]
 8018a54:	42a3      	cmp	r3, r4
 8018a56:	4607      	mov	r7, r0
 8018a58:	f2c0 8081 	blt.w	8018b5e <quorem+0x112>
 8018a5c:	3c01      	subs	r4, #1
 8018a5e:	f101 0814 	add.w	r8, r1, #20
 8018a62:	f100 0514 	add.w	r5, r0, #20
 8018a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a6a:	9301      	str	r3, [sp, #4]
 8018a6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018a74:	3301      	adds	r3, #1
 8018a76:	429a      	cmp	r2, r3
 8018a78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018a7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8018a84:	d331      	bcc.n	8018aea <quorem+0x9e>
 8018a86:	f04f 0e00 	mov.w	lr, #0
 8018a8a:	4640      	mov	r0, r8
 8018a8c:	46ac      	mov	ip, r5
 8018a8e:	46f2      	mov	sl, lr
 8018a90:	f850 2b04 	ldr.w	r2, [r0], #4
 8018a94:	b293      	uxth	r3, r2
 8018a96:	fb06 e303 	mla	r3, r6, r3, lr
 8018a9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018a9e:	b29b      	uxth	r3, r3
 8018aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8018aa4:	f8dc a000 	ldr.w	sl, [ip]
 8018aa8:	0c12      	lsrs	r2, r2, #16
 8018aaa:	fa13 f38a 	uxtah	r3, r3, sl
 8018aae:	fb06 e202 	mla	r2, r6, r2, lr
 8018ab2:	9300      	str	r3, [sp, #0]
 8018ab4:	9b00      	ldr	r3, [sp, #0]
 8018ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018aba:	b292      	uxth	r2, r2
 8018abc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018ac4:	f8bd 3000 	ldrh.w	r3, [sp]
 8018ac8:	4581      	cmp	r9, r0
 8018aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ace:	f84c 3b04 	str.w	r3, [ip], #4
 8018ad2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018ad6:	d2db      	bcs.n	8018a90 <quorem+0x44>
 8018ad8:	f855 300b 	ldr.w	r3, [r5, fp]
 8018adc:	b92b      	cbnz	r3, 8018aea <quorem+0x9e>
 8018ade:	9b01      	ldr	r3, [sp, #4]
 8018ae0:	3b04      	subs	r3, #4
 8018ae2:	429d      	cmp	r5, r3
 8018ae4:	461a      	mov	r2, r3
 8018ae6:	d32e      	bcc.n	8018b46 <quorem+0xfa>
 8018ae8:	613c      	str	r4, [r7, #16]
 8018aea:	4638      	mov	r0, r7
 8018aec:	f001 fc16 	bl	801a31c <__mcmp>
 8018af0:	2800      	cmp	r0, #0
 8018af2:	db24      	blt.n	8018b3e <quorem+0xf2>
 8018af4:	3601      	adds	r6, #1
 8018af6:	4628      	mov	r0, r5
 8018af8:	f04f 0c00 	mov.w	ip, #0
 8018afc:	f858 2b04 	ldr.w	r2, [r8], #4
 8018b00:	f8d0 e000 	ldr.w	lr, [r0]
 8018b04:	b293      	uxth	r3, r2
 8018b06:	ebac 0303 	sub.w	r3, ip, r3
 8018b0a:	0c12      	lsrs	r2, r2, #16
 8018b0c:	fa13 f38e 	uxtah	r3, r3, lr
 8018b10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018b18:	b29b      	uxth	r3, r3
 8018b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018b1e:	45c1      	cmp	r9, r8
 8018b20:	f840 3b04 	str.w	r3, [r0], #4
 8018b24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018b28:	d2e8      	bcs.n	8018afc <quorem+0xb0>
 8018b2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018b32:	b922      	cbnz	r2, 8018b3e <quorem+0xf2>
 8018b34:	3b04      	subs	r3, #4
 8018b36:	429d      	cmp	r5, r3
 8018b38:	461a      	mov	r2, r3
 8018b3a:	d30a      	bcc.n	8018b52 <quorem+0x106>
 8018b3c:	613c      	str	r4, [r7, #16]
 8018b3e:	4630      	mov	r0, r6
 8018b40:	b003      	add	sp, #12
 8018b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b46:	6812      	ldr	r2, [r2, #0]
 8018b48:	3b04      	subs	r3, #4
 8018b4a:	2a00      	cmp	r2, #0
 8018b4c:	d1cc      	bne.n	8018ae8 <quorem+0x9c>
 8018b4e:	3c01      	subs	r4, #1
 8018b50:	e7c7      	b.n	8018ae2 <quorem+0x96>
 8018b52:	6812      	ldr	r2, [r2, #0]
 8018b54:	3b04      	subs	r3, #4
 8018b56:	2a00      	cmp	r2, #0
 8018b58:	d1f0      	bne.n	8018b3c <quorem+0xf0>
 8018b5a:	3c01      	subs	r4, #1
 8018b5c:	e7eb      	b.n	8018b36 <quorem+0xea>
 8018b5e:	2000      	movs	r0, #0
 8018b60:	e7ee      	b.n	8018b40 <quorem+0xf4>
 8018b62:	0000      	movs	r0, r0
 8018b64:	0000      	movs	r0, r0
	...

08018b68 <_dtoa_r>:
 8018b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b6c:	ed2d 8b02 	vpush	{d8}
 8018b70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018b72:	b091      	sub	sp, #68	; 0x44
 8018b74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018b78:	ec59 8b10 	vmov	r8, r9, d0
 8018b7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018b7e:	9106      	str	r1, [sp, #24]
 8018b80:	4606      	mov	r6, r0
 8018b82:	9208      	str	r2, [sp, #32]
 8018b84:	930c      	str	r3, [sp, #48]	; 0x30
 8018b86:	b975      	cbnz	r5, 8018ba6 <_dtoa_r+0x3e>
 8018b88:	2010      	movs	r0, #16
 8018b8a:	f001 f8e1 	bl	8019d50 <malloc>
 8018b8e:	4602      	mov	r2, r0
 8018b90:	6270      	str	r0, [r6, #36]	; 0x24
 8018b92:	b920      	cbnz	r0, 8018b9e <_dtoa_r+0x36>
 8018b94:	4baa      	ldr	r3, [pc, #680]	; (8018e40 <_dtoa_r+0x2d8>)
 8018b96:	21ea      	movs	r1, #234	; 0xea
 8018b98:	48aa      	ldr	r0, [pc, #680]	; (8018e44 <_dtoa_r+0x2dc>)
 8018b9a:	f002 f84f 	bl	801ac3c <__assert_func>
 8018b9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018ba2:	6005      	str	r5, [r0, #0]
 8018ba4:	60c5      	str	r5, [r0, #12]
 8018ba6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018ba8:	6819      	ldr	r1, [r3, #0]
 8018baa:	b151      	cbz	r1, 8018bc2 <_dtoa_r+0x5a>
 8018bac:	685a      	ldr	r2, [r3, #4]
 8018bae:	604a      	str	r2, [r1, #4]
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	4093      	lsls	r3, r2
 8018bb4:	608b      	str	r3, [r1, #8]
 8018bb6:	4630      	mov	r0, r6
 8018bb8:	f001 f924 	bl	8019e04 <_Bfree>
 8018bbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	601a      	str	r2, [r3, #0]
 8018bc2:	f1b9 0300 	subs.w	r3, r9, #0
 8018bc6:	bfbb      	ittet	lt
 8018bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018bcc:	9303      	strlt	r3, [sp, #12]
 8018bce:	2300      	movge	r3, #0
 8018bd0:	2201      	movlt	r2, #1
 8018bd2:	bfac      	ite	ge
 8018bd4:	6023      	strge	r3, [r4, #0]
 8018bd6:	6022      	strlt	r2, [r4, #0]
 8018bd8:	4b9b      	ldr	r3, [pc, #620]	; (8018e48 <_dtoa_r+0x2e0>)
 8018bda:	9c03      	ldr	r4, [sp, #12]
 8018bdc:	43a3      	bics	r3, r4
 8018bde:	d11c      	bne.n	8018c1a <_dtoa_r+0xb2>
 8018be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018be2:	f242 730f 	movw	r3, #9999	; 0x270f
 8018be6:	6013      	str	r3, [r2, #0]
 8018be8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018bec:	ea53 0308 	orrs.w	r3, r3, r8
 8018bf0:	f000 84fd 	beq.w	80195ee <_dtoa_r+0xa86>
 8018bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018bf6:	b963      	cbnz	r3, 8018c12 <_dtoa_r+0xaa>
 8018bf8:	4b94      	ldr	r3, [pc, #592]	; (8018e4c <_dtoa_r+0x2e4>)
 8018bfa:	e01f      	b.n	8018c3c <_dtoa_r+0xd4>
 8018bfc:	4b94      	ldr	r3, [pc, #592]	; (8018e50 <_dtoa_r+0x2e8>)
 8018bfe:	9301      	str	r3, [sp, #4]
 8018c00:	3308      	adds	r3, #8
 8018c02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018c04:	6013      	str	r3, [r2, #0]
 8018c06:	9801      	ldr	r0, [sp, #4]
 8018c08:	b011      	add	sp, #68	; 0x44
 8018c0a:	ecbd 8b02 	vpop	{d8}
 8018c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c12:	4b8e      	ldr	r3, [pc, #568]	; (8018e4c <_dtoa_r+0x2e4>)
 8018c14:	9301      	str	r3, [sp, #4]
 8018c16:	3303      	adds	r3, #3
 8018c18:	e7f3      	b.n	8018c02 <_dtoa_r+0x9a>
 8018c1a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018c1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c26:	d10b      	bne.n	8018c40 <_dtoa_r+0xd8>
 8018c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	6013      	str	r3, [r2, #0]
 8018c2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 84d9 	beq.w	80195e8 <_dtoa_r+0xa80>
 8018c36:	4887      	ldr	r0, [pc, #540]	; (8018e54 <_dtoa_r+0x2ec>)
 8018c38:	6018      	str	r0, [r3, #0]
 8018c3a:	1e43      	subs	r3, r0, #1
 8018c3c:	9301      	str	r3, [sp, #4]
 8018c3e:	e7e2      	b.n	8018c06 <_dtoa_r+0x9e>
 8018c40:	a90f      	add	r1, sp, #60	; 0x3c
 8018c42:	aa0e      	add	r2, sp, #56	; 0x38
 8018c44:	4630      	mov	r0, r6
 8018c46:	eeb0 0b48 	vmov.f64	d0, d8
 8018c4a:	f001 fc89 	bl	801a560 <__d2b>
 8018c4e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8018c52:	4605      	mov	r5, r0
 8018c54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018c56:	2900      	cmp	r1, #0
 8018c58:	d046      	beq.n	8018ce8 <_dtoa_r+0x180>
 8018c5a:	ee18 4a90 	vmov	r4, s17
 8018c5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018c62:	ec53 2b18 	vmov	r2, r3, d8
 8018c66:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8018c6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018c6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018c72:	2400      	movs	r4, #0
 8018c74:	ec43 2b16 	vmov	d6, r2, r3
 8018c78:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8018c7c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018e28 <_dtoa_r+0x2c0>
 8018c80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8018c84:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8018e30 <_dtoa_r+0x2c8>
 8018c88:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018c8c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018e38 <_dtoa_r+0x2d0>
 8018c90:	ee07 1a90 	vmov	s15, r1
 8018c94:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018c98:	eeb0 7b46 	vmov.f64	d7, d6
 8018c9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018ca0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018ca4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cac:	ee16 ba90 	vmov	fp, s13
 8018cb0:	940a      	str	r4, [sp, #40]	; 0x28
 8018cb2:	d508      	bpl.n	8018cc6 <_dtoa_r+0x15e>
 8018cb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018cb8:	eeb4 6b47 	vcmp.f64	d6, d7
 8018cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cc0:	bf18      	it	ne
 8018cc2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8018cc6:	f1bb 0f16 	cmp.w	fp, #22
 8018cca:	d82f      	bhi.n	8018d2c <_dtoa_r+0x1c4>
 8018ccc:	4b62      	ldr	r3, [pc, #392]	; (8018e58 <_dtoa_r+0x2f0>)
 8018cce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018cd2:	ed93 7b00 	vldr	d7, [r3]
 8018cd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cde:	d501      	bpl.n	8018ce4 <_dtoa_r+0x17c>
 8018ce0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	e022      	b.n	8018d2e <_dtoa_r+0x1c6>
 8018ce8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018cea:	4401      	add	r1, r0
 8018cec:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8018cf0:	2b20      	cmp	r3, #32
 8018cf2:	bfc1      	itttt	gt
 8018cf4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018cf8:	fa04 f303 	lslgt.w	r3, r4, r3
 8018cfc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8018d00:	fa28 f804 	lsrgt.w	r8, r8, r4
 8018d04:	bfd6      	itet	le
 8018d06:	f1c3 0320 	rsble	r3, r3, #32
 8018d0a:	ea43 0808 	orrgt.w	r8, r3, r8
 8018d0e:	fa08 f803 	lslle.w	r8, r8, r3
 8018d12:	ee07 8a90 	vmov	s15, r8
 8018d16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018d1a:	3901      	subs	r1, #1
 8018d1c:	ee17 4a90 	vmov	r4, s15
 8018d20:	ec53 2b17 	vmov	r2, r3, d7
 8018d24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8018d28:	2401      	movs	r4, #1
 8018d2a:	e7a3      	b.n	8018c74 <_dtoa_r+0x10c>
 8018d2c:	2301      	movs	r3, #1
 8018d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d30:	1a43      	subs	r3, r0, r1
 8018d32:	1e5a      	subs	r2, r3, #1
 8018d34:	bf45      	ittet	mi
 8018d36:	f1c3 0301 	rsbmi	r3, r3, #1
 8018d3a:	9304      	strmi	r3, [sp, #16]
 8018d3c:	2300      	movpl	r3, #0
 8018d3e:	2300      	movmi	r3, #0
 8018d40:	9205      	str	r2, [sp, #20]
 8018d42:	bf54      	ite	pl
 8018d44:	9304      	strpl	r3, [sp, #16]
 8018d46:	9305      	strmi	r3, [sp, #20]
 8018d48:	f1bb 0f00 	cmp.w	fp, #0
 8018d4c:	db18      	blt.n	8018d80 <_dtoa_r+0x218>
 8018d4e:	9b05      	ldr	r3, [sp, #20]
 8018d50:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018d54:	445b      	add	r3, fp
 8018d56:	9305      	str	r3, [sp, #20]
 8018d58:	2300      	movs	r3, #0
 8018d5a:	9a06      	ldr	r2, [sp, #24]
 8018d5c:	2a09      	cmp	r2, #9
 8018d5e:	d849      	bhi.n	8018df4 <_dtoa_r+0x28c>
 8018d60:	2a05      	cmp	r2, #5
 8018d62:	bfc4      	itt	gt
 8018d64:	3a04      	subgt	r2, #4
 8018d66:	9206      	strgt	r2, [sp, #24]
 8018d68:	9a06      	ldr	r2, [sp, #24]
 8018d6a:	f1a2 0202 	sub.w	r2, r2, #2
 8018d6e:	bfcc      	ite	gt
 8018d70:	2400      	movgt	r4, #0
 8018d72:	2401      	movle	r4, #1
 8018d74:	2a03      	cmp	r2, #3
 8018d76:	d848      	bhi.n	8018e0a <_dtoa_r+0x2a2>
 8018d78:	e8df f002 	tbb	[pc, r2]
 8018d7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8018d80:	9b04      	ldr	r3, [sp, #16]
 8018d82:	2200      	movs	r2, #0
 8018d84:	eba3 030b 	sub.w	r3, r3, fp
 8018d88:	9304      	str	r3, [sp, #16]
 8018d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8018d8c:	f1cb 0300 	rsb	r3, fp, #0
 8018d90:	e7e3      	b.n	8018d5a <_dtoa_r+0x1f2>
 8018d92:	2200      	movs	r2, #0
 8018d94:	9207      	str	r2, [sp, #28]
 8018d96:	9a08      	ldr	r2, [sp, #32]
 8018d98:	2a00      	cmp	r2, #0
 8018d9a:	dc39      	bgt.n	8018e10 <_dtoa_r+0x2a8>
 8018d9c:	f04f 0a01 	mov.w	sl, #1
 8018da0:	46d1      	mov	r9, sl
 8018da2:	4652      	mov	r2, sl
 8018da4:	f8cd a020 	str.w	sl, [sp, #32]
 8018da8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8018daa:	2100      	movs	r1, #0
 8018dac:	6079      	str	r1, [r7, #4]
 8018dae:	2004      	movs	r0, #4
 8018db0:	f100 0c14 	add.w	ip, r0, #20
 8018db4:	4594      	cmp	ip, r2
 8018db6:	6879      	ldr	r1, [r7, #4]
 8018db8:	d92f      	bls.n	8018e1a <_dtoa_r+0x2b2>
 8018dba:	4630      	mov	r0, r6
 8018dbc:	930d      	str	r3, [sp, #52]	; 0x34
 8018dbe:	f000 ffe1 	bl	8019d84 <_Balloc>
 8018dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018dc4:	9001      	str	r0, [sp, #4]
 8018dc6:	4602      	mov	r2, r0
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d149      	bne.n	8018e60 <_dtoa_r+0x2f8>
 8018dcc:	4b23      	ldr	r3, [pc, #140]	; (8018e5c <_dtoa_r+0x2f4>)
 8018dce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018dd2:	e6e1      	b.n	8018b98 <_dtoa_r+0x30>
 8018dd4:	2201      	movs	r2, #1
 8018dd6:	e7dd      	b.n	8018d94 <_dtoa_r+0x22c>
 8018dd8:	2200      	movs	r2, #0
 8018dda:	9207      	str	r2, [sp, #28]
 8018ddc:	9a08      	ldr	r2, [sp, #32]
 8018dde:	eb0b 0a02 	add.w	sl, fp, r2
 8018de2:	f10a 0901 	add.w	r9, sl, #1
 8018de6:	464a      	mov	r2, r9
 8018de8:	2a01      	cmp	r2, #1
 8018dea:	bfb8      	it	lt
 8018dec:	2201      	movlt	r2, #1
 8018dee:	e7db      	b.n	8018da8 <_dtoa_r+0x240>
 8018df0:	2201      	movs	r2, #1
 8018df2:	e7f2      	b.n	8018dda <_dtoa_r+0x272>
 8018df4:	2401      	movs	r4, #1
 8018df6:	2200      	movs	r2, #0
 8018df8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8018dfc:	f04f 3aff 	mov.w	sl, #4294967295
 8018e00:	2100      	movs	r1, #0
 8018e02:	46d1      	mov	r9, sl
 8018e04:	2212      	movs	r2, #18
 8018e06:	9108      	str	r1, [sp, #32]
 8018e08:	e7ce      	b.n	8018da8 <_dtoa_r+0x240>
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	9207      	str	r2, [sp, #28]
 8018e0e:	e7f5      	b.n	8018dfc <_dtoa_r+0x294>
 8018e10:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018e14:	46d1      	mov	r9, sl
 8018e16:	4652      	mov	r2, sl
 8018e18:	e7c6      	b.n	8018da8 <_dtoa_r+0x240>
 8018e1a:	3101      	adds	r1, #1
 8018e1c:	6079      	str	r1, [r7, #4]
 8018e1e:	0040      	lsls	r0, r0, #1
 8018e20:	e7c6      	b.n	8018db0 <_dtoa_r+0x248>
 8018e22:	bf00      	nop
 8018e24:	f3af 8000 	nop.w
 8018e28:	636f4361 	.word	0x636f4361
 8018e2c:	3fd287a7 	.word	0x3fd287a7
 8018e30:	8b60c8b3 	.word	0x8b60c8b3
 8018e34:	3fc68a28 	.word	0x3fc68a28
 8018e38:	509f79fb 	.word	0x509f79fb
 8018e3c:	3fd34413 	.word	0x3fd34413
 8018e40:	0801c9ce 	.word	0x0801c9ce
 8018e44:	0801c9e5 	.word	0x0801c9e5
 8018e48:	7ff00000 	.word	0x7ff00000
 8018e4c:	0801c9ca 	.word	0x0801c9ca
 8018e50:	0801c9c1 	.word	0x0801c9c1
 8018e54:	0801c841 	.word	0x0801c841
 8018e58:	0801cb50 	.word	0x0801cb50
 8018e5c:	0801ca40 	.word	0x0801ca40
 8018e60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018e62:	9901      	ldr	r1, [sp, #4]
 8018e64:	6011      	str	r1, [r2, #0]
 8018e66:	f1b9 0f0e 	cmp.w	r9, #14
 8018e6a:	d86c      	bhi.n	8018f46 <_dtoa_r+0x3de>
 8018e6c:	2c00      	cmp	r4, #0
 8018e6e:	d06a      	beq.n	8018f46 <_dtoa_r+0x3de>
 8018e70:	f1bb 0f00 	cmp.w	fp, #0
 8018e74:	f340 80a0 	ble.w	8018fb8 <_dtoa_r+0x450>
 8018e78:	49c1      	ldr	r1, [pc, #772]	; (8019180 <_dtoa_r+0x618>)
 8018e7a:	f00b 020f 	and.w	r2, fp, #15
 8018e7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8018e82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018e86:	ed92 7b00 	vldr	d7, [r2]
 8018e8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8018e8e:	f000 8087 	beq.w	8018fa0 <_dtoa_r+0x438>
 8018e92:	4abc      	ldr	r2, [pc, #752]	; (8019184 <_dtoa_r+0x61c>)
 8018e94:	ed92 6b08 	vldr	d6, [r2, #32]
 8018e98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018e9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018ea0:	f001 010f 	and.w	r1, r1, #15
 8018ea4:	2203      	movs	r2, #3
 8018ea6:	48b7      	ldr	r0, [pc, #732]	; (8019184 <_dtoa_r+0x61c>)
 8018ea8:	2900      	cmp	r1, #0
 8018eaa:	d17b      	bne.n	8018fa4 <_dtoa_r+0x43c>
 8018eac:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018eb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018eb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018eba:	2900      	cmp	r1, #0
 8018ebc:	f000 80a2 	beq.w	8019004 <_dtoa_r+0x49c>
 8018ec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018ec4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ec8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed0:	f140 8098 	bpl.w	8019004 <_dtoa_r+0x49c>
 8018ed4:	f1b9 0f00 	cmp.w	r9, #0
 8018ed8:	f000 8094 	beq.w	8019004 <_dtoa_r+0x49c>
 8018edc:	f1ba 0f00 	cmp.w	sl, #0
 8018ee0:	dd2f      	ble.n	8018f42 <_dtoa_r+0x3da>
 8018ee2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8018ee6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018eea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018eee:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018ef2:	3201      	adds	r2, #1
 8018ef4:	4650      	mov	r0, sl
 8018ef6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018efa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8018efe:	ee07 2a90 	vmov	s15, r2
 8018f02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018f06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018f0a:	ee15 4a90 	vmov	r4, s11
 8018f0e:	ec52 1b15 	vmov	r1, r2, d5
 8018f12:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8018f16:	2800      	cmp	r0, #0
 8018f18:	d177      	bne.n	801900a <_dtoa_r+0x4a2>
 8018f1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018f1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018f22:	ec42 1b17 	vmov	d7, r1, r2
 8018f26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f2e:	f300 8263 	bgt.w	80193f8 <_dtoa_r+0x890>
 8018f32:	eeb1 7b47 	vneg.f64	d7, d7
 8018f36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f3e:	f100 8258 	bmi.w	80193f2 <_dtoa_r+0x88a>
 8018f42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f48:	2a00      	cmp	r2, #0
 8018f4a:	f2c0 811d 	blt.w	8019188 <_dtoa_r+0x620>
 8018f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8018f52:	f300 8119 	bgt.w	8019188 <_dtoa_r+0x620>
 8018f56:	4b8a      	ldr	r3, [pc, #552]	; (8019180 <_dtoa_r+0x618>)
 8018f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018f5c:	ed93 6b00 	vldr	d6, [r3]
 8018f60:	9b08      	ldr	r3, [sp, #32]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	f280 80b7 	bge.w	80190d6 <_dtoa_r+0x56e>
 8018f68:	f1b9 0f00 	cmp.w	r9, #0
 8018f6c:	f300 80b3 	bgt.w	80190d6 <_dtoa_r+0x56e>
 8018f70:	f040 823f 	bne.w	80193f2 <_dtoa_r+0x88a>
 8018f74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018f78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018f7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018f80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f88:	464c      	mov	r4, r9
 8018f8a:	464f      	mov	r7, r9
 8018f8c:	f280 8215 	bge.w	80193ba <_dtoa_r+0x852>
 8018f90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018f94:	2331      	movs	r3, #49	; 0x31
 8018f96:	f808 3b01 	strb.w	r3, [r8], #1
 8018f9a:	f10b 0b01 	add.w	fp, fp, #1
 8018f9e:	e211      	b.n	80193c4 <_dtoa_r+0x85c>
 8018fa0:	2202      	movs	r2, #2
 8018fa2:	e780      	b.n	8018ea6 <_dtoa_r+0x33e>
 8018fa4:	07cc      	lsls	r4, r1, #31
 8018fa6:	d504      	bpl.n	8018fb2 <_dtoa_r+0x44a>
 8018fa8:	ed90 6b00 	vldr	d6, [r0]
 8018fac:	3201      	adds	r2, #1
 8018fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018fb2:	1049      	asrs	r1, r1, #1
 8018fb4:	3008      	adds	r0, #8
 8018fb6:	e777      	b.n	8018ea8 <_dtoa_r+0x340>
 8018fb8:	d022      	beq.n	8019000 <_dtoa_r+0x498>
 8018fba:	f1cb 0100 	rsb	r1, fp, #0
 8018fbe:	4a70      	ldr	r2, [pc, #448]	; (8019180 <_dtoa_r+0x618>)
 8018fc0:	f001 000f 	and.w	r0, r1, #15
 8018fc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018fc8:	ed92 7b00 	vldr	d7, [r2]
 8018fcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018fd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018fd4:	486b      	ldr	r0, [pc, #428]	; (8019184 <_dtoa_r+0x61c>)
 8018fd6:	1109      	asrs	r1, r1, #4
 8018fd8:	2400      	movs	r4, #0
 8018fda:	2202      	movs	r2, #2
 8018fdc:	b929      	cbnz	r1, 8018fea <_dtoa_r+0x482>
 8018fde:	2c00      	cmp	r4, #0
 8018fe0:	f43f af6a 	beq.w	8018eb8 <_dtoa_r+0x350>
 8018fe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018fe8:	e766      	b.n	8018eb8 <_dtoa_r+0x350>
 8018fea:	07cf      	lsls	r7, r1, #31
 8018fec:	d505      	bpl.n	8018ffa <_dtoa_r+0x492>
 8018fee:	ed90 6b00 	vldr	d6, [r0]
 8018ff2:	3201      	adds	r2, #1
 8018ff4:	2401      	movs	r4, #1
 8018ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ffa:	1049      	asrs	r1, r1, #1
 8018ffc:	3008      	adds	r0, #8
 8018ffe:	e7ed      	b.n	8018fdc <_dtoa_r+0x474>
 8019000:	2202      	movs	r2, #2
 8019002:	e759      	b.n	8018eb8 <_dtoa_r+0x350>
 8019004:	465f      	mov	r7, fp
 8019006:	4648      	mov	r0, r9
 8019008:	e775      	b.n	8018ef6 <_dtoa_r+0x38e>
 801900a:	ec42 1b17 	vmov	d7, r1, r2
 801900e:	4a5c      	ldr	r2, [pc, #368]	; (8019180 <_dtoa_r+0x618>)
 8019010:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019014:	ed12 4b02 	vldr	d4, [r2, #-8]
 8019018:	9a01      	ldr	r2, [sp, #4]
 801901a:	1814      	adds	r4, r2, r0
 801901c:	9a07      	ldr	r2, [sp, #28]
 801901e:	b352      	cbz	r2, 8019076 <_dtoa_r+0x50e>
 8019020:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8019024:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019028:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801902c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019030:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019034:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019038:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801903c:	ee14 2a90 	vmov	r2, s9
 8019040:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019044:	3230      	adds	r2, #48	; 0x30
 8019046:	ee36 6b45 	vsub.f64	d6, d6, d5
 801904a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019052:	f808 2b01 	strb.w	r2, [r8], #1
 8019056:	d439      	bmi.n	80190cc <_dtoa_r+0x564>
 8019058:	ee32 5b46 	vsub.f64	d5, d2, d6
 801905c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019064:	d472      	bmi.n	801914c <_dtoa_r+0x5e4>
 8019066:	45a0      	cmp	r8, r4
 8019068:	f43f af6b 	beq.w	8018f42 <_dtoa_r+0x3da>
 801906c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019070:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019074:	e7e0      	b.n	8019038 <_dtoa_r+0x4d0>
 8019076:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801907a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801907e:	4621      	mov	r1, r4
 8019080:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019084:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019088:	ee14 2a90 	vmov	r2, s9
 801908c:	3230      	adds	r2, #48	; 0x30
 801908e:	f808 2b01 	strb.w	r2, [r8], #1
 8019092:	45a0      	cmp	r8, r4
 8019094:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019098:	ee36 6b45 	vsub.f64	d6, d6, d5
 801909c:	d118      	bne.n	80190d0 <_dtoa_r+0x568>
 801909e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80190a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80190a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80190aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ae:	dc4d      	bgt.n	801914c <_dtoa_r+0x5e4>
 80190b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80190b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80190b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190bc:	f57f af41 	bpl.w	8018f42 <_dtoa_r+0x3da>
 80190c0:	4688      	mov	r8, r1
 80190c2:	3901      	subs	r1, #1
 80190c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80190c8:	2b30      	cmp	r3, #48	; 0x30
 80190ca:	d0f9      	beq.n	80190c0 <_dtoa_r+0x558>
 80190cc:	46bb      	mov	fp, r7
 80190ce:	e02a      	b.n	8019126 <_dtoa_r+0x5be>
 80190d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80190d4:	e7d6      	b.n	8019084 <_dtoa_r+0x51c>
 80190d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80190da:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80190de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80190e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80190e6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80190ea:	ee15 3a10 	vmov	r3, s10
 80190ee:	3330      	adds	r3, #48	; 0x30
 80190f0:	f808 3b01 	strb.w	r3, [r8], #1
 80190f4:	9b01      	ldr	r3, [sp, #4]
 80190f6:	eba8 0303 	sub.w	r3, r8, r3
 80190fa:	4599      	cmp	r9, r3
 80190fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019100:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019104:	d133      	bne.n	801916e <_dtoa_r+0x606>
 8019106:	ee37 7b07 	vadd.f64	d7, d7, d7
 801910a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801910e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019112:	dc1a      	bgt.n	801914a <_dtoa_r+0x5e2>
 8019114:	eeb4 7b46 	vcmp.f64	d7, d6
 8019118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801911c:	d103      	bne.n	8019126 <_dtoa_r+0x5be>
 801911e:	ee15 3a10 	vmov	r3, s10
 8019122:	07d9      	lsls	r1, r3, #31
 8019124:	d411      	bmi.n	801914a <_dtoa_r+0x5e2>
 8019126:	4629      	mov	r1, r5
 8019128:	4630      	mov	r0, r6
 801912a:	f000 fe6b 	bl	8019e04 <_Bfree>
 801912e:	2300      	movs	r3, #0
 8019130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019132:	f888 3000 	strb.w	r3, [r8]
 8019136:	f10b 0301 	add.w	r3, fp, #1
 801913a:	6013      	str	r3, [r2, #0]
 801913c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801913e:	2b00      	cmp	r3, #0
 8019140:	f43f ad61 	beq.w	8018c06 <_dtoa_r+0x9e>
 8019144:	f8c3 8000 	str.w	r8, [r3]
 8019148:	e55d      	b.n	8018c06 <_dtoa_r+0x9e>
 801914a:	465f      	mov	r7, fp
 801914c:	4643      	mov	r3, r8
 801914e:	4698      	mov	r8, r3
 8019150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019154:	2a39      	cmp	r2, #57	; 0x39
 8019156:	d106      	bne.n	8019166 <_dtoa_r+0x5fe>
 8019158:	9a01      	ldr	r2, [sp, #4]
 801915a:	429a      	cmp	r2, r3
 801915c:	d1f7      	bne.n	801914e <_dtoa_r+0x5e6>
 801915e:	9901      	ldr	r1, [sp, #4]
 8019160:	2230      	movs	r2, #48	; 0x30
 8019162:	3701      	adds	r7, #1
 8019164:	700a      	strb	r2, [r1, #0]
 8019166:	781a      	ldrb	r2, [r3, #0]
 8019168:	3201      	adds	r2, #1
 801916a:	701a      	strb	r2, [r3, #0]
 801916c:	e7ae      	b.n	80190cc <_dtoa_r+0x564>
 801916e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019172:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917a:	d1b2      	bne.n	80190e2 <_dtoa_r+0x57a>
 801917c:	e7d3      	b.n	8019126 <_dtoa_r+0x5be>
 801917e:	bf00      	nop
 8019180:	0801cb50 	.word	0x0801cb50
 8019184:	0801cb28 	.word	0x0801cb28
 8019188:	9907      	ldr	r1, [sp, #28]
 801918a:	2900      	cmp	r1, #0
 801918c:	f000 80d0 	beq.w	8019330 <_dtoa_r+0x7c8>
 8019190:	9906      	ldr	r1, [sp, #24]
 8019192:	2901      	cmp	r1, #1
 8019194:	f300 80b4 	bgt.w	8019300 <_dtoa_r+0x798>
 8019198:	990a      	ldr	r1, [sp, #40]	; 0x28
 801919a:	2900      	cmp	r1, #0
 801919c:	f000 80ac 	beq.w	80192f8 <_dtoa_r+0x790>
 80191a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80191a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80191a8:	461c      	mov	r4, r3
 80191aa:	930a      	str	r3, [sp, #40]	; 0x28
 80191ac:	9b04      	ldr	r3, [sp, #16]
 80191ae:	4413      	add	r3, r2
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	9b05      	ldr	r3, [sp, #20]
 80191b4:	2101      	movs	r1, #1
 80191b6:	4413      	add	r3, r2
 80191b8:	4630      	mov	r0, r6
 80191ba:	9305      	str	r3, [sp, #20]
 80191bc:	f000 ff24 	bl	801a008 <__i2b>
 80191c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191c2:	4607      	mov	r7, r0
 80191c4:	f1b8 0f00 	cmp.w	r8, #0
 80191c8:	dd0d      	ble.n	80191e6 <_dtoa_r+0x67e>
 80191ca:	9a05      	ldr	r2, [sp, #20]
 80191cc:	2a00      	cmp	r2, #0
 80191ce:	dd0a      	ble.n	80191e6 <_dtoa_r+0x67e>
 80191d0:	4542      	cmp	r2, r8
 80191d2:	9904      	ldr	r1, [sp, #16]
 80191d4:	bfa8      	it	ge
 80191d6:	4642      	movge	r2, r8
 80191d8:	1a89      	subs	r1, r1, r2
 80191da:	9104      	str	r1, [sp, #16]
 80191dc:	9905      	ldr	r1, [sp, #20]
 80191de:	eba8 0802 	sub.w	r8, r8, r2
 80191e2:	1a8a      	subs	r2, r1, r2
 80191e4:	9205      	str	r2, [sp, #20]
 80191e6:	b303      	cbz	r3, 801922a <_dtoa_r+0x6c2>
 80191e8:	9a07      	ldr	r2, [sp, #28]
 80191ea:	2a00      	cmp	r2, #0
 80191ec:	f000 80a5 	beq.w	801933a <_dtoa_r+0x7d2>
 80191f0:	2c00      	cmp	r4, #0
 80191f2:	dd13      	ble.n	801921c <_dtoa_r+0x6b4>
 80191f4:	4639      	mov	r1, r7
 80191f6:	4622      	mov	r2, r4
 80191f8:	4630      	mov	r0, r6
 80191fa:	930d      	str	r3, [sp, #52]	; 0x34
 80191fc:	f000 ffc4 	bl	801a188 <__pow5mult>
 8019200:	462a      	mov	r2, r5
 8019202:	4601      	mov	r1, r0
 8019204:	4607      	mov	r7, r0
 8019206:	4630      	mov	r0, r6
 8019208:	f000 ff14 	bl	801a034 <__multiply>
 801920c:	4629      	mov	r1, r5
 801920e:	900a      	str	r0, [sp, #40]	; 0x28
 8019210:	4630      	mov	r0, r6
 8019212:	f000 fdf7 	bl	8019e04 <_Bfree>
 8019216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801921a:	4615      	mov	r5, r2
 801921c:	1b1a      	subs	r2, r3, r4
 801921e:	d004      	beq.n	801922a <_dtoa_r+0x6c2>
 8019220:	4629      	mov	r1, r5
 8019222:	4630      	mov	r0, r6
 8019224:	f000 ffb0 	bl	801a188 <__pow5mult>
 8019228:	4605      	mov	r5, r0
 801922a:	2101      	movs	r1, #1
 801922c:	4630      	mov	r0, r6
 801922e:	f000 feeb 	bl	801a008 <__i2b>
 8019232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019234:	2b00      	cmp	r3, #0
 8019236:	4604      	mov	r4, r0
 8019238:	f340 8081 	ble.w	801933e <_dtoa_r+0x7d6>
 801923c:	461a      	mov	r2, r3
 801923e:	4601      	mov	r1, r0
 8019240:	4630      	mov	r0, r6
 8019242:	f000 ffa1 	bl	801a188 <__pow5mult>
 8019246:	9b06      	ldr	r3, [sp, #24]
 8019248:	2b01      	cmp	r3, #1
 801924a:	4604      	mov	r4, r0
 801924c:	dd7a      	ble.n	8019344 <_dtoa_r+0x7dc>
 801924e:	2300      	movs	r3, #0
 8019250:	930a      	str	r3, [sp, #40]	; 0x28
 8019252:	6922      	ldr	r2, [r4, #16]
 8019254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019258:	6910      	ldr	r0, [r2, #16]
 801925a:	f000 fe85 	bl	8019f68 <__hi0bits>
 801925e:	f1c0 0020 	rsb	r0, r0, #32
 8019262:	9b05      	ldr	r3, [sp, #20]
 8019264:	4418      	add	r0, r3
 8019266:	f010 001f 	ands.w	r0, r0, #31
 801926a:	f000 808c 	beq.w	8019386 <_dtoa_r+0x81e>
 801926e:	f1c0 0220 	rsb	r2, r0, #32
 8019272:	2a04      	cmp	r2, #4
 8019274:	f340 8085 	ble.w	8019382 <_dtoa_r+0x81a>
 8019278:	f1c0 001c 	rsb	r0, r0, #28
 801927c:	9b04      	ldr	r3, [sp, #16]
 801927e:	4403      	add	r3, r0
 8019280:	9304      	str	r3, [sp, #16]
 8019282:	9b05      	ldr	r3, [sp, #20]
 8019284:	4403      	add	r3, r0
 8019286:	4480      	add	r8, r0
 8019288:	9305      	str	r3, [sp, #20]
 801928a:	9b04      	ldr	r3, [sp, #16]
 801928c:	2b00      	cmp	r3, #0
 801928e:	dd05      	ble.n	801929c <_dtoa_r+0x734>
 8019290:	4629      	mov	r1, r5
 8019292:	461a      	mov	r2, r3
 8019294:	4630      	mov	r0, r6
 8019296:	f000 ffd1 	bl	801a23c <__lshift>
 801929a:	4605      	mov	r5, r0
 801929c:	9b05      	ldr	r3, [sp, #20]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	dd05      	ble.n	80192ae <_dtoa_r+0x746>
 80192a2:	4621      	mov	r1, r4
 80192a4:	461a      	mov	r2, r3
 80192a6:	4630      	mov	r0, r6
 80192a8:	f000 ffc8 	bl	801a23c <__lshift>
 80192ac:	4604      	mov	r4, r0
 80192ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d06a      	beq.n	801938a <_dtoa_r+0x822>
 80192b4:	4621      	mov	r1, r4
 80192b6:	4628      	mov	r0, r5
 80192b8:	f001 f830 	bl	801a31c <__mcmp>
 80192bc:	2800      	cmp	r0, #0
 80192be:	da64      	bge.n	801938a <_dtoa_r+0x822>
 80192c0:	2300      	movs	r3, #0
 80192c2:	4629      	mov	r1, r5
 80192c4:	220a      	movs	r2, #10
 80192c6:	4630      	mov	r0, r6
 80192c8:	f000 fdbe 	bl	8019e48 <__multadd>
 80192cc:	9b07      	ldr	r3, [sp, #28]
 80192ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80192d2:	4605      	mov	r5, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	f000 8191 	beq.w	80195fc <_dtoa_r+0xa94>
 80192da:	4639      	mov	r1, r7
 80192dc:	2300      	movs	r3, #0
 80192de:	220a      	movs	r2, #10
 80192e0:	4630      	mov	r0, r6
 80192e2:	f000 fdb1 	bl	8019e48 <__multadd>
 80192e6:	f1ba 0f00 	cmp.w	sl, #0
 80192ea:	4607      	mov	r7, r0
 80192ec:	f300 808d 	bgt.w	801940a <_dtoa_r+0x8a2>
 80192f0:	9b06      	ldr	r3, [sp, #24]
 80192f2:	2b02      	cmp	r3, #2
 80192f4:	dc50      	bgt.n	8019398 <_dtoa_r+0x830>
 80192f6:	e088      	b.n	801940a <_dtoa_r+0x8a2>
 80192f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80192fe:	e751      	b.n	80191a4 <_dtoa_r+0x63c>
 8019300:	f109 34ff 	add.w	r4, r9, #4294967295
 8019304:	42a3      	cmp	r3, r4
 8019306:	bfbf      	itttt	lt
 8019308:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801930a:	1ae3      	sublt	r3, r4, r3
 801930c:	18d2      	addlt	r2, r2, r3
 801930e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8019310:	bfb6      	itet	lt
 8019312:	4623      	movlt	r3, r4
 8019314:	1b1c      	subge	r4, r3, r4
 8019316:	2400      	movlt	r4, #0
 8019318:	f1b9 0f00 	cmp.w	r9, #0
 801931c:	bfb5      	itete	lt
 801931e:	9a04      	ldrlt	r2, [sp, #16]
 8019320:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8019324:	eba2 0809 	sublt.w	r8, r2, r9
 8019328:	464a      	movge	r2, r9
 801932a:	bfb8      	it	lt
 801932c:	2200      	movlt	r2, #0
 801932e:	e73c      	b.n	80191aa <_dtoa_r+0x642>
 8019330:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019334:	9f07      	ldr	r7, [sp, #28]
 8019336:	461c      	mov	r4, r3
 8019338:	e744      	b.n	80191c4 <_dtoa_r+0x65c>
 801933a:	461a      	mov	r2, r3
 801933c:	e770      	b.n	8019220 <_dtoa_r+0x6b8>
 801933e:	9b06      	ldr	r3, [sp, #24]
 8019340:	2b01      	cmp	r3, #1
 8019342:	dc18      	bgt.n	8019376 <_dtoa_r+0x80e>
 8019344:	9b02      	ldr	r3, [sp, #8]
 8019346:	b9b3      	cbnz	r3, 8019376 <_dtoa_r+0x80e>
 8019348:	9b03      	ldr	r3, [sp, #12]
 801934a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801934e:	b9a2      	cbnz	r2, 801937a <_dtoa_r+0x812>
 8019350:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019354:	0d12      	lsrs	r2, r2, #20
 8019356:	0512      	lsls	r2, r2, #20
 8019358:	b18a      	cbz	r2, 801937e <_dtoa_r+0x816>
 801935a:	9b04      	ldr	r3, [sp, #16]
 801935c:	3301      	adds	r3, #1
 801935e:	9304      	str	r3, [sp, #16]
 8019360:	9b05      	ldr	r3, [sp, #20]
 8019362:	3301      	adds	r3, #1
 8019364:	9305      	str	r3, [sp, #20]
 8019366:	2301      	movs	r3, #1
 8019368:	930a      	str	r3, [sp, #40]	; 0x28
 801936a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801936c:	2b00      	cmp	r3, #0
 801936e:	f47f af70 	bne.w	8019252 <_dtoa_r+0x6ea>
 8019372:	2001      	movs	r0, #1
 8019374:	e775      	b.n	8019262 <_dtoa_r+0x6fa>
 8019376:	2300      	movs	r3, #0
 8019378:	e7f6      	b.n	8019368 <_dtoa_r+0x800>
 801937a:	9b02      	ldr	r3, [sp, #8]
 801937c:	e7f4      	b.n	8019368 <_dtoa_r+0x800>
 801937e:	920a      	str	r2, [sp, #40]	; 0x28
 8019380:	e7f3      	b.n	801936a <_dtoa_r+0x802>
 8019382:	d082      	beq.n	801928a <_dtoa_r+0x722>
 8019384:	4610      	mov	r0, r2
 8019386:	301c      	adds	r0, #28
 8019388:	e778      	b.n	801927c <_dtoa_r+0x714>
 801938a:	f1b9 0f00 	cmp.w	r9, #0
 801938e:	dc37      	bgt.n	8019400 <_dtoa_r+0x898>
 8019390:	9b06      	ldr	r3, [sp, #24]
 8019392:	2b02      	cmp	r3, #2
 8019394:	dd34      	ble.n	8019400 <_dtoa_r+0x898>
 8019396:	46ca      	mov	sl, r9
 8019398:	f1ba 0f00 	cmp.w	sl, #0
 801939c:	d10d      	bne.n	80193ba <_dtoa_r+0x852>
 801939e:	4621      	mov	r1, r4
 80193a0:	4653      	mov	r3, sl
 80193a2:	2205      	movs	r2, #5
 80193a4:	4630      	mov	r0, r6
 80193a6:	f000 fd4f 	bl	8019e48 <__multadd>
 80193aa:	4601      	mov	r1, r0
 80193ac:	4604      	mov	r4, r0
 80193ae:	4628      	mov	r0, r5
 80193b0:	f000 ffb4 	bl	801a31c <__mcmp>
 80193b4:	2800      	cmp	r0, #0
 80193b6:	f73f adeb 	bgt.w	8018f90 <_dtoa_r+0x428>
 80193ba:	9b08      	ldr	r3, [sp, #32]
 80193bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80193c0:	ea6f 0b03 	mvn.w	fp, r3
 80193c4:	f04f 0900 	mov.w	r9, #0
 80193c8:	4621      	mov	r1, r4
 80193ca:	4630      	mov	r0, r6
 80193cc:	f000 fd1a 	bl	8019e04 <_Bfree>
 80193d0:	2f00      	cmp	r7, #0
 80193d2:	f43f aea8 	beq.w	8019126 <_dtoa_r+0x5be>
 80193d6:	f1b9 0f00 	cmp.w	r9, #0
 80193da:	d005      	beq.n	80193e8 <_dtoa_r+0x880>
 80193dc:	45b9      	cmp	r9, r7
 80193de:	d003      	beq.n	80193e8 <_dtoa_r+0x880>
 80193e0:	4649      	mov	r1, r9
 80193e2:	4630      	mov	r0, r6
 80193e4:	f000 fd0e 	bl	8019e04 <_Bfree>
 80193e8:	4639      	mov	r1, r7
 80193ea:	4630      	mov	r0, r6
 80193ec:	f000 fd0a 	bl	8019e04 <_Bfree>
 80193f0:	e699      	b.n	8019126 <_dtoa_r+0x5be>
 80193f2:	2400      	movs	r4, #0
 80193f4:	4627      	mov	r7, r4
 80193f6:	e7e0      	b.n	80193ba <_dtoa_r+0x852>
 80193f8:	46bb      	mov	fp, r7
 80193fa:	4604      	mov	r4, r0
 80193fc:	4607      	mov	r7, r0
 80193fe:	e5c7      	b.n	8018f90 <_dtoa_r+0x428>
 8019400:	9b07      	ldr	r3, [sp, #28]
 8019402:	46ca      	mov	sl, r9
 8019404:	2b00      	cmp	r3, #0
 8019406:	f000 8100 	beq.w	801960a <_dtoa_r+0xaa2>
 801940a:	f1b8 0f00 	cmp.w	r8, #0
 801940e:	dd05      	ble.n	801941c <_dtoa_r+0x8b4>
 8019410:	4639      	mov	r1, r7
 8019412:	4642      	mov	r2, r8
 8019414:	4630      	mov	r0, r6
 8019416:	f000 ff11 	bl	801a23c <__lshift>
 801941a:	4607      	mov	r7, r0
 801941c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801941e:	2b00      	cmp	r3, #0
 8019420:	d05d      	beq.n	80194de <_dtoa_r+0x976>
 8019422:	6879      	ldr	r1, [r7, #4]
 8019424:	4630      	mov	r0, r6
 8019426:	f000 fcad 	bl	8019d84 <_Balloc>
 801942a:	4680      	mov	r8, r0
 801942c:	b928      	cbnz	r0, 801943a <_dtoa_r+0x8d2>
 801942e:	4b82      	ldr	r3, [pc, #520]	; (8019638 <_dtoa_r+0xad0>)
 8019430:	4602      	mov	r2, r0
 8019432:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019436:	f7ff bbaf 	b.w	8018b98 <_dtoa_r+0x30>
 801943a:	693a      	ldr	r2, [r7, #16]
 801943c:	3202      	adds	r2, #2
 801943e:	0092      	lsls	r2, r2, #2
 8019440:	f107 010c 	add.w	r1, r7, #12
 8019444:	300c      	adds	r0, #12
 8019446:	f7fd fdbd 	bl	8016fc4 <memcpy>
 801944a:	2201      	movs	r2, #1
 801944c:	4641      	mov	r1, r8
 801944e:	4630      	mov	r0, r6
 8019450:	f000 fef4 	bl	801a23c <__lshift>
 8019454:	9b01      	ldr	r3, [sp, #4]
 8019456:	3301      	adds	r3, #1
 8019458:	9304      	str	r3, [sp, #16]
 801945a:	9b01      	ldr	r3, [sp, #4]
 801945c:	4453      	add	r3, sl
 801945e:	9308      	str	r3, [sp, #32]
 8019460:	9b02      	ldr	r3, [sp, #8]
 8019462:	f003 0301 	and.w	r3, r3, #1
 8019466:	46b9      	mov	r9, r7
 8019468:	9307      	str	r3, [sp, #28]
 801946a:	4607      	mov	r7, r0
 801946c:	9b04      	ldr	r3, [sp, #16]
 801946e:	4621      	mov	r1, r4
 8019470:	3b01      	subs	r3, #1
 8019472:	4628      	mov	r0, r5
 8019474:	9302      	str	r3, [sp, #8]
 8019476:	f7ff fae9 	bl	8018a4c <quorem>
 801947a:	4603      	mov	r3, r0
 801947c:	3330      	adds	r3, #48	; 0x30
 801947e:	9005      	str	r0, [sp, #20]
 8019480:	4649      	mov	r1, r9
 8019482:	4628      	mov	r0, r5
 8019484:	9309      	str	r3, [sp, #36]	; 0x24
 8019486:	f000 ff49 	bl	801a31c <__mcmp>
 801948a:	463a      	mov	r2, r7
 801948c:	4682      	mov	sl, r0
 801948e:	4621      	mov	r1, r4
 8019490:	4630      	mov	r0, r6
 8019492:	f000 ff5f 	bl	801a354 <__mdiff>
 8019496:	68c2      	ldr	r2, [r0, #12]
 8019498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801949a:	4680      	mov	r8, r0
 801949c:	bb0a      	cbnz	r2, 80194e2 <_dtoa_r+0x97a>
 801949e:	4601      	mov	r1, r0
 80194a0:	4628      	mov	r0, r5
 80194a2:	f000 ff3b 	bl	801a31c <__mcmp>
 80194a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194a8:	4602      	mov	r2, r0
 80194aa:	4641      	mov	r1, r8
 80194ac:	4630      	mov	r0, r6
 80194ae:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80194b2:	f000 fca7 	bl	8019e04 <_Bfree>
 80194b6:	9b06      	ldr	r3, [sp, #24]
 80194b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80194be:	ea43 0102 	orr.w	r1, r3, r2
 80194c2:	9b07      	ldr	r3, [sp, #28]
 80194c4:	430b      	orrs	r3, r1
 80194c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194c8:	d10d      	bne.n	80194e6 <_dtoa_r+0x97e>
 80194ca:	2b39      	cmp	r3, #57	; 0x39
 80194cc:	d029      	beq.n	8019522 <_dtoa_r+0x9ba>
 80194ce:	f1ba 0f00 	cmp.w	sl, #0
 80194d2:	dd01      	ble.n	80194d8 <_dtoa_r+0x970>
 80194d4:	9b05      	ldr	r3, [sp, #20]
 80194d6:	3331      	adds	r3, #49	; 0x31
 80194d8:	9a02      	ldr	r2, [sp, #8]
 80194da:	7013      	strb	r3, [r2, #0]
 80194dc:	e774      	b.n	80193c8 <_dtoa_r+0x860>
 80194de:	4638      	mov	r0, r7
 80194e0:	e7b8      	b.n	8019454 <_dtoa_r+0x8ec>
 80194e2:	2201      	movs	r2, #1
 80194e4:	e7e1      	b.n	80194aa <_dtoa_r+0x942>
 80194e6:	f1ba 0f00 	cmp.w	sl, #0
 80194ea:	db06      	blt.n	80194fa <_dtoa_r+0x992>
 80194ec:	9906      	ldr	r1, [sp, #24]
 80194ee:	ea41 0a0a 	orr.w	sl, r1, sl
 80194f2:	9907      	ldr	r1, [sp, #28]
 80194f4:	ea5a 0101 	orrs.w	r1, sl, r1
 80194f8:	d120      	bne.n	801953c <_dtoa_r+0x9d4>
 80194fa:	2a00      	cmp	r2, #0
 80194fc:	ddec      	ble.n	80194d8 <_dtoa_r+0x970>
 80194fe:	4629      	mov	r1, r5
 8019500:	2201      	movs	r2, #1
 8019502:	4630      	mov	r0, r6
 8019504:	9304      	str	r3, [sp, #16]
 8019506:	f000 fe99 	bl	801a23c <__lshift>
 801950a:	4621      	mov	r1, r4
 801950c:	4605      	mov	r5, r0
 801950e:	f000 ff05 	bl	801a31c <__mcmp>
 8019512:	2800      	cmp	r0, #0
 8019514:	9b04      	ldr	r3, [sp, #16]
 8019516:	dc02      	bgt.n	801951e <_dtoa_r+0x9b6>
 8019518:	d1de      	bne.n	80194d8 <_dtoa_r+0x970>
 801951a:	07da      	lsls	r2, r3, #31
 801951c:	d5dc      	bpl.n	80194d8 <_dtoa_r+0x970>
 801951e:	2b39      	cmp	r3, #57	; 0x39
 8019520:	d1d8      	bne.n	80194d4 <_dtoa_r+0x96c>
 8019522:	9a02      	ldr	r2, [sp, #8]
 8019524:	2339      	movs	r3, #57	; 0x39
 8019526:	7013      	strb	r3, [r2, #0]
 8019528:	4643      	mov	r3, r8
 801952a:	4698      	mov	r8, r3
 801952c:	3b01      	subs	r3, #1
 801952e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8019532:	2a39      	cmp	r2, #57	; 0x39
 8019534:	d051      	beq.n	80195da <_dtoa_r+0xa72>
 8019536:	3201      	adds	r2, #1
 8019538:	701a      	strb	r2, [r3, #0]
 801953a:	e745      	b.n	80193c8 <_dtoa_r+0x860>
 801953c:	2a00      	cmp	r2, #0
 801953e:	dd03      	ble.n	8019548 <_dtoa_r+0x9e0>
 8019540:	2b39      	cmp	r3, #57	; 0x39
 8019542:	d0ee      	beq.n	8019522 <_dtoa_r+0x9ba>
 8019544:	3301      	adds	r3, #1
 8019546:	e7c7      	b.n	80194d8 <_dtoa_r+0x970>
 8019548:	9a04      	ldr	r2, [sp, #16]
 801954a:	9908      	ldr	r1, [sp, #32]
 801954c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019550:	428a      	cmp	r2, r1
 8019552:	d02b      	beq.n	80195ac <_dtoa_r+0xa44>
 8019554:	4629      	mov	r1, r5
 8019556:	2300      	movs	r3, #0
 8019558:	220a      	movs	r2, #10
 801955a:	4630      	mov	r0, r6
 801955c:	f000 fc74 	bl	8019e48 <__multadd>
 8019560:	45b9      	cmp	r9, r7
 8019562:	4605      	mov	r5, r0
 8019564:	f04f 0300 	mov.w	r3, #0
 8019568:	f04f 020a 	mov.w	r2, #10
 801956c:	4649      	mov	r1, r9
 801956e:	4630      	mov	r0, r6
 8019570:	d107      	bne.n	8019582 <_dtoa_r+0xa1a>
 8019572:	f000 fc69 	bl	8019e48 <__multadd>
 8019576:	4681      	mov	r9, r0
 8019578:	4607      	mov	r7, r0
 801957a:	9b04      	ldr	r3, [sp, #16]
 801957c:	3301      	adds	r3, #1
 801957e:	9304      	str	r3, [sp, #16]
 8019580:	e774      	b.n	801946c <_dtoa_r+0x904>
 8019582:	f000 fc61 	bl	8019e48 <__multadd>
 8019586:	4639      	mov	r1, r7
 8019588:	4681      	mov	r9, r0
 801958a:	2300      	movs	r3, #0
 801958c:	220a      	movs	r2, #10
 801958e:	4630      	mov	r0, r6
 8019590:	f000 fc5a 	bl	8019e48 <__multadd>
 8019594:	4607      	mov	r7, r0
 8019596:	e7f0      	b.n	801957a <_dtoa_r+0xa12>
 8019598:	f1ba 0f00 	cmp.w	sl, #0
 801959c:	9a01      	ldr	r2, [sp, #4]
 801959e:	bfcc      	ite	gt
 80195a0:	46d0      	movgt	r8, sl
 80195a2:	f04f 0801 	movle.w	r8, #1
 80195a6:	4490      	add	r8, r2
 80195a8:	f04f 0900 	mov.w	r9, #0
 80195ac:	4629      	mov	r1, r5
 80195ae:	2201      	movs	r2, #1
 80195b0:	4630      	mov	r0, r6
 80195b2:	9302      	str	r3, [sp, #8]
 80195b4:	f000 fe42 	bl	801a23c <__lshift>
 80195b8:	4621      	mov	r1, r4
 80195ba:	4605      	mov	r5, r0
 80195bc:	f000 feae 	bl	801a31c <__mcmp>
 80195c0:	2800      	cmp	r0, #0
 80195c2:	dcb1      	bgt.n	8019528 <_dtoa_r+0x9c0>
 80195c4:	d102      	bne.n	80195cc <_dtoa_r+0xa64>
 80195c6:	9b02      	ldr	r3, [sp, #8]
 80195c8:	07db      	lsls	r3, r3, #31
 80195ca:	d4ad      	bmi.n	8019528 <_dtoa_r+0x9c0>
 80195cc:	4643      	mov	r3, r8
 80195ce:	4698      	mov	r8, r3
 80195d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80195d4:	2a30      	cmp	r2, #48	; 0x30
 80195d6:	d0fa      	beq.n	80195ce <_dtoa_r+0xa66>
 80195d8:	e6f6      	b.n	80193c8 <_dtoa_r+0x860>
 80195da:	9a01      	ldr	r2, [sp, #4]
 80195dc:	429a      	cmp	r2, r3
 80195de:	d1a4      	bne.n	801952a <_dtoa_r+0x9c2>
 80195e0:	f10b 0b01 	add.w	fp, fp, #1
 80195e4:	2331      	movs	r3, #49	; 0x31
 80195e6:	e778      	b.n	80194da <_dtoa_r+0x972>
 80195e8:	4b14      	ldr	r3, [pc, #80]	; (801963c <_dtoa_r+0xad4>)
 80195ea:	f7ff bb27 	b.w	8018c3c <_dtoa_r+0xd4>
 80195ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	f47f ab03 	bne.w	8018bfc <_dtoa_r+0x94>
 80195f6:	4b12      	ldr	r3, [pc, #72]	; (8019640 <_dtoa_r+0xad8>)
 80195f8:	f7ff bb20 	b.w	8018c3c <_dtoa_r+0xd4>
 80195fc:	f1ba 0f00 	cmp.w	sl, #0
 8019600:	dc03      	bgt.n	801960a <_dtoa_r+0xaa2>
 8019602:	9b06      	ldr	r3, [sp, #24]
 8019604:	2b02      	cmp	r3, #2
 8019606:	f73f aec7 	bgt.w	8019398 <_dtoa_r+0x830>
 801960a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801960e:	4621      	mov	r1, r4
 8019610:	4628      	mov	r0, r5
 8019612:	f7ff fa1b 	bl	8018a4c <quorem>
 8019616:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801961a:	f808 3b01 	strb.w	r3, [r8], #1
 801961e:	9a01      	ldr	r2, [sp, #4]
 8019620:	eba8 0202 	sub.w	r2, r8, r2
 8019624:	4592      	cmp	sl, r2
 8019626:	ddb7      	ble.n	8019598 <_dtoa_r+0xa30>
 8019628:	4629      	mov	r1, r5
 801962a:	2300      	movs	r3, #0
 801962c:	220a      	movs	r2, #10
 801962e:	4630      	mov	r0, r6
 8019630:	f000 fc0a 	bl	8019e48 <__multadd>
 8019634:	4605      	mov	r5, r0
 8019636:	e7ea      	b.n	801960e <_dtoa_r+0xaa6>
 8019638:	0801ca40 	.word	0x0801ca40
 801963c:	0801c840 	.word	0x0801c840
 8019640:	0801c9c1 	.word	0x0801c9c1

08019644 <rshift>:
 8019644:	6903      	ldr	r3, [r0, #16]
 8019646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801964a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801964e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019652:	f100 0414 	add.w	r4, r0, #20
 8019656:	dd45      	ble.n	80196e4 <rshift+0xa0>
 8019658:	f011 011f 	ands.w	r1, r1, #31
 801965c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019664:	d10c      	bne.n	8019680 <rshift+0x3c>
 8019666:	f100 0710 	add.w	r7, r0, #16
 801966a:	4629      	mov	r1, r5
 801966c:	42b1      	cmp	r1, r6
 801966e:	d334      	bcc.n	80196da <rshift+0x96>
 8019670:	1a9b      	subs	r3, r3, r2
 8019672:	009b      	lsls	r3, r3, #2
 8019674:	1eea      	subs	r2, r5, #3
 8019676:	4296      	cmp	r6, r2
 8019678:	bf38      	it	cc
 801967a:	2300      	movcc	r3, #0
 801967c:	4423      	add	r3, r4
 801967e:	e015      	b.n	80196ac <rshift+0x68>
 8019680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019684:	f1c1 0820 	rsb	r8, r1, #32
 8019688:	40cf      	lsrs	r7, r1
 801968a:	f105 0e04 	add.w	lr, r5, #4
 801968e:	46a1      	mov	r9, r4
 8019690:	4576      	cmp	r6, lr
 8019692:	46f4      	mov	ip, lr
 8019694:	d815      	bhi.n	80196c2 <rshift+0x7e>
 8019696:	1a9a      	subs	r2, r3, r2
 8019698:	0092      	lsls	r2, r2, #2
 801969a:	3a04      	subs	r2, #4
 801969c:	3501      	adds	r5, #1
 801969e:	42ae      	cmp	r6, r5
 80196a0:	bf38      	it	cc
 80196a2:	2200      	movcc	r2, #0
 80196a4:	18a3      	adds	r3, r4, r2
 80196a6:	50a7      	str	r7, [r4, r2]
 80196a8:	b107      	cbz	r7, 80196ac <rshift+0x68>
 80196aa:	3304      	adds	r3, #4
 80196ac:	1b1a      	subs	r2, r3, r4
 80196ae:	42a3      	cmp	r3, r4
 80196b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80196b4:	bf08      	it	eq
 80196b6:	2300      	moveq	r3, #0
 80196b8:	6102      	str	r2, [r0, #16]
 80196ba:	bf08      	it	eq
 80196bc:	6143      	streq	r3, [r0, #20]
 80196be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196c2:	f8dc c000 	ldr.w	ip, [ip]
 80196c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80196ca:	ea4c 0707 	orr.w	r7, ip, r7
 80196ce:	f849 7b04 	str.w	r7, [r9], #4
 80196d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80196d6:	40cf      	lsrs	r7, r1
 80196d8:	e7da      	b.n	8019690 <rshift+0x4c>
 80196da:	f851 cb04 	ldr.w	ip, [r1], #4
 80196de:	f847 cf04 	str.w	ip, [r7, #4]!
 80196e2:	e7c3      	b.n	801966c <rshift+0x28>
 80196e4:	4623      	mov	r3, r4
 80196e6:	e7e1      	b.n	80196ac <rshift+0x68>

080196e8 <__hexdig_fun>:
 80196e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80196ec:	2b09      	cmp	r3, #9
 80196ee:	d802      	bhi.n	80196f6 <__hexdig_fun+0xe>
 80196f0:	3820      	subs	r0, #32
 80196f2:	b2c0      	uxtb	r0, r0
 80196f4:	4770      	bx	lr
 80196f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80196fa:	2b05      	cmp	r3, #5
 80196fc:	d801      	bhi.n	8019702 <__hexdig_fun+0x1a>
 80196fe:	3847      	subs	r0, #71	; 0x47
 8019700:	e7f7      	b.n	80196f2 <__hexdig_fun+0xa>
 8019702:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019706:	2b05      	cmp	r3, #5
 8019708:	d801      	bhi.n	801970e <__hexdig_fun+0x26>
 801970a:	3827      	subs	r0, #39	; 0x27
 801970c:	e7f1      	b.n	80196f2 <__hexdig_fun+0xa>
 801970e:	2000      	movs	r0, #0
 8019710:	4770      	bx	lr
	...

08019714 <__gethex>:
 8019714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019718:	ed2d 8b02 	vpush	{d8}
 801971c:	b089      	sub	sp, #36	; 0x24
 801971e:	ee08 0a10 	vmov	s16, r0
 8019722:	9304      	str	r3, [sp, #16]
 8019724:	4bb4      	ldr	r3, [pc, #720]	; (80199f8 <__gethex+0x2e4>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	9301      	str	r3, [sp, #4]
 801972a:	4618      	mov	r0, r3
 801972c:	468b      	mov	fp, r1
 801972e:	4690      	mov	r8, r2
 8019730:	f7e6 fdee 	bl	8000310 <strlen>
 8019734:	9b01      	ldr	r3, [sp, #4]
 8019736:	f8db 2000 	ldr.w	r2, [fp]
 801973a:	4403      	add	r3, r0
 801973c:	4682      	mov	sl, r0
 801973e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019742:	9305      	str	r3, [sp, #20]
 8019744:	1c93      	adds	r3, r2, #2
 8019746:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801974a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801974e:	32fe      	adds	r2, #254	; 0xfe
 8019750:	18d1      	adds	r1, r2, r3
 8019752:	461f      	mov	r7, r3
 8019754:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019758:	9100      	str	r1, [sp, #0]
 801975a:	2830      	cmp	r0, #48	; 0x30
 801975c:	d0f8      	beq.n	8019750 <__gethex+0x3c>
 801975e:	f7ff ffc3 	bl	80196e8 <__hexdig_fun>
 8019762:	4604      	mov	r4, r0
 8019764:	2800      	cmp	r0, #0
 8019766:	d13a      	bne.n	80197de <__gethex+0xca>
 8019768:	9901      	ldr	r1, [sp, #4]
 801976a:	4652      	mov	r2, sl
 801976c:	4638      	mov	r0, r7
 801976e:	f001 fa43 	bl	801abf8 <strncmp>
 8019772:	4605      	mov	r5, r0
 8019774:	2800      	cmp	r0, #0
 8019776:	d168      	bne.n	801984a <__gethex+0x136>
 8019778:	f817 000a 	ldrb.w	r0, [r7, sl]
 801977c:	eb07 060a 	add.w	r6, r7, sl
 8019780:	f7ff ffb2 	bl	80196e8 <__hexdig_fun>
 8019784:	2800      	cmp	r0, #0
 8019786:	d062      	beq.n	801984e <__gethex+0x13a>
 8019788:	4633      	mov	r3, r6
 801978a:	7818      	ldrb	r0, [r3, #0]
 801978c:	2830      	cmp	r0, #48	; 0x30
 801978e:	461f      	mov	r7, r3
 8019790:	f103 0301 	add.w	r3, r3, #1
 8019794:	d0f9      	beq.n	801978a <__gethex+0x76>
 8019796:	f7ff ffa7 	bl	80196e8 <__hexdig_fun>
 801979a:	2301      	movs	r3, #1
 801979c:	fab0 f480 	clz	r4, r0
 80197a0:	0964      	lsrs	r4, r4, #5
 80197a2:	4635      	mov	r5, r6
 80197a4:	9300      	str	r3, [sp, #0]
 80197a6:	463a      	mov	r2, r7
 80197a8:	4616      	mov	r6, r2
 80197aa:	3201      	adds	r2, #1
 80197ac:	7830      	ldrb	r0, [r6, #0]
 80197ae:	f7ff ff9b 	bl	80196e8 <__hexdig_fun>
 80197b2:	2800      	cmp	r0, #0
 80197b4:	d1f8      	bne.n	80197a8 <__gethex+0x94>
 80197b6:	9901      	ldr	r1, [sp, #4]
 80197b8:	4652      	mov	r2, sl
 80197ba:	4630      	mov	r0, r6
 80197bc:	f001 fa1c 	bl	801abf8 <strncmp>
 80197c0:	b980      	cbnz	r0, 80197e4 <__gethex+0xd0>
 80197c2:	b94d      	cbnz	r5, 80197d8 <__gethex+0xc4>
 80197c4:	eb06 050a 	add.w	r5, r6, sl
 80197c8:	462a      	mov	r2, r5
 80197ca:	4616      	mov	r6, r2
 80197cc:	3201      	adds	r2, #1
 80197ce:	7830      	ldrb	r0, [r6, #0]
 80197d0:	f7ff ff8a 	bl	80196e8 <__hexdig_fun>
 80197d4:	2800      	cmp	r0, #0
 80197d6:	d1f8      	bne.n	80197ca <__gethex+0xb6>
 80197d8:	1bad      	subs	r5, r5, r6
 80197da:	00ad      	lsls	r5, r5, #2
 80197dc:	e004      	b.n	80197e8 <__gethex+0xd4>
 80197de:	2400      	movs	r4, #0
 80197e0:	4625      	mov	r5, r4
 80197e2:	e7e0      	b.n	80197a6 <__gethex+0x92>
 80197e4:	2d00      	cmp	r5, #0
 80197e6:	d1f7      	bne.n	80197d8 <__gethex+0xc4>
 80197e8:	7833      	ldrb	r3, [r6, #0]
 80197ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80197ee:	2b50      	cmp	r3, #80	; 0x50
 80197f0:	d13b      	bne.n	801986a <__gethex+0x156>
 80197f2:	7873      	ldrb	r3, [r6, #1]
 80197f4:	2b2b      	cmp	r3, #43	; 0x2b
 80197f6:	d02c      	beq.n	8019852 <__gethex+0x13e>
 80197f8:	2b2d      	cmp	r3, #45	; 0x2d
 80197fa:	d02e      	beq.n	801985a <__gethex+0x146>
 80197fc:	1c71      	adds	r1, r6, #1
 80197fe:	f04f 0900 	mov.w	r9, #0
 8019802:	7808      	ldrb	r0, [r1, #0]
 8019804:	f7ff ff70 	bl	80196e8 <__hexdig_fun>
 8019808:	1e43      	subs	r3, r0, #1
 801980a:	b2db      	uxtb	r3, r3
 801980c:	2b18      	cmp	r3, #24
 801980e:	d82c      	bhi.n	801986a <__gethex+0x156>
 8019810:	f1a0 0210 	sub.w	r2, r0, #16
 8019814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019818:	f7ff ff66 	bl	80196e8 <__hexdig_fun>
 801981c:	1e43      	subs	r3, r0, #1
 801981e:	b2db      	uxtb	r3, r3
 8019820:	2b18      	cmp	r3, #24
 8019822:	d91d      	bls.n	8019860 <__gethex+0x14c>
 8019824:	f1b9 0f00 	cmp.w	r9, #0
 8019828:	d000      	beq.n	801982c <__gethex+0x118>
 801982a:	4252      	negs	r2, r2
 801982c:	4415      	add	r5, r2
 801982e:	f8cb 1000 	str.w	r1, [fp]
 8019832:	b1e4      	cbz	r4, 801986e <__gethex+0x15a>
 8019834:	9b00      	ldr	r3, [sp, #0]
 8019836:	2b00      	cmp	r3, #0
 8019838:	bf14      	ite	ne
 801983a:	2700      	movne	r7, #0
 801983c:	2706      	moveq	r7, #6
 801983e:	4638      	mov	r0, r7
 8019840:	b009      	add	sp, #36	; 0x24
 8019842:	ecbd 8b02 	vpop	{d8}
 8019846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801984a:	463e      	mov	r6, r7
 801984c:	4625      	mov	r5, r4
 801984e:	2401      	movs	r4, #1
 8019850:	e7ca      	b.n	80197e8 <__gethex+0xd4>
 8019852:	f04f 0900 	mov.w	r9, #0
 8019856:	1cb1      	adds	r1, r6, #2
 8019858:	e7d3      	b.n	8019802 <__gethex+0xee>
 801985a:	f04f 0901 	mov.w	r9, #1
 801985e:	e7fa      	b.n	8019856 <__gethex+0x142>
 8019860:	230a      	movs	r3, #10
 8019862:	fb03 0202 	mla	r2, r3, r2, r0
 8019866:	3a10      	subs	r2, #16
 8019868:	e7d4      	b.n	8019814 <__gethex+0x100>
 801986a:	4631      	mov	r1, r6
 801986c:	e7df      	b.n	801982e <__gethex+0x11a>
 801986e:	1bf3      	subs	r3, r6, r7
 8019870:	3b01      	subs	r3, #1
 8019872:	4621      	mov	r1, r4
 8019874:	2b07      	cmp	r3, #7
 8019876:	dc0b      	bgt.n	8019890 <__gethex+0x17c>
 8019878:	ee18 0a10 	vmov	r0, s16
 801987c:	f000 fa82 	bl	8019d84 <_Balloc>
 8019880:	4604      	mov	r4, r0
 8019882:	b940      	cbnz	r0, 8019896 <__gethex+0x182>
 8019884:	4b5d      	ldr	r3, [pc, #372]	; (80199fc <__gethex+0x2e8>)
 8019886:	4602      	mov	r2, r0
 8019888:	21de      	movs	r1, #222	; 0xde
 801988a:	485d      	ldr	r0, [pc, #372]	; (8019a00 <__gethex+0x2ec>)
 801988c:	f001 f9d6 	bl	801ac3c <__assert_func>
 8019890:	3101      	adds	r1, #1
 8019892:	105b      	asrs	r3, r3, #1
 8019894:	e7ee      	b.n	8019874 <__gethex+0x160>
 8019896:	f100 0914 	add.w	r9, r0, #20
 801989a:	f04f 0b00 	mov.w	fp, #0
 801989e:	f1ca 0301 	rsb	r3, sl, #1
 80198a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80198a6:	f8cd b000 	str.w	fp, [sp]
 80198aa:	9306      	str	r3, [sp, #24]
 80198ac:	42b7      	cmp	r7, r6
 80198ae:	d340      	bcc.n	8019932 <__gethex+0x21e>
 80198b0:	9802      	ldr	r0, [sp, #8]
 80198b2:	9b00      	ldr	r3, [sp, #0]
 80198b4:	f840 3b04 	str.w	r3, [r0], #4
 80198b8:	eba0 0009 	sub.w	r0, r0, r9
 80198bc:	1080      	asrs	r0, r0, #2
 80198be:	0146      	lsls	r6, r0, #5
 80198c0:	6120      	str	r0, [r4, #16]
 80198c2:	4618      	mov	r0, r3
 80198c4:	f000 fb50 	bl	8019f68 <__hi0bits>
 80198c8:	1a30      	subs	r0, r6, r0
 80198ca:	f8d8 6000 	ldr.w	r6, [r8]
 80198ce:	42b0      	cmp	r0, r6
 80198d0:	dd63      	ble.n	801999a <__gethex+0x286>
 80198d2:	1b87      	subs	r7, r0, r6
 80198d4:	4639      	mov	r1, r7
 80198d6:	4620      	mov	r0, r4
 80198d8:	f000 fef1 	bl	801a6be <__any_on>
 80198dc:	4682      	mov	sl, r0
 80198de:	b1a8      	cbz	r0, 801990c <__gethex+0x1f8>
 80198e0:	1e7b      	subs	r3, r7, #1
 80198e2:	1159      	asrs	r1, r3, #5
 80198e4:	f003 021f 	and.w	r2, r3, #31
 80198e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80198ec:	f04f 0a01 	mov.w	sl, #1
 80198f0:	fa0a f202 	lsl.w	r2, sl, r2
 80198f4:	420a      	tst	r2, r1
 80198f6:	d009      	beq.n	801990c <__gethex+0x1f8>
 80198f8:	4553      	cmp	r3, sl
 80198fa:	dd05      	ble.n	8019908 <__gethex+0x1f4>
 80198fc:	1eb9      	subs	r1, r7, #2
 80198fe:	4620      	mov	r0, r4
 8019900:	f000 fedd 	bl	801a6be <__any_on>
 8019904:	2800      	cmp	r0, #0
 8019906:	d145      	bne.n	8019994 <__gethex+0x280>
 8019908:	f04f 0a02 	mov.w	sl, #2
 801990c:	4639      	mov	r1, r7
 801990e:	4620      	mov	r0, r4
 8019910:	f7ff fe98 	bl	8019644 <rshift>
 8019914:	443d      	add	r5, r7
 8019916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801991a:	42ab      	cmp	r3, r5
 801991c:	da4c      	bge.n	80199b8 <__gethex+0x2a4>
 801991e:	ee18 0a10 	vmov	r0, s16
 8019922:	4621      	mov	r1, r4
 8019924:	f000 fa6e 	bl	8019e04 <_Bfree>
 8019928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801992a:	2300      	movs	r3, #0
 801992c:	6013      	str	r3, [r2, #0]
 801992e:	27a3      	movs	r7, #163	; 0xa3
 8019930:	e785      	b.n	801983e <__gethex+0x12a>
 8019932:	1e73      	subs	r3, r6, #1
 8019934:	9a05      	ldr	r2, [sp, #20]
 8019936:	9303      	str	r3, [sp, #12]
 8019938:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801993c:	4293      	cmp	r3, r2
 801993e:	d019      	beq.n	8019974 <__gethex+0x260>
 8019940:	f1bb 0f20 	cmp.w	fp, #32
 8019944:	d107      	bne.n	8019956 <__gethex+0x242>
 8019946:	9b02      	ldr	r3, [sp, #8]
 8019948:	9a00      	ldr	r2, [sp, #0]
 801994a:	f843 2b04 	str.w	r2, [r3], #4
 801994e:	9302      	str	r3, [sp, #8]
 8019950:	2300      	movs	r3, #0
 8019952:	9300      	str	r3, [sp, #0]
 8019954:	469b      	mov	fp, r3
 8019956:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801995a:	f7ff fec5 	bl	80196e8 <__hexdig_fun>
 801995e:	9b00      	ldr	r3, [sp, #0]
 8019960:	f000 000f 	and.w	r0, r0, #15
 8019964:	fa00 f00b 	lsl.w	r0, r0, fp
 8019968:	4303      	orrs	r3, r0
 801996a:	9300      	str	r3, [sp, #0]
 801996c:	f10b 0b04 	add.w	fp, fp, #4
 8019970:	9b03      	ldr	r3, [sp, #12]
 8019972:	e00d      	b.n	8019990 <__gethex+0x27c>
 8019974:	9b03      	ldr	r3, [sp, #12]
 8019976:	9a06      	ldr	r2, [sp, #24]
 8019978:	4413      	add	r3, r2
 801997a:	42bb      	cmp	r3, r7
 801997c:	d3e0      	bcc.n	8019940 <__gethex+0x22c>
 801997e:	4618      	mov	r0, r3
 8019980:	9901      	ldr	r1, [sp, #4]
 8019982:	9307      	str	r3, [sp, #28]
 8019984:	4652      	mov	r2, sl
 8019986:	f001 f937 	bl	801abf8 <strncmp>
 801998a:	9b07      	ldr	r3, [sp, #28]
 801998c:	2800      	cmp	r0, #0
 801998e:	d1d7      	bne.n	8019940 <__gethex+0x22c>
 8019990:	461e      	mov	r6, r3
 8019992:	e78b      	b.n	80198ac <__gethex+0x198>
 8019994:	f04f 0a03 	mov.w	sl, #3
 8019998:	e7b8      	b.n	801990c <__gethex+0x1f8>
 801999a:	da0a      	bge.n	80199b2 <__gethex+0x29e>
 801999c:	1a37      	subs	r7, r6, r0
 801999e:	4621      	mov	r1, r4
 80199a0:	ee18 0a10 	vmov	r0, s16
 80199a4:	463a      	mov	r2, r7
 80199a6:	f000 fc49 	bl	801a23c <__lshift>
 80199aa:	1bed      	subs	r5, r5, r7
 80199ac:	4604      	mov	r4, r0
 80199ae:	f100 0914 	add.w	r9, r0, #20
 80199b2:	f04f 0a00 	mov.w	sl, #0
 80199b6:	e7ae      	b.n	8019916 <__gethex+0x202>
 80199b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80199bc:	42a8      	cmp	r0, r5
 80199be:	dd72      	ble.n	8019aa6 <__gethex+0x392>
 80199c0:	1b45      	subs	r5, r0, r5
 80199c2:	42ae      	cmp	r6, r5
 80199c4:	dc36      	bgt.n	8019a34 <__gethex+0x320>
 80199c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80199ca:	2b02      	cmp	r3, #2
 80199cc:	d02a      	beq.n	8019a24 <__gethex+0x310>
 80199ce:	2b03      	cmp	r3, #3
 80199d0:	d02c      	beq.n	8019a2c <__gethex+0x318>
 80199d2:	2b01      	cmp	r3, #1
 80199d4:	d11c      	bne.n	8019a10 <__gethex+0x2fc>
 80199d6:	42ae      	cmp	r6, r5
 80199d8:	d11a      	bne.n	8019a10 <__gethex+0x2fc>
 80199da:	2e01      	cmp	r6, #1
 80199dc:	d112      	bne.n	8019a04 <__gethex+0x2f0>
 80199de:	9a04      	ldr	r2, [sp, #16]
 80199e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80199e4:	6013      	str	r3, [r2, #0]
 80199e6:	2301      	movs	r3, #1
 80199e8:	6123      	str	r3, [r4, #16]
 80199ea:	f8c9 3000 	str.w	r3, [r9]
 80199ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80199f0:	2762      	movs	r7, #98	; 0x62
 80199f2:	601c      	str	r4, [r3, #0]
 80199f4:	e723      	b.n	801983e <__gethex+0x12a>
 80199f6:	bf00      	nop
 80199f8:	0801cab8 	.word	0x0801cab8
 80199fc:	0801ca40 	.word	0x0801ca40
 8019a00:	0801ca51 	.word	0x0801ca51
 8019a04:	1e71      	subs	r1, r6, #1
 8019a06:	4620      	mov	r0, r4
 8019a08:	f000 fe59 	bl	801a6be <__any_on>
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	d1e6      	bne.n	80199de <__gethex+0x2ca>
 8019a10:	ee18 0a10 	vmov	r0, s16
 8019a14:	4621      	mov	r1, r4
 8019a16:	f000 f9f5 	bl	8019e04 <_Bfree>
 8019a1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	6013      	str	r3, [r2, #0]
 8019a20:	2750      	movs	r7, #80	; 0x50
 8019a22:	e70c      	b.n	801983e <__gethex+0x12a>
 8019a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d1f2      	bne.n	8019a10 <__gethex+0x2fc>
 8019a2a:	e7d8      	b.n	80199de <__gethex+0x2ca>
 8019a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d1d5      	bne.n	80199de <__gethex+0x2ca>
 8019a32:	e7ed      	b.n	8019a10 <__gethex+0x2fc>
 8019a34:	1e6f      	subs	r7, r5, #1
 8019a36:	f1ba 0f00 	cmp.w	sl, #0
 8019a3a:	d131      	bne.n	8019aa0 <__gethex+0x38c>
 8019a3c:	b127      	cbz	r7, 8019a48 <__gethex+0x334>
 8019a3e:	4639      	mov	r1, r7
 8019a40:	4620      	mov	r0, r4
 8019a42:	f000 fe3c 	bl	801a6be <__any_on>
 8019a46:	4682      	mov	sl, r0
 8019a48:	117b      	asrs	r3, r7, #5
 8019a4a:	2101      	movs	r1, #1
 8019a4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019a50:	f007 071f 	and.w	r7, r7, #31
 8019a54:	fa01 f707 	lsl.w	r7, r1, r7
 8019a58:	421f      	tst	r7, r3
 8019a5a:	4629      	mov	r1, r5
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	bf18      	it	ne
 8019a60:	f04a 0a02 	orrne.w	sl, sl, #2
 8019a64:	1b76      	subs	r6, r6, r5
 8019a66:	f7ff fded 	bl	8019644 <rshift>
 8019a6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019a6e:	2702      	movs	r7, #2
 8019a70:	f1ba 0f00 	cmp.w	sl, #0
 8019a74:	d048      	beq.n	8019b08 <__gethex+0x3f4>
 8019a76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019a7a:	2b02      	cmp	r3, #2
 8019a7c:	d015      	beq.n	8019aaa <__gethex+0x396>
 8019a7e:	2b03      	cmp	r3, #3
 8019a80:	d017      	beq.n	8019ab2 <__gethex+0x39e>
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d109      	bne.n	8019a9a <__gethex+0x386>
 8019a86:	f01a 0f02 	tst.w	sl, #2
 8019a8a:	d006      	beq.n	8019a9a <__gethex+0x386>
 8019a8c:	f8d9 0000 	ldr.w	r0, [r9]
 8019a90:	ea4a 0a00 	orr.w	sl, sl, r0
 8019a94:	f01a 0f01 	tst.w	sl, #1
 8019a98:	d10e      	bne.n	8019ab8 <__gethex+0x3a4>
 8019a9a:	f047 0710 	orr.w	r7, r7, #16
 8019a9e:	e033      	b.n	8019b08 <__gethex+0x3f4>
 8019aa0:	f04f 0a01 	mov.w	sl, #1
 8019aa4:	e7d0      	b.n	8019a48 <__gethex+0x334>
 8019aa6:	2701      	movs	r7, #1
 8019aa8:	e7e2      	b.n	8019a70 <__gethex+0x35c>
 8019aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019aac:	f1c3 0301 	rsb	r3, r3, #1
 8019ab0:	9315      	str	r3, [sp, #84]	; 0x54
 8019ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d0f0      	beq.n	8019a9a <__gethex+0x386>
 8019ab8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019abc:	f104 0314 	add.w	r3, r4, #20
 8019ac0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019ac4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019ac8:	f04f 0c00 	mov.w	ip, #0
 8019acc:	4618      	mov	r0, r3
 8019ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ad2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019ad6:	d01c      	beq.n	8019b12 <__gethex+0x3fe>
 8019ad8:	3201      	adds	r2, #1
 8019ada:	6002      	str	r2, [r0, #0]
 8019adc:	2f02      	cmp	r7, #2
 8019ade:	f104 0314 	add.w	r3, r4, #20
 8019ae2:	d13f      	bne.n	8019b64 <__gethex+0x450>
 8019ae4:	f8d8 2000 	ldr.w	r2, [r8]
 8019ae8:	3a01      	subs	r2, #1
 8019aea:	42b2      	cmp	r2, r6
 8019aec:	d10a      	bne.n	8019b04 <__gethex+0x3f0>
 8019aee:	1171      	asrs	r1, r6, #5
 8019af0:	2201      	movs	r2, #1
 8019af2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019af6:	f006 061f 	and.w	r6, r6, #31
 8019afa:	fa02 f606 	lsl.w	r6, r2, r6
 8019afe:	421e      	tst	r6, r3
 8019b00:	bf18      	it	ne
 8019b02:	4617      	movne	r7, r2
 8019b04:	f047 0720 	orr.w	r7, r7, #32
 8019b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019b0a:	601c      	str	r4, [r3, #0]
 8019b0c:	9b04      	ldr	r3, [sp, #16]
 8019b0e:	601d      	str	r5, [r3, #0]
 8019b10:	e695      	b.n	801983e <__gethex+0x12a>
 8019b12:	4299      	cmp	r1, r3
 8019b14:	f843 cc04 	str.w	ip, [r3, #-4]
 8019b18:	d8d8      	bhi.n	8019acc <__gethex+0x3b8>
 8019b1a:	68a3      	ldr	r3, [r4, #8]
 8019b1c:	459b      	cmp	fp, r3
 8019b1e:	db19      	blt.n	8019b54 <__gethex+0x440>
 8019b20:	6861      	ldr	r1, [r4, #4]
 8019b22:	ee18 0a10 	vmov	r0, s16
 8019b26:	3101      	adds	r1, #1
 8019b28:	f000 f92c 	bl	8019d84 <_Balloc>
 8019b2c:	4681      	mov	r9, r0
 8019b2e:	b918      	cbnz	r0, 8019b38 <__gethex+0x424>
 8019b30:	4b1a      	ldr	r3, [pc, #104]	; (8019b9c <__gethex+0x488>)
 8019b32:	4602      	mov	r2, r0
 8019b34:	2184      	movs	r1, #132	; 0x84
 8019b36:	e6a8      	b.n	801988a <__gethex+0x176>
 8019b38:	6922      	ldr	r2, [r4, #16]
 8019b3a:	3202      	adds	r2, #2
 8019b3c:	f104 010c 	add.w	r1, r4, #12
 8019b40:	0092      	lsls	r2, r2, #2
 8019b42:	300c      	adds	r0, #12
 8019b44:	f7fd fa3e 	bl	8016fc4 <memcpy>
 8019b48:	4621      	mov	r1, r4
 8019b4a:	ee18 0a10 	vmov	r0, s16
 8019b4e:	f000 f959 	bl	8019e04 <_Bfree>
 8019b52:	464c      	mov	r4, r9
 8019b54:	6923      	ldr	r3, [r4, #16]
 8019b56:	1c5a      	adds	r2, r3, #1
 8019b58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019b5c:	6122      	str	r2, [r4, #16]
 8019b5e:	2201      	movs	r2, #1
 8019b60:	615a      	str	r2, [r3, #20]
 8019b62:	e7bb      	b.n	8019adc <__gethex+0x3c8>
 8019b64:	6922      	ldr	r2, [r4, #16]
 8019b66:	455a      	cmp	r2, fp
 8019b68:	dd0b      	ble.n	8019b82 <__gethex+0x46e>
 8019b6a:	2101      	movs	r1, #1
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	f7ff fd69 	bl	8019644 <rshift>
 8019b72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019b76:	3501      	adds	r5, #1
 8019b78:	42ab      	cmp	r3, r5
 8019b7a:	f6ff aed0 	blt.w	801991e <__gethex+0x20a>
 8019b7e:	2701      	movs	r7, #1
 8019b80:	e7c0      	b.n	8019b04 <__gethex+0x3f0>
 8019b82:	f016 061f 	ands.w	r6, r6, #31
 8019b86:	d0fa      	beq.n	8019b7e <__gethex+0x46a>
 8019b88:	4453      	add	r3, sl
 8019b8a:	f1c6 0620 	rsb	r6, r6, #32
 8019b8e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019b92:	f000 f9e9 	bl	8019f68 <__hi0bits>
 8019b96:	42b0      	cmp	r0, r6
 8019b98:	dbe7      	blt.n	8019b6a <__gethex+0x456>
 8019b9a:	e7f0      	b.n	8019b7e <__gethex+0x46a>
 8019b9c:	0801ca40 	.word	0x0801ca40

08019ba0 <L_shift>:
 8019ba0:	f1c2 0208 	rsb	r2, r2, #8
 8019ba4:	0092      	lsls	r2, r2, #2
 8019ba6:	b570      	push	{r4, r5, r6, lr}
 8019ba8:	f1c2 0620 	rsb	r6, r2, #32
 8019bac:	6843      	ldr	r3, [r0, #4]
 8019bae:	6804      	ldr	r4, [r0, #0]
 8019bb0:	fa03 f506 	lsl.w	r5, r3, r6
 8019bb4:	432c      	orrs	r4, r5
 8019bb6:	40d3      	lsrs	r3, r2
 8019bb8:	6004      	str	r4, [r0, #0]
 8019bba:	f840 3f04 	str.w	r3, [r0, #4]!
 8019bbe:	4288      	cmp	r0, r1
 8019bc0:	d3f4      	bcc.n	8019bac <L_shift+0xc>
 8019bc2:	bd70      	pop	{r4, r5, r6, pc}

08019bc4 <__match>:
 8019bc4:	b530      	push	{r4, r5, lr}
 8019bc6:	6803      	ldr	r3, [r0, #0]
 8019bc8:	3301      	adds	r3, #1
 8019bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019bce:	b914      	cbnz	r4, 8019bd6 <__match+0x12>
 8019bd0:	6003      	str	r3, [r0, #0]
 8019bd2:	2001      	movs	r0, #1
 8019bd4:	bd30      	pop	{r4, r5, pc}
 8019bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019bde:	2d19      	cmp	r5, #25
 8019be0:	bf98      	it	ls
 8019be2:	3220      	addls	r2, #32
 8019be4:	42a2      	cmp	r2, r4
 8019be6:	d0f0      	beq.n	8019bca <__match+0x6>
 8019be8:	2000      	movs	r0, #0
 8019bea:	e7f3      	b.n	8019bd4 <__match+0x10>

08019bec <__hexnan>:
 8019bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf0:	680b      	ldr	r3, [r1, #0]
 8019bf2:	115e      	asrs	r6, r3, #5
 8019bf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019bf8:	f013 031f 	ands.w	r3, r3, #31
 8019bfc:	b087      	sub	sp, #28
 8019bfe:	bf18      	it	ne
 8019c00:	3604      	addne	r6, #4
 8019c02:	2500      	movs	r5, #0
 8019c04:	1f37      	subs	r7, r6, #4
 8019c06:	4690      	mov	r8, r2
 8019c08:	6802      	ldr	r2, [r0, #0]
 8019c0a:	9301      	str	r3, [sp, #4]
 8019c0c:	4682      	mov	sl, r0
 8019c0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8019c12:	46b9      	mov	r9, r7
 8019c14:	463c      	mov	r4, r7
 8019c16:	9502      	str	r5, [sp, #8]
 8019c18:	46ab      	mov	fp, r5
 8019c1a:	7851      	ldrb	r1, [r2, #1]
 8019c1c:	1c53      	adds	r3, r2, #1
 8019c1e:	9303      	str	r3, [sp, #12]
 8019c20:	b341      	cbz	r1, 8019c74 <__hexnan+0x88>
 8019c22:	4608      	mov	r0, r1
 8019c24:	9205      	str	r2, [sp, #20]
 8019c26:	9104      	str	r1, [sp, #16]
 8019c28:	f7ff fd5e 	bl	80196e8 <__hexdig_fun>
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	d14f      	bne.n	8019cd0 <__hexnan+0xe4>
 8019c30:	9904      	ldr	r1, [sp, #16]
 8019c32:	9a05      	ldr	r2, [sp, #20]
 8019c34:	2920      	cmp	r1, #32
 8019c36:	d818      	bhi.n	8019c6a <__hexnan+0x7e>
 8019c38:	9b02      	ldr	r3, [sp, #8]
 8019c3a:	459b      	cmp	fp, r3
 8019c3c:	dd13      	ble.n	8019c66 <__hexnan+0x7a>
 8019c3e:	454c      	cmp	r4, r9
 8019c40:	d206      	bcs.n	8019c50 <__hexnan+0x64>
 8019c42:	2d07      	cmp	r5, #7
 8019c44:	dc04      	bgt.n	8019c50 <__hexnan+0x64>
 8019c46:	462a      	mov	r2, r5
 8019c48:	4649      	mov	r1, r9
 8019c4a:	4620      	mov	r0, r4
 8019c4c:	f7ff ffa8 	bl	8019ba0 <L_shift>
 8019c50:	4544      	cmp	r4, r8
 8019c52:	d950      	bls.n	8019cf6 <__hexnan+0x10a>
 8019c54:	2300      	movs	r3, #0
 8019c56:	f1a4 0904 	sub.w	r9, r4, #4
 8019c5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8019c5e:	f8cd b008 	str.w	fp, [sp, #8]
 8019c62:	464c      	mov	r4, r9
 8019c64:	461d      	mov	r5, r3
 8019c66:	9a03      	ldr	r2, [sp, #12]
 8019c68:	e7d7      	b.n	8019c1a <__hexnan+0x2e>
 8019c6a:	2929      	cmp	r1, #41	; 0x29
 8019c6c:	d156      	bne.n	8019d1c <__hexnan+0x130>
 8019c6e:	3202      	adds	r2, #2
 8019c70:	f8ca 2000 	str.w	r2, [sl]
 8019c74:	f1bb 0f00 	cmp.w	fp, #0
 8019c78:	d050      	beq.n	8019d1c <__hexnan+0x130>
 8019c7a:	454c      	cmp	r4, r9
 8019c7c:	d206      	bcs.n	8019c8c <__hexnan+0xa0>
 8019c7e:	2d07      	cmp	r5, #7
 8019c80:	dc04      	bgt.n	8019c8c <__hexnan+0xa0>
 8019c82:	462a      	mov	r2, r5
 8019c84:	4649      	mov	r1, r9
 8019c86:	4620      	mov	r0, r4
 8019c88:	f7ff ff8a 	bl	8019ba0 <L_shift>
 8019c8c:	4544      	cmp	r4, r8
 8019c8e:	d934      	bls.n	8019cfa <__hexnan+0x10e>
 8019c90:	f1a8 0204 	sub.w	r2, r8, #4
 8019c94:	4623      	mov	r3, r4
 8019c96:	f853 1b04 	ldr.w	r1, [r3], #4
 8019c9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8019c9e:	429f      	cmp	r7, r3
 8019ca0:	d2f9      	bcs.n	8019c96 <__hexnan+0xaa>
 8019ca2:	1b3b      	subs	r3, r7, r4
 8019ca4:	f023 0303 	bic.w	r3, r3, #3
 8019ca8:	3304      	adds	r3, #4
 8019caa:	3401      	adds	r4, #1
 8019cac:	3e03      	subs	r6, #3
 8019cae:	42b4      	cmp	r4, r6
 8019cb0:	bf88      	it	hi
 8019cb2:	2304      	movhi	r3, #4
 8019cb4:	4443      	add	r3, r8
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	f843 2b04 	str.w	r2, [r3], #4
 8019cbc:	429f      	cmp	r7, r3
 8019cbe:	d2fb      	bcs.n	8019cb8 <__hexnan+0xcc>
 8019cc0:	683b      	ldr	r3, [r7, #0]
 8019cc2:	b91b      	cbnz	r3, 8019ccc <__hexnan+0xe0>
 8019cc4:	4547      	cmp	r7, r8
 8019cc6:	d127      	bne.n	8019d18 <__hexnan+0x12c>
 8019cc8:	2301      	movs	r3, #1
 8019cca:	603b      	str	r3, [r7, #0]
 8019ccc:	2005      	movs	r0, #5
 8019cce:	e026      	b.n	8019d1e <__hexnan+0x132>
 8019cd0:	3501      	adds	r5, #1
 8019cd2:	2d08      	cmp	r5, #8
 8019cd4:	f10b 0b01 	add.w	fp, fp, #1
 8019cd8:	dd06      	ble.n	8019ce8 <__hexnan+0xfc>
 8019cda:	4544      	cmp	r4, r8
 8019cdc:	d9c3      	bls.n	8019c66 <__hexnan+0x7a>
 8019cde:	2300      	movs	r3, #0
 8019ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8019ce4:	2501      	movs	r5, #1
 8019ce6:	3c04      	subs	r4, #4
 8019ce8:	6822      	ldr	r2, [r4, #0]
 8019cea:	f000 000f 	and.w	r0, r0, #15
 8019cee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019cf2:	6022      	str	r2, [r4, #0]
 8019cf4:	e7b7      	b.n	8019c66 <__hexnan+0x7a>
 8019cf6:	2508      	movs	r5, #8
 8019cf8:	e7b5      	b.n	8019c66 <__hexnan+0x7a>
 8019cfa:	9b01      	ldr	r3, [sp, #4]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d0df      	beq.n	8019cc0 <__hexnan+0xd4>
 8019d00:	f04f 32ff 	mov.w	r2, #4294967295
 8019d04:	f1c3 0320 	rsb	r3, r3, #32
 8019d08:	fa22 f303 	lsr.w	r3, r2, r3
 8019d0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019d10:	401a      	ands	r2, r3
 8019d12:	f846 2c04 	str.w	r2, [r6, #-4]
 8019d16:	e7d3      	b.n	8019cc0 <__hexnan+0xd4>
 8019d18:	3f04      	subs	r7, #4
 8019d1a:	e7d1      	b.n	8019cc0 <__hexnan+0xd4>
 8019d1c:	2004      	movs	r0, #4
 8019d1e:	b007      	add	sp, #28
 8019d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d24 <_localeconv_r>:
 8019d24:	4800      	ldr	r0, [pc, #0]	; (8019d28 <_localeconv_r+0x4>)
 8019d26:	4770      	bx	lr
 8019d28:	24000258 	.word	0x24000258

08019d2c <_lseek_r>:
 8019d2c:	b538      	push	{r3, r4, r5, lr}
 8019d2e:	4d07      	ldr	r5, [pc, #28]	; (8019d4c <_lseek_r+0x20>)
 8019d30:	4604      	mov	r4, r0
 8019d32:	4608      	mov	r0, r1
 8019d34:	4611      	mov	r1, r2
 8019d36:	2200      	movs	r2, #0
 8019d38:	602a      	str	r2, [r5, #0]
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	f7ea fb6c 	bl	8004418 <_lseek>
 8019d40:	1c43      	adds	r3, r0, #1
 8019d42:	d102      	bne.n	8019d4a <_lseek_r+0x1e>
 8019d44:	682b      	ldr	r3, [r5, #0]
 8019d46:	b103      	cbz	r3, 8019d4a <_lseek_r+0x1e>
 8019d48:	6023      	str	r3, [r4, #0]
 8019d4a:	bd38      	pop	{r3, r4, r5, pc}
 8019d4c:	240029b0 	.word	0x240029b0

08019d50 <malloc>:
 8019d50:	4b02      	ldr	r3, [pc, #8]	; (8019d5c <malloc+0xc>)
 8019d52:	4601      	mov	r1, r0
 8019d54:	6818      	ldr	r0, [r3, #0]
 8019d56:	f000 bd55 	b.w	801a804 <_malloc_r>
 8019d5a:	bf00      	nop
 8019d5c:	24000100 	.word	0x24000100

08019d60 <__ascii_mbtowc>:
 8019d60:	b082      	sub	sp, #8
 8019d62:	b901      	cbnz	r1, 8019d66 <__ascii_mbtowc+0x6>
 8019d64:	a901      	add	r1, sp, #4
 8019d66:	b142      	cbz	r2, 8019d7a <__ascii_mbtowc+0x1a>
 8019d68:	b14b      	cbz	r3, 8019d7e <__ascii_mbtowc+0x1e>
 8019d6a:	7813      	ldrb	r3, [r2, #0]
 8019d6c:	600b      	str	r3, [r1, #0]
 8019d6e:	7812      	ldrb	r2, [r2, #0]
 8019d70:	1e10      	subs	r0, r2, #0
 8019d72:	bf18      	it	ne
 8019d74:	2001      	movne	r0, #1
 8019d76:	b002      	add	sp, #8
 8019d78:	4770      	bx	lr
 8019d7a:	4610      	mov	r0, r2
 8019d7c:	e7fb      	b.n	8019d76 <__ascii_mbtowc+0x16>
 8019d7e:	f06f 0001 	mvn.w	r0, #1
 8019d82:	e7f8      	b.n	8019d76 <__ascii_mbtowc+0x16>

08019d84 <_Balloc>:
 8019d84:	b570      	push	{r4, r5, r6, lr}
 8019d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019d88:	4604      	mov	r4, r0
 8019d8a:	460d      	mov	r5, r1
 8019d8c:	b976      	cbnz	r6, 8019dac <_Balloc+0x28>
 8019d8e:	2010      	movs	r0, #16
 8019d90:	f7ff ffde 	bl	8019d50 <malloc>
 8019d94:	4602      	mov	r2, r0
 8019d96:	6260      	str	r0, [r4, #36]	; 0x24
 8019d98:	b920      	cbnz	r0, 8019da4 <_Balloc+0x20>
 8019d9a:	4b18      	ldr	r3, [pc, #96]	; (8019dfc <_Balloc+0x78>)
 8019d9c:	4818      	ldr	r0, [pc, #96]	; (8019e00 <_Balloc+0x7c>)
 8019d9e:	2166      	movs	r1, #102	; 0x66
 8019da0:	f000 ff4c 	bl	801ac3c <__assert_func>
 8019da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019da8:	6006      	str	r6, [r0, #0]
 8019daa:	60c6      	str	r6, [r0, #12]
 8019dac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019dae:	68f3      	ldr	r3, [r6, #12]
 8019db0:	b183      	cbz	r3, 8019dd4 <_Balloc+0x50>
 8019db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019db4:	68db      	ldr	r3, [r3, #12]
 8019db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019dba:	b9b8      	cbnz	r0, 8019dec <_Balloc+0x68>
 8019dbc:	2101      	movs	r1, #1
 8019dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8019dc2:	1d72      	adds	r2, r6, #5
 8019dc4:	0092      	lsls	r2, r2, #2
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	f000 fc9a 	bl	801a700 <_calloc_r>
 8019dcc:	b160      	cbz	r0, 8019de8 <_Balloc+0x64>
 8019dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019dd2:	e00e      	b.n	8019df2 <_Balloc+0x6e>
 8019dd4:	2221      	movs	r2, #33	; 0x21
 8019dd6:	2104      	movs	r1, #4
 8019dd8:	4620      	mov	r0, r4
 8019dda:	f000 fc91 	bl	801a700 <_calloc_r>
 8019dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019de0:	60f0      	str	r0, [r6, #12]
 8019de2:	68db      	ldr	r3, [r3, #12]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d1e4      	bne.n	8019db2 <_Balloc+0x2e>
 8019de8:	2000      	movs	r0, #0
 8019dea:	bd70      	pop	{r4, r5, r6, pc}
 8019dec:	6802      	ldr	r2, [r0, #0]
 8019dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019df2:	2300      	movs	r3, #0
 8019df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019df8:	e7f7      	b.n	8019dea <_Balloc+0x66>
 8019dfa:	bf00      	nop
 8019dfc:	0801c9ce 	.word	0x0801c9ce
 8019e00:	0801cacc 	.word	0x0801cacc

08019e04 <_Bfree>:
 8019e04:	b570      	push	{r4, r5, r6, lr}
 8019e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019e08:	4605      	mov	r5, r0
 8019e0a:	460c      	mov	r4, r1
 8019e0c:	b976      	cbnz	r6, 8019e2c <_Bfree+0x28>
 8019e0e:	2010      	movs	r0, #16
 8019e10:	f7ff ff9e 	bl	8019d50 <malloc>
 8019e14:	4602      	mov	r2, r0
 8019e16:	6268      	str	r0, [r5, #36]	; 0x24
 8019e18:	b920      	cbnz	r0, 8019e24 <_Bfree+0x20>
 8019e1a:	4b09      	ldr	r3, [pc, #36]	; (8019e40 <_Bfree+0x3c>)
 8019e1c:	4809      	ldr	r0, [pc, #36]	; (8019e44 <_Bfree+0x40>)
 8019e1e:	218a      	movs	r1, #138	; 0x8a
 8019e20:	f000 ff0c 	bl	801ac3c <__assert_func>
 8019e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019e28:	6006      	str	r6, [r0, #0]
 8019e2a:	60c6      	str	r6, [r0, #12]
 8019e2c:	b13c      	cbz	r4, 8019e3e <_Bfree+0x3a>
 8019e2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019e30:	6862      	ldr	r2, [r4, #4]
 8019e32:	68db      	ldr	r3, [r3, #12]
 8019e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019e38:	6021      	str	r1, [r4, #0]
 8019e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019e3e:	bd70      	pop	{r4, r5, r6, pc}
 8019e40:	0801c9ce 	.word	0x0801c9ce
 8019e44:	0801cacc 	.word	0x0801cacc

08019e48 <__multadd>:
 8019e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e4c:	690d      	ldr	r5, [r1, #16]
 8019e4e:	4607      	mov	r7, r0
 8019e50:	460c      	mov	r4, r1
 8019e52:	461e      	mov	r6, r3
 8019e54:	f101 0c14 	add.w	ip, r1, #20
 8019e58:	2000      	movs	r0, #0
 8019e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8019e5e:	b299      	uxth	r1, r3
 8019e60:	fb02 6101 	mla	r1, r2, r1, r6
 8019e64:	0c1e      	lsrs	r6, r3, #16
 8019e66:	0c0b      	lsrs	r3, r1, #16
 8019e68:	fb02 3306 	mla	r3, r2, r6, r3
 8019e6c:	b289      	uxth	r1, r1
 8019e6e:	3001      	adds	r0, #1
 8019e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019e74:	4285      	cmp	r5, r0
 8019e76:	f84c 1b04 	str.w	r1, [ip], #4
 8019e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019e7e:	dcec      	bgt.n	8019e5a <__multadd+0x12>
 8019e80:	b30e      	cbz	r6, 8019ec6 <__multadd+0x7e>
 8019e82:	68a3      	ldr	r3, [r4, #8]
 8019e84:	42ab      	cmp	r3, r5
 8019e86:	dc19      	bgt.n	8019ebc <__multadd+0x74>
 8019e88:	6861      	ldr	r1, [r4, #4]
 8019e8a:	4638      	mov	r0, r7
 8019e8c:	3101      	adds	r1, #1
 8019e8e:	f7ff ff79 	bl	8019d84 <_Balloc>
 8019e92:	4680      	mov	r8, r0
 8019e94:	b928      	cbnz	r0, 8019ea2 <__multadd+0x5a>
 8019e96:	4602      	mov	r2, r0
 8019e98:	4b0c      	ldr	r3, [pc, #48]	; (8019ecc <__multadd+0x84>)
 8019e9a:	480d      	ldr	r0, [pc, #52]	; (8019ed0 <__multadd+0x88>)
 8019e9c:	21b5      	movs	r1, #181	; 0xb5
 8019e9e:	f000 fecd 	bl	801ac3c <__assert_func>
 8019ea2:	6922      	ldr	r2, [r4, #16]
 8019ea4:	3202      	adds	r2, #2
 8019ea6:	f104 010c 	add.w	r1, r4, #12
 8019eaa:	0092      	lsls	r2, r2, #2
 8019eac:	300c      	adds	r0, #12
 8019eae:	f7fd f889 	bl	8016fc4 <memcpy>
 8019eb2:	4621      	mov	r1, r4
 8019eb4:	4638      	mov	r0, r7
 8019eb6:	f7ff ffa5 	bl	8019e04 <_Bfree>
 8019eba:	4644      	mov	r4, r8
 8019ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019ec0:	3501      	adds	r5, #1
 8019ec2:	615e      	str	r6, [r3, #20]
 8019ec4:	6125      	str	r5, [r4, #16]
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ecc:	0801ca40 	.word	0x0801ca40
 8019ed0:	0801cacc 	.word	0x0801cacc

08019ed4 <__s2b>:
 8019ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ed8:	460c      	mov	r4, r1
 8019eda:	4615      	mov	r5, r2
 8019edc:	461f      	mov	r7, r3
 8019ede:	2209      	movs	r2, #9
 8019ee0:	3308      	adds	r3, #8
 8019ee2:	4606      	mov	r6, r0
 8019ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8019ee8:	2100      	movs	r1, #0
 8019eea:	2201      	movs	r2, #1
 8019eec:	429a      	cmp	r2, r3
 8019eee:	db09      	blt.n	8019f04 <__s2b+0x30>
 8019ef0:	4630      	mov	r0, r6
 8019ef2:	f7ff ff47 	bl	8019d84 <_Balloc>
 8019ef6:	b940      	cbnz	r0, 8019f0a <__s2b+0x36>
 8019ef8:	4602      	mov	r2, r0
 8019efa:	4b19      	ldr	r3, [pc, #100]	; (8019f60 <__s2b+0x8c>)
 8019efc:	4819      	ldr	r0, [pc, #100]	; (8019f64 <__s2b+0x90>)
 8019efe:	21ce      	movs	r1, #206	; 0xce
 8019f00:	f000 fe9c 	bl	801ac3c <__assert_func>
 8019f04:	0052      	lsls	r2, r2, #1
 8019f06:	3101      	adds	r1, #1
 8019f08:	e7f0      	b.n	8019eec <__s2b+0x18>
 8019f0a:	9b08      	ldr	r3, [sp, #32]
 8019f0c:	6143      	str	r3, [r0, #20]
 8019f0e:	2d09      	cmp	r5, #9
 8019f10:	f04f 0301 	mov.w	r3, #1
 8019f14:	6103      	str	r3, [r0, #16]
 8019f16:	dd16      	ble.n	8019f46 <__s2b+0x72>
 8019f18:	f104 0909 	add.w	r9, r4, #9
 8019f1c:	46c8      	mov	r8, r9
 8019f1e:	442c      	add	r4, r5
 8019f20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019f24:	4601      	mov	r1, r0
 8019f26:	3b30      	subs	r3, #48	; 0x30
 8019f28:	220a      	movs	r2, #10
 8019f2a:	4630      	mov	r0, r6
 8019f2c:	f7ff ff8c 	bl	8019e48 <__multadd>
 8019f30:	45a0      	cmp	r8, r4
 8019f32:	d1f5      	bne.n	8019f20 <__s2b+0x4c>
 8019f34:	f1a5 0408 	sub.w	r4, r5, #8
 8019f38:	444c      	add	r4, r9
 8019f3a:	1b2d      	subs	r5, r5, r4
 8019f3c:	1963      	adds	r3, r4, r5
 8019f3e:	42bb      	cmp	r3, r7
 8019f40:	db04      	blt.n	8019f4c <__s2b+0x78>
 8019f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f46:	340a      	adds	r4, #10
 8019f48:	2509      	movs	r5, #9
 8019f4a:	e7f6      	b.n	8019f3a <__s2b+0x66>
 8019f4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019f50:	4601      	mov	r1, r0
 8019f52:	3b30      	subs	r3, #48	; 0x30
 8019f54:	220a      	movs	r2, #10
 8019f56:	4630      	mov	r0, r6
 8019f58:	f7ff ff76 	bl	8019e48 <__multadd>
 8019f5c:	e7ee      	b.n	8019f3c <__s2b+0x68>
 8019f5e:	bf00      	nop
 8019f60:	0801ca40 	.word	0x0801ca40
 8019f64:	0801cacc 	.word	0x0801cacc

08019f68 <__hi0bits>:
 8019f68:	0c03      	lsrs	r3, r0, #16
 8019f6a:	041b      	lsls	r3, r3, #16
 8019f6c:	b9d3      	cbnz	r3, 8019fa4 <__hi0bits+0x3c>
 8019f6e:	0400      	lsls	r0, r0, #16
 8019f70:	2310      	movs	r3, #16
 8019f72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019f76:	bf04      	itt	eq
 8019f78:	0200      	lsleq	r0, r0, #8
 8019f7a:	3308      	addeq	r3, #8
 8019f7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019f80:	bf04      	itt	eq
 8019f82:	0100      	lsleq	r0, r0, #4
 8019f84:	3304      	addeq	r3, #4
 8019f86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019f8a:	bf04      	itt	eq
 8019f8c:	0080      	lsleq	r0, r0, #2
 8019f8e:	3302      	addeq	r3, #2
 8019f90:	2800      	cmp	r0, #0
 8019f92:	db05      	blt.n	8019fa0 <__hi0bits+0x38>
 8019f94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019f98:	f103 0301 	add.w	r3, r3, #1
 8019f9c:	bf08      	it	eq
 8019f9e:	2320      	moveq	r3, #32
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	4770      	bx	lr
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	e7e4      	b.n	8019f72 <__hi0bits+0xa>

08019fa8 <__lo0bits>:
 8019fa8:	6803      	ldr	r3, [r0, #0]
 8019faa:	f013 0207 	ands.w	r2, r3, #7
 8019fae:	4601      	mov	r1, r0
 8019fb0:	d00b      	beq.n	8019fca <__lo0bits+0x22>
 8019fb2:	07da      	lsls	r2, r3, #31
 8019fb4:	d423      	bmi.n	8019ffe <__lo0bits+0x56>
 8019fb6:	0798      	lsls	r0, r3, #30
 8019fb8:	bf49      	itett	mi
 8019fba:	085b      	lsrmi	r3, r3, #1
 8019fbc:	089b      	lsrpl	r3, r3, #2
 8019fbe:	2001      	movmi	r0, #1
 8019fc0:	600b      	strmi	r3, [r1, #0]
 8019fc2:	bf5c      	itt	pl
 8019fc4:	600b      	strpl	r3, [r1, #0]
 8019fc6:	2002      	movpl	r0, #2
 8019fc8:	4770      	bx	lr
 8019fca:	b298      	uxth	r0, r3
 8019fcc:	b9a8      	cbnz	r0, 8019ffa <__lo0bits+0x52>
 8019fce:	0c1b      	lsrs	r3, r3, #16
 8019fd0:	2010      	movs	r0, #16
 8019fd2:	b2da      	uxtb	r2, r3
 8019fd4:	b90a      	cbnz	r2, 8019fda <__lo0bits+0x32>
 8019fd6:	3008      	adds	r0, #8
 8019fd8:	0a1b      	lsrs	r3, r3, #8
 8019fda:	071a      	lsls	r2, r3, #28
 8019fdc:	bf04      	itt	eq
 8019fde:	091b      	lsreq	r3, r3, #4
 8019fe0:	3004      	addeq	r0, #4
 8019fe2:	079a      	lsls	r2, r3, #30
 8019fe4:	bf04      	itt	eq
 8019fe6:	089b      	lsreq	r3, r3, #2
 8019fe8:	3002      	addeq	r0, #2
 8019fea:	07da      	lsls	r2, r3, #31
 8019fec:	d403      	bmi.n	8019ff6 <__lo0bits+0x4e>
 8019fee:	085b      	lsrs	r3, r3, #1
 8019ff0:	f100 0001 	add.w	r0, r0, #1
 8019ff4:	d005      	beq.n	801a002 <__lo0bits+0x5a>
 8019ff6:	600b      	str	r3, [r1, #0]
 8019ff8:	4770      	bx	lr
 8019ffa:	4610      	mov	r0, r2
 8019ffc:	e7e9      	b.n	8019fd2 <__lo0bits+0x2a>
 8019ffe:	2000      	movs	r0, #0
 801a000:	4770      	bx	lr
 801a002:	2020      	movs	r0, #32
 801a004:	4770      	bx	lr
	...

0801a008 <__i2b>:
 801a008:	b510      	push	{r4, lr}
 801a00a:	460c      	mov	r4, r1
 801a00c:	2101      	movs	r1, #1
 801a00e:	f7ff feb9 	bl	8019d84 <_Balloc>
 801a012:	4602      	mov	r2, r0
 801a014:	b928      	cbnz	r0, 801a022 <__i2b+0x1a>
 801a016:	4b05      	ldr	r3, [pc, #20]	; (801a02c <__i2b+0x24>)
 801a018:	4805      	ldr	r0, [pc, #20]	; (801a030 <__i2b+0x28>)
 801a01a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a01e:	f000 fe0d 	bl	801ac3c <__assert_func>
 801a022:	2301      	movs	r3, #1
 801a024:	6144      	str	r4, [r0, #20]
 801a026:	6103      	str	r3, [r0, #16]
 801a028:	bd10      	pop	{r4, pc}
 801a02a:	bf00      	nop
 801a02c:	0801ca40 	.word	0x0801ca40
 801a030:	0801cacc 	.word	0x0801cacc

0801a034 <__multiply>:
 801a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a038:	4691      	mov	r9, r2
 801a03a:	690a      	ldr	r2, [r1, #16]
 801a03c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a040:	429a      	cmp	r2, r3
 801a042:	bfb8      	it	lt
 801a044:	460b      	movlt	r3, r1
 801a046:	460c      	mov	r4, r1
 801a048:	bfbc      	itt	lt
 801a04a:	464c      	movlt	r4, r9
 801a04c:	4699      	movlt	r9, r3
 801a04e:	6927      	ldr	r7, [r4, #16]
 801a050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a054:	68a3      	ldr	r3, [r4, #8]
 801a056:	6861      	ldr	r1, [r4, #4]
 801a058:	eb07 060a 	add.w	r6, r7, sl
 801a05c:	42b3      	cmp	r3, r6
 801a05e:	b085      	sub	sp, #20
 801a060:	bfb8      	it	lt
 801a062:	3101      	addlt	r1, #1
 801a064:	f7ff fe8e 	bl	8019d84 <_Balloc>
 801a068:	b930      	cbnz	r0, 801a078 <__multiply+0x44>
 801a06a:	4602      	mov	r2, r0
 801a06c:	4b44      	ldr	r3, [pc, #272]	; (801a180 <__multiply+0x14c>)
 801a06e:	4845      	ldr	r0, [pc, #276]	; (801a184 <__multiply+0x150>)
 801a070:	f240 115d 	movw	r1, #349	; 0x15d
 801a074:	f000 fde2 	bl	801ac3c <__assert_func>
 801a078:	f100 0514 	add.w	r5, r0, #20
 801a07c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a080:	462b      	mov	r3, r5
 801a082:	2200      	movs	r2, #0
 801a084:	4543      	cmp	r3, r8
 801a086:	d321      	bcc.n	801a0cc <__multiply+0x98>
 801a088:	f104 0314 	add.w	r3, r4, #20
 801a08c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a090:	f109 0314 	add.w	r3, r9, #20
 801a094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a098:	9202      	str	r2, [sp, #8]
 801a09a:	1b3a      	subs	r2, r7, r4
 801a09c:	3a15      	subs	r2, #21
 801a09e:	f022 0203 	bic.w	r2, r2, #3
 801a0a2:	3204      	adds	r2, #4
 801a0a4:	f104 0115 	add.w	r1, r4, #21
 801a0a8:	428f      	cmp	r7, r1
 801a0aa:	bf38      	it	cc
 801a0ac:	2204      	movcc	r2, #4
 801a0ae:	9201      	str	r2, [sp, #4]
 801a0b0:	9a02      	ldr	r2, [sp, #8]
 801a0b2:	9303      	str	r3, [sp, #12]
 801a0b4:	429a      	cmp	r2, r3
 801a0b6:	d80c      	bhi.n	801a0d2 <__multiply+0x9e>
 801a0b8:	2e00      	cmp	r6, #0
 801a0ba:	dd03      	ble.n	801a0c4 <__multiply+0x90>
 801a0bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d05a      	beq.n	801a17a <__multiply+0x146>
 801a0c4:	6106      	str	r6, [r0, #16]
 801a0c6:	b005      	add	sp, #20
 801a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0cc:	f843 2b04 	str.w	r2, [r3], #4
 801a0d0:	e7d8      	b.n	801a084 <__multiply+0x50>
 801a0d2:	f8b3 a000 	ldrh.w	sl, [r3]
 801a0d6:	f1ba 0f00 	cmp.w	sl, #0
 801a0da:	d024      	beq.n	801a126 <__multiply+0xf2>
 801a0dc:	f104 0e14 	add.w	lr, r4, #20
 801a0e0:	46a9      	mov	r9, r5
 801a0e2:	f04f 0c00 	mov.w	ip, #0
 801a0e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a0ea:	f8d9 1000 	ldr.w	r1, [r9]
 801a0ee:	fa1f fb82 	uxth.w	fp, r2
 801a0f2:	b289      	uxth	r1, r1
 801a0f4:	fb0a 110b 	mla	r1, sl, fp, r1
 801a0f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a0fc:	f8d9 2000 	ldr.w	r2, [r9]
 801a100:	4461      	add	r1, ip
 801a102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a106:	fb0a c20b 	mla	r2, sl, fp, ip
 801a10a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a10e:	b289      	uxth	r1, r1
 801a110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a114:	4577      	cmp	r7, lr
 801a116:	f849 1b04 	str.w	r1, [r9], #4
 801a11a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a11e:	d8e2      	bhi.n	801a0e6 <__multiply+0xb2>
 801a120:	9a01      	ldr	r2, [sp, #4]
 801a122:	f845 c002 	str.w	ip, [r5, r2]
 801a126:	9a03      	ldr	r2, [sp, #12]
 801a128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a12c:	3304      	adds	r3, #4
 801a12e:	f1b9 0f00 	cmp.w	r9, #0
 801a132:	d020      	beq.n	801a176 <__multiply+0x142>
 801a134:	6829      	ldr	r1, [r5, #0]
 801a136:	f104 0c14 	add.w	ip, r4, #20
 801a13a:	46ae      	mov	lr, r5
 801a13c:	f04f 0a00 	mov.w	sl, #0
 801a140:	f8bc b000 	ldrh.w	fp, [ip]
 801a144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a148:	fb09 220b 	mla	r2, r9, fp, r2
 801a14c:	4492      	add	sl, r2
 801a14e:	b289      	uxth	r1, r1
 801a150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801a154:	f84e 1b04 	str.w	r1, [lr], #4
 801a158:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a15c:	f8be 1000 	ldrh.w	r1, [lr]
 801a160:	0c12      	lsrs	r2, r2, #16
 801a162:	fb09 1102 	mla	r1, r9, r2, r1
 801a166:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801a16a:	4567      	cmp	r7, ip
 801a16c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a170:	d8e6      	bhi.n	801a140 <__multiply+0x10c>
 801a172:	9a01      	ldr	r2, [sp, #4]
 801a174:	50a9      	str	r1, [r5, r2]
 801a176:	3504      	adds	r5, #4
 801a178:	e79a      	b.n	801a0b0 <__multiply+0x7c>
 801a17a:	3e01      	subs	r6, #1
 801a17c:	e79c      	b.n	801a0b8 <__multiply+0x84>
 801a17e:	bf00      	nop
 801a180:	0801ca40 	.word	0x0801ca40
 801a184:	0801cacc 	.word	0x0801cacc

0801a188 <__pow5mult>:
 801a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a18c:	4615      	mov	r5, r2
 801a18e:	f012 0203 	ands.w	r2, r2, #3
 801a192:	4606      	mov	r6, r0
 801a194:	460f      	mov	r7, r1
 801a196:	d007      	beq.n	801a1a8 <__pow5mult+0x20>
 801a198:	4c25      	ldr	r4, [pc, #148]	; (801a230 <__pow5mult+0xa8>)
 801a19a:	3a01      	subs	r2, #1
 801a19c:	2300      	movs	r3, #0
 801a19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a1a2:	f7ff fe51 	bl	8019e48 <__multadd>
 801a1a6:	4607      	mov	r7, r0
 801a1a8:	10ad      	asrs	r5, r5, #2
 801a1aa:	d03d      	beq.n	801a228 <__pow5mult+0xa0>
 801a1ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a1ae:	b97c      	cbnz	r4, 801a1d0 <__pow5mult+0x48>
 801a1b0:	2010      	movs	r0, #16
 801a1b2:	f7ff fdcd 	bl	8019d50 <malloc>
 801a1b6:	4602      	mov	r2, r0
 801a1b8:	6270      	str	r0, [r6, #36]	; 0x24
 801a1ba:	b928      	cbnz	r0, 801a1c8 <__pow5mult+0x40>
 801a1bc:	4b1d      	ldr	r3, [pc, #116]	; (801a234 <__pow5mult+0xac>)
 801a1be:	481e      	ldr	r0, [pc, #120]	; (801a238 <__pow5mult+0xb0>)
 801a1c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a1c4:	f000 fd3a 	bl	801ac3c <__assert_func>
 801a1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a1cc:	6004      	str	r4, [r0, #0]
 801a1ce:	60c4      	str	r4, [r0, #12]
 801a1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a1d8:	b94c      	cbnz	r4, 801a1ee <__pow5mult+0x66>
 801a1da:	f240 2171 	movw	r1, #625	; 0x271
 801a1de:	4630      	mov	r0, r6
 801a1e0:	f7ff ff12 	bl	801a008 <__i2b>
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 801a1ea:	4604      	mov	r4, r0
 801a1ec:	6003      	str	r3, [r0, #0]
 801a1ee:	f04f 0900 	mov.w	r9, #0
 801a1f2:	07eb      	lsls	r3, r5, #31
 801a1f4:	d50a      	bpl.n	801a20c <__pow5mult+0x84>
 801a1f6:	4639      	mov	r1, r7
 801a1f8:	4622      	mov	r2, r4
 801a1fa:	4630      	mov	r0, r6
 801a1fc:	f7ff ff1a 	bl	801a034 <__multiply>
 801a200:	4639      	mov	r1, r7
 801a202:	4680      	mov	r8, r0
 801a204:	4630      	mov	r0, r6
 801a206:	f7ff fdfd 	bl	8019e04 <_Bfree>
 801a20a:	4647      	mov	r7, r8
 801a20c:	106d      	asrs	r5, r5, #1
 801a20e:	d00b      	beq.n	801a228 <__pow5mult+0xa0>
 801a210:	6820      	ldr	r0, [r4, #0]
 801a212:	b938      	cbnz	r0, 801a224 <__pow5mult+0x9c>
 801a214:	4622      	mov	r2, r4
 801a216:	4621      	mov	r1, r4
 801a218:	4630      	mov	r0, r6
 801a21a:	f7ff ff0b 	bl	801a034 <__multiply>
 801a21e:	6020      	str	r0, [r4, #0]
 801a220:	f8c0 9000 	str.w	r9, [r0]
 801a224:	4604      	mov	r4, r0
 801a226:	e7e4      	b.n	801a1f2 <__pow5mult+0x6a>
 801a228:	4638      	mov	r0, r7
 801a22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a22e:	bf00      	nop
 801a230:	0801cc18 	.word	0x0801cc18
 801a234:	0801c9ce 	.word	0x0801c9ce
 801a238:	0801cacc 	.word	0x0801cacc

0801a23c <__lshift>:
 801a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a240:	460c      	mov	r4, r1
 801a242:	6849      	ldr	r1, [r1, #4]
 801a244:	6923      	ldr	r3, [r4, #16]
 801a246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a24a:	68a3      	ldr	r3, [r4, #8]
 801a24c:	4607      	mov	r7, r0
 801a24e:	4691      	mov	r9, r2
 801a250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a254:	f108 0601 	add.w	r6, r8, #1
 801a258:	42b3      	cmp	r3, r6
 801a25a:	db0b      	blt.n	801a274 <__lshift+0x38>
 801a25c:	4638      	mov	r0, r7
 801a25e:	f7ff fd91 	bl	8019d84 <_Balloc>
 801a262:	4605      	mov	r5, r0
 801a264:	b948      	cbnz	r0, 801a27a <__lshift+0x3e>
 801a266:	4602      	mov	r2, r0
 801a268:	4b2a      	ldr	r3, [pc, #168]	; (801a314 <__lshift+0xd8>)
 801a26a:	482b      	ldr	r0, [pc, #172]	; (801a318 <__lshift+0xdc>)
 801a26c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a270:	f000 fce4 	bl	801ac3c <__assert_func>
 801a274:	3101      	adds	r1, #1
 801a276:	005b      	lsls	r3, r3, #1
 801a278:	e7ee      	b.n	801a258 <__lshift+0x1c>
 801a27a:	2300      	movs	r3, #0
 801a27c:	f100 0114 	add.w	r1, r0, #20
 801a280:	f100 0210 	add.w	r2, r0, #16
 801a284:	4618      	mov	r0, r3
 801a286:	4553      	cmp	r3, sl
 801a288:	db37      	blt.n	801a2fa <__lshift+0xbe>
 801a28a:	6920      	ldr	r0, [r4, #16]
 801a28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a290:	f104 0314 	add.w	r3, r4, #20
 801a294:	f019 091f 	ands.w	r9, r9, #31
 801a298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a29c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a2a0:	d02f      	beq.n	801a302 <__lshift+0xc6>
 801a2a2:	f1c9 0e20 	rsb	lr, r9, #32
 801a2a6:	468a      	mov	sl, r1
 801a2a8:	f04f 0c00 	mov.w	ip, #0
 801a2ac:	681a      	ldr	r2, [r3, #0]
 801a2ae:	fa02 f209 	lsl.w	r2, r2, r9
 801a2b2:	ea42 020c 	orr.w	r2, r2, ip
 801a2b6:	f84a 2b04 	str.w	r2, [sl], #4
 801a2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2be:	4298      	cmp	r0, r3
 801a2c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801a2c4:	d8f2      	bhi.n	801a2ac <__lshift+0x70>
 801a2c6:	1b03      	subs	r3, r0, r4
 801a2c8:	3b15      	subs	r3, #21
 801a2ca:	f023 0303 	bic.w	r3, r3, #3
 801a2ce:	3304      	adds	r3, #4
 801a2d0:	f104 0215 	add.w	r2, r4, #21
 801a2d4:	4290      	cmp	r0, r2
 801a2d6:	bf38      	it	cc
 801a2d8:	2304      	movcc	r3, #4
 801a2da:	f841 c003 	str.w	ip, [r1, r3]
 801a2de:	f1bc 0f00 	cmp.w	ip, #0
 801a2e2:	d001      	beq.n	801a2e8 <__lshift+0xac>
 801a2e4:	f108 0602 	add.w	r6, r8, #2
 801a2e8:	3e01      	subs	r6, #1
 801a2ea:	4638      	mov	r0, r7
 801a2ec:	612e      	str	r6, [r5, #16]
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	f7ff fd88 	bl	8019e04 <_Bfree>
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2fa:	f842 0f04 	str.w	r0, [r2, #4]!
 801a2fe:	3301      	adds	r3, #1
 801a300:	e7c1      	b.n	801a286 <__lshift+0x4a>
 801a302:	3904      	subs	r1, #4
 801a304:	f853 2b04 	ldr.w	r2, [r3], #4
 801a308:	f841 2f04 	str.w	r2, [r1, #4]!
 801a30c:	4298      	cmp	r0, r3
 801a30e:	d8f9      	bhi.n	801a304 <__lshift+0xc8>
 801a310:	e7ea      	b.n	801a2e8 <__lshift+0xac>
 801a312:	bf00      	nop
 801a314:	0801ca40 	.word	0x0801ca40
 801a318:	0801cacc 	.word	0x0801cacc

0801a31c <__mcmp>:
 801a31c:	b530      	push	{r4, r5, lr}
 801a31e:	6902      	ldr	r2, [r0, #16]
 801a320:	690c      	ldr	r4, [r1, #16]
 801a322:	1b12      	subs	r2, r2, r4
 801a324:	d10e      	bne.n	801a344 <__mcmp+0x28>
 801a326:	f100 0314 	add.w	r3, r0, #20
 801a32a:	3114      	adds	r1, #20
 801a32c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a330:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a334:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a338:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a33c:	42a5      	cmp	r5, r4
 801a33e:	d003      	beq.n	801a348 <__mcmp+0x2c>
 801a340:	d305      	bcc.n	801a34e <__mcmp+0x32>
 801a342:	2201      	movs	r2, #1
 801a344:	4610      	mov	r0, r2
 801a346:	bd30      	pop	{r4, r5, pc}
 801a348:	4283      	cmp	r3, r0
 801a34a:	d3f3      	bcc.n	801a334 <__mcmp+0x18>
 801a34c:	e7fa      	b.n	801a344 <__mcmp+0x28>
 801a34e:	f04f 32ff 	mov.w	r2, #4294967295
 801a352:	e7f7      	b.n	801a344 <__mcmp+0x28>

0801a354 <__mdiff>:
 801a354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a358:	460c      	mov	r4, r1
 801a35a:	4606      	mov	r6, r0
 801a35c:	4611      	mov	r1, r2
 801a35e:	4620      	mov	r0, r4
 801a360:	4690      	mov	r8, r2
 801a362:	f7ff ffdb 	bl	801a31c <__mcmp>
 801a366:	1e05      	subs	r5, r0, #0
 801a368:	d110      	bne.n	801a38c <__mdiff+0x38>
 801a36a:	4629      	mov	r1, r5
 801a36c:	4630      	mov	r0, r6
 801a36e:	f7ff fd09 	bl	8019d84 <_Balloc>
 801a372:	b930      	cbnz	r0, 801a382 <__mdiff+0x2e>
 801a374:	4b3a      	ldr	r3, [pc, #232]	; (801a460 <__mdiff+0x10c>)
 801a376:	4602      	mov	r2, r0
 801a378:	f240 2132 	movw	r1, #562	; 0x232
 801a37c:	4839      	ldr	r0, [pc, #228]	; (801a464 <__mdiff+0x110>)
 801a37e:	f000 fc5d 	bl	801ac3c <__assert_func>
 801a382:	2301      	movs	r3, #1
 801a384:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a38c:	bfa4      	itt	ge
 801a38e:	4643      	movge	r3, r8
 801a390:	46a0      	movge	r8, r4
 801a392:	4630      	mov	r0, r6
 801a394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a398:	bfa6      	itte	ge
 801a39a:	461c      	movge	r4, r3
 801a39c:	2500      	movge	r5, #0
 801a39e:	2501      	movlt	r5, #1
 801a3a0:	f7ff fcf0 	bl	8019d84 <_Balloc>
 801a3a4:	b920      	cbnz	r0, 801a3b0 <__mdiff+0x5c>
 801a3a6:	4b2e      	ldr	r3, [pc, #184]	; (801a460 <__mdiff+0x10c>)
 801a3a8:	4602      	mov	r2, r0
 801a3aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a3ae:	e7e5      	b.n	801a37c <__mdiff+0x28>
 801a3b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a3b4:	6926      	ldr	r6, [r4, #16]
 801a3b6:	60c5      	str	r5, [r0, #12]
 801a3b8:	f104 0914 	add.w	r9, r4, #20
 801a3bc:	f108 0514 	add.w	r5, r8, #20
 801a3c0:	f100 0e14 	add.w	lr, r0, #20
 801a3c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a3c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a3cc:	f108 0210 	add.w	r2, r8, #16
 801a3d0:	46f2      	mov	sl, lr
 801a3d2:	2100      	movs	r1, #0
 801a3d4:	f859 3b04 	ldr.w	r3, [r9], #4
 801a3d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a3dc:	fa1f f883 	uxth.w	r8, r3
 801a3e0:	fa11 f18b 	uxtah	r1, r1, fp
 801a3e4:	0c1b      	lsrs	r3, r3, #16
 801a3e6:	eba1 0808 	sub.w	r8, r1, r8
 801a3ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a3ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a3f2:	fa1f f888 	uxth.w	r8, r8
 801a3f6:	1419      	asrs	r1, r3, #16
 801a3f8:	454e      	cmp	r6, r9
 801a3fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a3fe:	f84a 3b04 	str.w	r3, [sl], #4
 801a402:	d8e7      	bhi.n	801a3d4 <__mdiff+0x80>
 801a404:	1b33      	subs	r3, r6, r4
 801a406:	3b15      	subs	r3, #21
 801a408:	f023 0303 	bic.w	r3, r3, #3
 801a40c:	3304      	adds	r3, #4
 801a40e:	3415      	adds	r4, #21
 801a410:	42a6      	cmp	r6, r4
 801a412:	bf38      	it	cc
 801a414:	2304      	movcc	r3, #4
 801a416:	441d      	add	r5, r3
 801a418:	4473      	add	r3, lr
 801a41a:	469e      	mov	lr, r3
 801a41c:	462e      	mov	r6, r5
 801a41e:	4566      	cmp	r6, ip
 801a420:	d30e      	bcc.n	801a440 <__mdiff+0xec>
 801a422:	f10c 0203 	add.w	r2, ip, #3
 801a426:	1b52      	subs	r2, r2, r5
 801a428:	f022 0203 	bic.w	r2, r2, #3
 801a42c:	3d03      	subs	r5, #3
 801a42e:	45ac      	cmp	ip, r5
 801a430:	bf38      	it	cc
 801a432:	2200      	movcc	r2, #0
 801a434:	441a      	add	r2, r3
 801a436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a43a:	b17b      	cbz	r3, 801a45c <__mdiff+0x108>
 801a43c:	6107      	str	r7, [r0, #16]
 801a43e:	e7a3      	b.n	801a388 <__mdiff+0x34>
 801a440:	f856 8b04 	ldr.w	r8, [r6], #4
 801a444:	fa11 f288 	uxtah	r2, r1, r8
 801a448:	1414      	asrs	r4, r2, #16
 801a44a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a44e:	b292      	uxth	r2, r2
 801a450:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a454:	f84e 2b04 	str.w	r2, [lr], #4
 801a458:	1421      	asrs	r1, r4, #16
 801a45a:	e7e0      	b.n	801a41e <__mdiff+0xca>
 801a45c:	3f01      	subs	r7, #1
 801a45e:	e7ea      	b.n	801a436 <__mdiff+0xe2>
 801a460:	0801ca40 	.word	0x0801ca40
 801a464:	0801cacc 	.word	0x0801cacc

0801a468 <__ulp>:
 801a468:	b082      	sub	sp, #8
 801a46a:	ed8d 0b00 	vstr	d0, [sp]
 801a46e:	9b01      	ldr	r3, [sp, #4]
 801a470:	4912      	ldr	r1, [pc, #72]	; (801a4bc <__ulp+0x54>)
 801a472:	4019      	ands	r1, r3
 801a474:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a478:	2900      	cmp	r1, #0
 801a47a:	dd05      	ble.n	801a488 <__ulp+0x20>
 801a47c:	2200      	movs	r2, #0
 801a47e:	460b      	mov	r3, r1
 801a480:	ec43 2b10 	vmov	d0, r2, r3
 801a484:	b002      	add	sp, #8
 801a486:	4770      	bx	lr
 801a488:	4249      	negs	r1, r1
 801a48a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a48e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a492:	f04f 0200 	mov.w	r2, #0
 801a496:	f04f 0300 	mov.w	r3, #0
 801a49a:	da04      	bge.n	801a4a6 <__ulp+0x3e>
 801a49c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a4a0:	fa41 f300 	asr.w	r3, r1, r0
 801a4a4:	e7ec      	b.n	801a480 <__ulp+0x18>
 801a4a6:	f1a0 0114 	sub.w	r1, r0, #20
 801a4aa:	291e      	cmp	r1, #30
 801a4ac:	bfda      	itte	le
 801a4ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a4b2:	fa20 f101 	lsrle.w	r1, r0, r1
 801a4b6:	2101      	movgt	r1, #1
 801a4b8:	460a      	mov	r2, r1
 801a4ba:	e7e1      	b.n	801a480 <__ulp+0x18>
 801a4bc:	7ff00000 	.word	0x7ff00000

0801a4c0 <__b2d>:
 801a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4c2:	6905      	ldr	r5, [r0, #16]
 801a4c4:	f100 0714 	add.w	r7, r0, #20
 801a4c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a4cc:	1f2e      	subs	r6, r5, #4
 801a4ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	f7ff fd48 	bl	8019f68 <__hi0bits>
 801a4d8:	f1c0 0320 	rsb	r3, r0, #32
 801a4dc:	280a      	cmp	r0, #10
 801a4de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a55c <__b2d+0x9c>
 801a4e2:	600b      	str	r3, [r1, #0]
 801a4e4:	dc14      	bgt.n	801a510 <__b2d+0x50>
 801a4e6:	f1c0 0e0b 	rsb	lr, r0, #11
 801a4ea:	fa24 f10e 	lsr.w	r1, r4, lr
 801a4ee:	42b7      	cmp	r7, r6
 801a4f0:	ea41 030c 	orr.w	r3, r1, ip
 801a4f4:	bf34      	ite	cc
 801a4f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a4fa:	2100      	movcs	r1, #0
 801a4fc:	3015      	adds	r0, #21
 801a4fe:	fa04 f000 	lsl.w	r0, r4, r0
 801a502:	fa21 f10e 	lsr.w	r1, r1, lr
 801a506:	ea40 0201 	orr.w	r2, r0, r1
 801a50a:	ec43 2b10 	vmov	d0, r2, r3
 801a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a510:	42b7      	cmp	r7, r6
 801a512:	bf3a      	itte	cc
 801a514:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a518:	f1a5 0608 	subcc.w	r6, r5, #8
 801a51c:	2100      	movcs	r1, #0
 801a51e:	380b      	subs	r0, #11
 801a520:	d017      	beq.n	801a552 <__b2d+0x92>
 801a522:	f1c0 0c20 	rsb	ip, r0, #32
 801a526:	fa04 f500 	lsl.w	r5, r4, r0
 801a52a:	42be      	cmp	r6, r7
 801a52c:	fa21 f40c 	lsr.w	r4, r1, ip
 801a530:	ea45 0504 	orr.w	r5, r5, r4
 801a534:	bf8c      	ite	hi
 801a536:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a53a:	2400      	movls	r4, #0
 801a53c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a540:	fa01 f000 	lsl.w	r0, r1, r0
 801a544:	fa24 f40c 	lsr.w	r4, r4, ip
 801a548:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a54c:	ea40 0204 	orr.w	r2, r0, r4
 801a550:	e7db      	b.n	801a50a <__b2d+0x4a>
 801a552:	ea44 030c 	orr.w	r3, r4, ip
 801a556:	460a      	mov	r2, r1
 801a558:	e7d7      	b.n	801a50a <__b2d+0x4a>
 801a55a:	bf00      	nop
 801a55c:	3ff00000 	.word	0x3ff00000

0801a560 <__d2b>:
 801a560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a564:	4689      	mov	r9, r1
 801a566:	2101      	movs	r1, #1
 801a568:	ec57 6b10 	vmov	r6, r7, d0
 801a56c:	4690      	mov	r8, r2
 801a56e:	f7ff fc09 	bl	8019d84 <_Balloc>
 801a572:	4604      	mov	r4, r0
 801a574:	b930      	cbnz	r0, 801a584 <__d2b+0x24>
 801a576:	4602      	mov	r2, r0
 801a578:	4b25      	ldr	r3, [pc, #148]	; (801a610 <__d2b+0xb0>)
 801a57a:	4826      	ldr	r0, [pc, #152]	; (801a614 <__d2b+0xb4>)
 801a57c:	f240 310a 	movw	r1, #778	; 0x30a
 801a580:	f000 fb5c 	bl	801ac3c <__assert_func>
 801a584:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a588:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a58c:	bb35      	cbnz	r5, 801a5dc <__d2b+0x7c>
 801a58e:	2e00      	cmp	r6, #0
 801a590:	9301      	str	r3, [sp, #4]
 801a592:	d028      	beq.n	801a5e6 <__d2b+0x86>
 801a594:	4668      	mov	r0, sp
 801a596:	9600      	str	r6, [sp, #0]
 801a598:	f7ff fd06 	bl	8019fa8 <__lo0bits>
 801a59c:	9900      	ldr	r1, [sp, #0]
 801a59e:	b300      	cbz	r0, 801a5e2 <__d2b+0x82>
 801a5a0:	9a01      	ldr	r2, [sp, #4]
 801a5a2:	f1c0 0320 	rsb	r3, r0, #32
 801a5a6:	fa02 f303 	lsl.w	r3, r2, r3
 801a5aa:	430b      	orrs	r3, r1
 801a5ac:	40c2      	lsrs	r2, r0
 801a5ae:	6163      	str	r3, [r4, #20]
 801a5b0:	9201      	str	r2, [sp, #4]
 801a5b2:	9b01      	ldr	r3, [sp, #4]
 801a5b4:	61a3      	str	r3, [r4, #24]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	bf14      	ite	ne
 801a5ba:	2202      	movne	r2, #2
 801a5bc:	2201      	moveq	r2, #1
 801a5be:	6122      	str	r2, [r4, #16]
 801a5c0:	b1d5      	cbz	r5, 801a5f8 <__d2b+0x98>
 801a5c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a5c6:	4405      	add	r5, r0
 801a5c8:	f8c9 5000 	str.w	r5, [r9]
 801a5cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a5d0:	f8c8 0000 	str.w	r0, [r8]
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	b003      	add	sp, #12
 801a5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a5e0:	e7d5      	b.n	801a58e <__d2b+0x2e>
 801a5e2:	6161      	str	r1, [r4, #20]
 801a5e4:	e7e5      	b.n	801a5b2 <__d2b+0x52>
 801a5e6:	a801      	add	r0, sp, #4
 801a5e8:	f7ff fcde 	bl	8019fa8 <__lo0bits>
 801a5ec:	9b01      	ldr	r3, [sp, #4]
 801a5ee:	6163      	str	r3, [r4, #20]
 801a5f0:	2201      	movs	r2, #1
 801a5f2:	6122      	str	r2, [r4, #16]
 801a5f4:	3020      	adds	r0, #32
 801a5f6:	e7e3      	b.n	801a5c0 <__d2b+0x60>
 801a5f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a5fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a600:	f8c9 0000 	str.w	r0, [r9]
 801a604:	6918      	ldr	r0, [r3, #16]
 801a606:	f7ff fcaf 	bl	8019f68 <__hi0bits>
 801a60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a60e:	e7df      	b.n	801a5d0 <__d2b+0x70>
 801a610:	0801ca40 	.word	0x0801ca40
 801a614:	0801cacc 	.word	0x0801cacc

0801a618 <__ratio>:
 801a618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61c:	4688      	mov	r8, r1
 801a61e:	4669      	mov	r1, sp
 801a620:	4681      	mov	r9, r0
 801a622:	f7ff ff4d 	bl	801a4c0 <__b2d>
 801a626:	a901      	add	r1, sp, #4
 801a628:	4640      	mov	r0, r8
 801a62a:	ec55 4b10 	vmov	r4, r5, d0
 801a62e:	ee10 aa10 	vmov	sl, s0
 801a632:	f7ff ff45 	bl	801a4c0 <__b2d>
 801a636:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a63a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a63e:	1a59      	subs	r1, r3, r1
 801a640:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a644:	1ad3      	subs	r3, r2, r3
 801a646:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a64a:	ec57 6b10 	vmov	r6, r7, d0
 801a64e:	2b00      	cmp	r3, #0
 801a650:	bfd6      	itet	le
 801a652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a656:	462a      	movgt	r2, r5
 801a658:	463a      	movle	r2, r7
 801a65a:	46ab      	mov	fp, r5
 801a65c:	bfd6      	itet	le
 801a65e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801a662:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801a666:	ee00 3a90 	vmovle	s1, r3
 801a66a:	ec4b ab17 	vmov	d7, sl, fp
 801a66e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801a672:	b003      	add	sp, #12
 801a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a678 <__copybits>:
 801a678:	3901      	subs	r1, #1
 801a67a:	b570      	push	{r4, r5, r6, lr}
 801a67c:	1149      	asrs	r1, r1, #5
 801a67e:	6914      	ldr	r4, [r2, #16]
 801a680:	3101      	adds	r1, #1
 801a682:	f102 0314 	add.w	r3, r2, #20
 801a686:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a68a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a68e:	1f05      	subs	r5, r0, #4
 801a690:	42a3      	cmp	r3, r4
 801a692:	d30c      	bcc.n	801a6ae <__copybits+0x36>
 801a694:	1aa3      	subs	r3, r4, r2
 801a696:	3b11      	subs	r3, #17
 801a698:	f023 0303 	bic.w	r3, r3, #3
 801a69c:	3211      	adds	r2, #17
 801a69e:	42a2      	cmp	r2, r4
 801a6a0:	bf88      	it	hi
 801a6a2:	2300      	movhi	r3, #0
 801a6a4:	4418      	add	r0, r3
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	4288      	cmp	r0, r1
 801a6aa:	d305      	bcc.n	801a6b8 <__copybits+0x40>
 801a6ac:	bd70      	pop	{r4, r5, r6, pc}
 801a6ae:	f853 6b04 	ldr.w	r6, [r3], #4
 801a6b2:	f845 6f04 	str.w	r6, [r5, #4]!
 801a6b6:	e7eb      	b.n	801a690 <__copybits+0x18>
 801a6b8:	f840 3b04 	str.w	r3, [r0], #4
 801a6bc:	e7f4      	b.n	801a6a8 <__copybits+0x30>

0801a6be <__any_on>:
 801a6be:	f100 0214 	add.w	r2, r0, #20
 801a6c2:	6900      	ldr	r0, [r0, #16]
 801a6c4:	114b      	asrs	r3, r1, #5
 801a6c6:	4298      	cmp	r0, r3
 801a6c8:	b510      	push	{r4, lr}
 801a6ca:	db11      	blt.n	801a6f0 <__any_on+0x32>
 801a6cc:	dd0a      	ble.n	801a6e4 <__any_on+0x26>
 801a6ce:	f011 011f 	ands.w	r1, r1, #31
 801a6d2:	d007      	beq.n	801a6e4 <__any_on+0x26>
 801a6d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a6d8:	fa24 f001 	lsr.w	r0, r4, r1
 801a6dc:	fa00 f101 	lsl.w	r1, r0, r1
 801a6e0:	428c      	cmp	r4, r1
 801a6e2:	d10b      	bne.n	801a6fc <__any_on+0x3e>
 801a6e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6e8:	4293      	cmp	r3, r2
 801a6ea:	d803      	bhi.n	801a6f4 <__any_on+0x36>
 801a6ec:	2000      	movs	r0, #0
 801a6ee:	bd10      	pop	{r4, pc}
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	e7f7      	b.n	801a6e4 <__any_on+0x26>
 801a6f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a6f8:	2900      	cmp	r1, #0
 801a6fa:	d0f5      	beq.n	801a6e8 <__any_on+0x2a>
 801a6fc:	2001      	movs	r0, #1
 801a6fe:	e7f6      	b.n	801a6ee <__any_on+0x30>

0801a700 <_calloc_r>:
 801a700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a702:	fba1 2402 	umull	r2, r4, r1, r2
 801a706:	b94c      	cbnz	r4, 801a71c <_calloc_r+0x1c>
 801a708:	4611      	mov	r1, r2
 801a70a:	9201      	str	r2, [sp, #4]
 801a70c:	f000 f87a 	bl	801a804 <_malloc_r>
 801a710:	9a01      	ldr	r2, [sp, #4]
 801a712:	4605      	mov	r5, r0
 801a714:	b930      	cbnz	r0, 801a724 <_calloc_r+0x24>
 801a716:	4628      	mov	r0, r5
 801a718:	b003      	add	sp, #12
 801a71a:	bd30      	pop	{r4, r5, pc}
 801a71c:	220c      	movs	r2, #12
 801a71e:	6002      	str	r2, [r0, #0]
 801a720:	2500      	movs	r5, #0
 801a722:	e7f8      	b.n	801a716 <_calloc_r+0x16>
 801a724:	4621      	mov	r1, r4
 801a726:	f7fc fc5b 	bl	8016fe0 <memset>
 801a72a:	e7f4      	b.n	801a716 <_calloc_r+0x16>

0801a72c <_free_r>:
 801a72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a72e:	2900      	cmp	r1, #0
 801a730:	d044      	beq.n	801a7bc <_free_r+0x90>
 801a732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a736:	9001      	str	r0, [sp, #4]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	f1a1 0404 	sub.w	r4, r1, #4
 801a73e:	bfb8      	it	lt
 801a740:	18e4      	addlt	r4, r4, r3
 801a742:	f000 fc7f 	bl	801b044 <__malloc_lock>
 801a746:	4a1e      	ldr	r2, [pc, #120]	; (801a7c0 <_free_r+0x94>)
 801a748:	9801      	ldr	r0, [sp, #4]
 801a74a:	6813      	ldr	r3, [r2, #0]
 801a74c:	b933      	cbnz	r3, 801a75c <_free_r+0x30>
 801a74e:	6063      	str	r3, [r4, #4]
 801a750:	6014      	str	r4, [r2, #0]
 801a752:	b003      	add	sp, #12
 801a754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a758:	f000 bc7a 	b.w	801b050 <__malloc_unlock>
 801a75c:	42a3      	cmp	r3, r4
 801a75e:	d908      	bls.n	801a772 <_free_r+0x46>
 801a760:	6825      	ldr	r5, [r4, #0]
 801a762:	1961      	adds	r1, r4, r5
 801a764:	428b      	cmp	r3, r1
 801a766:	bf01      	itttt	eq
 801a768:	6819      	ldreq	r1, [r3, #0]
 801a76a:	685b      	ldreq	r3, [r3, #4]
 801a76c:	1949      	addeq	r1, r1, r5
 801a76e:	6021      	streq	r1, [r4, #0]
 801a770:	e7ed      	b.n	801a74e <_free_r+0x22>
 801a772:	461a      	mov	r2, r3
 801a774:	685b      	ldr	r3, [r3, #4]
 801a776:	b10b      	cbz	r3, 801a77c <_free_r+0x50>
 801a778:	42a3      	cmp	r3, r4
 801a77a:	d9fa      	bls.n	801a772 <_free_r+0x46>
 801a77c:	6811      	ldr	r1, [r2, #0]
 801a77e:	1855      	adds	r5, r2, r1
 801a780:	42a5      	cmp	r5, r4
 801a782:	d10b      	bne.n	801a79c <_free_r+0x70>
 801a784:	6824      	ldr	r4, [r4, #0]
 801a786:	4421      	add	r1, r4
 801a788:	1854      	adds	r4, r2, r1
 801a78a:	42a3      	cmp	r3, r4
 801a78c:	6011      	str	r1, [r2, #0]
 801a78e:	d1e0      	bne.n	801a752 <_free_r+0x26>
 801a790:	681c      	ldr	r4, [r3, #0]
 801a792:	685b      	ldr	r3, [r3, #4]
 801a794:	6053      	str	r3, [r2, #4]
 801a796:	4421      	add	r1, r4
 801a798:	6011      	str	r1, [r2, #0]
 801a79a:	e7da      	b.n	801a752 <_free_r+0x26>
 801a79c:	d902      	bls.n	801a7a4 <_free_r+0x78>
 801a79e:	230c      	movs	r3, #12
 801a7a0:	6003      	str	r3, [r0, #0]
 801a7a2:	e7d6      	b.n	801a752 <_free_r+0x26>
 801a7a4:	6825      	ldr	r5, [r4, #0]
 801a7a6:	1961      	adds	r1, r4, r5
 801a7a8:	428b      	cmp	r3, r1
 801a7aa:	bf04      	itt	eq
 801a7ac:	6819      	ldreq	r1, [r3, #0]
 801a7ae:	685b      	ldreq	r3, [r3, #4]
 801a7b0:	6063      	str	r3, [r4, #4]
 801a7b2:	bf04      	itt	eq
 801a7b4:	1949      	addeq	r1, r1, r5
 801a7b6:	6021      	streq	r1, [r4, #0]
 801a7b8:	6054      	str	r4, [r2, #4]
 801a7ba:	e7ca      	b.n	801a752 <_free_r+0x26>
 801a7bc:	b003      	add	sp, #12
 801a7be:	bd30      	pop	{r4, r5, pc}
 801a7c0:	240029a8 	.word	0x240029a8

0801a7c4 <sbrk_aligned>:
 801a7c4:	b570      	push	{r4, r5, r6, lr}
 801a7c6:	4e0e      	ldr	r6, [pc, #56]	; (801a800 <sbrk_aligned+0x3c>)
 801a7c8:	460c      	mov	r4, r1
 801a7ca:	6831      	ldr	r1, [r6, #0]
 801a7cc:	4605      	mov	r5, r0
 801a7ce:	b911      	cbnz	r1, 801a7d6 <sbrk_aligned+0x12>
 801a7d0:	f000 fa02 	bl	801abd8 <_sbrk_r>
 801a7d4:	6030      	str	r0, [r6, #0]
 801a7d6:	4621      	mov	r1, r4
 801a7d8:	4628      	mov	r0, r5
 801a7da:	f000 f9fd 	bl	801abd8 <_sbrk_r>
 801a7de:	1c43      	adds	r3, r0, #1
 801a7e0:	d00a      	beq.n	801a7f8 <sbrk_aligned+0x34>
 801a7e2:	1cc4      	adds	r4, r0, #3
 801a7e4:	f024 0403 	bic.w	r4, r4, #3
 801a7e8:	42a0      	cmp	r0, r4
 801a7ea:	d007      	beq.n	801a7fc <sbrk_aligned+0x38>
 801a7ec:	1a21      	subs	r1, r4, r0
 801a7ee:	4628      	mov	r0, r5
 801a7f0:	f000 f9f2 	bl	801abd8 <_sbrk_r>
 801a7f4:	3001      	adds	r0, #1
 801a7f6:	d101      	bne.n	801a7fc <sbrk_aligned+0x38>
 801a7f8:	f04f 34ff 	mov.w	r4, #4294967295
 801a7fc:	4620      	mov	r0, r4
 801a7fe:	bd70      	pop	{r4, r5, r6, pc}
 801a800:	240029ac 	.word	0x240029ac

0801a804 <_malloc_r>:
 801a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a808:	1ccd      	adds	r5, r1, #3
 801a80a:	f025 0503 	bic.w	r5, r5, #3
 801a80e:	3508      	adds	r5, #8
 801a810:	2d0c      	cmp	r5, #12
 801a812:	bf38      	it	cc
 801a814:	250c      	movcc	r5, #12
 801a816:	2d00      	cmp	r5, #0
 801a818:	4607      	mov	r7, r0
 801a81a:	db01      	blt.n	801a820 <_malloc_r+0x1c>
 801a81c:	42a9      	cmp	r1, r5
 801a81e:	d905      	bls.n	801a82c <_malloc_r+0x28>
 801a820:	230c      	movs	r3, #12
 801a822:	603b      	str	r3, [r7, #0]
 801a824:	2600      	movs	r6, #0
 801a826:	4630      	mov	r0, r6
 801a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a82c:	4e2e      	ldr	r6, [pc, #184]	; (801a8e8 <_malloc_r+0xe4>)
 801a82e:	f000 fc09 	bl	801b044 <__malloc_lock>
 801a832:	6833      	ldr	r3, [r6, #0]
 801a834:	461c      	mov	r4, r3
 801a836:	bb34      	cbnz	r4, 801a886 <_malloc_r+0x82>
 801a838:	4629      	mov	r1, r5
 801a83a:	4638      	mov	r0, r7
 801a83c:	f7ff ffc2 	bl	801a7c4 <sbrk_aligned>
 801a840:	1c43      	adds	r3, r0, #1
 801a842:	4604      	mov	r4, r0
 801a844:	d14d      	bne.n	801a8e2 <_malloc_r+0xde>
 801a846:	6834      	ldr	r4, [r6, #0]
 801a848:	4626      	mov	r6, r4
 801a84a:	2e00      	cmp	r6, #0
 801a84c:	d140      	bne.n	801a8d0 <_malloc_r+0xcc>
 801a84e:	6823      	ldr	r3, [r4, #0]
 801a850:	4631      	mov	r1, r6
 801a852:	4638      	mov	r0, r7
 801a854:	eb04 0803 	add.w	r8, r4, r3
 801a858:	f000 f9be 	bl	801abd8 <_sbrk_r>
 801a85c:	4580      	cmp	r8, r0
 801a85e:	d13a      	bne.n	801a8d6 <_malloc_r+0xd2>
 801a860:	6821      	ldr	r1, [r4, #0]
 801a862:	3503      	adds	r5, #3
 801a864:	1a6d      	subs	r5, r5, r1
 801a866:	f025 0503 	bic.w	r5, r5, #3
 801a86a:	3508      	adds	r5, #8
 801a86c:	2d0c      	cmp	r5, #12
 801a86e:	bf38      	it	cc
 801a870:	250c      	movcc	r5, #12
 801a872:	4629      	mov	r1, r5
 801a874:	4638      	mov	r0, r7
 801a876:	f7ff ffa5 	bl	801a7c4 <sbrk_aligned>
 801a87a:	3001      	adds	r0, #1
 801a87c:	d02b      	beq.n	801a8d6 <_malloc_r+0xd2>
 801a87e:	6823      	ldr	r3, [r4, #0]
 801a880:	442b      	add	r3, r5
 801a882:	6023      	str	r3, [r4, #0]
 801a884:	e00e      	b.n	801a8a4 <_malloc_r+0xa0>
 801a886:	6822      	ldr	r2, [r4, #0]
 801a888:	1b52      	subs	r2, r2, r5
 801a88a:	d41e      	bmi.n	801a8ca <_malloc_r+0xc6>
 801a88c:	2a0b      	cmp	r2, #11
 801a88e:	d916      	bls.n	801a8be <_malloc_r+0xba>
 801a890:	1961      	adds	r1, r4, r5
 801a892:	42a3      	cmp	r3, r4
 801a894:	6025      	str	r5, [r4, #0]
 801a896:	bf18      	it	ne
 801a898:	6059      	strne	r1, [r3, #4]
 801a89a:	6863      	ldr	r3, [r4, #4]
 801a89c:	bf08      	it	eq
 801a89e:	6031      	streq	r1, [r6, #0]
 801a8a0:	5162      	str	r2, [r4, r5]
 801a8a2:	604b      	str	r3, [r1, #4]
 801a8a4:	4638      	mov	r0, r7
 801a8a6:	f104 060b 	add.w	r6, r4, #11
 801a8aa:	f000 fbd1 	bl	801b050 <__malloc_unlock>
 801a8ae:	f026 0607 	bic.w	r6, r6, #7
 801a8b2:	1d23      	adds	r3, r4, #4
 801a8b4:	1af2      	subs	r2, r6, r3
 801a8b6:	d0b6      	beq.n	801a826 <_malloc_r+0x22>
 801a8b8:	1b9b      	subs	r3, r3, r6
 801a8ba:	50a3      	str	r3, [r4, r2]
 801a8bc:	e7b3      	b.n	801a826 <_malloc_r+0x22>
 801a8be:	6862      	ldr	r2, [r4, #4]
 801a8c0:	42a3      	cmp	r3, r4
 801a8c2:	bf0c      	ite	eq
 801a8c4:	6032      	streq	r2, [r6, #0]
 801a8c6:	605a      	strne	r2, [r3, #4]
 801a8c8:	e7ec      	b.n	801a8a4 <_malloc_r+0xa0>
 801a8ca:	4623      	mov	r3, r4
 801a8cc:	6864      	ldr	r4, [r4, #4]
 801a8ce:	e7b2      	b.n	801a836 <_malloc_r+0x32>
 801a8d0:	4634      	mov	r4, r6
 801a8d2:	6876      	ldr	r6, [r6, #4]
 801a8d4:	e7b9      	b.n	801a84a <_malloc_r+0x46>
 801a8d6:	230c      	movs	r3, #12
 801a8d8:	603b      	str	r3, [r7, #0]
 801a8da:	4638      	mov	r0, r7
 801a8dc:	f000 fbb8 	bl	801b050 <__malloc_unlock>
 801a8e0:	e7a1      	b.n	801a826 <_malloc_r+0x22>
 801a8e2:	6025      	str	r5, [r4, #0]
 801a8e4:	e7de      	b.n	801a8a4 <_malloc_r+0xa0>
 801a8e6:	bf00      	nop
 801a8e8:	240029a8 	.word	0x240029a8

0801a8ec <__ssputs_r>:
 801a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8f0:	688e      	ldr	r6, [r1, #8]
 801a8f2:	429e      	cmp	r6, r3
 801a8f4:	4682      	mov	sl, r0
 801a8f6:	460c      	mov	r4, r1
 801a8f8:	4690      	mov	r8, r2
 801a8fa:	461f      	mov	r7, r3
 801a8fc:	d838      	bhi.n	801a970 <__ssputs_r+0x84>
 801a8fe:	898a      	ldrh	r2, [r1, #12]
 801a900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a904:	d032      	beq.n	801a96c <__ssputs_r+0x80>
 801a906:	6825      	ldr	r5, [r4, #0]
 801a908:	6909      	ldr	r1, [r1, #16]
 801a90a:	eba5 0901 	sub.w	r9, r5, r1
 801a90e:	6965      	ldr	r5, [r4, #20]
 801a910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a918:	3301      	adds	r3, #1
 801a91a:	444b      	add	r3, r9
 801a91c:	106d      	asrs	r5, r5, #1
 801a91e:	429d      	cmp	r5, r3
 801a920:	bf38      	it	cc
 801a922:	461d      	movcc	r5, r3
 801a924:	0553      	lsls	r3, r2, #21
 801a926:	d531      	bpl.n	801a98c <__ssputs_r+0xa0>
 801a928:	4629      	mov	r1, r5
 801a92a:	f7ff ff6b 	bl	801a804 <_malloc_r>
 801a92e:	4606      	mov	r6, r0
 801a930:	b950      	cbnz	r0, 801a948 <__ssputs_r+0x5c>
 801a932:	230c      	movs	r3, #12
 801a934:	f8ca 3000 	str.w	r3, [sl]
 801a938:	89a3      	ldrh	r3, [r4, #12]
 801a93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a93e:	81a3      	strh	r3, [r4, #12]
 801a940:	f04f 30ff 	mov.w	r0, #4294967295
 801a944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a948:	6921      	ldr	r1, [r4, #16]
 801a94a:	464a      	mov	r2, r9
 801a94c:	f7fc fb3a 	bl	8016fc4 <memcpy>
 801a950:	89a3      	ldrh	r3, [r4, #12]
 801a952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a95a:	81a3      	strh	r3, [r4, #12]
 801a95c:	6126      	str	r6, [r4, #16]
 801a95e:	6165      	str	r5, [r4, #20]
 801a960:	444e      	add	r6, r9
 801a962:	eba5 0509 	sub.w	r5, r5, r9
 801a966:	6026      	str	r6, [r4, #0]
 801a968:	60a5      	str	r5, [r4, #8]
 801a96a:	463e      	mov	r6, r7
 801a96c:	42be      	cmp	r6, r7
 801a96e:	d900      	bls.n	801a972 <__ssputs_r+0x86>
 801a970:	463e      	mov	r6, r7
 801a972:	6820      	ldr	r0, [r4, #0]
 801a974:	4632      	mov	r2, r6
 801a976:	4641      	mov	r1, r8
 801a978:	f000 fb4a 	bl	801b010 <memmove>
 801a97c:	68a3      	ldr	r3, [r4, #8]
 801a97e:	1b9b      	subs	r3, r3, r6
 801a980:	60a3      	str	r3, [r4, #8]
 801a982:	6823      	ldr	r3, [r4, #0]
 801a984:	4433      	add	r3, r6
 801a986:	6023      	str	r3, [r4, #0]
 801a988:	2000      	movs	r0, #0
 801a98a:	e7db      	b.n	801a944 <__ssputs_r+0x58>
 801a98c:	462a      	mov	r2, r5
 801a98e:	f000 fb65 	bl	801b05c <_realloc_r>
 801a992:	4606      	mov	r6, r0
 801a994:	2800      	cmp	r0, #0
 801a996:	d1e1      	bne.n	801a95c <__ssputs_r+0x70>
 801a998:	6921      	ldr	r1, [r4, #16]
 801a99a:	4650      	mov	r0, sl
 801a99c:	f7ff fec6 	bl	801a72c <_free_r>
 801a9a0:	e7c7      	b.n	801a932 <__ssputs_r+0x46>
	...

0801a9a4 <_svfiprintf_r>:
 801a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a8:	4698      	mov	r8, r3
 801a9aa:	898b      	ldrh	r3, [r1, #12]
 801a9ac:	061b      	lsls	r3, r3, #24
 801a9ae:	b09d      	sub	sp, #116	; 0x74
 801a9b0:	4607      	mov	r7, r0
 801a9b2:	460d      	mov	r5, r1
 801a9b4:	4614      	mov	r4, r2
 801a9b6:	d50e      	bpl.n	801a9d6 <_svfiprintf_r+0x32>
 801a9b8:	690b      	ldr	r3, [r1, #16]
 801a9ba:	b963      	cbnz	r3, 801a9d6 <_svfiprintf_r+0x32>
 801a9bc:	2140      	movs	r1, #64	; 0x40
 801a9be:	f7ff ff21 	bl	801a804 <_malloc_r>
 801a9c2:	6028      	str	r0, [r5, #0]
 801a9c4:	6128      	str	r0, [r5, #16]
 801a9c6:	b920      	cbnz	r0, 801a9d2 <_svfiprintf_r+0x2e>
 801a9c8:	230c      	movs	r3, #12
 801a9ca:	603b      	str	r3, [r7, #0]
 801a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a9d0:	e0d1      	b.n	801ab76 <_svfiprintf_r+0x1d2>
 801a9d2:	2340      	movs	r3, #64	; 0x40
 801a9d4:	616b      	str	r3, [r5, #20]
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	9309      	str	r3, [sp, #36]	; 0x24
 801a9da:	2320      	movs	r3, #32
 801a9dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9e4:	2330      	movs	r3, #48	; 0x30
 801a9e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab90 <_svfiprintf_r+0x1ec>
 801a9ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a9ee:	f04f 0901 	mov.w	r9, #1
 801a9f2:	4623      	mov	r3, r4
 801a9f4:	469a      	mov	sl, r3
 801a9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9fa:	b10a      	cbz	r2, 801aa00 <_svfiprintf_r+0x5c>
 801a9fc:	2a25      	cmp	r2, #37	; 0x25
 801a9fe:	d1f9      	bne.n	801a9f4 <_svfiprintf_r+0x50>
 801aa00:	ebba 0b04 	subs.w	fp, sl, r4
 801aa04:	d00b      	beq.n	801aa1e <_svfiprintf_r+0x7a>
 801aa06:	465b      	mov	r3, fp
 801aa08:	4622      	mov	r2, r4
 801aa0a:	4629      	mov	r1, r5
 801aa0c:	4638      	mov	r0, r7
 801aa0e:	f7ff ff6d 	bl	801a8ec <__ssputs_r>
 801aa12:	3001      	adds	r0, #1
 801aa14:	f000 80aa 	beq.w	801ab6c <_svfiprintf_r+0x1c8>
 801aa18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa1a:	445a      	add	r2, fp
 801aa1c:	9209      	str	r2, [sp, #36]	; 0x24
 801aa1e:	f89a 3000 	ldrb.w	r3, [sl]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	f000 80a2 	beq.w	801ab6c <_svfiprintf_r+0x1c8>
 801aa28:	2300      	movs	r3, #0
 801aa2a:	f04f 32ff 	mov.w	r2, #4294967295
 801aa2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa32:	f10a 0a01 	add.w	sl, sl, #1
 801aa36:	9304      	str	r3, [sp, #16]
 801aa38:	9307      	str	r3, [sp, #28]
 801aa3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aa3e:	931a      	str	r3, [sp, #104]	; 0x68
 801aa40:	4654      	mov	r4, sl
 801aa42:	2205      	movs	r2, #5
 801aa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa48:	4851      	ldr	r0, [pc, #324]	; (801ab90 <_svfiprintf_r+0x1ec>)
 801aa4a:	f7e5 fc69 	bl	8000320 <memchr>
 801aa4e:	9a04      	ldr	r2, [sp, #16]
 801aa50:	b9d8      	cbnz	r0, 801aa8a <_svfiprintf_r+0xe6>
 801aa52:	06d0      	lsls	r0, r2, #27
 801aa54:	bf44      	itt	mi
 801aa56:	2320      	movmi	r3, #32
 801aa58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa5c:	0711      	lsls	r1, r2, #28
 801aa5e:	bf44      	itt	mi
 801aa60:	232b      	movmi	r3, #43	; 0x2b
 801aa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa66:	f89a 3000 	ldrb.w	r3, [sl]
 801aa6a:	2b2a      	cmp	r3, #42	; 0x2a
 801aa6c:	d015      	beq.n	801aa9a <_svfiprintf_r+0xf6>
 801aa6e:	9a07      	ldr	r2, [sp, #28]
 801aa70:	4654      	mov	r4, sl
 801aa72:	2000      	movs	r0, #0
 801aa74:	f04f 0c0a 	mov.w	ip, #10
 801aa78:	4621      	mov	r1, r4
 801aa7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa7e:	3b30      	subs	r3, #48	; 0x30
 801aa80:	2b09      	cmp	r3, #9
 801aa82:	d94e      	bls.n	801ab22 <_svfiprintf_r+0x17e>
 801aa84:	b1b0      	cbz	r0, 801aab4 <_svfiprintf_r+0x110>
 801aa86:	9207      	str	r2, [sp, #28]
 801aa88:	e014      	b.n	801aab4 <_svfiprintf_r+0x110>
 801aa8a:	eba0 0308 	sub.w	r3, r0, r8
 801aa8e:	fa09 f303 	lsl.w	r3, r9, r3
 801aa92:	4313      	orrs	r3, r2
 801aa94:	9304      	str	r3, [sp, #16]
 801aa96:	46a2      	mov	sl, r4
 801aa98:	e7d2      	b.n	801aa40 <_svfiprintf_r+0x9c>
 801aa9a:	9b03      	ldr	r3, [sp, #12]
 801aa9c:	1d19      	adds	r1, r3, #4
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	9103      	str	r1, [sp, #12]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	bfbb      	ittet	lt
 801aaa6:	425b      	neglt	r3, r3
 801aaa8:	f042 0202 	orrlt.w	r2, r2, #2
 801aaac:	9307      	strge	r3, [sp, #28]
 801aaae:	9307      	strlt	r3, [sp, #28]
 801aab0:	bfb8      	it	lt
 801aab2:	9204      	strlt	r2, [sp, #16]
 801aab4:	7823      	ldrb	r3, [r4, #0]
 801aab6:	2b2e      	cmp	r3, #46	; 0x2e
 801aab8:	d10c      	bne.n	801aad4 <_svfiprintf_r+0x130>
 801aaba:	7863      	ldrb	r3, [r4, #1]
 801aabc:	2b2a      	cmp	r3, #42	; 0x2a
 801aabe:	d135      	bne.n	801ab2c <_svfiprintf_r+0x188>
 801aac0:	9b03      	ldr	r3, [sp, #12]
 801aac2:	1d1a      	adds	r2, r3, #4
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	9203      	str	r2, [sp, #12]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	bfb8      	it	lt
 801aacc:	f04f 33ff 	movlt.w	r3, #4294967295
 801aad0:	3402      	adds	r4, #2
 801aad2:	9305      	str	r3, [sp, #20]
 801aad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aba0 <_svfiprintf_r+0x1fc>
 801aad8:	7821      	ldrb	r1, [r4, #0]
 801aada:	2203      	movs	r2, #3
 801aadc:	4650      	mov	r0, sl
 801aade:	f7e5 fc1f 	bl	8000320 <memchr>
 801aae2:	b140      	cbz	r0, 801aaf6 <_svfiprintf_r+0x152>
 801aae4:	2340      	movs	r3, #64	; 0x40
 801aae6:	eba0 000a 	sub.w	r0, r0, sl
 801aaea:	fa03 f000 	lsl.w	r0, r3, r0
 801aaee:	9b04      	ldr	r3, [sp, #16]
 801aaf0:	4303      	orrs	r3, r0
 801aaf2:	3401      	adds	r4, #1
 801aaf4:	9304      	str	r3, [sp, #16]
 801aaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aafa:	4826      	ldr	r0, [pc, #152]	; (801ab94 <_svfiprintf_r+0x1f0>)
 801aafc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ab00:	2206      	movs	r2, #6
 801ab02:	f7e5 fc0d 	bl	8000320 <memchr>
 801ab06:	2800      	cmp	r0, #0
 801ab08:	d038      	beq.n	801ab7c <_svfiprintf_r+0x1d8>
 801ab0a:	4b23      	ldr	r3, [pc, #140]	; (801ab98 <_svfiprintf_r+0x1f4>)
 801ab0c:	bb1b      	cbnz	r3, 801ab56 <_svfiprintf_r+0x1b2>
 801ab0e:	9b03      	ldr	r3, [sp, #12]
 801ab10:	3307      	adds	r3, #7
 801ab12:	f023 0307 	bic.w	r3, r3, #7
 801ab16:	3308      	adds	r3, #8
 801ab18:	9303      	str	r3, [sp, #12]
 801ab1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab1c:	4433      	add	r3, r6
 801ab1e:	9309      	str	r3, [sp, #36]	; 0x24
 801ab20:	e767      	b.n	801a9f2 <_svfiprintf_r+0x4e>
 801ab22:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab26:	460c      	mov	r4, r1
 801ab28:	2001      	movs	r0, #1
 801ab2a:	e7a5      	b.n	801aa78 <_svfiprintf_r+0xd4>
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	3401      	adds	r4, #1
 801ab30:	9305      	str	r3, [sp, #20]
 801ab32:	4619      	mov	r1, r3
 801ab34:	f04f 0c0a 	mov.w	ip, #10
 801ab38:	4620      	mov	r0, r4
 801ab3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab3e:	3a30      	subs	r2, #48	; 0x30
 801ab40:	2a09      	cmp	r2, #9
 801ab42:	d903      	bls.n	801ab4c <_svfiprintf_r+0x1a8>
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d0c5      	beq.n	801aad4 <_svfiprintf_r+0x130>
 801ab48:	9105      	str	r1, [sp, #20]
 801ab4a:	e7c3      	b.n	801aad4 <_svfiprintf_r+0x130>
 801ab4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab50:	4604      	mov	r4, r0
 801ab52:	2301      	movs	r3, #1
 801ab54:	e7f0      	b.n	801ab38 <_svfiprintf_r+0x194>
 801ab56:	ab03      	add	r3, sp, #12
 801ab58:	9300      	str	r3, [sp, #0]
 801ab5a:	462a      	mov	r2, r5
 801ab5c:	4b0f      	ldr	r3, [pc, #60]	; (801ab9c <_svfiprintf_r+0x1f8>)
 801ab5e:	a904      	add	r1, sp, #16
 801ab60:	4638      	mov	r0, r7
 801ab62:	f7fc fad5 	bl	8017110 <_printf_float>
 801ab66:	1c42      	adds	r2, r0, #1
 801ab68:	4606      	mov	r6, r0
 801ab6a:	d1d6      	bne.n	801ab1a <_svfiprintf_r+0x176>
 801ab6c:	89ab      	ldrh	r3, [r5, #12]
 801ab6e:	065b      	lsls	r3, r3, #25
 801ab70:	f53f af2c 	bmi.w	801a9cc <_svfiprintf_r+0x28>
 801ab74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab76:	b01d      	add	sp, #116	; 0x74
 801ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab7c:	ab03      	add	r3, sp, #12
 801ab7e:	9300      	str	r3, [sp, #0]
 801ab80:	462a      	mov	r2, r5
 801ab82:	4b06      	ldr	r3, [pc, #24]	; (801ab9c <_svfiprintf_r+0x1f8>)
 801ab84:	a904      	add	r1, sp, #16
 801ab86:	4638      	mov	r0, r7
 801ab88:	f7fc fd4e 	bl	8017628 <_printf_i>
 801ab8c:	e7eb      	b.n	801ab66 <_svfiprintf_r+0x1c2>
 801ab8e:	bf00      	nop
 801ab90:	0801cc24 	.word	0x0801cc24
 801ab94:	0801cc2e 	.word	0x0801cc2e
 801ab98:	08017111 	.word	0x08017111
 801ab9c:	0801a8ed 	.word	0x0801a8ed
 801aba0:	0801cc2a 	.word	0x0801cc2a

0801aba4 <_read_r>:
 801aba4:	b538      	push	{r3, r4, r5, lr}
 801aba6:	4d07      	ldr	r5, [pc, #28]	; (801abc4 <_read_r+0x20>)
 801aba8:	4604      	mov	r4, r0
 801abaa:	4608      	mov	r0, r1
 801abac:	4611      	mov	r1, r2
 801abae:	2200      	movs	r2, #0
 801abb0:	602a      	str	r2, [r5, #0]
 801abb2:	461a      	mov	r2, r3
 801abb4:	f7e9 fbd0 	bl	8004358 <_read>
 801abb8:	1c43      	adds	r3, r0, #1
 801abba:	d102      	bne.n	801abc2 <_read_r+0x1e>
 801abbc:	682b      	ldr	r3, [r5, #0]
 801abbe:	b103      	cbz	r3, 801abc2 <_read_r+0x1e>
 801abc0:	6023      	str	r3, [r4, #0]
 801abc2:	bd38      	pop	{r3, r4, r5, pc}
 801abc4:	240029b0 	.word	0x240029b0

0801abc8 <nan>:
 801abc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801abd0 <nan+0x8>
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop
 801abd0:	00000000 	.word	0x00000000
 801abd4:	7ff80000 	.word	0x7ff80000

0801abd8 <_sbrk_r>:
 801abd8:	b538      	push	{r3, r4, r5, lr}
 801abda:	4d06      	ldr	r5, [pc, #24]	; (801abf4 <_sbrk_r+0x1c>)
 801abdc:	2300      	movs	r3, #0
 801abde:	4604      	mov	r4, r0
 801abe0:	4608      	mov	r0, r1
 801abe2:	602b      	str	r3, [r5, #0]
 801abe4:	f7e9 fc26 	bl	8004434 <_sbrk>
 801abe8:	1c43      	adds	r3, r0, #1
 801abea:	d102      	bne.n	801abf2 <_sbrk_r+0x1a>
 801abec:	682b      	ldr	r3, [r5, #0]
 801abee:	b103      	cbz	r3, 801abf2 <_sbrk_r+0x1a>
 801abf0:	6023      	str	r3, [r4, #0]
 801abf2:	bd38      	pop	{r3, r4, r5, pc}
 801abf4:	240029b0 	.word	0x240029b0

0801abf8 <strncmp>:
 801abf8:	b510      	push	{r4, lr}
 801abfa:	b17a      	cbz	r2, 801ac1c <strncmp+0x24>
 801abfc:	4603      	mov	r3, r0
 801abfe:	3901      	subs	r1, #1
 801ac00:	1884      	adds	r4, r0, r2
 801ac02:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ac06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ac0a:	4290      	cmp	r0, r2
 801ac0c:	d101      	bne.n	801ac12 <strncmp+0x1a>
 801ac0e:	42a3      	cmp	r3, r4
 801ac10:	d101      	bne.n	801ac16 <strncmp+0x1e>
 801ac12:	1a80      	subs	r0, r0, r2
 801ac14:	bd10      	pop	{r4, pc}
 801ac16:	2800      	cmp	r0, #0
 801ac18:	d1f3      	bne.n	801ac02 <strncmp+0xa>
 801ac1a:	e7fa      	b.n	801ac12 <strncmp+0x1a>
 801ac1c:	4610      	mov	r0, r2
 801ac1e:	e7f9      	b.n	801ac14 <strncmp+0x1c>

0801ac20 <__ascii_wctomb>:
 801ac20:	b149      	cbz	r1, 801ac36 <__ascii_wctomb+0x16>
 801ac22:	2aff      	cmp	r2, #255	; 0xff
 801ac24:	bf85      	ittet	hi
 801ac26:	238a      	movhi	r3, #138	; 0x8a
 801ac28:	6003      	strhi	r3, [r0, #0]
 801ac2a:	700a      	strbls	r2, [r1, #0]
 801ac2c:	f04f 30ff 	movhi.w	r0, #4294967295
 801ac30:	bf98      	it	ls
 801ac32:	2001      	movls	r0, #1
 801ac34:	4770      	bx	lr
 801ac36:	4608      	mov	r0, r1
 801ac38:	4770      	bx	lr
	...

0801ac3c <__assert_func>:
 801ac3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac3e:	4614      	mov	r4, r2
 801ac40:	461a      	mov	r2, r3
 801ac42:	4b09      	ldr	r3, [pc, #36]	; (801ac68 <__assert_func+0x2c>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	4605      	mov	r5, r0
 801ac48:	68d8      	ldr	r0, [r3, #12]
 801ac4a:	b14c      	cbz	r4, 801ac60 <__assert_func+0x24>
 801ac4c:	4b07      	ldr	r3, [pc, #28]	; (801ac6c <__assert_func+0x30>)
 801ac4e:	9100      	str	r1, [sp, #0]
 801ac50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ac54:	4906      	ldr	r1, [pc, #24]	; (801ac70 <__assert_func+0x34>)
 801ac56:	462b      	mov	r3, r5
 801ac58:	f000 f9a6 	bl	801afa8 <fiprintf>
 801ac5c:	f000 fc46 	bl	801b4ec <abort>
 801ac60:	4b04      	ldr	r3, [pc, #16]	; (801ac74 <__assert_func+0x38>)
 801ac62:	461c      	mov	r4, r3
 801ac64:	e7f3      	b.n	801ac4e <__assert_func+0x12>
 801ac66:	bf00      	nop
 801ac68:	24000100 	.word	0x24000100
 801ac6c:	0801cc35 	.word	0x0801cc35
 801ac70:	0801cc42 	.word	0x0801cc42
 801ac74:	0801cc70 	.word	0x0801cc70

0801ac78 <__sflush_r>:
 801ac78:	898a      	ldrh	r2, [r1, #12]
 801ac7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac7e:	4605      	mov	r5, r0
 801ac80:	0710      	lsls	r0, r2, #28
 801ac82:	460c      	mov	r4, r1
 801ac84:	d458      	bmi.n	801ad38 <__sflush_r+0xc0>
 801ac86:	684b      	ldr	r3, [r1, #4]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	dc05      	bgt.n	801ac98 <__sflush_r+0x20>
 801ac8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	dc02      	bgt.n	801ac98 <__sflush_r+0x20>
 801ac92:	2000      	movs	r0, #0
 801ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac9a:	2e00      	cmp	r6, #0
 801ac9c:	d0f9      	beq.n	801ac92 <__sflush_r+0x1a>
 801ac9e:	2300      	movs	r3, #0
 801aca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aca4:	682f      	ldr	r7, [r5, #0]
 801aca6:	602b      	str	r3, [r5, #0]
 801aca8:	d032      	beq.n	801ad10 <__sflush_r+0x98>
 801acaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801acac:	89a3      	ldrh	r3, [r4, #12]
 801acae:	075a      	lsls	r2, r3, #29
 801acb0:	d505      	bpl.n	801acbe <__sflush_r+0x46>
 801acb2:	6863      	ldr	r3, [r4, #4]
 801acb4:	1ac0      	subs	r0, r0, r3
 801acb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801acb8:	b10b      	cbz	r3, 801acbe <__sflush_r+0x46>
 801acba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801acbc:	1ac0      	subs	r0, r0, r3
 801acbe:	2300      	movs	r3, #0
 801acc0:	4602      	mov	r2, r0
 801acc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801acc4:	6a21      	ldr	r1, [r4, #32]
 801acc6:	4628      	mov	r0, r5
 801acc8:	47b0      	blx	r6
 801acca:	1c43      	adds	r3, r0, #1
 801accc:	89a3      	ldrh	r3, [r4, #12]
 801acce:	d106      	bne.n	801acde <__sflush_r+0x66>
 801acd0:	6829      	ldr	r1, [r5, #0]
 801acd2:	291d      	cmp	r1, #29
 801acd4:	d82c      	bhi.n	801ad30 <__sflush_r+0xb8>
 801acd6:	4a2a      	ldr	r2, [pc, #168]	; (801ad80 <__sflush_r+0x108>)
 801acd8:	40ca      	lsrs	r2, r1
 801acda:	07d6      	lsls	r6, r2, #31
 801acdc:	d528      	bpl.n	801ad30 <__sflush_r+0xb8>
 801acde:	2200      	movs	r2, #0
 801ace0:	6062      	str	r2, [r4, #4]
 801ace2:	04d9      	lsls	r1, r3, #19
 801ace4:	6922      	ldr	r2, [r4, #16]
 801ace6:	6022      	str	r2, [r4, #0]
 801ace8:	d504      	bpl.n	801acf4 <__sflush_r+0x7c>
 801acea:	1c42      	adds	r2, r0, #1
 801acec:	d101      	bne.n	801acf2 <__sflush_r+0x7a>
 801acee:	682b      	ldr	r3, [r5, #0]
 801acf0:	b903      	cbnz	r3, 801acf4 <__sflush_r+0x7c>
 801acf2:	6560      	str	r0, [r4, #84]	; 0x54
 801acf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801acf6:	602f      	str	r7, [r5, #0]
 801acf8:	2900      	cmp	r1, #0
 801acfa:	d0ca      	beq.n	801ac92 <__sflush_r+0x1a>
 801acfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ad00:	4299      	cmp	r1, r3
 801ad02:	d002      	beq.n	801ad0a <__sflush_r+0x92>
 801ad04:	4628      	mov	r0, r5
 801ad06:	f7ff fd11 	bl	801a72c <_free_r>
 801ad0a:	2000      	movs	r0, #0
 801ad0c:	6360      	str	r0, [r4, #52]	; 0x34
 801ad0e:	e7c1      	b.n	801ac94 <__sflush_r+0x1c>
 801ad10:	6a21      	ldr	r1, [r4, #32]
 801ad12:	2301      	movs	r3, #1
 801ad14:	4628      	mov	r0, r5
 801ad16:	47b0      	blx	r6
 801ad18:	1c41      	adds	r1, r0, #1
 801ad1a:	d1c7      	bne.n	801acac <__sflush_r+0x34>
 801ad1c:	682b      	ldr	r3, [r5, #0]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d0c4      	beq.n	801acac <__sflush_r+0x34>
 801ad22:	2b1d      	cmp	r3, #29
 801ad24:	d001      	beq.n	801ad2a <__sflush_r+0xb2>
 801ad26:	2b16      	cmp	r3, #22
 801ad28:	d101      	bne.n	801ad2e <__sflush_r+0xb6>
 801ad2a:	602f      	str	r7, [r5, #0]
 801ad2c:	e7b1      	b.n	801ac92 <__sflush_r+0x1a>
 801ad2e:	89a3      	ldrh	r3, [r4, #12]
 801ad30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad34:	81a3      	strh	r3, [r4, #12]
 801ad36:	e7ad      	b.n	801ac94 <__sflush_r+0x1c>
 801ad38:	690f      	ldr	r7, [r1, #16]
 801ad3a:	2f00      	cmp	r7, #0
 801ad3c:	d0a9      	beq.n	801ac92 <__sflush_r+0x1a>
 801ad3e:	0793      	lsls	r3, r2, #30
 801ad40:	680e      	ldr	r6, [r1, #0]
 801ad42:	bf08      	it	eq
 801ad44:	694b      	ldreq	r3, [r1, #20]
 801ad46:	600f      	str	r7, [r1, #0]
 801ad48:	bf18      	it	ne
 801ad4a:	2300      	movne	r3, #0
 801ad4c:	eba6 0807 	sub.w	r8, r6, r7
 801ad50:	608b      	str	r3, [r1, #8]
 801ad52:	f1b8 0f00 	cmp.w	r8, #0
 801ad56:	dd9c      	ble.n	801ac92 <__sflush_r+0x1a>
 801ad58:	6a21      	ldr	r1, [r4, #32]
 801ad5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ad5c:	4643      	mov	r3, r8
 801ad5e:	463a      	mov	r2, r7
 801ad60:	4628      	mov	r0, r5
 801ad62:	47b0      	blx	r6
 801ad64:	2800      	cmp	r0, #0
 801ad66:	dc06      	bgt.n	801ad76 <__sflush_r+0xfe>
 801ad68:	89a3      	ldrh	r3, [r4, #12]
 801ad6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad6e:	81a3      	strh	r3, [r4, #12]
 801ad70:	f04f 30ff 	mov.w	r0, #4294967295
 801ad74:	e78e      	b.n	801ac94 <__sflush_r+0x1c>
 801ad76:	4407      	add	r7, r0
 801ad78:	eba8 0800 	sub.w	r8, r8, r0
 801ad7c:	e7e9      	b.n	801ad52 <__sflush_r+0xda>
 801ad7e:	bf00      	nop
 801ad80:	20400001 	.word	0x20400001

0801ad84 <_fflush_r>:
 801ad84:	b538      	push	{r3, r4, r5, lr}
 801ad86:	690b      	ldr	r3, [r1, #16]
 801ad88:	4605      	mov	r5, r0
 801ad8a:	460c      	mov	r4, r1
 801ad8c:	b913      	cbnz	r3, 801ad94 <_fflush_r+0x10>
 801ad8e:	2500      	movs	r5, #0
 801ad90:	4628      	mov	r0, r5
 801ad92:	bd38      	pop	{r3, r4, r5, pc}
 801ad94:	b118      	cbz	r0, 801ad9e <_fflush_r+0x1a>
 801ad96:	6983      	ldr	r3, [r0, #24]
 801ad98:	b90b      	cbnz	r3, 801ad9e <_fflush_r+0x1a>
 801ad9a:	f000 f887 	bl	801aeac <__sinit>
 801ad9e:	4b14      	ldr	r3, [pc, #80]	; (801adf0 <_fflush_r+0x6c>)
 801ada0:	429c      	cmp	r4, r3
 801ada2:	d11b      	bne.n	801addc <_fflush_r+0x58>
 801ada4:	686c      	ldr	r4, [r5, #4]
 801ada6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d0ef      	beq.n	801ad8e <_fflush_r+0xa>
 801adae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801adb0:	07d0      	lsls	r0, r2, #31
 801adb2:	d404      	bmi.n	801adbe <_fflush_r+0x3a>
 801adb4:	0599      	lsls	r1, r3, #22
 801adb6:	d402      	bmi.n	801adbe <_fflush_r+0x3a>
 801adb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801adba:	f000 f927 	bl	801b00c <__retarget_lock_acquire_recursive>
 801adbe:	4628      	mov	r0, r5
 801adc0:	4621      	mov	r1, r4
 801adc2:	f7ff ff59 	bl	801ac78 <__sflush_r>
 801adc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801adc8:	07da      	lsls	r2, r3, #31
 801adca:	4605      	mov	r5, r0
 801adcc:	d4e0      	bmi.n	801ad90 <_fflush_r+0xc>
 801adce:	89a3      	ldrh	r3, [r4, #12]
 801add0:	059b      	lsls	r3, r3, #22
 801add2:	d4dd      	bmi.n	801ad90 <_fflush_r+0xc>
 801add4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801add6:	f000 f91a 	bl	801b00e <__retarget_lock_release_recursive>
 801adda:	e7d9      	b.n	801ad90 <_fflush_r+0xc>
 801addc:	4b05      	ldr	r3, [pc, #20]	; (801adf4 <_fflush_r+0x70>)
 801adde:	429c      	cmp	r4, r3
 801ade0:	d101      	bne.n	801ade6 <_fflush_r+0x62>
 801ade2:	68ac      	ldr	r4, [r5, #8]
 801ade4:	e7df      	b.n	801ada6 <_fflush_r+0x22>
 801ade6:	4b04      	ldr	r3, [pc, #16]	; (801adf8 <_fflush_r+0x74>)
 801ade8:	429c      	cmp	r4, r3
 801adea:	bf08      	it	eq
 801adec:	68ec      	ldreq	r4, [r5, #12]
 801adee:	e7da      	b.n	801ada6 <_fflush_r+0x22>
 801adf0:	0801cc94 	.word	0x0801cc94
 801adf4:	0801ccb4 	.word	0x0801ccb4
 801adf8:	0801cc74 	.word	0x0801cc74

0801adfc <std>:
 801adfc:	2300      	movs	r3, #0
 801adfe:	b510      	push	{r4, lr}
 801ae00:	4604      	mov	r4, r0
 801ae02:	e9c0 3300 	strd	r3, r3, [r0]
 801ae06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae0a:	6083      	str	r3, [r0, #8]
 801ae0c:	8181      	strh	r1, [r0, #12]
 801ae0e:	6643      	str	r3, [r0, #100]	; 0x64
 801ae10:	81c2      	strh	r2, [r0, #14]
 801ae12:	6183      	str	r3, [r0, #24]
 801ae14:	4619      	mov	r1, r3
 801ae16:	2208      	movs	r2, #8
 801ae18:	305c      	adds	r0, #92	; 0x5c
 801ae1a:	f7fc f8e1 	bl	8016fe0 <memset>
 801ae1e:	4b05      	ldr	r3, [pc, #20]	; (801ae34 <std+0x38>)
 801ae20:	6263      	str	r3, [r4, #36]	; 0x24
 801ae22:	4b05      	ldr	r3, [pc, #20]	; (801ae38 <std+0x3c>)
 801ae24:	62a3      	str	r3, [r4, #40]	; 0x28
 801ae26:	4b05      	ldr	r3, [pc, #20]	; (801ae3c <std+0x40>)
 801ae28:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ae2a:	4b05      	ldr	r3, [pc, #20]	; (801ae40 <std+0x44>)
 801ae2c:	6224      	str	r4, [r4, #32]
 801ae2e:	6323      	str	r3, [r4, #48]	; 0x30
 801ae30:	bd10      	pop	{r4, pc}
 801ae32:	bf00      	nop
 801ae34:	08017ccd 	.word	0x08017ccd
 801ae38:	08017cef 	.word	0x08017cef
 801ae3c:	08017d27 	.word	0x08017d27
 801ae40:	08017d4b 	.word	0x08017d4b

0801ae44 <_cleanup_r>:
 801ae44:	4901      	ldr	r1, [pc, #4]	; (801ae4c <_cleanup_r+0x8>)
 801ae46:	f000 b8c1 	b.w	801afcc <_fwalk_reent>
 801ae4a:	bf00      	nop
 801ae4c:	0801ad85 	.word	0x0801ad85

0801ae50 <__sfmoreglue>:
 801ae50:	b570      	push	{r4, r5, r6, lr}
 801ae52:	2268      	movs	r2, #104	; 0x68
 801ae54:	1e4d      	subs	r5, r1, #1
 801ae56:	4355      	muls	r5, r2
 801ae58:	460e      	mov	r6, r1
 801ae5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ae5e:	f7ff fcd1 	bl	801a804 <_malloc_r>
 801ae62:	4604      	mov	r4, r0
 801ae64:	b140      	cbz	r0, 801ae78 <__sfmoreglue+0x28>
 801ae66:	2100      	movs	r1, #0
 801ae68:	e9c0 1600 	strd	r1, r6, [r0]
 801ae6c:	300c      	adds	r0, #12
 801ae6e:	60a0      	str	r0, [r4, #8]
 801ae70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ae74:	f7fc f8b4 	bl	8016fe0 <memset>
 801ae78:	4620      	mov	r0, r4
 801ae7a:	bd70      	pop	{r4, r5, r6, pc}

0801ae7c <__sfp_lock_acquire>:
 801ae7c:	4801      	ldr	r0, [pc, #4]	; (801ae84 <__sfp_lock_acquire+0x8>)
 801ae7e:	f000 b8c5 	b.w	801b00c <__retarget_lock_acquire_recursive>
 801ae82:	bf00      	nop
 801ae84:	240029b5 	.word	0x240029b5

0801ae88 <__sfp_lock_release>:
 801ae88:	4801      	ldr	r0, [pc, #4]	; (801ae90 <__sfp_lock_release+0x8>)
 801ae8a:	f000 b8c0 	b.w	801b00e <__retarget_lock_release_recursive>
 801ae8e:	bf00      	nop
 801ae90:	240029b5 	.word	0x240029b5

0801ae94 <__sinit_lock_acquire>:
 801ae94:	4801      	ldr	r0, [pc, #4]	; (801ae9c <__sinit_lock_acquire+0x8>)
 801ae96:	f000 b8b9 	b.w	801b00c <__retarget_lock_acquire_recursive>
 801ae9a:	bf00      	nop
 801ae9c:	240029b6 	.word	0x240029b6

0801aea0 <__sinit_lock_release>:
 801aea0:	4801      	ldr	r0, [pc, #4]	; (801aea8 <__sinit_lock_release+0x8>)
 801aea2:	f000 b8b4 	b.w	801b00e <__retarget_lock_release_recursive>
 801aea6:	bf00      	nop
 801aea8:	240029b6 	.word	0x240029b6

0801aeac <__sinit>:
 801aeac:	b510      	push	{r4, lr}
 801aeae:	4604      	mov	r4, r0
 801aeb0:	f7ff fff0 	bl	801ae94 <__sinit_lock_acquire>
 801aeb4:	69a3      	ldr	r3, [r4, #24]
 801aeb6:	b11b      	cbz	r3, 801aec0 <__sinit+0x14>
 801aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aebc:	f7ff bff0 	b.w	801aea0 <__sinit_lock_release>
 801aec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aec4:	6523      	str	r3, [r4, #80]	; 0x50
 801aec6:	4b13      	ldr	r3, [pc, #76]	; (801af14 <__sinit+0x68>)
 801aec8:	4a13      	ldr	r2, [pc, #76]	; (801af18 <__sinit+0x6c>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	62a2      	str	r2, [r4, #40]	; 0x28
 801aece:	42a3      	cmp	r3, r4
 801aed0:	bf04      	itt	eq
 801aed2:	2301      	moveq	r3, #1
 801aed4:	61a3      	streq	r3, [r4, #24]
 801aed6:	4620      	mov	r0, r4
 801aed8:	f000 f820 	bl	801af1c <__sfp>
 801aedc:	6060      	str	r0, [r4, #4]
 801aede:	4620      	mov	r0, r4
 801aee0:	f000 f81c 	bl	801af1c <__sfp>
 801aee4:	60a0      	str	r0, [r4, #8]
 801aee6:	4620      	mov	r0, r4
 801aee8:	f000 f818 	bl	801af1c <__sfp>
 801aeec:	2200      	movs	r2, #0
 801aeee:	60e0      	str	r0, [r4, #12]
 801aef0:	2104      	movs	r1, #4
 801aef2:	6860      	ldr	r0, [r4, #4]
 801aef4:	f7ff ff82 	bl	801adfc <std>
 801aef8:	68a0      	ldr	r0, [r4, #8]
 801aefa:	2201      	movs	r2, #1
 801aefc:	2109      	movs	r1, #9
 801aefe:	f7ff ff7d 	bl	801adfc <std>
 801af02:	68e0      	ldr	r0, [r4, #12]
 801af04:	2202      	movs	r2, #2
 801af06:	2112      	movs	r1, #18
 801af08:	f7ff ff78 	bl	801adfc <std>
 801af0c:	2301      	movs	r3, #1
 801af0e:	61a3      	str	r3, [r4, #24]
 801af10:	e7d2      	b.n	801aeb8 <__sinit+0xc>
 801af12:	bf00      	nop
 801af14:	0801c82c 	.word	0x0801c82c
 801af18:	0801ae45 	.word	0x0801ae45

0801af1c <__sfp>:
 801af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af1e:	4607      	mov	r7, r0
 801af20:	f7ff ffac 	bl	801ae7c <__sfp_lock_acquire>
 801af24:	4b1e      	ldr	r3, [pc, #120]	; (801afa0 <__sfp+0x84>)
 801af26:	681e      	ldr	r6, [r3, #0]
 801af28:	69b3      	ldr	r3, [r6, #24]
 801af2a:	b913      	cbnz	r3, 801af32 <__sfp+0x16>
 801af2c:	4630      	mov	r0, r6
 801af2e:	f7ff ffbd 	bl	801aeac <__sinit>
 801af32:	3648      	adds	r6, #72	; 0x48
 801af34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801af38:	3b01      	subs	r3, #1
 801af3a:	d503      	bpl.n	801af44 <__sfp+0x28>
 801af3c:	6833      	ldr	r3, [r6, #0]
 801af3e:	b30b      	cbz	r3, 801af84 <__sfp+0x68>
 801af40:	6836      	ldr	r6, [r6, #0]
 801af42:	e7f7      	b.n	801af34 <__sfp+0x18>
 801af44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801af48:	b9d5      	cbnz	r5, 801af80 <__sfp+0x64>
 801af4a:	4b16      	ldr	r3, [pc, #88]	; (801afa4 <__sfp+0x88>)
 801af4c:	60e3      	str	r3, [r4, #12]
 801af4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801af52:	6665      	str	r5, [r4, #100]	; 0x64
 801af54:	f000 f859 	bl	801b00a <__retarget_lock_init_recursive>
 801af58:	f7ff ff96 	bl	801ae88 <__sfp_lock_release>
 801af5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801af60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801af64:	6025      	str	r5, [r4, #0]
 801af66:	61a5      	str	r5, [r4, #24]
 801af68:	2208      	movs	r2, #8
 801af6a:	4629      	mov	r1, r5
 801af6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801af70:	f7fc f836 	bl	8016fe0 <memset>
 801af74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801af78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801af7c:	4620      	mov	r0, r4
 801af7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af80:	3468      	adds	r4, #104	; 0x68
 801af82:	e7d9      	b.n	801af38 <__sfp+0x1c>
 801af84:	2104      	movs	r1, #4
 801af86:	4638      	mov	r0, r7
 801af88:	f7ff ff62 	bl	801ae50 <__sfmoreglue>
 801af8c:	4604      	mov	r4, r0
 801af8e:	6030      	str	r0, [r6, #0]
 801af90:	2800      	cmp	r0, #0
 801af92:	d1d5      	bne.n	801af40 <__sfp+0x24>
 801af94:	f7ff ff78 	bl	801ae88 <__sfp_lock_release>
 801af98:	230c      	movs	r3, #12
 801af9a:	603b      	str	r3, [r7, #0]
 801af9c:	e7ee      	b.n	801af7c <__sfp+0x60>
 801af9e:	bf00      	nop
 801afa0:	0801c82c 	.word	0x0801c82c
 801afa4:	ffff0001 	.word	0xffff0001

0801afa8 <fiprintf>:
 801afa8:	b40e      	push	{r1, r2, r3}
 801afaa:	b503      	push	{r0, r1, lr}
 801afac:	4601      	mov	r1, r0
 801afae:	ab03      	add	r3, sp, #12
 801afb0:	4805      	ldr	r0, [pc, #20]	; (801afc8 <fiprintf+0x20>)
 801afb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801afb6:	6800      	ldr	r0, [r0, #0]
 801afb8:	9301      	str	r3, [sp, #4]
 801afba:	f000 f8a7 	bl	801b10c <_vfiprintf_r>
 801afbe:	b002      	add	sp, #8
 801afc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801afc4:	b003      	add	sp, #12
 801afc6:	4770      	bx	lr
 801afc8:	24000100 	.word	0x24000100

0801afcc <_fwalk_reent>:
 801afcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afd0:	4606      	mov	r6, r0
 801afd2:	4688      	mov	r8, r1
 801afd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801afd8:	2700      	movs	r7, #0
 801afda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801afde:	f1b9 0901 	subs.w	r9, r9, #1
 801afe2:	d505      	bpl.n	801aff0 <_fwalk_reent+0x24>
 801afe4:	6824      	ldr	r4, [r4, #0]
 801afe6:	2c00      	cmp	r4, #0
 801afe8:	d1f7      	bne.n	801afda <_fwalk_reent+0xe>
 801afea:	4638      	mov	r0, r7
 801afec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aff0:	89ab      	ldrh	r3, [r5, #12]
 801aff2:	2b01      	cmp	r3, #1
 801aff4:	d907      	bls.n	801b006 <_fwalk_reent+0x3a>
 801aff6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801affa:	3301      	adds	r3, #1
 801affc:	d003      	beq.n	801b006 <_fwalk_reent+0x3a>
 801affe:	4629      	mov	r1, r5
 801b000:	4630      	mov	r0, r6
 801b002:	47c0      	blx	r8
 801b004:	4307      	orrs	r7, r0
 801b006:	3568      	adds	r5, #104	; 0x68
 801b008:	e7e9      	b.n	801afde <_fwalk_reent+0x12>

0801b00a <__retarget_lock_init_recursive>:
 801b00a:	4770      	bx	lr

0801b00c <__retarget_lock_acquire_recursive>:
 801b00c:	4770      	bx	lr

0801b00e <__retarget_lock_release_recursive>:
 801b00e:	4770      	bx	lr

0801b010 <memmove>:
 801b010:	4288      	cmp	r0, r1
 801b012:	b510      	push	{r4, lr}
 801b014:	eb01 0402 	add.w	r4, r1, r2
 801b018:	d902      	bls.n	801b020 <memmove+0x10>
 801b01a:	4284      	cmp	r4, r0
 801b01c:	4623      	mov	r3, r4
 801b01e:	d807      	bhi.n	801b030 <memmove+0x20>
 801b020:	1e43      	subs	r3, r0, #1
 801b022:	42a1      	cmp	r1, r4
 801b024:	d008      	beq.n	801b038 <memmove+0x28>
 801b026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b02a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b02e:	e7f8      	b.n	801b022 <memmove+0x12>
 801b030:	4402      	add	r2, r0
 801b032:	4601      	mov	r1, r0
 801b034:	428a      	cmp	r2, r1
 801b036:	d100      	bne.n	801b03a <memmove+0x2a>
 801b038:	bd10      	pop	{r4, pc}
 801b03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b03e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b042:	e7f7      	b.n	801b034 <memmove+0x24>

0801b044 <__malloc_lock>:
 801b044:	4801      	ldr	r0, [pc, #4]	; (801b04c <__malloc_lock+0x8>)
 801b046:	f7ff bfe1 	b.w	801b00c <__retarget_lock_acquire_recursive>
 801b04a:	bf00      	nop
 801b04c:	240029b4 	.word	0x240029b4

0801b050 <__malloc_unlock>:
 801b050:	4801      	ldr	r0, [pc, #4]	; (801b058 <__malloc_unlock+0x8>)
 801b052:	f7ff bfdc 	b.w	801b00e <__retarget_lock_release_recursive>
 801b056:	bf00      	nop
 801b058:	240029b4 	.word	0x240029b4

0801b05c <_realloc_r>:
 801b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b060:	4680      	mov	r8, r0
 801b062:	4614      	mov	r4, r2
 801b064:	460e      	mov	r6, r1
 801b066:	b921      	cbnz	r1, 801b072 <_realloc_r+0x16>
 801b068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b06c:	4611      	mov	r1, r2
 801b06e:	f7ff bbc9 	b.w	801a804 <_malloc_r>
 801b072:	b92a      	cbnz	r2, 801b080 <_realloc_r+0x24>
 801b074:	f7ff fb5a 	bl	801a72c <_free_r>
 801b078:	4625      	mov	r5, r4
 801b07a:	4628      	mov	r0, r5
 801b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b080:	f000 faa0 	bl	801b5c4 <_malloc_usable_size_r>
 801b084:	4284      	cmp	r4, r0
 801b086:	4607      	mov	r7, r0
 801b088:	d802      	bhi.n	801b090 <_realloc_r+0x34>
 801b08a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b08e:	d812      	bhi.n	801b0b6 <_realloc_r+0x5a>
 801b090:	4621      	mov	r1, r4
 801b092:	4640      	mov	r0, r8
 801b094:	f7ff fbb6 	bl	801a804 <_malloc_r>
 801b098:	4605      	mov	r5, r0
 801b09a:	2800      	cmp	r0, #0
 801b09c:	d0ed      	beq.n	801b07a <_realloc_r+0x1e>
 801b09e:	42bc      	cmp	r4, r7
 801b0a0:	4622      	mov	r2, r4
 801b0a2:	4631      	mov	r1, r6
 801b0a4:	bf28      	it	cs
 801b0a6:	463a      	movcs	r2, r7
 801b0a8:	f7fb ff8c 	bl	8016fc4 <memcpy>
 801b0ac:	4631      	mov	r1, r6
 801b0ae:	4640      	mov	r0, r8
 801b0b0:	f7ff fb3c 	bl	801a72c <_free_r>
 801b0b4:	e7e1      	b.n	801b07a <_realloc_r+0x1e>
 801b0b6:	4635      	mov	r5, r6
 801b0b8:	e7df      	b.n	801b07a <_realloc_r+0x1e>

0801b0ba <__sfputc_r>:
 801b0ba:	6893      	ldr	r3, [r2, #8]
 801b0bc:	3b01      	subs	r3, #1
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	b410      	push	{r4}
 801b0c2:	6093      	str	r3, [r2, #8]
 801b0c4:	da08      	bge.n	801b0d8 <__sfputc_r+0x1e>
 801b0c6:	6994      	ldr	r4, [r2, #24]
 801b0c8:	42a3      	cmp	r3, r4
 801b0ca:	db01      	blt.n	801b0d0 <__sfputc_r+0x16>
 801b0cc:	290a      	cmp	r1, #10
 801b0ce:	d103      	bne.n	801b0d8 <__sfputc_r+0x1e>
 801b0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0d4:	f000 b94a 	b.w	801b36c <__swbuf_r>
 801b0d8:	6813      	ldr	r3, [r2, #0]
 801b0da:	1c58      	adds	r0, r3, #1
 801b0dc:	6010      	str	r0, [r2, #0]
 801b0de:	7019      	strb	r1, [r3, #0]
 801b0e0:	4608      	mov	r0, r1
 801b0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0e6:	4770      	bx	lr

0801b0e8 <__sfputs_r>:
 801b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0ea:	4606      	mov	r6, r0
 801b0ec:	460f      	mov	r7, r1
 801b0ee:	4614      	mov	r4, r2
 801b0f0:	18d5      	adds	r5, r2, r3
 801b0f2:	42ac      	cmp	r4, r5
 801b0f4:	d101      	bne.n	801b0fa <__sfputs_r+0x12>
 801b0f6:	2000      	movs	r0, #0
 801b0f8:	e007      	b.n	801b10a <__sfputs_r+0x22>
 801b0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0fe:	463a      	mov	r2, r7
 801b100:	4630      	mov	r0, r6
 801b102:	f7ff ffda 	bl	801b0ba <__sfputc_r>
 801b106:	1c43      	adds	r3, r0, #1
 801b108:	d1f3      	bne.n	801b0f2 <__sfputs_r+0xa>
 801b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b10c <_vfiprintf_r>:
 801b10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b110:	460d      	mov	r5, r1
 801b112:	b09d      	sub	sp, #116	; 0x74
 801b114:	4614      	mov	r4, r2
 801b116:	4698      	mov	r8, r3
 801b118:	4606      	mov	r6, r0
 801b11a:	b118      	cbz	r0, 801b124 <_vfiprintf_r+0x18>
 801b11c:	6983      	ldr	r3, [r0, #24]
 801b11e:	b90b      	cbnz	r3, 801b124 <_vfiprintf_r+0x18>
 801b120:	f7ff fec4 	bl	801aeac <__sinit>
 801b124:	4b89      	ldr	r3, [pc, #548]	; (801b34c <_vfiprintf_r+0x240>)
 801b126:	429d      	cmp	r5, r3
 801b128:	d11b      	bne.n	801b162 <_vfiprintf_r+0x56>
 801b12a:	6875      	ldr	r5, [r6, #4]
 801b12c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b12e:	07d9      	lsls	r1, r3, #31
 801b130:	d405      	bmi.n	801b13e <_vfiprintf_r+0x32>
 801b132:	89ab      	ldrh	r3, [r5, #12]
 801b134:	059a      	lsls	r2, r3, #22
 801b136:	d402      	bmi.n	801b13e <_vfiprintf_r+0x32>
 801b138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b13a:	f7ff ff67 	bl	801b00c <__retarget_lock_acquire_recursive>
 801b13e:	89ab      	ldrh	r3, [r5, #12]
 801b140:	071b      	lsls	r3, r3, #28
 801b142:	d501      	bpl.n	801b148 <_vfiprintf_r+0x3c>
 801b144:	692b      	ldr	r3, [r5, #16]
 801b146:	b9eb      	cbnz	r3, 801b184 <_vfiprintf_r+0x78>
 801b148:	4629      	mov	r1, r5
 801b14a:	4630      	mov	r0, r6
 801b14c:	f000 f960 	bl	801b410 <__swsetup_r>
 801b150:	b1c0      	cbz	r0, 801b184 <_vfiprintf_r+0x78>
 801b152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b154:	07dc      	lsls	r4, r3, #31
 801b156:	d50e      	bpl.n	801b176 <_vfiprintf_r+0x6a>
 801b158:	f04f 30ff 	mov.w	r0, #4294967295
 801b15c:	b01d      	add	sp, #116	; 0x74
 801b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b162:	4b7b      	ldr	r3, [pc, #492]	; (801b350 <_vfiprintf_r+0x244>)
 801b164:	429d      	cmp	r5, r3
 801b166:	d101      	bne.n	801b16c <_vfiprintf_r+0x60>
 801b168:	68b5      	ldr	r5, [r6, #8]
 801b16a:	e7df      	b.n	801b12c <_vfiprintf_r+0x20>
 801b16c:	4b79      	ldr	r3, [pc, #484]	; (801b354 <_vfiprintf_r+0x248>)
 801b16e:	429d      	cmp	r5, r3
 801b170:	bf08      	it	eq
 801b172:	68f5      	ldreq	r5, [r6, #12]
 801b174:	e7da      	b.n	801b12c <_vfiprintf_r+0x20>
 801b176:	89ab      	ldrh	r3, [r5, #12]
 801b178:	0598      	lsls	r0, r3, #22
 801b17a:	d4ed      	bmi.n	801b158 <_vfiprintf_r+0x4c>
 801b17c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b17e:	f7ff ff46 	bl	801b00e <__retarget_lock_release_recursive>
 801b182:	e7e9      	b.n	801b158 <_vfiprintf_r+0x4c>
 801b184:	2300      	movs	r3, #0
 801b186:	9309      	str	r3, [sp, #36]	; 0x24
 801b188:	2320      	movs	r3, #32
 801b18a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b18e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b192:	2330      	movs	r3, #48	; 0x30
 801b194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b358 <_vfiprintf_r+0x24c>
 801b198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b19c:	f04f 0901 	mov.w	r9, #1
 801b1a0:	4623      	mov	r3, r4
 801b1a2:	469a      	mov	sl, r3
 801b1a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b1a8:	b10a      	cbz	r2, 801b1ae <_vfiprintf_r+0xa2>
 801b1aa:	2a25      	cmp	r2, #37	; 0x25
 801b1ac:	d1f9      	bne.n	801b1a2 <_vfiprintf_r+0x96>
 801b1ae:	ebba 0b04 	subs.w	fp, sl, r4
 801b1b2:	d00b      	beq.n	801b1cc <_vfiprintf_r+0xc0>
 801b1b4:	465b      	mov	r3, fp
 801b1b6:	4622      	mov	r2, r4
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	4630      	mov	r0, r6
 801b1bc:	f7ff ff94 	bl	801b0e8 <__sfputs_r>
 801b1c0:	3001      	adds	r0, #1
 801b1c2:	f000 80aa 	beq.w	801b31a <_vfiprintf_r+0x20e>
 801b1c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1c8:	445a      	add	r2, fp
 801b1ca:	9209      	str	r2, [sp, #36]	; 0x24
 801b1cc:	f89a 3000 	ldrb.w	r3, [sl]
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	f000 80a2 	beq.w	801b31a <_vfiprintf_r+0x20e>
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	f04f 32ff 	mov.w	r2, #4294967295
 801b1dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1e0:	f10a 0a01 	add.w	sl, sl, #1
 801b1e4:	9304      	str	r3, [sp, #16]
 801b1e6:	9307      	str	r3, [sp, #28]
 801b1e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b1ec:	931a      	str	r3, [sp, #104]	; 0x68
 801b1ee:	4654      	mov	r4, sl
 801b1f0:	2205      	movs	r2, #5
 801b1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1f6:	4858      	ldr	r0, [pc, #352]	; (801b358 <_vfiprintf_r+0x24c>)
 801b1f8:	f7e5 f892 	bl	8000320 <memchr>
 801b1fc:	9a04      	ldr	r2, [sp, #16]
 801b1fe:	b9d8      	cbnz	r0, 801b238 <_vfiprintf_r+0x12c>
 801b200:	06d1      	lsls	r1, r2, #27
 801b202:	bf44      	itt	mi
 801b204:	2320      	movmi	r3, #32
 801b206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b20a:	0713      	lsls	r3, r2, #28
 801b20c:	bf44      	itt	mi
 801b20e:	232b      	movmi	r3, #43	; 0x2b
 801b210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b214:	f89a 3000 	ldrb.w	r3, [sl]
 801b218:	2b2a      	cmp	r3, #42	; 0x2a
 801b21a:	d015      	beq.n	801b248 <_vfiprintf_r+0x13c>
 801b21c:	9a07      	ldr	r2, [sp, #28]
 801b21e:	4654      	mov	r4, sl
 801b220:	2000      	movs	r0, #0
 801b222:	f04f 0c0a 	mov.w	ip, #10
 801b226:	4621      	mov	r1, r4
 801b228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b22c:	3b30      	subs	r3, #48	; 0x30
 801b22e:	2b09      	cmp	r3, #9
 801b230:	d94e      	bls.n	801b2d0 <_vfiprintf_r+0x1c4>
 801b232:	b1b0      	cbz	r0, 801b262 <_vfiprintf_r+0x156>
 801b234:	9207      	str	r2, [sp, #28]
 801b236:	e014      	b.n	801b262 <_vfiprintf_r+0x156>
 801b238:	eba0 0308 	sub.w	r3, r0, r8
 801b23c:	fa09 f303 	lsl.w	r3, r9, r3
 801b240:	4313      	orrs	r3, r2
 801b242:	9304      	str	r3, [sp, #16]
 801b244:	46a2      	mov	sl, r4
 801b246:	e7d2      	b.n	801b1ee <_vfiprintf_r+0xe2>
 801b248:	9b03      	ldr	r3, [sp, #12]
 801b24a:	1d19      	adds	r1, r3, #4
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	9103      	str	r1, [sp, #12]
 801b250:	2b00      	cmp	r3, #0
 801b252:	bfbb      	ittet	lt
 801b254:	425b      	neglt	r3, r3
 801b256:	f042 0202 	orrlt.w	r2, r2, #2
 801b25a:	9307      	strge	r3, [sp, #28]
 801b25c:	9307      	strlt	r3, [sp, #28]
 801b25e:	bfb8      	it	lt
 801b260:	9204      	strlt	r2, [sp, #16]
 801b262:	7823      	ldrb	r3, [r4, #0]
 801b264:	2b2e      	cmp	r3, #46	; 0x2e
 801b266:	d10c      	bne.n	801b282 <_vfiprintf_r+0x176>
 801b268:	7863      	ldrb	r3, [r4, #1]
 801b26a:	2b2a      	cmp	r3, #42	; 0x2a
 801b26c:	d135      	bne.n	801b2da <_vfiprintf_r+0x1ce>
 801b26e:	9b03      	ldr	r3, [sp, #12]
 801b270:	1d1a      	adds	r2, r3, #4
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	9203      	str	r2, [sp, #12]
 801b276:	2b00      	cmp	r3, #0
 801b278:	bfb8      	it	lt
 801b27a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b27e:	3402      	adds	r4, #2
 801b280:	9305      	str	r3, [sp, #20]
 801b282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b368 <_vfiprintf_r+0x25c>
 801b286:	7821      	ldrb	r1, [r4, #0]
 801b288:	2203      	movs	r2, #3
 801b28a:	4650      	mov	r0, sl
 801b28c:	f7e5 f848 	bl	8000320 <memchr>
 801b290:	b140      	cbz	r0, 801b2a4 <_vfiprintf_r+0x198>
 801b292:	2340      	movs	r3, #64	; 0x40
 801b294:	eba0 000a 	sub.w	r0, r0, sl
 801b298:	fa03 f000 	lsl.w	r0, r3, r0
 801b29c:	9b04      	ldr	r3, [sp, #16]
 801b29e:	4303      	orrs	r3, r0
 801b2a0:	3401      	adds	r4, #1
 801b2a2:	9304      	str	r3, [sp, #16]
 801b2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2a8:	482c      	ldr	r0, [pc, #176]	; (801b35c <_vfiprintf_r+0x250>)
 801b2aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b2ae:	2206      	movs	r2, #6
 801b2b0:	f7e5 f836 	bl	8000320 <memchr>
 801b2b4:	2800      	cmp	r0, #0
 801b2b6:	d03f      	beq.n	801b338 <_vfiprintf_r+0x22c>
 801b2b8:	4b29      	ldr	r3, [pc, #164]	; (801b360 <_vfiprintf_r+0x254>)
 801b2ba:	bb1b      	cbnz	r3, 801b304 <_vfiprintf_r+0x1f8>
 801b2bc:	9b03      	ldr	r3, [sp, #12]
 801b2be:	3307      	adds	r3, #7
 801b2c0:	f023 0307 	bic.w	r3, r3, #7
 801b2c4:	3308      	adds	r3, #8
 801b2c6:	9303      	str	r3, [sp, #12]
 801b2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2ca:	443b      	add	r3, r7
 801b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 801b2ce:	e767      	b.n	801b1a0 <_vfiprintf_r+0x94>
 801b2d0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2d4:	460c      	mov	r4, r1
 801b2d6:	2001      	movs	r0, #1
 801b2d8:	e7a5      	b.n	801b226 <_vfiprintf_r+0x11a>
 801b2da:	2300      	movs	r3, #0
 801b2dc:	3401      	adds	r4, #1
 801b2de:	9305      	str	r3, [sp, #20]
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	f04f 0c0a 	mov.w	ip, #10
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2ec:	3a30      	subs	r2, #48	; 0x30
 801b2ee:	2a09      	cmp	r2, #9
 801b2f0:	d903      	bls.n	801b2fa <_vfiprintf_r+0x1ee>
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d0c5      	beq.n	801b282 <_vfiprintf_r+0x176>
 801b2f6:	9105      	str	r1, [sp, #20]
 801b2f8:	e7c3      	b.n	801b282 <_vfiprintf_r+0x176>
 801b2fa:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2fe:	4604      	mov	r4, r0
 801b300:	2301      	movs	r3, #1
 801b302:	e7f0      	b.n	801b2e6 <_vfiprintf_r+0x1da>
 801b304:	ab03      	add	r3, sp, #12
 801b306:	9300      	str	r3, [sp, #0]
 801b308:	462a      	mov	r2, r5
 801b30a:	4b16      	ldr	r3, [pc, #88]	; (801b364 <_vfiprintf_r+0x258>)
 801b30c:	a904      	add	r1, sp, #16
 801b30e:	4630      	mov	r0, r6
 801b310:	f7fb fefe 	bl	8017110 <_printf_float>
 801b314:	4607      	mov	r7, r0
 801b316:	1c78      	adds	r0, r7, #1
 801b318:	d1d6      	bne.n	801b2c8 <_vfiprintf_r+0x1bc>
 801b31a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b31c:	07d9      	lsls	r1, r3, #31
 801b31e:	d405      	bmi.n	801b32c <_vfiprintf_r+0x220>
 801b320:	89ab      	ldrh	r3, [r5, #12]
 801b322:	059a      	lsls	r2, r3, #22
 801b324:	d402      	bmi.n	801b32c <_vfiprintf_r+0x220>
 801b326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b328:	f7ff fe71 	bl	801b00e <__retarget_lock_release_recursive>
 801b32c:	89ab      	ldrh	r3, [r5, #12]
 801b32e:	065b      	lsls	r3, r3, #25
 801b330:	f53f af12 	bmi.w	801b158 <_vfiprintf_r+0x4c>
 801b334:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b336:	e711      	b.n	801b15c <_vfiprintf_r+0x50>
 801b338:	ab03      	add	r3, sp, #12
 801b33a:	9300      	str	r3, [sp, #0]
 801b33c:	462a      	mov	r2, r5
 801b33e:	4b09      	ldr	r3, [pc, #36]	; (801b364 <_vfiprintf_r+0x258>)
 801b340:	a904      	add	r1, sp, #16
 801b342:	4630      	mov	r0, r6
 801b344:	f7fc f970 	bl	8017628 <_printf_i>
 801b348:	e7e4      	b.n	801b314 <_vfiprintf_r+0x208>
 801b34a:	bf00      	nop
 801b34c:	0801cc94 	.word	0x0801cc94
 801b350:	0801ccb4 	.word	0x0801ccb4
 801b354:	0801cc74 	.word	0x0801cc74
 801b358:	0801cc24 	.word	0x0801cc24
 801b35c:	0801cc2e 	.word	0x0801cc2e
 801b360:	08017111 	.word	0x08017111
 801b364:	0801b0e9 	.word	0x0801b0e9
 801b368:	0801cc2a 	.word	0x0801cc2a

0801b36c <__swbuf_r>:
 801b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b36e:	460e      	mov	r6, r1
 801b370:	4614      	mov	r4, r2
 801b372:	4605      	mov	r5, r0
 801b374:	b118      	cbz	r0, 801b37e <__swbuf_r+0x12>
 801b376:	6983      	ldr	r3, [r0, #24]
 801b378:	b90b      	cbnz	r3, 801b37e <__swbuf_r+0x12>
 801b37a:	f7ff fd97 	bl	801aeac <__sinit>
 801b37e:	4b21      	ldr	r3, [pc, #132]	; (801b404 <__swbuf_r+0x98>)
 801b380:	429c      	cmp	r4, r3
 801b382:	d12b      	bne.n	801b3dc <__swbuf_r+0x70>
 801b384:	686c      	ldr	r4, [r5, #4]
 801b386:	69a3      	ldr	r3, [r4, #24]
 801b388:	60a3      	str	r3, [r4, #8]
 801b38a:	89a3      	ldrh	r3, [r4, #12]
 801b38c:	071a      	lsls	r2, r3, #28
 801b38e:	d52f      	bpl.n	801b3f0 <__swbuf_r+0x84>
 801b390:	6923      	ldr	r3, [r4, #16]
 801b392:	b36b      	cbz	r3, 801b3f0 <__swbuf_r+0x84>
 801b394:	6923      	ldr	r3, [r4, #16]
 801b396:	6820      	ldr	r0, [r4, #0]
 801b398:	1ac0      	subs	r0, r0, r3
 801b39a:	6963      	ldr	r3, [r4, #20]
 801b39c:	b2f6      	uxtb	r6, r6
 801b39e:	4283      	cmp	r3, r0
 801b3a0:	4637      	mov	r7, r6
 801b3a2:	dc04      	bgt.n	801b3ae <__swbuf_r+0x42>
 801b3a4:	4621      	mov	r1, r4
 801b3a6:	4628      	mov	r0, r5
 801b3a8:	f7ff fcec 	bl	801ad84 <_fflush_r>
 801b3ac:	bb30      	cbnz	r0, 801b3fc <__swbuf_r+0x90>
 801b3ae:	68a3      	ldr	r3, [r4, #8]
 801b3b0:	3b01      	subs	r3, #1
 801b3b2:	60a3      	str	r3, [r4, #8]
 801b3b4:	6823      	ldr	r3, [r4, #0]
 801b3b6:	1c5a      	adds	r2, r3, #1
 801b3b8:	6022      	str	r2, [r4, #0]
 801b3ba:	701e      	strb	r6, [r3, #0]
 801b3bc:	6963      	ldr	r3, [r4, #20]
 801b3be:	3001      	adds	r0, #1
 801b3c0:	4283      	cmp	r3, r0
 801b3c2:	d004      	beq.n	801b3ce <__swbuf_r+0x62>
 801b3c4:	89a3      	ldrh	r3, [r4, #12]
 801b3c6:	07db      	lsls	r3, r3, #31
 801b3c8:	d506      	bpl.n	801b3d8 <__swbuf_r+0x6c>
 801b3ca:	2e0a      	cmp	r6, #10
 801b3cc:	d104      	bne.n	801b3d8 <__swbuf_r+0x6c>
 801b3ce:	4621      	mov	r1, r4
 801b3d0:	4628      	mov	r0, r5
 801b3d2:	f7ff fcd7 	bl	801ad84 <_fflush_r>
 801b3d6:	b988      	cbnz	r0, 801b3fc <__swbuf_r+0x90>
 801b3d8:	4638      	mov	r0, r7
 801b3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3dc:	4b0a      	ldr	r3, [pc, #40]	; (801b408 <__swbuf_r+0x9c>)
 801b3de:	429c      	cmp	r4, r3
 801b3e0:	d101      	bne.n	801b3e6 <__swbuf_r+0x7a>
 801b3e2:	68ac      	ldr	r4, [r5, #8]
 801b3e4:	e7cf      	b.n	801b386 <__swbuf_r+0x1a>
 801b3e6:	4b09      	ldr	r3, [pc, #36]	; (801b40c <__swbuf_r+0xa0>)
 801b3e8:	429c      	cmp	r4, r3
 801b3ea:	bf08      	it	eq
 801b3ec:	68ec      	ldreq	r4, [r5, #12]
 801b3ee:	e7ca      	b.n	801b386 <__swbuf_r+0x1a>
 801b3f0:	4621      	mov	r1, r4
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f000 f80c 	bl	801b410 <__swsetup_r>
 801b3f8:	2800      	cmp	r0, #0
 801b3fa:	d0cb      	beq.n	801b394 <__swbuf_r+0x28>
 801b3fc:	f04f 37ff 	mov.w	r7, #4294967295
 801b400:	e7ea      	b.n	801b3d8 <__swbuf_r+0x6c>
 801b402:	bf00      	nop
 801b404:	0801cc94 	.word	0x0801cc94
 801b408:	0801ccb4 	.word	0x0801ccb4
 801b40c:	0801cc74 	.word	0x0801cc74

0801b410 <__swsetup_r>:
 801b410:	4b32      	ldr	r3, [pc, #200]	; (801b4dc <__swsetup_r+0xcc>)
 801b412:	b570      	push	{r4, r5, r6, lr}
 801b414:	681d      	ldr	r5, [r3, #0]
 801b416:	4606      	mov	r6, r0
 801b418:	460c      	mov	r4, r1
 801b41a:	b125      	cbz	r5, 801b426 <__swsetup_r+0x16>
 801b41c:	69ab      	ldr	r3, [r5, #24]
 801b41e:	b913      	cbnz	r3, 801b426 <__swsetup_r+0x16>
 801b420:	4628      	mov	r0, r5
 801b422:	f7ff fd43 	bl	801aeac <__sinit>
 801b426:	4b2e      	ldr	r3, [pc, #184]	; (801b4e0 <__swsetup_r+0xd0>)
 801b428:	429c      	cmp	r4, r3
 801b42a:	d10f      	bne.n	801b44c <__swsetup_r+0x3c>
 801b42c:	686c      	ldr	r4, [r5, #4]
 801b42e:	89a3      	ldrh	r3, [r4, #12]
 801b430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b434:	0719      	lsls	r1, r3, #28
 801b436:	d42c      	bmi.n	801b492 <__swsetup_r+0x82>
 801b438:	06dd      	lsls	r5, r3, #27
 801b43a:	d411      	bmi.n	801b460 <__swsetup_r+0x50>
 801b43c:	2309      	movs	r3, #9
 801b43e:	6033      	str	r3, [r6, #0]
 801b440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b444:	81a3      	strh	r3, [r4, #12]
 801b446:	f04f 30ff 	mov.w	r0, #4294967295
 801b44a:	e03e      	b.n	801b4ca <__swsetup_r+0xba>
 801b44c:	4b25      	ldr	r3, [pc, #148]	; (801b4e4 <__swsetup_r+0xd4>)
 801b44e:	429c      	cmp	r4, r3
 801b450:	d101      	bne.n	801b456 <__swsetup_r+0x46>
 801b452:	68ac      	ldr	r4, [r5, #8]
 801b454:	e7eb      	b.n	801b42e <__swsetup_r+0x1e>
 801b456:	4b24      	ldr	r3, [pc, #144]	; (801b4e8 <__swsetup_r+0xd8>)
 801b458:	429c      	cmp	r4, r3
 801b45a:	bf08      	it	eq
 801b45c:	68ec      	ldreq	r4, [r5, #12]
 801b45e:	e7e6      	b.n	801b42e <__swsetup_r+0x1e>
 801b460:	0758      	lsls	r0, r3, #29
 801b462:	d512      	bpl.n	801b48a <__swsetup_r+0x7a>
 801b464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b466:	b141      	cbz	r1, 801b47a <__swsetup_r+0x6a>
 801b468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b46c:	4299      	cmp	r1, r3
 801b46e:	d002      	beq.n	801b476 <__swsetup_r+0x66>
 801b470:	4630      	mov	r0, r6
 801b472:	f7ff f95b 	bl	801a72c <_free_r>
 801b476:	2300      	movs	r3, #0
 801b478:	6363      	str	r3, [r4, #52]	; 0x34
 801b47a:	89a3      	ldrh	r3, [r4, #12]
 801b47c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b480:	81a3      	strh	r3, [r4, #12]
 801b482:	2300      	movs	r3, #0
 801b484:	6063      	str	r3, [r4, #4]
 801b486:	6923      	ldr	r3, [r4, #16]
 801b488:	6023      	str	r3, [r4, #0]
 801b48a:	89a3      	ldrh	r3, [r4, #12]
 801b48c:	f043 0308 	orr.w	r3, r3, #8
 801b490:	81a3      	strh	r3, [r4, #12]
 801b492:	6923      	ldr	r3, [r4, #16]
 801b494:	b94b      	cbnz	r3, 801b4aa <__swsetup_r+0x9a>
 801b496:	89a3      	ldrh	r3, [r4, #12]
 801b498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4a0:	d003      	beq.n	801b4aa <__swsetup_r+0x9a>
 801b4a2:	4621      	mov	r1, r4
 801b4a4:	4630      	mov	r0, r6
 801b4a6:	f000 f84d 	bl	801b544 <__smakebuf_r>
 801b4aa:	89a0      	ldrh	r0, [r4, #12]
 801b4ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4b0:	f010 0301 	ands.w	r3, r0, #1
 801b4b4:	d00a      	beq.n	801b4cc <__swsetup_r+0xbc>
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	60a3      	str	r3, [r4, #8]
 801b4ba:	6963      	ldr	r3, [r4, #20]
 801b4bc:	425b      	negs	r3, r3
 801b4be:	61a3      	str	r3, [r4, #24]
 801b4c0:	6923      	ldr	r3, [r4, #16]
 801b4c2:	b943      	cbnz	r3, 801b4d6 <__swsetup_r+0xc6>
 801b4c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b4c8:	d1ba      	bne.n	801b440 <__swsetup_r+0x30>
 801b4ca:	bd70      	pop	{r4, r5, r6, pc}
 801b4cc:	0781      	lsls	r1, r0, #30
 801b4ce:	bf58      	it	pl
 801b4d0:	6963      	ldrpl	r3, [r4, #20]
 801b4d2:	60a3      	str	r3, [r4, #8]
 801b4d4:	e7f4      	b.n	801b4c0 <__swsetup_r+0xb0>
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	e7f7      	b.n	801b4ca <__swsetup_r+0xba>
 801b4da:	bf00      	nop
 801b4dc:	24000100 	.word	0x24000100
 801b4e0:	0801cc94 	.word	0x0801cc94
 801b4e4:	0801ccb4 	.word	0x0801ccb4
 801b4e8:	0801cc74 	.word	0x0801cc74

0801b4ec <abort>:
 801b4ec:	b508      	push	{r3, lr}
 801b4ee:	2006      	movs	r0, #6
 801b4f0:	f000 f898 	bl	801b624 <raise>
 801b4f4:	2001      	movs	r0, #1
 801b4f6:	f7e8 ff25 	bl	8004344 <_exit>

0801b4fa <__swhatbuf_r>:
 801b4fa:	b570      	push	{r4, r5, r6, lr}
 801b4fc:	460e      	mov	r6, r1
 801b4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b502:	2900      	cmp	r1, #0
 801b504:	b096      	sub	sp, #88	; 0x58
 801b506:	4614      	mov	r4, r2
 801b508:	461d      	mov	r5, r3
 801b50a:	da08      	bge.n	801b51e <__swhatbuf_r+0x24>
 801b50c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b510:	2200      	movs	r2, #0
 801b512:	602a      	str	r2, [r5, #0]
 801b514:	061a      	lsls	r2, r3, #24
 801b516:	d410      	bmi.n	801b53a <__swhatbuf_r+0x40>
 801b518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b51c:	e00e      	b.n	801b53c <__swhatbuf_r+0x42>
 801b51e:	466a      	mov	r2, sp
 801b520:	f000 f89c 	bl	801b65c <_fstat_r>
 801b524:	2800      	cmp	r0, #0
 801b526:	dbf1      	blt.n	801b50c <__swhatbuf_r+0x12>
 801b528:	9a01      	ldr	r2, [sp, #4]
 801b52a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b52e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b532:	425a      	negs	r2, r3
 801b534:	415a      	adcs	r2, r3
 801b536:	602a      	str	r2, [r5, #0]
 801b538:	e7ee      	b.n	801b518 <__swhatbuf_r+0x1e>
 801b53a:	2340      	movs	r3, #64	; 0x40
 801b53c:	2000      	movs	r0, #0
 801b53e:	6023      	str	r3, [r4, #0]
 801b540:	b016      	add	sp, #88	; 0x58
 801b542:	bd70      	pop	{r4, r5, r6, pc}

0801b544 <__smakebuf_r>:
 801b544:	898b      	ldrh	r3, [r1, #12]
 801b546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b548:	079d      	lsls	r5, r3, #30
 801b54a:	4606      	mov	r6, r0
 801b54c:	460c      	mov	r4, r1
 801b54e:	d507      	bpl.n	801b560 <__smakebuf_r+0x1c>
 801b550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b554:	6023      	str	r3, [r4, #0]
 801b556:	6123      	str	r3, [r4, #16]
 801b558:	2301      	movs	r3, #1
 801b55a:	6163      	str	r3, [r4, #20]
 801b55c:	b002      	add	sp, #8
 801b55e:	bd70      	pop	{r4, r5, r6, pc}
 801b560:	ab01      	add	r3, sp, #4
 801b562:	466a      	mov	r2, sp
 801b564:	f7ff ffc9 	bl	801b4fa <__swhatbuf_r>
 801b568:	9900      	ldr	r1, [sp, #0]
 801b56a:	4605      	mov	r5, r0
 801b56c:	4630      	mov	r0, r6
 801b56e:	f7ff f949 	bl	801a804 <_malloc_r>
 801b572:	b948      	cbnz	r0, 801b588 <__smakebuf_r+0x44>
 801b574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b578:	059a      	lsls	r2, r3, #22
 801b57a:	d4ef      	bmi.n	801b55c <__smakebuf_r+0x18>
 801b57c:	f023 0303 	bic.w	r3, r3, #3
 801b580:	f043 0302 	orr.w	r3, r3, #2
 801b584:	81a3      	strh	r3, [r4, #12]
 801b586:	e7e3      	b.n	801b550 <__smakebuf_r+0xc>
 801b588:	4b0d      	ldr	r3, [pc, #52]	; (801b5c0 <__smakebuf_r+0x7c>)
 801b58a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b58c:	89a3      	ldrh	r3, [r4, #12]
 801b58e:	6020      	str	r0, [r4, #0]
 801b590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b594:	81a3      	strh	r3, [r4, #12]
 801b596:	9b00      	ldr	r3, [sp, #0]
 801b598:	6163      	str	r3, [r4, #20]
 801b59a:	9b01      	ldr	r3, [sp, #4]
 801b59c:	6120      	str	r0, [r4, #16]
 801b59e:	b15b      	cbz	r3, 801b5b8 <__smakebuf_r+0x74>
 801b5a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5a4:	4630      	mov	r0, r6
 801b5a6:	f000 f86b 	bl	801b680 <_isatty_r>
 801b5aa:	b128      	cbz	r0, 801b5b8 <__smakebuf_r+0x74>
 801b5ac:	89a3      	ldrh	r3, [r4, #12]
 801b5ae:	f023 0303 	bic.w	r3, r3, #3
 801b5b2:	f043 0301 	orr.w	r3, r3, #1
 801b5b6:	81a3      	strh	r3, [r4, #12]
 801b5b8:	89a0      	ldrh	r0, [r4, #12]
 801b5ba:	4305      	orrs	r5, r0
 801b5bc:	81a5      	strh	r5, [r4, #12]
 801b5be:	e7cd      	b.n	801b55c <__smakebuf_r+0x18>
 801b5c0:	0801ae45 	.word	0x0801ae45

0801b5c4 <_malloc_usable_size_r>:
 801b5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5c8:	1f18      	subs	r0, r3, #4
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	bfbc      	itt	lt
 801b5ce:	580b      	ldrlt	r3, [r1, r0]
 801b5d0:	18c0      	addlt	r0, r0, r3
 801b5d2:	4770      	bx	lr

0801b5d4 <_raise_r>:
 801b5d4:	291f      	cmp	r1, #31
 801b5d6:	b538      	push	{r3, r4, r5, lr}
 801b5d8:	4604      	mov	r4, r0
 801b5da:	460d      	mov	r5, r1
 801b5dc:	d904      	bls.n	801b5e8 <_raise_r+0x14>
 801b5de:	2316      	movs	r3, #22
 801b5e0:	6003      	str	r3, [r0, #0]
 801b5e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b5e6:	bd38      	pop	{r3, r4, r5, pc}
 801b5e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b5ea:	b112      	cbz	r2, 801b5f2 <_raise_r+0x1e>
 801b5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b5f0:	b94b      	cbnz	r3, 801b606 <_raise_r+0x32>
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f000 f830 	bl	801b658 <_getpid_r>
 801b5f8:	462a      	mov	r2, r5
 801b5fa:	4601      	mov	r1, r0
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b602:	f000 b817 	b.w	801b634 <_kill_r>
 801b606:	2b01      	cmp	r3, #1
 801b608:	d00a      	beq.n	801b620 <_raise_r+0x4c>
 801b60a:	1c59      	adds	r1, r3, #1
 801b60c:	d103      	bne.n	801b616 <_raise_r+0x42>
 801b60e:	2316      	movs	r3, #22
 801b610:	6003      	str	r3, [r0, #0]
 801b612:	2001      	movs	r0, #1
 801b614:	e7e7      	b.n	801b5e6 <_raise_r+0x12>
 801b616:	2400      	movs	r4, #0
 801b618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b61c:	4628      	mov	r0, r5
 801b61e:	4798      	blx	r3
 801b620:	2000      	movs	r0, #0
 801b622:	e7e0      	b.n	801b5e6 <_raise_r+0x12>

0801b624 <raise>:
 801b624:	4b02      	ldr	r3, [pc, #8]	; (801b630 <raise+0xc>)
 801b626:	4601      	mov	r1, r0
 801b628:	6818      	ldr	r0, [r3, #0]
 801b62a:	f7ff bfd3 	b.w	801b5d4 <_raise_r>
 801b62e:	bf00      	nop
 801b630:	24000100 	.word	0x24000100

0801b634 <_kill_r>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	4d07      	ldr	r5, [pc, #28]	; (801b654 <_kill_r+0x20>)
 801b638:	2300      	movs	r3, #0
 801b63a:	4604      	mov	r4, r0
 801b63c:	4608      	mov	r0, r1
 801b63e:	4611      	mov	r1, r2
 801b640:	602b      	str	r3, [r5, #0]
 801b642:	f7e8 fe6f 	bl	8004324 <_kill>
 801b646:	1c43      	adds	r3, r0, #1
 801b648:	d102      	bne.n	801b650 <_kill_r+0x1c>
 801b64a:	682b      	ldr	r3, [r5, #0]
 801b64c:	b103      	cbz	r3, 801b650 <_kill_r+0x1c>
 801b64e:	6023      	str	r3, [r4, #0]
 801b650:	bd38      	pop	{r3, r4, r5, pc}
 801b652:	bf00      	nop
 801b654:	240029b0 	.word	0x240029b0

0801b658 <_getpid_r>:
 801b658:	f7e8 be5c 	b.w	8004314 <_getpid>

0801b65c <_fstat_r>:
 801b65c:	b538      	push	{r3, r4, r5, lr}
 801b65e:	4d07      	ldr	r5, [pc, #28]	; (801b67c <_fstat_r+0x20>)
 801b660:	2300      	movs	r3, #0
 801b662:	4604      	mov	r4, r0
 801b664:	4608      	mov	r0, r1
 801b666:	4611      	mov	r1, r2
 801b668:	602b      	str	r3, [r5, #0]
 801b66a:	f7e8 feba 	bl	80043e2 <_fstat>
 801b66e:	1c43      	adds	r3, r0, #1
 801b670:	d102      	bne.n	801b678 <_fstat_r+0x1c>
 801b672:	682b      	ldr	r3, [r5, #0]
 801b674:	b103      	cbz	r3, 801b678 <_fstat_r+0x1c>
 801b676:	6023      	str	r3, [r4, #0]
 801b678:	bd38      	pop	{r3, r4, r5, pc}
 801b67a:	bf00      	nop
 801b67c:	240029b0 	.word	0x240029b0

0801b680 <_isatty_r>:
 801b680:	b538      	push	{r3, r4, r5, lr}
 801b682:	4d06      	ldr	r5, [pc, #24]	; (801b69c <_isatty_r+0x1c>)
 801b684:	2300      	movs	r3, #0
 801b686:	4604      	mov	r4, r0
 801b688:	4608      	mov	r0, r1
 801b68a:	602b      	str	r3, [r5, #0]
 801b68c:	f7e8 feb9 	bl	8004402 <_isatty>
 801b690:	1c43      	adds	r3, r0, #1
 801b692:	d102      	bne.n	801b69a <_isatty_r+0x1a>
 801b694:	682b      	ldr	r3, [r5, #0]
 801b696:	b103      	cbz	r3, 801b69a <_isatty_r+0x1a>
 801b698:	6023      	str	r3, [r4, #0]
 801b69a:	bd38      	pop	{r3, r4, r5, pc}
 801b69c:	240029b0 	.word	0x240029b0

0801b6a0 <cos>:
 801b6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b6a2:	eeb0 7b40 	vmov.f64	d7, d0
 801b6a6:	ee17 3a90 	vmov	r3, s15
 801b6aa:	4a21      	ldr	r2, [pc, #132]	; (801b730 <cos+0x90>)
 801b6ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	dc06      	bgt.n	801b6c2 <cos+0x22>
 801b6b4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801b728 <cos+0x88>
 801b6b8:	b005      	add	sp, #20
 801b6ba:	f85d eb04 	ldr.w	lr, [sp], #4
 801b6be:	f000 bb4b 	b.w	801bd58 <__kernel_cos>
 801b6c2:	4a1c      	ldr	r2, [pc, #112]	; (801b734 <cos+0x94>)
 801b6c4:	4293      	cmp	r3, r2
 801b6c6:	dd04      	ble.n	801b6d2 <cos+0x32>
 801b6c8:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b6cc:	b005      	add	sp, #20
 801b6ce:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6d2:	4668      	mov	r0, sp
 801b6d4:	f000 f9f8 	bl	801bac8 <__ieee754_rem_pio2>
 801b6d8:	f000 0003 	and.w	r0, r0, #3
 801b6dc:	2801      	cmp	r0, #1
 801b6de:	d009      	beq.n	801b6f4 <cos+0x54>
 801b6e0:	2802      	cmp	r0, #2
 801b6e2:	d010      	beq.n	801b706 <cos+0x66>
 801b6e4:	b9b0      	cbnz	r0, 801b714 <cos+0x74>
 801b6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b6ea:	ed9d 0b00 	vldr	d0, [sp]
 801b6ee:	f000 fb33 	bl	801bd58 <__kernel_cos>
 801b6f2:	e7eb      	b.n	801b6cc <cos+0x2c>
 801b6f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b6f8:	ed9d 0b00 	vldr	d0, [sp]
 801b6fc:	f000 fe30 	bl	801c360 <__kernel_sin>
 801b700:	eeb1 0b40 	vneg.f64	d0, d0
 801b704:	e7e2      	b.n	801b6cc <cos+0x2c>
 801b706:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b70a:	ed9d 0b00 	vldr	d0, [sp]
 801b70e:	f000 fb23 	bl	801bd58 <__kernel_cos>
 801b712:	e7f5      	b.n	801b700 <cos+0x60>
 801b714:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b718:	ed9d 0b00 	vldr	d0, [sp]
 801b71c:	2001      	movs	r0, #1
 801b71e:	f000 fe1f 	bl	801c360 <__kernel_sin>
 801b722:	e7d3      	b.n	801b6cc <cos+0x2c>
 801b724:	f3af 8000 	nop.w
	...
 801b730:	3fe921fb 	.word	0x3fe921fb
 801b734:	7fefffff 	.word	0x7fefffff

0801b738 <sin>:
 801b738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b73a:	eeb0 7b40 	vmov.f64	d7, d0
 801b73e:	ee17 3a90 	vmov	r3, s15
 801b742:	4a21      	ldr	r2, [pc, #132]	; (801b7c8 <sin+0x90>)
 801b744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b748:	4293      	cmp	r3, r2
 801b74a:	dc07      	bgt.n	801b75c <sin+0x24>
 801b74c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801b7c0 <sin+0x88>
 801b750:	2000      	movs	r0, #0
 801b752:	b005      	add	sp, #20
 801b754:	f85d eb04 	ldr.w	lr, [sp], #4
 801b758:	f000 be02 	b.w	801c360 <__kernel_sin>
 801b75c:	4a1b      	ldr	r2, [pc, #108]	; (801b7cc <sin+0x94>)
 801b75e:	4293      	cmp	r3, r2
 801b760:	dd04      	ble.n	801b76c <sin+0x34>
 801b762:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b766:	b005      	add	sp, #20
 801b768:	f85d fb04 	ldr.w	pc, [sp], #4
 801b76c:	4668      	mov	r0, sp
 801b76e:	f000 f9ab 	bl	801bac8 <__ieee754_rem_pio2>
 801b772:	f000 0003 	and.w	r0, r0, #3
 801b776:	2801      	cmp	r0, #1
 801b778:	d00a      	beq.n	801b790 <sin+0x58>
 801b77a:	2802      	cmp	r0, #2
 801b77c:	d00f      	beq.n	801b79e <sin+0x66>
 801b77e:	b9c0      	cbnz	r0, 801b7b2 <sin+0x7a>
 801b780:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b784:	ed9d 0b00 	vldr	d0, [sp]
 801b788:	2001      	movs	r0, #1
 801b78a:	f000 fde9 	bl	801c360 <__kernel_sin>
 801b78e:	e7ea      	b.n	801b766 <sin+0x2e>
 801b790:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b794:	ed9d 0b00 	vldr	d0, [sp]
 801b798:	f000 fade 	bl	801bd58 <__kernel_cos>
 801b79c:	e7e3      	b.n	801b766 <sin+0x2e>
 801b79e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7a2:	ed9d 0b00 	vldr	d0, [sp]
 801b7a6:	2001      	movs	r0, #1
 801b7a8:	f000 fdda 	bl	801c360 <__kernel_sin>
 801b7ac:	eeb1 0b40 	vneg.f64	d0, d0
 801b7b0:	e7d9      	b.n	801b766 <sin+0x2e>
 801b7b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b7b6:	ed9d 0b00 	vldr	d0, [sp]
 801b7ba:	f000 facd 	bl	801bd58 <__kernel_cos>
 801b7be:	e7f5      	b.n	801b7ac <sin+0x74>
	...
 801b7c8:	3fe921fb 	.word	0x3fe921fb
 801b7cc:	7fefffff 	.word	0x7fefffff

0801b7d0 <acos>:
 801b7d0:	b508      	push	{r3, lr}
 801b7d2:	ed2d 8b04 	vpush	{d8-d9}
 801b7d6:	eeb0 8b40 	vmov.f64	d8, d0
 801b7da:	f000 f845 	bl	801b868 <__ieee754_acos>
 801b7de:	eeb4 8b48 	vcmp.f64	d8, d8
 801b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e6:	eeb0 9b40 	vmov.f64	d9, d0
 801b7ea:	d615      	bvs.n	801b818 <acos+0x48>
 801b7ec:	eeb0 0b48 	vmov.f64	d0, d8
 801b7f0:	f000 fe0e 	bl	801c410 <fabs>
 801b7f4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801b7f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801b7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b800:	dd0a      	ble.n	801b818 <acos+0x48>
 801b802:	f7fb fbb5 	bl	8016f70 <__errno>
 801b806:	ecbd 8b04 	vpop	{d8-d9}
 801b80a:	2321      	movs	r3, #33	; 0x21
 801b80c:	6003      	str	r3, [r0, #0]
 801b80e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b812:	4804      	ldr	r0, [pc, #16]	; (801b824 <acos+0x54>)
 801b814:	f7ff b9d8 	b.w	801abc8 <nan>
 801b818:	eeb0 0b49 	vmov.f64	d0, d9
 801b81c:	ecbd 8b04 	vpop	{d8-d9}
 801b820:	bd08      	pop	{r3, pc}
 801b822:	bf00      	nop
 801b824:	0801cc70 	.word	0x0801cc70

0801b828 <sqrt>:
 801b828:	b508      	push	{r3, lr}
 801b82a:	ed2d 8b04 	vpush	{d8-d9}
 801b82e:	eeb0 8b40 	vmov.f64	d8, d0
 801b832:	f000 fa8d 	bl	801bd50 <__ieee754_sqrt>
 801b836:	eeb4 8b48 	vcmp.f64	d8, d8
 801b83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b83e:	d60c      	bvs.n	801b85a <sqrt+0x32>
 801b840:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801b860 <sqrt+0x38>
 801b844:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801b848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b84c:	d505      	bpl.n	801b85a <sqrt+0x32>
 801b84e:	f7fb fb8f 	bl	8016f70 <__errno>
 801b852:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801b856:	2321      	movs	r3, #33	; 0x21
 801b858:	6003      	str	r3, [r0, #0]
 801b85a:	ecbd 8b04 	vpop	{d8-d9}
 801b85e:	bd08      	pop	{r3, pc}
	...

0801b868 <__ieee754_acos>:
 801b868:	b500      	push	{lr}
 801b86a:	ee10 2a90 	vmov	r2, s1
 801b86e:	ed2d 8b10 	vpush	{d8-d15}
 801b872:	4991      	ldr	r1, [pc, #580]	; (801bab8 <__ieee754_acos+0x250>)
 801b874:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b878:	428b      	cmp	r3, r1
 801b87a:	b087      	sub	sp, #28
 801b87c:	dd18      	ble.n	801b8b0 <__ieee754_acos+0x48>
 801b87e:	ee10 1a10 	vmov	r1, s0
 801b882:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801b886:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b88a:	430b      	orrs	r3, r1
 801b88c:	d10b      	bne.n	801b8a6 <__ieee754_acos+0x3e>
 801b88e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 801ba40 <__ieee754_acos+0x1d8>
 801b892:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 801ba48 <__ieee754_acos+0x1e0>
 801b896:	2a00      	cmp	r2, #0
 801b898:	fe30 0b07 	vselgt.f64	d0, d0, d7
 801b89c:	b007      	add	sp, #28
 801b89e:	ecbd 8b10 	vpop	{d8-d15}
 801b8a2:	f85d fb04 	ldr.w	pc, [sp], #4
 801b8a6:	ee30 8b40 	vsub.f64	d8, d0, d0
 801b8aa:	ee88 0b08 	vdiv.f64	d0, d8, d8
 801b8ae:	e7f5      	b.n	801b89c <__ieee754_acos+0x34>
 801b8b0:	4982      	ldr	r1, [pc, #520]	; (801babc <__ieee754_acos+0x254>)
 801b8b2:	428b      	cmp	r3, r1
 801b8b4:	dc3c      	bgt.n	801b930 <__ieee754_acos+0xc8>
 801b8b6:	4a82      	ldr	r2, [pc, #520]	; (801bac0 <__ieee754_acos+0x258>)
 801b8b8:	4293      	cmp	r3, r2
 801b8ba:	ed9f 7b65 	vldr	d7, [pc, #404]	; 801ba50 <__ieee754_acos+0x1e8>
 801b8be:	f340 80bc 	ble.w	801ba3a <__ieee754_acos+0x1d2>
 801b8c2:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b8c6:	ed9f 4b64 	vldr	d4, [pc, #400]	; 801ba58 <__ieee754_acos+0x1f0>
 801b8ca:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801ba60 <__ieee754_acos+0x1f8>
 801b8ce:	eea6 5b04 	vfma.f64	d5, d6, d4
 801b8d2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801ba68 <__ieee754_acos+0x200>
 801b8d6:	eea5 4b06 	vfma.f64	d4, d5, d6
 801b8da:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801ba70 <__ieee754_acos+0x208>
 801b8de:	eea4 5b06 	vfma.f64	d5, d4, d6
 801b8e2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801ba78 <__ieee754_acos+0x210>
 801b8e6:	eea5 4b06 	vfma.f64	d4, d5, d6
 801b8ea:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801ba80 <__ieee754_acos+0x218>
 801b8ee:	ed9f 3b66 	vldr	d3, [pc, #408]	; 801ba88 <__ieee754_acos+0x220>
 801b8f2:	eea4 5b06 	vfma.f64	d5, d4, d6
 801b8f6:	ee25 5b06 	vmul.f64	d5, d5, d6
 801b8fa:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801ba90 <__ieee754_acos+0x228>
 801b8fe:	eea6 3b04 	vfma.f64	d3, d6, d4
 801b902:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801ba98 <__ieee754_acos+0x230>
 801b906:	ed9f 8b66 	vldr	d8, [pc, #408]	; 801baa0 <__ieee754_acos+0x238>
 801b90a:	eea3 4b06 	vfma.f64	d4, d3, d6
 801b90e:	ed9f 3b66 	vldr	d3, [pc, #408]	; 801baa8 <__ieee754_acos+0x240>
 801b912:	eea4 3b06 	vfma.f64	d3, d4, d6
 801b916:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801b91a:	eea3 4b06 	vfma.f64	d4, d3, d6
 801b91e:	ee85 6b04 	vdiv.f64	d6, d5, d4
 801b922:	eea0 8b46 	vfms.f64	d8, d0, d6
 801b926:	ee30 0b48 	vsub.f64	d0, d0, d8
 801b92a:	ee37 0b40 	vsub.f64	d0, d7, d0
 801b92e:	e7b5      	b.n	801b89c <__ieee754_acos+0x34>
 801b930:	2a00      	cmp	r2, #0
 801b932:	ed9f eb49 	vldr	d14, [pc, #292]	; 801ba58 <__ieee754_acos+0x1f0>
 801b936:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801b93a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801b93e:	ed9f db48 	vldr	d13, [pc, #288]	; 801ba60 <__ieee754_acos+0x1f8>
 801b942:	ed9f cb49 	vldr	d12, [pc, #292]	; 801ba68 <__ieee754_acos+0x200>
 801b946:	ed9f bb4a 	vldr	d11, [pc, #296]	; 801ba70 <__ieee754_acos+0x208>
 801b94a:	ed9f ab4b 	vldr	d10, [pc, #300]	; 801ba78 <__ieee754_acos+0x210>
 801b94e:	ed9f fb4c 	vldr	d15, [pc, #304]	; 801ba80 <__ieee754_acos+0x218>
 801b952:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801ba88 <__ieee754_acos+0x220>
 801b956:	ed9f 2b50 	vldr	d2, [pc, #320]	; 801ba98 <__ieee754_acos+0x230>
 801b95a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 801baa8 <__ieee754_acos+0x240>
 801b95e:	da2a      	bge.n	801b9b6 <__ieee754_acos+0x14e>
 801b960:	ee30 0b09 	vadd.f64	d0, d0, d9
 801b964:	ee20 0b08 	vmul.f64	d0, d0, d8
 801b968:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801ba90 <__ieee754_acos+0x228>
 801b96c:	eea0 db0e 	vfma.f64	d13, d0, d14
 801b970:	eead cb00 	vfma.f64	d12, d13, d0
 801b974:	eea0 3b07 	vfma.f64	d3, d0, d7
 801b978:	eeac bb00 	vfma.f64	d11, d12, d0
 801b97c:	eea3 2b00 	vfma.f64	d2, d3, d0
 801b980:	eeab ab00 	vfma.f64	d10, d11, d0
 801b984:	eea2 1b00 	vfma.f64	d1, d2, d0
 801b988:	eeaa fb00 	vfma.f64	d15, d10, d0
 801b98c:	eea1 9b00 	vfma.f64	d9, d1, d0
 801b990:	ee2f fb00 	vmul.f64	d15, d15, d0
 801b994:	f000 f9dc 	bl	801bd50 <__ieee754_sqrt>
 801b998:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 801b99c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 801bab0 <__ieee754_acos+0x248>
 801b9a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801b9a4:	ee37 7b00 	vadd.f64	d7, d7, d0
 801b9a8:	ed9f 0b27 	vldr	d0, [pc, #156]	; 801ba48 <__ieee754_acos+0x1e0>
 801b9ac:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801b9b0:	eea7 0b46 	vfms.f64	d0, d7, d6
 801b9b4:	e772      	b.n	801b89c <__ieee754_acos+0x34>
 801b9b6:	ee39 0b40 	vsub.f64	d0, d9, d0
 801b9ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 801b9be:	eeb0 0b48 	vmov.f64	d0, d8
 801b9c2:	ed8d 1b04 	vstr	d1, [sp, #16]
 801b9c6:	ed8d 2b02 	vstr	d2, [sp, #8]
 801b9ca:	ed8d 3b00 	vstr	d3, [sp]
 801b9ce:	f000 f9bf 	bl	801bd50 <__ieee754_sqrt>
 801b9d2:	eeb0 5b48 	vmov.f64	d5, d8
 801b9d6:	eea8 db0e 	vfma.f64	d13, d8, d14
 801b9da:	ec53 2b10 	vmov	r2, r3, d0
 801b9de:	eead cb08 	vfma.f64	d12, d13, d8
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	ec43 2b17 	vmov	d7, r2, r3
 801b9e8:	eeac bb08 	vfma.f64	d11, d12, d8
 801b9ec:	ee30 6b07 	vadd.f64	d6, d0, d7
 801b9f0:	eea7 5b47 	vfms.f64	d5, d7, d7
 801b9f4:	ed9d 3b00 	vldr	d3, [sp]
 801b9f8:	ee85 4b06 	vdiv.f64	d4, d5, d6
 801b9fc:	eeab ab08 	vfma.f64	d10, d11, d8
 801ba00:	ed9f 6b23 	vldr	d6, [pc, #140]	; 801ba90 <__ieee754_acos+0x228>
 801ba04:	eeaa fb08 	vfma.f64	d15, d10, d8
 801ba08:	ee2f fb08 	vmul.f64	d15, d15, d8
 801ba0c:	ed9d 2b02 	vldr	d2, [sp, #8]
 801ba10:	eea8 3b06 	vfma.f64	d3, d8, d6
 801ba14:	eeb0 6b44 	vmov.f64	d6, d4
 801ba18:	ed9d 1b04 	vldr	d1, [sp, #16]
 801ba1c:	eea3 2b08 	vfma.f64	d2, d3, d8
 801ba20:	eea2 1b08 	vfma.f64	d1, d2, d8
 801ba24:	eea1 9b08 	vfma.f64	d9, d1, d8
 801ba28:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 801ba2c:	eea0 6b05 	vfma.f64	d6, d0, d5
 801ba30:	ee37 0b06 	vadd.f64	d0, d7, d6
 801ba34:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ba38:	e730      	b.n	801b89c <__ieee754_acos+0x34>
 801ba3a:	eeb0 0b47 	vmov.f64	d0, d7
 801ba3e:	e72d      	b.n	801b89c <__ieee754_acos+0x34>
	...
 801ba48:	54442d18 	.word	0x54442d18
 801ba4c:	400921fb 	.word	0x400921fb
 801ba50:	54442d18 	.word	0x54442d18
 801ba54:	3ff921fb 	.word	0x3ff921fb
 801ba58:	0dfdf709 	.word	0x0dfdf709
 801ba5c:	3f023de1 	.word	0x3f023de1
 801ba60:	7501b288 	.word	0x7501b288
 801ba64:	3f49efe0 	.word	0x3f49efe0
 801ba68:	b5688f3b 	.word	0xb5688f3b
 801ba6c:	bfa48228 	.word	0xbfa48228
 801ba70:	0e884455 	.word	0x0e884455
 801ba74:	3fc9c155 	.word	0x3fc9c155
 801ba78:	03eb6f7d 	.word	0x03eb6f7d
 801ba7c:	bfd4d612 	.word	0xbfd4d612
 801ba80:	55555555 	.word	0x55555555
 801ba84:	3fc55555 	.word	0x3fc55555
 801ba88:	1b8d0159 	.word	0x1b8d0159
 801ba8c:	bfe6066c 	.word	0xbfe6066c
 801ba90:	b12e9282 	.word	0xb12e9282
 801ba94:	3fb3b8c5 	.word	0x3fb3b8c5
 801ba98:	9c598ac8 	.word	0x9c598ac8
 801ba9c:	40002ae5 	.word	0x40002ae5
 801baa0:	33145c07 	.word	0x33145c07
 801baa4:	3c91a626 	.word	0x3c91a626
 801baa8:	1c8a2d4b 	.word	0x1c8a2d4b
 801baac:	c0033a27 	.word	0xc0033a27
 801bab0:	33145c07 	.word	0x33145c07
 801bab4:	bc91a626 	.word	0xbc91a626
 801bab8:	3fefffff 	.word	0x3fefffff
 801babc:	3fdfffff 	.word	0x3fdfffff
 801bac0:	3c600000 	.word	0x3c600000
 801bac4:	00000000 	.word	0x00000000

0801bac8 <__ieee754_rem_pio2>:
 801bac8:	b570      	push	{r4, r5, r6, lr}
 801baca:	eeb0 7b40 	vmov.f64	d7, d0
 801bace:	ee17 5a90 	vmov	r5, s15
 801bad2:	4b99      	ldr	r3, [pc, #612]	; (801bd38 <__ieee754_rem_pio2+0x270>)
 801bad4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bad8:	429e      	cmp	r6, r3
 801bada:	b088      	sub	sp, #32
 801badc:	4604      	mov	r4, r0
 801bade:	dc07      	bgt.n	801baf0 <__ieee754_rem_pio2+0x28>
 801bae0:	2200      	movs	r2, #0
 801bae2:	2300      	movs	r3, #0
 801bae4:	ed84 0b00 	vstr	d0, [r4]
 801bae8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801baec:	2000      	movs	r0, #0
 801baee:	e01b      	b.n	801bb28 <__ieee754_rem_pio2+0x60>
 801baf0:	4b92      	ldr	r3, [pc, #584]	; (801bd3c <__ieee754_rem_pio2+0x274>)
 801baf2:	429e      	cmp	r6, r3
 801baf4:	dc3b      	bgt.n	801bb6e <__ieee754_rem_pio2+0xa6>
 801baf6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801bafa:	2d00      	cmp	r5, #0
 801bafc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801bcf8 <__ieee754_rem_pio2+0x230>
 801bb00:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801bb04:	dd19      	ble.n	801bb3a <__ieee754_rem_pio2+0x72>
 801bb06:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bb0a:	429e      	cmp	r6, r3
 801bb0c:	d00e      	beq.n	801bb2c <__ieee754_rem_pio2+0x64>
 801bb0e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801bd00 <__ieee754_rem_pio2+0x238>
 801bb12:	ee37 5b46 	vsub.f64	d5, d7, d6
 801bb16:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bb1a:	ed84 5b00 	vstr	d5, [r4]
 801bb1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bb22:	ed84 7b02 	vstr	d7, [r4, #8]
 801bb26:	2001      	movs	r0, #1
 801bb28:	b008      	add	sp, #32
 801bb2a:	bd70      	pop	{r4, r5, r6, pc}
 801bb2c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801bd08 <__ieee754_rem_pio2+0x240>
 801bb30:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bb34:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801bd10 <__ieee754_rem_pio2+0x248>
 801bb38:	e7eb      	b.n	801bb12 <__ieee754_rem_pio2+0x4a>
 801bb3a:	429e      	cmp	r6, r3
 801bb3c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801bb40:	d00e      	beq.n	801bb60 <__ieee754_rem_pio2+0x98>
 801bb42:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801bd00 <__ieee754_rem_pio2+0x238>
 801bb46:	ee37 5b06 	vadd.f64	d5, d7, d6
 801bb4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bb4e:	ed84 5b00 	vstr	d5, [r4]
 801bb52:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bb56:	f04f 30ff 	mov.w	r0, #4294967295
 801bb5a:	ed84 7b02 	vstr	d7, [r4, #8]
 801bb5e:	e7e3      	b.n	801bb28 <__ieee754_rem_pio2+0x60>
 801bb60:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801bd08 <__ieee754_rem_pio2+0x240>
 801bb64:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bb68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801bd10 <__ieee754_rem_pio2+0x248>
 801bb6c:	e7eb      	b.n	801bb46 <__ieee754_rem_pio2+0x7e>
 801bb6e:	4b74      	ldr	r3, [pc, #464]	; (801bd40 <__ieee754_rem_pio2+0x278>)
 801bb70:	429e      	cmp	r6, r3
 801bb72:	dc70      	bgt.n	801bc56 <__ieee754_rem_pio2+0x18e>
 801bb74:	f000 fc4c 	bl	801c410 <fabs>
 801bb78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801bb7c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801bd18 <__ieee754_rem_pio2+0x250>
 801bb80:	eea0 7b06 	vfma.f64	d7, d0, d6
 801bb84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801bb88:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801bb8c:	ee17 0a90 	vmov	r0, s15
 801bb90:	eeb1 4b45 	vneg.f64	d4, d5
 801bb94:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801bcf8 <__ieee754_rem_pio2+0x230>
 801bb98:	eea5 0b47 	vfms.f64	d0, d5, d7
 801bb9c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801bd00 <__ieee754_rem_pio2+0x238>
 801bba0:	281f      	cmp	r0, #31
 801bba2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801bba6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bbaa:	dc08      	bgt.n	801bbbe <__ieee754_rem_pio2+0xf6>
 801bbac:	4b65      	ldr	r3, [pc, #404]	; (801bd44 <__ieee754_rem_pio2+0x27c>)
 801bbae:	1e42      	subs	r2, r0, #1
 801bbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bbb4:	42b3      	cmp	r3, r6
 801bbb6:	d002      	beq.n	801bbbe <__ieee754_rem_pio2+0xf6>
 801bbb8:	ed84 6b00 	vstr	d6, [r4]
 801bbbc:	e026      	b.n	801bc0c <__ieee754_rem_pio2+0x144>
 801bbbe:	ee16 3a90 	vmov	r3, s13
 801bbc2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bbc6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801bbca:	2b10      	cmp	r3, #16
 801bbcc:	ea4f 5226 	mov.w	r2, r6, asr #20
 801bbd0:	ddf2      	ble.n	801bbb8 <__ieee754_rem_pio2+0xf0>
 801bbd2:	eeb0 6b40 	vmov.f64	d6, d0
 801bbd6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801bd08 <__ieee754_rem_pio2+0x240>
 801bbda:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801bd10 <__ieee754_rem_pio2+0x248>
 801bbde:	eea4 6b07 	vfma.f64	d6, d4, d7
 801bbe2:	ee30 0b46 	vsub.f64	d0, d0, d6
 801bbe6:	eea4 0b07 	vfma.f64	d0, d4, d7
 801bbea:	eeb0 7b40 	vmov.f64	d7, d0
 801bbee:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801bbf2:	ee36 3b47 	vsub.f64	d3, d6, d7
 801bbf6:	ee13 3a90 	vmov	r3, s7
 801bbfa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bbfe:	1ad3      	subs	r3, r2, r3
 801bc00:	2b31      	cmp	r3, #49	; 0x31
 801bc02:	dc17      	bgt.n	801bc34 <__ieee754_rem_pio2+0x16c>
 801bc04:	eeb0 0b46 	vmov.f64	d0, d6
 801bc08:	ed84 3b00 	vstr	d3, [r4]
 801bc0c:	ed94 6b00 	vldr	d6, [r4]
 801bc10:	2d00      	cmp	r5, #0
 801bc12:	ee30 0b46 	vsub.f64	d0, d0, d6
 801bc16:	ee30 0b47 	vsub.f64	d0, d0, d7
 801bc1a:	ed84 0b02 	vstr	d0, [r4, #8]
 801bc1e:	da83      	bge.n	801bb28 <__ieee754_rem_pio2+0x60>
 801bc20:	eeb1 6b46 	vneg.f64	d6, d6
 801bc24:	eeb1 0b40 	vneg.f64	d0, d0
 801bc28:	ed84 6b00 	vstr	d6, [r4]
 801bc2c:	ed84 0b02 	vstr	d0, [r4, #8]
 801bc30:	4240      	negs	r0, r0
 801bc32:	e779      	b.n	801bb28 <__ieee754_rem_pio2+0x60>
 801bc34:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801bd20 <__ieee754_rem_pio2+0x258>
 801bc38:	eeb0 0b46 	vmov.f64	d0, d6
 801bc3c:	eea4 0b03 	vfma.f64	d0, d4, d3
 801bc40:	ee36 7b40 	vsub.f64	d7, d6, d0
 801bc44:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801bd28 <__ieee754_rem_pio2+0x260>
 801bc48:	eea4 7b03 	vfma.f64	d7, d4, d3
 801bc4c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801bc50:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bc54:	e7b0      	b.n	801bbb8 <__ieee754_rem_pio2+0xf0>
 801bc56:	4b3c      	ldr	r3, [pc, #240]	; (801bd48 <__ieee754_rem_pio2+0x280>)
 801bc58:	429e      	cmp	r6, r3
 801bc5a:	dd06      	ble.n	801bc6a <__ieee754_rem_pio2+0x1a2>
 801bc5c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801bc60:	ed80 7b02 	vstr	d7, [r0, #8]
 801bc64:	ed80 7b00 	vstr	d7, [r0]
 801bc68:	e740      	b.n	801baec <__ieee754_rem_pio2+0x24>
 801bc6a:	1532      	asrs	r2, r6, #20
 801bc6c:	ee10 0a10 	vmov	r0, s0
 801bc70:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801bc74:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801bc78:	ec41 0b17 	vmov	d7, r0, r1
 801bc7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bc80:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801bd30 <__ieee754_rem_pio2+0x268>
 801bc84:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bc88:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bc8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bc90:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bc94:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bc98:	a902      	add	r1, sp, #8
 801bc9a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bc9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bca2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801bca6:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bcaa:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bcae:	2603      	movs	r6, #3
 801bcb0:	4608      	mov	r0, r1
 801bcb2:	ed91 7b04 	vldr	d7, [r1, #16]
 801bcb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcbe:	4633      	mov	r3, r6
 801bcc0:	f1a1 0108 	sub.w	r1, r1, #8
 801bcc4:	f106 36ff 	add.w	r6, r6, #4294967295
 801bcc8:	d0f3      	beq.n	801bcb2 <__ieee754_rem_pio2+0x1ea>
 801bcca:	4920      	ldr	r1, [pc, #128]	; (801bd4c <__ieee754_rem_pio2+0x284>)
 801bccc:	9101      	str	r1, [sp, #4]
 801bcce:	2102      	movs	r1, #2
 801bcd0:	9100      	str	r1, [sp, #0]
 801bcd2:	4621      	mov	r1, r4
 801bcd4:	f000 f8ac 	bl	801be30 <__kernel_rem_pio2>
 801bcd8:	2d00      	cmp	r5, #0
 801bcda:	f6bf af25 	bge.w	801bb28 <__ieee754_rem_pio2+0x60>
 801bcde:	ed94 7b00 	vldr	d7, [r4]
 801bce2:	eeb1 7b47 	vneg.f64	d7, d7
 801bce6:	ed84 7b00 	vstr	d7, [r4]
 801bcea:	ed94 7b02 	vldr	d7, [r4, #8]
 801bcee:	eeb1 7b47 	vneg.f64	d7, d7
 801bcf2:	ed84 7b02 	vstr	d7, [r4, #8]
 801bcf6:	e79b      	b.n	801bc30 <__ieee754_rem_pio2+0x168>
 801bcf8:	54400000 	.word	0x54400000
 801bcfc:	3ff921fb 	.word	0x3ff921fb
 801bd00:	1a626331 	.word	0x1a626331
 801bd04:	3dd0b461 	.word	0x3dd0b461
 801bd08:	1a600000 	.word	0x1a600000
 801bd0c:	3dd0b461 	.word	0x3dd0b461
 801bd10:	2e037073 	.word	0x2e037073
 801bd14:	3ba3198a 	.word	0x3ba3198a
 801bd18:	6dc9c883 	.word	0x6dc9c883
 801bd1c:	3fe45f30 	.word	0x3fe45f30
 801bd20:	2e000000 	.word	0x2e000000
 801bd24:	3ba3198a 	.word	0x3ba3198a
 801bd28:	252049c1 	.word	0x252049c1
 801bd2c:	397b839a 	.word	0x397b839a
 801bd30:	00000000 	.word	0x00000000
 801bd34:	41700000 	.word	0x41700000
 801bd38:	3fe921fb 	.word	0x3fe921fb
 801bd3c:	4002d97b 	.word	0x4002d97b
 801bd40:	413921fb 	.word	0x413921fb
 801bd44:	0801ccd4 	.word	0x0801ccd4
 801bd48:	7fefffff 	.word	0x7fefffff
 801bd4c:	0801cd54 	.word	0x0801cd54

0801bd50 <__ieee754_sqrt>:
 801bd50:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801bd54:	4770      	bx	lr
	...

0801bd58 <__kernel_cos>:
 801bd58:	ee10 1a90 	vmov	r1, s1
 801bd5c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801bd60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801bd64:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801bd68:	da05      	bge.n	801bd76 <__kernel_cos+0x1e>
 801bd6a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801bd6e:	ee17 3a90 	vmov	r3, s15
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d03d      	beq.n	801bdf2 <__kernel_cos+0x9a>
 801bd76:	ee20 3b00 	vmul.f64	d3, d0, d0
 801bd7a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801bdf8 <__kernel_cos+0xa0>
 801bd7e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 801be00 <__kernel_cos+0xa8>
 801bd82:	eea3 6b07 	vfma.f64	d6, d3, d7
 801bd86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801be08 <__kernel_cos+0xb0>
 801bd8a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801bd8e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 801be10 <__kernel_cos+0xb8>
 801bd92:	eea7 6b03 	vfma.f64	d6, d7, d3
 801bd96:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801be18 <__kernel_cos+0xc0>
 801bd9a:	4b23      	ldr	r3, [pc, #140]	; (801be28 <__kernel_cos+0xd0>)
 801bd9c:	eea6 7b03 	vfma.f64	d7, d6, d3
 801bda0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 801be20 <__kernel_cos+0xc8>
 801bda4:	4299      	cmp	r1, r3
 801bda6:	eea7 6b03 	vfma.f64	d6, d7, d3
 801bdaa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801bdae:	ee26 5b03 	vmul.f64	d5, d6, d3
 801bdb2:	ee23 7b07 	vmul.f64	d7, d3, d7
 801bdb6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801bdba:	eea3 6b05 	vfma.f64	d6, d3, d5
 801bdbe:	dc04      	bgt.n	801bdca <__kernel_cos+0x72>
 801bdc0:	ee37 6b46 	vsub.f64	d6, d7, d6
 801bdc4:	ee34 0b46 	vsub.f64	d0, d4, d6
 801bdc8:	4770      	bx	lr
 801bdca:	4b18      	ldr	r3, [pc, #96]	; (801be2c <__kernel_cos+0xd4>)
 801bdcc:	4299      	cmp	r1, r3
 801bdce:	dc0d      	bgt.n	801bdec <__kernel_cos+0x94>
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801bdd6:	ec43 2b15 	vmov	d5, r2, r3
 801bdda:	ee34 0b45 	vsub.f64	d0, d4, d5
 801bdde:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bde2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bde6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801bdea:	4770      	bx	lr
 801bdec:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801bdf0:	e7f3      	b.n	801bdda <__kernel_cos+0x82>
 801bdf2:	eeb0 0b44 	vmov.f64	d0, d4
 801bdf6:	4770      	bx	lr
 801bdf8:	be8838d4 	.word	0xbe8838d4
 801bdfc:	bda8fae9 	.word	0xbda8fae9
 801be00:	bdb4b1c4 	.word	0xbdb4b1c4
 801be04:	3e21ee9e 	.word	0x3e21ee9e
 801be08:	809c52ad 	.word	0x809c52ad
 801be0c:	be927e4f 	.word	0xbe927e4f
 801be10:	19cb1590 	.word	0x19cb1590
 801be14:	3efa01a0 	.word	0x3efa01a0
 801be18:	16c15177 	.word	0x16c15177
 801be1c:	bf56c16c 	.word	0xbf56c16c
 801be20:	5555554c 	.word	0x5555554c
 801be24:	3fa55555 	.word	0x3fa55555
 801be28:	3fd33332 	.word	0x3fd33332
 801be2c:	3fe90000 	.word	0x3fe90000

0801be30 <__kernel_rem_pio2>:
 801be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be34:	ed2d 8b06 	vpush	{d8-d10}
 801be38:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801be3c:	460f      	mov	r7, r1
 801be3e:	9002      	str	r0, [sp, #8]
 801be40:	49c5      	ldr	r1, [pc, #788]	; (801c158 <__kernel_rem_pio2+0x328>)
 801be42:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801be44:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801be48:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801be4c:	9301      	str	r3, [sp, #4]
 801be4e:	f112 0f14 	cmn.w	r2, #20
 801be52:	bfa8      	it	ge
 801be54:	2018      	movge	r0, #24
 801be56:	f103 31ff 	add.w	r1, r3, #4294967295
 801be5a:	bfb8      	it	lt
 801be5c:	2000      	movlt	r0, #0
 801be5e:	f06f 0417 	mvn.w	r4, #23
 801be62:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801c140 <__kernel_rem_pio2+0x310>
 801be66:	bfa4      	itt	ge
 801be68:	f1a2 0a03 	subge.w	sl, r2, #3
 801be6c:	fb9a f0f0 	sdivge	r0, sl, r0
 801be70:	fb00 4404 	mla	r4, r0, r4, r4
 801be74:	1a46      	subs	r6, r0, r1
 801be76:	4414      	add	r4, r2
 801be78:	eb09 0c01 	add.w	ip, r9, r1
 801be7c:	ad1a      	add	r5, sp, #104	; 0x68
 801be7e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801be82:	2200      	movs	r2, #0
 801be84:	4562      	cmp	r2, ip
 801be86:	dd10      	ble.n	801beaa <__kernel_rem_pio2+0x7a>
 801be88:	9a01      	ldr	r2, [sp, #4]
 801be8a:	ab1a      	add	r3, sp, #104	; 0x68
 801be8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801be90:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801be94:	f04f 0c00 	mov.w	ip, #0
 801be98:	45cc      	cmp	ip, r9
 801be9a:	dc26      	bgt.n	801beea <__kernel_rem_pio2+0xba>
 801be9c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801c140 <__kernel_rem_pio2+0x310>
 801bea0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801bea4:	4616      	mov	r6, r2
 801bea6:	2500      	movs	r5, #0
 801bea8:	e015      	b.n	801bed6 <__kernel_rem_pio2+0xa6>
 801beaa:	42d6      	cmn	r6, r2
 801beac:	d409      	bmi.n	801bec2 <__kernel_rem_pio2+0x92>
 801beae:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801beb2:	ee07 3a90 	vmov	s15, r3
 801beb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801beba:	eca5 7b02 	vstmia	r5!, {d7}
 801bebe:	3201      	adds	r2, #1
 801bec0:	e7e0      	b.n	801be84 <__kernel_rem_pio2+0x54>
 801bec2:	eeb0 7b46 	vmov.f64	d7, d6
 801bec6:	e7f8      	b.n	801beba <__kernel_rem_pio2+0x8a>
 801bec8:	ecb8 5b02 	vldmia	r8!, {d5}
 801becc:	ed96 6b00 	vldr	d6, [r6]
 801bed0:	3501      	adds	r5, #1
 801bed2:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bed6:	428d      	cmp	r5, r1
 801bed8:	f1a6 0608 	sub.w	r6, r6, #8
 801bedc:	ddf4      	ble.n	801bec8 <__kernel_rem_pio2+0x98>
 801bede:	ecaa 7b02 	vstmia	sl!, {d7}
 801bee2:	f10c 0c01 	add.w	ip, ip, #1
 801bee6:	3208      	adds	r2, #8
 801bee8:	e7d6      	b.n	801be98 <__kernel_rem_pio2+0x68>
 801beea:	ab06      	add	r3, sp, #24
 801beec:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801c148 <__kernel_rem_pio2+0x318>
 801bef0:	ed9f ab97 	vldr	d10, [pc, #604]	; 801c150 <__kernel_rem_pio2+0x320>
 801bef4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801bef8:	9303      	str	r3, [sp, #12]
 801befa:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801befe:	464d      	mov	r5, r9
 801bf00:	00eb      	lsls	r3, r5, #3
 801bf02:	9304      	str	r3, [sp, #16]
 801bf04:	ab92      	add	r3, sp, #584	; 0x248
 801bf06:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801bf0a:	f10d 0b18 	add.w	fp, sp, #24
 801bf0e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801bf10:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801bf14:	465e      	mov	r6, fp
 801bf16:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801bf1a:	4628      	mov	r0, r5
 801bf1c:	2800      	cmp	r0, #0
 801bf1e:	f1a2 0208 	sub.w	r2, r2, #8
 801bf22:	dc4c      	bgt.n	801bfbe <__kernel_rem_pio2+0x18e>
 801bf24:	4620      	mov	r0, r4
 801bf26:	9105      	str	r1, [sp, #20]
 801bf28:	f000 faf2 	bl	801c510 <scalbn>
 801bf2c:	eeb0 8b40 	vmov.f64	d8, d0
 801bf30:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801bf34:	ee28 0b00 	vmul.f64	d0, d8, d0
 801bf38:	f000 fa76 	bl	801c428 <floor>
 801bf3c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801bf40:	eea0 8b47 	vfms.f64	d8, d0, d7
 801bf44:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801bf48:	2c00      	cmp	r4, #0
 801bf4a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801bf4e:	ee17 8a90 	vmov	r8, s15
 801bf52:	ee38 8b40 	vsub.f64	d8, d8, d0
 801bf56:	9905      	ldr	r1, [sp, #20]
 801bf58:	dd43      	ble.n	801bfe2 <__kernel_rem_pio2+0x1b2>
 801bf5a:	1e68      	subs	r0, r5, #1
 801bf5c:	ab06      	add	r3, sp, #24
 801bf5e:	f1c4 0c18 	rsb	ip, r4, #24
 801bf62:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801bf66:	fa46 f20c 	asr.w	r2, r6, ip
 801bf6a:	4490      	add	r8, r2
 801bf6c:	fa02 f20c 	lsl.w	r2, r2, ip
 801bf70:	1ab6      	subs	r6, r6, r2
 801bf72:	f1c4 0217 	rsb	r2, r4, #23
 801bf76:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801bf7a:	4116      	asrs	r6, r2
 801bf7c:	2e00      	cmp	r6, #0
 801bf7e:	dd3f      	ble.n	801c000 <__kernel_rem_pio2+0x1d0>
 801bf80:	f04f 0c00 	mov.w	ip, #0
 801bf84:	f108 0801 	add.w	r8, r8, #1
 801bf88:	4660      	mov	r0, ip
 801bf8a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801bf8e:	4565      	cmp	r5, ip
 801bf90:	dc6e      	bgt.n	801c070 <__kernel_rem_pio2+0x240>
 801bf92:	2c00      	cmp	r4, #0
 801bf94:	dd04      	ble.n	801bfa0 <__kernel_rem_pio2+0x170>
 801bf96:	2c01      	cmp	r4, #1
 801bf98:	d07f      	beq.n	801c09a <__kernel_rem_pio2+0x26a>
 801bf9a:	2c02      	cmp	r4, #2
 801bf9c:	f000 8087 	beq.w	801c0ae <__kernel_rem_pio2+0x27e>
 801bfa0:	2e02      	cmp	r6, #2
 801bfa2:	d12d      	bne.n	801c000 <__kernel_rem_pio2+0x1d0>
 801bfa4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bfa8:	ee30 8b48 	vsub.f64	d8, d0, d8
 801bfac:	b340      	cbz	r0, 801c000 <__kernel_rem_pio2+0x1d0>
 801bfae:	4620      	mov	r0, r4
 801bfb0:	9105      	str	r1, [sp, #20]
 801bfb2:	f000 faad 	bl	801c510 <scalbn>
 801bfb6:	9905      	ldr	r1, [sp, #20]
 801bfb8:	ee38 8b40 	vsub.f64	d8, d8, d0
 801bfbc:	e020      	b.n	801c000 <__kernel_rem_pio2+0x1d0>
 801bfbe:	ee20 7b09 	vmul.f64	d7, d0, d9
 801bfc2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801bfc6:	3801      	subs	r0, #1
 801bfc8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801bfcc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801bfd0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801bfd4:	eca6 0a01 	vstmia	r6!, {s0}
 801bfd8:	ed92 0b00 	vldr	d0, [r2]
 801bfdc:	ee37 0b00 	vadd.f64	d0, d7, d0
 801bfe0:	e79c      	b.n	801bf1c <__kernel_rem_pio2+0xec>
 801bfe2:	d105      	bne.n	801bff0 <__kernel_rem_pio2+0x1c0>
 801bfe4:	1e6a      	subs	r2, r5, #1
 801bfe6:	ab06      	add	r3, sp, #24
 801bfe8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801bfec:	15f6      	asrs	r6, r6, #23
 801bfee:	e7c5      	b.n	801bf7c <__kernel_rem_pio2+0x14c>
 801bff0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801bff4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801bff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bffc:	da36      	bge.n	801c06c <__kernel_rem_pio2+0x23c>
 801bffe:	2600      	movs	r6, #0
 801c000:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c008:	f040 80aa 	bne.w	801c160 <__kernel_rem_pio2+0x330>
 801c00c:	f105 3bff 	add.w	fp, r5, #4294967295
 801c010:	4658      	mov	r0, fp
 801c012:	2200      	movs	r2, #0
 801c014:	4548      	cmp	r0, r9
 801c016:	da52      	bge.n	801c0be <__kernel_rem_pio2+0x28e>
 801c018:	2a00      	cmp	r2, #0
 801c01a:	f000 8081 	beq.w	801c120 <__kernel_rem_pio2+0x2f0>
 801c01e:	ab06      	add	r3, sp, #24
 801c020:	3c18      	subs	r4, #24
 801c022:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801c026:	2b00      	cmp	r3, #0
 801c028:	f000 8087 	beq.w	801c13a <__kernel_rem_pio2+0x30a>
 801c02c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801c030:	4620      	mov	r0, r4
 801c032:	f000 fa6d 	bl	801c510 <scalbn>
 801c036:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c03a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801c148 <__kernel_rem_pio2+0x318>
 801c03e:	a96a      	add	r1, sp, #424	; 0x1a8
 801c040:	f103 0208 	add.w	r2, r3, #8
 801c044:	1888      	adds	r0, r1, r2
 801c046:	4659      	mov	r1, fp
 801c048:	2900      	cmp	r1, #0
 801c04a:	f280 80b7 	bge.w	801c1bc <__kernel_rem_pio2+0x38c>
 801c04e:	4659      	mov	r1, fp
 801c050:	2900      	cmp	r1, #0
 801c052:	f2c0 80d5 	blt.w	801c200 <__kernel_rem_pio2+0x3d0>
 801c056:	a86a      	add	r0, sp, #424	; 0x1a8
 801c058:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801c05c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801c140 <__kernel_rem_pio2+0x310>
 801c060:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801c15c <__kernel_rem_pio2+0x32c>
 801c064:	2400      	movs	r4, #0
 801c066:	ebab 0001 	sub.w	r0, fp, r1
 801c06a:	e0be      	b.n	801c1ea <__kernel_rem_pio2+0x3ba>
 801c06c:	2602      	movs	r6, #2
 801c06e:	e787      	b.n	801bf80 <__kernel_rem_pio2+0x150>
 801c070:	f8db 2000 	ldr.w	r2, [fp]
 801c074:	b958      	cbnz	r0, 801c08e <__kernel_rem_pio2+0x25e>
 801c076:	b122      	cbz	r2, 801c082 <__kernel_rem_pio2+0x252>
 801c078:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801c07c:	f8cb 2000 	str.w	r2, [fp]
 801c080:	2201      	movs	r2, #1
 801c082:	f10c 0c01 	add.w	ip, ip, #1
 801c086:	f10b 0b04 	add.w	fp, fp, #4
 801c08a:	4610      	mov	r0, r2
 801c08c:	e77f      	b.n	801bf8e <__kernel_rem_pio2+0x15e>
 801c08e:	ebae 0202 	sub.w	r2, lr, r2
 801c092:	f8cb 2000 	str.w	r2, [fp]
 801c096:	4602      	mov	r2, r0
 801c098:	e7f3      	b.n	801c082 <__kernel_rem_pio2+0x252>
 801c09a:	f105 3cff 	add.w	ip, r5, #4294967295
 801c09e:	ab06      	add	r3, sp, #24
 801c0a0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801c0a4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801c0a8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801c0ac:	e778      	b.n	801bfa0 <__kernel_rem_pio2+0x170>
 801c0ae:	f105 3cff 	add.w	ip, r5, #4294967295
 801c0b2:	ab06      	add	r3, sp, #24
 801c0b4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801c0b8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801c0bc:	e7f4      	b.n	801c0a8 <__kernel_rem_pio2+0x278>
 801c0be:	ab06      	add	r3, sp, #24
 801c0c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801c0c4:	3801      	subs	r0, #1
 801c0c6:	431a      	orrs	r2, r3
 801c0c8:	e7a4      	b.n	801c014 <__kernel_rem_pio2+0x1e4>
 801c0ca:	f10c 0c01 	add.w	ip, ip, #1
 801c0ce:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801c0d2:	2800      	cmp	r0, #0
 801c0d4:	d0f9      	beq.n	801c0ca <__kernel_rem_pio2+0x29a>
 801c0d6:	9b04      	ldr	r3, [sp, #16]
 801c0d8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801c0dc:	eb0d 0203 	add.w	r2, sp, r3
 801c0e0:	9b01      	ldr	r3, [sp, #4]
 801c0e2:	18e8      	adds	r0, r5, r3
 801c0e4:	ab1a      	add	r3, sp, #104	; 0x68
 801c0e6:	1c6e      	adds	r6, r5, #1
 801c0e8:	3a98      	subs	r2, #152	; 0x98
 801c0ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801c0ee:	4465      	add	r5, ip
 801c0f0:	42b5      	cmp	r5, r6
 801c0f2:	f6ff af05 	blt.w	801bf00 <__kernel_rem_pio2+0xd0>
 801c0f6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801c0fa:	f8dd e008 	ldr.w	lr, [sp, #8]
 801c0fe:	ee07 3a90 	vmov	s15, r3
 801c102:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c106:	f04f 0c00 	mov.w	ip, #0
 801c10a:	eca0 7b02 	vstmia	r0!, {d7}
 801c10e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801c140 <__kernel_rem_pio2+0x310>
 801c112:	4680      	mov	r8, r0
 801c114:	458c      	cmp	ip, r1
 801c116:	dd07      	ble.n	801c128 <__kernel_rem_pio2+0x2f8>
 801c118:	eca2 7b02 	vstmia	r2!, {d7}
 801c11c:	3601      	adds	r6, #1
 801c11e:	e7e7      	b.n	801c0f0 <__kernel_rem_pio2+0x2c0>
 801c120:	9a03      	ldr	r2, [sp, #12]
 801c122:	f04f 0c01 	mov.w	ip, #1
 801c126:	e7d2      	b.n	801c0ce <__kernel_rem_pio2+0x29e>
 801c128:	ecbe 5b02 	vldmia	lr!, {d5}
 801c12c:	ed38 6b02 	vldmdb	r8!, {d6}
 801c130:	f10c 0c01 	add.w	ip, ip, #1
 801c134:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c138:	e7ec      	b.n	801c114 <__kernel_rem_pio2+0x2e4>
 801c13a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c13e:	e76e      	b.n	801c01e <__kernel_rem_pio2+0x1ee>
	...
 801c14c:	3e700000 	.word	0x3e700000
 801c150:	00000000 	.word	0x00000000
 801c154:	41700000 	.word	0x41700000
 801c158:	0801cea0 	.word	0x0801cea0
 801c15c:	0801ce60 	.word	0x0801ce60
 801c160:	4260      	negs	r0, r4
 801c162:	eeb0 0b48 	vmov.f64	d0, d8
 801c166:	f000 f9d3 	bl	801c510 <scalbn>
 801c16a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801c348 <__kernel_rem_pio2+0x518>
 801c16e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801c172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c176:	db18      	blt.n	801c1aa <__kernel_rem_pio2+0x37a>
 801c178:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801c350 <__kernel_rem_pio2+0x520>
 801c17c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801c180:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801c184:	aa06      	add	r2, sp, #24
 801c186:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801c18a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801c18e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c192:	f105 0b01 	add.w	fp, r5, #1
 801c196:	ee10 3a10 	vmov	r3, s0
 801c19a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801c19e:	ee17 3a10 	vmov	r3, s14
 801c1a2:	3418      	adds	r4, #24
 801c1a4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801c1a8:	e740      	b.n	801c02c <__kernel_rem_pio2+0x1fc>
 801c1aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c1ae:	aa06      	add	r2, sp, #24
 801c1b0:	ee10 3a10 	vmov	r3, s0
 801c1b4:	46ab      	mov	fp, r5
 801c1b6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801c1ba:	e737      	b.n	801c02c <__kernel_rem_pio2+0x1fc>
 801c1bc:	ac06      	add	r4, sp, #24
 801c1be:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801c1c2:	9401      	str	r4, [sp, #4]
 801c1c4:	ee07 4a90 	vmov	s15, r4
 801c1c8:	3901      	subs	r1, #1
 801c1ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c1ce:	ee27 7b00 	vmul.f64	d7, d7, d0
 801c1d2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c1d6:	ed20 7b02 	vstmdb	r0!, {d7}
 801c1da:	e735      	b.n	801c048 <__kernel_rem_pio2+0x218>
 801c1dc:	ecbc 5b02 	vldmia	ip!, {d5}
 801c1e0:	ecb5 6b02 	vldmia	r5!, {d6}
 801c1e4:	3401      	adds	r4, #1
 801c1e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c1ea:	454c      	cmp	r4, r9
 801c1ec:	dc01      	bgt.n	801c1f2 <__kernel_rem_pio2+0x3c2>
 801c1ee:	4284      	cmp	r4, r0
 801c1f0:	ddf4      	ble.n	801c1dc <__kernel_rem_pio2+0x3ac>
 801c1f2:	ac42      	add	r4, sp, #264	; 0x108
 801c1f4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801c1f8:	ed80 7b00 	vstr	d7, [r0]
 801c1fc:	3901      	subs	r1, #1
 801c1fe:	e727      	b.n	801c050 <__kernel_rem_pio2+0x220>
 801c200:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801c202:	2902      	cmp	r1, #2
 801c204:	dc0a      	bgt.n	801c21c <__kernel_rem_pio2+0x3ec>
 801c206:	2900      	cmp	r1, #0
 801c208:	dc2c      	bgt.n	801c264 <__kernel_rem_pio2+0x434>
 801c20a:	d045      	beq.n	801c298 <__kernel_rem_pio2+0x468>
 801c20c:	f008 0007 	and.w	r0, r8, #7
 801c210:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801c214:	ecbd 8b06 	vpop	{d8-d10}
 801c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c21c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801c21e:	2a03      	cmp	r2, #3
 801c220:	d1f4      	bne.n	801c20c <__kernel_rem_pio2+0x3dc>
 801c222:	aa42      	add	r2, sp, #264	; 0x108
 801c224:	4413      	add	r3, r2
 801c226:	461a      	mov	r2, r3
 801c228:	4619      	mov	r1, r3
 801c22a:	4658      	mov	r0, fp
 801c22c:	2800      	cmp	r0, #0
 801c22e:	f1a1 0108 	sub.w	r1, r1, #8
 801c232:	dc54      	bgt.n	801c2de <__kernel_rem_pio2+0x4ae>
 801c234:	4659      	mov	r1, fp
 801c236:	2901      	cmp	r1, #1
 801c238:	f1a2 0208 	sub.w	r2, r2, #8
 801c23c:	dc5f      	bgt.n	801c2fe <__kernel_rem_pio2+0x4ce>
 801c23e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801c358 <__kernel_rem_pio2+0x528>
 801c242:	3308      	adds	r3, #8
 801c244:	f1bb 0f01 	cmp.w	fp, #1
 801c248:	dc69      	bgt.n	801c31e <__kernel_rem_pio2+0x4ee>
 801c24a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801c24e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801c252:	2e00      	cmp	r6, #0
 801c254:	d16a      	bne.n	801c32c <__kernel_rem_pio2+0x4fc>
 801c256:	ed87 5b00 	vstr	d5, [r7]
 801c25a:	ed87 6b02 	vstr	d6, [r7, #8]
 801c25e:	ed87 7b04 	vstr	d7, [r7, #16]
 801c262:	e7d3      	b.n	801c20c <__kernel_rem_pio2+0x3dc>
 801c264:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801c358 <__kernel_rem_pio2+0x528>
 801c268:	ab42      	add	r3, sp, #264	; 0x108
 801c26a:	441a      	add	r2, r3
 801c26c:	465b      	mov	r3, fp
 801c26e:	2b00      	cmp	r3, #0
 801c270:	da26      	bge.n	801c2c0 <__kernel_rem_pio2+0x490>
 801c272:	b35e      	cbz	r6, 801c2cc <__kernel_rem_pio2+0x49c>
 801c274:	eeb1 7b46 	vneg.f64	d7, d6
 801c278:	ed87 7b00 	vstr	d7, [r7]
 801c27c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801c280:	aa44      	add	r2, sp, #272	; 0x110
 801c282:	2301      	movs	r3, #1
 801c284:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c288:	459b      	cmp	fp, r3
 801c28a:	da22      	bge.n	801c2d2 <__kernel_rem_pio2+0x4a2>
 801c28c:	b10e      	cbz	r6, 801c292 <__kernel_rem_pio2+0x462>
 801c28e:	eeb1 7b47 	vneg.f64	d7, d7
 801c292:	ed87 7b02 	vstr	d7, [r7, #8]
 801c296:	e7b9      	b.n	801c20c <__kernel_rem_pio2+0x3dc>
 801c298:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801c358 <__kernel_rem_pio2+0x528>
 801c29c:	ab42      	add	r3, sp, #264	; 0x108
 801c29e:	441a      	add	r2, r3
 801c2a0:	f1bb 0f00 	cmp.w	fp, #0
 801c2a4:	da05      	bge.n	801c2b2 <__kernel_rem_pio2+0x482>
 801c2a6:	b10e      	cbz	r6, 801c2ac <__kernel_rem_pio2+0x47c>
 801c2a8:	eeb1 7b47 	vneg.f64	d7, d7
 801c2ac:	ed87 7b00 	vstr	d7, [r7]
 801c2b0:	e7ac      	b.n	801c20c <__kernel_rem_pio2+0x3dc>
 801c2b2:	ed32 6b02 	vldmdb	r2!, {d6}
 801c2b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c2be:	e7ef      	b.n	801c2a0 <__kernel_rem_pio2+0x470>
 801c2c0:	ed32 7b02 	vldmdb	r2!, {d7}
 801c2c4:	3b01      	subs	r3, #1
 801c2c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 801c2ca:	e7d0      	b.n	801c26e <__kernel_rem_pio2+0x43e>
 801c2cc:	eeb0 7b46 	vmov.f64	d7, d6
 801c2d0:	e7d2      	b.n	801c278 <__kernel_rem_pio2+0x448>
 801c2d2:	ecb2 6b02 	vldmia	r2!, {d6}
 801c2d6:	3301      	adds	r3, #1
 801c2d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c2dc:	e7d4      	b.n	801c288 <__kernel_rem_pio2+0x458>
 801c2de:	ed91 7b00 	vldr	d7, [r1]
 801c2e2:	ed91 5b02 	vldr	d5, [r1, #8]
 801c2e6:	3801      	subs	r0, #1
 801c2e8:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c2ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c2f0:	ed81 6b00 	vstr	d6, [r1]
 801c2f4:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c2f8:	ed81 7b02 	vstr	d7, [r1, #8]
 801c2fc:	e796      	b.n	801c22c <__kernel_rem_pio2+0x3fc>
 801c2fe:	ed92 7b00 	vldr	d7, [r2]
 801c302:	ed92 5b02 	vldr	d5, [r2, #8]
 801c306:	3901      	subs	r1, #1
 801c308:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c30c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c310:	ed82 6b00 	vstr	d6, [r2]
 801c314:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c318:	ed82 7b02 	vstr	d7, [r2, #8]
 801c31c:	e78b      	b.n	801c236 <__kernel_rem_pio2+0x406>
 801c31e:	ed33 6b02 	vldmdb	r3!, {d6}
 801c322:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c326:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c32a:	e78b      	b.n	801c244 <__kernel_rem_pio2+0x414>
 801c32c:	eeb1 5b45 	vneg.f64	d5, d5
 801c330:	eeb1 6b46 	vneg.f64	d6, d6
 801c334:	ed87 5b00 	vstr	d5, [r7]
 801c338:	eeb1 7b47 	vneg.f64	d7, d7
 801c33c:	ed87 6b02 	vstr	d6, [r7, #8]
 801c340:	e78d      	b.n	801c25e <__kernel_rem_pio2+0x42e>
 801c342:	bf00      	nop
 801c344:	f3af 8000 	nop.w
 801c348:	00000000 	.word	0x00000000
 801c34c:	41700000 	.word	0x41700000
 801c350:	00000000 	.word	0x00000000
 801c354:	3e700000 	.word	0x3e700000
	...

0801c360 <__kernel_sin>:
 801c360:	ee10 3a90 	vmov	r3, s1
 801c364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c368:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801c36c:	da04      	bge.n	801c378 <__kernel_sin+0x18>
 801c36e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801c372:	ee17 3a90 	vmov	r3, s15
 801c376:	b35b      	cbz	r3, 801c3d0 <__kernel_sin+0x70>
 801c378:	ee20 6b00 	vmul.f64	d6, d0, d0
 801c37c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801c380:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801c3d8 <__kernel_sin+0x78>
 801c384:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801c3e0 <__kernel_sin+0x80>
 801c388:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c38c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801c3e8 <__kernel_sin+0x88>
 801c390:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c394:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801c3f0 <__kernel_sin+0x90>
 801c398:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c39c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801c3f8 <__kernel_sin+0x98>
 801c3a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c3a4:	b930      	cbnz	r0, 801c3b4 <__kernel_sin+0x54>
 801c3a6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801c400 <__kernel_sin+0xa0>
 801c3aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c3ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 801c3b2:	4770      	bx	lr
 801c3b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801c3b8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801c3bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 801c3c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801c3c4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801c408 <__kernel_sin+0xa8>
 801c3c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 801c3cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 801c3d0:	4770      	bx	lr
 801c3d2:	bf00      	nop
 801c3d4:	f3af 8000 	nop.w
 801c3d8:	5acfd57c 	.word	0x5acfd57c
 801c3dc:	3de5d93a 	.word	0x3de5d93a
 801c3e0:	8a2b9ceb 	.word	0x8a2b9ceb
 801c3e4:	be5ae5e6 	.word	0xbe5ae5e6
 801c3e8:	57b1fe7d 	.word	0x57b1fe7d
 801c3ec:	3ec71de3 	.word	0x3ec71de3
 801c3f0:	19c161d5 	.word	0x19c161d5
 801c3f4:	bf2a01a0 	.word	0xbf2a01a0
 801c3f8:	1110f8a6 	.word	0x1110f8a6
 801c3fc:	3f811111 	.word	0x3f811111
 801c400:	55555549 	.word	0x55555549
 801c404:	bfc55555 	.word	0xbfc55555
 801c408:	55555549 	.word	0x55555549
 801c40c:	3fc55555 	.word	0x3fc55555

0801c410 <fabs>:
 801c410:	ec51 0b10 	vmov	r0, r1, d0
 801c414:	ee10 2a10 	vmov	r2, s0
 801c418:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c41c:	ec43 2b10 	vmov	d0, r2, r3
 801c420:	4770      	bx	lr
 801c422:	0000      	movs	r0, r0
 801c424:	0000      	movs	r0, r0
	...

0801c428 <floor>:
 801c428:	ee10 1a90 	vmov	r1, s1
 801c42c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c430:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801c434:	2b13      	cmp	r3, #19
 801c436:	b530      	push	{r4, r5, lr}
 801c438:	ee10 0a10 	vmov	r0, s0
 801c43c:	ee10 5a10 	vmov	r5, s0
 801c440:	dc31      	bgt.n	801c4a6 <floor+0x7e>
 801c442:	2b00      	cmp	r3, #0
 801c444:	da15      	bge.n	801c472 <floor+0x4a>
 801c446:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801c500 <floor+0xd8>
 801c44a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c44e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c456:	dd07      	ble.n	801c468 <floor+0x40>
 801c458:	2900      	cmp	r1, #0
 801c45a:	da4e      	bge.n	801c4fa <floor+0xd2>
 801c45c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c460:	4318      	orrs	r0, r3
 801c462:	d001      	beq.n	801c468 <floor+0x40>
 801c464:	4928      	ldr	r1, [pc, #160]	; (801c508 <floor+0xe0>)
 801c466:	2000      	movs	r0, #0
 801c468:	460b      	mov	r3, r1
 801c46a:	4602      	mov	r2, r0
 801c46c:	ec43 2b10 	vmov	d0, r2, r3
 801c470:	e020      	b.n	801c4b4 <floor+0x8c>
 801c472:	4a26      	ldr	r2, [pc, #152]	; (801c50c <floor+0xe4>)
 801c474:	411a      	asrs	r2, r3
 801c476:	ea01 0402 	and.w	r4, r1, r2
 801c47a:	4304      	orrs	r4, r0
 801c47c:	d01a      	beq.n	801c4b4 <floor+0x8c>
 801c47e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801c500 <floor+0xd8>
 801c482:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c486:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c48e:	ddeb      	ble.n	801c468 <floor+0x40>
 801c490:	2900      	cmp	r1, #0
 801c492:	bfbe      	ittt	lt
 801c494:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801c498:	fa40 f303 	asrlt.w	r3, r0, r3
 801c49c:	18c9      	addlt	r1, r1, r3
 801c49e:	ea21 0102 	bic.w	r1, r1, r2
 801c4a2:	2000      	movs	r0, #0
 801c4a4:	e7e0      	b.n	801c468 <floor+0x40>
 801c4a6:	2b33      	cmp	r3, #51	; 0x33
 801c4a8:	dd05      	ble.n	801c4b6 <floor+0x8e>
 801c4aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c4ae:	d101      	bne.n	801c4b4 <floor+0x8c>
 801c4b0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c4b4:	bd30      	pop	{r4, r5, pc}
 801c4b6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801c4ba:	f04f 32ff 	mov.w	r2, #4294967295
 801c4be:	40e2      	lsrs	r2, r4
 801c4c0:	4202      	tst	r2, r0
 801c4c2:	d0f7      	beq.n	801c4b4 <floor+0x8c>
 801c4c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801c500 <floor+0xd8>
 801c4c8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c4cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4d4:	ddc8      	ble.n	801c468 <floor+0x40>
 801c4d6:	2900      	cmp	r1, #0
 801c4d8:	da02      	bge.n	801c4e0 <floor+0xb8>
 801c4da:	2b14      	cmp	r3, #20
 801c4dc:	d103      	bne.n	801c4e6 <floor+0xbe>
 801c4de:	3101      	adds	r1, #1
 801c4e0:	ea20 0002 	bic.w	r0, r0, r2
 801c4e4:	e7c0      	b.n	801c468 <floor+0x40>
 801c4e6:	2401      	movs	r4, #1
 801c4e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c4ec:	fa04 f303 	lsl.w	r3, r4, r3
 801c4f0:	4418      	add	r0, r3
 801c4f2:	42a8      	cmp	r0, r5
 801c4f4:	bf38      	it	cc
 801c4f6:	1909      	addcc	r1, r1, r4
 801c4f8:	e7f2      	b.n	801c4e0 <floor+0xb8>
 801c4fa:	2000      	movs	r0, #0
 801c4fc:	4601      	mov	r1, r0
 801c4fe:	e7b3      	b.n	801c468 <floor+0x40>
 801c500:	8800759c 	.word	0x8800759c
 801c504:	7e37e43c 	.word	0x7e37e43c
 801c508:	bff00000 	.word	0xbff00000
 801c50c:	000fffff 	.word	0x000fffff

0801c510 <scalbn>:
 801c510:	ee10 1a90 	vmov	r1, s1
 801c514:	b510      	push	{r4, lr}
 801c516:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801c51a:	b98c      	cbnz	r4, 801c540 <scalbn+0x30>
 801c51c:	ee10 3a10 	vmov	r3, s0
 801c520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c524:	430b      	orrs	r3, r1
 801c526:	d011      	beq.n	801c54c <scalbn+0x3c>
 801c528:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801c5f0 <scalbn+0xe0>
 801c52c:	4b3c      	ldr	r3, [pc, #240]	; (801c620 <scalbn+0x110>)
 801c52e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c532:	4298      	cmp	r0, r3
 801c534:	da0b      	bge.n	801c54e <scalbn+0x3e>
 801c536:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801c5f8 <scalbn+0xe8>
 801c53a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c53e:	e005      	b.n	801c54c <scalbn+0x3c>
 801c540:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801c544:	429c      	cmp	r4, r3
 801c546:	d107      	bne.n	801c558 <scalbn+0x48>
 801c548:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c54c:	bd10      	pop	{r4, pc}
 801c54e:	ee10 1a90 	vmov	r1, s1
 801c552:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801c556:	3c36      	subs	r4, #54	; 0x36
 801c558:	4404      	add	r4, r0
 801c55a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801c55e:	429c      	cmp	r4, r3
 801c560:	dd0d      	ble.n	801c57e <scalbn+0x6e>
 801c562:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801c600 <scalbn+0xf0>
 801c566:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801c608 <scalbn+0xf8>
 801c56a:	eeb0 6b47 	vmov.f64	d6, d7
 801c56e:	ee10 3a90 	vmov	r3, s1
 801c572:	2b00      	cmp	r3, #0
 801c574:	fe27 7b05 	vselge.f64	d7, d7, d5
 801c578:	ee27 0b06 	vmul.f64	d0, d7, d6
 801c57c:	e7e6      	b.n	801c54c <scalbn+0x3c>
 801c57e:	2c00      	cmp	r4, #0
 801c580:	dd0a      	ble.n	801c598 <scalbn+0x88>
 801c582:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801c586:	ec53 2b10 	vmov	r2, r3, d0
 801c58a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c58e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801c592:	ec43 2b10 	vmov	d0, r2, r3
 801c596:	e7d9      	b.n	801c54c <scalbn+0x3c>
 801c598:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801c59c:	da19      	bge.n	801c5d2 <scalbn+0xc2>
 801c59e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c5a2:	4298      	cmp	r0, r3
 801c5a4:	ee10 3a90 	vmov	r3, s1
 801c5a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c5ac:	dd09      	ble.n	801c5c2 <scalbn+0xb2>
 801c5ae:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801c600 <scalbn+0xf0>
 801c5b2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801c608 <scalbn+0xf8>
 801c5b6:	eeb0 7b40 	vmov.f64	d7, d0
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801c5c0:	e7bb      	b.n	801c53a <scalbn+0x2a>
 801c5c2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801c5f8 <scalbn+0xe8>
 801c5c6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801c610 <scalbn+0x100>
 801c5ca:	eeb0 7b40 	vmov.f64	d7, d0
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	e7f4      	b.n	801c5bc <scalbn+0xac>
 801c5d2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801c5d6:	ec53 2b10 	vmov	r2, r3, d0
 801c5da:	3436      	adds	r4, #54	; 0x36
 801c5dc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c5e0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801c5e4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801c618 <scalbn+0x108>
 801c5e8:	ec43 2b10 	vmov	d0, r2, r3
 801c5ec:	e7a5      	b.n	801c53a <scalbn+0x2a>
 801c5ee:	bf00      	nop
 801c5f0:	00000000 	.word	0x00000000
 801c5f4:	43500000 	.word	0x43500000
 801c5f8:	c2f8f359 	.word	0xc2f8f359
 801c5fc:	01a56e1f 	.word	0x01a56e1f
 801c600:	8800759c 	.word	0x8800759c
 801c604:	7e37e43c 	.word	0x7e37e43c
 801c608:	8800759c 	.word	0x8800759c
 801c60c:	fe37e43c 	.word	0xfe37e43c
 801c610:	c2f8f359 	.word	0xc2f8f359
 801c614:	81a56e1f 	.word	0x81a56e1f
 801c618:	00000000 	.word	0x00000000
 801c61c:	3c900000 	.word	0x3c900000
 801c620:	ffff3cb0 	.word	0xffff3cb0

0801c624 <_init>:
 801c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c626:	bf00      	nop
 801c628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c62a:	bc08      	pop	{r3}
 801c62c:	469e      	mov	lr, r3
 801c62e:	4770      	bx	lr

0801c630 <_fini>:
 801c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c632:	bf00      	nop
 801c634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c636:	bc08      	pop	{r3}
 801c638:	469e      	mov	lr, r3
 801c63a:	4770      	bx	lr
