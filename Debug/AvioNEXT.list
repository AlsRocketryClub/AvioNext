
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f148  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  0801f418  0801f418  0002f418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802001c  0802001c  0003001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020024  08020024  00030024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020028  08020028  00030028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0802002c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000322c  240002d4  08020300  000402d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003500  08020300  00043500  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a2d3  00000000  00000000  00040302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006324  00000000  00000000  0007a5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00080900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b40  00000000  00000000  000836b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba48  00000000  00000000  000861f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003de88  00000000  00000000  00091c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f9ec  00000000  00000000  000cfac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024f4ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000dae0  00000000  00000000  0024f4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f400 	.word	0x0801f400

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801f400 	.word	0x0801f400

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9ac 	b.w	8000ac8 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	4604      	mov	r4, r0
 8000800:	468e      	mov	lr, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d14d      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000806:	428a      	cmp	r2, r1
 8000808:	4694      	mov	ip, r2
 800080a:	d969      	bls.n	80008e0 <__udivmoddi4+0xe8>
 800080c:	fab2 f282 	clz	r2, r2
 8000810:	b152      	cbz	r2, 8000828 <__udivmoddi4+0x30>
 8000812:	fa01 f302 	lsl.w	r3, r1, r2
 8000816:	f1c2 0120 	rsb	r1, r2, #32
 800081a:	fa20 f101 	lsr.w	r1, r0, r1
 800081e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000822:	ea41 0e03 	orr.w	lr, r1, r3
 8000826:	4094      	lsls	r4, r2
 8000828:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800082c:	0c21      	lsrs	r1, r4, #16
 800082e:	fbbe f6f8 	udiv	r6, lr, r8
 8000832:	fa1f f78c 	uxth.w	r7, ip
 8000836:	fb08 e316 	mls	r3, r8, r6, lr
 800083a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800083e:	fb06 f107 	mul.w	r1, r6, r7
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f106 30ff 	add.w	r0, r6, #4294967295
 800084e:	f080 811f 	bcs.w	8000a90 <__udivmoddi4+0x298>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 811c 	bls.w	8000a90 <__udivmoddi4+0x298>
 8000858:	3e02      	subs	r6, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb3 f0f8 	udiv	r0, r3, r8
 8000864:	fb08 3310 	mls	r3, r8, r0, r3
 8000868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086c:	fb00 f707 	mul.w	r7, r0, r7
 8000870:	42a7      	cmp	r7, r4
 8000872:	d90a      	bls.n	800088a <__udivmoddi4+0x92>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 33ff 	add.w	r3, r0, #4294967295
 800087c:	f080 810a 	bcs.w	8000a94 <__udivmoddi4+0x29c>
 8000880:	42a7      	cmp	r7, r4
 8000882:	f240 8107 	bls.w	8000a94 <__udivmoddi4+0x29c>
 8000886:	4464      	add	r4, ip
 8000888:	3802      	subs	r0, #2
 800088a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800088e:	1be4      	subs	r4, r4, r7
 8000890:	2600      	movs	r6, #0
 8000892:	b11d      	cbz	r5, 800089c <__udivmoddi4+0xa4>
 8000894:	40d4      	lsrs	r4, r2
 8000896:	2300      	movs	r3, #0
 8000898:	e9c5 4300 	strd	r4, r3, [r5]
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0xc2>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	f000 80ef 	beq.w	8000a8a <__udivmoddi4+0x292>
 80008ac:	2600      	movs	r6, #0
 80008ae:	e9c5 0100 	strd	r0, r1, [r5]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	fab3 f683 	clz	r6, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d14a      	bne.n	8000958 <__udivmoddi4+0x160>
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xd4>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 80f9 	bhi.w	8000abe <__udivmoddi4+0x2c6>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb61 0303 	sbc.w	r3, r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	469e      	mov	lr, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e0      	beq.n	800089c <__udivmoddi4+0xa4>
 80008da:	e9c5 4e00 	strd	r4, lr, [r5]
 80008de:	e7dd      	b.n	800089c <__udivmoddi4+0xa4>
 80008e0:	b902      	cbnz	r2, 80008e4 <__udivmoddi4+0xec>
 80008e2:	deff      	udf	#255	; 0xff
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 8092 	bne.w	8000a12 <__udivmoddi4+0x21a>
 80008ee:	eba1 010c 	sub.w	r1, r1, ip
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2601      	movs	r6, #1
 80008fc:	0c20      	lsrs	r0, r4, #16
 80008fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000902:	fb07 1113 	mls	r1, r7, r3, r1
 8000906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090a:	fb0e f003 	mul.w	r0, lr, r3
 800090e:	4288      	cmp	r0, r1
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x12c>
 8000912:	eb1c 0101 	adds.w	r1, ip, r1
 8000916:	f103 38ff 	add.w	r8, r3, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x12a>
 800091c:	4288      	cmp	r0, r1
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2c0>
 8000922:	4643      	mov	r3, r8
 8000924:	1a09      	subs	r1, r1, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb1 f0f7 	udiv	r0, r1, r7
 800092c:	fb07 1110 	mls	r1, r7, r0, r1
 8000930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x156>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 31ff 	add.w	r1, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x154>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2ca>
 800094c:	4608      	mov	r0, r1
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	e79c      	b.n	8000892 <__udivmoddi4+0x9a>
 8000958:	f1c6 0720 	rsb	r7, r6, #32
 800095c:	40b3      	lsls	r3, r6
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa20 f407 	lsr.w	r4, r0, r7
 800096a:	fa01 f306 	lsl.w	r3, r1, r6
 800096e:	431c      	orrs	r4, r3
 8000970:	40f9      	lsrs	r1, r7
 8000972:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000976:	fa00 f306 	lsl.w	r3, r0, r6
 800097a:	fbb1 f8f9 	udiv	r8, r1, r9
 800097e:	0c20      	lsrs	r0, r4, #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fb09 1118 	mls	r1, r9, r8, r1
 8000988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098c:	fb08 f00e 	mul.w	r0, r8, lr
 8000990:	4288      	cmp	r0, r1
 8000992:	fa02 f206 	lsl.w	r2, r2, r6
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b8>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2bc>
 80009a4:	4288      	cmp	r0, r1
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2bc>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009b8:	fb09 1110 	mls	r1, r9, r0, r1
 80009bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c4:	458e      	cmp	lr, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1e2>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2b4>
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2b4>
 80009d6:	3802      	subs	r0, #2
 80009d8:	4461      	add	r1, ip
 80009da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009de:	fba0 9402 	umull	r9, r4, r0, r2
 80009e2:	eba1 010e 	sub.w	r1, r1, lr
 80009e6:	42a1      	cmp	r1, r4
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46a6      	mov	lr, r4
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x2a4>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x2a0>
 80009f0:	b15d      	cbz	r5, 8000a0a <__udivmoddi4+0x212>
 80009f2:	ebb3 0208 	subs.w	r2, r3, r8
 80009f6:	eb61 010e 	sbc.w	r1, r1, lr
 80009fa:	fa01 f707 	lsl.w	r7, r1, r7
 80009fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000a02:	40f1      	lsrs	r1, r6
 8000a04:	431f      	orrs	r7, r3
 8000a06:	e9c5 7100 	strd	r7, r1, [r5]
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	40d8      	lsrs	r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4301      	orrs	r1, r0
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a30:	fb07 3610 	mls	r6, r7, r0, r3
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	fa04 f402 	lsl.w	r4, r4, r2
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x260>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a50:	429e      	cmp	r6, r3
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	b289      	uxth	r1, r1
 8000a5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a60:	fb07 3316 	mls	r3, r7, r6, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb06 f30e 	mul.w	r3, r6, lr
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x28a>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7e:	3e02      	subs	r6, #2
 8000a80:	4461      	add	r1, ip
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0x104>
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e705      	b.n	800089c <__udivmoddi4+0xa4>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e3      	b.n	800085c <__udivmoddi4+0x64>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6f8      	b.n	800088a <__udivmoddi4+0x92>
 8000a98:	454b      	cmp	r3, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f8>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f8>
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x28a>
 8000aac:	4620      	mov	r0, r4
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1e2>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x260>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b8>
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x12c>
 8000abe:	4630      	mov	r0, r6
 8000ac0:	e709      	b.n	80008d6 <__udivmoddi4+0xde>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x156>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad8:	ed97 7a00 	vldr	s14, [r7]
 8000adc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b4c <setServo+0x80>
 8000ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b50 <setServo+0x84>
 8000ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b54 <setServo+0x88>
 8000af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af8:	ee17 3a90 	vmov	r3, s15
 8000afc:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d81a      	bhi.n	8000b3c <setServo+0x70>
 8000b06:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <setServo+0x40>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b35 	.word	0x08000b35
	case 1:
		TIM4->CCR4 = timerVal;
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b22:	e00c      	b.n	8000b3e <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b2a:	e008      	b.n	8000b3e <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b32:	e004      	b.n	8000b3e <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <setServo+0x8c>)
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b3a:	e000      	b.n	8000b3e <setServo+0x72>

	default:
		break;
 8000b3c:	bf00      	nop
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	42c80000 	.word	0x42c80000
 8000b50:	457a0000 	.word	0x457a0000
 8000b54:	453b8000 	.word	0x453b8000
 8000b58:	40000800 	.word	0x40000800

08000b5c <setLEDs>:

void setLEDs(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
 8000b66:	e181      	b.n	8000e6c <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b68:	4aa1      	ldr	r2, [pc, #644]	; (8000df0 <setLEDs+0x294>)
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	f200 8177 	bhi.w	8000e64 <setLEDs+0x308>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <setLEDs+0x20>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000c3d 	.word	0x08000c3d
 8000b84:	08000ced 	.word	0x08000ced
 8000b88:	08000d9d 	.word	0x08000d9d
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b90:	e042      	b.n	8000c18 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b96:	e039      	b.n	8000c0c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b98:	4996      	ldr	r1, [pc, #600]	; (8000df4 <setLEDs+0x298>)
 8000b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bae:	fa41 f202 	asr.w	r2, r1, r2
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d013      	beq.n	8000be0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bba:	00da      	lsls	r2, r3, #3
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	18d1      	adds	r1, r2, r3
 8000bc0:	4a8b      	ldr	r2, [pc, #556]	; (8000df0 <setLEDs+0x294>)
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
								+ 8] = 60;
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	4a88      	ldr	r2, [pc, #544]	; (8000df8 <setLEDs+0x29c>)
 8000bd8:	213c      	movs	r1, #60	; 0x3c
 8000bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bde:	e012      	b.n	8000c06 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	00da      	lsls	r2, r3, #3
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	18d1      	adds	r1, r2, r3
 8000be8:	4a81      	ldr	r2, [pc, #516]	; (8000df0 <setLEDs+0x294>)
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4413      	add	r3, r2
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
								+ 8] = 30;
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	4a7e      	ldr	r2, [pc, #504]	; (8000df8 <setLEDs+0x29c>)
 8000c00:	211e      	movs	r1, #30
 8000c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	3301      	adds	r3, #1
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	ddc2      	ble.n	8000b98 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	3301      	adds	r3, #1
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	ddb9      	ble.n	8000b92 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c22:	e007      	b.n	8000c34 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c24:	4a74      	ldr	r2, [pc, #464]	; (8000df8 <setLEDs+0x29c>)
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	3301      	adds	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	2bb1      	cmp	r3, #177	; 0xb1
 8000c38:	ddf4      	ble.n	8000c24 <setLEDs+0xc8>
			}
			break;
 8000c3a:	e114      	b.n	8000e66 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c40:	e042      	b.n	8000cc8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	e039      	b.n	8000cbc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c48:	496a      	ldr	r1, [pc, #424]	; (8000df4 <setLEDs+0x298>)
 8000c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c54:	4413      	add	r3, r2
 8000c56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	6a3a      	ldr	r2, [r7, #32]
 8000c5e:	fa41 f202 	asr.w	r2, r1, r2
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	00da      	lsls	r2, r3, #3
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	18d1      	adds	r1, r2, r3
 8000c70:	4a5f      	ldr	r2, [pc, #380]	; (8000df0 <setLEDs+0x294>)
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
								+ 8] = 60;
 8000c84:	3308      	adds	r3, #8
 8000c86:	4a5d      	ldr	r2, [pc, #372]	; (8000dfc <setLEDs+0x2a0>)
 8000c88:	213c      	movs	r1, #60	; 0x3c
 8000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c8e:	e012      	b.n	8000cb6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	00da      	lsls	r2, r3, #3
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	18d1      	adds	r1, r2, r3
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <setLEDs+0x294>)
 8000c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
								+ 8] = 30;
 8000cac:	3308      	adds	r3, #8
 8000cae:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <setLEDs+0x2a0>)
 8000cb0:	211e      	movs	r1, #30
 8000cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	ddc2      	ble.n	8000c48 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddb9      	ble.n	8000c42 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e007      	b.n	8000ce4 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <setLEDs+0x2a0>)
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce8:	ddf4      	ble.n	8000cd4 <setLEDs+0x178>
			}
			break;
 8000cea:	e0bc      	b.n	8000e66 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	e042      	b.n	8000d78 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e039      	b.n	8000d6c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf8:	493e      	ldr	r1, [pc, #248]	; (8000df4 <setLEDs+0x298>)
 8000cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4413      	add	r3, r2
 8000d06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	fa41 f202 	asr.w	r2, r1, r2
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d013      	beq.n	8000d40 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	00da      	lsls	r2, r3, #3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <setLEDs+0x294>)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
								+ 8] = 60;
 8000d34:	3308      	adds	r3, #8
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <setLEDs+0x2a4>)
 8000d38:	213c      	movs	r1, #60	; 0x3c
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d3e:	e012      	b.n	8000d66 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	00da      	lsls	r2, r3, #3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	18d1      	adds	r1, r2, r3
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <setLEDs+0x294>)
 8000d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4413      	add	r3, r2
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
								+ 8] = 30;
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <setLEDs+0x2a4>)
 8000d60:	211e      	movs	r1, #30
 8000d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	ddc2      	ble.n	8000cf8 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	3301      	adds	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	ddb9      	ble.n	8000cf2 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d7e:	2338      	movs	r3, #56	; 0x38
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e007      	b.n	8000d94 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <setLEDs+0x2a4>)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b69      	cmp	r3, #105	; 0x69
 8000d98:	ddf4      	ble.n	8000d84 <setLEDs+0x228>
			}
			break;
 8000d9a:	e064      	b.n	8000e66 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e04e      	b.n	8000e40 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	e045      	b.n	8000e34 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da8:	4912      	ldr	r1, [pc, #72]	; (8000df4 <setLEDs+0x298>)
 8000daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	fa41 f202 	asr.w	r2, r1, r2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d01f      	beq.n	8000e08 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	00da      	lsls	r2, r3, #3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	18d1      	adds	r1, r2, r3
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <setLEDs+0x294>)
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
								+ 8] = 60;
 8000de4:	3308      	adds	r3, #8
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <setLEDs+0x2a8>)
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dee:	e01e      	b.n	8000e2e <setLEDs+0x2d2>
 8000df0:	0801f674 	.word	0x0801f674
 8000df4:	24000bd0 	.word	0x24000bd0
 8000df8:	240002f0 	.word	0x240002f0
 8000dfc:	240005b8 	.word	0x240005b8
 8000e00:	24000880 	.word	0x24000880
 8000e04:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	00da      	lsls	r2, r3, #3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	18d1      	adds	r1, r2, r3
 8000e10:	4a26      	ldr	r2, [pc, #152]	; (8000eac <setLEDs+0x350>)
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
								+ 8] = 30;
 8000e24:	3308      	adds	r3, #8
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <setLEDs+0x354>)
 8000e28:	211e      	movs	r1, #30
 8000e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	ddb6      	ble.n	8000da8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	ddad      	ble.n	8000da2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e46:	2338      	movs	r3, #56	; 0x38
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e007      	b.n	8000e5c <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <setLEDs+0x354>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2100      	movs	r1, #0
 8000e52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b69      	cmp	r3, #105	; 0x69
 8000e60:	ddf4      	ble.n	8000e4c <setLEDs+0x2f0>
			}
			break;
 8000e62:	e000      	b.n	8000e66 <setLEDs+0x30a>
		default:
			break;
 8000e64:	bf00      	nop
			i++) {
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	f77f ae7a 	ble.w	8000b68 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e74:	23b2      	movs	r3, #178	; 0xb2
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <setLEDs+0x358>)
 8000e78:	210c      	movs	r1, #12
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <setLEDs+0x35c>)
 8000e7c:	f00f fb54 	bl	8010528 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e80:	23b2      	movs	r3, #178	; 0xb2
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <setLEDs+0x360>)
 8000e84:	2108      	movs	r1, #8
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <setLEDs+0x364>)
 8000e88:	f00f fb4e 	bl	8010528 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e8c:	236a      	movs	r3, #106	; 0x6a
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <setLEDs+0x368>)
 8000e90:	2104      	movs	r1, #4
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <setLEDs+0x36c>)
 8000e94:	f00f fb48 	bl	8010528 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e98:	236a      	movs	r3, #106	; 0x6a
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <setLEDs+0x354>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <setLEDs+0x36c>)
 8000ea0:	f00f fb42 	bl	8010528 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000ea4:	bf00      	nop
 8000ea6:	3738      	adds	r7, #56	; 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0801f674 	.word	0x0801f674
 8000eb0:	24000a28 	.word	0x24000a28
 8000eb4:	240002f0 	.word	0x240002f0
 8000eb8:	24001234 	.word	0x24001234
 8000ebc:	240005b8 	.word	0x240005b8
 8000ec0:	24001150 	.word	0x24001150
 8000ec4:	24000880 	.word	0x24000880
 8000ec8:	2400119c 	.word	0x2400119c

08000ecc <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoRA_Read_Register+0x48>)
 8000ede:	f007 ff47 	bl	8008d70 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000ee2:	1df9      	adds	r1, r7, #7
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoRA_Read_Register+0x4c>)
 8000eea:	f00e fcdd 	bl	800f8a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000eee:	f107 010f 	add.w	r1, r7, #15
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <LoRA_Read_Register+0x4c>)
 8000ef8:	f00e fed2 	bl	800fca0 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <LoRA_Read_Register+0x48>)
 8000f04:	f007 ff34 	bl	8008d70 <HAL_GPIO_WritePin>

	return reg_value;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020000 	.word	0x58020000
 8000f18:	240010c8 	.word	0x240010c8

08000f1c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoRA_Write_Register+0x54>)
 8000f3e:	f007 ff17 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f42:	1df9      	adds	r1, r7, #7
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <LoRA_Write_Register+0x58>)
 8000f4a:	f00e fcad 	bl	800f8a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f4e:	1db9      	adds	r1, r7, #6
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <LoRA_Write_Register+0x58>)
 8000f56:	f00e fca7 	bl	800f8a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <LoRA_Write_Register+0x54>)
 8000f62:	f007 ff05 	bl	8008d70 <HAL_GPIO_WritePin>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58020000 	.word	0x58020000
 8000f74:	240010c8 	.word	0x240010c8

08000f78 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ffcc 	bl	8000f1c <LoRA_Write_Register>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	17c8      	asrs	r0, r1, #31
 8000f94:	460a      	mov	r2, r1
 8000f96:	4603      	mov	r3, r0
 8000f98:	1355      	asrs	r5, r2, #13
 8000f9a:	04d4      	lsls	r4, r2, #19
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <LoRA_set_frequency+0x78>)
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	4629      	mov	r1, r5
 8000fa6:	f7ff fbd7 	bl	8000758 <__aeabi_uldivmod>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	0c02      	lsrs	r2, r0, #16
 8000fc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	b2d3      	uxtb	r3, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f7ff ffa6 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	0a02      	lsrs	r2, r0, #8
 8000fde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fe2:	0a0b      	lsrs	r3, r1, #8
 8000fe4:	b2d3      	uxtb	r3, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f7ff ff97 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f7ff ff92 	bl	8000f1c <LoRA_Write_Register>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	01e84800 	.word	0x01e84800

08001004 <LoRA_idle>:

void LoRA_idle() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001008:	2181      	movs	r1, #129	; 0x81
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff86 	bl	8000f1c <LoRA_Write_Register>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 800101e:	231b      	movs	r3, #27
 8001020:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b78      	cmp	r3, #120	; 0x78
 8001026:	d809      	bhi.n	800103c <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	3b2d      	subs	r3, #45	; 0x2d
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <LoRA_setOCP+0x60>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1052      	asrs	r2, r2, #1
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e00b      	b.n	8001054 <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2bf0      	cmp	r3, #240	; 0xf0
 8001040:	d808      	bhi.n	8001054 <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	331e      	adds	r3, #30
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoRA_setOCP+0x60>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	1092      	asrs	r2, r2, #2
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	200b      	movs	r0, #11
 8001066:	f7ff ff59 	bl	8000f1c <LoRA_Write_Register>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	66666667 	.word	0x66666667

08001078 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b11      	cmp	r3, #17
 8001084:	dd0f      	ble.n	80010a6 <LoRA_setTxPower+0x2e>
		if (level > 20) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b14      	cmp	r3, #20
 800108a:	dd01      	ble.n	8001090 <LoRA_setTxPower+0x18>
			level = 20;
 800108c:	2314      	movs	r3, #20
 800108e:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b03      	subs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 8001096:	2187      	movs	r1, #135	; 0x87
 8001098:	204d      	movs	r0, #77	; 0x4d
 800109a:	f7ff ff3f 	bl	8000f1c <LoRA_Write_Register>
		LoRA_setOCP(140);
 800109e:	208c      	movs	r0, #140	; 0x8c
 80010a0:	f7ff ffb8 	bl	8001014 <LoRA_setOCP>
 80010a4:	e00b      	b.n	80010be <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	dc01      	bgt.n	80010b0 <LoRA_setTxPower+0x38>
			level = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 80010b0:	2184      	movs	r1, #132	; 0x84
 80010b2:	204d      	movs	r0, #77	; 0x4d
 80010b4:	f7ff ff32 	bl	8000f1c <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f7ff ffab 	bl	8001014 <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3b02      	subs	r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	2009      	movs	r0, #9
 80010d4:	f7ff ff22 	bl	8000f1c <LoRA_Write_Register>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010e4:	201d      	movs	r0, #29
 80010e6:	f7ff fef1 	bl	8000ecc <LoRA_Read_Register>
 80010ea:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	201d      	movs	r0, #29
 80010f6:	f7ff ff11 	bl	8000f1c <LoRA_Write_Register>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <LoRA_begin>:

void LoRA_begin(long frequency) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2101      	movs	r1, #1
 800110c:	4818      	ldr	r0, [pc, #96]	; (8001170 <LoRA_begin+0x70>)
 800110e:	f007 fe2f 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <LoRA_begin+0x74>)
 800111a:	f007 fe29 	bl	8008d70 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800111e:	2042      	movs	r0, #66	; 0x42
 8001120:	f7ff fed4 	bl	8000ecc <LoRA_Read_Register>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001128:	f7ff ff26 	bl	8000f78 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800112c:	4812      	ldr	r0, [pc, #72]	; (8001178 <LoRA_begin+0x78>)
 800112e:	f7ff ff2b 	bl	8000f88 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	200f      	movs	r0, #15
 8001136:	f7ff fef1 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 800113a:	2100      	movs	r1, #0
 800113c:	200e      	movs	r0, #14
 800113e:	f7ff feed 	bl	8000f1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff fec2 	bl	8000ecc <LoRA_Read_Register>
 8001148:	4603      	mov	r3, r0
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	200c      	movs	r0, #12
 8001154:	f7ff fee2 	bl	8000f1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001158:	2104      	movs	r1, #4
 800115a:	2026      	movs	r0, #38	; 0x26
 800115c:	f7ff fede 	bl	8000f1c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001160:	2011      	movs	r0, #17
 8001162:	f7ff ff89 	bl	8001078 <LoRA_setTxPower>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58020000 	.word	0x58020000
 8001178:	33bca100 	.word	0x33bca100

0800117c <LoRA_beginPacket>:

void LoRA_beginPacket() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001180:	f7ff ffae 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001184:	2100      	movs	r1, #0
 8001186:	200d      	movs	r0, #13
 8001188:	f7ff fec8 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 800118c:	2100      	movs	r1, #0
 800118e:	2022      	movs	r0, #34	; 0x22
 8001190:	f7ff fec4 	bl	8000f1c <LoRA_Write_Register>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <LoRA_endPacket>:

void LoRA_endPacket() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800119e:	2183      	movs	r1, #131	; 0x83
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff febb 	bl	8000f1c <LoRA_Write_Register>

	while ((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80011a6:	bf00      	nop
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff fe8f 	bl	8000ecc <LoRA_Read_Register>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f7      	beq.n	80011a8 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011b8:	2108      	movs	r1, #8
 80011ba:	2012      	movs	r0, #18
 80011bc:	f7ff feae 	bl	8000f1c <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011c0:	2012      	movs	r0, #18
 80011c2:	f7ff fe83 	bl	8000ecc <LoRA_Read_Register>
 80011c6:	4603      	mov	r3, r0
 80011c8:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 80011ca:	f7ff ff89 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	2012      	movs	r0, #18
 80011d6:	f7ff fea1 	bl	8000f1c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <LoRA_endPacket+0x6c>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 80011ee:	2010      	movs	r0, #16
 80011f0:	f7ff fe6c 	bl	8000ecc <LoRA_Read_Register>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4619      	mov	r1, r3
 80011f8:	200d      	movs	r0, #13
 80011fa:	f7ff fe8f 	bl	8000f1c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 80011fe:	f7ff ff01 	bl	8001004 <LoRA_idle>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8001202:	e00d      	b.n	8001220 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fe61 	bl	8000ecc <LoRA_Read_Register>
 800120a:	4603      	mov	r3, r0
 800120c:	2b86      	cmp	r3, #134	; 0x86
 800120e:	d007      	beq.n	8001220 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001210:	2100      	movs	r1, #0
 8001212:	200d      	movs	r0, #13
 8001214:	f7ff fe82 	bl	8000f1c <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001218:	2186      	movs	r1, #134	; 0x86
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fe7e 	bl	8000f1c <LoRA_Write_Register>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LoRA_parsePacket>:

int LoRA_parsePacket() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001232:	2012      	movs	r0, #18
 8001234:	f7ff fe4a 	bl	8000ecc <LoRA_Read_Register>
 8001238:	4603      	mov	r3, r0
 800123a:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800123c:	f7ff ff50 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2012      	movs	r0, #18
 8001248:	f7ff fe68 	bl	8000f1c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d014      	beq.n	8001280 <LoRA_parsePacket+0x58>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10f      	bne.n	8001280 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001260:	2013      	movs	r0, #19
 8001262:	f7ff fe33 	bl	8000ecc <LoRA_Read_Register>
 8001266:	4603      	mov	r3, r0
 8001268:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff fe2e 	bl	8000ecc <LoRA_Read_Register>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	200d      	movs	r0, #13
 8001276:	f7ff fe51 	bl	8000f1c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 800127a:	f7ff fec3 	bl	8001004 <LoRA_idle>
 800127e:	e00d      	b.n	800129c <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fe23 	bl	8000ecc <LoRA_Read_Register>
 8001286:	4603      	mov	r3, r0
 8001288:	2b86      	cmp	r3, #134	; 0x86
 800128a:	d007      	beq.n	800129c <LoRA_parsePacket+0x74>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	200d      	movs	r0, #13
 8001290:	f7ff fe44 	bl	8000f1c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001294:	2186      	movs	r1, #134	; 0x86
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fe40 	bl	8000f1c <LoRA_Write_Register>
	}
	return packetLenght;
 800129c:	687b      	ldr	r3, [r7, #4]

}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 80012ae:	f7ff ff65 	bl	800117c <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e00a      	b.n	80012ce <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fe2a 	bl	8000f1c <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f828 	bl	8000324 <strlen>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8ed      	bhi.n	80012b8 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f821 	bl	8000324 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	2022      	movs	r0, #34	; 0x22
 80012ea:	f7ff fe17 	bl	8000f1c <LoRA_Write_Register>
	LoRA_endPacket();
 80012ee:	f7ff ff53 	bl	8001198 <LoRA_endPacket>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <disarm+0xc4>)
 800130a:	f007 fd31 	bl	8008d70 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2102      	movs	r1, #2
 8001312:	482c      	ldr	r0, [pc, #176]	; (80013c4 <disarm+0xc8>)
 8001314:	f007 fd2c 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131e:	482a      	ldr	r0, [pc, #168]	; (80013c8 <disarm+0xcc>)
 8001320:	f007 fd26 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4827      	ldr	r0, [pc, #156]	; (80013c8 <disarm+0xcc>)
 800132c:	f007 fd20 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <disarm+0xcc>)
 8001338:	f007 fd1a 	bl	8008d70 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2102      	movs	r1, #2
 8001340:	4822      	ldr	r0, [pc, #136]	; (80013cc <disarm+0xd0>)
 8001342:	f007 fd15 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4820      	ldr	r0, [pc, #128]	; (80013d0 <disarm+0xd4>)
 800134e:	f007 fd0f 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	481d      	ldr	r0, [pc, #116]	; (80013d0 <disarm+0xd4>)
 800135a:	f007 fd09 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <disarm+0xd4>)
 8001366:	f007 fd03 	bl	8008d70 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800136a:	210c      	movs	r1, #12
 800136c:	4819      	ldr	r0, [pc, #100]	; (80013d4 <disarm+0xd8>)
 800136e:	f00e ffbf 	bl	80102f0 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8001372:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013d8 <disarm+0xdc>
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fba8 	bl	8000acc <setServo>

	LED_Color_Data[7][0] = 255;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <disarm+0xe0>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <disarm+0xe0>)
 8001384:	2200      	movs	r2, #0
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <disarm+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <disarm+0xe0>)
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <disarm+0xe0>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <disarm+0xe0>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
	setLEDs();
 80013a0:	f7ff fbdc 	bl	8000b5c <setLEDs>

	strcpy(state, "DISARMED");
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <disarm+0xe4>)
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	cb03      	ldmia	r3!, {r0, r1}
 80013ae:	6010      	str	r0, [r2, #0]
 80013b0:	6051      	str	r1, [r2, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	7213      	strb	r3, [r2, #8]
	return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58020000 	.word	0x58020000
 80013c4:	58020400 	.word	0x58020400
 80013c8:	58021400 	.word	0x58021400
 80013cc:	58021800 	.word	0x58021800
 80013d0:	58021000 	.word	0x58021000
 80013d4:	240011e8 	.word	0x240011e8
 80013d8:	00000000 	.word	0x00000000
 80013dc:	24000bd0 	.word	0x24000bd0
 80013e0:	0801f418 	.word	0x0801f418

080013e4 <arm>:

int arm(char *state) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2102      	movs	r1, #2
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <arm+0x50>)
 80013f2:	f007 fcbd 	bl	8008d70 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013f6:	210c      	movs	r1, #12
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <arm+0x54>)
 80013fa:	f00e ff79 	bl	80102f0 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 80013fe:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800143c <arm+0x58>
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fb62 	bl	8000acc <setServo>

	strcpy(state, "ARMED");
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <arm+0x5c>)
 800140c:	6810      	ldr	r0, [r2, #0]
 800140e:	6018      	str	r0, [r3, #0]
 8001410:	8892      	ldrh	r2, [r2, #4]
 8001412:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <arm+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <arm+0x60>)
 800141c:	22ff      	movs	r2, #255	; 0xff
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <arm+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8001426:	f7ff fb99 	bl	8000b5c <setLEDs>
	return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58020000 	.word	0x58020000
 8001438:	240011e8 	.word	0x240011e8
 800143c:	42c80000 	.word	0x42c80000
 8001440:	0801f424 	.word	0x0801f424
 8001444:	24000bd0 	.word	0x24000bd0

08001448 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 8001452:	f7ff fee9 	bl	8001228 <LoRA_parsePacket>
 8001456:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	dc01      	bgt.n	8001464 <recv_packet+0x1c>
			{
		return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e01c      	b.n	800149e <recv_packet+0x56>
	}
	if (packet_length) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d018      	beq.n	800149c <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e00a      	b.n	8001486 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	18d4      	adds	r4, r2, r3
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fd28 	bl	8000ecc <LoRA_Read_Register>
 800147c:	4603      	mov	r3, r0
 800147e:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbf0      	blt.n	8001470 <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		return packet_length;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	e000      	b.n	800149e <recv_packet+0x56>
	} else {
		return 0;
 800149c:	2300      	movs	r3, #0
	}
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}

080014a6 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80014a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	466b      	mov	r3, sp
 80014b2:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe ff35 	bl	8000324 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 80014c2:	8af9      	ldrh	r1, [r7, #22]
 80014c4:	460b      	mov	r3, r1
 80014c6:	3b01      	subs	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	b28b      	uxth	r3, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	4698      	mov	r8, r3
 80014d0:	4691      	mov	r9, r2
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e6:	b28b      	uxth	r3, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	461c      	mov	r4, r3
 80014ec:	4615      	mov	r5, r2
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	00eb      	lsls	r3, r5, #3
 80014f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fc:	00e2      	lsls	r2, r4, #3
 80014fe:	460b      	mov	r3, r1
 8001500:	3307      	adds	r3, #7
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	ebad 0d03 	sub.w	sp, sp, r3
 800150a:	466b      	mov	r3, sp
 800150c:	3300      	adds	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
	LoRA_sendPacket(LoRA_data);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fec8 	bl	80012a6 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001516:	8afb      	ldrh	r3, [r7, #22]
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff ff94 	bl	8001448 <recv_packet>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f7      	beq.n	8001516 <reliable_send_packet+0x70>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7fe fef1 	bl	8000310 <strcmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <reliable_send_packet+0x96>
				LoRA_sendPacket(LoRA_data);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff feb6 	bl	80012a6 <LoRA_sendPacket>
		if (recv_packet(acknowledge, length)) {
 800153a:	e7ec      	b.n	8001516 <reliable_send_packet+0x70>
			} else {
				break;
 800153c:	bf00      	nop
 800153e:	46b5      	mov	sp, r6
			}
		}

		//delay
	}
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800154c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800154c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001550:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 8001554:	b08a      	sub	sp, #40	; 0x28
 8001556:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001558:	f002 fc78 	bl	8003e4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800155c:	f000 fc38 	bl	8001dd0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001560:	f000 fcae 	bl	8001ec0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001564:	f001 fa5a 	bl	8002a1c <MX_GPIO_Init>
	MX_DMA_Init();
 8001568:	f001 f9f8 	bl	800295c <MX_DMA_Init>
	MX_SPI3_Init();
 800156c:	f000 ff2e 	bl	80023cc <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8001570:	f000 fdbe 	bl	80020f0 <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001574:	f001 f9a6 	bl	80028c4 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001578:	f000 fcd4 	bl	8001f24 <MX_ADC1_Init>
	MX_TIM4_Init();
 800157c:	f001 f838 	bl	80025f0 <MX_TIM4_Init>
	MX_ADC3_Init();
 8001580:	f000 fd48 	bl	8002014 <MX_ADC3_Init>
	MX_SPI2_Init();
 8001584:	f000 fecc 	bl	8002320 <MX_SPI2_Init>
	MX_I2C2_Init();
 8001588:	f000 fe16 	bl	80021b8 <MX_I2C2_Init>
	MX_TIM2_Init();
 800158c:	f000 ff74 	bl	8002478 <MX_TIM2_Init>
	MX_TIM5_Init();
 8001590:	f001 f8aa 	bl	80026e8 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001594:	f000 ffc8 	bl	8002528 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8001598:	f018 fe7e 	bl	801a298 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 800159c:	f000 fe6a 	bl	8002274 <MX_SPI1_Init>
	MX_UART4_Init();
 80015a0:	f001 f944 	bl	800282c <MX_UART4_Init>
	MX_FATFS_Init();
 80015a4:	f013 fc96 	bl	8014ed4 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 80015a8:	f000 fe46 	bl	8002238 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 80015ac:	f001 f8f6 	bl	800279c <MX_TIM13_Init>
	MX_TIM14_Init();
 80015b0:	f001 f918 	bl	80027e4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80015b4:	f242 2310 	movw	r3, #8720	; 0x2210
 80015b8:	443b      	add	r3, r7
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fe9e 	bl	80012fc <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80015c0:	4bc0      	ldr	r3, [pc, #768]	; (80018c4 <main+0x378>)
 80015c2:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80015c6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	2201      	movs	r2, #1
 80015ce:	49be      	ldr	r1, [pc, #760]	; (80018c8 <main+0x37c>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f018 f855 	bl	8019680 <f_mount>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f242 225f 	movw	r2, #8799	; 0x225f
 80015dc:	443a      	add	r2, r7
 80015de:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015e0:	210c      	movs	r1, #12
 80015e2:	48ba      	ldr	r0, [pc, #744]	; (80018cc <main+0x380>)
 80015e4:	f00e fe84 	bl	80102f0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2104      	movs	r1, #4
 80015ec:	48b8      	ldr	r0, [pc, #736]	; (80018d0 <main+0x384>)
 80015ee:	f007 fbbf 	bl	8008d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2108      	movs	r1, #8
 80015f6:	48b6      	ldr	r0, [pc, #728]	; (80018d0 <main+0x384>)
 80015f8:	f007 fbba 	bl	8008d70 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 80015fc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001600:	2204      	movs	r2, #4
 8001602:	49b4      	ldr	r1, [pc, #720]	; (80018d4 <main+0x388>)
 8001604:	4618      	mov	r0, r3
 8001606:	f018 f881 	bl	801970c <f_open>
 800160a:	4603      	mov	r3, r0
 800160c:	f242 225f 	movw	r2, #8799	; 0x225f
 8001610:	443a      	add	r2, r7
 8001612:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8001614:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001618:	4618      	mov	r0, r3
 800161a:	f018 fc55 	bl	8019ec8 <f_close>

	LoRA_begin(868000000);
 800161e:	48ae      	ldr	r0, [pc, #696]	; (80018d8 <main+0x38c>)
 8001620:	f7ff fd6e 	bl	8001100 <LoRA_begin>

	int connected = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	f242 2258 	movw	r2, #8792	; 0x2258
 800162a:	443a      	add	r2, r7
 800162c:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	f242 2254 	movw	r2, #8788	; 0x2254
 8001634:	443a      	add	r2, r7
 8001636:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f242 2250 	movw	r2, #8784	; 0x2250
 800163e:	443a      	add	r2, r7
 8001640:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	const int MAX_PACKET_LENGTH = 250;
 8001642:	23fa      	movs	r3, #250	; 0xfa
 8001644:	f242 224c 	movw	r2, #8780	; 0x224c
 8001648:	443a      	add	r2, r7
 800164a:	6013      	str	r3, [r2, #0]
	char buffered_debug_data[MAX_PACKET_LENGTH];
 800164c:	f242 234c 	movw	r3, #8780	; 0x224c
 8001650:	443b      	add	r3, r7
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	f242 2248 	movw	r2, #8776	; 0x2248
 800165a:	443a      	add	r2, r7
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	f242 234c 	movw	r3, #8780	; 0x224c
 8001662:	443b      	add	r3, r7
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	4698      	mov	r8, r3
 800166a:	4691      	mov	r9, r2
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001678:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001680:	f242 234c 	movw	r3, #8780	; 0x224c
 8001684:	443b      	add	r3, r7
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	461c      	mov	r4, r3
 800168c:	4615      	mov	r5, r2
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	00eb      	lsls	r3, r5, #3
 8001698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800169c:	00e2      	lsls	r2, r4, #3
 800169e:	f242 234c 	movw	r3, #8780	; 0x224c
 80016a2:	443b      	add	r3, r7
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3307      	adds	r3, #7
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	ebad 0d03 	sub.w	sp, sp, r3
 80016b0:	466b      	mov	r3, sp
 80016b2:	3300      	adds	r3, #0
 80016b4:	f242 2244 	movw	r2, #8772	; 0x2244
 80016b8:	443a      	add	r2, r7
 80016ba:	6013      	str	r3, [r2, #0]
	char state[50] = "DISARMED";
 80016bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80016c0:	461c      	mov	r4, r3
 80016c2:	4a86      	ldr	r2, [pc, #536]	; (80018dc <main+0x390>)
 80016c4:	f1a4 03f4 	sub.w	r3, r4, #244	; 0xf4
 80016c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ca:	c303      	stmia	r3!, {r0, r1}
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	f1a4 03eb 	sub.w	r3, r4, #235	; 0xeb
 80016d2:	2229      	movs	r2, #41	; 0x29
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f019 fb2a 	bl	801ad30 <memset>
	char command[50];
	char recieved_packet[50];
	char previous_packet[50];
	char response_packet[50];
	int packetId;
	char communication_state[50] = "RECIEVING";
 80016dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80016e0:	f5a3 74fc 	sub.w	r4, r3, #504	; 0x1f8
 80016e4:	4a7e      	ldr	r2, [pc, #504]	; (80018e0 <main+0x394>)
 80016e6:	4623      	mov	r3, r4
 80016e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ea:	c303      	stmia	r3!, {r0, r1}
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	f104 030a 	add.w	r3, r4, #10
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f019 fb1a 	bl	801ad30 <memset>

	uint32_t previousTime = HAL_GetTick();
 80016fc:	f002 fc2c 	bl	8003f58 <HAL_GetTick>
 8001700:	f242 2360 	movw	r3, #8800	; 0x2260
 8001704:	443b      	add	r3, r7
 8001706:	6018      	str	r0, [r3, #0]

	while (1) {
		strcpy(buffered_debug_data, "");
 8001708:	f242 2344 	movw	r3, #8772	; 0x2244
 800170c:	443b      	add	r3, r7
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
		while (1) {
			HAL_ADC_Start(&hadc1); // start the adc
 8001714:	4873      	ldr	r0, [pc, #460]	; (80018e4 <main+0x398>)
 8001716:	f003 f959 	bl	80049cc <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800171a:	2164      	movs	r1, #100	; 0x64
 800171c:	4871      	ldr	r0, [pc, #452]	; (80018e4 <main+0x398>)
 800171e:	f003 fa53 	bl	8004bc8 <HAL_ADC_PollForConversion>

			char debug_data[100];
			uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001722:	4870      	ldr	r0, [pc, #448]	; (80018e4 <main+0x398>)
 8001724:	f003 fb44 	bl	8004db0 <HAL_ADC_GetValue>
 8001728:	4603      	mov	r3, r0
 800172a:	f242 2242 	movw	r2, #8770	; 0x2242
 800172e:	443a      	add	r2, r7
 8001730:	8013      	strh	r3, [r2, #0]

			sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001732:	f002 fc11 	bl	8003f58 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f242 2342 	movw	r3, #8770	; 0x2242
 800173c:	443b      	add	r3, r7
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	4869      	ldr	r0, [pc, #420]	; (80018e8 <main+0x39c>)
 8001742:	f242 2168 	movw	r1, #8808	; 0x2268
 8001746:	4401      	add	r1, r0
 8001748:	19c8      	adds	r0, r1, r7
 800174a:	4968      	ldr	r1, [pc, #416]	; (80018ec <main+0x3a0>)
 800174c:	f01a f946 	bl	801b9dc <siprintf>
			CDC_Transmit_HS(debug_data, strlen(debug_data));
 8001750:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <main+0x39c>)
 8001752:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001756:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800175a:	443b      	add	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fde1 	bl	8000324 <strlen>
 8001762:	4602      	mov	r2, r0
 8001764:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <main+0x39c>)
 8001766:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800176a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800176e:	443b      	add	r3, r7
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f018 fe50 	bl	801a418 <CDC_Transmit_HS>
			FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001778:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800177c:	2232      	movs	r2, #50	; 0x32
 800177e:	4955      	ldr	r1, [pc, #340]	; (80018d4 <main+0x388>)
 8001780:	4618      	mov	r0, r3
 8001782:	f017 ffc3 	bl	801970c <f_open>
 8001786:	4603      	mov	r3, r0
 8001788:	f242 225f 	movw	r2, #8799	; 0x225f
 800178c:	443a      	add	r2, r7
 800178e:	7013      	strb	r3, [r2, #0]
					FA_OPEN_APPEND | FA_WRITE);
			f_puts(debug_data, &Fil);
 8001790:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <main+0x39c>)
 8001796:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800179a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800179e:	443b      	add	r3, r7
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f018 fc31 	bl	801a00a <f_puts>
			f_close(&Fil);
 80017a8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f018 fb8b 	bl	8019ec8 <f_close>

			HAL_ADC_Stop(&hadc1); // stop adc
 80017b2:	484c      	ldr	r0, [pc, #304]	; (80018e4 <main+0x398>)
 80017b4:	f003 f9d4 	bl	8004b60 <HAL_ADC_Stop>

			//buffer data for sending
			if (strlen(debug_data) + strlen(buffered_debug_data) + 1
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <main+0x39c>)
 80017ba:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80017be:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017c2:	443b      	add	r3, r7
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fdad 	bl	8000324 <strlen>
 80017ca:	4604      	mov	r4, r0
 80017cc:	f242 2344 	movw	r3, #8772	; 0x2244
 80017d0:	443b      	add	r3, r7
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	f7fe fda6 	bl	8000324 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	4423      	add	r3, r4
 80017dc:	1c5a      	adds	r2, r3, #1
					> MAX_PACKET_LENGTH) {
 80017de:	f242 234c 	movw	r3, #8780	; 0x224c
 80017e2:	443b      	add	r3, r7
 80017e4:	681b      	ldr	r3, [r3, #0]
			if (strlen(debug_data) + strlen(buffered_debug_data) + 1
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90d      	bls.n	8001806 <main+0x2ba>
				sprintf(buffered_debug_data, "%s\n%s", buffered_debug_data,
						debug_data);
			}
		}

		if (strcmp(communication_state, "RECIEVING") == 0) {
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <main+0x3a4>)
 80017ec:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80017f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017f4:	443b      	add	r3, r7
 80017f6:	493f      	ldr	r1, [pc, #252]	; (80018f4 <main+0x3a8>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd89 	bl	8000310 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <main+0x2de>
 8001804:	e0d5      	b.n	80019b2 <main+0x466>
				sprintf(buffered_debug_data, "%s\n%s", buffered_debug_data,
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <main+0x39c>)
 8001808:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800180c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001810:	443b      	add	r3, r7
 8001812:	f242 2244 	movw	r2, #8772	; 0x2244
 8001816:	443a      	add	r2, r7
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4937      	ldr	r1, [pc, #220]	; (80018f8 <main+0x3ac>)
 800181c:	f242 2044 	movw	r0, #8772	; 0x2244
 8001820:	4438      	add	r0, r7
 8001822:	6800      	ldr	r0, [r0, #0]
 8001824:	f01a f8da 	bl	801b9dc <siprintf>
		while (1) {
 8001828:	e774      	b.n	8001714 <main+0x1c8>
			if (recv_packet(recieved_packet, 50)) {
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <main+0x3b0>)
 800182c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001830:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001834:	443b      	add	r3, r7
 8001836:	2132      	movs	r1, #50	; 0x32
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe05 	bl	8001448 <recv_packet>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808b 	beq.w	800195c <main+0x410>
				previousTime = HAL_GetTick();
 8001846:	f002 fb87 	bl	8003f58 <HAL_GetTick>
 800184a:	f242 2360 	movw	r3, #8800	; 0x2260
 800184e:	443b      	add	r3, r7
 8001850:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <main+0x3b0>)
 8001854:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001858:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800185c:	443b      	add	r3, r7
 800185e:	4928      	ldr	r1, [pc, #160]	; (8001900 <main+0x3b4>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fd55 	bl	8000310 <strcmp>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10f      	bne.n	800188c <main+0x340>
					strcpy(communication_state, "MASTER");
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <main+0x3a4>)
 800186e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001872:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001876:	443b      	add	r3, r7
 8001878:	4a22      	ldr	r2, [pc, #136]	; (8001904 <main+0x3b8>)
 800187a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187e:	6018      	str	r0, [r3, #0]
 8001880:	3304      	adds	r3, #4
 8001882:	8019      	strh	r1, [r3, #0]
 8001884:	3302      	adds	r3, #2
 8001886:	0c0a      	lsrs	r2, r1, #16
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e73d      	b.n	8001708 <main+0x1bc>
				} else if (strcmp(recieved_packet, previous_packet)) {
 800188c:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <main+0x3bc>)
 800188e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001892:	4413      	add	r3, r2
 8001894:	19da      	adds	r2, r3, r7
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <main+0x3b0>)
 8001898:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800189c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80018a0:	443b      	add	r3, r7
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fd33 	bl	8000310 <strcmp>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d02d      	beq.n	800190c <main+0x3c0>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <main+0x3b0>)
 80018b2:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80018b6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80018ba:	443b      	add	r3, r7
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fcf2 	bl	80012a6 <LoRA_sendPacket>
 80018c2:	e721      	b.n	8001708 <main+0x1bc>
 80018c4:	ffffef70 	.word	0xffffef70
 80018c8:	240016a4 	.word	0x240016a4
 80018cc:	240011e8 	.word	0x240011e8
 80018d0:	58021800 	.word	0x58021800
 80018d4:	0801f42c 	.word	0x0801f42c
 80018d8:	33bca100 	.word	0x33bca100
 80018dc:	0801f538 	.word	0x0801f538
 80018e0:	0801f56c 	.word	0x0801f56c
 80018e4:	24000c78 	.word	0x24000c78
 80018e8:	ffffdd9c 	.word	0xffffdd9c
 80018ec:	0801f43c 	.word	0x0801f43c
 80018f0:	ffffde08 	.word	0xffffde08
 80018f4:	0801f444 	.word	0x0801f444
 80018f8:	0801f450 	.word	0x0801f450
 80018fc:	ffffdea4 	.word	0xffffdea4
 8001900:	0801f458 	.word	0x0801f458
 8001904:	0801f45c 	.word	0x0801f45c
 8001908:	ffffde70 	.word	0xffffde70
				} else {
					strcpy(previous_packet, recieved_packet);
 800190c:	4ac5      	ldr	r2, [pc, #788]	; (8001c24 <main+0x6d8>)
 800190e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001912:	4413      	add	r3, r2
 8001914:	19da      	adds	r2, r3, r7
 8001916:	4bc4      	ldr	r3, [pc, #784]	; (8001c28 <main+0x6dc>)
 8001918:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800191c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001920:	443b      	add	r3, r7
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f01a f8bc 	bl	801baa2 <strcpy>
					LoRA_sendPacket(recieved_packet);
 800192a:	4bbe      	ldr	r3, [pc, #760]	; (8001c24 <main+0x6d8>)
 800192c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001930:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001934:	443b      	add	r3, r7
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fcb5 	bl	80012a6 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 800193c:	4ab9      	ldr	r2, [pc, #740]	; (8001c24 <main+0x6d8>)
 800193e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001942:	4413      	add	r3, r2
 8001944:	19da      	adds	r2, r3, r7
 8001946:	4bb9      	ldr	r3, [pc, #740]	; (8001c2c <main+0x6e0>)
 8001948:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800194c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001950:	443b      	add	r3, r7
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f01a f8a4 	bl	801baa2 <strcpy>
 800195a:	e6d5      	b.n	8001708 <main+0x1bc>
				}
			} else if (HAL_GetTick() - previousTime > 1000) {
 800195c:	f002 fafc 	bl	8003f58 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	f242 2360 	movw	r3, #8800	; 0x2260
 8001966:	443b      	add	r3, r7
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001970:	f67f aeca 	bls.w	8001708 <main+0x1bc>
				previousTime = HAL_GetTick();
 8001974:	f002 faf0 	bl	8003f58 <HAL_GetTick>
 8001978:	f242 2360 	movw	r3, #8800	; 0x2260
 800197c:	443b      	add	r3, r7
 800197e:	6018      	str	r0, [r3, #0]
				//give up MASTER
				sprintf(response_packet, "$ %s", state);
 8001980:	4aab      	ldr	r2, [pc, #684]	; (8001c30 <main+0x6e4>)
 8001982:	f242 2368 	movw	r3, #8808	; 0x2268
 8001986:	4413      	add	r3, r2
 8001988:	19da      	adds	r2, r3, r7
 800198a:	4baa      	ldr	r3, [pc, #680]	; (8001c34 <main+0x6e8>)
 800198c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001990:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001994:	443b      	add	r3, r7
 8001996:	49a8      	ldr	r1, [pc, #672]	; (8001c38 <main+0x6ec>)
 8001998:	4618      	mov	r0, r3
 800199a:	f01a f81f 	bl	801b9dc <siprintf>
				LoRA_sendPacket(response_packet);
 800199e:	4ba5      	ldr	r3, [pc, #660]	; (8001c34 <main+0x6e8>)
 80019a0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80019a4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019a8:	443b      	add	r3, r7
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fc7b 	bl	80012a6 <LoRA_sendPacket>
 80019b0:	e6aa      	b.n	8001708 <main+0x1bc>
			}
		} else if (strcmp(communication_state, "MASTER") == 0) {
 80019b2:	4ba2      	ldr	r3, [pc, #648]	; (8001c3c <main+0x6f0>)
 80019b4:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80019b8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019bc:	443b      	add	r3, r7
 80019be:	49a0      	ldr	r1, [pc, #640]	; (8001c40 <main+0x6f4>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fca5 	bl	8000310 <strcmp>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f ae9d 	bne.w	8001708 <main+0x1bc>
			if (strcmp(state, "DISARMED") == 0) {
 80019ce:	4b98      	ldr	r3, [pc, #608]	; (8001c30 <main+0x6e4>)
 80019d0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80019d4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019d8:	443b      	add	r3, r7
 80019da:	499a      	ldr	r1, [pc, #616]	; (8001c44 <main+0x6f8>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fc97 	bl	8000310 <strcmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 80e7 	bne.w	8001bb8 <main+0x66c>
				if (strcmp(command, "ARM") == 0) {
 80019ea:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <main+0x6e0>)
 80019ec:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80019f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019f4:	443b      	add	r3, r7
 80019f6:	4994      	ldr	r1, [pc, #592]	; (8001c48 <main+0x6fc>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc89 	bl	8000310 <strcmp>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d113      	bne.n	8001a2c <main+0x4e0>
					if (!arm(state)) {
 8001a04:	4b8a      	ldr	r3, [pc, #552]	; (8001c30 <main+0x6e4>)
 8001a06:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a0a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a0e:	443b      	add	r3, r7
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fce7 	bl	80013e4 <arm>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <main+0x4d8>
						reliable_send_packet("ARM SUCCESS");
 8001a1c:	488b      	ldr	r0, [pc, #556]	; (8001c4c <main+0x700>)
 8001a1e:	f7ff fd42 	bl	80014a6 <reliable_send_packet>
 8001a22:	e194      	b.n	8001d4e <main+0x802>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001a24:	488a      	ldr	r0, [pc, #552]	; (8001c50 <main+0x704>)
 8001a26:	f7ff fd3e 	bl	80014a6 <reliable_send_packet>
 8001a2a:	e190      	b.n	8001d4e <main+0x802>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001a2c:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <main+0x6e0>)
 8001a2e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a32:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a36:	443b      	add	r3, r7
 8001a38:	4986      	ldr	r1, [pc, #536]	; (8001c54 <main+0x708>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fc68 	bl	8000310 <strcmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <main+0x502>
					reliable_send_packet("ALREADY DISARMED");
 8001a46:	4884      	ldr	r0, [pc, #528]	; (8001c58 <main+0x70c>)
 8001a48:	f7ff fd2d 	bl	80014a6 <reliable_send_packet>
 8001a4c:	e17f      	b.n	8001d4e <main+0x802>
				} else if (strcmp(command, "CONT") == 0) {
 8001a4e:	4b77      	ldr	r3, [pc, #476]	; (8001c2c <main+0x6e0>)
 8001a50:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a54:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a58:	443b      	add	r3, r7
 8001a5a:	4980      	ldr	r1, [pc, #512]	; (8001c5c <main+0x710>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fc57 	bl	8000310 <strcmp>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 8172 	bne.w	8001d4e <main+0x802>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	487c      	ldr	r0, [pc, #496]	; (8001c60 <main+0x714>)
 8001a6e:	f007 f967 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001a7a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001a7e:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a84:	4877      	ldr	r0, [pc, #476]	; (8001c64 <main+0x718>)
 8001a86:	f007 f95b 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001a92:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001a96:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9c:	4871      	ldr	r0, [pc, #452]	; (8001c64 <main+0x718>)
 8001a9e:	f007 f94f 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001aaa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001aae:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	486d      	ldr	r0, [pc, #436]	; (8001c68 <main+0x71c>)
 8001ab4:	f007 f944 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001ac0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001ac4:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	4868      	ldr	r0, [pc, #416]	; (8001c6c <main+0x720>)
 8001aca:	f007 f939 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001ad6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001ada:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae0:	4862      	ldr	r0, [pc, #392]	; (8001c6c <main+0x720>)
 8001ae2:	f007 f92d 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001aee:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001af2:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001af4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af8:	485c      	ldr	r0, [pc, #368]	; (8001c6c <main+0x720>)
 8001afa:	f007 f921 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b06:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b0a:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b10:	4856      	ldr	r0, [pc, #344]	; (8001c6c <main+0x720>)
 8001b12:	f007 f915 	bl	8008d40 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b1e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b22:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001b24:	2300      	movs	r3, #0
 8001b26:	f242 2264 	movw	r2, #8804	; 0x2264
 8001b2a:	443a      	add	r2, r7
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e03c      	b.n	8001baa <main+0x65e>
						if (CONTS[i]) {
 8001b30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b34:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001b38:	f242 2364 	movw	r3, #8804	; 0x2264
 8001b3c:	443b      	add	r3, r7
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <main+0x61c>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001b48:	f242 2364 	movw	r3, #8804	; 0x2264
 8001b4c:	443b      	add	r3, r7
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <main+0x724>)
 8001b54:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001b58:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001b5c:	443b      	add	r3, r7
 8001b5e:	4945      	ldr	r1, [pc, #276]	; (8001c74 <main+0x728>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f019 ff3b 	bl	801b9dc <siprintf>
 8001b66:	e00e      	b.n	8001b86 <main+0x63a>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001b68:	f242 2364 	movw	r3, #8804	; 0x2264
 8001b6c:	443b      	add	r3, r7
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <main+0x724>)
 8001b74:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001b78:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001b7c:	443b      	add	r3, r7
 8001b7e:	493e      	ldr	r1, [pc, #248]	; (8001c78 <main+0x72c>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f019 ff2b 	bl	801b9dc <siprintf>
						}

						reliable_send_packet(message);
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <main+0x724>)
 8001b88:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001b8c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001b90:	443b      	add	r3, r7
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fc87 	bl	80014a6 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001b98:	f242 2364 	movw	r3, #8804	; 0x2264
 8001b9c:	443b      	add	r3, r7
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f242 2264 	movw	r2, #8804	; 0x2264
 8001ba6:	443a      	add	r2, r7
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	f242 2364 	movw	r3, #8804	; 0x2264
 8001bae:	443b      	add	r3, r7
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	ddbc      	ble.n	8001b30 <main+0x5e4>
 8001bb6:	e0ca      	b.n	8001d4e <main+0x802>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <main+0x6e4>)
 8001bba:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001bbe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001bc2:	443b      	add	r3, r7
 8001bc4:	492d      	ldr	r1, [pc, #180]	; (8001c7c <main+0x730>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fba2 	bl	8000310 <strcmp>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d173      	bne.n	8001cba <main+0x76e>
				if (strcmp(command, "DISARM") == 0) {
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <main+0x6e0>)
 8001bd4:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001bd8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001bdc:	443b      	add	r3, r7
 8001bde:	491d      	ldr	r1, [pc, #116]	; (8001c54 <main+0x708>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fb95 	bl	8000310 <strcmp>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d109      	bne.n	8001c00 <main+0x6b4>
					if (disarm(state)) {
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <main+0x6e4>)
 8001bee:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001bf2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001bf6:	443b      	add	r3, r7
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb7f 	bl	80012fc <disarm>
 8001bfe:	e0a6      	b.n	8001d4e <main+0x802>
						//not success
					} else {
						//success
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <main+0x6e0>)
 8001c02:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001c06:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c0a:	443b      	add	r3, r7
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <main+0x6fc>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fb7e 	bl	8000310 <strcmp>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d134      	bne.n	8001c84 <main+0x738>
					reliable_send_packet("ALREADY ARMED");
 8001c1a:	4819      	ldr	r0, [pc, #100]	; (8001c80 <main+0x734>)
 8001c1c:	f7ff fc43 	bl	80014a6 <reliable_send_packet>
 8001c20:	e095      	b.n	8001d4e <main+0x802>
 8001c22:	bf00      	nop
 8001c24:	ffffdea4 	.word	0xffffdea4
 8001c28:	ffffde70 	.word	0xffffde70
 8001c2c:	ffffded8 	.word	0xffffded8
 8001c30:	ffffdf0c 	.word	0xffffdf0c
 8001c34:	ffffde3c 	.word	0xffffde3c
 8001c38:	0801f464 	.word	0x0801f464
 8001c3c:	ffffde08 	.word	0xffffde08
 8001c40:	0801f45c 	.word	0x0801f45c
 8001c44:	0801f418 	.word	0x0801f418
 8001c48:	0801f46c 	.word	0x0801f46c
 8001c4c:	0801f470 	.word	0x0801f470
 8001c50:	0801f47c 	.word	0x0801f47c
 8001c54:	0801f490 	.word	0x0801f490
 8001c58:	0801f498 	.word	0x0801f498
 8001c5c:	0801f4ac 	.word	0x0801f4ac
 8001c60:	58020400 	.word	0x58020400
 8001c64:	58021400 	.word	0x58021400
 8001c68:	58021800 	.word	0x58021800
 8001c6c:	58021000 	.word	0x58021000
 8001c70:	ffffdd9c 	.word	0xffffdd9c
 8001c74:	0801f4b4 	.word	0x0801f4b4
 8001c78:	0801f4d4 	.word	0x0801f4d4
 8001c7c:	0801f424 	.word	0x0801f424
 8001c80:	0801f4ec 	.word	0x0801f4ec
				} else if (strcmp(command, "FIRE") == 0) {
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <main+0x854>)
 8001c86:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001c8a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c8e:	443b      	add	r3, r7
 8001c90:	4944      	ldr	r1, [pc, #272]	; (8001da4 <main+0x858>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fb3c 	bl	8000310 <strcmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d157      	bne.n	8001d4e <main+0x802>
					strcpy(state, "STATIC_FIRE_LOGGING");
 8001c9e:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <main+0x85c>)
 8001ca0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001ca4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001ca8:	443b      	add	r3, r7
 8001caa:	4a40      	ldr	r2, [pc, #256]	; (8001dac <main+0x860>)
 8001cac:	461c      	mov	r4, r3
 8001cae:	4615      	mov	r5, r2
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	6023      	str	r3, [r4, #0]
 8001cb8:	e049      	b.n	8001d4e <main+0x802>
				}
			} else if (strcmp(state, "STATIC_FIRE_LOGGING") == 0) {
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <main+0x85c>)
 8001cbc:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001cc0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001cc4:	443b      	add	r3, r7
 8001cc6:	4939      	ldr	r1, [pc, #228]	; (8001dac <main+0x860>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fb21 	bl	8000310 <strcmp>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d12d      	bne.n	8001d30 <main+0x7e4>
				if (strcmp(command, "STOP") == 0) {
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <main+0x854>)
 8001cd6:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001cda:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001cde:	443b      	add	r3, r7
 8001ce0:	4933      	ldr	r1, [pc, #204]	; (8001db0 <main+0x864>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fb14 	bl	8000310 <strcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <main+0x7bc>
					strcpy(state, "ARMED");
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <main+0x85c>)
 8001cf0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001cf4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001cf8:	443b      	add	r3, r7
 8001cfa:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <main+0x868>)
 8001cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d00:	6018      	str	r0, [r3, #0]
 8001d02:	3304      	adds	r3, #4
 8001d04:	8019      	strh	r1, [r3, #0]
 8001d06:	e022      	b.n	8001d4e <main+0x802>
				} else if (strcmp(command, "DATA") == 0) {
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <main+0x854>)
 8001d0a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d0e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d12:	443b      	add	r3, r7
 8001d14:	4928      	ldr	r1, [pc, #160]	; (8001db8 <main+0x86c>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fafa 	bl	8000310 <strcmp>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <main+0x802>
					reliable_send_packet(buffered_debug_data);
 8001d22:	f242 2344 	movw	r3, #8772	; 0x2244
 8001d26:	443b      	add	r3, r7
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	f7ff fbbc 	bl	80014a6 <reliable_send_packet>
 8001d2e:	e00e      	b.n	8001d4e <main+0x802>
				}
			} else {
				LoRA_sendPacket("state wrong!");
 8001d30:	4822      	ldr	r0, [pc, #136]	; (8001dbc <main+0x870>)
 8001d32:	f7ff fab8 	bl	80012a6 <LoRA_sendPacket>
				HAL_Delay(100);
 8001d36:	2064      	movs	r0, #100	; 0x64
 8001d38:	f002 f91a 	bl	8003f70 <HAL_Delay>
				LoRA_sendPacket(state);
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <main+0x85c>)
 8001d3e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d42:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d46:	443b      	add	r3, r7
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff faac 	bl	80012a6 <LoRA_sendPacket>
			}

			sprintf(response_packet, "$ %s", state);
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <main+0x85c>)
 8001d50:	f242 2368 	movw	r3, #8808	; 0x2268
 8001d54:	4413      	add	r3, r2
 8001d56:	19da      	adds	r2, r3, r7
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <main+0x874>)
 8001d5a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d5e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d62:	443b      	add	r3, r7
 8001d64:	4917      	ldr	r1, [pc, #92]	; (8001dc4 <main+0x878>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f019 fe38 	bl	801b9dc <siprintf>
			LoRA_sendPacket(response_packet);
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <main+0x874>)
 8001d6e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d72:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d76:	443b      	add	r3, r7
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa94 	bl	80012a6 <LoRA_sendPacket>
			strcpy(communication_state, "MASTER");
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <main+0x87c>)
 8001d80:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d84:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d88:	443b      	add	r3, r7
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <main+0x880>)
 8001d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d90:	6018      	str	r0, [r3, #0]
 8001d92:	3304      	adds	r3, #4
 8001d94:	8019      	strh	r1, [r3, #0]
 8001d96:	3302      	adds	r3, #2
 8001d98:	0c0a      	lsrs	r2, r1, #16
 8001d9a:	701a      	strb	r2, [r3, #0]
		strcpy(buffered_debug_data, "");
 8001d9c:	e4b4      	b.n	8001708 <main+0x1bc>
 8001d9e:	bf00      	nop
 8001da0:	ffffded8 	.word	0xffffded8
 8001da4:	0801f4fc 	.word	0x0801f4fc
 8001da8:	ffffdf0c 	.word	0xffffdf0c
 8001dac:	0801f504 	.word	0x0801f504
 8001db0:	0801f518 	.word	0x0801f518
 8001db4:	0801f424 	.word	0x0801f424
 8001db8:	0801f520 	.word	0x0801f520
 8001dbc:	0801f528 	.word	0x0801f528
 8001dc0:	ffffde3c 	.word	0xffffde3c
 8001dc4:	0801f464 	.word	0x0801f464
 8001dc8:	ffffde08 	.word	0xffffde08
 8001dcc:	0801f45c 	.word	0x0801f45c

08001dd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b09c      	sub	sp, #112	; 0x70
 8001dd4:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dda:	224c      	movs	r2, #76	; 0x4c
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f018 ffa6 	bl	801ad30 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2220      	movs	r2, #32
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f018 ffa0 	bl	801ad30 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001df0:	2002      	movs	r0, #2
 8001df2:	f008 fbd1 	bl	800a598 <HAL_PWREx_ConfigSupply>

/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <SystemClock_Config+0xec>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <SystemClock_Config+0xec>)
 8001e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e08:	6193      	str	r3, [r2, #24]
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <SystemClock_Config+0xec>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001e16:	bf00      	nop
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <SystemClock_Config+0xec>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e24:	d1f8      	bne.n	8001e18 <SystemClock_Config+0x48>
}

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8001e26:	2322      	movs	r3, #34	; 0x22
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
	| RCC_OSCILLATORTYPE_HSI;
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = 64;
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e32:	2301      	movs	r3, #1
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e36:	2302      	movs	r3, #2
 8001e38:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 12;
 8001e42:	230c      	movs	r3, #12
 8001e44:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e52:	230c      	movs	r3, #12
 8001e54:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e62:	4618      	mov	r0, r3
 8001e64:	f008 fbe2 	bl	800a62c <HAL_RCC_OscConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0xa2>
Error_Handler();
 8001e6e:	f000 ff39 	bl	8002ce4 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e72:	233f      	movs	r3, #63	; 0x3f
 8001e74:	607b      	str	r3, [r7, #4]
	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
	| RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e76:	2303      	movs	r3, #3
 8001e78:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e82:	2340      	movs	r3, #64	; 0x40
 8001e84:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8e:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2101      	movs	r1, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f008 ffa1 	bl	800ade0 <HAL_RCC_ClockConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0xd8>
Error_Handler();
 8001ea4:	f000 ff1e 	bl	8002ce4 <Error_Handler>
}
HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001ea8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001eac:	2100      	movs	r1, #0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f009 f94c 	bl	800b14c <HAL_RCC_MCOConfig>
}
 8001eb4:	bf00      	nop
 8001eb6:	3770      	adds	r7, #112	; 0x70
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	58024800 	.word	0x58024800

08001ec0 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0ae      	sub	sp, #184	; 0xb8
 8001ec4:	af00      	add	r7, sp, #0
RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	22b8      	movs	r2, #184	; 0xb8
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f018 ff2f 	bl	801ad30 <memset>

/** Initializes the peripherals clock
 */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 8001ed2:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c7 2300 	strd	r2, r3, [r7]
	| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	60bb      	str	r3, [r7, #8]
PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	60fb      	str	r3, [r7, #12]
PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	613b      	str	r3, [r7, #16]
PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	617b      	str	r3, [r7, #20]
PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	61fb      	str	r3, [r7, #28]
PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f02:	65fb      	str	r3, [r7, #92]	; 0x5c
PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f009 fb5d 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <PeriphCommonClock_Config+0x5c>
Error_Handler();
 8001f18:	f000 fee4 	bl	8002ce4 <Error_Handler>
}
}
 8001f1c:	bf00      	nop
 8001f1e:	37b8      	adds	r7, #184	; 0xb8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC1_Init 0 */

/* USER CODE END ADC1_Init 0 */

ADC_MultiModeTypeDef multimode = { 0 };
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f36:	463b      	mov	r3, r7
 8001f38:	2224      	movs	r2, #36	; 0x24
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f018 fef7 	bl	801ad30 <memset>

/* USER CODE END ADC1_Init 1 */

/** Common config
 */
hadc1.Instance = ADC1;
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f44:	4a31      	ldr	r2, [pc, #196]	; (800200c <MX_ADC1_Init+0xe8>)
 8001f46:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001f48:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f4a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001f4e:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f5e:	2204      	movs	r2, #4
 8001f60:	615a      	str	r2, [r3, #20]
hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	761a      	strb	r2, [r3, #24]
hadc1.Init.ContinuousConvMode = DISABLE;
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	765a      	strb	r2, [r3, #25]
hadc1.Init.NbrOfConversion = 1;
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	61da      	str	r2, [r3, #28]
hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2020 	strb.w	r2, [r3, #32]
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
hadc1.Init.OversamplingMode = DISABLE;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001fa2:	4819      	ldr	r0, [pc, #100]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001fa4:	f002 fb0a 	bl	80045bc <HAL_ADC_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_ADC1_Init+0x8e>
Error_Handler();
 8001fae:	f000 fe99 	bl	8002ce4 <Error_Handler>
}

/** Configure the ADC multi-mode
 */
multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4812      	ldr	r0, [pc, #72]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001fbe:	f003 feeb 	bl	8005d98 <HAL_ADCEx_MultiModeConfigChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_ADC1_Init+0xa8>
Error_Handler();
 8001fc8:	f000 fe8c 	bl	8002ce4 <Error_Handler>
}

/** Configure Regular Channel
 */
sConfig.Channel = ADC_CHANNEL_14;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_ADC1_Init+0xec>)
 8001fce:	603b      	str	r3, [r7, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	60bb      	str	r3, [r7, #8]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fdc:	60fb      	str	r3, [r7, #12]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	613b      	str	r3, [r7, #16]
sConfig.Offset = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
sConfig.OffsetSignedSaturation = DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_ADC1_Init+0xe4>)
 8001ff2:	f002 feeb 	bl	8004dcc <HAL_ADC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC1_Init+0xdc>
Error_Handler();
 8001ffc:	f000 fe72 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3730      	adds	r7, #48	; 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	24000c78 	.word	0x24000c78
 800200c:	40022000 	.word	0x40022000
 8002010:	3ac04000 	.word	0x3ac04000

08002014 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC3_Init 0 */

/* USER CODE END ADC3_Init 0 */

ADC_ChannelConfTypeDef sConfig = { 0 };
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2224      	movs	r2, #36	; 0x24
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f018 fe85 	bl	801ad30 <memset>

/* USER CODE END ADC3_Init 1 */

/** Common config
 */
hadc3.Instance = ADC3;
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002028:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <MX_ADC3_Init+0xd4>)
 800202a:	601a      	str	r2, [r3, #0]
hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800202e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002032:	605a      	str	r2, [r3, #4]
hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002036:	2208      	movs	r2, #8
 8002038:	609a      	str	r2, [r3, #8]
hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002048:	2204      	movs	r2, #4
 800204a:	615a      	str	r2, [r3, #20]
hadc3.Init.LowPowerAutoWait = DISABLE;
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800204e:	2200      	movs	r2, #0
 8002050:	761a      	strb	r2, [r3, #24]
hadc3.Init.ContinuousConvMode = DISABLE;
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002054:	2200      	movs	r2, #0
 8002056:	765a      	strb	r2, [r3, #25]
hadc3.Init.NbrOfConversion = 1;
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800205a:	2201      	movs	r2, #1
 800205c:	61da      	str	r2, [r3, #28]
hadc3.Init.DiscontinuousConvMode = DISABLE;
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2020 	strb.w	r2, [r3, #32]
hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
hadc3.Init.DMAContinuousRequests = ENABLE;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800207c:	2200      	movs	r2, #0
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002088:	2200      	movs	r2, #0
 800208a:	63da      	str	r2, [r3, #60]	; 0x3c
hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
hadc3.Init.OversamplingMode = DISABLE;
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <MX_ADC3_Init+0xd0>)
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <MX_ADC3_Init+0xd0>)
 800209c:	f002 fa8e 	bl	80045bc <HAL_ADC_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_ADC3_Init+0x96>
Error_Handler();
 80020a6:	f000 fe1d 	bl	8002ce4 <Error_Handler>
}

/** Configure Regular Channel
 */
sConfig.Channel = ADC_CHANNEL_1;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_ADC3_Init+0xd8>)
 80020ac:	607b      	str	r3, [r7, #4]
sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ae:	2306      	movs	r3, #6
 80020b0:	60bb      	str	r3, [r7, #8]
sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ba:	613b      	str	r3, [r7, #16]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020bc:	2304      	movs	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
sConfig.Offset = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_ADC3_Init+0xd0>)
 80020ce:	f002 fe7d 	bl	8004dcc <HAL_ADC_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC3_Init+0xc8>
Error_Handler();
 80020d8:	f000 fe04 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN ADC3_Init 2 */

/* USER CODE END ADC3_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	24000ce8 	.word	0x24000ce8
 80020e8:	58026000 	.word	0x58026000
 80020ec:	04300002 	.word	0x04300002

080020f0 <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
/* USER CODE END FDCAN3_Init 0 */

/* USER CODE BEGIN FDCAN3_Init 1 */

/* USER CODE END FDCAN3_Init 1 */
hfdcan3.Instance = FDCAN3;
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 80020f6:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <MX_FDCAN3_Init+0xc4>)
 80020f8:	601a      	str	r2, [r3, #0]
hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
hfdcan3.Init.AutoRetransmission = DISABLE;
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002108:	2200      	movs	r2, #0
 800210a:	741a      	strb	r2, [r3, #16]
hfdcan3.Init.TransmitPause = DISABLE;
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800210e:	2200      	movs	r2, #0
 8002110:	745a      	strb	r2, [r3, #17]
hfdcan3.Init.ProtocolException = DISABLE;
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002114:	2200      	movs	r2, #0
 8002116:	749a      	strb	r2, [r3, #18]
hfdcan3.Init.NominalPrescaler = 16;
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800211a:	2210      	movs	r2, #16
 800211c:	615a      	str	r2, [r3, #20]
hfdcan3.Init.NominalSyncJumpWidth = 1;
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002120:	2201      	movs	r2, #1
 8002122:	619a      	str	r2, [r3, #24]
hfdcan3.Init.NominalTimeSeg1 = 2;
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002126:	2202      	movs	r2, #2
 8002128:	61da      	str	r2, [r3, #28]
hfdcan3.Init.NominalTimeSeg2 = 2;
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800212c:	2202      	movs	r2, #2
 800212e:	621a      	str	r2, [r3, #32]
hfdcan3.Init.DataPrescaler = 1;
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002132:	2201      	movs	r2, #1
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
hfdcan3.Init.DataSyncJumpWidth = 1;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002138:	2201      	movs	r2, #1
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
hfdcan3.Init.DataTimeSeg1 = 1;
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800213e:	2201      	movs	r2, #1
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
hfdcan3.Init.DataTimeSeg2 = 1;
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002144:	2201      	movs	r2, #1
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
hfdcan3.Init.MessageRAMOffset = 0;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800214a:	2200      	movs	r2, #0
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
hfdcan3.Init.StdFiltersNbr = 0;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
hfdcan3.Init.ExtFiltersNbr = 0;
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002156:	2200      	movs	r2, #0
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c
hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800215c:	2200      	movs	r2, #0
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002162:	2204      	movs	r2, #4
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002168:	2200      	movs	r2, #0
 800216a:	649a      	str	r2, [r3, #72]	; 0x48
hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800216e:	2204      	movs	r2, #4
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
hfdcan3.Init.RxBuffersNbr = 0;
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002174:	2200      	movs	r2, #0
 8002176:	651a      	str	r2, [r3, #80]	; 0x50
hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800217a:	2204      	movs	r2, #4
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
hfdcan3.Init.TxEventsNbr = 0;
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002180:	2200      	movs	r2, #0
 8002182:	659a      	str	r2, [r3, #88]	; 0x58
hfdcan3.Init.TxBuffersNbr = 0;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002186:	2200      	movs	r2, #0
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c
hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800218c:	2200      	movs	r2, #0
 800218e:	661a      	str	r2, [r3, #96]	; 0x60
hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002192:	2200      	movs	r2, #0
 8002194:	665a      	str	r2, [r3, #100]	; 0x64
hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 8002198:	2204      	movs	r2, #4
 800219a:	669a      	str	r2, [r3, #104]	; 0x68
if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 800219c:	4804      	ldr	r0, [pc, #16]	; (80021b0 <MX_FDCAN3_Init+0xc0>)
 800219e:	f006 f8c3 	bl	8008328 <HAL_FDCAN_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_FDCAN3_Init+0xbc>
Error_Handler();
 80021a8:	f000 fd9c 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN FDCAN3_Init 2 */

/* USER CODE END FDCAN3_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	24000e48 	.word	0x24000e48
 80021b4:	4000d400 	.word	0x4000d400

080021b8 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
/* USER CODE END I2C2_Init 0 */

/* USER CODE BEGIN I2C2_Init 1 */

/* USER CODE END I2C2_Init 1 */
hi2c2.Instance = I2C2;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <MX_I2C2_Init+0x74>)
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <MX_I2C2_Init+0x78>)
 80021c0:	601a      	str	r2, [r3, #0]
hi2c2.Init.Timing = 0x20303E5D;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_I2C2_Init+0x74>)
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <MX_I2C2_Init+0x7c>)
 80021c6:	605a      	str	r2, [r3, #4]
hi2c2.Init.OwnAddress1 = 0;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_I2C2_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <MX_I2C2_Init+0x74>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	60da      	str	r2, [r3, #12]
hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <MX_I2C2_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
hi2c2.Init.OwnAddress2 = 0;
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <MX_I2C2_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <MX_I2C2_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_I2C2_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <MX_I2C2_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80021f2:	480e      	ldr	r0, [pc, #56]	; (800222c <MX_I2C2_Init+0x74>)
 80021f4:	f006 fdd6 	bl	8008da4 <HAL_I2C_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_I2C2_Init+0x4a>
Error_Handler();
 80021fe:	f000 fd71 	bl	8002ce4 <Error_Handler>
}

/** Configure Analogue filter
 */
if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8002202:	2100      	movs	r1, #0
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <MX_I2C2_Init+0x74>)
 8002206:	f006 fe77 	bl	8008ef8 <HAL_I2CEx_ConfigAnalogFilter>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C2_Init+0x5c>
Error_Handler();
 8002210:	f000 fd68 	bl	8002ce4 <Error_Handler>
}

/** Configure Digital filter
 */
if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002214:	2100      	movs	r1, #0
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_I2C2_Init+0x74>)
 8002218:	f006 feb9 	bl	8008f8e <HAL_I2CEx_ConfigDigitalFilter>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_I2C2_Init+0x6e>
Error_Handler();
 8002222:	f000 fd5f 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN I2C2_Init 2 */

/* USER CODE END I2C2_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	24000ee8 	.word	0x24000ee8
 8002230:	40005800 	.word	0x40005800
 8002234:	20303e5d 	.word	0x20303e5d

08002238 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
/* USER CODE END SDMMC2_Init 0 */

/* USER CODE BEGIN SDMMC2_Init 1 */

/* USER CODE END SDMMC2_Init 1 */
hsd2.Instance = SDMMC2;
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_SDMMC2_SD_Init+0x34>)
 800223e:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <MX_SDMMC2_SD_Init+0x38>)
 8002240:	601a      	str	r2, [r3, #0]
hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <MX_SDMMC2_SD_Init+0x34>)
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_SDMMC2_SD_Init+0x34>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <MX_SDMMC2_SD_Init+0x34>)
 8002250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002254:	60da      	str	r2, [r3, #12]
hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <MX_SDMMC2_SD_Init+0x34>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
hsd2.Init.ClockDiv = 8;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <MX_SDMMC2_SD_Init+0x34>)
 800225e:	2208      	movs	r2, #8
 8002260:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN SDMMC2_Init 2 */

/* USER CODE END SDMMC2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	24000f3c 	.word	0x24000f3c
 8002270:	48022400 	.word	0x48022400

08002274 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

/* USER CODE BEGIN SPI1_Init 1 */

/* USER CODE END SPI1_Init 1 */
/* SPI1 parameter configuration*/
hspi1.Instance = SPI1;
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <MX_SPI1_Init+0xa4>)
 800227a:	4a28      	ldr	r2, [pc, #160]	; (800231c <MX_SPI1_Init+0xa8>)
 800227c:	601a      	str	r2, [r3, #0]
hspi1.Init.Mode = SPI_MODE_MASTER;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <MX_SPI1_Init+0xa4>)
 8002280:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002284:	605a      	str	r2, [r3, #4]
hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <MX_SPI1_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <MX_SPI1_Init+0xa4>)
 800228e:	2207      	movs	r2, #7
 8002290:	60da      	str	r2, [r3, #12]
hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <MX_SPI1_Init+0xa4>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_SPI1_Init+0xa4>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
hspi1.Init.NSS = SPI_NSS_SOFT;
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022a4:	619a      	str	r2, [r3, #24]
hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022a8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80022ac:	61da      	str	r2, [r3, #28]
hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
hspi1.Init.CRCPolynomial = 0x0;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	63da      	str	r2, [r3, #60]	; 0x3c
hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	649a      	str	r2, [r3, #72]	; 0x48
hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c
hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	651a      	str	r2, [r3, #80]	; 0x50
hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_SPI1_Init+0xa4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_SPI1_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	659a      	str	r2, [r3, #88]	; 0x58
if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <MX_SPI1_Init+0xa4>)
 8002306:	f00d f9ab 	bl	800f660 <HAL_SPI_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_SPI1_Init+0xa0>
Error_Handler();
 8002310:	f000 fce8 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN SPI1_Init 2 */

/* USER CODE END SPI1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	24000fb8 	.word	0x24000fb8
 800231c:	40013000 	.word	0x40013000

08002320 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

/* USER CODE BEGIN SPI2_Init 1 */

/* USER CODE END SPI2_Init 1 */
/* SPI2 parameter configuration*/
hspi2.Instance = SPI2;
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002326:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <MX_SPI2_Init+0xa8>)
 8002328:	601a      	str	r2, [r3, #0]
hspi2.Init.Mode = SPI_MODE_MASTER;
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800232c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002330:	605a      	str	r2, [r3, #4]
hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800233a:	2207      	movs	r2, #7
 800233c:	60da      	str	r2, [r3, #12]
hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
hspi2.Init.NSS = SPI_NSS_SOFT;
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800234c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002350:	619a      	str	r2, [r3, #24]
hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002354:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002358:	61da      	str	r2, [r3, #28]
hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
hspi2.Init.CRCPolynomial = 0x0;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002378:	635a      	str	r2, [r3, #52]	; 0x34
hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800237c:	2200      	movs	r2, #0
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002382:	2200      	movs	r2, #0
 8002384:	63da      	str	r2, [r3, #60]	; 0x3c
hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_SPI2_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	649a      	str	r2, [r3, #72]	; 0x48
hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <MX_SPI2_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	64da      	str	r2, [r3, #76]	; 0x4c
hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_SPI2_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50
hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <MX_SPI2_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_SPI2_Init+0xa4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58
if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <MX_SPI2_Init+0xa4>)
 80023b2:	f00d f955 	bl	800f660 <HAL_SPI_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_SPI2_Init+0xa0>
Error_Handler();
 80023bc:	f000 fc92 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN SPI2_Init 2 */

/* USER CODE END SPI2_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24001040 	.word	0x24001040
 80023c8:	40003800 	.word	0x40003800

080023cc <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0

/* USER CODE BEGIN SPI3_Init 1 */

/* USER CODE END SPI3_Init 1 */
/* SPI3 parameter configuration*/
hspi3.Instance = SPI3;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <MX_SPI3_Init+0xa8>)
 80023d4:	601a      	str	r2, [r3, #0]
hspi3.Init.Mode = SPI_MODE_MASTER;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023dc:	605a      	str	r2, [r3, #4]
hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023e6:	2207      	movs	r2, #7
 80023e8:	60da      	str	r2, [r3, #12]
hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
hspi3.Init.NSS = SPI_NSS_SOFT;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <MX_SPI3_Init+0xa4>)
 80023f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023fc:	619a      	str	r2, [r3, #24]
hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002400:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002404:	61da      	str	r2, [r3, #28]
hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <MX_SPI3_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
hspi3.Init.CRCPolynomial = 0x0;
 8002418:	4b15      	ldr	r3, [pc, #84]	; (8002470 <MX_SPI3_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002428:	2200      	movs	r2, #0
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <MX_SPI3_Init+0xa4>)
 800242e:	2200      	movs	r2, #0
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c
hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002434:	2200      	movs	r2, #0
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <MX_SPI3_Init+0xa4>)
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	649a      	str	r2, [r3, #72]	; 0x48
hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002446:	2200      	movs	r2, #0
 8002448:	64da      	str	r2, [r3, #76]	; 0x4c
hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_SPI3_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	651a      	str	r2, [r3, #80]	; 0x50
hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_SPI3_Init+0xa4>)
 8002458:	2200      	movs	r2, #0
 800245a:	659a      	str	r2, [r3, #88]	; 0x58
if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <MX_SPI3_Init+0xa4>)
 800245e:	f00d f8ff 	bl	800f660 <HAL_SPI_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_SPI3_Init+0xa0>
Error_Handler();
 8002468:	f000 fc3c 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN SPI3_Init 2 */

/* USER CODE END SPI3_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	240010c8 	.word	0x240010c8
 8002474:	40003c00 	.word	0x40003c00

08002478 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM2_Init 0 */

/* USER CODE END TIM2_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 800248a:	463b      	mov	r3, r7
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM2_Init 1 */

/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <MX_TIM2_Init+0xac>)
 800249e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a2:	601a      	str	r2, [r3, #0]
htim2.Init.Prescaler = 0;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <MX_TIM2_Init+0xac>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	605a      	str	r2, [r3, #4]
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <MX_TIM2_Init+0xac>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
htim2.Init.Period = 90;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <MX_TIM2_Init+0xac>)
 80024b2:	225a      	movs	r2, #90	; 0x5a
 80024b4:	60da      	str	r2, [r3, #12]
htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <MX_TIM2_Init+0xac>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <MX_TIM2_Init+0xac>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80024c2:	4818      	ldr	r0, [pc, #96]	; (8002524 <MX_TIM2_Init+0xac>)
 80024c4:	f00d febc 	bl	8010240 <HAL_TIM_PWM_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM2_Init+0x5a>
Error_Handler();
 80024ce:	f000 fc09 	bl	8002ce4 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	4810      	ldr	r0, [pc, #64]	; (8002524 <MX_TIM2_Init+0xac>)
 80024e2:	f00f f943 	bl	801176c <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0x78>
Error_Handler();
 80024ec:	f000 fbfa 	bl	8002ce4 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f0:	2360      	movs	r3, #96	; 0x60
 80024f2:	603b      	str	r3, [r7, #0]
sConfigOC.Pulse = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	607b      	str	r3, [r7, #4]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8002500:	463b      	mov	r3, r7
 8002502:	2208      	movs	r2, #8
 8002504:	4619      	mov	r1, r3
 8002506:	4807      	ldr	r0, [pc, #28]	; (8002524 <MX_TIM2_Init+0xac>)
 8002508:	f00e fb62 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM2_Init+0x9e>
Error_Handler();
 8002512:	f000 fbe7 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN TIM2_Init 2 */

/* USER CODE END TIM2_Init 2 */
HAL_TIM_MspPostInit(&htim2);
 8002516:	4803      	ldr	r0, [pc, #12]	; (8002524 <MX_TIM2_Init+0xac>)
 8002518:	f001 f91a 	bl	8003750 <HAL_TIM_MspPostInit>

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	24001150 	.word	0x24001150

08002528 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM3_Init 0 */

/* USER CODE END TIM3_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800252e:	f107 031c 	add.w	r3, r7, #28
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 800253a:	463b      	mov	r3, r7
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM3_Init 1 */

/* USER CODE END TIM3_Init 1 */
htim3.Instance = TIM3;
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <MX_TIM3_Init+0xc0>)
 800254e:	4a27      	ldr	r2, [pc, #156]	; (80025ec <MX_TIM3_Init+0xc4>)
 8002550:	601a      	str	r2, [r3, #0]
htim3.Init.Prescaler = 0;
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <MX_TIM3_Init+0xc0>)
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <MX_TIM3_Init+0xc0>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
htim3.Init.Period = 90;
 800255e:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <MX_TIM3_Init+0xc0>)
 8002560:	225a      	movs	r2, #90	; 0x5a
 8002562:	60da      	str	r2, [r3, #12]
htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <MX_TIM3_Init+0xc0>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <MX_TIM3_Init+0xc0>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002570:	481d      	ldr	r0, [pc, #116]	; (80025e8 <MX_TIM3_Init+0xc0>)
 8002572:	f00d fe65 	bl	8010240 <HAL_TIM_PWM_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM3_Init+0x58>
Error_Handler();
 800257c:	f000 fbb2 	bl	8002ce4 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	4816      	ldr	r0, [pc, #88]	; (80025e8 <MX_TIM3_Init+0xc0>)
 8002590:	f00f f8ec 	bl	801176c <HAL_TIMEx_MasterConfigSynchronization>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0x76>
Error_Handler();
 800259a:	f000 fba3 	bl	8002ce4 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259e:	2360      	movs	r3, #96	; 0x60
 80025a0:	603b      	str	r3, [r7, #0]
sConfigOC.Pulse = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80025ae:	463b      	mov	r3, r7
 80025b0:	2200      	movs	r2, #0
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <MX_TIM3_Init+0xc0>)
 80025b6:	f00e fb0b 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM3_Init+0x9c>
Error_Handler();
 80025c0:	f000 fb90 	bl	8002ce4 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80025c4:	463b      	mov	r3, r7
 80025c6:	2204      	movs	r2, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4807      	ldr	r0, [pc, #28]	; (80025e8 <MX_TIM3_Init+0xc0>)
 80025cc:	f00e fb00 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0xb2>
Error_Handler();
 80025d6:	f000 fb85 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN TIM3_Init 2 */

/* USER CODE END TIM3_Init 2 */
HAL_TIM_MspPostInit(&htim3);
 80025da:	4803      	ldr	r0, [pc, #12]	; (80025e8 <MX_TIM3_Init+0xc0>)
 80025dc:	f001 f8b8 	bl	8003750 <HAL_TIM_MspPostInit>

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2400119c 	.word	0x2400119c
 80025ec:	40000400 	.word	0x40000400

080025f0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM4_Init 0 */

/* USER CODE END TIM4_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002602:	463b      	mov	r3, r7
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM4_Init 1 */

/* USER CODE END TIM4_Init 1 */
htim4.Instance = TIM4;
 8002614:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002616:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <MX_TIM4_Init+0xf4>)
 8002618:	601a      	str	r2, [r3, #0]
htim4.Init.Prescaler = 29;
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <MX_TIM4_Init+0xf0>)
 800261c:	221d      	movs	r2, #29
 800261e:	605a      	str	r2, [r3, #4]
htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
htim4.Init.Period = 9999;
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002628:	f242 720f 	movw	r2, #9999	; 0x270f
 800262c:	60da      	str	r2, [r3, #12]
htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800263a:	4829      	ldr	r0, [pc, #164]	; (80026e0 <MX_TIM4_Init+0xf0>)
 800263c:	f00d fe00 	bl	8010240 <HAL_TIM_PWM_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM4_Init+0x5a>
Error_Handler();
 8002646:	f000 fb4d 	bl	8002ce4 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	4821      	ldr	r0, [pc, #132]	; (80026e0 <MX_TIM4_Init+0xf0>)
 800265a:	f00f f887 	bl	801176c <HAL_TIMEx_MasterConfigSynchronization>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM4_Init+0x78>
Error_Handler();
 8002664:	f000 fb3e 	bl	8002ce4 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002668:	2360      	movs	r3, #96	; 0x60
 800266a:	603b      	str	r3, [r7, #0]
sConfigOC.Pulse = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	4818      	ldr	r0, [pc, #96]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002680:	f00e faa6 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM4_Init+0x9e>
Error_Handler();
 800268a:	f000 fb2b 	bl	8002ce4 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800268e:	463b      	mov	r3, r7
 8002690:	2204      	movs	r2, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4812      	ldr	r0, [pc, #72]	; (80026e0 <MX_TIM4_Init+0xf0>)
 8002696:	f00e fa9b 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM4_Init+0xb4>
Error_Handler();
 80026a0:	f000 fb20 	bl	8002ce4 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80026a4:	463b      	mov	r3, r7
 80026a6:	2208      	movs	r2, #8
 80026a8:	4619      	mov	r1, r3
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <MX_TIM4_Init+0xf0>)
 80026ac:	f00e fa90 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM4_Init+0xca>
Error_Handler();
 80026b6:	f000 fb15 	bl	8002ce4 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80026ba:	463b      	mov	r3, r7
 80026bc:	220c      	movs	r2, #12
 80026be:	4619      	mov	r1, r3
 80026c0:	4807      	ldr	r0, [pc, #28]	; (80026e0 <MX_TIM4_Init+0xf0>)
 80026c2:	f00e fa85 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM4_Init+0xe0>
Error_Handler();
 80026cc:	f000 fb0a 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN TIM4_Init 2 */

/* USER CODE END TIM4_Init 2 */
HAL_TIM_MspPostInit(&htim4);
 80026d0:	4803      	ldr	r0, [pc, #12]	; (80026e0 <MX_TIM4_Init+0xf0>)
 80026d2:	f001 f83d 	bl	8003750 <HAL_TIM_MspPostInit>

}
 80026d6:	bf00      	nop
 80026d8:	3728      	adds	r7, #40	; 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	240011e8 	.word	0x240011e8
 80026e4:	40000800 	.word	0x40000800

080026e8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM5_Init 0 */

/* USER CODE END TIM5_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026fa:	463b      	mov	r3, r7
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
 8002708:	615a      	str	r2, [r3, #20]
 800270a:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM5_Init 1 */

/* USER CODE END TIM5_Init 1 */
htim5.Instance = TIM5;
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <MX_TIM5_Init+0xac>)
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <MX_TIM5_Init+0xb0>)
 8002710:	601a      	str	r2, [r3, #0]
htim5.Init.Prescaler = 0;
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <MX_TIM5_Init+0xac>)
 8002714:	2200      	movs	r2, #0
 8002716:	605a      	str	r2, [r3, #4]
htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <MX_TIM5_Init+0xac>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
htim5.Init.Period = 90;
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <MX_TIM5_Init+0xac>)
 8002720:	225a      	movs	r2, #90	; 0x5a
 8002722:	60da      	str	r2, [r3, #12]
htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <MX_TIM5_Init+0xac>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <MX_TIM5_Init+0xac>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8002730:	4818      	ldr	r0, [pc, #96]	; (8002794 <MX_TIM5_Init+0xac>)
 8002732:	f00d fd85 	bl	8010240 <HAL_TIM_PWM_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM5_Init+0x58>
Error_Handler();
 800273c:	f000 fad2 	bl	8002ce4 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4811      	ldr	r0, [pc, #68]	; (8002794 <MX_TIM5_Init+0xac>)
 8002750:	f00f f80c 	bl	801176c <HAL_TIMEx_MasterConfigSynchronization>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM5_Init+0x76>
Error_Handler();
 800275a:	f000 fac3 	bl	8002ce4 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275e:	2360      	movs	r3, #96	; 0x60
 8002760:	603b      	str	r3, [r7, #0]
sConfigOC.Pulse = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800276e:	463b      	mov	r3, r7
 8002770:	220c      	movs	r2, #12
 8002772:	4619      	mov	r1, r3
 8002774:	4807      	ldr	r0, [pc, #28]	; (8002794 <MX_TIM5_Init+0xac>)
 8002776:	f00e fa2b 	bl	8010bd0 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM5_Init+0x9c>
Error_Handler();
 8002780:	f000 fab0 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN TIM5_Init 2 */

/* USER CODE END TIM5_Init 2 */
HAL_TIM_MspPostInit(&htim5);
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <MX_TIM5_Init+0xac>)
 8002786:	f000 ffe3 	bl	8003750 <HAL_TIM_MspPostInit>

}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	24001234 	.word	0x24001234
 8002798:	40000c00 	.word	0x40000c00

0800279c <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
/* USER CODE END TIM13_Init 0 */

/* USER CODE BEGIN TIM13_Init 1 */

/* USER CODE END TIM13_Init 1 */
htim13.Instance = TIM13;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_TIM13_Init+0x40>)
 80027a2:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <MX_TIM13_Init+0x44>)
 80027a4:	601a      	str	r2, [r3, #0]
htim13.Init.Prescaler = 99;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <MX_TIM13_Init+0x40>)
 80027a8:	2263      	movs	r2, #99	; 0x63
 80027aa:	605a      	str	r2, [r3, #4]
htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_TIM13_Init+0x40>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
htim13.Init.Period = 65535;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <MX_TIM13_Init+0x40>)
 80027b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b8:	60da      	str	r2, [r3, #12]
htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_TIM13_Init+0x40>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_TIM13_Init+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_TIM13_Init+0x40>)
 80027c8:	f00d fce3 	bl	8010192 <HAL_TIM_Base_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM13_Init+0x3a>
Error_Handler();
 80027d2:	f000 fa87 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN TIM13_Init 2 */

/* USER CODE END TIM13_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	24001280 	.word	0x24001280
 80027e0:	40001c00 	.word	0x40001c00

080027e4 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
/* USER CODE END TIM14_Init 0 */

/* USER CODE BEGIN TIM14_Init 1 */

/* USER CODE END TIM14_Init 1 */
htim14.Instance = TIM14;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_TIM14_Init+0x40>)
 80027ea:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <MX_TIM14_Init+0x44>)
 80027ec:	601a      	str	r2, [r3, #0]
htim14.Init.Prescaler = 99;
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <MX_TIM14_Init+0x40>)
 80027f0:	2263      	movs	r2, #99	; 0x63
 80027f2:	605a      	str	r2, [r3, #4]
htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <MX_TIM14_Init+0x40>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
htim14.Init.Period = 65535;
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <MX_TIM14_Init+0x40>)
 80027fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002800:	60da      	str	r2, [r3, #12]
htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <MX_TIM14_Init+0x40>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_TIM14_Init+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_TIM14_Init+0x40>)
 8002810:	f00d fcbf 	bl	8010192 <HAL_TIM_Base_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM14_Init+0x3a>
Error_Handler();
 800281a:	f000 fa63 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN TIM14_Init 2 */

/* USER CODE END TIM14_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	240012cc 	.word	0x240012cc
 8002828:	40002000 	.word	0x40002000

0800282c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
/* USER CODE END UART4_Init 0 */

/* USER CODE BEGIN UART4_Init 1 */

/* USER CODE END UART4_Init 1 */
huart4.Instance = UART4;
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <MX_UART4_Init+0x90>)
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <MX_UART4_Init+0x94>)
 8002834:	601a      	str	r2, [r3, #0]
huart4.Init.BaudRate = 115200;
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <MX_UART4_Init+0x90>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_UART4_Init+0x90>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
huart4.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_UART4_Init+0x90>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
huart4.Init.Parity = UART_PARITY_NONE;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_UART4_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
huart4.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_UART4_Init+0x90>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <MX_UART4_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_UART4_Init+0x90>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <MX_UART4_Init+0x90>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_UART4_Init+0x90>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <MX_UART4_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002874:	4811      	ldr	r0, [pc, #68]	; (80028bc <MX_UART4_Init+0x90>)
 8002876:	f00f f833 	bl	80118e0 <HAL_UART_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_UART4_Init+0x58>
Error_Handler();
 8002880:	f000 fa30 	bl	8002ce4 <Error_Handler>
}
if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002884:	2100      	movs	r1, #0
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_UART4_Init+0x90>)
 8002888:	f010 f939 	bl	8012afe <HAL_UARTEx_SetTxFifoThreshold>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_UART4_Init+0x6a>
	!= HAL_OK) {
Error_Handler();
 8002892:	f000 fa27 	bl	8002ce4 <Error_Handler>
}
if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002896:	2100      	movs	r1, #0
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <MX_UART4_Init+0x90>)
 800289a:	f010 f96e 	bl	8012b7a <HAL_UARTEx_SetRxFifoThreshold>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_UART4_Init+0x7c>
	!= HAL_OK) {
Error_Handler();
 80028a4:	f000 fa1e 	bl	8002ce4 <Error_Handler>
}
if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 80028a8:	4804      	ldr	r0, [pc, #16]	; (80028bc <MX_UART4_Init+0x90>)
 80028aa:	f010 f8ef 	bl	8012a8c <HAL_UARTEx_DisableFifoMode>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_UART4_Init+0x8c>
Error_Handler();
 80028b4:	f000 fa16 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN UART4_Init 2 */

/* USER CODE END UART4_Init 2 */

}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	24001570 	.word	0x24001570
 80028c0:	40004c00 	.word	0x40004c00

080028c4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
/* USER CODE END USART6_Init 0 */

/* USER CODE BEGIN USART6_Init 1 */

/* USER CODE END USART6_Init 1 */
huart6.Instance = USART6;
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028ca:	4a23      	ldr	r2, [pc, #140]	; (8002958 <MX_USART6_UART_Init+0x94>)
 80028cc:	601a      	str	r2, [r3, #0]
huart6.Init.BaudRate = 115200;
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d4:	605a      	str	r2, [r3, #4]
huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
huart6.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
huart6.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
huart6.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <MX_USART6_UART_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	621a      	str	r2, [r3, #32]
huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <MX_USART6_UART_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	625a      	str	r2, [r3, #36]	; 0x24
huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <MX_USART6_UART_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
if (HAL_UART_Init(&huart6) != HAL_OK) {
 800290c:	4811      	ldr	r0, [pc, #68]	; (8002954 <MX_USART6_UART_Init+0x90>)
 800290e:	f00e ffe7 	bl	80118e0 <HAL_UART_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_USART6_UART_Init+0x58>
Error_Handler();
 8002918:	f000 f9e4 	bl	8002ce4 <Error_Handler>
}
if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 800291c:	2100      	movs	r1, #0
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <MX_USART6_UART_Init+0x90>)
 8002920:	f010 f8ed 	bl	8012afe <HAL_UARTEx_SetTxFifoThreshold>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_USART6_UART_Init+0x6a>
	!= HAL_OK) {
Error_Handler();
 800292a:	f000 f9db 	bl	8002ce4 <Error_Handler>
}
if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 800292e:	2100      	movs	r1, #0
 8002930:	4808      	ldr	r0, [pc, #32]	; (8002954 <MX_USART6_UART_Init+0x90>)
 8002932:	f010 f922 	bl	8012b7a <HAL_UARTEx_SetRxFifoThreshold>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_USART6_UART_Init+0x7c>
	!= HAL_OK) {
Error_Handler();
 800293c:	f000 f9d2 	bl	8002ce4 <Error_Handler>
}
if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <MX_USART6_UART_Init+0x90>)
 8002942:	f010 f8a3 	bl	8012a8c <HAL_UARTEx_DisableFifoMode>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_USART6_UART_Init+0x8c>
Error_Handler();
 800294c:	f000 f9ca 	bl	8002ce4 <Error_Handler>
}
/* USER CODE BEGIN USART6_Init 2 */

/* USER CODE END USART6_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	24001604 	.word	0x24001604
 8002958:	40011400 	.word	0x40011400

0800295c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0

/* DMA controller clock enable */
__HAL_RCC_DMA1_CLK_ENABLE();
 8002962:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <MX_DMA_Init+0xbc>)
 8002964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002968:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <MX_DMA_Init+0xbc>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002972:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <MX_DMA_Init+0xbc>)
 8002974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_DMA2_CLK_ENABLE();
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <MX_DMA_Init+0xbc>)
 8002982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002986:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <MX_DMA_Init+0xbc>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <MX_DMA_Init+0xbc>)
 8002992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

/* DMA interrupt init */
/* DMA1_Stream0_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	200b      	movs	r0, #11
 80029a4:	f003 fbb5 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80029a8:	200b      	movs	r0, #11
 80029aa:	f003 fbcc 	bl	8006146 <HAL_NVIC_EnableIRQ>
/* DMA1_Stream1_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	200c      	movs	r0, #12
 80029b4:	f003 fbad 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80029b8:	200c      	movs	r0, #12
 80029ba:	f003 fbc4 	bl	8006146 <HAL_NVIC_EnableIRQ>
/* DMA1_Stream2_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	200d      	movs	r0, #13
 80029c4:	f003 fba5 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80029c8:	200d      	movs	r0, #13
 80029ca:	f003 fbbc 	bl	8006146 <HAL_NVIC_EnableIRQ>
/* DMA1_Stream3_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	200e      	movs	r0, #14
 80029d4:	f003 fb9d 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029d8:	200e      	movs	r0, #14
 80029da:	f003 fbb4 	bl	8006146 <HAL_NVIC_EnableIRQ>
/* DMA1_Stream4_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	200f      	movs	r0, #15
 80029e4:	f003 fb95 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80029e8:	200f      	movs	r0, #15
 80029ea:	f003 fbac 	bl	8006146 <HAL_NVIC_EnableIRQ>
/* DMA1_Stream5_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	2010      	movs	r0, #16
 80029f4:	f003 fb8d 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029f8:	2010      	movs	r0, #16
 80029fa:	f003 fba4 	bl	8006146 <HAL_NVIC_EnableIRQ>
/* DMA2_Stream7_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	2046      	movs	r0, #70	; 0x46
 8002a04:	f003 fb85 	bl	8006112 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002a08:	2046      	movs	r0, #70	; 0x46
 8002a0a:	f003 fb9c 	bl	8006146 <HAL_NVIC_EnableIRQ>

}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	58024400 	.word	0x58024400

08002a1c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOE_CLK_ENABLE();
 8002a32:	4ba4      	ldr	r3, [pc, #656]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a38:	4aa2      	ldr	r2, [pc, #648]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a3a:	f043 0310 	orr.w	r3, r3, #16
 8002a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a42:	4ba0      	ldr	r3, [pc, #640]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8002a50:	4b9c      	ldr	r3, [pc, #624]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a56:	4a9b      	ldr	r2, [pc, #620]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a58:	f043 0320 	orr.w	r3, r3, #32
 8002a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a60:	4b98      	ldr	r3, [pc, #608]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
__HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6e:	4b95      	ldr	r3, [pc, #596]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	4a93      	ldr	r2, [pc, #588]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7e:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a92:	4a8c      	ldr	r2, [pc, #560]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a9c:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	4a84      	ldr	r2, [pc, #528]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aba:	4b82      	ldr	r3, [pc, #520]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOG_CLK_ENABLE();
 8002ac8:	4b7e      	ldr	r3, [pc, #504]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ace:	4a7d      	ldr	r2, [pc, #500]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad8:	4b7a      	ldr	r3, [pc, #488]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae6:	4b77      	ldr	r3, [pc, #476]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aec:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002aee:	f043 0308 	orr.w	r3, r3, #8
 8002af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af6:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <MX_GPIO_Init+0x2a8>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002b04:	2200      	movs	r2, #0
 8002b06:	f241 5104 	movw	r1, #5380	; 0x1504
 8002b0a:	486f      	ldr	r0, [pc, #444]	; (8002cc8 <MX_GPIO_Init+0x2ac>)
 8002b0c:	f006 f930 	bl	8008d70 <HAL_GPIO_WritePin>
	GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002b10:	2200      	movs	r2, #0
 8002b12:	f248 0102 	movw	r1, #32770	; 0x8002
 8002b16:	486d      	ldr	r0, [pc, #436]	; (8002ccc <MX_GPIO_Init+0x2b0>)
 8002b18:	f006 f92a 	bl	8008d70 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2130      	movs	r1, #48	; 0x30
 8002b20:	486b      	ldr	r0, [pc, #428]	; (8002cd0 <MX_GPIO_Init+0x2b4>)
 8002b22:	f006 f925 	bl	8008d70 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2102      	movs	r1, #2
 8002b2a:	486a      	ldr	r0, [pc, #424]	; (8002cd4 <MX_GPIO_Init+0x2b8>)
 8002b2c:	f006 f920 	bl	8008d70 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002b36:	4868      	ldr	r0, [pc, #416]	; (8002cd8 <MX_GPIO_Init+0x2bc>)
 8002b38:	f006 f91a 	bl	8008d70 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	210e      	movs	r1, #14
 8002b40:	4866      	ldr	r0, [pc, #408]	; (8002cdc <MX_GPIO_Init+0x2c0>)
 8002b42:	f006 f915 	bl	8008d70 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	f240 3101 	movw	r1, #769	; 0x301
 8002b4c:	4864      	ldr	r0, [pc, #400]	; (8002ce0 <MX_GPIO_Init+0x2c4>)
 8002b4e:	f006 f90f 	bl	8008d70 <HAL_GPIO_WritePin>

/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002b52:	f241 5304 	movw	r3, #5380	; 0x1504
 8002b56:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4857      	ldr	r0, [pc, #348]	; (8002cc8 <MX_GPIO_Init+0x2ac>)
 8002b6c:	f005 ff40 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : ARM1_Pin PA15 */
GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002b70:	f248 0302 	movw	r3, #32770	; 0x8002
 8002b74:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b76:	2301      	movs	r3, #1
 8002b78:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4850      	ldr	r0, [pc, #320]	; (8002ccc <MX_GPIO_Init+0x2b0>)
 8002b8a:	f005 ff31 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : PC4 PC5 */
GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002b8e:	2330      	movs	r3, #48	; 0x30
 8002b90:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b92:	2301      	movs	r3, #1
 8002b94:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9e:	f107 031c 	add.w	r3, r7, #28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	484a      	ldr	r0, [pc, #296]	; (8002cd0 <MX_GPIO_Init+0x2b4>)
 8002ba6:	f005 ff23 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pin : PYRO1_Pin */
GPIO_InitStruct.Pin = PYRO1_Pin;
 8002baa:	2302      	movs	r3, #2
 8002bac:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4844      	ldr	r0, [pc, #272]	; (8002cd4 <MX_GPIO_Init+0x2b8>)
 8002bc2:	f005 ff15 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pin : CONT1_Pin */
GPIO_InitStruct.Pin = CONT1_Pin;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	483e      	ldr	r0, [pc, #248]	; (8002cd4 <MX_GPIO_Init+0x2b8>)
 8002bda:	f005 ff09 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002bde:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002be2:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be4:	2301      	movs	r3, #1
 8002be6:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bf0:	f107 031c 	add.w	r3, r7, #28
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4838      	ldr	r0, [pc, #224]	; (8002cd8 <MX_GPIO_Init+0x2bc>)
 8002bf8:	f005 fefa 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002bfc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002c00:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4831      	ldr	r0, [pc, #196]	; (8002cd8 <MX_GPIO_Init+0x2bc>)
 8002c12:	f005 feed 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pin : CONT4_Pin */
GPIO_InitStruct.Pin = CONT4_Pin;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	4619      	mov	r1, r3
 8002c28:	482c      	ldr	r0, [pc, #176]	; (8002cdc <MX_GPIO_Init+0x2c0>)
 8002c2a:	f005 fee1 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002c2e:	230e      	movs	r3, #14
 8002c30:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4825      	ldr	r0, [pc, #148]	; (8002cdc <MX_GPIO_Init+0x2c0>)
 8002c46:	f005 fed3 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002c4a:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002c4e:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c50:	2300      	movs	r3, #0
 8002c52:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	481a      	ldr	r0, [pc, #104]	; (8002cc8 <MX_GPIO_Init+0x2ac>)
 8002c60:	f005 fec6 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pins : PD8 PD9 PD0 */
GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002c64:	f240 3301 	movw	r3, #769	; 0x301
 8002c68:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <MX_GPIO_Init+0x2c4>)
 8002c7e:	f005 feb7 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002c82:	2310      	movs	r3, #16
 8002c84:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4619      	mov	r1, r3
 8002c94:	4811      	ldr	r0, [pc, #68]	; (8002cdc <MX_GPIO_Init+0x2c0>)
 8002c96:	f005 feab 	bl	80089f0 <HAL_GPIO_Init>

/*Configure GPIO pin : PA8 */
GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9e:	61fb      	str	r3, [r7, #28]
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	623b      	str	r3, [r7, #32]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <MX_GPIO_Init+0x2b0>)
 8002cb8:	f005 fe9a 	bl	80089f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cbc:	bf00      	nop
 8002cbe:	3730      	adds	r7, #48	; 0x30
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	58021000 	.word	0x58021000
 8002ccc:	58020000 	.word	0x58020000
 8002cd0:	58020800 	.word	0x58020800
 8002cd4:	58020400 	.word	0x58020400
 8002cd8:	58021400 	.word	0x58021400
 8002cdc:	58021800 	.word	0x58021800
 8002ce0:	58020c00 	.word	0x58020c00

08002ce4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce8:	b672      	cpsid	i
}
 8002cea:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002cec:	e7fe      	b.n	8002cec <Error_Handler+0x8>
	...

08002cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_MspInit+0x30>)
 8002cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cfc:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_MspInit+0x30>)
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_MspInit+0x30>)
 8002d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	58024400 	.word	0x58024400

08002d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <HAL_ADC_MspInit+0x194>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d159      	bne.n	8002dfa <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d4c:	4a5b      	ldr	r2, [pc, #364]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002d4e:	f043 0320 	orr.w	r3, r3, #32
 8002d52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d56:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002d58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	4b55      	ldr	r3, [pc, #340]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d74:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d82:	2304      	movs	r3, #4
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d86:	2303      	movs	r3, #3
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	484a      	ldr	r0, [pc, #296]	; (8002ec0 <HAL_ADC_MspInit+0x19c>)
 8002d96:	f005 fe2b 	bl	80089f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	; (8002ec8 <HAL_ADC_MspInit+0x1a4>)
 8002d9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002da0:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002da2:	2209      	movs	r2, #9
 8002da4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002db2:	4b44      	ldr	r3, [pc, #272]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dba:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc2:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ddc:	4839      	ldr	r0, [pc, #228]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002dde:	f003 f9cd 	bl	800617c <HAL_DMA_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002de8:	f7ff ff7c 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a35      	ldr	r2, [pc, #212]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58
 8002df2:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_ADC_MspInit+0x1a0>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002df8:	e059      	b.n	8002eae <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <HAL_ADC_MspInit+0x1a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d154      	bne.n	8002eae <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e28:	4a24      	ldr	r2, [pc, #144]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_ADC_MspInit+0x198>)
 8002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002e40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002e44:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002e48:	f001 f8b6 	bl	8003fb8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_ADC_MspInit+0x1b0>)
 8002e50:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002e52:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e54:	2273      	movs	r2, #115	; 0x73
 8002e56:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e72:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e8a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e92:	480f      	ldr	r0, [pc, #60]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002e94:	f003 f972 	bl	800617c <HAL_DMA_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002e9e:	f7ff ff21 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_ADC_MspInit+0x1ac>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002eae:	bf00      	nop
 8002eb0:	3730      	adds	r7, #48	; 0x30
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	58020000 	.word	0x58020000
 8002ec4:	24000d58 	.word	0x24000d58
 8002ec8:	40020088 	.word	0x40020088
 8002ecc:	58026000 	.word	0x58026000
 8002ed0:	24000dd0 	.word	0x24000dd0
 8002ed4:	400204b8 	.word	0x400204b8

08002ed8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0b8      	sub	sp, #224	; 0xe0
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	22b8      	movs	r2, #184	; 0xb8
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f017 ff19 	bl	801ad30 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a26      	ldr	r2, [pc, #152]	; (8002f9c <HAL_FDCAN_MspInit+0xc4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d145      	bne.n	8002f94 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002f08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f18:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f008 fb54 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002f2a:	f7ff fedb 	bl	8002ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_FDCAN_MspInit+0xc8>)
 8002f30:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f34:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_FDCAN_MspInit+0xc8>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_FDCAN_MspInit+0xc8>)
 8002f40:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_FDCAN_MspInit+0xc8>)
 8002f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_FDCAN_MspInit+0xc8>)
 8002f54:	f043 0320 	orr.w	r3, r3, #32
 8002f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_FDCAN_MspInit+0xc8>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f6a:	23c0      	movs	r3, #192	; 0xc0
 8002f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <HAL_FDCAN_MspInit+0xcc>)
 8002f90:	f005 fd2e 	bl	80089f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002f94:	bf00      	nop
 8002f96:	37e0      	adds	r7, #224	; 0xe0
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	4000d400 	.word	0x4000d400
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	58021400 	.word	0x58021400

08002fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b0b8      	sub	sp, #224	; 0xe0
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	22b8      	movs	r2, #184	; 0xb8
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f017 feb1 	bl	801ad30 <memset>
  if(hi2c->Instance==I2C2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_I2C_MspInit+0xd4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d14d      	bne.n	8003074 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002fd8:	f04f 0208 	mov.w	r2, #8
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f008 faec 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002ffa:	f7ff fe73 	bl	8002ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_I2C_MspInit+0xd8>)
 8003000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_I2C_MspInit+0xd8>)
 8003006:	f043 0320 	orr.w	r3, r3, #32
 800300a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_I2C_MspInit+0xd8>)
 8003010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800301c:	2303      	movs	r3, #3
 800301e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003022:	2312      	movs	r3, #18
 8003024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003034:	2304      	movs	r3, #4
 8003036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800303a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800303e:	4619      	mov	r1, r3
 8003040:	4810      	ldr	r0, [pc, #64]	; (8003084 <HAL_I2C_MspInit+0xdc>)
 8003042:	f005 fcd5 	bl	80089f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_I2C_MspInit+0xd8>)
 8003048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800304c:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <HAL_I2C_MspInit+0xd8>)
 800304e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003052:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_I2C_MspInit+0xd8>)
 8003058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	2101      	movs	r1, #1
 8003068:	2021      	movs	r0, #33	; 0x21
 800306a:	f003 f852 	bl	8006112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800306e:	2021      	movs	r0, #33	; 0x21
 8003070:	f003 f869 	bl	8006146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003074:	bf00      	nop
 8003076:	37e0      	adds	r7, #224	; 0xe0
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40005800 	.word	0x40005800
 8003080:	58024400 	.word	0x58024400
 8003084:	58021400 	.word	0x58021400

08003088 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0ba      	sub	sp, #232	; 0xe8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	22b8      	movs	r2, #184	; 0xb8
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f017 fe41 	bl	801ad30 <memset>
  if(hsd->Instance==SDMMC2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5d      	ldr	r2, [pc, #372]	; (8003228 <HAL_SD_MspInit+0x1a0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	f040 80b3 	bne.w	8003220 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80030ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ca:	f107 0318 	add.w	r3, r7, #24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f008 fa7c 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80030da:	f7ff fe03 	bl	8002ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_SD_MspInit+0x1a4>)
 80030e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030e4:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_SD_MspInit+0x1a4>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80030ee:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_SD_MspInit+0x1a4>)
 80030f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_SD_MspInit+0x1a4>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003102:	4a4a      	ldr	r2, [pc, #296]	; (800322c <HAL_SD_MspInit+0x1a4>)
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310c:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_SD_MspInit+0x1a4>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_SD_MspInit+0x1a4>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_SD_MspInit+0x1a4>)
 8003122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800312a:	4b40      	ldr	r3, [pc, #256]	; (800322c <HAL_SD_MspInit+0x1a4>)
 800312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003138:	2340      	movs	r3, #64	; 0x40
 800313a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314a:	2303      	movs	r3, #3
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003150:	230b      	movs	r3, #11
 8003152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003156:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800315a:	4619      	mov	r1, r3
 800315c:	4834      	ldr	r0, [pc, #208]	; (8003230 <HAL_SD_MspInit+0x1a8>)
 800315e:	f005 fc47 	bl	80089f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316e:	2301      	movs	r3, #1
 8003170:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800317a:	230b      	movs	r3, #11
 800317c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003180:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003184:	4619      	mov	r1, r3
 8003186:	482a      	ldr	r0, [pc, #168]	; (8003230 <HAL_SD_MspInit+0x1a8>)
 8003188:	f005 fc32 	bl	80089f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800318c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800319a:	2301      	movs	r3, #1
 800319c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80031a6:	230b      	movs	r3, #11
 80031a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4820      	ldr	r0, [pc, #128]	; (8003234 <HAL_SD_MspInit+0x1ac>)
 80031b4:	f005 fc1c 	bl	80089f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80031d2:	230b      	movs	r3, #11
 80031d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031dc:	4619      	mov	r1, r3
 80031de:	4815      	ldr	r0, [pc, #84]	; (8003234 <HAL_SD_MspInit+0x1ac>)
 80031e0:	f005 fc06 	bl	80089f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80031fe:	230a      	movs	r3, #10
 8003200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003208:	4619      	mov	r1, r3
 800320a:	480a      	ldr	r0, [pc, #40]	; (8003234 <HAL_SD_MspInit+0x1ac>)
 800320c:	f005 fbf0 	bl	80089f0 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	207c      	movs	r0, #124	; 0x7c
 8003216:	f002 ff7c 	bl	8006112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800321a:	207c      	movs	r0, #124	; 0x7c
 800321c:	f002 ff93 	bl	8006146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003220:	bf00      	nop
 8003222:	37e8      	adds	r7, #232	; 0xe8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	48022400 	.word	0x48022400
 800322c:	58024400 	.word	0x58024400
 8003230:	58020c00 	.word	0x58020c00
 8003234:	58021800 	.word	0x58021800

08003238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08e      	sub	sp, #56	; 0x38
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a4f      	ldr	r2, [pc, #316]	; (8003394 <HAL_SPI_MspInit+0x15c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12e      	bne.n	80032b8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800325a:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800325c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <HAL_SPI_MspInit+0x160>)
 8003262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003266:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800326c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800327a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327e:	4a46      	ldr	r2, [pc, #280]	; (8003398 <HAL_SPI_MspInit+0x160>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003288:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800328a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003296:	23e0      	movs	r3, #224	; 0xe0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032a6:	2305      	movs	r3, #5
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ae:	4619      	mov	r1, r3
 80032b0:	483a      	ldr	r0, [pc, #232]	; (800339c <HAL_SPI_MspInit+0x164>)
 80032b2:	f005 fb9d 	bl	80089f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80032b6:	e068      	b.n	800338a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <HAL_SPI_MspInit+0x168>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12f      	bne.n	8003322 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032c2:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_SPI_MspInit+0x160>)
 80032c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c8:	4a33      	ldr	r2, [pc, #204]	; (8003398 <HAL_SPI_MspInit+0x160>)
 80032ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032d2:	4b31      	ldr	r3, [pc, #196]	; (8003398 <HAL_SPI_MspInit+0x160>)
 80032d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e0:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_SPI_MspInit+0x160>)
 80032e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <HAL_SPI_MspInit+0x160>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f0:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_SPI_MspInit+0x160>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003310:	2305      	movs	r3, #5
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003318:	4619      	mov	r1, r3
 800331a:	4822      	ldr	r0, [pc, #136]	; (80033a4 <HAL_SPI_MspInit+0x16c>)
 800331c:	f005 fb68 	bl	80089f0 <HAL_GPIO_Init>
}
 8003320:	e033      	b.n	800338a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <HAL_SPI_MspInit+0x170>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d12e      	bne.n	800338a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800332e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003332:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_SPI_MspInit+0x160>)
 8003334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003338:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800333e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800334a:	4b13      	ldr	r3, [pc, #76]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <HAL_SPI_MspInit+0x160>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_SPI_MspInit+0x160>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003368:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800337a:	2306      	movs	r3, #6
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003382:	4619      	mov	r1, r3
 8003384:	4809      	ldr	r0, [pc, #36]	; (80033ac <HAL_SPI_MspInit+0x174>)
 8003386:	f005 fb33 	bl	80089f0 <HAL_GPIO_Init>
}
 800338a:	bf00      	nop
 800338c:	3738      	adds	r7, #56	; 0x38
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40013000 	.word	0x40013000
 8003398:	58024400 	.word	0x58024400
 800339c:	58020000 	.word	0x58020000
 80033a0:	40003800 	.word	0x40003800
 80033a4:	58020400 	.word	0x58020400
 80033a8:	40003c00 	.word	0x40003c00
 80033ac:	58020800 	.word	0x58020800

080033b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 031c 	add.w	r3, r7, #28
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d15d      	bne.n	800348e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033d2:	4b8e      	ldr	r3, [pc, #568]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80033d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033d8:	4a8c      	ldr	r2, [pc, #560]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033e2:	4b8a      	ldr	r3, [pc, #552]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80033e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f0:	4b86      	ldr	r3, [pc, #536]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80033f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f6:	4a85      	ldr	r2, [pc, #532]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003400:	4b82      	ldr	r3, [pc, #520]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 8003402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800341e:	2301      	movs	r3, #1
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	4619      	mov	r1, r3
 8003428:	4879      	ldr	r0, [pc, #484]	; (8003610 <HAL_TIM_PWM_MspInit+0x260>)
 800342a:	f005 fae1 	bl	80089f0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800342e:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003430:	4a79      	ldr	r2, [pc, #484]	; (8003618 <HAL_TIM_PWM_MspInit+0x268>)
 8003432:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003434:	4b77      	ldr	r3, [pc, #476]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003436:	2214      	movs	r2, #20
 8003438:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 800343c:	2240      	movs	r2, #64	; 0x40
 800343e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003440:	4b74      	ldr	r3, [pc, #464]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003446:	4b73      	ldr	r3, [pc, #460]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800344c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800344e:	4b71      	ldr	r3, [pc, #452]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003454:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800345c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003460:	2200      	movs	r2, #0
 8003462:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003464:	4b6b      	ldr	r3, [pc, #428]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003466:	2200      	movs	r2, #0
 8003468:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800346a:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 800346c:	2200      	movs	r2, #0
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003470:	4868      	ldr	r0, [pc, #416]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003472:	f002 fe83 	bl	800617c <HAL_DMA_Init>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800347c:	f7ff fc32 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a64      	ldr	r2, [pc, #400]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c
 8003486:	4a63      	ldr	r2, [pc, #396]	; (8003614 <HAL_TIM_PWM_MspInit+0x264>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800348c:	e119      	b.n	80036c2 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a62      	ldr	r2, [pc, #392]	; (800361c <HAL_TIM_PWM_MspInit+0x26c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d16d      	bne.n	8003574 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003498:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 800349a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349e:	4a5b      	ldr	r2, [pc, #364]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034a8:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 80034aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80034b6:	4b5a      	ldr	r3, [pc, #360]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034b8:	4a5a      	ldr	r2, [pc, #360]	; (8003624 <HAL_TIM_PWM_MspInit+0x274>)
 80034ba:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80034bc:	4b58      	ldr	r3, [pc, #352]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034be:	2218      	movs	r2, #24
 80034c0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c2:	4b57      	ldr	r3, [pc, #348]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034c4:	2240      	movs	r2, #64	; 0x40
 80034c6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	4b54      	ldr	r3, [pc, #336]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034d6:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034dc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034de:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034e4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80034e6:	4b4e      	ldr	r3, [pc, #312]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80034ec:	4b4c      	ldr	r3, [pc, #304]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f2:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80034f8:	4849      	ldr	r0, [pc, #292]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 80034fa:	f002 fe3f 	bl	800617c <HAL_DMA_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003504:	f7ff fbee 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a45      	ldr	r2, [pc, #276]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
 800350e:	4a44      	ldr	r2, [pc, #272]	; (8003620 <HAL_TIM_PWM_MspInit+0x270>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003514:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003516:	4a45      	ldr	r2, [pc, #276]	; (800362c <HAL_TIM_PWM_MspInit+0x27c>)
 8003518:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800351a:	4b43      	ldr	r3, [pc, #268]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 800351c:	2217      	movs	r2, #23
 800351e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003520:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003526:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003528:	2200      	movs	r2, #0
 800352a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800352c:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 800352e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003532:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003534:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800353a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800353c:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 800353e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003542:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003544:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003546:	2200      	movs	r2, #0
 8003548:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 800354c:	2200      	movs	r2, #0
 800354e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003552:	2200      	movs	r2, #0
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003556:	4834      	ldr	r0, [pc, #208]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 8003558:	f002 fe10 	bl	800617c <HAL_DMA_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003562:	f7ff fbbf 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
 800356c:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <HAL_TIM_PWM_MspInit+0x278>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003572:	e0a6      	b.n	80036c2 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2d      	ldr	r2, [pc, #180]	; (8003630 <HAL_TIM_PWM_MspInit+0x280>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d15e      	bne.n	800363c <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 8003580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003584:	4a21      	ldr	r2, [pc, #132]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800358e:	4b1f      	ldr	r3, [pc, #124]	; (800360c <HAL_TIM_PWM_MspInit+0x25c>)
 8003590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 800359e:	4a26      	ldr	r2, [pc, #152]	; (8003638 <HAL_TIM_PWM_MspInit+0x288>)
 80035a0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035a4:	221f      	movs	r2, #31
 80035a6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ba:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035c2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ca:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d8:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035da:	2200      	movs	r2, #0
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80035de:	4815      	ldr	r0, [pc, #84]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035e0:	f002 fdcc 	bl	800617c <HAL_DMA_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80035ea:	f7ff fb7b 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f4:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <HAL_TIM_PWM_MspInit+0x284>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	201e      	movs	r0, #30
 8003600:	f002 fd87 	bl	8006112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003604:	201e      	movs	r0, #30
 8003606:	f002 fd9e 	bl	8006146 <HAL_NVIC_EnableIRQ>
}
 800360a:	e05a      	b.n	80036c2 <HAL_TIM_PWM_MspInit+0x312>
 800360c:	58024400 	.word	0x58024400
 8003610:	58020000 	.word	0x58020000
 8003614:	24001318 	.word	0x24001318
 8003618:	40020028 	.word	0x40020028
 800361c:	40000400 	.word	0x40000400
 8003620:	24001390 	.word	0x24001390
 8003624:	40020058 	.word	0x40020058
 8003628:	24001408 	.word	0x24001408
 800362c:	40020070 	.word	0x40020070
 8003630:	40000800 	.word	0x40000800
 8003634:	24001480 	.word	0x24001480
 8003638:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_TIM_PWM_MspInit+0x31c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d13d      	bne.n	80036c2 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_TIM_PWM_MspInit+0x320>)
 8003648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <HAL_TIM_PWM_MspInit+0x320>)
 800364e:	f043 0308 	orr.w	r3, r3, #8
 8003652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <HAL_TIM_PWM_MspInit+0x320>)
 8003658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_TIM_PWM_MspInit+0x328>)
 8003668:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 800366c:	223a      	movs	r2, #58	; 0x3a
 800366e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800367c:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 800367e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003682:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 8003686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800368a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 800368e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003692:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 8003696:	2200      	movs	r2, #0
 8003698:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80036a6:	480b      	ldr	r0, [pc, #44]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 80036a8:	f002 fd68 	bl	800617c <HAL_DMA_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80036b2:	f7ff fb17 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <HAL_TIM_PWM_MspInit+0x324>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036c2:	bf00      	nop
 80036c4:	3730      	adds	r7, #48	; 0x30
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	58024400 	.word	0x58024400
 80036d4:	240014f8 	.word	0x240014f8
 80036d8:	40020040 	.word	0x40020040

080036dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_TIM_Base_MspInit+0x68>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10f      	bne.n	800370e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_TIM_Base_MspInit+0x6c>)
 80036f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIM_Base_MspInit+0x6c>)
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_TIM_Base_MspInit+0x6c>)
 8003700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800370c:	e013      	b.n	8003736 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a0e      	ldr	r2, [pc, #56]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10e      	bne.n	8003736 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_TIM_Base_MspInit+0x6c>)
 800371a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_TIM_Base_MspInit+0x6c>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_TIM_Base_MspInit+0x6c>)
 800372a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40001c00 	.word	0x40001c00
 8003748:	58024400 	.word	0x58024400
 800374c:	40002000 	.word	0x40002000

08003750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d120      	bne.n	80037b4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003772:	4b52      	ldr	r3, [pc, #328]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 8003774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003778:	4a50      	ldr	r2, [pc, #320]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003782:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 8003784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800379a:	2302      	movs	r3, #2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037a2:	2301      	movs	r3, #1
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	4844      	ldr	r0, [pc, #272]	; (80038c0 <HAL_TIM_MspPostInit+0x170>)
 80037ae:	f005 f91f 	bl	80089f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80037b2:	e07f      	b.n	80038b4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a42      	ldr	r2, [pc, #264]	; (80038c4 <HAL_TIM_MspPostInit+0x174>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d11f      	bne.n	80037fe <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	4b3f      	ldr	r3, [pc, #252]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 80037c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c4:	4a3d      	ldr	r2, [pc, #244]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 80037c6:	f043 0302 	orr.w	r3, r3, #2
 80037ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 80037d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037dc:	2330      	movs	r3, #48	; 0x30
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037e4:	2302      	movs	r3, #2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ec:	2302      	movs	r3, #2
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	4619      	mov	r1, r3
 80037f6:	4832      	ldr	r0, [pc, #200]	; (80038c0 <HAL_TIM_MspPostInit+0x170>)
 80037f8:	f005 f8fa 	bl	80089f0 <HAL_GPIO_Init>
}
 80037fc:	e05a      	b.n	80038b4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_TIM_MspPostInit+0x178>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d131      	bne.n	800386c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003808:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 800380a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800380e:	4a2b      	ldr	r2, [pc, #172]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003818:	4b28      	ldr	r3, [pc, #160]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 800381a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003826:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800382a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382c:	2302      	movs	r3, #2
 800382e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	2300      	movs	r3, #0
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003838:	2302      	movs	r3, #2
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800383c:	f107 031c 	add.w	r3, r7, #28
 8003840:	4619      	mov	r1, r3
 8003842:	4822      	ldr	r0, [pc, #136]	; (80038cc <HAL_TIM_MspPostInit+0x17c>)
 8003844:	f005 f8d4 	bl	80089f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800384c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003852:	2302      	movs	r3, #2
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800385a:	2302      	movs	r3, #2
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	4819      	ldr	r0, [pc, #100]	; (80038cc <HAL_TIM_MspPostInit+0x17c>)
 8003866:	f005 f8c3 	bl	80089f0 <HAL_GPIO_Init>
}
 800386a:	e023      	b.n	80038b4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_TIM_MspPostInit+0x180>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d11e      	bne.n	80038b4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 8003878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387c:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_TIM_MspPostInit+0x16c>)
 8003888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003894:	2308      	movs	r3, #8
 8003896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800389c:	2302      	movs	r3, #2
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038a4:	2302      	movs	r3, #2
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f107 031c 	add.w	r3, r7, #28
 80038ac:	4619      	mov	r1, r3
 80038ae:	4809      	ldr	r0, [pc, #36]	; (80038d4 <HAL_TIM_MspPostInit+0x184>)
 80038b0:	f005 f89e 	bl	80089f0 <HAL_GPIO_Init>
}
 80038b4:	bf00      	nop
 80038b6:	3730      	adds	r7, #48	; 0x30
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	58024400 	.word	0x58024400
 80038c0:	58020400 	.word	0x58020400
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800
 80038cc:	58020c00 	.word	0x58020c00
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	58020000 	.word	0x58020000

080038d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b0ba      	sub	sp, #232	; 0xe8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	22b8      	movs	r2, #184	; 0xb8
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f017 fa19 	bl	801ad30 <memset>
  if(huart->Instance==UART4)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a4d      	ldr	r2, [pc, #308]	; (8003a38 <HAL_UART_MspInit+0x160>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d147      	bne.n	8003998 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003908:	f04f 0202 	mov.w	r2, #2
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391a:	f107 0318 	add.w	r3, r7, #24
 800391e:	4618      	mov	r0, r3
 8003920:	f007 fe54 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800392a:	f7ff f9db 	bl	8002ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800392e:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <HAL_UART_MspInit+0x164>)
 8003930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003934:	4a41      	ldr	r2, [pc, #260]	; (8003a3c <HAL_UART_MspInit+0x164>)
 8003936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800393a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800393e:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_UART_MspInit+0x164>)
 8003940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_UART_MspInit+0x164>)
 800394e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003952:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <HAL_UART_MspInit+0x164>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_UART_MspInit+0x164>)
 800395e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800396a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800396e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003984:	2308      	movs	r3, #8
 8003986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800398e:	4619      	mov	r1, r3
 8003990:	482b      	ldr	r0, [pc, #172]	; (8003a40 <HAL_UART_MspInit+0x168>)
 8003992:	f005 f82d 	bl	80089f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003996:	e04a      	b.n	8003a2e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <HAL_UART_MspInit+0x16c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d145      	bne.n	8003a2e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80039a2:	f04f 0201 	mov.w	r2, #1
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039b4:	f107 0318 	add.w	r3, r7, #24
 80039b8:	4618      	mov	r0, r3
 80039ba:	f007 fe07 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80039c4:	f7ff f98e 	bl	8002ce4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <HAL_UART_MspInit+0x164>)
 80039ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <HAL_UART_MspInit+0x164>)
 80039d0:	f043 0320 	orr.w	r3, r3, #32
 80039d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_UART_MspInit+0x164>)
 80039da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_UART_MspInit+0x164>)
 80039e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ec:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_UART_MspInit+0x164>)
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_UART_MspInit+0x164>)
 80039f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a04:	23c0      	movs	r3, #192	; 0xc0
 8003a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003a1c:	2307      	movs	r3, #7
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4807      	ldr	r0, [pc, #28]	; (8003a48 <HAL_UART_MspInit+0x170>)
 8003a2a:	f004 ffe1 	bl	80089f0 <HAL_GPIO_Init>
}
 8003a2e:	bf00      	nop
 8003a30:	37e8      	adds	r7, #232	; 0xe8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40004c00 	.word	0x40004c00
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	58020400 	.word	0x58020400
 8003a44:	40011400 	.word	0x40011400
 8003a48:	58020800 	.word	0x58020800

08003a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a50:	e7fe      	b.n	8003a50 <NMI_Handler+0x4>

08003a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a56:	e7fe      	b.n	8003a56 <HardFault_Handler+0x4>

08003a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a5c:	e7fe      	b.n	8003a5c <MemManage_Handler+0x4>

08003a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a62:	e7fe      	b.n	8003a62 <BusFault_Handler+0x4>

08003a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a68:	e7fe      	b.n	8003a68 <UsageFault_Handler+0x4>

08003a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a98:	f000 fa4a 	bl	8003f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <DMA1_Stream0_IRQHandler+0x10>)
 8003aa6:	f003 f92d 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	24001480 	.word	0x24001480

08003ab4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <DMA1_Stream1_IRQHandler+0x10>)
 8003aba:	f003 f923 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	24001318 	.word	0x24001318

08003ac8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <DMA1_Stream2_IRQHandler+0x10>)
 8003ace:	f003 f919 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	240014f8 	.word	0x240014f8

08003adc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <DMA1_Stream3_IRQHandler+0x10>)
 8003ae2:	f003 f90f 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	24001390 	.word	0x24001390

08003af0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <DMA1_Stream4_IRQHandler+0x10>)
 8003af6:	f003 f905 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	24001408 	.word	0x24001408

08003b04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <DMA1_Stream5_IRQHandler+0x10>)
 8003b0a:	f003 f8fb 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	24000d58 	.word	0x24000d58

08003b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <TIM4_IRQHandler+0x10>)
 8003b1e:	f00c ff37 	bl	8010990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	240011e8 	.word	0x240011e8

08003b2c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <I2C2_EV_IRQHandler+0x10>)
 8003b32:	f005 f9c7 	bl	8008ec4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	24000ee8 	.word	0x24000ee8

08003b40 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <DMA2_Stream7_IRQHandler+0x10>)
 8003b46:	f003 f8dd 	bl	8006d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	24000dd0 	.word	0x24000dd0

08003b54 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <OTG_HS_IRQHandler+0x10>)
 8003b5a:	f005 fbbd 	bl	80092d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	24002dc4 	.word	0x24002dc4

08003b68 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003b6c:	4802      	ldr	r0, [pc, #8]	; (8003b78 <SDMMC2_IRQHandler+0x10>)
 8003b6e:	f00a fb83 	bl	800e278 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	24000f3c 	.word	0x24000f3c

08003b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return 1;
 8003b80:	2301      	movs	r3, #1
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_kill>:

int _kill(int pid, int sig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b96:	f017 f893 	bl	801acc0 <__errno>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2216      	movs	r2, #22
 8003b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_exit>:

void _exit (int status)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ffe7 	bl	8003b8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bbe:	e7fe      	b.n	8003bbe <_exit+0x12>

08003bc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e00a      	b.n	8003be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bd2:	f3af 8000 	nop.w
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	b2ca      	uxtb	r2, r1
 8003be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dbf0      	blt.n	8003bd2 <_read+0x12>
  }

  return len;
 8003bf0:	687b      	ldr	r3, [r7, #4]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e009      	b.n	8003c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	60ba      	str	r2, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dbf1      	blt.n	8003c0c <_write+0x12>
  }
  return len;
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_close>:

int _close(int file)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <_isatty>:

int _isatty(int file)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c72:	2301      	movs	r3, #1
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <_sbrk+0x5c>)
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <_sbrk+0x60>)
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <_sbrk+0x64>)
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <_sbrk+0x68>)
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <_sbrk+0x64>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d207      	bcs.n	8003cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ccc:	f016 fff8 	bl	801acc0 <__errno>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	220c      	movs	r2, #12
 8003cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	e009      	b.n	8003cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <_sbrk+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <_sbrk+0x64>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <_sbrk+0x64>)
 8003cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cee:	68fb      	ldr	r3, [r7, #12]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	24050000 	.word	0x24050000
 8003cfc:	00000800 	.word	0x00000800
 8003d00:	24001698 	.word	0x24001698
 8003d04:	24003500 	.word	0x24003500

08003d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d0c:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <SystemInit+0xd0>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <SystemInit+0xd0>)
 8003d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <SystemInit+0xd4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d807      	bhi.n	8003d38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d28:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <SystemInit+0xd4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 030f 	bic.w	r3, r3, #15
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <SystemInit+0xd4>)
 8003d32:	f043 0307 	orr.w	r3, r3, #7
 8003d36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d38:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <SystemInit+0xd8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a28      	ldr	r2, [pc, #160]	; (8003de0 <SystemInit+0xd8>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d44:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <SystemInit+0xd8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <SystemInit+0xd8>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4924      	ldr	r1, [pc, #144]	; (8003de0 <SystemInit+0xd8>)
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <SystemInit+0xdc>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <SystemInit+0xd4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <SystemInit+0xd4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 030f 	bic.w	r3, r3, #15
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <SystemInit+0xd4>)
 8003d6c:	f043 0307 	orr.w	r3, r3, #7
 8003d70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <SystemInit+0xd8>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <SystemInit+0xd8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d7e:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <SystemInit+0xd8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <SystemInit+0xd8>)
 8003d86:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <SystemInit+0xe0>)
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <SystemInit+0xd8>)
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <SystemInit+0xe4>)
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <SystemInit+0xd8>)
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <SystemInit+0xe8>)
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <SystemInit+0xd8>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <SystemInit+0xd8>)
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <SystemInit+0xe8>)
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <SystemInit+0xd8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <SystemInit+0xd8>)
 8003daa:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <SystemInit+0xe8>)
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <SystemInit+0xd8>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <SystemInit+0xd8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <SystemInit+0xd8>)
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <SystemInit+0xd8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <SystemInit+0xec>)
 8003dc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003dcc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00
 8003ddc:	52002000 	.word	0x52002000
 8003de0:	58024400 	.word	0x58024400
 8003de4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003de8:	02020200 	.word	0x02020200
 8003dec:	01ff0000 	.word	0x01ff0000
 8003df0:	01010280 	.word	0x01010280
 8003df4:	52004000 	.word	0x52004000

08003df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dfc:	f7ff ff84 	bl	8003d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e00:	480c      	ldr	r0, [pc, #48]	; (8003e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e02:	490d      	ldr	r1, [pc, #52]	; (8003e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e08:	e002      	b.n	8003e10 <LoopCopyDataInit>

08003e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0e:	3304      	adds	r3, #4

08003e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e14:	d3f9      	bcc.n	8003e0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e18:	4c0a      	ldr	r4, [pc, #40]	; (8003e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e1c:	e001      	b.n	8003e22 <LoopFillZerobss>

08003e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e20:	3204      	adds	r2, #4

08003e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e24:	d3fb      	bcc.n	8003e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e26:	f016 ff51 	bl	801accc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e2a:	f7fd fb8f 	bl	800154c <main>
  bx  lr
 8003e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e30:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003e34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e38:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8003e3c:	0802002c 	.word	0x0802002c
  ldr r2, =_sbss
 8003e40:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8003e44:	24003500 	.word	0x24003500

08003e48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC3_IRQHandler>
	...

08003e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e52:	2003      	movs	r0, #3
 8003e54:	f002 f952 	bl	80060fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e58:	f007 f9e2 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_Init+0x68>)
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	4913      	ldr	r1, [pc, #76]	; (8003eb8 <HAL_Init+0x6c>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_Init+0x68>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_Init+0x6c>)
 8003e80:	5cd3      	ldrb	r3, [r2, r3]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8c:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <HAL_Init+0x70>)
 8003e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e90:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <HAL_Init+0x74>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e96:	200f      	movs	r0, #15
 8003e98:	f000 f814 	bl	8003ec4 <HAL_InitTick>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e002      	b.n	8003eac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea6:	f7fe ff23 	bl	8002cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	0801f6e4 	.word	0x0801f6e4
 8003ebc:	24000004 	.word	0x24000004
 8003ec0:	24000000 	.word	0x24000000

08003ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_InitTick+0x60>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e021      	b.n	8003f1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_InitTick+0x64>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_InitTick+0x60>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 f937 	bl	8006162 <HAL_SYSTICK_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00e      	b.n	8003f1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b0f      	cmp	r3, #15
 8003f02:	d80a      	bhi.n	8003f1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f04:	2200      	movs	r2, #0
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	f002 f901 	bl	8006112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f10:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <HAL_InitTick+0x68>)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	2400000c 	.word	0x2400000c
 8003f28:	24000000 	.word	0x24000000
 8003f2c:	24000008 	.word	0x24000008

08003f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_IncTick+0x20>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_IncTick+0x24>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_IncTick+0x24>)
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2400000c 	.word	0x2400000c
 8003f54:	2400169c 	.word	0x2400169c

08003f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_GetTick+0x14>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	2400169c 	.word	0x2400169c

08003f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff ffee 	bl	8003f58 <HAL_GetTick>
 8003f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d005      	beq.n	8003f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_Delay+0x44>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f96:	bf00      	nop
 8003f98:	f7ff ffde 	bl	8003f58 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d8f7      	bhi.n	8003f98 <HAL_Delay+0x28>
  {
  }
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2400000c 	.word	0x2400000c

08003fb8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	401a      	ands	r2, r3
 8003fcc:	4904      	ldr	r1, [pc, #16]	; (8003fe0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	58000400 	.word	0x58000400

08003fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3360      	adds	r3, #96	; 0x60
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <LL_ADC_SetOffset+0x60>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10b      	bne.n	8004088 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004086:	e00b      	b.n	80040a0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	431a      	orrs	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	601a      	str	r2, [r3, #0]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	58026000 	.word	0x58026000

080040b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3360      	adds	r3, #96	; 0x60
 80040be:	461a      	mov	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	611a      	str	r2, [r3, #16]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3360      	adds	r3, #96	; 0x60
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	431a      	orrs	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	601a      	str	r2, [r3, #0]
  }
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	58026000 	.word	0x58026000

08004154 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <LL_ADC_SetOffsetSaturation+0x40>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d10e      	bne.n	8004186 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3360      	adds	r3, #96	; 0x60
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58026000 	.word	0x58026000

08004198 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <LL_ADC_SetOffsetSign+0x40>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10e      	bne.n	80041ca <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3360      	adds	r3, #96	; 0x60
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58026000 	.word	0x58026000

080041dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3360      	adds	r3, #96	; 0x60
 80041ec:	461a      	mov	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a0c      	ldr	r2, [pc, #48]	; (800422c <LL_ADC_SetOffsetState+0x50>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	431a      	orrs	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800420e:	e007      	b.n	8004220 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	431a      	orrs	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	58026000 	.word	0x58026000

08004230 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3330      	adds	r3, #48	; 0x30
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	4413      	add	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	211f      	movs	r1, #31
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	401a      	ands	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	f003 011f 	and.w	r1, r3, #31
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3314      	adds	r3, #20
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	0e5b      	lsrs	r3, r3, #25
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	4413      	add	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	0d1b      	lsrs	r3, r3, #20
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2107      	movs	r1, #7
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	0d1b      	lsrs	r3, r3, #20
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	431a      	orrs	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a1a      	ldr	r2, [pc, #104]	; (800437c <LL_ADC_SetChannelSingleDiff+0x78>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d115      	bne.n	8004344 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004324:	43db      	mvns	r3, r3
 8004326:	401a      	ands	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0318 	and.w	r3, r3, #24
 800432e:	4914      	ldr	r1, [pc, #80]	; (8004380 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004330:	40d9      	lsrs	r1, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	400b      	ands	r3, r1
 8004336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433a:	431a      	orrs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004342:	e014      	b.n	800436e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004350:	43db      	mvns	r3, r3
 8004352:	401a      	ands	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0318 	and.w	r3, r3, #24
 800435a:	4909      	ldr	r1, [pc, #36]	; (8004380 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800435c:	40d9      	lsrs	r1, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	400b      	ands	r3, r1
 8004362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004366:	431a      	orrs	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	58026000 	.word	0x58026000
 8004380:	000fffff 	.word	0x000fffff

08004384 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 031f 	and.w	r3, r3, #31
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6093      	str	r3, [r2, #8]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	5fffffc0 	.word	0x5fffffc0

080043e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d101      	bne.n	80043fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <LL_ADC_EnableInternalRegulator+0x24>)
 8004416:	4013      	ands	r3, r2
 8004418:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	6fffffc0 	.word	0x6fffffc0

08004430 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004444:	d101      	bne.n	800444a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <LL_ADC_Enable+0x24>)
 8004466:	4013      	ands	r3, r2
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	7fffffc0 	.word	0x7fffffc0

08004480 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <LL_ADC_Disable+0x24>)
 800448e:	4013      	ands	r3, r2
 8004490:	f043 0202 	orr.w	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	7fffffc0 	.word	0x7fffffc0

080044a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <LL_ADC_IsEnabled+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_ADC_IsEnabled+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d101      	bne.n	80044e6 <LL_ADC_IsDisableOngoing+0x18>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_ADC_IsDisableOngoing+0x1a>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <LL_ADC_REG_StartConversion+0x24>)
 8004502:	4013      	ands	r3, r2
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	7fffffc0 	.word	0x7fffffc0

0800451c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <LL_ADC_REG_StopConversion+0x24>)
 800452a:	4013      	ands	r3, r2
 800452c:	f043 0210 	orr.w	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	7fffffc0 	.word	0x7fffffc0

08004544 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d101      	bne.n	800455c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <LL_ADC_INJ_StopConversion+0x24>)
 800457a:	4013      	ands	r3, r2
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	7fffffc0 	.word	0x7fffffc0

08004594 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d101      	bne.n	80045ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1ee      	b.n	80049b4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fe fb9d 	bl	8002d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff feef 	bl	80043e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fed5 	bl	80043bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff ff0a 	bl	8004430 <LL_ADC_IsInternalRegulatorEnabled>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d114      	bne.n	800464c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff feee 	bl	8004408 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800462c:	4b8e      	ldr	r3, [pc, #568]	; (8004868 <HAL_ADC_Init+0x2ac>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	099b      	lsrs	r3, r3, #6
 8004632:	4a8e      	ldr	r2, [pc, #568]	; (800486c <HAL_ADC_Init+0x2b0>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	3301      	adds	r3, #1
 800463c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800463e:	e002      	b.n	8004646 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f9      	bne.n	8004640 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff feed 	bl	8004430 <LL_ADC_IsInternalRegulatorEnabled>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	f043 0210 	orr.w	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff61 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 8004682:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 8188 	bne.w	80049a2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 8184 	bne.w	80049a2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046a2:	f043 0202 	orr.w	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fefa 	bl	80044a8 <LL_ADC_IsEnabled>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d136      	bne.n	8004728 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a6c      	ldr	r2, [pc, #432]	; (8004870 <HAL_ADC_Init+0x2b4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_ADC_Init+0x112>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6a      	ldr	r2, [pc, #424]	; (8004874 <HAL_ADC_Init+0x2b8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10e      	bne.n	80046ec <HAL_ADC_Init+0x130>
 80046ce:	4868      	ldr	r0, [pc, #416]	; (8004870 <HAL_ADC_Init+0x2b4>)
 80046d0:	f7ff feea 	bl	80044a8 <LL_ADC_IsEnabled>
 80046d4:	4604      	mov	r4, r0
 80046d6:	4867      	ldr	r0, [pc, #412]	; (8004874 <HAL_ADC_Init+0x2b8>)
 80046d8:	f7ff fee6 	bl	80044a8 <LL_ADC_IsEnabled>
 80046dc:	4603      	mov	r3, r0
 80046de:	4323      	orrs	r3, r4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e008      	b.n	80046fe <HAL_ADC_Init+0x142>
 80046ec:	4862      	ldr	r0, [pc, #392]	; (8004878 <HAL_ADC_Init+0x2bc>)
 80046ee:	f7ff fedb 	bl	80044a8 <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5a      	ldr	r2, [pc, #360]	; (8004870 <HAL_ADC_Init+0x2b4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_ADC_Init+0x15a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_ADC_Init+0x2b8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_ADC_Init+0x15e>
 8004716:	4a59      	ldr	r2, [pc, #356]	; (800487c <HAL_ADC_Init+0x2c0>)
 8004718:	e000      	b.n	800471c <HAL_ADC_Init+0x160>
 800471a:	4a59      	ldr	r2, [pc, #356]	; (8004880 <HAL_ADC_Init+0x2c4>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7ff fc5e 	bl	8003fe4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_ADC_Init+0x2bc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d129      	bne.n	8004786 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7e5b      	ldrb	r3, [r3, #25]
 8004736:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800473c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004742:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d013      	beq.n	8004774 <HAL_ADC_Init+0x1b8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d00d      	beq.n	8004770 <HAL_ADC_Init+0x1b4>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b1c      	cmp	r3, #28
 800475a:	d007      	beq.n	800476c <HAL_ADC_Init+0x1b0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b18      	cmp	r3, #24
 8004762:	d101      	bne.n	8004768 <HAL_ADC_Init+0x1ac>
 8004764:	2318      	movs	r3, #24
 8004766:	e006      	b.n	8004776 <HAL_ADC_Init+0x1ba>
 8004768:	2300      	movs	r3, #0
 800476a:	e004      	b.n	8004776 <HAL_ADC_Init+0x1ba>
 800476c:	2310      	movs	r3, #16
 800476e:	e002      	b.n	8004776 <HAL_ADC_Init+0x1ba>
 8004770:	2308      	movs	r3, #8
 8004772:	e000      	b.n	8004776 <HAL_ADC_Init+0x1ba>
 8004774:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004776:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800477e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e00e      	b.n	80047a4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7e5b      	ldrb	r3, [r3, #25]
 800478a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004790:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004796:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800479e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d106      	bne.n	80047bc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	3b01      	subs	r3, #1
 80047b4:	045b      	lsls	r3, r3, #17
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_ADC_Init+0x2bc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d115      	bne.n	800480e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_ADC_Init+0x2c8>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	69b9      	ldr	r1, [r7, #24]
 80047f2:	430b      	orrs	r3, r1
 80047f4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	e009      	b.n	8004822 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_ADC_Init+0x2cc>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	69b9      	ldr	r1, [r7, #24]
 800481e:	430b      	orrs	r3, r1
 8004820:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fe8c 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 800482c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff feae 	bl	8004594 <LL_ADC_INJ_IsConversionOngoing>
 8004838:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 808e 	bne.w	800495e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 808a 	bne.w	800495e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <HAL_ADC_Init+0x2bc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d11b      	bne.n	800488c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7e1b      	ldrb	r3, [r3, #24]
 8004858:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004860:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e018      	b.n	800489a <HAL_ADC_Init+0x2de>
 8004868:	24000000 	.word	0x24000000
 800486c:	053e2d63 	.word	0x053e2d63
 8004870:	40022000 	.word	0x40022000
 8004874:	40022100 	.word	0x40022100
 8004878:	58026000 	.word	0x58026000
 800487c:	40022300 	.word	0x40022300
 8004880:	58026300 	.word	0x58026300
 8004884:	fff04007 	.word	0xfff04007
 8004888:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7e1b      	ldrb	r3, [r3, #24]
 8004890:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_ADC_Init+0x400>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	430b      	orrs	r3, r1
 80048ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d137      	bne.n	8004928 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a3f      	ldr	r2, [pc, #252]	; (80049c0 <HAL_ADC_Init+0x404>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d116      	bne.n	80048f6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_ADC_Init+0x408>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048e0:	4311      	orrs	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80048e6:	430a      	orrs	r2, r1
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	611a      	str	r2, [r3, #16]
 80048f4:	e020      	b.n	8004938 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <HAL_ADC_Init+0x40c>)
 80048fe:	4013      	ands	r3, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004904:	3a01      	subs	r2, #1
 8004906:	0411      	lsls	r1, r2, #16
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800490c:	4311      	orrs	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004918:	430a      	orrs	r2, r1
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	611a      	str	r2, [r3, #16]
 8004926:	e007      	b.n	8004938 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_ADC_Init+0x404>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d002      	beq.n	800495e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f001 f909 	bl	8005b70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10c      	bne.n	8004980 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	f023 010f 	bic.w	r1, r3, #15
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	1e5a      	subs	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
 800497e:	e007      	b.n	8004990 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020f 	bic.w	r2, r2, #15
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	f043 0201 	orr.w	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
 80049a0:	e007      	b.n	80049b2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	f043 0210 	orr.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3724      	adds	r7, #36	; 0x24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}
 80049bc:	ffffbffc 	.word	0xffffbffc
 80049c0:	58026000 	.word	0x58026000
 80049c4:	fc00f81f 	.word	0xfc00f81f
 80049c8:	fc00f81e 	.word	0xfc00f81e

080049cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5c      	ldr	r2, [pc, #368]	; (8004b4c <HAL_ADC_Start+0x180>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_ADC_Start+0x1c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a5b      	ldr	r2, [pc, #364]	; (8004b50 <HAL_ADC_Start+0x184>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_ADC_Start+0x20>
 80049e8:	4b5a      	ldr	r3, [pc, #360]	; (8004b54 <HAL_ADC_Start+0x188>)
 80049ea:	e000      	b.n	80049ee <HAL_ADC_Start+0x22>
 80049ec:	4b5a      	ldr	r3, [pc, #360]	; (8004b58 <HAL_ADC_Start+0x18c>)
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fcc8 	bl	8004384 <LL_ADC_GetMultimode>
 80049f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fda2 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 809a 	bne.w	8004b3c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_Start+0x4a>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e095      	b.n	8004b42 <HAL_ADC_Start+0x176>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 ffbc 	bl	800599c <ADC_Enable>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 8081 	bne.w	8004b32 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a34:	4b49      	ldr	r3, [pc, #292]	; (8004b5c <HAL_ADC_Start+0x190>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a42      	ldr	r2, [pc, #264]	; (8004b50 <HAL_ADC_Start+0x184>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d002      	beq.n	8004a50 <HAL_ADC_Start+0x84>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	e000      	b.n	8004a52 <HAL_ADC_Start+0x86>
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <HAL_ADC_Start+0x180>)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d002      	beq.n	8004a60 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d106      	bne.n	8004a88 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7e:	f023 0206 	bic.w	r2, r3, #6
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64
 8004a86:	e002      	b.n	8004a8e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	221c      	movs	r2, #28
 8004a94:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2b      	ldr	r2, [pc, #172]	; (8004b50 <HAL_ADC_Start+0x184>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d002      	beq.n	8004aae <HAL_ADC_Start+0xe2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	e000      	b.n	8004ab0 <HAL_ADC_Start+0xe4>
 8004aae:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_ADC_Start+0x180>)
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d008      	beq.n	8004aca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d002      	beq.n	8004aca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d114      	bne.n	8004af4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004adc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ae0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fd01 	bl	80044f4 <LL_ADC_REG_StartConversion>
 8004af2:	e025      	b.n	8004b40 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <HAL_ADC_Start+0x184>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d002      	beq.n	8004b10 <HAL_ADC_Start+0x144>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	e000      	b.n	8004b12 <HAL_ADC_Start+0x146>
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_ADC_Start+0x180>)
 8004b12:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00f      	beq.n	8004b40 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60
 8004b30:	e006      	b.n	8004b40 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004b3a:	e001      	b.n	8004b40 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	40022100 	.word	0x40022100
 8004b54:	40022300 	.word	0x40022300
 8004b58:	58026300 	.word	0x58026300
 8004b5c:	fffff0fe 	.word	0xfffff0fe

08004b60 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_ADC_Stop+0x16>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e021      	b.n	8004bba <HAL_ADC_Stop+0x5a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004b7e:	2103      	movs	r1, #3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fe4f 	bl	8005824 <ADC_ConversionStop>
 8004b86:	4603      	mov	r3, r0
 8004b88:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 ff8d 	bl	8005ab0 <ADC_Disable>
 8004b96:	4603      	mov	r3, r0
 8004b98:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <HAL_ADC_Stop+0x64>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	ffffeefe 	.word	0xffffeefe

08004bc8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a72      	ldr	r2, [pc, #456]	; (8004da0 <HAL_ADC_PollForConversion+0x1d8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_ADC_PollForConversion+0x1e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a70      	ldr	r2, [pc, #448]	; (8004da4 <HAL_ADC_PollForConversion+0x1dc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_ADC_PollForConversion+0x22>
 8004be6:	4b70      	ldr	r3, [pc, #448]	; (8004da8 <HAL_ADC_PollForConversion+0x1e0>)
 8004be8:	e000      	b.n	8004bec <HAL_ADC_PollForConversion+0x24>
 8004bea:	4b70      	ldr	r3, [pc, #448]	; (8004dac <HAL_ADC_PollForConversion+0x1e4>)
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fbc9 	bl	8004384 <LL_ADC_GetMultimode>
 8004bf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d102      	bne.n	8004c02 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e037      	b.n	8004c72 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d002      	beq.n	8004c14 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b09      	cmp	r3, #9
 8004c12:	d111      	bne.n	8004c38 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c26:	f043 0220 	orr.w	r2, r3, #32
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0b1      	b.n	8004d96 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004c32:	2304      	movs	r3, #4
 8004c34:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004c36:	e01c      	b.n	8004c72 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a58      	ldr	r2, [pc, #352]	; (8004da0 <HAL_ADC_PollForConversion+0x1d8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_ADC_PollForConversion+0x84>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <HAL_ADC_PollForConversion+0x1dc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_PollForConversion+0x88>
 8004c4c:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <HAL_ADC_PollForConversion+0x1e0>)
 8004c4e:	e000      	b.n	8004c52 <HAL_ADC_PollForConversion+0x8a>
 8004c50:	4b56      	ldr	r3, [pc, #344]	; (8004dac <HAL_ADC_PollForConversion+0x1e4>)
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fba4 	bl	80043a0 <LL_ADC_GetMultiDMATransfer>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e093      	b.n	8004d96 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004c6e:	2304      	movs	r3, #4
 8004c70:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004c72:	f7ff f971 	bl	8003f58 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004c78:	e021      	b.n	8004cbe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d01d      	beq.n	8004cbe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004c82:	f7ff f969 	bl	8003f58 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <HAL_ADC_PollForConversion+0xd0>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d112      	bne.n	8004cbe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e06b      	b.n	8004d96 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0d6      	beq.n	8004c7a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff faa7 	bl	8004230 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01c      	beq.n	8004d22 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7e5b      	ldrb	r3, [r3, #25]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d118      	bne.n	8004d22 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d111      	bne.n	8004d22 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <HAL_ADC_PollForConversion+0x1dc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d002      	beq.n	8004d32 <HAL_ADC_PollForConversion+0x16a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	e000      	b.n	8004d34 <HAL_ADC_PollForConversion+0x16c>
 8004d32:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <HAL_ADC_PollForConversion+0x1d8>)
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d008      	beq.n	8004d4e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d002      	beq.n	8004d4e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	d104      	bne.n	8004d58 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e00c      	b.n	8004d72 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <HAL_ADC_PollForConversion+0x1dc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d002      	beq.n	8004d68 <HAL_ADC_PollForConversion+0x1a0>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	e000      	b.n	8004d6a <HAL_ADC_PollForConversion+0x1a2>
 8004d68:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_ADC_PollForConversion+0x1d8>)
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d104      	bne.n	8004d82 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e008      	b.n	8004d94 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	220c      	movs	r2, #12
 8004d92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40022000 	.word	0x40022000
 8004da4:	40022100 	.word	0x40022100
 8004da8:	40022300 	.word	0x40022300
 8004dac:	58026300 	.word	0x58026300

08004db0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b0b9      	sub	sp, #228	; 0xe4
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4aa9      	ldr	r2, [pc, #676]	; (8005094 <HAL_ADC_ConfigChannel+0x2c8>)
 8004dee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x34>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	f000 bcfa 	b.w	80057f4 <HAL_ADC_ConfigChannel+0xa28>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fb99 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 84de 	bne.w	80057d6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a9e      	ldr	r2, [pc, #632]	; (8005098 <HAL_ADC_ConfigChannel+0x2cc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d033      	beq.n	8004e8c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d108      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x76>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	0e9b      	lsrs	r3, r3, #26
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	e01d      	b.n	8004e7e <HAL_ADC_ConfigChannel+0xb2>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004e66:	2320      	movs	r3, #32
 8004e68:	e004      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	69d1      	ldr	r1, [r2, #28]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f7ff f9dc 	bl	8004256 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fb4e 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 8004ea8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fb6f 	bl	8004594 <LL_ADC_INJ_IsConversionOngoing>
 8004eb6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 8270 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ec4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f040 826b 	bne.w	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f7ff f9e7 	bl	80042ae <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6c      	ldr	r2, [pc, #432]	; (8005098 <HAL_ADC_ConfigChannel+0x2cc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10d      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	08db      	lsrs	r3, r3, #3
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f04:	e032      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f06:	4b65      	ldr	r3, [pc, #404]	; (800509c <HAL_ADC_ConfigChannel+0x2d0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f12:	d10b      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x160>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	e01d      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x19c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x186>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	089b      	lsrs	r3, r3, #2
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	e00a      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x19c>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d048      	beq.n	8005006 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6919      	ldr	r1, [r3, #16]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f84:	f7ff f862 	bl	800404c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a42      	ldr	r2, [pc, #264]	; (8005098 <HAL_ADC_ConfigChannel+0x2cc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d119      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6919      	ldr	r1, [r3, #16]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7ff f8fa 	bl	8004198 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6919      	ldr	r1, [r3, #16]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d102      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x1f0>
 8004fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fba:	e000      	b.n	8004fbe <HAL_ADC_ConfigChannel+0x1f2>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7ff f8c8 	bl	8004154 <LL_ADC_SetOffsetSaturation>
 8004fc4:	e1ee      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6919      	ldr	r1, [r3, #16]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d102      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x212>
 8004fd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fdc:	e000      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x214>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f7ff f895 	bl	8004110 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6919      	ldr	r1, [r3, #16]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	7e1b      	ldrb	r3, [r3, #24]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x230>
 8004ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ffa:	e000      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x232>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7ff f86c 	bl	80040dc <LL_ADC_SetDataRightShift>
 8005004:	e1ce      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a23      	ldr	r2, [pc, #140]	; (8005098 <HAL_ADC_ConfigChannel+0x2cc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	f040 8181 	bne.w	8005314 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff f849 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 800501e:	4603      	mov	r3, r0
 8005020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <HAL_ADC_ConfigChannel+0x272>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff f83e 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8005034:	4603      	mov	r3, r0
 8005036:	0e9b      	lsrs	r3, r3, #26
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	e01e      	b.n	800507c <HAL_ADC_ConfigChannel+0x2b0>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff f833 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 800504a:	4603      	mov	r3, r0
 800504c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800505c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800506c:	2320      	movs	r3, #32
 800506e:	e004      	b.n	800507a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x2d4>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	e01e      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x306>
 8005094:	47ff0000 	.word	0x47ff0000
 8005098:	58026000 	.word	0x58026000
 800509c:	5c001000 	.word	0x5c001000
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80050b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80050b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80050bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80050c4:	2320      	movs	r3, #32
 80050c6:	e004      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80050c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d106      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff f87c 	bl	80041dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe ffe0 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x344>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe ffd5 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8005106:	4603      	mov	r3, r0
 8005108:	0e9b      	lsrs	r3, r3, #26
 800510a:	f003 021f 	and.w	r2, r3, #31
 800510e:	e01e      	b.n	800514e <HAL_ADC_ConfigChannel+0x382>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe ffca 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 800511c:	4603      	mov	r3, r0
 800511e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005126:	fa93 f3a3 	rbit	r3, r3
 800512a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800512e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800513e:	2320      	movs	r3, #32
 8005140:	e004      	b.n	800514c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x39a>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	0e9b      	lsrs	r3, r3, #26
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	e018      	b.n	8005198 <HAL_ADC_ConfigChannel+0x3cc>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800517a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800517e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800518a:	2320      	movs	r3, #32
 800518c:	e004      	b.n	8005198 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800518e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005192:	fab3 f383 	clz	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	429a      	cmp	r2, r3
 800519a:	d106      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2200      	movs	r2, #0
 80051a2:	2101      	movs	r1, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff f819 	bl	80041dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe ff7d 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x40a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2102      	movs	r1, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe ff72 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 80051cc:	4603      	mov	r3, r0
 80051ce:	0e9b      	lsrs	r3, r3, #26
 80051d0:	f003 021f 	and.w	r2, r3, #31
 80051d4:	e01e      	b.n	8005214 <HAL_ADC_ConfigChannel+0x448>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe ff67 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ec:	fa93 f3a3 	rbit	r3, r3
 80051f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80051f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80051fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005204:	2320      	movs	r3, #32
 8005206:	e004      	b.n	8005212 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800520c:	fab3 f383 	clz	r3, r3
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <HAL_ADC_ConfigChannel+0x460>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	0e9b      	lsrs	r3, r3, #26
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	e014      	b.n	8005256 <HAL_ADC_ConfigChannel+0x48a>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005234:	fa93 f3a3 	rbit	r3, r3
 8005238:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800523a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005240:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005248:	2320      	movs	r3, #32
 800524a:	e004      	b.n	8005256 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800524c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005250:	fab3 f383 	clz	r3, r3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	429a      	cmp	r2, r3
 8005258:	d106      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	2102      	movs	r1, #2
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe ffba 	bl	80041dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2103      	movs	r1, #3
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe ff1e 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 8005274:	4603      	mov	r3, r0
 8005276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x4c8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2103      	movs	r1, #3
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe ff13 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 800528a:	4603      	mov	r3, r0
 800528c:	0e9b      	lsrs	r3, r3, #26
 800528e:	f003 021f 	and.w	r2, r3, #31
 8005292:	e017      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x4f8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2103      	movs	r1, #3
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe ff08 	bl	80040b0 <LL_ADC_GetOffsetChannel>
 80052a0:	4603      	mov	r3, r0
 80052a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80052b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80052b6:	2320      	movs	r3, #32
 80052b8:	e003      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80052ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x510>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	0e9b      	lsrs	r3, r3, #26
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	e011      	b.n	8005300 <HAL_ADC_ConfigChannel+0x534>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80052ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ec:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80052ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80052f4:	2320      	movs	r3, #32
 80052f6:	e003      	b.n	8005300 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80052f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052fa:	fab3 f383 	clz	r3, r3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	429a      	cmp	r2, r3
 8005302:	d14f      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2200      	movs	r2, #0
 800530a:	2103      	movs	r1, #3
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe ff65 	bl	80041dc <LL_ADC_SetOffsetState>
 8005312:	e047      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	069b      	lsls	r3, r3, #26
 8005324:	429a      	cmp	r2, r3
 8005326:	d107      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800533e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	069b      	lsls	r3, r3, #26
 8005348:	429a      	cmp	r2, r3
 800534a:	d107      	bne.n	800535c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800535a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	069b      	lsls	r3, r3, #26
 800536c:	429a      	cmp	r2, r3
 800536e:	d107      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800537e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	069b      	lsls	r3, r3, #26
 8005390:	429a      	cmp	r2, r3
 8005392:	d107      	bne.n	80053a4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff f87d 	bl	80044a8 <LL_ADC_IsEnabled>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 8219 	bne.w	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f7fe ff9e 	bl	8004304 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4aa1      	ldr	r2, [pc, #644]	; (8005654 <HAL_ADC_ConfigChannel+0x888>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f040 812e 	bne.w	8005630 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x630>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	0e9b      	lsrs	r3, r3, #26
 80053ea:	3301      	adds	r3, #1
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	2b09      	cmp	r3, #9
 80053f2:	bf94      	ite	ls
 80053f4:	2301      	movls	r3, #1
 80053f6:	2300      	movhi	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e019      	b.n	8005430 <HAL_ADC_ConfigChannel+0x664>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800540a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800540c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800540e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005414:	2320      	movs	r3, #32
 8005416:	e003      	b.n	8005420 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2b09      	cmp	r3, #9
 8005428:	bf94      	ite	ls
 800542a:	2301      	movls	r3, #1
 800542c:	2300      	movhi	r3, #0
 800542e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005430:	2b00      	cmp	r3, #0
 8005432:	d079      	beq.n	8005528 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x684>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0e9b      	lsrs	r3, r3, #26
 8005446:	3301      	adds	r3, #1
 8005448:	069b      	lsls	r3, r3, #26
 800544a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800544e:	e015      	b.n	800547c <HAL_ADC_ConfigChannel+0x6b0>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800545e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005468:	2320      	movs	r3, #32
 800546a:	e003      	b.n	8005474 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800546c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	3301      	adds	r3, #1
 8005476:	069b      	lsls	r3, r3, #26
 8005478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_ADC_ConfigChannel+0x6d0>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	0e9b      	lsrs	r3, r3, #26
 800548e:	3301      	adds	r3, #1
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	e017      	b.n	80054cc <HAL_ADC_ConfigChannel+0x700>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80054b4:	2320      	movs	r3, #32
 80054b6:	e003      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80054b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3301      	adds	r3, #1
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2101      	movs	r1, #1
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	ea42 0103 	orr.w	r1, r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x726>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e9b      	lsrs	r3, r3, #26
 80054e2:	3301      	adds	r3, #1
 80054e4:	f003 021f 	and.w	r2, r3, #31
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	051b      	lsls	r3, r3, #20
 80054f0:	e018      	b.n	8005524 <HAL_ADC_ConfigChannel+0x758>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800550a:	2320      	movs	r3, #32
 800550c:	e003      	b.n	8005516 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	fab3 f383 	clz	r3, r3
 8005514:	b2db      	uxtb	r3, r3
 8005516:	3301      	adds	r3, #1
 8005518:	f003 021f 	and.w	r2, r3, #31
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005524:	430b      	orrs	r3, r1
 8005526:	e07e      	b.n	8005626 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x778>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0e9b      	lsrs	r3, r3, #26
 800553a:	3301      	adds	r3, #1
 800553c:	069b      	lsls	r3, r3, #26
 800553e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005542:	e015      	b.n	8005570 <HAL_ADC_ConfigChannel+0x7a4>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	fa93 f3a3 	rbit	r3, r3
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800555c:	2320      	movs	r3, #32
 800555e:	e003      	b.n	8005568 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	fab3 f383 	clz	r3, r3
 8005566:	b2db      	uxtb	r3, r3
 8005568:	3301      	adds	r3, #1
 800556a:	069b      	lsls	r3, r3, #26
 800556c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x7c4>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0e9b      	lsrs	r3, r3, #26
 8005582:	3301      	adds	r3, #1
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	e017      	b.n	80055c0 <HAL_ADC_ConfigChannel+0x7f4>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fa93 f3a3 	rbit	r3, r3
 800559c:	61bb      	str	r3, [r7, #24]
  return result;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80055a8:	2320      	movs	r3, #32
 80055aa:	e003      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	3301      	adds	r3, #1
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2101      	movs	r1, #1
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	ea42 0103 	orr.w	r1, r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10d      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x820>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	0e9b      	lsrs	r3, r3, #26
 80055d6:	3301      	adds	r3, #1
 80055d8:	f003 021f 	and.w	r2, r3, #31
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	3b1e      	subs	r3, #30
 80055e4:	051b      	lsls	r3, r3, #20
 80055e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055ea:	e01b      	b.n	8005624 <HAL_ADC_ConfigChannel+0x858>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	fa93 f3a3 	rbit	r3, r3
 80055f8:	60fb      	str	r3, [r7, #12]
  return result;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005604:	2320      	movs	r3, #32
 8005606:	e003      	b.n	8005610 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	3301      	adds	r3, #1
 8005612:	f003 021f 	and.w	r2, r3, #31
 8005616:	4613      	mov	r3, r2
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	4413      	add	r3, r2
 800561c:	3b1e      	subs	r3, #30
 800561e:	051b      	lsls	r3, r3, #20
 8005620:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005624:	430b      	orrs	r3, r1
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	6892      	ldr	r2, [r2, #8]
 800562a:	4619      	mov	r1, r3
 800562c:	f7fe fe3f 	bl	80042ae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f280 80d7 	bge.w	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a06      	ldr	r2, [pc, #24]	; (8005658 <HAL_ADC_ConfigChannel+0x88c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_ADC_ConfigChannel+0x882>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a04      	ldr	r2, [pc, #16]	; (800565c <HAL_ADC_ConfigChannel+0x890>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10a      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x898>
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <HAL_ADC_ConfigChannel+0x894>)
 8005650:	e009      	b.n	8005666 <HAL_ADC_ConfigChannel+0x89a>
 8005652:	bf00      	nop
 8005654:	47ff0000 	.word	0x47ff0000
 8005658:	40022000 	.word	0x40022000
 800565c:	40022100 	.word	0x40022100
 8005660:	40022300 	.word	0x40022300
 8005664:	4b65      	ldr	r3, [pc, #404]	; (80057fc <HAL_ADC_ConfigChannel+0xa30>)
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fce2 	bl	8004030 <LL_ADC_GetCommonPathInternalCh>
 800566c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a62      	ldr	r2, [pc, #392]	; (8005800 <HAL_ADC_ConfigChannel+0xa34>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_ADC_ConfigChannel+0x8b8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a61      	ldr	r2, [pc, #388]	; (8005804 <HAL_ADC_ConfigChannel+0xa38>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10e      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x8d6>
 8005684:	485e      	ldr	r0, [pc, #376]	; (8005800 <HAL_ADC_ConfigChannel+0xa34>)
 8005686:	f7fe ff0f 	bl	80044a8 <LL_ADC_IsEnabled>
 800568a:	4604      	mov	r4, r0
 800568c:	485d      	ldr	r0, [pc, #372]	; (8005804 <HAL_ADC_ConfigChannel+0xa38>)
 800568e:	f7fe ff0b 	bl	80044a8 <LL_ADC_IsEnabled>
 8005692:	4603      	mov	r3, r0
 8005694:	4323      	orrs	r3, r4
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf0c      	ite	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	2300      	movne	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	e008      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x8e8>
 80056a2:	4859      	ldr	r0, [pc, #356]	; (8005808 <HAL_ADC_ConfigChannel+0xa3c>)
 80056a4:	f7fe ff00 	bl	80044a8 <LL_ADC_IsEnabled>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf0c      	ite	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	2300      	movne	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8084 	beq.w	80057c2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a53      	ldr	r2, [pc, #332]	; (800580c <HAL_ADC_ConfigChannel+0xa40>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d132      	bne.n	800572a <HAL_ADC_ConfigChannel+0x95e>
 80056c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d12c      	bne.n	800572a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a4c      	ldr	r2, [pc, #304]	; (8005808 <HAL_ADC_ConfigChannel+0xa3c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f040 8086 	bne.w	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a47      	ldr	r2, [pc, #284]	; (8005800 <HAL_ADC_ConfigChannel+0xa34>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_ADC_ConfigChannel+0x924>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a46      	ldr	r2, [pc, #280]	; (8005804 <HAL_ADC_ConfigChannel+0xa38>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d101      	bne.n	80056f4 <HAL_ADC_ConfigChannel+0x928>
 80056f0:	4a47      	ldr	r2, [pc, #284]	; (8005810 <HAL_ADC_ConfigChannel+0xa44>)
 80056f2:	e000      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x92a>
 80056f4:	4a41      	ldr	r2, [pc, #260]	; (80057fc <HAL_ADC_ConfigChannel+0xa30>)
 80056f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7fe fc82 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005706:	4b43      	ldr	r3, [pc, #268]	; (8005814 <HAL_ADC_ConfigChannel+0xa48>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	099b      	lsrs	r3, r3, #6
 800570c:	4a42      	ldr	r2, [pc, #264]	; (8005818 <HAL_ADC_ConfigChannel+0xa4c>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	3301      	adds	r3, #1
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800571a:	e002      	b.n	8005722 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3b01      	subs	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f9      	bne.n	800571c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005728:	e05e      	b.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a3b      	ldr	r2, [pc, #236]	; (800581c <HAL_ADC_ConfigChannel+0xa50>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d120      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x9aa>
 8005734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11a      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a30      	ldr	r2, [pc, #192]	; (8005808 <HAL_ADC_ConfigChannel+0xa3c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d14e      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a2c      	ldr	r2, [pc, #176]	; (8005800 <HAL_ADC_ConfigChannel+0xa34>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_ADC_ConfigChannel+0x992>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2a      	ldr	r2, [pc, #168]	; (8005804 <HAL_ADC_ConfigChannel+0xa38>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x996>
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_ADC_ConfigChannel+0xa44>)
 8005760:	e000      	b.n	8005764 <HAL_ADC_ConfigChannel+0x998>
 8005762:	4a26      	ldr	r2, [pc, #152]	; (80057fc <HAL_ADC_ConfigChannel+0xa30>)
 8005764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576c:	4619      	mov	r1, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f7fe fc4b 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005774:	e038      	b.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a29      	ldr	r2, [pc, #164]	; (8005820 <HAL_ADC_ConfigChannel+0xa54>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d133      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
 8005780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d12d      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_ADC_ConfigChannel+0xa3c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d128      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <HAL_ADC_ConfigChannel+0xa34>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_ADC_ConfigChannel+0x9de>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a17      	ldr	r2, [pc, #92]	; (8005804 <HAL_ADC_ConfigChannel+0xa38>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x9e2>
 80057aa:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_ADC_ConfigChannel+0xa44>)
 80057ac:	e000      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x9e4>
 80057ae:	4a13      	ldr	r2, [pc, #76]	; (80057fc <HAL_ADC_ConfigChannel+0xa30>)
 80057b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fe fc25 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
 80057c0:	e012      	b.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80057d4:	e008      	b.n	80057e8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80057f0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	37e4      	adds	r7, #228	; 0xe4
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd90      	pop	{r4, r7, pc}
 80057fc:	58026300 	.word	0x58026300
 8005800:	40022000 	.word	0x40022000
 8005804:	40022100 	.word	0x40022100
 8005808:	58026000 	.word	0x58026000
 800580c:	c7520000 	.word	0xc7520000
 8005810:	40022300 	.word	0x40022300
 8005814:	24000000 	.word	0x24000000
 8005818:	053e2d63 	.word	0x053e2d63
 800581c:	c3210000 	.word	0xc3210000
 8005820:	cb840000 	.word	0xcb840000

08005824 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fe82 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 8005840:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fea4 	bl	8004594 <LL_ADC_INJ_IsConversionOngoing>
 800584c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8098 	beq.w	800598c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d02a      	beq.n	80058c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7e5b      	ldrb	r3, [r3, #25]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d126      	bne.n	80058c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	7e1b      	ldrb	r3, [r3, #24]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d122      	bne.n	80058c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800587a:	2301      	movs	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800587e:	e014      	b.n	80058aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4a45      	ldr	r2, [pc, #276]	; (8005998 <ADC_ConversionStop+0x174>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d90d      	bls.n	80058a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588c:	f043 0210 	orr.w	r2, r3, #16
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e074      	b.n	800598e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3301      	adds	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d1e3      	bne.n	8005880 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2240      	movs	r2, #64	; 0x40
 80058be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d014      	beq.n	80058f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fe3a 	bl	8004544 <LL_ADC_REG_IsConversionOngoing>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe fdf7 	bl	80044ce <LL_ADC_IsDisableOngoing>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fe16 	bl	800451c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d014      	beq.n	8005920 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fe4a 	bl	8004594 <LL_ADC_INJ_IsConversionOngoing>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fddf 	bl	80044ce <LL_ADC_IsDisableOngoing>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fe26 	bl	800456c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d005      	beq.n	8005932 <ADC_ConversionStop+0x10e>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d105      	bne.n	8005938 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800592c:	230c      	movs	r3, #12
 800592e:	617b      	str	r3, [r7, #20]
        break;
 8005930:	e005      	b.n	800593e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005932:	2308      	movs	r3, #8
 8005934:	617b      	str	r3, [r7, #20]
        break;
 8005936:	e002      	b.n	800593e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005938:	2304      	movs	r3, #4
 800593a:	617b      	str	r3, [r7, #20]
        break;
 800593c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800593e:	f7fe fb0b 	bl	8003f58 <HAL_GetTick>
 8005942:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005944:	e01b      	b.n	800597e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005946:	f7fe fb07 	bl	8003f58 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b05      	cmp	r3, #5
 8005952:	d914      	bls.n	800597e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005966:	f043 0210 	orr.w	r2, r3, #16
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005972:	f043 0201 	orr.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e007      	b.n	800598e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1dc      	bne.n	8005946 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	000cdbff 	.word	0x000cdbff

0800599c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fd7d 	bl	80044a8 <LL_ADC_IsEnabled>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d16e      	bne.n	8005a92 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <ADC_Enable+0x100>)
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c6:	f043 0210 	orr.w	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e05a      	b.n	8005a94 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fd38 	bl	8004458 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059e8:	f7fe fab6 	bl	8003f58 <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <ADC_Enable+0x104>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <ADC_Enable+0x66>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a29      	ldr	r2, [pc, #164]	; (8005aa4 <ADC_Enable+0x108>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d101      	bne.n	8005a06 <ADC_Enable+0x6a>
 8005a02:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <ADC_Enable+0x10c>)
 8005a04:	e000      	b.n	8005a08 <ADC_Enable+0x6c>
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <ADC_Enable+0x110>)
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe fcbb 	bl	8004384 <LL_ADC_GetMultimode>
 8005a0e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <ADC_Enable+0x108>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d002      	beq.n	8005a20 <ADC_Enable+0x84>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	e000      	b.n	8005a22 <ADC_Enable+0x86>
 8005a20:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <ADC_Enable+0x104>)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02c      	beq.n	8005a84 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d130      	bne.n	8005a92 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a30:	e028      	b.n	8005a84 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fd36 	bl	80044a8 <LL_ADC_IsEnabled>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fd06 	bl	8004458 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a4c:	f7fe fa84 	bl	8003f58 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d914      	bls.n	8005a84 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d00d      	beq.n	8005a84 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	f043 0210 	orr.w	r2, r3, #16
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a78:	f043 0201 	orr.w	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e007      	b.n	8005a94 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d1cf      	bne.n	8005a32 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	8000003f 	.word	0x8000003f
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	40022100 	.word	0x40022100
 8005aa8:	40022300 	.word	0x40022300
 8005aac:	58026300 	.word	0x58026300

08005ab0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fd06 	bl	80044ce <LL_ADC_IsDisableOngoing>
 8005ac2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe fced 	bl	80044a8 <LL_ADC_IsEnabled>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d047      	beq.n	8005b64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d144      	bne.n	8005b64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030d 	and.w	r3, r3, #13
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d10c      	bne.n	8005b02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fcc7 	bl	8004480 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2203      	movs	r2, #3
 8005af8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005afa:	f7fe fa2d 	bl	8003f58 <HAL_GetTick>
 8005afe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b00:	e029      	b.n	8005b56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b06:	f043 0210 	orr.w	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b12:	f043 0201 	orr.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e023      	b.n	8005b66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b1e:	f7fe fa1b 	bl	8003f58 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d914      	bls.n	8005b56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	f043 0210 	orr.w	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b4a:	f043 0201 	orr.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e007      	b.n	8005b66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1dc      	bne.n	8005b1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a6c      	ldr	r2, [pc, #432]	; (8005d30 <ADC_ConfigureBoostMode+0x1c0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <ADC_ConfigureBoostMode+0x1c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6b      	ldr	r2, [pc, #428]	; (8005d34 <ADC_ConfigureBoostMode+0x1c4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <ADC_ConfigureBoostMode+0x30>
 8005b8c:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <ADC_ConfigureBoostMode+0x1c8>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e008      	b.n	8005bb2 <ADC_ConfigureBoostMode+0x42>
 8005ba0:	4b66      	ldr	r3, [pc, #408]	; (8005d3c <ADC_ConfigureBoostMode+0x1cc>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01c      	beq.n	8005bf0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005bb6:	f005 fcad 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 8005bba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bc4:	d010      	beq.n	8005be8 <ADC_ConfigureBoostMode+0x78>
 8005bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bca:	d873      	bhi.n	8005cb4 <ADC_ConfigureBoostMode+0x144>
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd0:	d002      	beq.n	8005bd8 <ADC_ConfigureBoostMode+0x68>
 8005bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd6:	d16d      	bne.n	8005cb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	60fb      	str	r3, [r7, #12]
        break;
 8005be6:	e068      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	60fb      	str	r3, [r7, #12]
        break;
 8005bee:	e064      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005bf0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005bf4:	f04f 0100 	mov.w	r1, #0
 8005bf8:	f006 fe88 	bl	800c90c <HAL_RCCEx_GetPeriphCLKFreq>
 8005bfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c06:	d051      	beq.n	8005cac <ADC_ConfigureBoostMode+0x13c>
 8005c08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c0c:	d854      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c12:	d047      	beq.n	8005ca4 <ADC_ConfigureBoostMode+0x134>
 8005c14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c18:	d84e      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c1e:	d03d      	beq.n	8005c9c <ADC_ConfigureBoostMode+0x12c>
 8005c20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c24:	d848      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c2a:	d033      	beq.n	8005c94 <ADC_ConfigureBoostMode+0x124>
 8005c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c30:	d842      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c36:	d029      	beq.n	8005c8c <ADC_ConfigureBoostMode+0x11c>
 8005c38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c3c:	d83c      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c42:	d01a      	beq.n	8005c7a <ADC_ConfigureBoostMode+0x10a>
 8005c44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c48:	d836      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c4e:	d014      	beq.n	8005c7a <ADC_ConfigureBoostMode+0x10a>
 8005c50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c54:	d830      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5a:	d00e      	beq.n	8005c7a <ADC_ConfigureBoostMode+0x10a>
 8005c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c60:	d82a      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c66:	d008      	beq.n	8005c7a <ADC_ConfigureBoostMode+0x10a>
 8005c68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c6c:	d824      	bhi.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
 8005c6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c72:	d002      	beq.n	8005c7a <ADC_ConfigureBoostMode+0x10a>
 8005c74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c78:	d11e      	bne.n	8005cb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	0c9b      	lsrs	r3, r3, #18
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	60fb      	str	r3, [r7, #12]
        break;
 8005c8a:	e016      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	60fb      	str	r3, [r7, #12]
        break;
 8005c92:	e012      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	60fb      	str	r3, [r7, #12]
        break;
 8005c9a:	e00e      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	099b      	lsrs	r3, r3, #6
 8005ca0:	60fb      	str	r3, [r7, #12]
        break;
 8005ca2:	e00a      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	09db      	lsrs	r3, r3, #7
 8005ca8:	60fb      	str	r3, [r7, #12]
        break;
 8005caa:	e006      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	60fb      	str	r3, [r7, #12]
        break;
 8005cb2:	e002      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
        break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005cb8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <ADC_ConfigureBoostMode+0x1d0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d808      	bhi.n	8005cda <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cd6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005cd8:	e025      	b.n	8005d26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <ADC_ConfigureBoostMode+0x1d4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d80a      	bhi.n	8005cf8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf4:	609a      	str	r2, [r3, #8]
}
 8005cf6:	e016      	b.n	8005d26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <ADC_ConfigureBoostMode+0x1d8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d80a      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	e007      	b.n	8005d26 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d24:	609a      	str	r2, [r3, #8]
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40022000 	.word	0x40022000
 8005d34:	40022100 	.word	0x40022100
 8005d38:	40022300 	.word	0x40022300
 8005d3c:	58026300 	.word	0x58026300
 8005d40:	005f5e10 	.word	0x005f5e10
 8005d44:	00bebc20 	.word	0x00bebc20
 8005d48:	017d7840 	.word	0x017d7840

08005d4c <LL_ADC_IsEnabled>:
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <LL_ADC_IsEnabled+0x18>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <LL_ADC_IsEnabled+0x1a>
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <LL_ADC_REG_IsConversionOngoing>:
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d101      	bne.n	8005d8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b0a3      	sub	sp, #140	; 0x8c
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e0c1      	b.n	8005f3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5e      	ldr	r2, [pc, #376]	; (8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d102      	bne.n	8005dd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005dd0:	4b5d      	ldr	r3, [pc, #372]	; (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e001      	b.n	8005dda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0a0      	b.n	8005f3a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff ffb9 	bl	8005d72 <LL_ADC_REG_IsConversionOngoing>
 8005e00:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff ffb2 	bl	8005d72 <LL_ADC_REG_IsConversionOngoing>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f040 8081 	bne.w	8005f18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d17c      	bne.n	8005f18 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a48      	ldr	r2, [pc, #288]	; (8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a46      	ldr	r2, [pc, #280]	; (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005e32:	4b46      	ldr	r3, [pc, #280]	; (8005f4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005e34:	e000      	b.n	8005e38 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005e36:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005e38:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d039      	beq.n	8005eb6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a3a      	ldr	r2, [pc, #232]	; (8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a39      	ldr	r2, [pc, #228]	; (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10e      	bne.n	8005e86 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005e68:	4836      	ldr	r0, [pc, #216]	; (8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e6a:	f7ff ff6f 	bl	8005d4c <LL_ADC_IsEnabled>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4835      	ldr	r0, [pc, #212]	; (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e72:	f7ff ff6b 	bl	8005d4c <LL_ADC_IsEnabled>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4323      	orrs	r3, r4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e008      	b.n	8005e98 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005e86:	4833      	ldr	r0, [pc, #204]	; (8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005e88:	f7ff ff60 	bl	8005d4c <LL_ADC_IsEnabled>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d047      	beq.n	8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	6811      	ldr	r1, [r2, #0]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005eb4:	e03a      	b.n	8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005eb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ec0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1f      	ldr	r2, [pc, #124]	; (8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10e      	bne.n	8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005ed6:	481b      	ldr	r0, [pc, #108]	; (8005f44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ed8:	f7ff ff38 	bl	8005d4c <LL_ADC_IsEnabled>
 8005edc:	4604      	mov	r4, r0
 8005ede:	481a      	ldr	r0, [pc, #104]	; (8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ee0:	f7ff ff34 	bl	8005d4c <LL_ADC_IsEnabled>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	4323      	orrs	r3, r4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e008      	b.n	8005f06 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005ef4:	4817      	ldr	r0, [pc, #92]	; (8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005ef6:	f7ff ff29 	bl	8005d4c <LL_ADC_IsEnabled>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d010      	beq.n	8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f16:	e009      	b.n	8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005f2a:	e000      	b.n	8005f2e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005f36:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	378c      	adds	r7, #140	; 0x8c
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd90      	pop	{r4, r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40022000 	.word	0x40022000
 8005f48:	40022100 	.word	0x40022100
 8005f4c:	40022300 	.word	0x40022300
 8005f50:	58026300 	.word	0x58026300
 8005f54:	58026000 	.word	0x58026000
 8005f58:	fffff0e0 	.word	0xfffff0e0

08005f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <__NVIC_SetPriorityGrouping+0x40>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f8a:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <__NVIC_SetPriorityGrouping+0x40>)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	60d3      	str	r3, [r2, #12]
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	e000ed00 	.word	0xe000ed00
 8005fa0:	05fa0000 	.word	0x05fa0000

08005fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <__NVIC_GetPriorityGrouping+0x18>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	f003 0307 	and.w	r3, r3, #7
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	db0b      	blt.n	8005fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	f003 021f 	and.w	r2, r3, #31
 8005fd8:	4907      	ldr	r1, [pc, #28]	; (8005ff8 <__NVIC_EnableIRQ+0x38>)
 8005fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	e000e100 	.word	0xe000e100

08005ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	6039      	str	r1, [r7, #0]
 8006006:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800600c:	2b00      	cmp	r3, #0
 800600e:	db0a      	blt.n	8006026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	490c      	ldr	r1, [pc, #48]	; (8006048 <__NVIC_SetPriority+0x4c>)
 8006016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800601a:	0112      	lsls	r2, r2, #4
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	440b      	add	r3, r1
 8006020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006024:	e00a      	b.n	800603c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <__NVIC_SetPriority+0x50>)
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	3b04      	subs	r3, #4
 8006034:	0112      	lsls	r2, r2, #4
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	440b      	add	r3, r1
 800603a:	761a      	strb	r2, [r3, #24]
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000e100 	.word	0xe000e100
 800604c:	e000ed00 	.word	0xe000ed00

08006050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f1c3 0307 	rsb	r3, r3, #7
 800606a:	2b04      	cmp	r3, #4
 800606c:	bf28      	it	cs
 800606e:	2304      	movcs	r3, #4
 8006070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3304      	adds	r3, #4
 8006076:	2b06      	cmp	r3, #6
 8006078:	d902      	bls.n	8006080 <NVIC_EncodePriority+0x30>
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	3b03      	subs	r3, #3
 800607e:	e000      	b.n	8006082 <NVIC_EncodePriority+0x32>
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006084:	f04f 32ff 	mov.w	r2, #4294967295
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43da      	mvns	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	401a      	ands	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006098:	f04f 31ff 	mov.w	r1, #4294967295
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	fa01 f303 	lsl.w	r3, r1, r3
 80060a2:	43d9      	mvns	r1, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a8:	4313      	orrs	r3, r2
         );
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060c8:	d301      	bcc.n	80060ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ca:	2301      	movs	r3, #1
 80060cc:	e00f      	b.n	80060ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060ce:	4a0a      	ldr	r2, [pc, #40]	; (80060f8 <SysTick_Config+0x40>)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060d6:	210f      	movs	r1, #15
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	f7ff ff8e 	bl	8005ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <SysTick_Config+0x40>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060e6:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <SysTick_Config+0x40>)
 80060e8:	2207      	movs	r2, #7
 80060ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	e000e010 	.word	0xe000e010

080060fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff ff29 	bl	8005f5c <__NVIC_SetPriorityGrouping>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b086      	sub	sp, #24
 8006116:	af00      	add	r7, sp, #0
 8006118:	4603      	mov	r3, r0
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006120:	f7ff ff40 	bl	8005fa4 <__NVIC_GetPriorityGrouping>
 8006124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	6978      	ldr	r0, [r7, #20]
 800612c:	f7ff ff90 	bl	8006050 <NVIC_EncodePriority>
 8006130:	4602      	mov	r2, r0
 8006132:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff ff5f 	bl	8005ffc <__NVIC_SetPriority>
}
 800613e:	bf00      	nop
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	4603      	mov	r3, r0
 800614e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff ff33 	bl	8005fc0 <__NVIC_EnableIRQ>
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff ffa4 	bl	80060b8 <SysTick_Config>
 8006170:	4603      	mov	r3, r0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006184:	f7fd fee8 	bl	8003f58 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e314      	b.n	80067be <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a66      	ldr	r2, [pc, #408]	; (8006334 <HAL_DMA_Init+0x1b8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d04a      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a65      	ldr	r2, [pc, #404]	; (8006338 <HAL_DMA_Init+0x1bc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d045      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a63      	ldr	r2, [pc, #396]	; (800633c <HAL_DMA_Init+0x1c0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d040      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a62      	ldr	r2, [pc, #392]	; (8006340 <HAL_DMA_Init+0x1c4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d03b      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a60      	ldr	r2, [pc, #384]	; (8006344 <HAL_DMA_Init+0x1c8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d036      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a5f      	ldr	r2, [pc, #380]	; (8006348 <HAL_DMA_Init+0x1cc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d031      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5d      	ldr	r2, [pc, #372]	; (800634c <HAL_DMA_Init+0x1d0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02c      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5c      	ldr	r2, [pc, #368]	; (8006350 <HAL_DMA_Init+0x1d4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d027      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5a      	ldr	r2, [pc, #360]	; (8006354 <HAL_DMA_Init+0x1d8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a59      	ldr	r2, [pc, #356]	; (8006358 <HAL_DMA_Init+0x1dc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01d      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a57      	ldr	r2, [pc, #348]	; (800635c <HAL_DMA_Init+0x1e0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a56      	ldr	r2, [pc, #344]	; (8006360 <HAL_DMA_Init+0x1e4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a54      	ldr	r2, [pc, #336]	; (8006364 <HAL_DMA_Init+0x1e8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a53      	ldr	r2, [pc, #332]	; (8006368 <HAL_DMA_Init+0x1ec>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a51      	ldr	r2, [pc, #324]	; (800636c <HAL_DMA_Init+0x1f0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a50      	ldr	r2, [pc, #320]	; (8006370 <HAL_DMA_Init+0x1f4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_DMA_Init+0xbc>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_DMA_Init+0xbe>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 813c 	beq.w	80064b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a37      	ldr	r2, [pc, #220]	; (8006334 <HAL_DMA_Init+0x1b8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d04a      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a36      	ldr	r2, [pc, #216]	; (8006338 <HAL_DMA_Init+0x1bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d045      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a34      	ldr	r2, [pc, #208]	; (800633c <HAL_DMA_Init+0x1c0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d040      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a33      	ldr	r2, [pc, #204]	; (8006340 <HAL_DMA_Init+0x1c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d03b      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a31      	ldr	r2, [pc, #196]	; (8006344 <HAL_DMA_Init+0x1c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d036      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a30      	ldr	r2, [pc, #192]	; (8006348 <HAL_DMA_Init+0x1cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d031      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_DMA_Init+0x1d0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02c      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2d      	ldr	r2, [pc, #180]	; (8006350 <HAL_DMA_Init+0x1d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d027      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <HAL_DMA_Init+0x1d8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d022      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2a      	ldr	r2, [pc, #168]	; (8006358 <HAL_DMA_Init+0x1dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01d      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_DMA_Init+0x1e0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a27      	ldr	r2, [pc, #156]	; (8006360 <HAL_DMA_Init+0x1e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a25      	ldr	r2, [pc, #148]	; (8006364 <HAL_DMA_Init+0x1e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a24      	ldr	r2, [pc, #144]	; (8006368 <HAL_DMA_Init+0x1ec>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_DMA_Init+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a21      	ldr	r2, [pc, #132]	; (8006370 <HAL_DMA_Init+0x1f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d108      	bne.n	8006302 <HAL_DMA_Init+0x186>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e007      	b.n	8006312 <HAL_DMA_Init+0x196>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006312:	e02f      	b.n	8006374 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006314:	f7fd fe20 	bl	8003f58 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b05      	cmp	r3, #5
 8006320:	d928      	bls.n	8006374 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2203      	movs	r2, #3
 800632c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e244      	b.n	80067be <HAL_DMA_Init+0x642>
 8006334:	40020010 	.word	0x40020010
 8006338:	40020028 	.word	0x40020028
 800633c:	40020040 	.word	0x40020040
 8006340:	40020058 	.word	0x40020058
 8006344:	40020070 	.word	0x40020070
 8006348:	40020088 	.word	0x40020088
 800634c:	400200a0 	.word	0x400200a0
 8006350:	400200b8 	.word	0x400200b8
 8006354:	40020410 	.word	0x40020410
 8006358:	40020428 	.word	0x40020428
 800635c:	40020440 	.word	0x40020440
 8006360:	40020458 	.word	0x40020458
 8006364:	40020470 	.word	0x40020470
 8006368:	40020488 	.word	0x40020488
 800636c:	400204a0 	.word	0x400204a0
 8006370:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1c8      	bne.n	8006314 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4b84      	ldr	r3, [pc, #528]	; (80065a0 <HAL_DMA_Init+0x424>)
 800638e:	4013      	ands	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800639a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d107      	bne.n	80063d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	4313      	orrs	r3, r2
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b28      	cmp	r3, #40	; 0x28
 80063de:	d903      	bls.n	80063e8 <HAL_DMA_Init+0x26c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b2e      	cmp	r3, #46	; 0x2e
 80063e6:	d91f      	bls.n	8006428 <HAL_DMA_Init+0x2ac>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b3e      	cmp	r3, #62	; 0x3e
 80063ee:	d903      	bls.n	80063f8 <HAL_DMA_Init+0x27c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b42      	cmp	r3, #66	; 0x42
 80063f6:	d917      	bls.n	8006428 <HAL_DMA_Init+0x2ac>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b46      	cmp	r3, #70	; 0x46
 80063fe:	d903      	bls.n	8006408 <HAL_DMA_Init+0x28c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b48      	cmp	r3, #72	; 0x48
 8006406:	d90f      	bls.n	8006428 <HAL_DMA_Init+0x2ac>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b4e      	cmp	r3, #78	; 0x4e
 800640e:	d903      	bls.n	8006418 <HAL_DMA_Init+0x29c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b52      	cmp	r3, #82	; 0x52
 8006416:	d907      	bls.n	8006428 <HAL_DMA_Init+0x2ac>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b73      	cmp	r3, #115	; 0x73
 800641e:	d905      	bls.n	800642c <HAL_DMA_Init+0x2b0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b77      	cmp	r3, #119	; 0x77
 8006426:	d801      	bhi.n	800642c <HAL_DMA_Init+0x2b0>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <HAL_DMA_Init+0x2b2>
 800642c:	2300      	movs	r3, #0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b04      	cmp	r3, #4
 8006462:	d117      	bne.n	8006494 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00e      	beq.n	8006494 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fdcc 	bl	8008014 <DMA_CheckFifoParam>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d008      	beq.n	8006494 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2240      	movs	r2, #64	; 0x40
 8006486:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e194      	b.n	80067be <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fd07 	bl	8007eb0 <DMA_CalcBaseAndBitshift>
 80064a2:	4603      	mov	r3, r0
 80064a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	223f      	movs	r2, #63	; 0x3f
 80064b0:	409a      	lsls	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	609a      	str	r2, [r3, #8]
 80064b6:	e0ca      	b.n	800664e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a39      	ldr	r2, [pc, #228]	; (80065a4 <HAL_DMA_Init+0x428>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d022      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a38      	ldr	r2, [pc, #224]	; (80065a8 <HAL_DMA_Init+0x42c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d01d      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a36      	ldr	r2, [pc, #216]	; (80065ac <HAL_DMA_Init+0x430>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d018      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a35      	ldr	r2, [pc, #212]	; (80065b0 <HAL_DMA_Init+0x434>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a33      	ldr	r2, [pc, #204]	; (80065b4 <HAL_DMA_Init+0x438>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00e      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a32      	ldr	r2, [pc, #200]	; (80065b8 <HAL_DMA_Init+0x43c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d009      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a30      	ldr	r2, [pc, #192]	; (80065bc <HAL_DMA_Init+0x440>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <HAL_DMA_Init+0x38c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <HAL_DMA_Init+0x444>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_DMA_Init+0x390>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <HAL_DMA_Init+0x392>
 800650c:	2300      	movs	r3, #0
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8094 	beq.w	800663c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <HAL_DMA_Init+0x428>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d021      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a21      	ldr	r2, [pc, #132]	; (80065a8 <HAL_DMA_Init+0x42c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d01c      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <HAL_DMA_Init+0x430>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d017      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <HAL_DMA_Init+0x434>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d012      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <HAL_DMA_Init+0x438>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00d      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <HAL_DMA_Init+0x43c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d008      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a19      	ldr	r2, [pc, #100]	; (80065bc <HAL_DMA_Init+0x440>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <HAL_DMA_Init+0x3e6>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_DMA_Init+0x444>)
 8006560:	4293      	cmp	r3, r2
 8006562:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <HAL_DMA_Init+0x448>)
 8006580:	4013      	ands	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d01d      	beq.n	80065c8 <HAL_DMA_Init+0x44c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d102      	bne.n	800659a <HAL_DMA_Init+0x41e>
 8006594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006598:	e017      	b.n	80065ca <HAL_DMA_Init+0x44e>
 800659a:	2300      	movs	r3, #0
 800659c:	e015      	b.n	80065ca <HAL_DMA_Init+0x44e>
 800659e:	bf00      	nop
 80065a0:	fe10803f 	.word	0xfe10803f
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494
 80065c4:	fffe000f 	.word	0xfffe000f
 80065c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68d2      	ldr	r2, [r2, #12]
 80065ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	4b6e      	ldr	r3, [pc, #440]	; (80067c8 <HAL_DMA_Init+0x64c>)
 8006610:	4413      	add	r3, r2
 8006612:	4a6e      	ldr	r2, [pc, #440]	; (80067cc <HAL_DMA_Init+0x650>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	009a      	lsls	r2, r3, #2
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fc45 	bl	8007eb0 <DMA_CalcBaseAndBitshift>
 8006626:	4603      	mov	r3, r0
 8006628:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2201      	movs	r2, #1
 8006634:	409a      	lsls	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	605a      	str	r2, [r3, #4]
 800663a:	e008      	b.n	800664e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2240      	movs	r2, #64	; 0x40
 8006640:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2203      	movs	r2, #3
 8006646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e0b7      	b.n	80067be <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5f      	ldr	r2, [pc, #380]	; (80067d0 <HAL_DMA_Init+0x654>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d072      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5d      	ldr	r2, [pc, #372]	; (80067d4 <HAL_DMA_Init+0x658>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d06d      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5c      	ldr	r2, [pc, #368]	; (80067d8 <HAL_DMA_Init+0x65c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d068      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5a      	ldr	r2, [pc, #360]	; (80067dc <HAL_DMA_Init+0x660>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d063      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a59      	ldr	r2, [pc, #356]	; (80067e0 <HAL_DMA_Init+0x664>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d05e      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a57      	ldr	r2, [pc, #348]	; (80067e4 <HAL_DMA_Init+0x668>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d059      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a56      	ldr	r2, [pc, #344]	; (80067e8 <HAL_DMA_Init+0x66c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d054      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a54      	ldr	r2, [pc, #336]	; (80067ec <HAL_DMA_Init+0x670>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d04f      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a53      	ldr	r2, [pc, #332]	; (80067f0 <HAL_DMA_Init+0x674>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d04a      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a51      	ldr	r2, [pc, #324]	; (80067f4 <HAL_DMA_Init+0x678>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d045      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a50      	ldr	r2, [pc, #320]	; (80067f8 <HAL_DMA_Init+0x67c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d040      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a4e      	ldr	r2, [pc, #312]	; (80067fc <HAL_DMA_Init+0x680>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d03b      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a4d      	ldr	r2, [pc, #308]	; (8006800 <HAL_DMA_Init+0x684>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d036      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a4b      	ldr	r2, [pc, #300]	; (8006804 <HAL_DMA_Init+0x688>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d031      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a4a      	ldr	r2, [pc, #296]	; (8006808 <HAL_DMA_Init+0x68c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d02c      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a48      	ldr	r2, [pc, #288]	; (800680c <HAL_DMA_Init+0x690>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d027      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a47      	ldr	r2, [pc, #284]	; (8006810 <HAL_DMA_Init+0x694>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d022      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a45      	ldr	r2, [pc, #276]	; (8006814 <HAL_DMA_Init+0x698>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d01d      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a44      	ldr	r2, [pc, #272]	; (8006818 <HAL_DMA_Init+0x69c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d018      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a42      	ldr	r2, [pc, #264]	; (800681c <HAL_DMA_Init+0x6a0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a41      	ldr	r2, [pc, #260]	; (8006820 <HAL_DMA_Init+0x6a4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00e      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3f      	ldr	r2, [pc, #252]	; (8006824 <HAL_DMA_Init+0x6a8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3e      	ldr	r2, [pc, #248]	; (8006828 <HAL_DMA_Init+0x6ac>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_DMA_Init+0x5c2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a3c      	ldr	r2, [pc, #240]	; (800682c <HAL_DMA_Init+0x6b0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_DMA_Init+0x5c6>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_DMA_Init+0x5c8>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d032      	beq.n	80067ae <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 fcdf 	bl	800810c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d102      	bne.n	800675c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006770:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d010      	beq.n	800679c <HAL_DMA_Init+0x620>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b08      	cmp	r3, #8
 8006780:	d80c      	bhi.n	800679c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fd5c 	bl	8008240 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	e008      	b.n	80067ae <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	a7fdabf8 	.word	0xa7fdabf8
 80067cc:	cccccccd 	.word	0xcccccccd
 80067d0:	40020010 	.word	0x40020010
 80067d4:	40020028 	.word	0x40020028
 80067d8:	40020040 	.word	0x40020040
 80067dc:	40020058 	.word	0x40020058
 80067e0:	40020070 	.word	0x40020070
 80067e4:	40020088 	.word	0x40020088
 80067e8:	400200a0 	.word	0x400200a0
 80067ec:	400200b8 	.word	0x400200b8
 80067f0:	40020410 	.word	0x40020410
 80067f4:	40020428 	.word	0x40020428
 80067f8:	40020440 	.word	0x40020440
 80067fc:	40020458 	.word	0x40020458
 8006800:	40020470 	.word	0x40020470
 8006804:	40020488 	.word	0x40020488
 8006808:	400204a0 	.word	0x400204a0
 800680c:	400204b8 	.word	0x400204b8
 8006810:	58025408 	.word	0x58025408
 8006814:	5802541c 	.word	0x5802541c
 8006818:	58025430 	.word	0x58025430
 800681c:	58025444 	.word	0x58025444
 8006820:	58025458 	.word	0x58025458
 8006824:	5802546c 	.word	0x5802546c
 8006828:	58025480 	.word	0x58025480
 800682c:	58025494 	.word	0x58025494

08006830 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e226      	b.n	8006c9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_DMA_Start_IT+0x2a>
 8006856:	2302      	movs	r3, #2
 8006858:	e21f      	b.n	8006c9a <HAL_DMA_Start_IT+0x46a>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	f040 820a 	bne.w	8006c84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a68      	ldr	r2, [pc, #416]	; (8006a24 <HAL_DMA_Start_IT+0x1f4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d04a      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a66      	ldr	r2, [pc, #408]	; (8006a28 <HAL_DMA_Start_IT+0x1f8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d045      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a65      	ldr	r2, [pc, #404]	; (8006a2c <HAL_DMA_Start_IT+0x1fc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d040      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a63      	ldr	r2, [pc, #396]	; (8006a30 <HAL_DMA_Start_IT+0x200>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d03b      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a62      	ldr	r2, [pc, #392]	; (8006a34 <HAL_DMA_Start_IT+0x204>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d036      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a60      	ldr	r2, [pc, #384]	; (8006a38 <HAL_DMA_Start_IT+0x208>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d031      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5f      	ldr	r2, [pc, #380]	; (8006a3c <HAL_DMA_Start_IT+0x20c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d02c      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5d      	ldr	r2, [pc, #372]	; (8006a40 <HAL_DMA_Start_IT+0x210>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d027      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a5c      	ldr	r2, [pc, #368]	; (8006a44 <HAL_DMA_Start_IT+0x214>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5a      	ldr	r2, [pc, #360]	; (8006a48 <HAL_DMA_Start_IT+0x218>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a59      	ldr	r2, [pc, #356]	; (8006a4c <HAL_DMA_Start_IT+0x21c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d018      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a57      	ldr	r2, [pc, #348]	; (8006a50 <HAL_DMA_Start_IT+0x220>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a56      	ldr	r2, [pc, #344]	; (8006a54 <HAL_DMA_Start_IT+0x224>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00e      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a54      	ldr	r2, [pc, #336]	; (8006a58 <HAL_DMA_Start_IT+0x228>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d009      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a53      	ldr	r2, [pc, #332]	; (8006a5c <HAL_DMA_Start_IT+0x22c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_DMA_Start_IT+0xee>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a51      	ldr	r2, [pc, #324]	; (8006a60 <HAL_DMA_Start_IT+0x230>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d108      	bne.n	8006930 <HAL_DMA_Start_IT+0x100>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e007      	b.n	8006940 <HAL_DMA_Start_IT+0x110>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f906 	bl	8007b58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a34      	ldr	r2, [pc, #208]	; (8006a24 <HAL_DMA_Start_IT+0x1f4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d04a      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a33      	ldr	r2, [pc, #204]	; (8006a28 <HAL_DMA_Start_IT+0x1f8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d045      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a31      	ldr	r2, [pc, #196]	; (8006a2c <HAL_DMA_Start_IT+0x1fc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d040      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a30      	ldr	r2, [pc, #192]	; (8006a30 <HAL_DMA_Start_IT+0x200>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d03b      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <HAL_DMA_Start_IT+0x204>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d036      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2d      	ldr	r2, [pc, #180]	; (8006a38 <HAL_DMA_Start_IT+0x208>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d031      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a2b      	ldr	r2, [pc, #172]	; (8006a3c <HAL_DMA_Start_IT+0x20c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d02c      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <HAL_DMA_Start_IT+0x210>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d027      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a28      	ldr	r2, [pc, #160]	; (8006a44 <HAL_DMA_Start_IT+0x214>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <HAL_DMA_Start_IT+0x218>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d01d      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <HAL_DMA_Start_IT+0x21c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a24      	ldr	r2, [pc, #144]	; (8006a50 <HAL_DMA_Start_IT+0x220>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a22      	ldr	r2, [pc, #136]	; (8006a54 <HAL_DMA_Start_IT+0x224>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <HAL_DMA_Start_IT+0x228>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <HAL_DMA_Start_IT+0x22c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_DMA_Start_IT+0x1bc>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <HAL_DMA_Start_IT+0x230>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_DMA_Start_IT+0x1c0>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_DMA_Start_IT+0x1c2>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d036      	beq.n	8006a64 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f023 021e 	bic.w	r2, r3, #30
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0216 	orr.w	r2, r2, #22
 8006a08:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d03e      	beq.n	8006a90 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0208 	orr.w	r2, r2, #8
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e035      	b.n	8006a90 <HAL_DMA_Start_IT+0x260>
 8006a24:	40020010 	.word	0x40020010
 8006a28:	40020028 	.word	0x40020028
 8006a2c:	40020040 	.word	0x40020040
 8006a30:	40020058 	.word	0x40020058
 8006a34:	40020070 	.word	0x40020070
 8006a38:	40020088 	.word	0x40020088
 8006a3c:	400200a0 	.word	0x400200a0
 8006a40:	400200b8 	.word	0x400200b8
 8006a44:	40020410 	.word	0x40020410
 8006a48:	40020428 	.word	0x40020428
 8006a4c:	40020440 	.word	0x40020440
 8006a50:	40020458 	.word	0x40020458
 8006a54:	40020470 	.word	0x40020470
 8006a58:	40020488 	.word	0x40020488
 8006a5c:	400204a0 	.word	0x400204a0
 8006a60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f023 020e 	bic.w	r2, r3, #14
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 020a 	orr.w	r2, r2, #10
 8006a76:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0204 	orr.w	r2, r2, #4
 8006a8e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a83      	ldr	r2, [pc, #524]	; (8006ca4 <HAL_DMA_Start_IT+0x474>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d072      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a82      	ldr	r2, [pc, #520]	; (8006ca8 <HAL_DMA_Start_IT+0x478>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d06d      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a80      	ldr	r2, [pc, #512]	; (8006cac <HAL_DMA_Start_IT+0x47c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d068      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a7f      	ldr	r2, [pc, #508]	; (8006cb0 <HAL_DMA_Start_IT+0x480>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d063      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a7d      	ldr	r2, [pc, #500]	; (8006cb4 <HAL_DMA_Start_IT+0x484>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d05e      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7c      	ldr	r2, [pc, #496]	; (8006cb8 <HAL_DMA_Start_IT+0x488>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d059      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a7a      	ldr	r2, [pc, #488]	; (8006cbc <HAL_DMA_Start_IT+0x48c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d054      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a79      	ldr	r2, [pc, #484]	; (8006cc0 <HAL_DMA_Start_IT+0x490>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04f      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a77      	ldr	r2, [pc, #476]	; (8006cc4 <HAL_DMA_Start_IT+0x494>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a76      	ldr	r2, [pc, #472]	; (8006cc8 <HAL_DMA_Start_IT+0x498>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a74      	ldr	r2, [pc, #464]	; (8006ccc <HAL_DMA_Start_IT+0x49c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a73      	ldr	r2, [pc, #460]	; (8006cd0 <HAL_DMA_Start_IT+0x4a0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a71      	ldr	r2, [pc, #452]	; (8006cd4 <HAL_DMA_Start_IT+0x4a4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a70      	ldr	r2, [pc, #448]	; (8006cd8 <HAL_DMA_Start_IT+0x4a8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a6e      	ldr	r2, [pc, #440]	; (8006cdc <HAL_DMA_Start_IT+0x4ac>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6d      	ldr	r2, [pc, #436]	; (8006ce0 <HAL_DMA_Start_IT+0x4b0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6b      	ldr	r2, [pc, #428]	; (8006ce4 <HAL_DMA_Start_IT+0x4b4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6a      	ldr	r2, [pc, #424]	; (8006ce8 <HAL_DMA_Start_IT+0x4b8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a68      	ldr	r2, [pc, #416]	; (8006cec <HAL_DMA_Start_IT+0x4bc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a67      	ldr	r2, [pc, #412]	; (8006cf0 <HAL_DMA_Start_IT+0x4c0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a65      	ldr	r2, [pc, #404]	; (8006cf4 <HAL_DMA_Start_IT+0x4c4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a64      	ldr	r2, [pc, #400]	; (8006cf8 <HAL_DMA_Start_IT+0x4c8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a62      	ldr	r2, [pc, #392]	; (8006cfc <HAL_DMA_Start_IT+0x4cc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_DMA_Start_IT+0x350>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_DMA_Start_IT+0x4d0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_DMA_Start_IT+0x354>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_DMA_Start_IT+0x356>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01a      	beq.n	8006bc0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bbe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a37      	ldr	r2, [pc, #220]	; (8006ca4 <HAL_DMA_Start_IT+0x474>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d04a      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a36      	ldr	r2, [pc, #216]	; (8006ca8 <HAL_DMA_Start_IT+0x478>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d045      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a34      	ldr	r2, [pc, #208]	; (8006cac <HAL_DMA_Start_IT+0x47c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d040      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a33      	ldr	r2, [pc, #204]	; (8006cb0 <HAL_DMA_Start_IT+0x480>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d03b      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a31      	ldr	r2, [pc, #196]	; (8006cb4 <HAL_DMA_Start_IT+0x484>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d036      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a30      	ldr	r2, [pc, #192]	; (8006cb8 <HAL_DMA_Start_IT+0x488>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d031      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2e      	ldr	r2, [pc, #184]	; (8006cbc <HAL_DMA_Start_IT+0x48c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d02c      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2d      	ldr	r2, [pc, #180]	; (8006cc0 <HAL_DMA_Start_IT+0x490>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d027      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <HAL_DMA_Start_IT+0x494>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d022      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <HAL_DMA_Start_IT+0x498>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d01d      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a28      	ldr	r2, [pc, #160]	; (8006ccc <HAL_DMA_Start_IT+0x49c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d018      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <HAL_DMA_Start_IT+0x4a0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d013      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a25      	ldr	r2, [pc, #148]	; (8006cd4 <HAL_DMA_Start_IT+0x4a4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <HAL_DMA_Start_IT+0x4a8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <HAL_DMA_Start_IT+0x4ac>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_DMA_Start_IT+0x430>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <HAL_DMA_Start_IT+0x4b0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d108      	bne.n	8006c72 <HAL_DMA_Start_IT+0x442>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0201 	orr.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	e012      	b.n	8006c98 <HAL_DMA_Start_IT+0x468>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e009      	b.n	8006c98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40020010 	.word	0x40020010
 8006ca8:	40020028 	.word	0x40020028
 8006cac:	40020040 	.word	0x40020040
 8006cb0:	40020058 	.word	0x40020058
 8006cb4:	40020070 	.word	0x40020070
 8006cb8:	40020088 	.word	0x40020088
 8006cbc:	400200a0 	.word	0x400200a0
 8006cc0:	400200b8 	.word	0x400200b8
 8006cc4:	40020410 	.word	0x40020410
 8006cc8:	40020428 	.word	0x40020428
 8006ccc:	40020440 	.word	0x40020440
 8006cd0:	40020458 	.word	0x40020458
 8006cd4:	40020470 	.word	0x40020470
 8006cd8:	40020488 	.word	0x40020488
 8006cdc:	400204a0 	.word	0x400204a0
 8006ce0:	400204b8 	.word	0x400204b8
 8006ce4:	58025408 	.word	0x58025408
 8006ce8:	5802541c 	.word	0x5802541c
 8006cec:	58025430 	.word	0x58025430
 8006cf0:	58025444 	.word	0x58025444
 8006cf4:	58025458 	.word	0x58025458
 8006cf8:	5802546c 	.word	0x5802546c
 8006cfc:	58025480 	.word	0x58025480
 8006d00:	58025494 	.word	0x58025494

08006d04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d10:	4b67      	ldr	r3, [pc, #412]	; (8006eb0 <HAL_DMA_IRQHandler+0x1ac>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_DMA_IRQHandler+0x1b0>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	0a9b      	lsrs	r3, r3, #10
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a5f      	ldr	r2, [pc, #380]	; (8006eb8 <HAL_DMA_IRQHandler+0x1b4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d04a      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a5d      	ldr	r2, [pc, #372]	; (8006ebc <HAL_DMA_IRQHandler+0x1b8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d045      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a5c      	ldr	r2, [pc, #368]	; (8006ec0 <HAL_DMA_IRQHandler+0x1bc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d040      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a5a      	ldr	r2, [pc, #360]	; (8006ec4 <HAL_DMA_IRQHandler+0x1c0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d03b      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a59      	ldr	r2, [pc, #356]	; (8006ec8 <HAL_DMA_IRQHandler+0x1c4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d036      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a57      	ldr	r2, [pc, #348]	; (8006ecc <HAL_DMA_IRQHandler+0x1c8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d031      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a56      	ldr	r2, [pc, #344]	; (8006ed0 <HAL_DMA_IRQHandler+0x1cc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d02c      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a54      	ldr	r2, [pc, #336]	; (8006ed4 <HAL_DMA_IRQHandler+0x1d0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d027      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a53      	ldr	r2, [pc, #332]	; (8006ed8 <HAL_DMA_IRQHandler+0x1d4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a51      	ldr	r2, [pc, #324]	; (8006edc <HAL_DMA_IRQHandler+0x1d8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a50      	ldr	r2, [pc, #320]	; (8006ee0 <HAL_DMA_IRQHandler+0x1dc>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a4e      	ldr	r2, [pc, #312]	; (8006ee4 <HAL_DMA_IRQHandler+0x1e0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a4d      	ldr	r2, [pc, #308]	; (8006ee8 <HAL_DMA_IRQHandler+0x1e4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a4b      	ldr	r2, [pc, #300]	; (8006eec <HAL_DMA_IRQHandler+0x1e8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4a      	ldr	r2, [pc, #296]	; (8006ef0 <HAL_DMA_IRQHandler+0x1ec>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xd2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a48      	ldr	r2, [pc, #288]	; (8006ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d101      	bne.n	8006dda <HAL_DMA_IRQHandler+0xd6>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <HAL_DMA_IRQHandler+0xd8>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 842b 	beq.w	8007638 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de6:	f003 031f 	and.w	r3, r3, #31
 8006dea:	2208      	movs	r2, #8
 8006dec:	409a      	lsls	r2, r3
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 80a2 	beq.w	8006f3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a2e      	ldr	r2, [pc, #184]	; (8006eb8 <HAL_DMA_IRQHandler+0x1b4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d04a      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2d      	ldr	r2, [pc, #180]	; (8006ebc <HAL_DMA_IRQHandler+0x1b8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d045      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2b      	ldr	r2, [pc, #172]	; (8006ec0 <HAL_DMA_IRQHandler+0x1bc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d040      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <HAL_DMA_IRQHandler+0x1c0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d03b      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <HAL_DMA_IRQHandler+0x1c4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d036      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <HAL_DMA_IRQHandler+0x1c8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d031      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a25      	ldr	r2, [pc, #148]	; (8006ed0 <HAL_DMA_IRQHandler+0x1cc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d02c      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a24      	ldr	r2, [pc, #144]	; (8006ed4 <HAL_DMA_IRQHandler+0x1d0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d027      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a22      	ldr	r2, [pc, #136]	; (8006ed8 <HAL_DMA_IRQHandler+0x1d4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d022      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a21      	ldr	r2, [pc, #132]	; (8006edc <HAL_DMA_IRQHandler+0x1d8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d01d      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <HAL_DMA_IRQHandler+0x1dc>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d018      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <HAL_DMA_IRQHandler+0x1e0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <HAL_DMA_IRQHandler+0x1e4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00e      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <HAL_DMA_IRQHandler+0x1e8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d009      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a19      	ldr	r2, [pc, #100]	; (8006ef0 <HAL_DMA_IRQHandler+0x1ec>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x194>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d12f      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0x1f4>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0304 	and.w	r3, r3, #4
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	e02e      	b.n	8006f0c <HAL_DMA_IRQHandler+0x208>
 8006eae:	bf00      	nop
 8006eb0:	24000000 	.word	0x24000000
 8006eb4:	1b4e81b5 	.word	0x1b4e81b5
 8006eb8:	40020010 	.word	0x40020010
 8006ebc:	40020028 	.word	0x40020028
 8006ec0:	40020040 	.word	0x40020040
 8006ec4:	40020058 	.word	0x40020058
 8006ec8:	40020070 	.word	0x40020070
 8006ecc:	40020088 	.word	0x40020088
 8006ed0:	400200a0 	.word	0x400200a0
 8006ed4:	400200b8 	.word	0x400200b8
 8006ed8:	40020410 	.word	0x40020410
 8006edc:	40020428 	.word	0x40020428
 8006ee0:	40020440 	.word	0x40020440
 8006ee4:	40020458 	.word	0x40020458
 8006ee8:	40020470 	.word	0x40020470
 8006eec:	40020488 	.word	0x40020488
 8006ef0:	400204a0 	.word	0x400204a0
 8006ef4:	400204b8 	.word	0x400204b8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d015      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0204 	bic.w	r2, r2, #4
 8006f1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2208      	movs	r2, #8
 8006f2a:	409a      	lsls	r2, r3
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d06e      	beq.n	8007030 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a69      	ldr	r2, [pc, #420]	; (80070fc <HAL_DMA_IRQHandler+0x3f8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d04a      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a67      	ldr	r2, [pc, #412]	; (8007100 <HAL_DMA_IRQHandler+0x3fc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d045      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a66      	ldr	r2, [pc, #408]	; (8007104 <HAL_DMA_IRQHandler+0x400>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d040      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a64      	ldr	r2, [pc, #400]	; (8007108 <HAL_DMA_IRQHandler+0x404>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d03b      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a63      	ldr	r2, [pc, #396]	; (800710c <HAL_DMA_IRQHandler+0x408>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d036      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a61      	ldr	r2, [pc, #388]	; (8007110 <HAL_DMA_IRQHandler+0x40c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d031      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a60      	ldr	r2, [pc, #384]	; (8007114 <HAL_DMA_IRQHandler+0x410>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d02c      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a5e      	ldr	r2, [pc, #376]	; (8007118 <HAL_DMA_IRQHandler+0x414>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d027      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a5d      	ldr	r2, [pc, #372]	; (800711c <HAL_DMA_IRQHandler+0x418>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d022      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a5b      	ldr	r2, [pc, #364]	; (8007120 <HAL_DMA_IRQHandler+0x41c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01d      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a5a      	ldr	r2, [pc, #360]	; (8007124 <HAL_DMA_IRQHandler+0x420>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d018      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a58      	ldr	r2, [pc, #352]	; (8007128 <HAL_DMA_IRQHandler+0x424>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a57      	ldr	r2, [pc, #348]	; (800712c <HAL_DMA_IRQHandler+0x428>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a55      	ldr	r2, [pc, #340]	; (8007130 <HAL_DMA_IRQHandler+0x42c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a54      	ldr	r2, [pc, #336]	; (8007134 <HAL_DMA_IRQHandler+0x430>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d004      	beq.n	8006ff2 <HAL_DMA_IRQHandler+0x2ee>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a52      	ldr	r2, [pc, #328]	; (8007138 <HAL_DMA_IRQHandler+0x434>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10a      	bne.n	8007008 <HAL_DMA_IRQHandler+0x304>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf14      	ite	ne
 8007000:	2301      	movne	r3, #1
 8007002:	2300      	moveq	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	e003      	b.n	8007010 <HAL_DMA_IRQHandler+0x30c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00d      	beq.n	8007030 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	2201      	movs	r2, #1
 800701e:	409a      	lsls	r2, r3
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	f043 0202 	orr.w	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2204      	movs	r2, #4
 800703a:	409a      	lsls	r2, r3
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 808f 	beq.w	8007164 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <HAL_DMA_IRQHandler+0x3f8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d04a      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <HAL_DMA_IRQHandler+0x3fc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d045      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a29      	ldr	r2, [pc, #164]	; (8007104 <HAL_DMA_IRQHandler+0x400>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d040      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a27      	ldr	r2, [pc, #156]	; (8007108 <HAL_DMA_IRQHandler+0x404>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d03b      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a26      	ldr	r2, [pc, #152]	; (800710c <HAL_DMA_IRQHandler+0x408>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d036      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a24      	ldr	r2, [pc, #144]	; (8007110 <HAL_DMA_IRQHandler+0x40c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d031      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a23      	ldr	r2, [pc, #140]	; (8007114 <HAL_DMA_IRQHandler+0x410>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d02c      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a21      	ldr	r2, [pc, #132]	; (8007118 <HAL_DMA_IRQHandler+0x414>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d027      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a20      	ldr	r2, [pc, #128]	; (800711c <HAL_DMA_IRQHandler+0x418>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d022      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_DMA_IRQHandler+0x41c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01d      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <HAL_DMA_IRQHandler+0x420>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_DMA_IRQHandler+0x424>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_DMA_IRQHandler+0x428>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a18      	ldr	r2, [pc, #96]	; (8007130 <HAL_DMA_IRQHandler+0x42c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a17      	ldr	r2, [pc, #92]	; (8007134 <HAL_DMA_IRQHandler+0x430>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x3e2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a15      	ldr	r2, [pc, #84]	; (8007138 <HAL_DMA_IRQHandler+0x434>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d12a      	bne.n	800713c <HAL_DMA_IRQHandler+0x438>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bf14      	ite	ne
 80070f4:	2301      	movne	r3, #1
 80070f6:	2300      	moveq	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	e023      	b.n	8007144 <HAL_DMA_IRQHandler+0x440>
 80070fc:	40020010 	.word	0x40020010
 8007100:	40020028 	.word	0x40020028
 8007104:	40020040 	.word	0x40020040
 8007108:	40020058 	.word	0x40020058
 800710c:	40020070 	.word	0x40020070
 8007110:	40020088 	.word	0x40020088
 8007114:	400200a0 	.word	0x400200a0
 8007118:	400200b8 	.word	0x400200b8
 800711c:	40020410 	.word	0x40020410
 8007120:	40020428 	.word	0x40020428
 8007124:	40020440 	.word	0x40020440
 8007128:	40020458 	.word	0x40020458
 800712c:	40020470 	.word	0x40020470
 8007130:	40020488 	.word	0x40020488
 8007134:	400204a0 	.word	0x400204a0
 8007138:	400204b8 	.word	0x400204b8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00d      	beq.n	8007164 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	2204      	movs	r2, #4
 8007152:	409a      	lsls	r2, r3
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2210      	movs	r2, #16
 800716e:	409a      	lsls	r2, r3
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80a6 	beq.w	80072c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a85      	ldr	r2, [pc, #532]	; (8007394 <HAL_DMA_IRQHandler+0x690>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d04a      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a83      	ldr	r2, [pc, #524]	; (8007398 <HAL_DMA_IRQHandler+0x694>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d045      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a82      	ldr	r2, [pc, #520]	; (800739c <HAL_DMA_IRQHandler+0x698>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d040      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a80      	ldr	r2, [pc, #512]	; (80073a0 <HAL_DMA_IRQHandler+0x69c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d03b      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a7f      	ldr	r2, [pc, #508]	; (80073a4 <HAL_DMA_IRQHandler+0x6a0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d036      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a7d      	ldr	r2, [pc, #500]	; (80073a8 <HAL_DMA_IRQHandler+0x6a4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d031      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a7c      	ldr	r2, [pc, #496]	; (80073ac <HAL_DMA_IRQHandler+0x6a8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d02c      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a7a      	ldr	r2, [pc, #488]	; (80073b0 <HAL_DMA_IRQHandler+0x6ac>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d027      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a79      	ldr	r2, [pc, #484]	; (80073b4 <HAL_DMA_IRQHandler+0x6b0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d022      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a77      	ldr	r2, [pc, #476]	; (80073b8 <HAL_DMA_IRQHandler+0x6b4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01d      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a76      	ldr	r2, [pc, #472]	; (80073bc <HAL_DMA_IRQHandler+0x6b8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d018      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a74      	ldr	r2, [pc, #464]	; (80073c0 <HAL_DMA_IRQHandler+0x6bc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a73      	ldr	r2, [pc, #460]	; (80073c4 <HAL_DMA_IRQHandler+0x6c0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00e      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a71      	ldr	r2, [pc, #452]	; (80073c8 <HAL_DMA_IRQHandler+0x6c4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d009      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a70      	ldr	r2, [pc, #448]	; (80073cc <HAL_DMA_IRQHandler+0x6c8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d004      	beq.n	800721a <HAL_DMA_IRQHandler+0x516>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a6e      	ldr	r2, [pc, #440]	; (80073d0 <HAL_DMA_IRQHandler+0x6cc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d10a      	bne.n	8007230 <HAL_DMA_IRQHandler+0x52c>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	bf14      	ite	ne
 8007228:	2301      	movne	r3, #1
 800722a:	2300      	moveq	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	e009      	b.n	8007244 <HAL_DMA_IRQHandler+0x540>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	bf14      	ite	ne
 800723e:	2301      	movne	r3, #1
 8007240:	2300      	moveq	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d03e      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	2210      	movs	r2, #16
 8007252:	409a      	lsls	r2, r3
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d108      	bne.n	8007286 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d024      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
 8007284:	e01f      	b.n	80072c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01b      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
 8007296:	e016      	b.n	80072c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d107      	bne.n	80072b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0208 	bic.w	r2, r2, #8
 80072b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2220      	movs	r2, #32
 80072d0:	409a      	lsls	r2, r3
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8110 	beq.w	80074fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a2c      	ldr	r2, [pc, #176]	; (8007394 <HAL_DMA_IRQHandler+0x690>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d04a      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a2b      	ldr	r2, [pc, #172]	; (8007398 <HAL_DMA_IRQHandler+0x694>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d045      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a29      	ldr	r2, [pc, #164]	; (800739c <HAL_DMA_IRQHandler+0x698>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d040      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a28      	ldr	r2, [pc, #160]	; (80073a0 <HAL_DMA_IRQHandler+0x69c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d03b      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <HAL_DMA_IRQHandler+0x6a0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d036      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <HAL_DMA_IRQHandler+0x6a4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d031      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a23      	ldr	r2, [pc, #140]	; (80073ac <HAL_DMA_IRQHandler+0x6a8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d02c      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a22      	ldr	r2, [pc, #136]	; (80073b0 <HAL_DMA_IRQHandler+0x6ac>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d027      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a20      	ldr	r2, [pc, #128]	; (80073b4 <HAL_DMA_IRQHandler+0x6b0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1f      	ldr	r2, [pc, #124]	; (80073b8 <HAL_DMA_IRQHandler+0x6b4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1d      	ldr	r2, [pc, #116]	; (80073bc <HAL_DMA_IRQHandler+0x6b8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1c      	ldr	r2, [pc, #112]	; (80073c0 <HAL_DMA_IRQHandler+0x6bc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <HAL_DMA_IRQHandler+0x6c0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <HAL_DMA_IRQHandler+0x6c4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a17      	ldr	r2, [pc, #92]	; (80073cc <HAL_DMA_IRQHandler+0x6c8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_DMA_IRQHandler+0x678>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <HAL_DMA_IRQHandler+0x6cc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d12b      	bne.n	80073d4 <HAL_DMA_IRQHandler+0x6d0>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e02a      	b.n	80073e8 <HAL_DMA_IRQHandler+0x6e4>
 8007392:	bf00      	nop
 8007394:	40020010 	.word	0x40020010
 8007398:	40020028 	.word	0x40020028
 800739c:	40020040 	.word	0x40020040
 80073a0:	40020058 	.word	0x40020058
 80073a4:	40020070 	.word	0x40020070
 80073a8:	40020088 	.word	0x40020088
 80073ac:	400200a0 	.word	0x400200a0
 80073b0:	400200b8 	.word	0x400200b8
 80073b4:	40020410 	.word	0x40020410
 80073b8:	40020428 	.word	0x40020428
 80073bc:	40020440 	.word	0x40020440
 80073c0:	40020458 	.word	0x40020458
 80073c4:	40020470 	.word	0x40020470
 80073c8:	40020488 	.word	0x40020488
 80073cc:	400204a0 	.word	0x400204a0
 80073d0:	400204b8 	.word	0x400204b8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bf14      	ite	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	2300      	moveq	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8087 	beq.w	80074fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	2220      	movs	r2, #32
 80073f8:	409a      	lsls	r2, r3
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b04      	cmp	r3, #4
 8007408:	d139      	bne.n	800747e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0216 	bic.w	r2, r2, #22
 8007418:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695a      	ldr	r2, [r3, #20]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007428:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d103      	bne.n	800743a <HAL_DMA_IRQHandler+0x736>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0208 	bic.w	r2, r2, #8
 8007448:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	223f      	movs	r2, #63	; 0x3f
 8007454:	409a      	lsls	r2, r3
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 834a 	beq.w	8007b08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
          }
          return;
 800747c:	e344      	b.n	8007b08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d018      	beq.n	80074be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d108      	bne.n	80074ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d02c      	beq.n	80074fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
 80074aa:	e027      	b.n	80074fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d023      	beq.n	80074fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	e01e      	b.n	80074fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10f      	bne.n	80074ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0210 	bic.w	r2, r2, #16
 80074da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8306 	beq.w	8007b12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8088 	beq.w	8007624 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2204      	movs	r2, #4
 8007518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a7a      	ldr	r2, [pc, #488]	; (800770c <HAL_DMA_IRQHandler+0xa08>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d04a      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a79      	ldr	r2, [pc, #484]	; (8007710 <HAL_DMA_IRQHandler+0xa0c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d045      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a77      	ldr	r2, [pc, #476]	; (8007714 <HAL_DMA_IRQHandler+0xa10>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d040      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a76      	ldr	r2, [pc, #472]	; (8007718 <HAL_DMA_IRQHandler+0xa14>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d03b      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a74      	ldr	r2, [pc, #464]	; (800771c <HAL_DMA_IRQHandler+0xa18>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d036      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a73      	ldr	r2, [pc, #460]	; (8007720 <HAL_DMA_IRQHandler+0xa1c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d031      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a71      	ldr	r2, [pc, #452]	; (8007724 <HAL_DMA_IRQHandler+0xa20>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d02c      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a70      	ldr	r2, [pc, #448]	; (8007728 <HAL_DMA_IRQHandler+0xa24>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d027      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a6e      	ldr	r2, [pc, #440]	; (800772c <HAL_DMA_IRQHandler+0xa28>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d022      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a6d      	ldr	r2, [pc, #436]	; (8007730 <HAL_DMA_IRQHandler+0xa2c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d01d      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a6b      	ldr	r2, [pc, #428]	; (8007734 <HAL_DMA_IRQHandler+0xa30>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d018      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a6a      	ldr	r2, [pc, #424]	; (8007738 <HAL_DMA_IRQHandler+0xa34>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a68      	ldr	r2, [pc, #416]	; (800773c <HAL_DMA_IRQHandler+0xa38>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00e      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a67      	ldr	r2, [pc, #412]	; (8007740 <HAL_DMA_IRQHandler+0xa3c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a65      	ldr	r2, [pc, #404]	; (8007744 <HAL_DMA_IRQHandler+0xa40>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_DMA_IRQHandler+0x8b8>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a64      	ldr	r2, [pc, #400]	; (8007748 <HAL_DMA_IRQHandler+0xa44>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d108      	bne.n	80075ce <HAL_DMA_IRQHandler+0x8ca>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e007      	b.n	80075de <HAL_DMA_IRQHandler+0x8da>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d307      	bcc.n	80075fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f2      	bne.n	80075de <HAL_DMA_IRQHandler+0x8da>
 80075f8:	e000      	b.n	80075fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80075fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2203      	movs	r2, #3
 800760e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007612:	e003      	b.n	800761c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8272 	beq.w	8007b12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
 8007636:	e26c      	b.n	8007b12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a43      	ldr	r2, [pc, #268]	; (800774c <HAL_DMA_IRQHandler+0xa48>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d022      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a42      	ldr	r2, [pc, #264]	; (8007750 <HAL_DMA_IRQHandler+0xa4c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d01d      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a40      	ldr	r2, [pc, #256]	; (8007754 <HAL_DMA_IRQHandler+0xa50>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d018      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a3f      	ldr	r2, [pc, #252]	; (8007758 <HAL_DMA_IRQHandler+0xa54>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a3d      	ldr	r2, [pc, #244]	; (800775c <HAL_DMA_IRQHandler+0xa58>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00e      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a3c      	ldr	r2, [pc, #240]	; (8007760 <HAL_DMA_IRQHandler+0xa5c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d009      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a3a      	ldr	r2, [pc, #232]	; (8007764 <HAL_DMA_IRQHandler+0xa60>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <HAL_DMA_IRQHandler+0x984>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a39      	ldr	r2, [pc, #228]	; (8007768 <HAL_DMA_IRQHandler+0xa64>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d101      	bne.n	800768c <HAL_DMA_IRQHandler+0x988>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <HAL_DMA_IRQHandler+0x98a>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 823f 	beq.w	8007b12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	f003 031f 	and.w	r3, r3, #31
 80076a4:	2204      	movs	r2, #4
 80076a6:	409a      	lsls	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80cd 	beq.w	800784c <HAL_DMA_IRQHandler+0xb48>
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80c7 	beq.w	800784c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2204      	movs	r2, #4
 80076c8:	409a      	lsls	r2, r3
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d049      	beq.n	800776c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8210 	beq.w	8007b0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076f4:	e20a      	b.n	8007b0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8206 	beq.w	8007b0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007708:	e200      	b.n	8007b0c <HAL_DMA_IRQHandler+0xe08>
 800770a:	bf00      	nop
 800770c:	40020010 	.word	0x40020010
 8007710:	40020028 	.word	0x40020028
 8007714:	40020040 	.word	0x40020040
 8007718:	40020058 	.word	0x40020058
 800771c:	40020070 	.word	0x40020070
 8007720:	40020088 	.word	0x40020088
 8007724:	400200a0 	.word	0x400200a0
 8007728:	400200b8 	.word	0x400200b8
 800772c:	40020410 	.word	0x40020410
 8007730:	40020428 	.word	0x40020428
 8007734:	40020440 	.word	0x40020440
 8007738:	40020458 	.word	0x40020458
 800773c:	40020470 	.word	0x40020470
 8007740:	40020488 	.word	0x40020488
 8007744:	400204a0 	.word	0x400204a0
 8007748:	400204b8 	.word	0x400204b8
 800774c:	58025408 	.word	0x58025408
 8007750:	5802541c 	.word	0x5802541c
 8007754:	58025430 	.word	0x58025430
 8007758:	58025444 	.word	0x58025444
 800775c:	58025458 	.word	0x58025458
 8007760:	5802546c 	.word	0x5802546c
 8007764:	58025480 	.word	0x58025480
 8007768:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d160      	bne.n	8007838 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a7f      	ldr	r2, [pc, #508]	; (8007978 <HAL_DMA_IRQHandler+0xc74>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d04a      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a7d      	ldr	r2, [pc, #500]	; (800797c <HAL_DMA_IRQHandler+0xc78>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d045      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a7c      	ldr	r2, [pc, #496]	; (8007980 <HAL_DMA_IRQHandler+0xc7c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d040      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a7a      	ldr	r2, [pc, #488]	; (8007984 <HAL_DMA_IRQHandler+0xc80>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d03b      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a79      	ldr	r2, [pc, #484]	; (8007988 <HAL_DMA_IRQHandler+0xc84>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d036      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a77      	ldr	r2, [pc, #476]	; (800798c <HAL_DMA_IRQHandler+0xc88>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d031      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a76      	ldr	r2, [pc, #472]	; (8007990 <HAL_DMA_IRQHandler+0xc8c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d02c      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a74      	ldr	r2, [pc, #464]	; (8007994 <HAL_DMA_IRQHandler+0xc90>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d027      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a73      	ldr	r2, [pc, #460]	; (8007998 <HAL_DMA_IRQHandler+0xc94>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d022      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a71      	ldr	r2, [pc, #452]	; (800799c <HAL_DMA_IRQHandler+0xc98>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01d      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a70      	ldr	r2, [pc, #448]	; (80079a0 <HAL_DMA_IRQHandler+0xc9c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d018      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6e      	ldr	r2, [pc, #440]	; (80079a4 <HAL_DMA_IRQHandler+0xca0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d013      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6d      	ldr	r2, [pc, #436]	; (80079a8 <HAL_DMA_IRQHandler+0xca4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00e      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a6b      	ldr	r2, [pc, #428]	; (80079ac <HAL_DMA_IRQHandler+0xca8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d009      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a6a      	ldr	r2, [pc, #424]	; (80079b0 <HAL_DMA_IRQHandler+0xcac>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <HAL_DMA_IRQHandler+0xb12>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a68      	ldr	r2, [pc, #416]	; (80079b4 <HAL_DMA_IRQHandler+0xcb0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d108      	bne.n	8007828 <HAL_DMA_IRQHandler+0xb24>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0208 	bic.w	r2, r2, #8
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e007      	b.n	8007838 <HAL_DMA_IRQHandler+0xb34>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0204 	bic.w	r2, r2, #4
 8007836:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8165 	beq.w	8007b0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800784a:	e15f      	b.n	8007b0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	2202      	movs	r2, #2
 8007856:	409a      	lsls	r2, r3
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80c5 	beq.w	80079ec <HAL_DMA_IRQHandler+0xce8>
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80bf 	beq.w	80079ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007872:	f003 031f 	and.w	r3, r3, #31
 8007876:	2202      	movs	r2, #2
 8007878:	409a      	lsls	r2, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d018      	beq.n	80078ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 813a 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078a4:	e134      	b.n	8007b10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 8130 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078b8:	e12a      	b.n	8007b10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 8089 	bne.w	80079d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a2b      	ldr	r2, [pc, #172]	; (8007978 <HAL_DMA_IRQHandler+0xc74>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d04a      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a29      	ldr	r2, [pc, #164]	; (800797c <HAL_DMA_IRQHandler+0xc78>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d045      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a28      	ldr	r2, [pc, #160]	; (8007980 <HAL_DMA_IRQHandler+0xc7c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d040      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a26      	ldr	r2, [pc, #152]	; (8007984 <HAL_DMA_IRQHandler+0xc80>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d03b      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a25      	ldr	r2, [pc, #148]	; (8007988 <HAL_DMA_IRQHandler+0xc84>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d036      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a23      	ldr	r2, [pc, #140]	; (800798c <HAL_DMA_IRQHandler+0xc88>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d031      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a22      	ldr	r2, [pc, #136]	; (8007990 <HAL_DMA_IRQHandler+0xc8c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d02c      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a20      	ldr	r2, [pc, #128]	; (8007994 <HAL_DMA_IRQHandler+0xc90>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d027      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <HAL_DMA_IRQHandler+0xc94>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d022      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1d      	ldr	r2, [pc, #116]	; (800799c <HAL_DMA_IRQHandler+0xc98>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d01d      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1c      	ldr	r2, [pc, #112]	; (80079a0 <HAL_DMA_IRQHandler+0xc9c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d018      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <HAL_DMA_IRQHandler+0xca0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d013      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <HAL_DMA_IRQHandler+0xca4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00e      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a17      	ldr	r2, [pc, #92]	; (80079ac <HAL_DMA_IRQHandler+0xca8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d009      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <HAL_DMA_IRQHandler+0xcac>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d004      	beq.n	8007966 <HAL_DMA_IRQHandler+0xc62>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <HAL_DMA_IRQHandler+0xcb0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d128      	bne.n	80079b8 <HAL_DMA_IRQHandler+0xcb4>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0214 	bic.w	r2, r2, #20
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e027      	b.n	80079c8 <HAL_DMA_IRQHandler+0xcc4>
 8007978:	40020010 	.word	0x40020010
 800797c:	40020028 	.word	0x40020028
 8007980:	40020040 	.word	0x40020040
 8007984:	40020058 	.word	0x40020058
 8007988:	40020070 	.word	0x40020070
 800798c:	40020088 	.word	0x40020088
 8007990:	400200a0 	.word	0x400200a0
 8007994:	400200b8 	.word	0x400200b8
 8007998:	40020410 	.word	0x40020410
 800799c:	40020428 	.word	0x40020428
 80079a0:	40020440 	.word	0x40020440
 80079a4:	40020458 	.word	0x40020458
 80079a8:	40020470 	.word	0x40020470
 80079ac:	40020488 	.word	0x40020488
 80079b0:	400204a0 	.word	0x400204a0
 80079b4:	400204b8 	.word	0x400204b8
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 020a 	bic.w	r2, r2, #10
 80079c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8097 	beq.w	8007b10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ea:	e091      	b.n	8007b10 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2208      	movs	r2, #8
 80079f6:	409a      	lsls	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8088 	beq.w	8007b12 <HAL_DMA_IRQHandler+0xe0e>
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8082 	beq.w	8007b12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a41      	ldr	r2, [pc, #260]	; (8007b18 <HAL_DMA_IRQHandler+0xe14>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d04a      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a3f      	ldr	r2, [pc, #252]	; (8007b1c <HAL_DMA_IRQHandler+0xe18>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d045      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a3e      	ldr	r2, [pc, #248]	; (8007b20 <HAL_DMA_IRQHandler+0xe1c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d040      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a3c      	ldr	r2, [pc, #240]	; (8007b24 <HAL_DMA_IRQHandler+0xe20>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d03b      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a3b      	ldr	r2, [pc, #236]	; (8007b28 <HAL_DMA_IRQHandler+0xe24>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d036      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a39      	ldr	r2, [pc, #228]	; (8007b2c <HAL_DMA_IRQHandler+0xe28>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d031      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <HAL_DMA_IRQHandler+0xe2c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d02c      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a36      	ldr	r2, [pc, #216]	; (8007b34 <HAL_DMA_IRQHandler+0xe30>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d027      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a35      	ldr	r2, [pc, #212]	; (8007b38 <HAL_DMA_IRQHandler+0xe34>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d022      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a33      	ldr	r2, [pc, #204]	; (8007b3c <HAL_DMA_IRQHandler+0xe38>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d01d      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a32      	ldr	r2, [pc, #200]	; (8007b40 <HAL_DMA_IRQHandler+0xe3c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d018      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a30      	ldr	r2, [pc, #192]	; (8007b44 <HAL_DMA_IRQHandler+0xe40>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a2f      	ldr	r2, [pc, #188]	; (8007b48 <HAL_DMA_IRQHandler+0xe44>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00e      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a2d      	ldr	r2, [pc, #180]	; (8007b4c <HAL_DMA_IRQHandler+0xe48>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a2c      	ldr	r2, [pc, #176]	; (8007b50 <HAL_DMA_IRQHandler+0xe4c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_DMA_IRQHandler+0xdaa>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a2a      	ldr	r2, [pc, #168]	; (8007b54 <HAL_DMA_IRQHandler+0xe50>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d108      	bne.n	8007ac0 <HAL_DMA_IRQHandler+0xdbc>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 021c 	bic.w	r2, r2, #28
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e007      	b.n	8007ad0 <HAL_DMA_IRQHandler+0xdcc>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 020e 	bic.w	r2, r2, #14
 8007ace:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	2201      	movs	r2, #1
 8007ada:	409a      	lsls	r2, r3
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	e004      	b.n	8007b12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b12:	3728      	adds	r7, #40	; 0x28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40020010 	.word	0x40020010
 8007b1c:	40020028 	.word	0x40020028
 8007b20:	40020040 	.word	0x40020040
 8007b24:	40020058 	.word	0x40020058
 8007b28:	40020070 	.word	0x40020070
 8007b2c:	40020088 	.word	0x40020088
 8007b30:	400200a0 	.word	0x400200a0
 8007b34:	400200b8 	.word	0x400200b8
 8007b38:	40020410 	.word	0x40020410
 8007b3c:	40020428 	.word	0x40020428
 8007b40:	40020440 	.word	0x40020440
 8007b44:	40020458 	.word	0x40020458
 8007b48:	40020470 	.word	0x40020470
 8007b4c:	40020488 	.word	0x40020488
 8007b50:	400204a0 	.word	0x400204a0
 8007b54:	400204b8 	.word	0x400204b8

08007b58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a7f      	ldr	r2, [pc, #508]	; (8007d74 <DMA_SetConfig+0x21c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d072      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a7d      	ldr	r2, [pc, #500]	; (8007d78 <DMA_SetConfig+0x220>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d06d      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a7c      	ldr	r2, [pc, #496]	; (8007d7c <DMA_SetConfig+0x224>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d068      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a7a      	ldr	r2, [pc, #488]	; (8007d80 <DMA_SetConfig+0x228>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d063      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a79      	ldr	r2, [pc, #484]	; (8007d84 <DMA_SetConfig+0x22c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d05e      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a77      	ldr	r2, [pc, #476]	; (8007d88 <DMA_SetConfig+0x230>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d059      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a76      	ldr	r2, [pc, #472]	; (8007d8c <DMA_SetConfig+0x234>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d054      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a74      	ldr	r2, [pc, #464]	; (8007d90 <DMA_SetConfig+0x238>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d04f      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a73      	ldr	r2, [pc, #460]	; (8007d94 <DMA_SetConfig+0x23c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d04a      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a71      	ldr	r2, [pc, #452]	; (8007d98 <DMA_SetConfig+0x240>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d045      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a70      	ldr	r2, [pc, #448]	; (8007d9c <DMA_SetConfig+0x244>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d040      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a6e      	ldr	r2, [pc, #440]	; (8007da0 <DMA_SetConfig+0x248>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d03b      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a6d      	ldr	r2, [pc, #436]	; (8007da4 <DMA_SetConfig+0x24c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d036      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a6b      	ldr	r2, [pc, #428]	; (8007da8 <DMA_SetConfig+0x250>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d031      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a6a      	ldr	r2, [pc, #424]	; (8007dac <DMA_SetConfig+0x254>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d02c      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a68      	ldr	r2, [pc, #416]	; (8007db0 <DMA_SetConfig+0x258>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d027      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a67      	ldr	r2, [pc, #412]	; (8007db4 <DMA_SetConfig+0x25c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a65      	ldr	r2, [pc, #404]	; (8007db8 <DMA_SetConfig+0x260>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01d      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a64      	ldr	r2, [pc, #400]	; (8007dbc <DMA_SetConfig+0x264>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a62      	ldr	r2, [pc, #392]	; (8007dc0 <DMA_SetConfig+0x268>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a61      	ldr	r2, [pc, #388]	; (8007dc4 <DMA_SetConfig+0x26c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a5f      	ldr	r2, [pc, #380]	; (8007dc8 <DMA_SetConfig+0x270>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a5e      	ldr	r2, [pc, #376]	; (8007dcc <DMA_SetConfig+0x274>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <DMA_SetConfig+0x10a>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a5c      	ldr	r2, [pc, #368]	; (8007dd0 <DMA_SetConfig+0x278>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d101      	bne.n	8007c66 <DMA_SetConfig+0x10e>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e000      	b.n	8007c68 <DMA_SetConfig+0x110>
 8007c66:	2300      	movs	r3, #0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00d      	beq.n	8007c88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a39      	ldr	r2, [pc, #228]	; (8007d74 <DMA_SetConfig+0x21c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d04a      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a38      	ldr	r2, [pc, #224]	; (8007d78 <DMA_SetConfig+0x220>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d045      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a36      	ldr	r2, [pc, #216]	; (8007d7c <DMA_SetConfig+0x224>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d040      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a35      	ldr	r2, [pc, #212]	; (8007d80 <DMA_SetConfig+0x228>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d03b      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a33      	ldr	r2, [pc, #204]	; (8007d84 <DMA_SetConfig+0x22c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d036      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a32      	ldr	r2, [pc, #200]	; (8007d88 <DMA_SetConfig+0x230>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d031      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a30      	ldr	r2, [pc, #192]	; (8007d8c <DMA_SetConfig+0x234>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d02c      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a2f      	ldr	r2, [pc, #188]	; (8007d90 <DMA_SetConfig+0x238>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d027      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <DMA_SetConfig+0x23c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d022      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2c      	ldr	r2, [pc, #176]	; (8007d98 <DMA_SetConfig+0x240>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d01d      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a2a      	ldr	r2, [pc, #168]	; (8007d9c <DMA_SetConfig+0x244>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d018      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a29      	ldr	r2, [pc, #164]	; (8007da0 <DMA_SetConfig+0x248>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d013      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <DMA_SetConfig+0x24c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00e      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <DMA_SetConfig+0x250>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d009      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a24      	ldr	r2, [pc, #144]	; (8007dac <DMA_SetConfig+0x254>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d004      	beq.n	8007d28 <DMA_SetConfig+0x1d0>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a23      	ldr	r2, [pc, #140]	; (8007db0 <DMA_SetConfig+0x258>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d101      	bne.n	8007d2c <DMA_SetConfig+0x1d4>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <DMA_SetConfig+0x1d6>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d059      	beq.n	8007de6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	223f      	movs	r2, #63	; 0x3f
 8007d3c:	409a      	lsls	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d138      	bne.n	8007dd4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d72:	e086      	b.n	8007e82 <DMA_SetConfig+0x32a>
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8
 8007db4:	58025408 	.word	0x58025408
 8007db8:	5802541c 	.word	0x5802541c
 8007dbc:	58025430 	.word	0x58025430
 8007dc0:	58025444 	.word	0x58025444
 8007dc4:	58025458 	.word	0x58025458
 8007dc8:	5802546c 	.word	0x5802546c
 8007dcc:	58025480 	.word	0x58025480
 8007dd0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]
}
 8007de4:	e04d      	b.n	8007e82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a29      	ldr	r2, [pc, #164]	; (8007e90 <DMA_SetConfig+0x338>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d022      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <DMA_SetConfig+0x33c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01d      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a26      	ldr	r2, [pc, #152]	; (8007e98 <DMA_SetConfig+0x340>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d018      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a24      	ldr	r2, [pc, #144]	; (8007e9c <DMA_SetConfig+0x344>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a23      	ldr	r2, [pc, #140]	; (8007ea0 <DMA_SetConfig+0x348>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00e      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a21      	ldr	r2, [pc, #132]	; (8007ea4 <DMA_SetConfig+0x34c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d009      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a20      	ldr	r2, [pc, #128]	; (8007ea8 <DMA_SetConfig+0x350>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <DMA_SetConfig+0x2de>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <DMA_SetConfig+0x354>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d101      	bne.n	8007e3a <DMA_SetConfig+0x2e2>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <DMA_SetConfig+0x2e4>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d020      	beq.n	8007e82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	2201      	movs	r2, #1
 8007e4a:	409a      	lsls	r2, r3
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b40      	cmp	r3, #64	; 0x40
 8007e5e:	d108      	bne.n	8007e72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	60da      	str	r2, [r3, #12]
}
 8007e70:	e007      	b.n	8007e82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	60da      	str	r2, [r3, #12]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	58025408 	.word	0x58025408
 8007e94:	5802541c 	.word	0x5802541c
 8007e98:	58025430 	.word	0x58025430
 8007e9c:	58025444 	.word	0x58025444
 8007ea0:	58025458 	.word	0x58025458
 8007ea4:	5802546c 	.word	0x5802546c
 8007ea8:	58025480 	.word	0x58025480
 8007eac:	58025494 	.word	0x58025494

08007eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a42      	ldr	r2, [pc, #264]	; (8007fc8 <DMA_CalcBaseAndBitshift+0x118>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d04a      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a41      	ldr	r2, [pc, #260]	; (8007fcc <DMA_CalcBaseAndBitshift+0x11c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d045      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a3f      	ldr	r2, [pc, #252]	; (8007fd0 <DMA_CalcBaseAndBitshift+0x120>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d040      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a3e      	ldr	r2, [pc, #248]	; (8007fd4 <DMA_CalcBaseAndBitshift+0x124>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d03b      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a3c      	ldr	r2, [pc, #240]	; (8007fd8 <DMA_CalcBaseAndBitshift+0x128>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d036      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a3b      	ldr	r2, [pc, #236]	; (8007fdc <DMA_CalcBaseAndBitshift+0x12c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d031      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a39      	ldr	r2, [pc, #228]	; (8007fe0 <DMA_CalcBaseAndBitshift+0x130>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d02c      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a38      	ldr	r2, [pc, #224]	; (8007fe4 <DMA_CalcBaseAndBitshift+0x134>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d027      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a36      	ldr	r2, [pc, #216]	; (8007fe8 <DMA_CalcBaseAndBitshift+0x138>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d022      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a35      	ldr	r2, [pc, #212]	; (8007fec <DMA_CalcBaseAndBitshift+0x13c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d01d      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a33      	ldr	r2, [pc, #204]	; (8007ff0 <DMA_CalcBaseAndBitshift+0x140>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a32      	ldr	r2, [pc, #200]	; (8007ff4 <DMA_CalcBaseAndBitshift+0x144>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a30      	ldr	r2, [pc, #192]	; (8007ff8 <DMA_CalcBaseAndBitshift+0x148>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a2f      	ldr	r2, [pc, #188]	; (8007ffc <DMA_CalcBaseAndBitshift+0x14c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2d      	ldr	r2, [pc, #180]	; (8008000 <DMA_CalcBaseAndBitshift+0x150>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <DMA_CalcBaseAndBitshift+0xa8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2c      	ldr	r2, [pc, #176]	; (8008004 <DMA_CalcBaseAndBitshift+0x154>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d101      	bne.n	8007f5c <DMA_CalcBaseAndBitshift+0xac>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <DMA_CalcBaseAndBitshift+0xae>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d024      	beq.n	8007fac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	3b10      	subs	r3, #16
 8007f6a:	4a27      	ldr	r2, [pc, #156]	; (8008008 <DMA_CalcBaseAndBitshift+0x158>)
 8007f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	4a24      	ldr	r2, [pc, #144]	; (800800c <DMA_CalcBaseAndBitshift+0x15c>)
 8007f7c:	5cd3      	ldrb	r3, [r2, r3]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d908      	bls.n	8007f9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4b1f      	ldr	r3, [pc, #124]	; (8008010 <DMA_CalcBaseAndBitshift+0x160>)
 8007f92:	4013      	ands	r3, r2
 8007f94:	1d1a      	adds	r2, r3, #4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	659a      	str	r2, [r3, #88]	; 0x58
 8007f9a:	e00d      	b.n	8007fb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <DMA_CalcBaseAndBitshift+0x160>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8007faa:	e005      	b.n	8007fb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	40020010 	.word	0x40020010
 8007fcc:	40020028 	.word	0x40020028
 8007fd0:	40020040 	.word	0x40020040
 8007fd4:	40020058 	.word	0x40020058
 8007fd8:	40020070 	.word	0x40020070
 8007fdc:	40020088 	.word	0x40020088
 8007fe0:	400200a0 	.word	0x400200a0
 8007fe4:	400200b8 	.word	0x400200b8
 8007fe8:	40020410 	.word	0x40020410
 8007fec:	40020428 	.word	0x40020428
 8007ff0:	40020440 	.word	0x40020440
 8007ff4:	40020458 	.word	0x40020458
 8007ff8:	40020470 	.word	0x40020470
 8007ffc:	40020488 	.word	0x40020488
 8008000:	400204a0 	.word	0x400204a0
 8008004:	400204b8 	.word	0x400204b8
 8008008:	aaaaaaab 	.word	0xaaaaaaab
 800800c:	0801f6f4 	.word	0x0801f6f4
 8008010:	fffffc00 	.word	0xfffffc00

08008014 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d120      	bne.n	800806a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	2b03      	cmp	r3, #3
 800802e:	d858      	bhi.n	80080e2 <DMA_CheckFifoParam+0xce>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <DMA_CheckFifoParam+0x24>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	08008049 	.word	0x08008049
 800803c:	0800805b 	.word	0x0800805b
 8008040:	08008049 	.word	0x08008049
 8008044:	080080e3 	.word	0x080080e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d048      	beq.n	80080e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008058:	e045      	b.n	80080e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008062:	d142      	bne.n	80080ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008068:	e03f      	b.n	80080ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008072:	d123      	bne.n	80080bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	2b03      	cmp	r3, #3
 800807a:	d838      	bhi.n	80080ee <DMA_CheckFifoParam+0xda>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <DMA_CheckFifoParam+0x70>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	08008095 	.word	0x08008095
 8008088:	0800809b 	.word	0x0800809b
 800808c:	08008095 	.word	0x08008095
 8008090:	080080ad 	.word	0x080080ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
        break;
 8008098:	e030      	b.n	80080fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d025      	beq.n	80080f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080aa:	e022      	b.n	80080f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080b4:	d11f      	bne.n	80080f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080ba:	e01c      	b.n	80080f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d902      	bls.n	80080ca <DMA_CheckFifoParam+0xb6>
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d003      	beq.n	80080d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80080c8:	e018      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
        break;
 80080ce:	e015      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00e      	beq.n	80080fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
    break;
 80080e0:	e00b      	b.n	80080fa <DMA_CheckFifoParam+0xe6>
        break;
 80080e2:	bf00      	nop
 80080e4:	e00a      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        break;
 80080e6:	bf00      	nop
 80080e8:	e008      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        break;
 80080ea:	bf00      	nop
 80080ec:	e006      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        break;
 80080ee:	bf00      	nop
 80080f0:	e004      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
        break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <DMA_CheckFifoParam+0xe8>
    break;
 80080fa:	bf00      	nop
    }
  }

  return status;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop

0800810c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a38      	ldr	r2, [pc, #224]	; (8008200 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d022      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a36      	ldr	r2, [pc, #216]	; (8008204 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01d      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a35      	ldr	r2, [pc, #212]	; (8008208 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d018      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a33      	ldr	r2, [pc, #204]	; (800820c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d013      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a32      	ldr	r2, [pc, #200]	; (8008210 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00e      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a30      	ldr	r2, [pc, #192]	; (8008214 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d009      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2f      	ldr	r2, [pc, #188]	; (8008218 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d004      	beq.n	800816a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2d      	ldr	r2, [pc, #180]	; (800821c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d101      	bne.n	800816e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01a      	beq.n	80081aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	b2db      	uxtb	r3, r3
 800817a:	3b08      	subs	r3, #8
 800817c:	4a28      	ldr	r2, [pc, #160]	; (8008220 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	091b      	lsrs	r3, r3, #4
 8008184:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4b26      	ldr	r3, [pc, #152]	; (8008224 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a24      	ldr	r2, [pc, #144]	; (8008228 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008198:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 031f 	and.w	r3, r3, #31
 80081a0:	2201      	movs	r2, #1
 80081a2:	409a      	lsls	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80081a8:	e024      	b.n	80081f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	3b10      	subs	r3, #16
 80081b2:	4a1e      	ldr	r2, [pc, #120]	; (800822c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80081b4:	fba2 2303 	umull	r2, r3, r2, r3
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4a1c      	ldr	r2, [pc, #112]	; (8008230 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d806      	bhi.n	80081d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4a1b      	ldr	r2, [pc, #108]	; (8008234 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d902      	bls.n	80081d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3308      	adds	r3, #8
 80081d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4b18      	ldr	r3, [pc, #96]	; (8008238 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	461a      	mov	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a16      	ldr	r2, [pc, #88]	; (800823c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80081e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2201      	movs	r2, #1
 80081ee:	409a      	lsls	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	58025408 	.word	0x58025408
 8008204:	5802541c 	.word	0x5802541c
 8008208:	58025430 	.word	0x58025430
 800820c:	58025444 	.word	0x58025444
 8008210:	58025458 	.word	0x58025458
 8008214:	5802546c 	.word	0x5802546c
 8008218:	58025480 	.word	0x58025480
 800821c:	58025494 	.word	0x58025494
 8008220:	cccccccd 	.word	0xcccccccd
 8008224:	16009600 	.word	0x16009600
 8008228:	58025880 	.word	0x58025880
 800822c:	aaaaaaab 	.word	0xaaaaaaab
 8008230:	400204b8 	.word	0x400204b8
 8008234:	4002040f 	.word	0x4002040f
 8008238:	10008200 	.word	0x10008200
 800823c:	40020880 	.word	0x40020880

08008240 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d04a      	beq.n	80082ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b08      	cmp	r3, #8
 800825a:	d847      	bhi.n	80082ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a25      	ldr	r2, [pc, #148]	; (80082f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d022      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a24      	ldr	r2, [pc, #144]	; (80082fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d01d      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a22      	ldr	r2, [pc, #136]	; (8008300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d018      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a21      	ldr	r2, [pc, #132]	; (8008304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d013      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1f      	ldr	r2, [pc, #124]	; (8008308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00e      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1e      	ldr	r2, [pc, #120]	; (800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d009      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a1c      	ldr	r2, [pc, #112]	; (8008310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d004      	beq.n	80082ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1b      	ldr	r2, [pc, #108]	; (8008314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d101      	bne.n	80082b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80082b0:	2300      	movs	r3, #0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4b17      	ldr	r3, [pc, #92]	; (8008318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	461a      	mov	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a15      	ldr	r2, [pc, #84]	; (800831c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80082c8:	671a      	str	r2, [r3, #112]	; 0x70
 80082ca:	e009      	b.n	80082e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4b14      	ldr	r3, [pc, #80]	; (8008320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	461a      	mov	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a11      	ldr	r2, [pc, #68]	; (8008324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80082de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2201      	movs	r2, #1
 80082e6:	409a      	lsls	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80082ec:	bf00      	nop
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	58025408 	.word	0x58025408
 80082fc:	5802541c 	.word	0x5802541c
 8008300:	58025430 	.word	0x58025430
 8008304:	58025444 	.word	0x58025444
 8008308:	58025458 	.word	0x58025458
 800830c:	5802546c 	.word	0x5802546c
 8008310:	58025480 	.word	0x58025480
 8008314:	58025494 	.word	0x58025494
 8008318:	1600963f 	.word	0x1600963f
 800831c:	58025940 	.word	0x58025940
 8008320:	1000823f 	.word	0x1000823f
 8008324:	40020940 	.word	0x40020940

08008328 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b098      	sub	sp, #96	; 0x60
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008330:	4a84      	ldr	r2, [pc, #528]	; (8008544 <HAL_FDCAN_Init+0x21c>)
 8008332:	f107 030c 	add.w	r3, r7, #12
 8008336:	4611      	mov	r1, r2
 8008338:	224c      	movs	r2, #76	; 0x4c
 800833a:	4618      	mov	r0, r3
 800833c:	f012 fcea 	bl	801ad14 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e1c6      	b.n	80086d8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a7e      	ldr	r2, [pc, #504]	; (8008548 <HAL_FDCAN_Init+0x220>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d106      	bne.n	8008362 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fa fdae 	bl	8002ed8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0210 	bic.w	r2, r2, #16
 800838a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800838c:	f7fb fde4 	bl	8003f58 <HAL_GetTick>
 8008390:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008392:	e014      	b.n	80083be <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008394:	f7fb fde0 	bl	8003f58 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b0a      	cmp	r3, #10
 80083a0:	d90d      	bls.n	80083be <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083a8:	f043 0201 	orr.w	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2203      	movs	r2, #3
 80083b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e18c      	b.n	80086d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d0e3      	beq.n	8008394 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083dc:	f7fb fdbc 	bl	8003f58 <HAL_GetTick>
 80083e0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80083e2:	e014      	b.n	800840e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80083e4:	f7fb fdb8 	bl	8003f58 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b0a      	cmp	r3, #10
 80083f0:	d90d      	bls.n	800840e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083f8:	f043 0201 	orr.w	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2203      	movs	r2, #3
 8008406:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e164      	b.n	80086d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0e3      	beq.n	80083e4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699a      	ldr	r2, [r3, #24]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0202 	orr.w	r2, r2, #2
 800842a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7c1b      	ldrb	r3, [r3, #16]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d108      	bne.n	8008446 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008442:	619a      	str	r2, [r3, #24]
 8008444:	e007      	b.n	8008456 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008454:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7c5b      	ldrb	r3, [r3, #17]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d108      	bne.n	8008470 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800846c:	619a      	str	r2, [r3, #24]
 800846e:	e007      	b.n	8008480 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800847e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	7c9b      	ldrb	r3, [r3, #18]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d108      	bne.n	800849a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008496:	619a      	str	r2, [r3, #24]
 8008498:	e007      	b.n	80084aa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699a      	ldr	r2, [r3, #24]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084a8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80084ce:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0210 	bic.w	r2, r2, #16
 80084de:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d108      	bne.n	80084fa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0204 	orr.w	r2, r2, #4
 80084f6:	619a      	str	r2, [r3, #24]
 80084f8:	e030      	b.n	800855c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d02c      	beq.n	800855c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d020      	beq.n	800854c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008518:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0210 	orr.w	r2, r2, #16
 8008528:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d114      	bne.n	800855c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	699a      	ldr	r2, [r3, #24]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0220 	orr.w	r2, r2, #32
 8008540:	619a      	str	r2, [r3, #24]
 8008542:	e00b      	b.n	800855c <HAL_FDCAN_Init+0x234>
 8008544:	0801f5a4 	.word	0x0801f5a4
 8008548:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0220 	orr.w	r2, r2, #32
 800855a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	3b01      	subs	r3, #1
 8008562:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	3b01      	subs	r3, #1
 800856a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800856c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008574:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	3b01      	subs	r3, #1
 800857e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008584:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008586:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008590:	d115      	bne.n	80085be <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	3b01      	subs	r3, #1
 800859e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085a0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	3b01      	subs	r3, #1
 80085a8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80085aa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	3b01      	subs	r3, #1
 80085b4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80085ba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085bc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e4:	4413      	add	r3, r2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d011      	beq.n	800860e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80085f2:	f023 0107 	bic.w	r1, r3, #7
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	3360      	adds	r3, #96	; 0x60
 80085fe:	443b      	add	r3, r7
 8008600:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800861e:	f023 0107 	bic.w	r1, r3, #7
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	3360      	adds	r3, #96	; 0x60
 800862a:	443b      	add	r3, r7
 800862c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863e:	2b00      	cmp	r3, #0
 8008640:	d012      	beq.n	8008668 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800864a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	3360      	adds	r3, #96	; 0x60
 8008656:	443b      	add	r3, r7
 8008658:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800865c:	011a      	lsls	r2, r3, #4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866c:	2b00      	cmp	r3, #0
 800866e:	d012      	beq.n	8008696 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008678:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	3360      	adds	r3, #96	; 0x60
 8008684:	443b      	add	r3, r7
 8008686:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800868a:	021a      	lsls	r2, r3, #8
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a11      	ldr	r2, [pc, #68]	; (80086e0 <HAL_FDCAN_Init+0x3b8>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d107      	bne.n	80086b0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f022 0203 	bic.w	r2, r2, #3
 80086ae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f80b 	bl	80086e4 <FDCAN_CalcultateRamBlockAddresses>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80086d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3760      	adds	r7, #96	; 0x60
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	4000a000 	.word	0x4000a000

080086e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80086fa:	4ba7      	ldr	r3, [pc, #668]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	0091      	lsls	r1, r2, #2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6812      	ldr	r2, [r2, #0]
 8008706:	430b      	orrs	r3, r1
 8008708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008714:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	041a      	lsls	r2, r3, #16
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	4413      	add	r3, r2
 8008730:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800873a:	4b97      	ldr	r3, [pc, #604]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800873c:	4013      	ands	r3, r2
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	0091      	lsls	r1, r2, #2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	430b      	orrs	r3, r1
 8008748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008754:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875c:	041a      	lsls	r2, r3, #16
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4413      	add	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800877c:	4b86      	ldr	r3, [pc, #536]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800877e:	4013      	ands	r3, r2
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	0091      	lsls	r1, r2, #2
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	430b      	orrs	r3, r1
 800878a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008796:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	041a      	lsls	r2, r3, #16
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80087b2:	fb02 f303 	mul.w	r3, r2, r3
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	4413      	add	r3, r2
 80087ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80087c4:	4b74      	ldr	r3, [pc, #464]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087c6:	4013      	ands	r3, r2
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	0091      	lsls	r1, r2, #2
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6812      	ldr	r2, [r2, #0]
 80087d0:	430b      	orrs	r3, r1
 80087d2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087de:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e6:	041a      	lsls	r2, r3, #16
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800880c:	4b62      	ldr	r3, [pc, #392]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800880e:	4013      	ands	r3, r2
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	0091      	lsls	r1, r2, #2
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	430b      	orrs	r3, r1
 800881a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008826:	fb02 f303 	mul.w	r3, r2, r3
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008838:	4b57      	ldr	r3, [pc, #348]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800883a:	4013      	ands	r3, r2
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	0091      	lsls	r1, r2, #2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	430b      	orrs	r3, r1
 8008846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008852:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885a:	041a      	lsls	r2, r3, #16
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	4413      	add	r3, r2
 8008870:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800887a:	4b47      	ldr	r3, [pc, #284]	; (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800887c:	4013      	ands	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	0091      	lsls	r1, r2, #2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	430b      	orrs	r3, r1
 8008888:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008894:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889c:	041a      	lsls	r2, r3, #16
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088b0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	061a      	lsls	r2, r3, #24
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c8:	4b34      	ldr	r3, [pc, #208]	; (800899c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80088ca:	4413      	add	r3, r2
 80088cc:	009a      	lsls	r2, r3, #2
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	441a      	add	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	441a      	add	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80088fe:	fb01 f303 	mul.w	r3, r1, r3
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	441a      	add	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008916:	fb01 f303 	mul.w	r3, r1, r3
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	441a      	add	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	441a      	add	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	441a      	add	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898e:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d915      	bls.n	80089c0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008994:	e006      	b.n	80089a4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008996:	bf00      	nop
 8008998:	ffff0003 	.word	0xffff0003
 800899c:	10002b00 	.word	0x10002b00
 80089a0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089aa:	f043 0220 	orr.w	r2, r3, #32
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2203      	movs	r2, #3
 80089b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e010      	b.n	80089e2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e005      	b.n	80089d4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3304      	adds	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d3f3      	bcc.n	80089c8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop

080089f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b089      	sub	sp, #36	; 0x24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089fe:	4b86      	ldr	r3, [pc, #536]	; (8008c18 <HAL_GPIO_Init+0x228>)
 8008a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a02:	e18c      	b.n	8008d1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	2101      	movs	r1, #1
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a10:	4013      	ands	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 817e 	beq.w	8008d18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d005      	beq.n	8008a34 <HAL_GPIO_Init+0x44>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d130      	bne.n	8008a96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	2203      	movs	r2, #3
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	43db      	mvns	r3, r3
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	43db      	mvns	r3, r3
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	4013      	ands	r3, r2
 8008a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	091b      	lsrs	r3, r3, #4
 8008a80:	f003 0201 	and.w	r2, r3, #1
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d017      	beq.n	8008ad2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	2203      	movs	r2, #3
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f003 0303 	and.w	r3, r3, #3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d123      	bne.n	8008b26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	08da      	lsrs	r2, r3, #3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3208      	adds	r2, #8
 8008ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	220f      	movs	r2, #15
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	43db      	mvns	r3, r3
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4013      	ands	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	691a      	ldr	r2, [r3, #16]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	08da      	lsrs	r2, r3, #3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3208      	adds	r2, #8
 8008b20:	69b9      	ldr	r1, [r7, #24]
 8008b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	2203      	movs	r2, #3
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	43db      	mvns	r3, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f003 0203 	and.w	r2, r3, #3
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 80d8 	beq.w	8008d18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b68:	4b2c      	ldr	r3, [pc, #176]	; (8008c1c <HAL_GPIO_Init+0x22c>)
 8008b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b6e:	4a2b      	ldr	r2, [pc, #172]	; (8008c1c <HAL_GPIO_Init+0x22c>)
 8008b70:	f043 0302 	orr.w	r3, r3, #2
 8008b74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b78:	4b28      	ldr	r3, [pc, #160]	; (8008c1c <HAL_GPIO_Init+0x22c>)
 8008b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b86:	4a26      	ldr	r2, [pc, #152]	; (8008c20 <HAL_GPIO_Init+0x230>)
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	089b      	lsrs	r3, r3, #2
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	220f      	movs	r2, #15
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <HAL_GPIO_Init+0x234>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d04a      	beq.n	8008c48 <HAL_GPIO_Init+0x258>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <HAL_GPIO_Init+0x238>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d02b      	beq.n	8008c12 <HAL_GPIO_Init+0x222>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a1b      	ldr	r2, [pc, #108]	; (8008c2c <HAL_GPIO_Init+0x23c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d025      	beq.n	8008c0e <HAL_GPIO_Init+0x21e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a1a      	ldr	r2, [pc, #104]	; (8008c30 <HAL_GPIO_Init+0x240>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01f      	beq.n	8008c0a <HAL_GPIO_Init+0x21a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a19      	ldr	r2, [pc, #100]	; (8008c34 <HAL_GPIO_Init+0x244>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d019      	beq.n	8008c06 <HAL_GPIO_Init+0x216>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a18      	ldr	r2, [pc, #96]	; (8008c38 <HAL_GPIO_Init+0x248>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <HAL_GPIO_Init+0x212>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a17      	ldr	r2, [pc, #92]	; (8008c3c <HAL_GPIO_Init+0x24c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00d      	beq.n	8008bfe <HAL_GPIO_Init+0x20e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a16      	ldr	r2, [pc, #88]	; (8008c40 <HAL_GPIO_Init+0x250>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <HAL_GPIO_Init+0x20a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <HAL_GPIO_Init+0x254>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d101      	bne.n	8008bf6 <HAL_GPIO_Init+0x206>
 8008bf2:	2309      	movs	r3, #9
 8008bf4:	e029      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008bf6:	230a      	movs	r3, #10
 8008bf8:	e027      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008bfa:	2307      	movs	r3, #7
 8008bfc:	e025      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008bfe:	2306      	movs	r3, #6
 8008c00:	e023      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008c02:	2305      	movs	r3, #5
 8008c04:	e021      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008c06:	2304      	movs	r3, #4
 8008c08:	e01f      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e01d      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e01b      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e019      	b.n	8008c4a <HAL_GPIO_Init+0x25a>
 8008c16:	bf00      	nop
 8008c18:	58000080 	.word	0x58000080
 8008c1c:	58024400 	.word	0x58024400
 8008c20:	58000400 	.word	0x58000400
 8008c24:	58020000 	.word	0x58020000
 8008c28:	58020400 	.word	0x58020400
 8008c2c:	58020800 	.word	0x58020800
 8008c30:	58020c00 	.word	0x58020c00
 8008c34:	58021000 	.word	0x58021000
 8008c38:	58021400 	.word	0x58021400
 8008c3c:	58021800 	.word	0x58021800
 8008c40:	58021c00 	.word	0x58021c00
 8008c44:	58022400 	.word	0x58022400
 8008c48:	2300      	movs	r3, #0
 8008c4a:	69fa      	ldr	r2, [r7, #28]
 8008c4c:	f002 0203 	and.w	r2, r2, #3
 8008c50:	0092      	lsls	r2, r2, #2
 8008c52:	4093      	lsls	r3, r2
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c5a:	4938      	ldr	r1, [pc, #224]	; (8008d3c <HAL_GPIO_Init+0x34c>)
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	089b      	lsrs	r3, r3, #2
 8008c60:	3302      	adds	r3, #2
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	43db      	mvns	r3, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4013      	ands	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f47f ae6b 	bne.w	8008a04 <HAL_GPIO_Init+0x14>
  }
}
 8008d2e:	bf00      	nop
 8008d30:	bf00      	nop
 8008d32:	3724      	adds	r7, #36	; 0x24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	58000400 	.word	0x58000400

08008d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	887b      	ldrh	r3, [r7, #2]
 8008d52:	4013      	ands	r3, r2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	73fb      	strb	r3, [r7, #15]
 8008d5c:	e001      	b.n	8008d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	807b      	strh	r3, [r7, #2]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d80:	787b      	ldrb	r3, [r7, #1]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d86:	887a      	ldrh	r2, [r7, #2]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d8c:	e003      	b.n	8008d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d8e:	887b      	ldrh	r3, [r7, #2]
 8008d90:	041a      	lsls	r2, r3, #16
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	619a      	str	r2, [r3, #24]
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e07f      	b.n	8008eb6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7fa f8ec 	bl	8002fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2224      	movs	r2, #36	; 0x24
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d107      	bne.n	8008e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e1a:	609a      	str	r2, [r3, #8]
 8008e1c:	e006      	b.n	8008e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d104      	bne.n	8008e3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6859      	ldr	r1, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <HAL_I2C_Init+0x11c>)
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	69d9      	ldr	r1, [r3, #28]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1a      	ldr	r2, [r3, #32]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	02008000 	.word	0x02008000

08008ec4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d138      	bne.n	8008f80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e032      	b.n	8008f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2224      	movs	r2, #36	; 0x24
 8008f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0201 	bic.w	r2, r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e000      	b.n	8008f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f80:	2302      	movs	r3, #2
  }
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d139      	bne.n	8009018 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e033      	b.n	800901a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2224      	movs	r2, #36	; 0x24
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0201 	bic.w	r2, r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008fe0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2220      	movs	r2, #32
 8009008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	e000      	b.n	800901a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009018:	2302      	movs	r3, #2
  }
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009028:	b08f      	sub	sp, #60	; 0x3c
 800902a:	af0a      	add	r7, sp, #40	; 0x28
 800902c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e116      	b.n	8009266 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d106      	bne.n	8009058 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f011 fb28 	bl	801a6a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2203      	movs	r2, #3
 800905c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f00a fcf7 	bl	8013a6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	603b      	str	r3, [r7, #0]
 8009082:	687e      	ldr	r6, [r7, #4]
 8009084:	466d      	mov	r5, sp
 8009086:	f106 0410 	add.w	r4, r6, #16
 800908a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800908c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800908e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009096:	e885 0003 	stmia.w	r5, {r0, r1}
 800909a:	1d33      	adds	r3, r6, #4
 800909c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800909e:	6838      	ldr	r0, [r7, #0]
 80090a0:	f00a fbc2 	bl	8013828 <USB_CoreInit>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e0d7      	b.n	8009266 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f00a fce5 	bl	8013a8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090c2:	2300      	movs	r3, #0
 80090c4:	73fb      	strb	r3, [r7, #15]
 80090c6:	e04a      	b.n	800915e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80090c8:	7bfa      	ldrb	r2, [r7, #15]
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	333d      	adds	r3, #61	; 0x3d
 80090d8:	2201      	movs	r2, #1
 80090da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80090dc:	7bfa      	ldrb	r2, [r7, #15]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	333c      	adds	r3, #60	; 0x3c
 80090ec:	7bfa      	ldrb	r2, [r7, #15]
 80090ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80090f0:	7bfa      	ldrb	r2, [r7, #15]
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	b298      	uxth	r0, r3
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	3356      	adds	r3, #86	; 0x56
 8009104:	4602      	mov	r2, r0
 8009106:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009108:	7bfa      	ldrb	r2, [r7, #15]
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	3340      	adds	r3, #64	; 0x40
 8009118:	2200      	movs	r2, #0
 800911a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800911c:	7bfa      	ldrb	r2, [r7, #15]
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	3344      	adds	r3, #68	; 0x44
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009130:	7bfa      	ldrb	r2, [r7, #15]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4613      	mov	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	3348      	adds	r3, #72	; 0x48
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009144:	7bfa      	ldrb	r2, [r7, #15]
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	334c      	adds	r3, #76	; 0x4c
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	3301      	adds	r3, #1
 800915c:	73fb      	strb	r3, [r7, #15]
 800915e:	7bfa      	ldrb	r2, [r7, #15]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	429a      	cmp	r2, r3
 8009166:	d3af      	bcc.n	80090c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
 800916c:	e044      	b.n	80091f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009180:	2200      	movs	r2, #0
 8009182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009184:	7bfa      	ldrb	r2, [r7, #15]
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009196:	7bfa      	ldrb	r2, [r7, #15]
 8009198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800919a:	7bfa      	ldrb	r2, [r7, #15]
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	4613      	mov	r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80091b0:	7bfa      	ldrb	r2, [r7, #15]
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80091c6:	7bfa      	ldrb	r2, [r7, #15]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80091dc:	7bfa      	ldrb	r2, [r7, #15]
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	4613      	mov	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	440b      	add	r3, r1
 80091ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	3301      	adds	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
 80091f8:	7bfa      	ldrb	r2, [r7, #15]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d3b5      	bcc.n	800916e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	687e      	ldr	r6, [r7, #4]
 800920a:	466d      	mov	r5, sp
 800920c:	f106 0410 	add.w	r4, r6, #16
 8009210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009218:	e894 0003 	ldmia.w	r4, {r0, r1}
 800921c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009220:	1d33      	adds	r3, r6, #4
 8009222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009224:	6838      	ldr	r0, [r7, #0]
 8009226:	f00a fc7d 	bl	8013b24 <USB_DevInit>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e014      	b.n	8009266 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	2b01      	cmp	r3, #1
 8009252:	d102      	bne.n	800925a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f96f 	bl	800a538 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f00b fcbf 	bl	8014be2 <USB_DevDisconnect>

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800926e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_PCD_Start+0x1c>
 8009286:	2302      	movs	r3, #2
 8009288:	e022      	b.n	80092d0 <HAL_PCD_Start+0x62>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d105      	bne.n	80092b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f00a fbc6 	bl	8013a48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f00b fc6d 	bl	8014ba0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80092d8:	b590      	push	{r4, r7, lr}
 80092da:	b08d      	sub	sp, #52	; 0x34
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00b fd2b 	bl	8014d4a <USB_GetMode>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 84b7 	bne.w	8009c6a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4618      	mov	r0, r3
 8009302:	f00b fc8f 	bl	8014c24 <USB_ReadInterrupts>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 84ad 	beq.w	8009c68 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f00b fc7c 	bl	8014c24 <USB_ReadInterrupts>
 800932c:	4603      	mov	r3, r0
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b02      	cmp	r3, #2
 8009334:	d107      	bne.n	8009346 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695a      	ldr	r2, [r3, #20]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f002 0202 	and.w	r2, r2, #2
 8009344:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f00b fc6a 	bl	8014c24 <USB_ReadInterrupts>
 8009350:	4603      	mov	r3, r0
 8009352:	f003 0310 	and.w	r3, r3, #16
 8009356:	2b10      	cmp	r3, #16
 8009358:	d161      	bne.n	800941e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	699a      	ldr	r2, [r3, #24]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0210 	bic.w	r2, r2, #16
 8009368:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	f003 020f 	and.w	r2, r3, #15
 8009376:	4613      	mov	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	3304      	adds	r3, #4
 8009388:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	0c5b      	lsrs	r3, r3, #17
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	2b02      	cmp	r3, #2
 8009394:	d124      	bne.n	80093e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800939c:	4013      	ands	r3, r2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d035      	beq.n	800940e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	091b      	lsrs	r3, r3, #4
 80093aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80093ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	461a      	mov	r2, r3
 80093b4:	6a38      	ldr	r0, [r7, #32]
 80093b6:	f00b faa1 	bl	80148fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	091b      	lsrs	r3, r3, #4
 80093c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093c6:	441a      	add	r2, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	695a      	ldr	r2, [r3, #20]
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	091b      	lsrs	r3, r3, #4
 80093d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093d8:	441a      	add	r2, r3
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	615a      	str	r2, [r3, #20]
 80093de:	e016      	b.n	800940e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	0c5b      	lsrs	r3, r3, #17
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	2b06      	cmp	r3, #6
 80093ea:	d110      	bne.n	800940e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093f2:	2208      	movs	r2, #8
 80093f4:	4619      	mov	r1, r3
 80093f6:	6a38      	ldr	r0, [r7, #32]
 80093f8:	f00b fa80 	bl	80148fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	695a      	ldr	r2, [r3, #20]
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	091b      	lsrs	r3, r3, #4
 8009404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009408:	441a      	add	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f042 0210 	orr.w	r2, r2, #16
 800941c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f00b fbfe 	bl	8014c24 <USB_ReadInterrupts>
 8009428:	4603      	mov	r3, r0
 800942a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800942e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009432:	f040 80a7 	bne.w	8009584 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f00b fc03 	bl	8014c4a <USB_ReadDevAllOutEpInterrupt>
 8009444:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009446:	e099      	b.n	800957c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 808e 	beq.w	8009570 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f00b fc27 	bl	8014cb2 <USB_ReadDevOutEPInterrupt>
 8009464:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947c:	461a      	mov	r2, r3
 800947e:	2301      	movs	r3, #1
 8009480:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fed1 	bl	800a22c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a0:	461a      	mov	r2, r3
 80094a2:	2308      	movs	r3, #8
 80094a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80094a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 ffa7 	bl	800a3fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f003 0310 	and.w	r3, r3, #16
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d008      	beq.n	80094ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c4:	461a      	mov	r2, r3
 80094c6:	2310      	movs	r3, #16
 80094c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d030      	beq.n	8009536 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094dc:	2b80      	cmp	r3, #128	; 0x80
 80094de:	d109      	bne.n	80094f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80094f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f6:	4613      	mov	r3, r2
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	4413      	add	r3, r2
 8009506:	3304      	adds	r3, #4
 8009508:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	78db      	ldrb	r3, [r3, #3]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d108      	bne.n	8009524 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2200      	movs	r2, #0
 8009516:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	b2db      	uxtb	r3, r3
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f011 f9ba 	bl	801a898 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009530:	461a      	mov	r2, r3
 8009532:	2302      	movs	r3, #2
 8009534:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	d008      	beq.n	8009552 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	4413      	add	r3, r2
 8009548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954c:	461a      	mov	r2, r3
 800954e:	2320      	movs	r3, #32
 8009550:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d009      	beq.n	8009570 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009568:	461a      	mov	r2, r3
 800956a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800956e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	3301      	adds	r3, #1
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	085b      	lsrs	r3, r3, #1
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	f47f af62 	bne.w	8009448 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f00b fb4b 	bl	8014c24 <USB_ReadInterrupts>
 800958e:	4603      	mov	r3, r0
 8009590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009598:	f040 80db 	bne.w	8009752 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f00b fb6c 	bl	8014c7e <USB_ReadDevAllInEpInterrupt>
 80095a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80095ac:	e0cd      	b.n	800974a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 80c2 	beq.w	800973e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c0:	b2d2      	uxtb	r2, r2
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f00b fb92 	bl	8014cee <USB_ReadDevInEPInterrupt>
 80095ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d057      	beq.n	8009686 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	2201      	movs	r2, #1
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	43db      	mvns	r3, r3
 80095f0:	69f9      	ldr	r1, [r7, #28]
 80095f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095f6:	4013      	ands	r3, r2
 80095f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009606:	461a      	mov	r2, r3
 8009608:	2301      	movs	r3, #1
 800960a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d132      	bne.n	800967a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	3348      	adds	r3, #72	; 0x48
 8009624:	6819      	ldr	r1, [r3, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4403      	add	r3, r0
 8009634:	3344      	adds	r3, #68	; 0x44
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4419      	add	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4403      	add	r3, r0
 8009648:	3348      	adds	r3, #72	; 0x48
 800964a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	2b00      	cmp	r3, #0
 8009650:	d113      	bne.n	800967a <HAL_PCD_IRQHandler+0x3a2>
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009656:	4613      	mov	r3, r2
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	334c      	adds	r3, #76	; 0x4c
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009672:	461a      	mov	r2, r3
 8009674:	2101      	movs	r1, #1
 8009676:	f00b fb9b 	bl	8014db0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	b2db      	uxtb	r3, r3
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f011 f884 	bl	801a78e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d008      	beq.n	80096a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969c:	461a      	mov	r2, r3
 800969e:	2308      	movs	r3, #8
 80096a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f003 0310 	and.w	r3, r3, #16
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d008      	beq.n	80096be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b8:	461a      	mov	r2, r3
 80096ba:	2310      	movs	r3, #16
 80096bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d008      	beq.n	80096da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d4:	461a      	mov	r2, r3
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d023      	beq.n	800972c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80096e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096e6:	6a38      	ldr	r0, [r7, #32]
 80096e8:	f00a fb7a 	bl	8013de0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80096ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ee:	4613      	mov	r3, r2
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	3338      	adds	r3, #56	; 0x38
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	4413      	add	r3, r2
 80096fc:	3304      	adds	r3, #4
 80096fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	78db      	ldrb	r3, [r3, #3]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d108      	bne.n	800971a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2200      	movs	r2, #0
 800970c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	b2db      	uxtb	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f011 f8d1 	bl	801a8bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009726:	461a      	mov	r2, r3
 8009728:	2302      	movs	r3, #2
 800972a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fcea 	bl	800a112 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	3301      	adds	r3, #1
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	085b      	lsrs	r3, r3, #1
 8009748:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	2b00      	cmp	r3, #0
 800974e:	f47f af2e 	bne.w	80095ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f00b fa64 	bl	8014c24 <USB_ReadInterrupts>
 800975c:	4603      	mov	r3, r0
 800975e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009766:	d122      	bne.n	80097ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	69fa      	ldr	r2, [r7, #28]
 8009772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009782:	2b01      	cmp	r3, #1
 8009784:	d108      	bne.n	8009798 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800978e:	2100      	movs	r1, #0
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fef5 	bl	800a580 <HAL_PCDEx_LPM_Callback>
 8009796:	e002      	b.n	800979e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f011 f86f 	bl	801a87c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	695a      	ldr	r2, [r3, #20]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80097ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f00b fa36 	bl	8014c24 <USB_ReadInterrupts>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c2:	d112      	bne.n	80097ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d102      	bne.n	80097da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f011 f82b 	bl	801a830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695a      	ldr	r2, [r3, #20]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80097e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f00b fa18 	bl	8014c24 <USB_ReadInterrupts>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097fe:	d121      	bne.n	8009844 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800980e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009816:	2b00      	cmp	r3, #0
 8009818:	d111      	bne.n	800983e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009828:	089b      	lsrs	r3, r3, #2
 800982a:	f003 020f 	and.w	r2, r3, #15
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009834:	2101      	movs	r1, #1
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fea2 	bl	800a580 <HAL_PCDEx_LPM_Callback>
 800983c:	e002      	b.n	8009844 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f010 fff6 	bl	801a830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4618      	mov	r0, r3
 800984a:	f00b f9eb 	bl	8014c24 <USB_ReadInterrupts>
 800984e:	4603      	mov	r3, r0
 8009850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009858:	f040 80b7 	bne.w	80099ca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800986a:	f023 0301 	bic.w	r3, r3, #1
 800986e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2110      	movs	r1, #16
 8009876:	4618      	mov	r0, r3
 8009878:	f00a fab2 	bl	8013de0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800987c:	2300      	movs	r3, #0
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009880:	e046      	b.n	8009910 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	461a      	mov	r2, r3
 8009890:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009894:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	0151      	lsls	r1, r2, #5
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	440a      	add	r2, r1
 80098ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c2:	461a      	mov	r2, r3
 80098c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098da:	0151      	lsls	r1, r2, #5
 80098dc:	69fa      	ldr	r2, [r7, #28]
 80098de:	440a      	add	r2, r1
 80098e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098fa:	0151      	lsls	r1, r2, #5
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	440a      	add	r2, r1
 8009900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009908:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	3301      	adds	r3, #1
 800990e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009916:	429a      	cmp	r2, r3
 8009918:	d3b3      	bcc.n	8009882 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009928:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800992c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	2b00      	cmp	r3, #0
 8009934:	d016      	beq.n	8009964 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009946:	f043 030b 	orr.w	r3, r3, #11
 800994a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800995c:	f043 030b 	orr.w	r3, r3, #11
 8009960:	6453      	str	r3, [r2, #68]	; 0x44
 8009962:	e015      	b.n	8009990 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996a:	695a      	ldr	r2, [r3, #20]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009972:	4619      	mov	r1, r3
 8009974:	f242 032b 	movw	r3, #8235	; 0x202b
 8009978:	4313      	orrs	r3, r2
 800997a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800998a:	f043 030b 	orr.w	r3, r3, #11
 800998e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800999e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80099a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6818      	ldr	r0, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80099b4:	461a      	mov	r2, r3
 80099b6:	f00b f9fb 	bl	8014db0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	695a      	ldr	r2, [r3, #20]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80099c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f00b f928 	bl	8014c24 <USB_ReadInterrupts>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099de:	d124      	bne.n	8009a2a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f00b f9bf 	bl	8014d68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f00a fa73 	bl	8013eda <USB_GetDevSpeed>
 80099f4:	4603      	mov	r3, r0
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681c      	ldr	r4, [r3, #0]
 8009a00:	f001 fd88 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 8009a04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f009 ff78 	bl	8013904 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f010 fee2 	bl	801a7de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	695a      	ldr	r2, [r3, #20]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f00b f8f8 	bl	8014c24 <USB_ReadInterrupts>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d10a      	bne.n	8009a54 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f010 febf 	bl	801a7c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695a      	ldr	r2, [r3, #20]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f002 0208 	and.w	r2, r2, #8
 8009a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f00b f8e3 	bl	8014c24 <USB_ReadInterrupts>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d122      	bne.n	8009aae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a74:	2301      	movs	r3, #1
 8009a76:	627b      	str	r3, [r7, #36]	; 0x24
 8009a78:	e014      	b.n	8009aa4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a7e:	4613      	mov	r3, r2
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d105      	bne.n	8009a9e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fb09 	bl	800a0b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d3e5      	bcc.n	8009a7a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f00b f8b6 	bl	8014c24 <USB_ReadInterrupts>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ac2:	d13b      	bne.n	8009b3c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac8:	e02b      	b.n	8009b22 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3340      	adds	r3, #64	; 0x40
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d115      	bne.n	8009b1c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009af0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da12      	bge.n	8009b1c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afa:	4613      	mov	r3, r2
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	333f      	adds	r3, #63	; 0x3f
 8009b06:	2201      	movs	r2, #1
 8009b08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 faca 	bl	800a0b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	3301      	adds	r3, #1
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d3ce      	bcc.n	8009aca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695a      	ldr	r2, [r3, #20]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f00b f86f 	bl	8014c24 <USB_ReadInterrupts>
 8009b46:	4603      	mov	r3, r0
 8009b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b50:	d155      	bne.n	8009bfe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b52:	2301      	movs	r3, #1
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
 8009b56:	e045      	b.n	8009be4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d12e      	bne.n	8009bde <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009b80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da2b      	bge.n	8009bde <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009b92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d121      	bne.n	8009bde <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009b9a:	6879      	ldr	r1, [r7, #4]
 8009b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009bac:	2201      	movs	r2, #1
 8009bae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	69fa      	ldr	r2, [r7, #28]
 8009bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bda:	6053      	str	r3, [r2, #4]
            break;
 8009bdc:	e007      	b.n	8009bee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	3301      	adds	r3, #1
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d3b4      	bcc.n	8009b58 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695a      	ldr	r2, [r3, #20]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f00b f80e 	bl	8014c24 <USB_ReadInterrupts>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c12:	d10a      	bne.n	8009c2a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f010 fe63 	bl	801a8e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	695a      	ldr	r2, [r3, #20]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f00a fff8 	bl	8014c24 <USB_ReadInterrupts>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f003 0304 	and.w	r3, r3, #4
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d115      	bne.n	8009c6a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f010 fe53 	bl	801a8fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6859      	ldr	r1, [r3, #4]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	605a      	str	r2, [r3, #4]
 8009c66:	e000      	b.n	8009c6a <HAL_PCD_IRQHandler+0x992>
      return;
 8009c68:	bf00      	nop
    }
  }
}
 8009c6a:	3734      	adds	r7, #52	; 0x34
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd90      	pop	{r4, r7, pc}

08009c70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_PCD_SetAddress+0x1a>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e013      	b.n	8009cb2 <HAL_PCD_SetAddress+0x42>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f00a ff56 	bl	8014b54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	70fb      	strb	r3, [r7, #3]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	803b      	strh	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da0f      	bge.n	8009d00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	f003 020f 	and.w	r2, r3, #15
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	3338      	adds	r3, #56	; 0x38
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	705a      	strb	r2, [r3, #1]
 8009cfe:	e00f      	b.n	8009d20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	f003 020f 	and.w	r2, r3, #15
 8009d06:	4613      	mov	r3, r2
 8009d08:	00db      	lsls	r3, r3, #3
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	4413      	add	r3, r2
 8009d16:	3304      	adds	r3, #4
 8009d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009d2c:	883a      	ldrh	r2, [r7, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	78ba      	ldrb	r2, [r7, #2]
 8009d36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	785b      	ldrb	r3, [r3, #1]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d004      	beq.n	8009d4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009d4a:	78bb      	ldrb	r3, [r7, #2]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d102      	bne.n	8009d56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <HAL_PCD_EP_Open+0xaa>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e00e      	b.n	8009d82 <HAL_PCD_EP_Open+0xc8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68f9      	ldr	r1, [r7, #12]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f00a f8d6 	bl	8013f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da0f      	bge.n	8009dbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d9e:	78fb      	ldrb	r3, [r7, #3]
 8009da0:	f003 020f 	and.w	r2, r3, #15
 8009da4:	4613      	mov	r3, r2
 8009da6:	00db      	lsls	r3, r3, #3
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	3338      	adds	r3, #56	; 0x38
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	4413      	add	r3, r2
 8009db2:	3304      	adds	r3, #4
 8009db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	705a      	strb	r2, [r3, #1]
 8009dbc:	e00f      	b.n	8009dde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	f003 020f 	and.w	r2, r3, #15
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009dde:	78fb      	ldrb	r3, [r7, #3]
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_PCD_EP_Close+0x6e>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e00e      	b.n	8009e16 <HAL_PCD_EP_Close+0x8c>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68f9      	ldr	r1, [r7, #12]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f00a f914 	bl	8014034 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b086      	sub	sp, #24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	f003 020f 	and.w	r2, r3, #15
 8009e34:	4613      	mov	r3, r2
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	3304      	adds	r3, #4
 8009e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2200      	movs	r2, #0
 8009e58:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e60:	7afb      	ldrb	r3, [r7, #11]
 8009e62:	f003 030f 	and.w	r3, r3, #15
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d102      	bne.n	8009e7a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	6979      	ldr	r1, [r7, #20]
 8009e88:	f00a f9b0 	bl	80141ec <USB_EPStartXfer>

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	f003 020f 	and.w	r2, r3, #15
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	440b      	add	r3, r1
 8009eb4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009eb8:	681b      	ldr	r3, [r3, #0]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b086      	sub	sp, #24
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	f003 020f 	and.w	r2, r3, #15
 8009edc:	4613      	mov	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	3338      	adds	r3, #56	; 0x38
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4413      	add	r3, r2
 8009eea:	3304      	adds	r3, #4
 8009eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2200      	movs	r2, #0
 8009efe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2201      	movs	r2, #1
 8009f04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	f003 030f 	and.w	r3, r3, #15
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d102      	bne.n	8009f20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6979      	ldr	r1, [r7, #20]
 8009f2e:	f00a f95d 	bl	80141ec <USB_EPStartXfer>

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	f003 020f 	and.w	r2, r3, #15
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d901      	bls.n	8009f5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e050      	b.n	8009ffc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	da0f      	bge.n	8009f82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	f003 020f 	and.w	r2, r3, #15
 8009f68:	4613      	mov	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	4413      	add	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	3338      	adds	r3, #56	; 0x38
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4413      	add	r3, r2
 8009f76:	3304      	adds	r3, #4
 8009f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	705a      	strb	r2, [r3, #1]
 8009f80:	e00d      	b.n	8009f9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	4613      	mov	r3, r2
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	3304      	adds	r3, #4
 8009f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	f003 030f 	and.w	r3, r3, #15
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_PCD_EP_SetStall+0x82>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e01e      	b.n	8009ffc <HAL_PCD_EP_SetStall+0xc0>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f00a fced 	bl	80149ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	f003 030f 	and.w	r3, r3, #15
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6818      	ldr	r0, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	b2d9      	uxtb	r1, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009fec:	461a      	mov	r2, r3
 8009fee:	f00a fedf 	bl	8014db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	f003 020f 	and.w	r2, r3, #15
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d901      	bls.n	800a022 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e042      	b.n	800a0a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a026:	2b00      	cmp	r3, #0
 800a028:	da0f      	bge.n	800a04a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	f003 020f 	and.w	r2, r3, #15
 800a030:	4613      	mov	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	3338      	adds	r3, #56	; 0x38
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	4413      	add	r3, r2
 800a03e:	3304      	adds	r3, #4
 800a040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	705a      	strb	r2, [r3, #1]
 800a048:	e00f      	b.n	800a06a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	f003 020f 	and.w	r2, r3, #15
 800a050:	4613      	mov	r3, r2
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	4413      	add	r3, r2
 800a060:	3304      	adds	r3, #4
 800a062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	f003 030f 	and.w	r3, r3, #15
 800a076:	b2da      	uxtb	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a082:	2b01      	cmp	r3, #1
 800a084:	d101      	bne.n	800a08a <HAL_PCD_EP_ClrStall+0x86>
 800a086:	2302      	movs	r3, #2
 800a088:	e00e      	b.n	800a0a8 <HAL_PCD_EP_ClrStall+0xa4>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	4618      	mov	r0, r3
 800a09a:	f00a fcf5 	bl	8014a88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a0bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	da0c      	bge.n	800a0de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	f003 020f 	and.w	r2, r3, #15
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	00db      	lsls	r3, r3, #3
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	3338      	adds	r3, #56	; 0x38
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3304      	adds	r3, #4
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	e00c      	b.n	800a0f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	f003 020f 	and.w	r2, r3, #15
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f00a fb14 	bl	801472c <USB_EPStopXfer>
 800a104:	4603      	mov	r3, r0
 800a106:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a108:	7afb      	ldrb	r3, [r7, #11]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b08a      	sub	sp, #40	; 0x28
 800a116:	af02      	add	r7, sp, #8
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	4613      	mov	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	3338      	adds	r3, #56	; 0x38
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4413      	add	r3, r2
 800a136:	3304      	adds	r3, #4
 800a138:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	695a      	ldr	r2, [r3, #20]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	d901      	bls.n	800a14a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e06c      	b.n	800a224 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	691a      	ldr	r2, [r3, #16]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d902      	bls.n	800a166 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	3303      	adds	r3, #3
 800a16a:	089b      	lsrs	r3, r3, #2
 800a16c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a16e:	e02b      	b.n	800a1c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	429a      	cmp	r2, r3
 800a184:	d902      	bls.n	800a18c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	3303      	adds	r3, #3
 800a190:	089b      	lsrs	r3, r3, #2
 800a192:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68d9      	ldr	r1, [r3, #12]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	6978      	ldr	r0, [r7, #20]
 800a1ac:	f00a fb68 	bl	8014880 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	441a      	add	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	695a      	ldr	r2, [r3, #20]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d809      	bhi.n	800a1f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	695a      	ldr	r2, [r3, #20]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d203      	bcs.n	800a1f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1be      	bne.n	800a170 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	691a      	ldr	r2, [r3, #16]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d811      	bhi.n	800a222 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	f003 030f 	and.w	r3, r3, #15
 800a204:	2201      	movs	r2, #1
 800a206:	fa02 f303 	lsl.w	r3, r2, r3
 800a20a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	43db      	mvns	r3, r3
 800a218:	6939      	ldr	r1, [r7, #16]
 800a21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a21e:	4013      	ands	r3, r2
 800a220:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	333c      	adds	r3, #60	; 0x3c
 800a244:	3304      	adds	r3, #4
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d17b      	bne.n	800a35a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d015      	beq.n	800a298 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	4a61      	ldr	r2, [pc, #388]	; (800a3f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	f240 80b9 	bls.w	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 80b3 	beq.w	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28e:	461a      	mov	r2, r3
 800a290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a294:	6093      	str	r3, [r2, #8]
 800a296:	e0a7      	b.n	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	6093      	str	r3, [r2, #8]
 800a2b4:	e098      	b.n	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 8093 	bne.w	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4a4b      	ldr	r2, [pc, #300]	; (800a3f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d90f      	bls.n	800a2ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00a      	beq.n	800a2ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e6:	6093      	str	r3, [r2, #8]
 800a2e8:	e07e      	b.n	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6a1a      	ldr	r2, [r3, #32]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	0159      	lsls	r1, r3, #5
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	440b      	add	r3, r1
 800a30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a316:	1ad2      	subs	r2, r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d114      	bne.n	800a34c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d109      	bne.n	800a33e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a334:	461a      	mov	r2, r3
 800a336:	2101      	movs	r1, #1
 800a338:	f00a fd3a 	bl	8014db0 <USB_EP0_OutStart>
 800a33c:	e006      	b.n	800a34c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	441a      	add	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f010 fa00 	bl	801a758 <HAL_PCD_DataOutStageCallback>
 800a358:	e046      	b.n	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	4a26      	ldr	r2, [pc, #152]	; (800a3f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d124      	bne.n	800a3ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00a      	beq.n	800a382 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	4413      	add	r3, r2
 800a374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a378:	461a      	mov	r2, r3
 800a37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37e:	6093      	str	r3, [r2, #8]
 800a380:	e032      	b.n	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a398:	461a      	mov	r2, r3
 800a39a:	2320      	movs	r3, #32
 800a39c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f010 f9d7 	bl	801a758 <HAL_PCD_DataOutStageCallback>
 800a3aa:	e01d      	b.n	800a3e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d114      	bne.n	800a3dc <PCD_EP_OutXfrComplete_int+0x1b0>
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	440b      	add	r3, r1
 800a3c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d108      	bne.n	800a3dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	f00a fcea 	bl	8014db0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f010 f9b8 	bl	801a758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3720      	adds	r7, #32
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	4f54300a 	.word	0x4f54300a
 800a3f8:	4f54310a 	.word	0x4f54310a

0800a3fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	333c      	adds	r3, #60	; 0x3c
 800a414:	3304      	adds	r3, #4
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <PCD_EP_OutSetupPacket_int+0x88>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d90e      	bls.n	800a450 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d009      	beq.n	800a450 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a448:	461a      	mov	r2, r3
 800a44a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a44e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f010 f96f 	bl	801a734 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <PCD_EP_OutSetupPacket_int+0x88>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d90c      	bls.n	800a478 <PCD_EP_OutSetupPacket_int+0x7c>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d108      	bne.n	800a478 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a470:	461a      	mov	r2, r3
 800a472:	2101      	movs	r1, #1
 800a474:	f00a fc9c 	bl	8014db0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	4f54300a 	.word	0x4f54300a

0800a488 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
 800a494:	4613      	mov	r3, r2
 800a496:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d107      	bne.n	800a4b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a4a6:	883b      	ldrh	r3, [r7, #0]
 800a4a8:	0419      	lsls	r1, r3, #16
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	629a      	str	r2, [r3, #40]	; 0x28
 800a4b4:	e028      	b.n	800a508 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4bc:	0c1b      	lsrs	r3, r3, #16
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
 800a4c8:	e00d      	b.n	800a4e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
 800a4d0:	3340      	adds	r3, #64	; 0x40
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	0c1b      	lsrs	r3, r3, #16
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	4413      	add	r3, r2
 800a4de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	73fb      	strb	r3, [r7, #15]
 800a4e6:	7bfa      	ldrb	r2, [r7, #15]
 800a4e8:	78fb      	ldrb	r3, [r7, #3]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d3ec      	bcc.n	800a4ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a4f0:	883b      	ldrh	r3, [r7, #0]
 800a4f2:	0418      	lsls	r0, r3, #16
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6819      	ldr	r1, [r3, #0]
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	4302      	orrs	r2, r0
 800a500:	3340      	adds	r3, #64	; 0x40
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	887a      	ldrh	r2, [r7, #2]
 800a528:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <HAL_PCDEx_ActivateLPM+0x44>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	10000003 	.word	0x10000003

0800a580 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a5a0:	4b19      	ldr	r3, [pc, #100]	; (800a608 <HAL_PWREx_ConfigSupply+0x70>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d00a      	beq.n	800a5c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5ac:	4b16      	ldr	r3, [pc, #88]	; (800a608 <HAL_PWREx_ConfigSupply+0x70>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d001      	beq.n	800a5be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e01f      	b.n	800a5fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e01d      	b.n	800a5fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5c2:	4b11      	ldr	r3, [pc, #68]	; (800a608 <HAL_PWREx_ConfigSupply+0x70>)
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	f023 0207 	bic.w	r2, r3, #7
 800a5ca:	490f      	ldr	r1, [pc, #60]	; (800a608 <HAL_PWREx_ConfigSupply+0x70>)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a5d2:	f7f9 fcc1 	bl	8003f58 <HAL_GetTick>
 800a5d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5d8:	e009      	b.n	800a5ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a5da:	f7f9 fcbd 	bl	8003f58 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5e8:	d901      	bls.n	800a5ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e007      	b.n	800a5fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <HAL_PWREx_ConfigSupply+0x70>)
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5fa:	d1ee      	bne.n	800a5da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	58024800 	.word	0x58024800

0800a60c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a610:	4b05      	ldr	r3, [pc, #20]	; (800a628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	4a04      	ldr	r2, [pc, #16]	; (800a628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a61a:	60d3      	str	r3, [r2, #12]
}
 800a61c:	bf00      	nop
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	58024800 	.word	0x58024800

0800a62c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08c      	sub	sp, #48	; 0x30
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e3c8      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 8087 	beq.w	800a75a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a64c:	4b88      	ldr	r3, [pc, #544]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a656:	4b86      	ldr	r3, [pc, #536]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	2b10      	cmp	r3, #16
 800a660:	d007      	beq.n	800a672 <HAL_RCC_OscConfig+0x46>
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	2b18      	cmp	r3, #24
 800a666:	d110      	bne.n	800a68a <HAL_RCC_OscConfig+0x5e>
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d10b      	bne.n	800a68a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a672:	4b7f      	ldr	r3, [pc, #508]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d06c      	beq.n	800a758 <HAL_RCC_OscConfig+0x12c>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d168      	bne.n	800a758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e3a2      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a692:	d106      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x76>
 800a694:	4b76      	ldr	r3, [pc, #472]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a75      	ldr	r2, [pc, #468]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a69a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	e02e      	b.n	800a700 <HAL_RCC_OscConfig+0xd4>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10c      	bne.n	800a6c4 <HAL_RCC_OscConfig+0x98>
 800a6aa:	4b71      	ldr	r3, [pc, #452]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a70      	ldr	r2, [pc, #448]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6b4:	6013      	str	r3, [r2, #0]
 800a6b6:	4b6e      	ldr	r3, [pc, #440]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a6d      	ldr	r2, [pc, #436]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	e01d      	b.n	800a700 <HAL_RCC_OscConfig+0xd4>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6cc:	d10c      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xbc>
 800a6ce:	4b68      	ldr	r3, [pc, #416]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a67      	ldr	r2, [pc, #412]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	4b65      	ldr	r3, [pc, #404]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a64      	ldr	r2, [pc, #400]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6e4:	6013      	str	r3, [r2, #0]
 800a6e6:	e00b      	b.n	800a700 <HAL_RCC_OscConfig+0xd4>
 800a6e8:	4b61      	ldr	r3, [pc, #388]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a60      	ldr	r2, [pc, #384]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	4b5e      	ldr	r3, [pc, #376]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a5d      	ldr	r2, [pc, #372]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a6fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d013      	beq.n	800a730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a708:	f7f9 fc26 	bl	8003f58 <HAL_GetTick>
 800a70c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a70e:	e008      	b.n	800a722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a710:	f7f9 fc22 	bl	8003f58 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b64      	cmp	r3, #100	; 0x64
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e356      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a722:	4b53      	ldr	r3, [pc, #332]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <HAL_RCC_OscConfig+0xe4>
 800a72e:	e014      	b.n	800a75a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a730:	f7f9 fc12 	bl	8003f58 <HAL_GetTick>
 800a734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a736:	e008      	b.n	800a74a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a738:	f7f9 fc0e 	bl	8003f58 <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b64      	cmp	r3, #100	; 0x64
 800a744:	d901      	bls.n	800a74a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e342      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a74a:	4b49      	ldr	r3, [pc, #292]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1f0      	bne.n	800a738 <HAL_RCC_OscConfig+0x10c>
 800a756:	e000      	b.n	800a75a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 808c 	beq.w	800a880 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a768:	4b41      	ldr	r3, [pc, #260]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a770:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a772:	4b3f      	ldr	r3, [pc, #252]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a776:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <HAL_RCC_OscConfig+0x162>
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	2b18      	cmp	r3, #24
 800a782:	d137      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x1c8>
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d132      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a78e:	4b38      	ldr	r3, [pc, #224]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x17a>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e314      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7a6:	4b32      	ldr	r3, [pc, #200]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f023 0219 	bic.w	r2, r3, #25
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	492f      	ldr	r1, [pc, #188]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b8:	f7f9 fbce 	bl	8003f58 <HAL_GetTick>
 800a7bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7c0:	f7f9 fbca 	bl	8003f58 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e2fe      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7d2:	4b27      	ldr	r3, [pc, #156]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0304 	and.w	r3, r3, #4
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f0      	beq.n	800a7c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7de:	4b24      	ldr	r3, [pc, #144]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	061b      	lsls	r3, r3, #24
 800a7ec:	4920      	ldr	r1, [pc, #128]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7f2:	e045      	b.n	800a880 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d026      	beq.n	800a84a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7fc:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f023 0219 	bic.w	r2, r3, #25
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	4919      	ldr	r1, [pc, #100]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80e:	f7f9 fba3 	bl	8003f58 <HAL_GetTick>
 800a812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a814:	e008      	b.n	800a828 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a816:	f7f9 fb9f 	bl	8003f58 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b02      	cmp	r3, #2
 800a822:	d901      	bls.n	800a828 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e2d3      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a828:	4b11      	ldr	r3, [pc, #68]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0f0      	beq.n	800a816 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a834:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	061b      	lsls	r3, r3, #24
 800a842:	490b      	ldr	r1, [pc, #44]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a844:	4313      	orrs	r3, r2
 800a846:	604b      	str	r3, [r1, #4]
 800a848:	e01a      	b.n	800a880 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a84a:	4b09      	ldr	r3, [pc, #36]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a08      	ldr	r2, [pc, #32]	; (800a870 <HAL_RCC_OscConfig+0x244>)
 800a850:	f023 0301 	bic.w	r3, r3, #1
 800a854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a856:	f7f9 fb7f 	bl	8003f58 <HAL_GetTick>
 800a85a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a85c:	e00a      	b.n	800a874 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a85e:	f7f9 fb7b 	bl	8003f58 <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d903      	bls.n	800a874 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e2af      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
 800a870:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a874:	4b96      	ldr	r3, [pc, #600]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1ee      	bne.n	800a85e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0310 	and.w	r3, r3, #16
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d06a      	beq.n	800a962 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a88c:	4b90      	ldr	r3, [pc, #576]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a894:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a896:	4b8e      	ldr	r3, [pc, #568]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d007      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x286>
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b18      	cmp	r3, #24
 800a8a6:	d11b      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x2b4>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d116      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a8b2:	4b87      	ldr	r3, [pc, #540]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d005      	beq.n	800a8ca <HAL_RCC_OscConfig+0x29e>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	2b80      	cmp	r3, #128	; 0x80
 800a8c4:	d001      	beq.n	800a8ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e282      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8ca:	4b81      	ldr	r3, [pc, #516]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	061b      	lsls	r3, r3, #24
 800a8d8:	497d      	ldr	r1, [pc, #500]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a8de:	e040      	b.n	800a962 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d023      	beq.n	800a930 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a8e8:	4b79      	ldr	r3, [pc, #484]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a78      	ldr	r2, [pc, #480]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7f9 fb30 	bl	8003f58 <HAL_GetTick>
 800a8f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8fc:	f7f9 fb2c 	bl	8003f58 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e260      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a90e:	4b70      	ldr	r3, [pc, #448]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0f0      	beq.n	800a8fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a91a:	4b6d      	ldr	r3, [pc, #436]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	061b      	lsls	r3, r3, #24
 800a928:	4969      	ldr	r1, [pc, #420]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60cb      	str	r3, [r1, #12]
 800a92e:	e018      	b.n	800a962 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a930:	4b67      	ldr	r3, [pc, #412]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a66      	ldr	r2, [pc, #408]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a93a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93c:	f7f9 fb0c 	bl	8003f58 <HAL_GetTick>
 800a940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a942:	e008      	b.n	800a956 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a944:	f7f9 fb08 	bl	8003f58 <HAL_GetTick>
 800a948:	4602      	mov	r2, r0
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d901      	bls.n	800a956 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e23c      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a956:	4b5e      	ldr	r3, [pc, #376]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f0      	bne.n	800a944 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d036      	beq.n	800a9dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d019      	beq.n	800a9aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a976:	4b56      	ldr	r3, [pc, #344]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97a:	4a55      	ldr	r2, [pc, #340]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a982:	f7f9 fae9 	bl	8003f58 <HAL_GetTick>
 800a986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a988:	e008      	b.n	800a99c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a98a:	f7f9 fae5 	bl	8003f58 <HAL_GetTick>
 800a98e:	4602      	mov	r2, r0
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	2b02      	cmp	r3, #2
 800a996:	d901      	bls.n	800a99c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e219      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a99c:	4b4c      	ldr	r3, [pc, #304]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a99e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0f0      	beq.n	800a98a <HAL_RCC_OscConfig+0x35e>
 800a9a8:	e018      	b.n	800a9dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9aa:	4b49      	ldr	r3, [pc, #292]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ae:	4a48      	ldr	r2, [pc, #288]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b6:	f7f9 facf 	bl	8003f58 <HAL_GetTick>
 800a9ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a9bc:	e008      	b.n	800a9d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9be:	f7f9 facb 	bl	8003f58 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e1ff      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a9d0:	4b3f      	ldr	r3, [pc, #252]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a9d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f0      	bne.n	800a9be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0320 	and.w	r3, r3, #32
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d036      	beq.n	800aa56 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d019      	beq.n	800aa24 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9f0:	4b37      	ldr	r3, [pc, #220]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a36      	ldr	r2, [pc, #216]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800a9f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9fc:	f7f9 faac 	bl	8003f58 <HAL_GetTick>
 800aa00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa02:	e008      	b.n	800aa16 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa04:	f7f9 faa8 	bl	8003f58 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d901      	bls.n	800aa16 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e1dc      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa16:	4b2e      	ldr	r3, [pc, #184]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0f0      	beq.n	800aa04 <HAL_RCC_OscConfig+0x3d8>
 800aa22:	e018      	b.n	800aa56 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa24:	4b2a      	ldr	r3, [pc, #168]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a29      	ldr	r2, [pc, #164]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aa2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa30:	f7f9 fa92 	bl	8003f58 <HAL_GetTick>
 800aa34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa36:	e008      	b.n	800aa4a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa38:	f7f9 fa8e 	bl	8003f58 <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d901      	bls.n	800aa4a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e1c2      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa4a:	4b21      	ldr	r3, [pc, #132]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1f0      	bne.n	800aa38 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 8086 	beq.w	800ab70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa64:	4b1b      	ldr	r3, [pc, #108]	; (800aad4 <HAL_RCC_OscConfig+0x4a8>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	; (800aad4 <HAL_RCC_OscConfig+0x4a8>)
 800aa6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa70:	f7f9 fa72 	bl	8003f58 <HAL_GetTick>
 800aa74:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa76:	e008      	b.n	800aa8a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa78:	f7f9 fa6e 	bl	8003f58 <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b64      	cmp	r3, #100	; 0x64
 800aa84:	d901      	bls.n	800aa8a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e1a2      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa8a:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <HAL_RCC_OscConfig+0x4a8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0f0      	beq.n	800aa78 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d106      	bne.n	800aaac <HAL_RCC_OscConfig+0x480>
 800aa9e:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aaa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa2:	4a0b      	ldr	r2, [pc, #44]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aaa4:	f043 0301 	orr.w	r3, r3, #1
 800aaa8:	6713      	str	r3, [r2, #112]	; 0x70
 800aaaa:	e032      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e6>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d111      	bne.n	800aad8 <HAL_RCC_OscConfig+0x4ac>
 800aab4:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab8:	4a05      	ldr	r2, [pc, #20]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aaba:	f023 0301 	bic.w	r3, r3, #1
 800aabe:	6713      	str	r3, [r2, #112]	; 0x70
 800aac0:	4b03      	ldr	r3, [pc, #12]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac4:	4a02      	ldr	r2, [pc, #8]	; (800aad0 <HAL_RCC_OscConfig+0x4a4>)
 800aac6:	f023 0304 	bic.w	r3, r3, #4
 800aaca:	6713      	str	r3, [r2, #112]	; 0x70
 800aacc:	e021      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e6>
 800aace:	bf00      	nop
 800aad0:	58024400 	.word	0x58024400
 800aad4:	58024800 	.word	0x58024800
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	2b05      	cmp	r3, #5
 800aade:	d10c      	bne.n	800aafa <HAL_RCC_OscConfig+0x4ce>
 800aae0:	4b83      	ldr	r3, [pc, #524]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800aae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae4:	4a82      	ldr	r2, [pc, #520]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800aae6:	f043 0304 	orr.w	r3, r3, #4
 800aaea:	6713      	str	r3, [r2, #112]	; 0x70
 800aaec:	4b80      	ldr	r3, [pc, #512]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800aaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf0:	4a7f      	ldr	r2, [pc, #508]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800aaf2:	f043 0301 	orr.w	r3, r3, #1
 800aaf6:	6713      	str	r3, [r2, #112]	; 0x70
 800aaf8:	e00b      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e6>
 800aafa:	4b7d      	ldr	r3, [pc, #500]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800aafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafe:	4a7c      	ldr	r2, [pc, #496]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	6713      	str	r3, [r2, #112]	; 0x70
 800ab06:	4b7a      	ldr	r3, [pc, #488]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0a:	4a79      	ldr	r2, [pc, #484]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab0c:	f023 0304 	bic.w	r3, r3, #4
 800ab10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d015      	beq.n	800ab46 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab1a:	f7f9 fa1d 	bl	8003f58 <HAL_GetTick>
 800ab1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab20:	e00a      	b.n	800ab38 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab22:	f7f9 fa19 	bl	8003f58 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d901      	bls.n	800ab38 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e14b      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab38:	4b6d      	ldr	r3, [pc, #436]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0ee      	beq.n	800ab22 <HAL_RCC_OscConfig+0x4f6>
 800ab44:	e014      	b.n	800ab70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab46:	f7f9 fa07 	bl	8003f58 <HAL_GetTick>
 800ab4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab4c:	e00a      	b.n	800ab64 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab4e:	f7f9 fa03 	bl	8003f58 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e135      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab64:	4b62      	ldr	r3, [pc, #392]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1ee      	bne.n	800ab4e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 812a 	beq.w	800adce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab7a:	4b5d      	ldr	r3, [pc, #372]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab82:	2b18      	cmp	r3, #24
 800ab84:	f000 80ba 	beq.w	800acfc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	f040 8095 	bne.w	800acbc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab92:	4b57      	ldr	r3, [pc, #348]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a56      	ldr	r2, [pc, #344]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ab98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9e:	f7f9 f9db 	bl	8003f58 <HAL_GetTick>
 800aba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aba4:	e008      	b.n	800abb8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aba6:	f7f9 f9d7 	bl	8003f58 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d901      	bls.n	800abb8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e10b      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abb8:	4b4d      	ldr	r3, [pc, #308]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1f0      	bne.n	800aba6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abc4:	4b4a      	ldr	r3, [pc, #296]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800abc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc8:	4b4a      	ldr	r3, [pc, #296]	; (800acf4 <HAL_RCC_OscConfig+0x6c8>)
 800abca:	4013      	ands	r3, r2
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800abd4:	0112      	lsls	r2, r2, #4
 800abd6:	430a      	orrs	r2, r1
 800abd8:	4945      	ldr	r1, [pc, #276]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	628b      	str	r3, [r1, #40]	; 0x28
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	3b01      	subs	r3, #1
 800abe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abec:	3b01      	subs	r3, #1
 800abee:	025b      	lsls	r3, r3, #9
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	3b01      	subs	r3, #1
 800abfa:	041b      	lsls	r3, r3, #16
 800abfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac00:	431a      	orrs	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	3b01      	subs	r3, #1
 800ac08:	061b      	lsls	r3, r3, #24
 800ac0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac0e:	4938      	ldr	r1, [pc, #224]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac14:	4b36      	ldr	r3, [pc, #216]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	4a35      	ldr	r2, [pc, #212]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac1a:	f023 0301 	bic.w	r3, r3, #1
 800ac1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac20:	4b33      	ldr	r3, [pc, #204]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac24:	4b34      	ldr	r3, [pc, #208]	; (800acf8 <HAL_RCC_OscConfig+0x6cc>)
 800ac26:	4013      	ands	r3, r2
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac2c:	00d2      	lsls	r2, r2, #3
 800ac2e:	4930      	ldr	r1, [pc, #192]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac34:	4b2e      	ldr	r3, [pc, #184]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	f023 020c 	bic.w	r2, r3, #12
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	492b      	ldr	r1, [pc, #172]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac46:	4b2a      	ldr	r3, [pc, #168]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	f023 0202 	bic.w	r2, r3, #2
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	4927      	ldr	r1, [pc, #156]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac58:	4b25      	ldr	r3, [pc, #148]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	4a24      	ldr	r2, [pc, #144]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac64:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	4a21      	ldr	r2, [pc, #132]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac70:	4b1f      	ldr	r3, [pc, #124]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	4a1e      	ldr	r2, [pc, #120]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac7c:	4b1c      	ldr	r3, [pc, #112]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac88:	4b19      	ldr	r3, [pc, #100]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ac8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac94:	f7f9 f960 	bl	8003f58 <HAL_GetTick>
 800ac98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac9a:	e008      	b.n	800acae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac9c:	f7f9 f95c 	bl	8003f58 <HAL_GetTick>
 800aca0:	4602      	mov	r2, r0
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e090      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acae:	4b10      	ldr	r3, [pc, #64]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0f0      	beq.n	800ac9c <HAL_RCC_OscConfig+0x670>
 800acba:	e088      	b.n	800adce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acbc:	4b0c      	ldr	r3, [pc, #48]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0b      	ldr	r2, [pc, #44]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800acc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc8:	f7f9 f946 	bl	8003f58 <HAL_GetTick>
 800accc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acce:	e008      	b.n	800ace2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acd0:	f7f9 f942 	bl	8003f58 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d901      	bls.n	800ace2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800acde:	2303      	movs	r3, #3
 800ace0:	e076      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ace2:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <HAL_RCC_OscConfig+0x6c4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1f0      	bne.n	800acd0 <HAL_RCC_OscConfig+0x6a4>
 800acee:	e06e      	b.n	800adce <HAL_RCC_OscConfig+0x7a2>
 800acf0:	58024400 	.word	0x58024400
 800acf4:	fffffc0c 	.word	0xfffffc0c
 800acf8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800acfc:	4b36      	ldr	r3, [pc, #216]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800acfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad02:	4b35      	ldr	r3, [pc, #212]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800ad04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d031      	beq.n	800ad74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f003 0203 	and.w	r2, r3, #3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d12a      	bne.n	800ad74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	091b      	lsrs	r3, r3, #4
 800ad22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d122      	bne.n	800ad74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d11a      	bne.n	800ad74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	0a5b      	lsrs	r3, r3, #9
 800ad42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d111      	bne.n	800ad74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d108      	bne.n	800ad74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	0e1b      	lsrs	r3, r3, #24
 800ad66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d001      	beq.n	800ad78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e02b      	b.n	800add0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad78:	4b17      	ldr	r3, [pc, #92]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800ad7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7c:	08db      	lsrs	r3, r3, #3
 800ad7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d01f      	beq.n	800adce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad8e:	4b12      	ldr	r3, [pc, #72]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800ad90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad92:	4a11      	ldr	r2, [pc, #68]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800ad94:	f023 0301 	bic.w	r3, r3, #1
 800ad98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad9a:	f7f9 f8dd 	bl	8003f58 <HAL_GetTick>
 800ad9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ada0:	bf00      	nop
 800ada2:	f7f9 f8d9 	bl	8003f58 <HAL_GetTick>
 800ada6:	4602      	mov	r2, r0
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	4293      	cmp	r3, r2
 800adac:	d0f9      	beq.n	800ada2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adae:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800adb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb2:	4b0a      	ldr	r3, [pc, #40]	; (800addc <HAL_RCC_OscConfig+0x7b0>)
 800adb4:	4013      	ands	r3, r2
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800adba:	00d2      	lsls	r2, r2, #3
 800adbc:	4906      	ldr	r1, [pc, #24]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800adbe:	4313      	orrs	r3, r2
 800adc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800adc2:	4b05      	ldr	r3, [pc, #20]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	4a04      	ldr	r2, [pc, #16]	; (800add8 <HAL_RCC_OscConfig+0x7ac>)
 800adc8:	f043 0301 	orr.w	r3, r3, #1
 800adcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3730      	adds	r7, #48	; 0x30
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	58024400 	.word	0x58024400
 800addc:	ffff0007 	.word	0xffff0007

0800ade0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e19c      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adf4:	4b8a      	ldr	r3, [pc, #552]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d910      	bls.n	800ae24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae02:	4b87      	ldr	r3, [pc, #540]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f023 020f 	bic.w	r2, r3, #15
 800ae0a:	4985      	ldr	r1, [pc, #532]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae12:	4b83      	ldr	r3, [pc, #524]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d001      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e184      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	4b7b      	ldr	r3, [pc, #492]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d908      	bls.n	800ae52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae40:	4b78      	ldr	r3, [pc, #480]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	4975      	ldr	r1, [pc, #468]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d010      	beq.n	800ae80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695a      	ldr	r2, [r3, #20]
 800ae62:	4b70      	ldr	r3, [pc, #448]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d908      	bls.n	800ae80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae6e:	4b6d      	ldr	r3, [pc, #436]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	496a      	ldr	r1, [pc, #424]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d010      	beq.n	800aeae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	4b64      	ldr	r3, [pc, #400]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d908      	bls.n	800aeae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae9c:	4b61      	ldr	r3, [pc, #388]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	495e      	ldr	r1, [pc, #376]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	69da      	ldr	r2, [r3, #28]
 800aebe:	4b59      	ldr	r3, [pc, #356]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d908      	bls.n	800aedc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aeca:	4b56      	ldr	r3, [pc, #344]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	4953      	ldr	r1, [pc, #332]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0302 	and.w	r3, r3, #2
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d010      	beq.n	800af0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	4b4d      	ldr	r3, [pc, #308]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	f003 030f 	and.w	r3, r3, #15
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d908      	bls.n	800af0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aef8:	4b4a      	ldr	r3, [pc, #296]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	f023 020f 	bic.w	r2, r3, #15
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4947      	ldr	r1, [pc, #284]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af06:	4313      	orrs	r3, r2
 800af08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d055      	beq.n	800afc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af16:	4b43      	ldr	r3, [pc, #268]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	4940      	ldr	r1, [pc, #256]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af24:	4313      	orrs	r3, r2
 800af26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d107      	bne.n	800af40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af30:	4b3c      	ldr	r3, [pc, #240]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d121      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e0f6      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d107      	bne.n	800af58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af48:	4b36      	ldr	r3, [pc, #216]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d115      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e0ea      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d107      	bne.n	800af70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af60:	4b30      	ldr	r3, [pc, #192]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d109      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e0de      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af70:	4b2c      	ldr	r3, [pc, #176]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e0d6      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af80:	4b28      	ldr	r3, [pc, #160]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f023 0207 	bic.w	r2, r3, #7
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4925      	ldr	r1, [pc, #148]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af92:	f7f8 ffe1 	bl	8003f58 <HAL_GetTick>
 800af96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af98:	e00a      	b.n	800afb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af9a:	f7f8 ffdd 	bl	8003f58 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d901      	bls.n	800afb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e0be      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afb0:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d1eb      	bne.n	800af9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	4b14      	ldr	r3, [pc, #80]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	f003 030f 	and.w	r3, r3, #15
 800afda:	429a      	cmp	r2, r3
 800afdc:	d208      	bcs.n	800aff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afde:	4b11      	ldr	r3, [pc, #68]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	f023 020f 	bic.w	r2, r3, #15
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	490e      	ldr	r1, [pc, #56]	; (800b024 <HAL_RCC_ClockConfig+0x244>)
 800afec:	4313      	orrs	r3, r2
 800afee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aff0:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d214      	bcs.n	800b028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800affe:	4b08      	ldr	r3, [pc, #32]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f023 020f 	bic.w	r2, r3, #15
 800b006:	4906      	ldr	r1, [pc, #24]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b00e:	4b04      	ldr	r3, [pc, #16]	; (800b020 <HAL_RCC_ClockConfig+0x240>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 030f 	and.w	r3, r3, #15
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d005      	beq.n	800b028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e086      	b.n	800b12e <HAL_RCC_ClockConfig+0x34e>
 800b020:	52002000 	.word	0x52002000
 800b024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d010      	beq.n	800b056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691a      	ldr	r2, [r3, #16]
 800b038:	4b3f      	ldr	r3, [pc, #252]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b040:	429a      	cmp	r2, r3
 800b042:	d208      	bcs.n	800b056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b044:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	4939      	ldr	r1, [pc, #228]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b052:	4313      	orrs	r3, r2
 800b054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0308 	and.w	r3, r3, #8
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d010      	beq.n	800b084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695a      	ldr	r2, [r3, #20]
 800b066:	4b34      	ldr	r3, [pc, #208]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b06e:	429a      	cmp	r2, r3
 800b070:	d208      	bcs.n	800b084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b072:	4b31      	ldr	r3, [pc, #196]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	492e      	ldr	r1, [pc, #184]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b080:	4313      	orrs	r3, r2
 800b082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0310 	and.w	r3, r3, #16
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d010      	beq.n	800b0b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699a      	ldr	r2, [r3, #24]
 800b094:	4b28      	ldr	r3, [pc, #160]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d208      	bcs.n	800b0b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0a0:	4b25      	ldr	r3, [pc, #148]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	4922      	ldr	r1, [pc, #136]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d010      	beq.n	800b0e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	69da      	ldr	r2, [r3, #28]
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d208      	bcs.n	800b0e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b0ce:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	4917      	ldr	r1, [pc, #92]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b0e0:	f000 f89e 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	4b14      	ldr	r3, [pc, #80]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	0a1b      	lsrs	r3, r3, #8
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	4912      	ldr	r1, [pc, #72]	; (800b13c <HAL_RCC_ClockConfig+0x35c>)
 800b0f2:	5ccb      	ldrb	r3, [r1, r3]
 800b0f4:	f003 031f 	and.w	r3, r3, #31
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <HAL_RCC_ClockConfig+0x358>)
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	4a0d      	ldr	r2, [pc, #52]	; (800b13c <HAL_RCC_ClockConfig+0x35c>)
 800b108:	5cd3      	ldrb	r3, [r2, r3]
 800b10a:	f003 031f 	and.w	r3, r3, #31
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	fa22 f303 	lsr.w	r3, r2, r3
 800b114:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <HAL_RCC_ClockConfig+0x360>)
 800b116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b118:	4a0a      	ldr	r2, [pc, #40]	; (800b144 <HAL_RCC_ClockConfig+0x364>)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b11e:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <HAL_RCC_ClockConfig+0x368>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4618      	mov	r0, r3
 800b124:	f7f8 fece 	bl	8003ec4 <HAL_InitTick>
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	58024400 	.word	0x58024400
 800b13c:	0801f6e4 	.word	0x0801f6e4
 800b140:	24000004 	.word	0x24000004
 800b144:	24000000 	.word	0x24000000
 800b148:	24000008 	.word	0x24000008

0800b14c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08c      	sub	sp, #48	; 0x30
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d12a      	bne.n	800b1b4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b15e:	4b2d      	ldr	r3, [pc, #180]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b164:	4a2b      	ldr	r2, [pc, #172]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b16e:	4b29      	ldr	r3, [pc, #164]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b182:	2302      	movs	r3, #2
 800b184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b186:	2303      	movs	r3, #3
 800b188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18a:	2300      	movs	r3, #0
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b18e:	2300      	movs	r3, #0
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b192:	f107 031c 	add.w	r3, r7, #28
 800b196:	4619      	mov	r1, r3
 800b198:	481f      	ldr	r0, [pc, #124]	; (800b218 <HAL_RCC_MCOConfig+0xcc>)
 800b19a:	f7fd fc29 	bl	80089f0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	430b      	orrs	r3, r1
 800b1ac:	4919      	ldr	r1, [pc, #100]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b1b2:	e02a      	b.n	800b20a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b1b4:	4b17      	ldr	r3, [pc, #92]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1ba:	4a16      	ldr	r2, [pc, #88]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1bc:	f043 0304 	orr.w	r3, r3, #4
 800b1c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b1c4:	4b13      	ldr	r3, [pc, #76]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b1d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b1e8:	f107 031c 	add.w	r3, r7, #28
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	480b      	ldr	r0, [pc, #44]	; (800b21c <HAL_RCC_MCOConfig+0xd0>)
 800b1f0:	f7fd fbfe 	bl	80089f0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b1f4:	4b07      	ldr	r3, [pc, #28]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	01d9      	lsls	r1, r3, #7
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	430b      	orrs	r3, r1
 800b204:	4903      	ldr	r1, [pc, #12]	; (800b214 <HAL_RCC_MCOConfig+0xc8>)
 800b206:	4313      	orrs	r3, r2
 800b208:	610b      	str	r3, [r1, #16]
}
 800b20a:	bf00      	nop
 800b20c:	3730      	adds	r7, #48	; 0x30
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	58024400 	.word	0x58024400
 800b218:	58020000 	.word	0x58020000
 800b21c:	58020800 	.word	0x58020800

0800b220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b220:	b480      	push	{r7}
 800b222:	b089      	sub	sp, #36	; 0x24
 800b224:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b226:	4bb3      	ldr	r3, [pc, #716]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b22e:	2b18      	cmp	r3, #24
 800b230:	f200 8155 	bhi.w	800b4de <HAL_RCC_GetSysClockFreq+0x2be>
 800b234:	a201      	add	r2, pc, #4	; (adr r2, 800b23c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23a:	bf00      	nop
 800b23c:	0800b2a1 	.word	0x0800b2a1
 800b240:	0800b4df 	.word	0x0800b4df
 800b244:	0800b4df 	.word	0x0800b4df
 800b248:	0800b4df 	.word	0x0800b4df
 800b24c:	0800b4df 	.word	0x0800b4df
 800b250:	0800b4df 	.word	0x0800b4df
 800b254:	0800b4df 	.word	0x0800b4df
 800b258:	0800b4df 	.word	0x0800b4df
 800b25c:	0800b2c7 	.word	0x0800b2c7
 800b260:	0800b4df 	.word	0x0800b4df
 800b264:	0800b4df 	.word	0x0800b4df
 800b268:	0800b4df 	.word	0x0800b4df
 800b26c:	0800b4df 	.word	0x0800b4df
 800b270:	0800b4df 	.word	0x0800b4df
 800b274:	0800b4df 	.word	0x0800b4df
 800b278:	0800b4df 	.word	0x0800b4df
 800b27c:	0800b2cd 	.word	0x0800b2cd
 800b280:	0800b4df 	.word	0x0800b4df
 800b284:	0800b4df 	.word	0x0800b4df
 800b288:	0800b4df 	.word	0x0800b4df
 800b28c:	0800b4df 	.word	0x0800b4df
 800b290:	0800b4df 	.word	0x0800b4df
 800b294:	0800b4df 	.word	0x0800b4df
 800b298:	0800b4df 	.word	0x0800b4df
 800b29c:	0800b2d3 	.word	0x0800b2d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2a0:	4b94      	ldr	r3, [pc, #592]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d009      	beq.n	800b2c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ac:	4b91      	ldr	r3, [pc, #580]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	08db      	lsrs	r3, r3, #3
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	4a90      	ldr	r2, [pc, #576]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b2be:	e111      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2c0:	4b8d      	ldr	r3, [pc, #564]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2c2:	61bb      	str	r3, [r7, #24]
      break;
 800b2c4:	e10e      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b2c6:	4b8d      	ldr	r3, [pc, #564]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2c8:	61bb      	str	r3, [r7, #24]
      break;
 800b2ca:	e10b      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2cc:	4b8c      	ldr	r3, [pc, #560]	; (800b500 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2ce:	61bb      	str	r3, [r7, #24]
      break;
 800b2d0:	e108      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2d2:	4b88      	ldr	r3, [pc, #544]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2dc:	4b85      	ldr	r3, [pc, #532]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e0:	091b      	lsrs	r3, r3, #4
 800b2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2e8:	4b82      	ldr	r3, [pc, #520]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2f2:	4b80      	ldr	r3, [pc, #512]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	fb02 f303 	mul.w	r3, r2, r3
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80e1 	beq.w	800b4d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	f000 8083 	beq.w	800b424 <HAL_RCC_GetSysClockFreq+0x204>
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b02      	cmp	r3, #2
 800b322:	f200 80a1 	bhi.w	800b468 <HAL_RCC_GetSysClockFreq+0x248>
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <HAL_RCC_GetSysClockFreq+0x114>
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d056      	beq.n	800b3e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b332:	e099      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b334:	4b6f      	ldr	r3, [pc, #444]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d02d      	beq.n	800b39c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b340:	4b6c      	ldr	r3, [pc, #432]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	08db      	lsrs	r3, r3, #3
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	4a6b      	ldr	r2, [pc, #428]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
 800b350:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36a:	4b62      	ldr	r3, [pc, #392]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b37e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b396:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b39a:	e087      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b508 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ae:	4b51      	ldr	r3, [pc, #324]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3de:	e065      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b50c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f2:	4b40      	ldr	r3, [pc, #256]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b402:	ed97 6a02 	vldr	s12, [r7, #8]
 800b406:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b422:	e043      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b510 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b436:	4b2f      	ldr	r3, [pc, #188]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b446:	ed97 6a02 	vldr	s12, [r7, #8]
 800b44a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b466:	e021      	b.n	800b4ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b50c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47a:	4b1e      	ldr	r3, [pc, #120]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b48e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4ac:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b0:	0a5b      	lsrs	r3, r3, #9
 800b4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d0:	ee17 3a90 	vmov	r3, s15
 800b4d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4d6:	e005      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61bb      	str	r3, [r7, #24]
      break;
 800b4dc:	e002      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4de:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4e0:	61bb      	str	r3, [r7, #24]
      break;
 800b4e2:	bf00      	nop
  }

  return sysclockfreq;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3724      	adds	r7, #36	; 0x24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	03d09000 	.word	0x03d09000
 800b4fc:	003d0900 	.word	0x003d0900
 800b500:	02faf080 	.word	0x02faf080
 800b504:	46000000 	.word	0x46000000
 800b508:	4c742400 	.word	0x4c742400
 800b50c:	4a742400 	.word	0x4a742400
 800b510:	4c3ebc20 	.word	0x4c3ebc20

0800b514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b51a:	f7ff fe81 	bl	800b220 <HAL_RCC_GetSysClockFreq>
 800b51e:	4602      	mov	r2, r0
 800b520:	4b10      	ldr	r3, [pc, #64]	; (800b564 <HAL_RCC_GetHCLKFreq+0x50>)
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	490f      	ldr	r1, [pc, #60]	; (800b568 <HAL_RCC_GetHCLKFreq+0x54>)
 800b52c:	5ccb      	ldrb	r3, [r1, r3]
 800b52e:	f003 031f 	and.w	r3, r3, #31
 800b532:	fa22 f303 	lsr.w	r3, r2, r3
 800b536:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <HAL_RCC_GetHCLKFreq+0x50>)
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	4a09      	ldr	r2, [pc, #36]	; (800b568 <HAL_RCC_GetHCLKFreq+0x54>)
 800b542:	5cd3      	ldrb	r3, [r2, r3]
 800b544:	f003 031f 	and.w	r3, r3, #31
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	fa22 f303 	lsr.w	r3, r2, r3
 800b54e:	4a07      	ldr	r2, [pc, #28]	; (800b56c <HAL_RCC_GetHCLKFreq+0x58>)
 800b550:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b552:	4a07      	ldr	r2, [pc, #28]	; (800b570 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <HAL_RCC_GetHCLKFreq+0x58>)
 800b55a:	681b      	ldr	r3, [r3, #0]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	58024400 	.word	0x58024400
 800b568:	0801f6e4 	.word	0x0801f6e4
 800b56c:	24000004 	.word	0x24000004
 800b570:	24000000 	.word	0x24000000

0800b574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b578:	f7ff ffcc 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 800b57c:	4602      	mov	r2, r0
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	091b      	lsrs	r3, r3, #4
 800b584:	f003 0307 	and.w	r3, r3, #7
 800b588:	4904      	ldr	r1, [pc, #16]	; (800b59c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b58a:	5ccb      	ldrb	r3, [r1, r3]
 800b58c:	f003 031f 	and.w	r3, r3, #31
 800b590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd80      	pop	{r7, pc}
 800b598:	58024400 	.word	0x58024400
 800b59c:	0801f6e4 	.word	0x0801f6e4

0800b5a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b5a4:	f7ff ffb6 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	4b06      	ldr	r3, [pc, #24]	; (800b5c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	0a1b      	lsrs	r3, r3, #8
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	4904      	ldr	r1, [pc, #16]	; (800b5c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5b6:	5ccb      	ldrb	r3, [r1, r3]
 800b5b8:	f003 031f 	and.w	r3, r3, #31
 800b5bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	0801f6e4 	.word	0x0801f6e4

0800b5cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d0:	b0c6      	sub	sp, #280	; 0x118
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b5f0:	2500      	movs	r5, #0
 800b5f2:	ea54 0305 	orrs.w	r3, r4, r5
 800b5f6:	d049      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b602:	d02f      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b608:	d828      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b60a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b60e:	d01a      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b614:	d822      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b61a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b61e:	d007      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b620:	e01c      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b622:	4bab      	ldr	r3, [pc, #684]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b626:	4aaa      	ldr	r2, [pc, #680]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b62c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b62e:	e01a      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b634:	3308      	adds	r3, #8
 800b636:	2102      	movs	r1, #2
 800b638:	4618      	mov	r0, r3
 800b63a:	f002 fa49 	bl	800dad0 <RCCEx_PLL2_Config>
 800b63e:	4603      	mov	r3, r0
 800b640:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b644:	e00f      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	3328      	adds	r3, #40	; 0x28
 800b64c:	2102      	movs	r1, #2
 800b64e:	4618      	mov	r0, r3
 800b650:	f002 faf0 	bl	800dc34 <RCCEx_PLL3_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b65a:	e004      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b662:	e000      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b666:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b66e:	4b98      	ldr	r3, [pc, #608]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b672:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b67c:	4a94      	ldr	r2, [pc, #592]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b67e:	430b      	orrs	r3, r1
 800b680:	6513      	str	r3, [r2, #80]	; 0x50
 800b682:	e003      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b684:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b688:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b698:	f04f 0900 	mov.w	r9, #0
 800b69c:	ea58 0309 	orrs.w	r3, r8, r9
 800b6a0:	d047      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d82a      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b6ac:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6c9 	.word	0x0800b6c9
 800b6b8:	0800b6d7 	.word	0x0800b6d7
 800b6bc:	0800b6ed 	.word	0x0800b6ed
 800b6c0:	0800b70b 	.word	0x0800b70b
 800b6c4:	0800b70b 	.word	0x0800b70b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c8:	4b81      	ldr	r3, [pc, #516]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6cc:	4a80      	ldr	r2, [pc, #512]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6d4:	e01a      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6da:	3308      	adds	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f002 f9f6 	bl	800dad0 <RCCEx_PLL2_Config>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6ea:	e00f      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f0:	3328      	adds	r3, #40	; 0x28
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f002 fa9d 	bl	800dc34 <RCCEx_PLL3_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b700:	e004      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b708:	e000      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b70a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b70c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b714:	4b6e      	ldr	r3, [pc, #440]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b718:	f023 0107 	bic.w	r1, r3, #7
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b722:	4a6b      	ldr	r2, [pc, #428]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b724:	430b      	orrs	r3, r1
 800b726:	6513      	str	r3, [r2, #80]	; 0x50
 800b728:	e003      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b72e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b73e:	f04f 0b00 	mov.w	fp, #0
 800b742:	ea5a 030b 	orrs.w	r3, sl, fp
 800b746:	d05b      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b750:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b754:	d03b      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b756:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b75a:	d834      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b75c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b760:	d037      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b766:	d82e      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b768:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b76c:	d033      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b76e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b772:	d828      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b778:	d01a      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b77a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b77e:	d822      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b788:	d007      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b78a:	e01c      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b78c:	4b50      	ldr	r3, [pc, #320]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	4a4f      	ldr	r2, [pc, #316]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b798:	e01e      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79e:	3308      	adds	r3, #8
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f002 f994 	bl	800dad0 <RCCEx_PLL2_Config>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b7ae:	e013      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	3328      	adds	r3, #40	; 0x28
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f002 fa3b 	bl	800dc34 <RCCEx_PLL3_Config>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7c4:	e008      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7cc:	e004      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7ce:	bf00      	nop
 800b7d0:	e002      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7d2:	bf00      	nop
 800b7d4:	e000      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10b      	bne.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b7e0:	4b3b      	ldr	r3, [pc, #236]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7f0:	4a37      	ldr	r2, [pc, #220]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7f2:	430b      	orrs	r3, r1
 800b7f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b7f6:	e003      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b80c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b810:	2300      	movs	r3, #0
 800b812:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b816:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b81a:	460b      	mov	r3, r1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d05d      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b824:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b828:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b82c:	d03b      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b82e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b832:	d834      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b838:	d037      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b83a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b83e:	d82e      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b844:	d033      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b84a:	d828      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b84c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b850:	d01a      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b856:	d822      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b85c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b860:	d007      	beq.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b862:	e01c      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b864:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	4a19      	ldr	r2, [pc, #100]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b86a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b86e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b870:	e01e      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	3308      	adds	r3, #8
 800b878:	2100      	movs	r1, #0
 800b87a:	4618      	mov	r0, r3
 800b87c:	f002 f928 	bl	800dad0 <RCCEx_PLL2_Config>
 800b880:	4603      	mov	r3, r0
 800b882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b886:	e013      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88c:	3328      	adds	r3, #40	; 0x28
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f002 f9cf 	bl	800dc34 <RCCEx_PLL3_Config>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b89c:	e008      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8a4:	e004      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8a6:	bf00      	nop
 800b8a8:	e002      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8aa:	bf00      	nop
 800b8ac:	e000      	b.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10d      	bne.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b8b8:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8c8:	4a01      	ldr	r2, [pc, #4]	; (800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b8ce:	e005      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b8d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b8e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b8f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	d03a      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b902:	2b30      	cmp	r3, #48	; 0x30
 800b904:	d01f      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b906:	2b30      	cmp	r3, #48	; 0x30
 800b908:	d819      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d00c      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b90e:	2b20      	cmp	r3, #32
 800b910:	d815      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d019      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b916:	2b10      	cmp	r3, #16
 800b918:	d111      	bne.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b91a:	4baa      	ldr	r3, [pc, #680]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	4aa9      	ldr	r2, [pc, #676]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b926:	e011      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92c:	3308      	adds	r3, #8
 800b92e:	2102      	movs	r1, #2
 800b930:	4618      	mov	r0, r3
 800b932:	f002 f8cd 	bl	800dad0 <RCCEx_PLL2_Config>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b93c:	e006      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b944:	e002      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b946:	bf00      	nop
 800b948:	e000      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b94a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b94c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b954:	4b9b      	ldr	r3, [pc, #620]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b958:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b962:	4a98      	ldr	r2, [pc, #608]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b964:	430b      	orrs	r3, r1
 800b966:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b968:	e003      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b96e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b97e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b982:	2300      	movs	r3, #0
 800b984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b988:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b98c:	460b      	mov	r3, r1
 800b98e:	4313      	orrs	r3, r2
 800b990:	d051      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b99c:	d035      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b99e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9a2:	d82e      	bhi.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9a8:	d031      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b9aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9ae:	d828      	bhi.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9b4:	d01a      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b9b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ba:	d822      	bhi.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c4:	d007      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b9c6:	e01c      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c8:	4b7e      	ldr	r3, [pc, #504]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9cc:	4a7d      	ldr	r2, [pc, #500]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9d4:	e01c      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9da:	3308      	adds	r3, #8
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f002 f876 	bl	800dad0 <RCCEx_PLL2_Config>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9ea:	e011      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f0:	3328      	adds	r3, #40	; 0x28
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f002 f91d 	bl	800dc34 <RCCEx_PLL3_Config>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba00:	e006      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba08:	e002      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba0a:	bf00      	nop
 800ba0c:	e000      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba18:	4b6a      	ldr	r3, [pc, #424]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ba20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba26:	4a67      	ldr	r2, [pc, #412]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba28:	430b      	orrs	r3, r1
 800ba2a:	6513      	str	r3, [r2, #80]	; 0x50
 800ba2c:	e003      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ba42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba46:	2300      	movs	r3, #0
 800ba48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ba50:	460b      	mov	r3, r1
 800ba52:	4313      	orrs	r3, r2
 800ba54:	d053      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba60:	d033      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ba62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba66:	d82c      	bhi.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba6c:	d02f      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ba6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba72:	d826      	bhi.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba78:	d02b      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ba7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba7e:	d820      	bhi.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba84:	d012      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ba86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba8a:	d81a      	bhi.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d022      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ba90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba94:	d115      	bne.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f002 f816 	bl	800dad0 <RCCEx_PLL2_Config>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800baaa:	e015      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab0:	3328      	adds	r3, #40	; 0x28
 800bab2:	2101      	movs	r1, #1
 800bab4:	4618      	mov	r0, r3
 800bab6:	f002 f8bd 	bl	800dc34 <RCCEx_PLL3_Config>
 800baba:	4603      	mov	r3, r0
 800babc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bac0:	e00a      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bac8:	e006      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800baca:	bf00      	nop
 800bacc:	e004      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bace:	bf00      	nop
 800bad0:	e002      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bad2:	bf00      	nop
 800bad4:	e000      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bae0:	4b38      	ldr	r3, [pc, #224]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baee:	4a35      	ldr	r2, [pc, #212]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baf0:	430b      	orrs	r3, r1
 800baf2:	6513      	str	r3, [r2, #80]	; 0x50
 800baf4:	e003      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bafa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bb0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb14:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	d058      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb2a:	d033      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb30:	d82c      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb36:	d02f      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb3c:	d826      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb42:	d02b      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb48:	d820      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4e:	d012      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bb50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb54:	d81a      	bhi.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d022      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb5e:	d115      	bne.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb64:	3308      	adds	r3, #8
 800bb66:	2101      	movs	r1, #1
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 ffb1 	bl	800dad0 <RCCEx_PLL2_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb74:	e015      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7a:	3328      	adds	r3, #40	; 0x28
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f002 f858 	bl	800dc34 <RCCEx_PLL3_Config>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb8a:	e00a      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb92:	e006      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb94:	bf00      	nop
 800bb96:	e004      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb98:	bf00      	nop
 800bb9a:	e002      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb9c:	bf00      	nop
 800bb9e:	e000      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10e      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbba:	4a02      	ldr	r2, [pc, #8]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	6593      	str	r3, [r2, #88]	; 0x58
 800bbc0:	e006      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bbdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbe6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4313      	orrs	r3, r2
 800bbee:	d037      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbfa:	d00e      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bbfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc00:	d816      	bhi.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d018      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc0a:	d111      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc0c:	4bc4      	ldr	r3, [pc, #784]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	4ac3      	ldr	r2, [pc, #780]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc18:	e00f      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1e:	3308      	adds	r3, #8
 800bc20:	2101      	movs	r1, #1
 800bc22:	4618      	mov	r0, r3
 800bc24:	f001 ff54 	bl	800dad0 <RCCEx_PLL2_Config>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc2e:	e004      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc36:	e000      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc42:	4bb7      	ldr	r3, [pc, #732]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc50:	4ab3      	ldr	r2, [pc, #716]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	6513      	str	r3, [r2, #80]	; 0x50
 800bc56:	e003      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bc6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	d039      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d81c      	bhi.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bccd 	.word	0x0800bccd
 800bc94:	0800bca1 	.word	0x0800bca1
 800bc98:	0800bcaf 	.word	0x0800bcaf
 800bc9c:	0800bccd 	.word	0x0800bccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bca0:	4b9f      	ldr	r3, [pc, #636]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4a9e      	ldr	r2, [pc, #632]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcac:	e00f      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f001 ff0a 	bl	800dad0 <RCCEx_PLL2_Config>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcc2:	e004      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcca:	e000      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcd6:	4b92      	ldr	r3, [pc, #584]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcda:	f023 0103 	bic.w	r1, r3, #3
 800bcde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	4a8e      	ldr	r2, [pc, #568]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce6:	430b      	orrs	r3, r1
 800bce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bcea:	e003      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bd00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd04:	2300      	movs	r3, #0
 800bd06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f000 8099 	beq.w	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd16:	4b83      	ldr	r3, [pc, #524]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a82      	ldr	r2, [pc, #520]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd22:	f7f8 f919 	bl	8003f58 <HAL_GetTick>
 800bd26:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd2a:	e00b      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd2c:	f7f8 f914 	bl	8003f58 <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b64      	cmp	r3, #100	; 0x64
 800bd3a:	d903      	bls.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd42:	e005      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd44:	4b77      	ldr	r3, [pc, #476]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0ed      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d173      	bne.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd58:	4b71      	ldr	r3, [pc, #452]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd64:	4053      	eors	r3, r2
 800bd66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d015      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd6e:	4b6c      	ldr	r3, [pc, #432]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd7a:	4b69      	ldr	r3, [pc, #420]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7e:	4a68      	ldr	r2, [pc, #416]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd86:	4b66      	ldr	r3, [pc, #408]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8a:	4a65      	ldr	r2, [pc, #404]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd92:	4a63      	ldr	r2, [pc, #396]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda6:	d118      	bne.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda8:	f7f8 f8d6 	bl	8003f58 <HAL_GetTick>
 800bdac:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdb0:	e00d      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdb2:	f7f8 f8d1 	bl	8003f58 <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bdbc:	1ad2      	subs	r2, r2, r3
 800bdbe:	f241 3388 	movw	r3, #5000	; 0x1388
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d903      	bls.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800bdcc:	e005      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdce:	4b54      	ldr	r3, [pc, #336]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd2:	f003 0302 	and.w	r3, r3, #2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0eb      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d129      	bne.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdf2:	d10e      	bne.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bdf4:	4b4a      	ldr	r3, [pc, #296]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be04:	091a      	lsrs	r2, r3, #4
 800be06:	4b48      	ldr	r3, [pc, #288]	; (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be08:	4013      	ands	r3, r2
 800be0a:	4a45      	ldr	r2, [pc, #276]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be0c:	430b      	orrs	r3, r1
 800be0e:	6113      	str	r3, [r2, #16]
 800be10:	e005      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be12:	4b43      	ldr	r3, [pc, #268]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	4a42      	ldr	r2, [pc, #264]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be1c:	6113      	str	r3, [r2, #16]
 800be1e:	4b40      	ldr	r3, [pc, #256]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800be22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be2e:	4a3c      	ldr	r2, [pc, #240]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be30:	430b      	orrs	r3, r1
 800be32:	6713      	str	r3, [r2, #112]	; 0x70
 800be34:	e008      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800be3e:	e003      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f002 0301 	and.w	r3, r2, #1
 800be54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be58:	2300      	movs	r3, #0
 800be5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800be62:	460b      	mov	r3, r1
 800be64:	4313      	orrs	r3, r2
 800be66:	f000 808f 	beq.w	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be70:	2b28      	cmp	r3, #40	; 0x28
 800be72:	d871      	bhi.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be74:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7a:	bf00      	nop
 800be7c:	0800bf61 	.word	0x0800bf61
 800be80:	0800bf59 	.word	0x0800bf59
 800be84:	0800bf59 	.word	0x0800bf59
 800be88:	0800bf59 	.word	0x0800bf59
 800be8c:	0800bf59 	.word	0x0800bf59
 800be90:	0800bf59 	.word	0x0800bf59
 800be94:	0800bf59 	.word	0x0800bf59
 800be98:	0800bf59 	.word	0x0800bf59
 800be9c:	0800bf2d 	.word	0x0800bf2d
 800bea0:	0800bf59 	.word	0x0800bf59
 800bea4:	0800bf59 	.word	0x0800bf59
 800bea8:	0800bf59 	.word	0x0800bf59
 800beac:	0800bf59 	.word	0x0800bf59
 800beb0:	0800bf59 	.word	0x0800bf59
 800beb4:	0800bf59 	.word	0x0800bf59
 800beb8:	0800bf59 	.word	0x0800bf59
 800bebc:	0800bf43 	.word	0x0800bf43
 800bec0:	0800bf59 	.word	0x0800bf59
 800bec4:	0800bf59 	.word	0x0800bf59
 800bec8:	0800bf59 	.word	0x0800bf59
 800becc:	0800bf59 	.word	0x0800bf59
 800bed0:	0800bf59 	.word	0x0800bf59
 800bed4:	0800bf59 	.word	0x0800bf59
 800bed8:	0800bf59 	.word	0x0800bf59
 800bedc:	0800bf61 	.word	0x0800bf61
 800bee0:	0800bf59 	.word	0x0800bf59
 800bee4:	0800bf59 	.word	0x0800bf59
 800bee8:	0800bf59 	.word	0x0800bf59
 800beec:	0800bf59 	.word	0x0800bf59
 800bef0:	0800bf59 	.word	0x0800bf59
 800bef4:	0800bf59 	.word	0x0800bf59
 800bef8:	0800bf59 	.word	0x0800bf59
 800befc:	0800bf61 	.word	0x0800bf61
 800bf00:	0800bf59 	.word	0x0800bf59
 800bf04:	0800bf59 	.word	0x0800bf59
 800bf08:	0800bf59 	.word	0x0800bf59
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf59 	.word	0x0800bf59
 800bf14:	0800bf59 	.word	0x0800bf59
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf61 	.word	0x0800bf61
 800bf20:	58024400 	.word	0x58024400
 800bf24:	58024800 	.word	0x58024800
 800bf28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf30:	3308      	adds	r3, #8
 800bf32:	2101      	movs	r1, #1
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 fdcb 	bl	800dad0 <RCCEx_PLL2_Config>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf40:	e00f      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf46:	3328      	adds	r3, #40	; 0x28
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 fe72 	bl	800dc34 <RCCEx_PLL3_Config>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf56:	e004      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf5e:	e000      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf6a:	4bbf      	ldr	r3, [pc, #764]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bf72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf78:	4abb      	ldr	r2, [pc, #748]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	6553      	str	r3, [r2, #84]	; 0x54
 800bf7e:	e003      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f002 0302 	and.w	r3, r2, #2
 800bf94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	d041      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d824      	bhi.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c005 	.word	0x0800c005
 800bfbc:	0800bfd1 	.word	0x0800bfd1
 800bfc0:	0800bfe7 	.word	0x0800bfe7
 800bfc4:	0800c005 	.word	0x0800c005
 800bfc8:	0800c005 	.word	0x0800c005
 800bfcc:	0800c005 	.word	0x0800c005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f001 fd79 	bl	800dad0 <RCCEx_PLL2_Config>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfe4:	e00f      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfea:	3328      	adds	r3, #40	; 0x28
 800bfec:	2101      	movs	r1, #1
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 fe20 	bl	800dc34 <RCCEx_PLL3_Config>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bffa:	e004      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c002:	e000      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c006:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c00e:	4b96      	ldr	r3, [pc, #600]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	f023 0107 	bic.w	r1, r3, #7
 800c016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c01c:	4a92      	ldr	r2, [pc, #584]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c01e:	430b      	orrs	r3, r1
 800c020:	6553      	str	r3, [r2, #84]	; 0x54
 800c022:	e003      	b.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c028:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f002 0304 	and.w	r3, r2, #4
 800c038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c03c:	2300      	movs	r3, #0
 800c03e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c042:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c046:	460b      	mov	r3, r1
 800c048:	4313      	orrs	r3, r2
 800c04a:	d044      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c054:	2b05      	cmp	r3, #5
 800c056:	d825      	bhi.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c0ad 	.word	0x0800c0ad
 800c064:	0800c079 	.word	0x0800c079
 800c068:	0800c08f 	.word	0x0800c08f
 800c06c:	0800c0ad 	.word	0x0800c0ad
 800c070:	0800c0ad 	.word	0x0800c0ad
 800c074:	0800c0ad 	.word	0x0800c0ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c07c:	3308      	adds	r3, #8
 800c07e:	2101      	movs	r1, #1
 800c080:	4618      	mov	r0, r3
 800c082:	f001 fd25 	bl	800dad0 <RCCEx_PLL2_Config>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c08c:	e00f      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c092:	3328      	adds	r3, #40	; 0x28
 800c094:	2101      	movs	r1, #1
 800c096:	4618      	mov	r0, r3
 800c098:	f001 fdcc 	bl	800dc34 <RCCEx_PLL3_Config>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0a2:	e004      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c0aa:	e000      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10b      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0b6:	4b6c      	ldr	r3, [pc, #432]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ba:	f023 0107 	bic.w	r1, r3, #7
 800c0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c6:	4a68      	ldr	r2, [pc, #416]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0c8:	430b      	orrs	r3, r1
 800c0ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c0cc:	e003      	b.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f002 0320 	and.w	r3, r2, #32
 800c0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c0ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	d055      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c102:	d033      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c108:	d82c      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10e:	d02f      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c114:	d826      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c11a:	d02b      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c11c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c120:	d820      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c126:	d012      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12c:	d81a      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d022      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c136:	d115      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13c:	3308      	adds	r3, #8
 800c13e:	2100      	movs	r1, #0
 800c140:	4618      	mov	r0, r3
 800c142:	f001 fcc5 	bl	800dad0 <RCCEx_PLL2_Config>
 800c146:	4603      	mov	r3, r0
 800c148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c14c:	e015      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c152:	3328      	adds	r3, #40	; 0x28
 800c154:	2102      	movs	r1, #2
 800c156:	4618      	mov	r0, r3
 800c158:	f001 fd6c 	bl	800dc34 <RCCEx_PLL3_Config>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c162:	e00a      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c16a:	e006      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c16c:	bf00      	nop
 800c16e:	e004      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c170:	bf00      	nop
 800c172:	e002      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c174:	bf00      	nop
 800c176:	e000      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c17a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c182:	4b39      	ldr	r3, [pc, #228]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c186:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c192:	4a35      	ldr	r2, [pc, #212]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c194:	430b      	orrs	r3, r1
 800c196:	6553      	str	r3, [r2, #84]	; 0x54
 800c198:	e003      	b.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c19a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c19e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c1ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	d058      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1ce:	d033      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c1d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1d4:	d82c      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1da:	d02f      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e0:	d826      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1e6:	d02b      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c1e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1ec:	d820      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1f2:	d012      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c1f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1f8:	d81a      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d022      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c202:	d115      	bne.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c208:	3308      	adds	r3, #8
 800c20a:	2100      	movs	r1, #0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f001 fc5f 	bl	800dad0 <RCCEx_PLL2_Config>
 800c212:	4603      	mov	r3, r0
 800c214:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c218:	e015      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21e:	3328      	adds	r3, #40	; 0x28
 800c220:	2102      	movs	r1, #2
 800c222:	4618      	mov	r0, r3
 800c224:	f001 fd06 	bl	800dc34 <RCCEx_PLL3_Config>
 800c228:	4603      	mov	r3, r0
 800c22a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c22e:	e00a      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c236:	e006      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c238:	bf00      	nop
 800c23a:	e004      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c23c:	bf00      	nop
 800c23e:	e002      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c240:	bf00      	nop
 800c242:	e000      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10e      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c24e:	4b06      	ldr	r3, [pc, #24]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c252:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c25e:	4a02      	ldr	r2, [pc, #8]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c260:	430b      	orrs	r3, r1
 800c262:	6593      	str	r3, [r2, #88]	; 0x58
 800c264:	e006      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c266:	bf00      	nop
 800c268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c26c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c270:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c284:	2300      	movs	r3, #0
 800c286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c28a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c28e:	460b      	mov	r3, r1
 800c290:	4313      	orrs	r3, r2
 800c292:	d055      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c29c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c2a0:	d033      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c2a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c2a6:	d82c      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2ac:	d02f      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b2:	d826      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2b8:	d02b      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c2ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2be:	d820      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2c4:	d012      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c2c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2ca:	d81a      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d022      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2d4:	d115      	bne.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2da:	3308      	adds	r3, #8
 800c2dc:	2100      	movs	r1, #0
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 fbf6 	bl	800dad0 <RCCEx_PLL2_Config>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2ea:	e015      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f0:	3328      	adds	r3, #40	; 0x28
 800c2f2:	2102      	movs	r1, #2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f001 fc9d 	bl	800dc34 <RCCEx_PLL3_Config>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c300:	e00a      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c308:	e006      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c30a:	bf00      	nop
 800c30c:	e004      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c30e:	bf00      	nop
 800c310:	e002      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c312:	bf00      	nop
 800c314:	e000      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c316:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10b      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c320:	4ba0      	ldr	r3, [pc, #640]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c324:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c32c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c330:	4a9c      	ldr	r2, [pc, #624]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c332:	430b      	orrs	r3, r1
 800c334:	6593      	str	r3, [r2, #88]	; 0x58
 800c336:	e003      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c338:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c33c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f002 0308 	and.w	r3, r2, #8
 800c34c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c350:	2300      	movs	r3, #0
 800c352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c356:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c35a:	460b      	mov	r3, r1
 800c35c:	4313      	orrs	r3, r2
 800c35e:	d01e      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36c:	d10c      	bne.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c372:	3328      	adds	r3, #40	; 0x28
 800c374:	2102      	movs	r1, #2
 800c376:	4618      	mov	r0, r3
 800c378:	f001 fc5c 	bl	800dc34 <RCCEx_PLL3_Config>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c388:	4b86      	ldr	r3, [pc, #536]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c398:	4a82      	ldr	r2, [pc, #520]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c39a:	430b      	orrs	r3, r1
 800c39c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f002 0310 	and.w	r3, r2, #16
 800c3aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d01e      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ca:	d10c      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d0:	3328      	adds	r3, #40	; 0x28
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f001 fc2d 	bl	800dc34 <RCCEx_PLL3_Config>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3e6:	4b6f      	ldr	r3, [pc, #444]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3f6:	4a6b      	ldr	r2, [pc, #428]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c408:	67bb      	str	r3, [r7, #120]	; 0x78
 800c40a:	2300      	movs	r3, #0
 800c40c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c40e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c412:	460b      	mov	r3, r1
 800c414:	4313      	orrs	r3, r2
 800c416:	d03e      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c424:	d022      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c42a:	d81b      	bhi.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d003      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c434:	d00b      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c436:	e015      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c43c:	3308      	adds	r3, #8
 800c43e:	2100      	movs	r1, #0
 800c440:	4618      	mov	r0, r3
 800c442:	f001 fb45 	bl	800dad0 <RCCEx_PLL2_Config>
 800c446:	4603      	mov	r3, r0
 800c448:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c44c:	e00f      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c452:	3328      	adds	r3, #40	; 0x28
 800c454:	2102      	movs	r1, #2
 800c456:	4618      	mov	r0, r3
 800c458:	f001 fbec 	bl	800dc34 <RCCEx_PLL3_Config>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c462:	e004      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c46a:	e000      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c46c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c46e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10b      	bne.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c476:	4b4b      	ldr	r3, [pc, #300]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c486:	4a47      	ldr	r2, [pc, #284]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c488:	430b      	orrs	r3, r1
 800c48a:	6593      	str	r3, [r2, #88]	; 0x58
 800c48c:	e003      	b.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c48e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c492:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c4a2:	673b      	str	r3, [r7, #112]	; 0x70
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	677b      	str	r3, [r7, #116]	; 0x74
 800c4a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	d03b      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4be:	d01f      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4c4:	d818      	bhi.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c4c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4ca:	d003      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c4cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4d0:	d007      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c4d2:	e011      	b.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4d4:	4b33      	ldr	r3, [pc, #204]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d8:	4a32      	ldr	r2, [pc, #200]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4e0:	e00f      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e6:	3328      	adds	r3, #40	; 0x28
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f001 fba2 	bl	800dc34 <RCCEx_PLL3_Config>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4f6:	e004      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4fe:	e000      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c502:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10b      	bne.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c50a:	4b26      	ldr	r3, [pc, #152]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c50e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c51a:	4a22      	ldr	r2, [pc, #136]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c51c:	430b      	orrs	r3, r1
 800c51e:	6553      	str	r3, [r2, #84]	; 0x54
 800c520:	e003      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c522:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c526:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c536:	66bb      	str	r3, [r7, #104]	; 0x68
 800c538:	2300      	movs	r3, #0
 800c53a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c53c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c540:	460b      	mov	r3, r1
 800c542:	4313      	orrs	r3, r2
 800c544:	d034      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c554:	d007      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c556:	e011      	b.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c558:	4b12      	ldr	r3, [pc, #72]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55c:	4a11      	ldr	r2, [pc, #68]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c564:	e00e      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c56a:	3308      	adds	r3, #8
 800c56c:	2102      	movs	r1, #2
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 faae 	bl	800dad0 <RCCEx_PLL2_Config>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c57a:	e003      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c582:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10d      	bne.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c58c:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59a:	4a02      	ldr	r2, [pc, #8]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c59c:	430b      	orrs	r3, r1
 800c59e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5a0:	e006      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c5a2:	bf00      	nop
 800c5a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c5bc:	663b      	str	r3, [r7, #96]	; 0x60
 800c5be:	2300      	movs	r3, #0
 800c5c0:	667b      	str	r3, [r7, #100]	; 0x64
 800c5c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	d00c      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d0:	3328      	adds	r3, #40	; 0x28
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f001 fb2d 	bl	800dc34 <RCCEx_PLL3_Config>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c5f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4313      	orrs	r3, r2
 800c600:	d036      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c60c:	d018      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c60e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c612:	d811      	bhi.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c618:	d014      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c61a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c61e:	d80b      	bhi.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c620:	2b00      	cmp	r3, #0
 800c622:	d011      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c628:	d106      	bne.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c62a:	4bb7      	ldr	r3, [pc, #732]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62e:	4ab6      	ldr	r2, [pc, #728]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c636:	e008      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c63e:	e004      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c640:	bf00      	nop
 800c642:	e002      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c644:	bf00      	nop
 800c646:	e000      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c64a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c652:	4bad      	ldr	r3, [pc, #692]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c65e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c660:	4aa9      	ldr	r2, [pc, #676]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c662:	430b      	orrs	r3, r1
 800c664:	6553      	str	r3, [r2, #84]	; 0x54
 800c666:	e003      	b.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c66c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c67c:	653b      	str	r3, [r7, #80]	; 0x50
 800c67e:	2300      	movs	r3, #0
 800c680:	657b      	str	r3, [r7, #84]	; 0x54
 800c682:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c686:	460b      	mov	r3, r1
 800c688:	4313      	orrs	r3, r2
 800c68a:	d009      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c68c:	4b9e      	ldr	r3, [pc, #632]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c69a:	4a9b      	ldr	r2, [pc, #620]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c69c:	430b      	orrs	r3, r1
 800c69e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c6ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	d009      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6bc:	4b92      	ldr	r3, [pc, #584]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6ca:	4a8f      	ldr	r2, [pc, #572]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c6dc:	643b      	str	r3, [r7, #64]	; 0x40
 800c6de:	2300      	movs	r3, #0
 800c6e0:	647b      	str	r3, [r7, #68]	; 0x44
 800c6e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	d00e      	beq.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6ec:	4b86      	ldr	r3, [pc, #536]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	4a85      	ldr	r2, [pc, #532]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6f6:	6113      	str	r3, [r2, #16]
 800c6f8:	4b83      	ldr	r3, [pc, #524]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6fa:	6919      	ldr	r1, [r3, #16]
 800c6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c704:	4a80      	ldr	r2, [pc, #512]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c706:	430b      	orrs	r3, r1
 800c708:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c716:	63bb      	str	r3, [r7, #56]	; 0x38
 800c718:	2300      	movs	r3, #0
 800c71a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c720:	460b      	mov	r3, r1
 800c722:	4313      	orrs	r3, r2
 800c724:	d009      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c726:	4b78      	ldr	r3, [pc, #480]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c72a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c734:	4a74      	ldr	r2, [pc, #464]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c736:	430b      	orrs	r3, r1
 800c738:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c746:	633b      	str	r3, [r7, #48]	; 0x30
 800c748:	2300      	movs	r3, #0
 800c74a:	637b      	str	r3, [r7, #52]	; 0x34
 800c74c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c750:	460b      	mov	r3, r1
 800c752:	4313      	orrs	r3, r2
 800c754:	d00a      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c756:	4b6c      	ldr	r3, [pc, #432]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c75a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c766:	4a68      	ldr	r2, [pc, #416]	; (800c908 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c768:	430b      	orrs	r3, r1
 800c76a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	2100      	movs	r1, #0
 800c776:	62b9      	str	r1, [r7, #40]	; 0x28
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c77e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c782:	460b      	mov	r3, r1
 800c784:	4313      	orrs	r3, r2
 800c786:	d011      	beq.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c78c:	3308      	adds	r3, #8
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f001 f99d 	bl	800dad0 <RCCEx_PLL2_Config>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c79c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d003      	beq.n	800c7ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	6239      	str	r1, [r7, #32]
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c7be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	d011      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	2101      	movs	r1, #1
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f001 f97d 	bl	800dad0 <RCCEx_PLL2_Config>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c7dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	61b9      	str	r1, [r7, #24]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	61fb      	str	r3, [r7, #28]
 800c7fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c802:	460b      	mov	r3, r1
 800c804:	4313      	orrs	r3, r2
 800c806:	d011      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c80c:	3308      	adds	r3, #8
 800c80e:	2102      	movs	r1, #2
 800c810:	4618      	mov	r0, r3
 800c812:	f001 f95d 	bl	800dad0 <RCCEx_PLL2_Config>
 800c816:	4603      	mov	r3, r0
 800c818:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c81c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c820:	2b00      	cmp	r3, #0
 800c822:	d003      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c828:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	2100      	movs	r1, #0
 800c836:	6139      	str	r1, [r7, #16]
 800c838:	f003 0308 	and.w	r3, r3, #8
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c842:	460b      	mov	r3, r1
 800c844:	4313      	orrs	r3, r2
 800c846:	d011      	beq.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c84c:	3328      	adds	r3, #40	; 0x28
 800c84e:	2100      	movs	r1, #0
 800c850:	4618      	mov	r0, r3
 800c852:	f001 f9ef 	bl	800dc34 <RCCEx_PLL3_Config>
 800c856:	4603      	mov	r3, r0
 800c858:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c85c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c868:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	2100      	movs	r1, #0
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c882:	460b      	mov	r3, r1
 800c884:	4313      	orrs	r3, r2
 800c886:	d011      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88c:	3328      	adds	r3, #40	; 0x28
 800c88e:	2101      	movs	r1, #1
 800c890:	4618      	mov	r0, r3
 800c892:	f001 f9cf 	bl	800dc34 <RCCEx_PLL3_Config>
 800c896:	4603      	mov	r3, r0
 800c898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c89c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6039      	str	r1, [r7, #0]
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	607b      	str	r3, [r7, #4]
 800c8be:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	d011      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8cc:	3328      	adds	r3, #40	; 0x28
 800c8ce:	2102      	movs	r1, #2
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f001 f9af 	bl	800dc34 <RCCEx_PLL3_Config>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c8dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c8ec:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e000      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c900:	46bd      	mov	sp, r7
 800c902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c906:	bf00      	nop
 800c908:	58024400 	.word	0x58024400

0800c90c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b090      	sub	sp, #64	; 0x40
 800c910:	af00      	add	r7, sp, #0
 800c912:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c91a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c91e:	430b      	orrs	r3, r1
 800c920:	f040 8094 	bne.w	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c924:	4b9b      	ldr	r3, [pc, #620]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c928:	f003 0307 	and.w	r3, r3, #7
 800c92c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	2b04      	cmp	r3, #4
 800c932:	f200 8087 	bhi.w	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c936:	a201      	add	r2, pc, #4	; (adr r2, 800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93c:	0800c951 	.word	0x0800c951
 800c940:	0800c979 	.word	0x0800c979
 800c944:	0800c9a1 	.word	0x0800c9a1
 800c948:	0800ca3d 	.word	0x0800ca3d
 800c94c:	0800c9c9 	.word	0x0800c9c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c950:	4b90      	ldr	r3, [pc, #576]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c95c:	d108      	bne.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c95e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c962:	4618      	mov	r0, r3
 800c964:	f000 ff62 	bl	800d82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96c:	f000 bc93 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c974:	f000 bc8f 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c978:	4b86      	ldr	r3, [pc, #536]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c984:	d108      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c986:	f107 0318 	add.w	r3, r7, #24
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 fca6 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c994:	f000 bc7f 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99c:	f000 bc7b 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9a0:	4b7c      	ldr	r3, [pc, #496]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ac:	d108      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ae:	f107 030c 	add.w	r3, r7, #12
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fde6 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9bc:	f000 bc6b 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c4:	f000 bc67 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9c8:	4b72      	ldr	r3, [pc, #456]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9d2:	4b70      	ldr	r3, [pc, #448]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d10c      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d109      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9e4:	4b6b      	ldr	r3, [pc, #428]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	08db      	lsrs	r3, r3, #3
 800c9ea:	f003 0303 	and.w	r3, r3, #3
 800c9ee:	4a6a      	ldr	r2, [pc, #424]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9f6:	e01f      	b.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9f8:	4b66      	ldr	r3, [pc, #408]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca04:	d106      	bne.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca0c:	d102      	bne.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca0e:	4b63      	ldr	r3, [pc, #396]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca12:	e011      	b.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca14:	4b5f      	ldr	r3, [pc, #380]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca20:	d106      	bne.n	800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ca22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca28:	d102      	bne.n	800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca2a:	4b5d      	ldr	r3, [pc, #372]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca2e:	e003      	b.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca34:	f000 bc2f 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca38:	f000 bc2d 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca3c:	4b59      	ldr	r3, [pc, #356]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca40:	f000 bc29 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca48:	f000 bc25 	b.w	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ca4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca50:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ca54:	430b      	orrs	r3, r1
 800ca56:	f040 80a7 	bne.w	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ca5a:	4b4e      	ldr	r3, [pc, #312]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ca62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca6a:	d054      	beq.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca72:	f200 808b 	bhi.w	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ca7c:	f000 8083 	beq.w	800cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ca86:	f200 8081 	bhi.w	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca90:	d02f      	beq.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca98:	d878      	bhi.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d004      	beq.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800caa6:	d012      	beq.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800caa8:	e070      	b.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800caaa:	4b3a      	ldr	r3, [pc, #232]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cab6:	d107      	bne.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 feb5 	bl	800d82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac6:	e3e6      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cacc:	e3e3      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cace:	4b31      	ldr	r3, [pc, #196]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cada:	d107      	bne.n	800caec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cadc:	f107 0318 	add.w	r3, r7, #24
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fbfb 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caea:	e3d4      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf0:	e3d1      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caf2:	4b28      	ldr	r3, [pc, #160]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cafa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cafe:	d107      	bne.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb00:	f107 030c 	add.w	r3, r7, #12
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 fd3d 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb0e:	e3c2      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb14:	e3bf      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb16:	4b1f      	ldr	r3, [pc, #124]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb20:	4b1c      	ldr	r3, [pc, #112]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	2b04      	cmp	r3, #4
 800cb2a:	d10c      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d109      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb32:	4b18      	ldr	r3, [pc, #96]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	08db      	lsrs	r3, r3, #3
 800cb38:	f003 0303 	and.w	r3, r3, #3
 800cb3c:	4a16      	ldr	r2, [pc, #88]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb44:	e01e      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb46:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb52:	d106      	bne.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb5a:	d102      	bne.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb60:	e010      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb62:	4b0c      	ldr	r3, [pc, #48]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb6e:	d106      	bne.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb76:	d102      	bne.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb78:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb7c:	e002      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb82:	e388      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb84:	e387      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb86:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8a:	e384      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb90:	e381      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb92:	bf00      	nop
 800cb94:	58024400 	.word	0x58024400
 800cb98:	03d09000 	.word	0x03d09000
 800cb9c:	003d0900 	.word	0x003d0900
 800cba0:	02faf080 	.word	0x02faf080
 800cba4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbac:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cbb0:	430b      	orrs	r3, r1
 800cbb2:	f040 809c 	bne.w	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cbb6:	4b9e      	ldr	r3, [pc, #632]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cbbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbc6:	d054      	beq.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbce:	f200 808b 	bhi.w	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cbd8:	f000 8083 	beq.w	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cbe2:	f200 8081 	bhi.w	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbec:	d02f      	beq.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbf4:	d878      	bhi.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d004      	beq.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc02:	d012      	beq.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cc04:	e070      	b.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc06:	4b8a      	ldr	r3, [pc, #552]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc12:	d107      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 fe07 	bl	800d82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc22:	e338      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc28:	e335      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc2a:	4b81      	ldr	r3, [pc, #516]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc36:	d107      	bne.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc38:	f107 0318 	add.w	r3, r7, #24
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 fb4d 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc46:	e326      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4c:	e323      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc4e:	4b78      	ldr	r3, [pc, #480]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc5a:	d107      	bne.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc5c:	f107 030c 	add.w	r3, r7, #12
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 fc8f 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6a:	e314      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc70:	e311      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc72:	4b6f      	ldr	r3, [pc, #444]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc7c:	4b6c      	ldr	r3, [pc, #432]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d10c      	bne.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d109      	bne.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc8e:	4b68      	ldr	r3, [pc, #416]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	08db      	lsrs	r3, r3, #3
 800cc94:	f003 0303 	and.w	r3, r3, #3
 800cc98:	4a66      	ldr	r2, [pc, #408]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cc9a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca0:	e01e      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cca2:	4b63      	ldr	r3, [pc, #396]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccae:	d106      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccb6:	d102      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccb8:	4b5f      	ldr	r3, [pc, #380]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ccba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccbc:	e010      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccbe:	4b5c      	ldr	r3, [pc, #368]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccca:	d106      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccd2:	d102      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccd4:	4b59      	ldr	r3, [pc, #356]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccd8:	e002      	b.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ccde:	e2da      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cce0:	e2d9      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cce2:	4b57      	ldr	r3, [pc, #348]	; (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce6:	e2d6      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccec:	e2d3      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ccee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ccf6:	430b      	orrs	r3, r1
 800ccf8:	f040 80a7 	bne.w	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ccfc:	4b4c      	ldr	r3, [pc, #304]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cd04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd0c:	d055      	beq.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd14:	f200 8096 	bhi.w	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd1e:	f000 8084 	beq.w	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd28:	f200 808c 	bhi.w	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd32:	d030      	beq.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd3a:	f200 8083 	bhi.w	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d004      	beq.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd4a:	d012      	beq.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cd4c:	e07a      	b.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd4e:	4b38      	ldr	r3, [pc, #224]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd5a:	d107      	bne.n	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 fd63 	bl	800d82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd6a:	e294      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd70:	e291      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd72:	4b2f      	ldr	r3, [pc, #188]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd7e:	d107      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd80:	f107 0318 	add.w	r3, r7, #24
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 faa9 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8e:	e282      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd94:	e27f      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd96:	4b26      	ldr	r3, [pc, #152]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda2:	d107      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cda4:	f107 030c 	add.w	r3, r7, #12
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fbeb 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb2:	e270      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e26d      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdba:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdc4:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	d10c      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d109      	bne.n	800cdea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdd6:	4b16      	ldr	r3, [pc, #88]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	08db      	lsrs	r3, r3, #3
 800cddc:	f003 0303 	and.w	r3, r3, #3
 800cde0:	4a14      	ldr	r2, [pc, #80]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cde2:	fa22 f303 	lsr.w	r3, r2, r3
 800cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cde8:	e01e      	b.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdea:	4b11      	ldr	r3, [pc, #68]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdf6:	d106      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdfe:	d102      	bne.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce00:	4b0d      	ldr	r3, [pc, #52]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce04:	e010      	b.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce06:	4b0a      	ldr	r3, [pc, #40]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce12:	d106      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ce14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1a:	d102      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce1c:	4b07      	ldr	r3, [pc, #28]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce20:	e002      	b.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce26:	e236      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce28:	e235      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce2a:	4b05      	ldr	r3, [pc, #20]	; (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce2e:	e232      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce30:	58024400 	.word	0x58024400
 800ce34:	03d09000 	.word	0x03d09000
 800ce38:	003d0900 	.word	0x003d0900
 800ce3c:	02faf080 	.word	0x02faf080
 800ce40:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce48:	e225      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ce4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce4e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ce52:	430b      	orrs	r3, r1
 800ce54:	f040 8085 	bne.w	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ce58:	4b9c      	ldr	r3, [pc, #624]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce5c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ce60:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce68:	d06b      	beq.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce70:	d874      	bhi.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ce78:	d056      	beq.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ce80:	d86c      	bhi.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ce88:	d03b      	beq.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ce90:	d864      	bhi.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce98:	d021      	beq.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cea0:	d85c      	bhi.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceae:	d004      	beq.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800ceb0:	e054      	b.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ceb2:	f7fe fb5f 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 800ceb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ceb8:	e1ed      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ceba:	4b84      	ldr	r3, [pc, #528]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec6:	d107      	bne.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cec8:	f107 0318 	add.w	r3, r7, #24
 800cecc:	4618      	mov	r0, r3
 800cece:	f000 fa05 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced6:	e1de      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cedc:	e1db      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cede:	4b7b      	ldr	r3, [pc, #492]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ceea:	d107      	bne.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceec:	f107 030c 	add.w	r3, r7, #12
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 fb47 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cefa:	e1cc      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf00:	e1c9      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf02:	4b72      	ldr	r3, [pc, #456]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b04      	cmp	r3, #4
 800cf0c:	d109      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf0e:	4b6f      	ldr	r3, [pc, #444]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	08db      	lsrs	r3, r3, #3
 800cf14:	f003 0303 	and.w	r3, r3, #3
 800cf18:	4a6d      	ldr	r2, [pc, #436]	; (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cf1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf20:	e1b9      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf26:	e1b6      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf28:	4b68      	ldr	r3, [pc, #416]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf34:	d102      	bne.n	800cf3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cf36:	4b67      	ldr	r3, [pc, #412]	; (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cf38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf3a:	e1ac      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf40:	e1a9      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf42:	4b62      	ldr	r3, [pc, #392]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf4e:	d102      	bne.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cf50:	4b61      	ldr	r3, [pc, #388]	; (800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf54:	e19f      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e19c      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf60:	e199      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cf62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf66:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cf6a:	430b      	orrs	r3, r1
 800cf6c:	d173      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cf6e:	4b57      	ldr	r3, [pc, #348]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cf76:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf7e:	d02f      	beq.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf86:	d863      	bhi.n	800d050 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d004      	beq.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf94:	d012      	beq.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cf96:	e05b      	b.n	800d050 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf98:	4b4c      	ldr	r3, [pc, #304]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfa4:	d107      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfa6:	f107 0318 	add.w	r3, r7, #24
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 f996 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb4:	e16f      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfba:	e16c      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfbc:	4b43      	ldr	r3, [pc, #268]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfc8:	d107      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fad8 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfd8:	e15d      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfde:	e15a      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cfe0:	4b3a      	ldr	r3, [pc, #232]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cfe8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfea:	4b38      	ldr	r3, [pc, #224]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 0304 	and.w	r3, r3, #4
 800cff2:	2b04      	cmp	r3, #4
 800cff4:	d10c      	bne.n	800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d109      	bne.n	800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cffc:	4b33      	ldr	r3, [pc, #204]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	08db      	lsrs	r3, r3, #3
 800d002:	f003 0303 	and.w	r3, r3, #3
 800d006:	4a32      	ldr	r2, [pc, #200]	; (800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d008:	fa22 f303 	lsr.w	r3, r2, r3
 800d00c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d00e:	e01e      	b.n	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d010:	4b2e      	ldr	r3, [pc, #184]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d01c:	d106      	bne.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d024:	d102      	bne.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d026:	4b2b      	ldr	r3, [pc, #172]	; (800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02a:	e010      	b.n	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d02c:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d038:	d106      	bne.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d040:	d102      	bne.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d042:	4b25      	ldr	r3, [pc, #148]	; (800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d046:	e002      	b.n	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d048:	2300      	movs	r3, #0
 800d04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d04c:	e123      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d04e:	e122      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d054:	e11f      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d05a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d05e:	430b      	orrs	r3, r1
 800d060:	d13c      	bne.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d062:	4b1a      	ldr	r3, [pc, #104]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d06a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d004      	beq.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d078:	d012      	beq.n	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d07a:	e023      	b.n	800d0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d07c:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d088:	d107      	bne.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d08a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 fbcc 	bl	800d82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d098:	e0fd      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d09e:	e0fa      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	; (800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0ac:	d107      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ae:	f107 0318 	add.w	r3, r7, #24
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f912 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d0b8:	6a3b      	ldr	r3, [r7, #32]
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0bc:	e0eb      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c2:	e0e8      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0c8:	e0e5      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0ca:	bf00      	nop
 800d0cc:	58024400 	.word	0x58024400
 800d0d0:	03d09000 	.word	0x03d09000
 800d0d4:	003d0900 	.word	0x003d0900
 800d0d8:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	f040 8085 	bne.w	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d0ea:	4b6d      	ldr	r3, [pc, #436]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d0f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0fa:	d06b      	beq.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d102:	d874      	bhi.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d10a:	d056      	beq.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d112:	d86c      	bhi.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d11a:	d03b      	beq.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d122:	d864      	bhi.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d12a:	d021      	beq.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d132:	d85c      	bhi.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	2b00      	cmp	r3, #0
 800d138:	d004      	beq.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d140:	d004      	beq.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d142:	e054      	b.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d144:	f000 f8b4 	bl	800d2b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d148:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d14a:	e0a4      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d14c:	4b54      	ldr	r3, [pc, #336]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d158:	d107      	bne.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d15a:	f107 0318 	add.w	r3, r7, #24
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 f8bc 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d168:	e095      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d16e:	e092      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d170:	4b4b      	ldr	r3, [pc, #300]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d17c:	d107      	bne.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d17e:	f107 030c 	add.w	r3, r7, #12
 800d182:	4618      	mov	r0, r3
 800d184:	f000 f9fe 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d18c:	e083      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d192:	e080      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d194:	4b42      	ldr	r3, [pc, #264]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b04      	cmp	r3, #4
 800d19e:	d109      	bne.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1a0:	4b3f      	ldr	r3, [pc, #252]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	08db      	lsrs	r3, r3, #3
 800d1a6:	f003 0303 	and.w	r3, r3, #3
 800d1aa:	4a3e      	ldr	r2, [pc, #248]	; (800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d1ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1b2:	e070      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1b8:	e06d      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d1ba:	4b39      	ldr	r3, [pc, #228]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1c6:	d102      	bne.n	800d1ce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d1c8:	4b37      	ldr	r3, [pc, #220]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1cc:	e063      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d2:	e060      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1d4:	4b32      	ldr	r3, [pc, #200]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1e0:	d102      	bne.n	800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d1e2:	4b32      	ldr	r3, [pc, #200]	; (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1e6:	e056      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ec:	e053      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1f2:	e050      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1f8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d1fc:	430b      	orrs	r3, r1
 800d1fe:	d148      	bne.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d200:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d208:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d210:	d02a      	beq.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d218:	d838      	bhi.n	800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d226:	d00d      	beq.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d228:	e030      	b.n	800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d22a:	4b1d      	ldr	r3, [pc, #116]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d236:	d102      	bne.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d238:	4b1c      	ldr	r3, [pc, #112]	; (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d23c:	e02b      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d242:	e028      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d244:	4b16      	ldr	r3, [pc, #88]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d24c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d250:	d107      	bne.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d256:	4618      	mov	r0, r3
 800d258:	f000 fae8 	bl	800d82c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d260:	e019      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d266:	e016      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d268:	4b0d      	ldr	r3, [pc, #52]	; (800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d274:	d107      	bne.n	800d286 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d276:	f107 0318 	add.w	r3, r7, #24
 800d27a:	4618      	mov	r0, r3
 800d27c:	f000 f82e 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d284:	e007      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28a:	e004      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d290:	e001      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3740      	adds	r7, #64	; 0x40
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	58024400 	.word	0x58024400
 800d2a4:	03d09000 	.word	0x03d09000
 800d2a8:	003d0900 	.word	0x003d0900
 800d2ac:	02faf080 	.word	0x02faf080

0800d2b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d2b4:	f7fe f92e 	bl	800b514 <HAL_RCC_GetHCLKFreq>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	4b06      	ldr	r3, [pc, #24]	; (800d2d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	091b      	lsrs	r3, r3, #4
 800d2c0:	f003 0307 	and.w	r3, r3, #7
 800d2c4:	4904      	ldr	r1, [pc, #16]	; (800d2d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d2c6:	5ccb      	ldrb	r3, [r1, r3]
 800d2c8:	f003 031f 	and.w	r3, r3, #31
 800d2cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	58024400 	.word	0x58024400
 800d2d8:	0801f6e4 	.word	0x0801f6e4

0800d2dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b089      	sub	sp, #36	; 0x24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2e4:	4ba1      	ldr	r3, [pc, #644]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e8:	f003 0303 	and.w	r3, r3, #3
 800d2ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d2ee:	4b9f      	ldr	r3, [pc, #636]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f2:	0b1b      	lsrs	r3, r3, #12
 800d2f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d2fa:	4b9c      	ldr	r3, [pc, #624]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fe:	091b      	lsrs	r3, r3, #4
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d306:	4b99      	ldr	r3, [pc, #612]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30a:	08db      	lsrs	r3, r3, #3
 800d30c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	fb02 f303 	mul.w	r3, r2, r3
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 8111 	beq.w	800d54c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	f000 8083 	beq.w	800d438 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	2b02      	cmp	r3, #2
 800d336:	f200 80a1 	bhi.w	800d47c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d003      	beq.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d056      	beq.n	800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d346:	e099      	b.n	800d47c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d348:	4b88      	ldr	r3, [pc, #544]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0320 	and.w	r3, r3, #32
 800d350:	2b00      	cmp	r3, #0
 800d352:	d02d      	beq.n	800d3b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d354:	4b85      	ldr	r3, [pc, #532]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	08db      	lsrs	r3, r3, #3
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	4a84      	ldr	r2, [pc, #528]	; (800d570 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d360:	fa22 f303 	lsr.w	r3, r2, r3
 800d364:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	ee07 3a90 	vmov	s15, r3
 800d36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d37e:	4b7b      	ldr	r3, [pc, #492]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	ee07 3a90 	vmov	s15, r3
 800d38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d38e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d392:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3ae:	e087      	b.n	800d4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d578 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3c2:	4b6a      	ldr	r3, [pc, #424]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ca:	ee07 3a90 	vmov	s15, r3
 800d3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3f2:	e065      	b.n	800d4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	ee07 3a90 	vmov	s15, r3
 800d3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d406:	4b59      	ldr	r3, [pc, #356]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40e:	ee07 3a90 	vmov	s15, r3
 800d412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d416:	ed97 6a03 	vldr	s12, [r7, #12]
 800d41a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d436:	e043      	b.n	800d4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	ee07 3a90 	vmov	s15, r3
 800d43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d442:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d44a:	4b48      	ldr	r3, [pc, #288]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d452:	ee07 3a90 	vmov	s15, r3
 800d456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d45e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d47a:	e021      	b.n	800d4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	ee07 3a90 	vmov	s15, r3
 800d482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d486:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d48e:	4b37      	ldr	r3, [pc, #220]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d574 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d4c0:	4b2a      	ldr	r3, [pc, #168]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c4:	0a5b      	lsrs	r3, r3, #9
 800d4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4e6:	ee17 2a90 	vmov	r2, s15
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d4ee:	4b1f      	ldr	r3, [pc, #124]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	0c1b      	lsrs	r3, r3, #16
 800d4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f8:	ee07 3a90 	vmov	s15, r3
 800d4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d504:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d508:	edd7 6a07 	vldr	s13, [r7, #28]
 800d50c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d514:	ee17 2a90 	vmov	r2, s15
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d51c:	4b13      	ldr	r3, [pc, #76]	; (800d56c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d520:	0e1b      	lsrs	r3, r3, #24
 800d522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d526:	ee07 3a90 	vmov	s15, r3
 800d52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d532:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d536:	edd7 6a07 	vldr	s13, [r7, #28]
 800d53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d542:	ee17 2a90 	vmov	r2, s15
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d54a:	e008      	b.n	800d55e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	609a      	str	r2, [r3, #8]
}
 800d55e:	bf00      	nop
 800d560:	3724      	adds	r7, #36	; 0x24
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	58024400 	.word	0x58024400
 800d570:	03d09000 	.word	0x03d09000
 800d574:	46000000 	.word	0x46000000
 800d578:	4c742400 	.word	0x4c742400
 800d57c:	4a742400 	.word	0x4a742400
 800d580:	4c3ebc20 	.word	0x4c3ebc20

0800d584 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d584:	b480      	push	{r7}
 800d586:	b089      	sub	sp, #36	; 0x24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d58c:	4ba1      	ldr	r3, [pc, #644]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d596:	4b9f      	ldr	r3, [pc, #636]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59a:	0d1b      	lsrs	r3, r3, #20
 800d59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d5a2:	4b9c      	ldr	r3, [pc, #624]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a6:	0a1b      	lsrs	r3, r3, #8
 800d5a8:	f003 0301 	and.w	r3, r3, #1
 800d5ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d5ae:	4b99      	ldr	r3, [pc, #612]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5b2:	08db      	lsrs	r3, r3, #3
 800d5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5b8:	693a      	ldr	r2, [r7, #16]
 800d5ba:	fb02 f303 	mul.w	r3, r2, r3
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 8111 	beq.w	800d7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	2b02      	cmp	r3, #2
 800d5d6:	f000 8083 	beq.w	800d6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	f200 80a1 	bhi.w	800d724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d003      	beq.n	800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d056      	beq.n	800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d5ee:	e099      	b.n	800d724 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5f0:	4b88      	ldr	r3, [pc, #544]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 0320 	and.w	r3, r3, #32
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d02d      	beq.n	800d658 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5fc:	4b85      	ldr	r3, [pc, #532]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	08db      	lsrs	r3, r3, #3
 800d602:	f003 0303 	and.w	r3, r3, #3
 800d606:	4a84      	ldr	r2, [pc, #528]	; (800d818 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d608:	fa22 f303 	lsr.w	r3, r2, r3
 800d60c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	ee07 3a90 	vmov	s15, r3
 800d61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d626:	4b7b      	ldr	r3, [pc, #492]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d62e:	ee07 3a90 	vmov	s15, r3
 800d632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d636:	ed97 6a03 	vldr	s12, [r7, #12]
 800d63a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d656:	e087      	b.n	800d768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	ee07 3a90 	vmov	s15, r3
 800d65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d662:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d820 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d66a:	4b6a      	ldr	r3, [pc, #424]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d672:	ee07 3a90 	vmov	s15, r3
 800d676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d67e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d69a:	e065      	b.n	800d768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	ee07 3a90 	vmov	s15, r3
 800d6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ae:	4b59      	ldr	r3, [pc, #356]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b6:	ee07 3a90 	vmov	s15, r3
 800d6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6de:	e043      	b.n	800d768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	ee07 3a90 	vmov	s15, r3
 800d6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f2:	4b48      	ldr	r3, [pc, #288]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d702:	ed97 6a03 	vldr	s12, [r7, #12]
 800d706:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d71e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d722:	e021      	b.n	800d768 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	ee07 3a90 	vmov	s15, r3
 800d72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d72e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d736:	4b37      	ldr	r3, [pc, #220]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73e:	ee07 3a90 	vmov	s15, r3
 800d742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d746:	ed97 6a03 	vldr	s12, [r7, #12]
 800d74a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d81c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d766:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d768:	4b2a      	ldr	r3, [pc, #168]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76c:	0a5b      	lsrs	r3, r3, #9
 800d76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d77e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d782:	edd7 6a07 	vldr	s13, [r7, #28]
 800d786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d78a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d78e:	ee17 2a90 	vmov	r2, s15
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d796:	4b1f      	ldr	r3, [pc, #124]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	0c1b      	lsrs	r3, r3, #16
 800d79c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7a0:	ee07 3a90 	vmov	s15, r3
 800d7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7bc:	ee17 2a90 	vmov	r2, s15
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d7c4:	4b13      	ldr	r3, [pc, #76]	; (800d814 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c8:	0e1b      	lsrs	r3, r3, #24
 800d7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ce:	ee07 3a90 	vmov	s15, r3
 800d7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ea:	ee17 2a90 	vmov	r2, s15
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d7f2:	e008      	b.n	800d806 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	609a      	str	r2, [r3, #8]
}
 800d806:	bf00      	nop
 800d808:	3724      	adds	r7, #36	; 0x24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	58024400 	.word	0x58024400
 800d818:	03d09000 	.word	0x03d09000
 800d81c:	46000000 	.word	0x46000000
 800d820:	4c742400 	.word	0x4c742400
 800d824:	4a742400 	.word	0x4a742400
 800d828:	4c3ebc20 	.word	0x4c3ebc20

0800d82c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b089      	sub	sp, #36	; 0x24
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d834:	4ba0      	ldr	r3, [pc, #640]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d838:	f003 0303 	and.w	r3, r3, #3
 800d83c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d83e:	4b9e      	ldr	r3, [pc, #632]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d842:	091b      	lsrs	r3, r3, #4
 800d844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d848:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d84a:	4b9b      	ldr	r3, [pc, #620]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d854:	4b98      	ldr	r3, [pc, #608]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d858:	08db      	lsrs	r3, r3, #3
 800d85a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	fb02 f303 	mul.w	r3, r2, r3
 800d864:	ee07 3a90 	vmov	s15, r3
 800d868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 8111 	beq.w	800da9a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	f000 8083 	beq.w	800d986 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	2b02      	cmp	r3, #2
 800d884:	f200 80a1 	bhi.w	800d9ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d056      	beq.n	800d942 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d894:	e099      	b.n	800d9ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d896:	4b88      	ldr	r3, [pc, #544]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 0320 	and.w	r3, r3, #32
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d02d      	beq.n	800d8fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8a2:	4b85      	ldr	r3, [pc, #532]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	08db      	lsrs	r3, r3, #3
 800d8a8:	f003 0303 	and.w	r3, r3, #3
 800d8ac:	4a83      	ldr	r2, [pc, #524]	; (800dabc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d8b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	ee07 3a90 	vmov	s15, r3
 800d8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	ee07 3a90 	vmov	s15, r3
 800d8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8cc:	4b7a      	ldr	r3, [pc, #488]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8d4:	ee07 3a90 	vmov	s15, r3
 800d8d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d8fc:	e087      	b.n	800da0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	ee07 3a90 	vmov	s15, r3
 800d904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d908:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dac4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d90c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d910:	4b69      	ldr	r3, [pc, #420]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d918:	ee07 3a90 	vmov	s15, r3
 800d91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d920:	ed97 6a03 	vldr	s12, [r7, #12]
 800d924:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d92c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d93c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d940:	e065      	b.n	800da0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	ee07 3a90 	vmov	s15, r3
 800d948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d94c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dac8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d954:	4b58      	ldr	r3, [pc, #352]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d95c:	ee07 3a90 	vmov	s15, r3
 800d960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d964:	ed97 6a03 	vldr	s12, [r7, #12]
 800d968:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d980:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d984:	e043      	b.n	800da0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	ee07 3a90 	vmov	s15, r3
 800d98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d990:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dacc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d998:	4b47      	ldr	r3, [pc, #284]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a0:	ee07 3a90 	vmov	s15, r3
 800d9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9c8:	e021      	b.n	800da0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	ee07 3a90 	vmov	s15, r3
 800d9d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dac4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9dc:	4b36      	ldr	r3, [pc, #216]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e4:	ee07 3a90 	vmov	s15, r3
 800d9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dac0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da0c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da0e:	4b2a      	ldr	r3, [pc, #168]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da12:	0a5b      	lsrs	r3, r3, #9
 800da14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da18:	ee07 3a90 	vmov	s15, r3
 800da1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da28:	edd7 6a07 	vldr	s13, [r7, #28]
 800da2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da34:	ee17 2a90 	vmov	r2, s15
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da3c:	4b1e      	ldr	r3, [pc, #120]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da40:	0c1b      	lsrs	r3, r3, #16
 800da42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da46:	ee07 3a90 	vmov	s15, r3
 800da4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da56:	edd7 6a07 	vldr	s13, [r7, #28]
 800da5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da62:	ee17 2a90 	vmov	r2, s15
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800da6a:	4b13      	ldr	r3, [pc, #76]	; (800dab8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da6e:	0e1b      	lsrs	r3, r3, #24
 800da70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da74:	ee07 3a90 	vmov	s15, r3
 800da78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da84:	edd7 6a07 	vldr	s13, [r7, #28]
 800da88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da90:	ee17 2a90 	vmov	r2, s15
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800da98:	e008      	b.n	800daac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	609a      	str	r2, [r3, #8]
}
 800daac:	bf00      	nop
 800daae:	3724      	adds	r7, #36	; 0x24
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	58024400 	.word	0x58024400
 800dabc:	03d09000 	.word	0x03d09000
 800dac0:	46000000 	.word	0x46000000
 800dac4:	4c742400 	.word	0x4c742400
 800dac8:	4a742400 	.word	0x4a742400
 800dacc:	4c3ebc20 	.word	0x4c3ebc20

0800dad0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dade:	4b53      	ldr	r3, [pc, #332]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae2:	f003 0303 	and.w	r3, r3, #3
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d101      	bne.n	800daee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e099      	b.n	800dc22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800daee:	4b4f      	ldr	r3, [pc, #316]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a4e      	ldr	r2, [pc, #312]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800daf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800daf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dafa:	f7f6 fa2d 	bl	8003f58 <HAL_GetTick>
 800dafe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db00:	e008      	b.n	800db14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db02:	f7f6 fa29 	bl	8003f58 <HAL_GetTick>
 800db06:	4602      	mov	r2, r0
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d901      	bls.n	800db14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e086      	b.n	800dc22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db14:	4b45      	ldr	r3, [pc, #276]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1f0      	bne.n	800db02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db20:	4b42      	ldr	r3, [pc, #264]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	031b      	lsls	r3, r3, #12
 800db2e:	493f      	ldr	r1, [pc, #252]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db30:	4313      	orrs	r3, r2
 800db32:	628b      	str	r3, [r1, #40]	; 0x28
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	3b01      	subs	r3, #1
 800db3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	3b01      	subs	r3, #1
 800db44:	025b      	lsls	r3, r3, #9
 800db46:	b29b      	uxth	r3, r3
 800db48:	431a      	orrs	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	3b01      	subs	r3, #1
 800db50:	041b      	lsls	r3, r3, #16
 800db52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db56:	431a      	orrs	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	061b      	lsls	r3, r3, #24
 800db60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db64:	4931      	ldr	r1, [pc, #196]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db66:	4313      	orrs	r3, r2
 800db68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db6a:	4b30      	ldr	r3, [pc, #192]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	492d      	ldr	r1, [pc, #180]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db78:	4313      	orrs	r3, r2
 800db7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db7c:	4b2b      	ldr	r3, [pc, #172]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db80:	f023 0220 	bic.w	r2, r3, #32
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	699b      	ldr	r3, [r3, #24]
 800db88:	4928      	ldr	r1, [pc, #160]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800db8e:	4b27      	ldr	r3, [pc, #156]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	4a26      	ldr	r2, [pc, #152]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db94:	f023 0310 	bic.w	r3, r3, #16
 800db98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800db9a:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800db9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db9e:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <RCCEx_PLL2_Config+0x160>)
 800dba0:	4013      	ands	r3, r2
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	69d2      	ldr	r2, [r2, #28]
 800dba6:	00d2      	lsls	r2, r2, #3
 800dba8:	4920      	ldr	r1, [pc, #128]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dbae:	4b1f      	ldr	r3, [pc, #124]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb2:	4a1e      	ldr	r2, [pc, #120]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbb4:	f043 0310 	orr.w	r3, r3, #16
 800dbb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d106      	bne.n	800dbce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dbc0:	4b1a      	ldr	r3, [pc, #104]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc4:	4a19      	ldr	r2, [pc, #100]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbcc:	e00f      	b.n	800dbee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d106      	bne.n	800dbe2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dbd4:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	4a14      	ldr	r2, [pc, #80]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbe0:	e005      	b.n	800dbee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbe2:	4b12      	ldr	r3, [pc, #72]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	4a11      	ldr	r2, [pc, #68]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dbec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dbee:	4b0f      	ldr	r3, [pc, #60]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a0e      	ldr	r2, [pc, #56]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dbf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dbf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbfa:	f7f6 f9ad 	bl	8003f58 <HAL_GetTick>
 800dbfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc00:	e008      	b.n	800dc14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc02:	f7f6 f9a9 	bl	8003f58 <HAL_GetTick>
 800dc06:	4602      	mov	r2, r0
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	d901      	bls.n	800dc14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc10:	2303      	movs	r3, #3
 800dc12:	e006      	b.n	800dc22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc14:	4b05      	ldr	r3, [pc, #20]	; (800dc2c <RCCEx_PLL2_Config+0x15c>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d0f0      	beq.n	800dc02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	58024400 	.word	0x58024400
 800dc30:	ffff0007 	.word	0xffff0007

0800dc34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc42:	4b53      	ldr	r3, [pc, #332]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc46:	f003 0303 	and.w	r3, r3, #3
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d101      	bne.n	800dc52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e099      	b.n	800dd86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc52:	4b4f      	ldr	r3, [pc, #316]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a4e      	ldr	r2, [pc, #312]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dc58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc5e:	f7f6 f97b 	bl	8003f58 <HAL_GetTick>
 800dc62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc64:	e008      	b.n	800dc78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc66:	f7f6 f977 	bl	8003f58 <HAL_GetTick>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d901      	bls.n	800dc78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e086      	b.n	800dd86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc78:	4b45      	ldr	r3, [pc, #276]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1f0      	bne.n	800dc66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc84:	4b42      	ldr	r3, [pc, #264]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	051b      	lsls	r3, r3, #20
 800dc92:	493f      	ldr	r1, [pc, #252]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dc94:	4313      	orrs	r3, r2
 800dc96:	628b      	str	r3, [r1, #40]	; 0x28
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	3b01      	subs	r3, #1
 800dca8:	025b      	lsls	r3, r3, #9
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	431a      	orrs	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	041b      	lsls	r3, r3, #16
 800dcb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dcba:	431a      	orrs	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	061b      	lsls	r3, r3, #24
 800dcc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dcc8:	4931      	ldr	r1, [pc, #196]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dcca:	4313      	orrs	r3, r2
 800dccc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dcce:	4b30      	ldr	r3, [pc, #192]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dcd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	492d      	ldr	r1, [pc, #180]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dce0:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	699b      	ldr	r3, [r3, #24]
 800dcec:	4928      	ldr	r1, [pc, #160]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dcf2:	4b27      	ldr	r3, [pc, #156]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf6:	4a26      	ldr	r2, [pc, #152]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dcf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dcfe:	4b24      	ldr	r3, [pc, #144]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd02:	4b24      	ldr	r3, [pc, #144]	; (800dd94 <RCCEx_PLL3_Config+0x160>)
 800dd04:	4013      	ands	r3, r2
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	69d2      	ldr	r2, [r2, #28]
 800dd0a:	00d2      	lsls	r2, r2, #3
 800dd0c:	4920      	ldr	r1, [pc, #128]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd12:	4b1f      	ldr	r3, [pc, #124]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd16:	4a1e      	ldr	r2, [pc, #120]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d106      	bne.n	800dd32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd24:	4b1a      	ldr	r3, [pc, #104]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	4a19      	ldr	r2, [pc, #100]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dd2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd30:	e00f      	b.n	800dd52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d106      	bne.n	800dd46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd38:	4b15      	ldr	r3, [pc, #84]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3c:	4a14      	ldr	r2, [pc, #80]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dd42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd44:	e005      	b.n	800dd52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd46:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4a:	4a11      	ldr	r2, [pc, #68]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dd50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd52:	4b0f      	ldr	r3, [pc, #60]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a0e      	ldr	r2, [pc, #56]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd5e:	f7f6 f8fb 	bl	8003f58 <HAL_GetTick>
 800dd62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd64:	e008      	b.n	800dd78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd66:	f7f6 f8f7 	bl	8003f58 <HAL_GetTick>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d901      	bls.n	800dd78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e006      	b.n	800dd86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd78:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <RCCEx_PLL3_Config+0x15c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d0f0      	beq.n	800dd66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	58024400 	.word	0x58024400
 800dd94:	ffff0007 	.word	0xffff0007

0800dd98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b08a      	sub	sp, #40	; 0x28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e075      	b.n	800de96 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d105      	bne.n	800ddc2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7f5 f963 	bl	8003088 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2204      	movs	r2, #4
 800ddc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 f868 	bl	800dea0 <HAL_SD_InitCard>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d001      	beq.n	800ddda <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e05d      	b.n	800de96 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ddda:	f107 0308 	add.w	r3, r7, #8
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fdaf 	bl	800e944 <HAL_SD_GetCardStatus>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e052      	b.n	800de96 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ddf0:	7e3b      	ldrb	r3, [r7, #24]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ddf6:	7e7b      	ldrb	r3, [r7, #25]
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de00:	2b01      	cmp	r3, #1
 800de02:	d10a      	bne.n	800de1a <HAL_SD_Init+0x82>
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	2b00      	cmp	r3, #0
 800de08:	d102      	bne.n	800de10 <HAL_SD_Init+0x78>
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d004      	beq.n	800de1a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de16:	659a      	str	r2, [r3, #88]	; 0x58
 800de18:	e00b      	b.n	800de32 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d104      	bne.n	800de2c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de28:	659a      	str	r2, [r3, #88]	; 0x58
 800de2a:	e002      	b.n	800de32 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fe6d 	bl	800eb18 <HAL_SD_ConfigWideBusOperation>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800de44:	2301      	movs	r3, #1
 800de46:	e026      	b.n	800de96 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800de48:	f7f6 f886 	bl	8003f58 <HAL_GetTick>
 800de4c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800de4e:	e011      	b.n	800de74 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800de50:	f7f6 f882 	bl	8003f58 <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5e:	d109      	bne.n	800de74 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de66:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e010      	b.n	800de96 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 ff61 	bl	800ed3c <HAL_SD_GetCardState>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d1e7      	bne.n	800de50 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3728      	adds	r7, #40	; 0x28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
	...

0800dea0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dea0:	b590      	push	{r4, r7, lr}
 800dea2:	b08d      	sub	sp, #52	; 0x34
 800dea4:	af02      	add	r7, sp, #8
 800dea6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800deac:	2300      	movs	r3, #0
 800deae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800deb4:	2300      	movs	r3, #0
 800deb6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800deb8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800debc:	f04f 0100 	mov.w	r1, #0
 800dec0:	f7fe fd24 	bl	800c90c <HAL_RCCEx_GetPeriphCLKFreq>
 800dec4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d109      	bne.n	800dee0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800deda:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	e070      	b.n	800dfc2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	0a1b      	lsrs	r3, r3, #8
 800dee4:	4a39      	ldr	r2, [pc, #228]	; (800dfcc <HAL_SD_InitCard+0x12c>)
 800dee6:	fba2 2303 	umull	r2, r3, r2, r3
 800deea:	091b      	lsrs	r3, r3, #4
 800deec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681c      	ldr	r4, [r3, #0]
 800def2:	466a      	mov	r2, sp
 800def4:	f107 0318 	add.w	r3, r7, #24
 800def8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800defc:	e882 0003 	stmia.w	r2, {r0, r1}
 800df00:	f107 030c 	add.w	r3, r7, #12
 800df04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df06:	4620      	mov	r0, r4
 800df08:	f004 fec4 	bl	8012c94 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4618      	mov	r0, r3
 800df12:	f004 ff07 	bl	8012d24 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d005      	beq.n	800df28 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	005b      	lsls	r3, r3, #1
 800df20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df22:	fbb2 f3f3 	udiv	r3, r2, r3
 800df26:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d007      	beq.n	800df3e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800df2e:	4a28      	ldr	r2, [pc, #160]	; (800dfd0 <HAL_SD_InitCard+0x130>)
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	fbb2 f3f3 	udiv	r3, r2, r3
 800df36:	3301      	adds	r3, #1
 800df38:	4618      	mov	r0, r3
 800df3a:	f7f6 f819 	bl	8003f70 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 ffea 	bl	800ef18 <SD_PowerON>
 800df44:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00b      	beq.n	800df64 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e02e      	b.n	800dfc2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 ff09 	bl	800ed7c <SD_InitCard>
 800df6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00b      	beq.n	800df8a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2201      	movs	r2, #1
 800df76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	431a      	orrs	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	e01b      	b.n	800dfc2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df92:	4618      	mov	r0, r3
 800df94:	f004 ff5c 	bl	8012e50 <SDMMC_CmdBlockLength>
 800df98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00f      	beq.n	800dfc0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a0b      	ldr	r2, [pc, #44]	; (800dfd4 <HAL_SD_InitCard+0x134>)
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	431a      	orrs	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e000      	b.n	800dfc2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	372c      	adds	r7, #44	; 0x2c
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd90      	pop	{r4, r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	014f8b59 	.word	0x014f8b59
 800dfd0:	00012110 	.word	0x00012110
 800dfd4:	1fe00fff 	.word	0x1fe00fff

0800dfd8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08c      	sub	sp, #48	; 0x30
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
 800dfe4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d107      	bne.n	800e000 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	e08d      	b.n	800e11c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e006:	b2db      	uxtb	r3, r3
 800e008:	2b01      	cmp	r3, #1
 800e00a:	f040 8086 	bne.w	800e11a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2200      	movs	r2, #0
 800e012:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	441a      	add	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01e:	429a      	cmp	r2, r3
 800e020:	d907      	bls.n	800e032 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e02e:	2301      	movs	r3, #1
 800e030:	e074      	b.n	800e11c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2203      	movs	r2, #3
 800e036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2200      	movs	r2, #0
 800e040:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	025a      	lsls	r2, r3, #9
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e054:	2b01      	cmp	r3, #1
 800e056:	d002      	beq.n	800e05e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	025b      	lsls	r3, r3, #9
 800e05c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e05e:	f04f 33ff 	mov.w	r3, #4294967295
 800e062:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	025b      	lsls	r3, r3, #9
 800e068:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e06a:	2390      	movs	r3, #144	; 0x90
 800e06c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e06e:	2302      	movs	r3, #2
 800e070:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e072:	2300      	movs	r3, #0
 800e074:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e076:	2300      	movs	r3, #0
 800e078:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f107 0210 	add.w	r2, r7, #16
 800e082:	4611      	mov	r1, r2
 800e084:	4618      	mov	r0, r3
 800e086:	f004 feb7 	bl	8012df8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	68da      	ldr	r2, [r3, #12]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e098:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d90a      	bls.n	800e0c6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2282      	movs	r2, #130	; 0x82
 800e0b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f004 ff0d 	bl	8012edc <SDMMC_CmdReadMultiBlock>
 800e0c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e0c4:	e009      	b.n	800e0da <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2281      	movs	r2, #129	; 0x81
 800e0ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f004 fedf 	bl	8012e96 <SDMMC_CmdReadSingleBlock>
 800e0d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d012      	beq.n	800e106 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a0f      	ldr	r2, [pc, #60]	; (800e124 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e0e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	431a      	orrs	r2, r3
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	e00a      	b.n	800e11c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e114:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e116:	2300      	movs	r3, #0
 800e118:	e000      	b.n	800e11c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e11a:	2302      	movs	r3, #2
  }
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3730      	adds	r7, #48	; 0x30
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	1fe00fff 	.word	0x1fe00fff

0800e128 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08c      	sub	sp, #48	; 0x30
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d107      	bne.n	800e150 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e144:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e14c:	2301      	movs	r3, #1
 800e14e:	e08d      	b.n	800e26c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b01      	cmp	r3, #1
 800e15a:	f040 8086 	bne.w	800e26a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	441a      	add	r2, r3
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e16e:	429a      	cmp	r2, r3
 800e170:	d907      	bls.n	800e182 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e176:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e074      	b.n	800e26c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2203      	movs	r2, #3
 800e186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2200      	movs	r2, #0
 800e190:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	025a      	lsls	r2, r3, #9
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d002      	beq.n	800e1ae <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	025b      	lsls	r3, r3, #9
 800e1ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	025b      	lsls	r3, r3, #9
 800e1b8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e1ba:	2390      	movs	r3, #144	; 0x90
 800e1bc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f107 0210 	add.w	r2, r7, #16
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 fe0f 	bl	8012df8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68da      	ldr	r2, [r3, #12]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1e8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d90a      	bls.n	800e216 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	22a0      	movs	r2, #160	; 0xa0
 800e204:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e20c:	4618      	mov	r0, r3
 800e20e:	f004 feab 	bl	8012f68 <SDMMC_CmdWriteMultiBlock>
 800e212:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e214:	e009      	b.n	800e22a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2290      	movs	r2, #144	; 0x90
 800e21a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e222:	4618      	mov	r0, r3
 800e224:	f004 fe7d 	bl	8012f22 <SDMMC_CmdWriteSingleBlock>
 800e228:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d012      	beq.n	800e256 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a0f      	ldr	r2, [pc, #60]	; (800e274 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e236:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	431a      	orrs	r2, r3
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e00a      	b.n	800e26c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e264:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	e000      	b.n	800e26c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e26a:	2302      	movs	r3, #2
  }
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3730      	adds	r7, #48	; 0x30
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	1fe00fff 	.word	0x1fe00fff

0800e278 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d008      	beq.n	800e2a6 <HAL_SD_IRQHandler+0x2e>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d003      	beq.n	800e2a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f001 f926 	bl	800f4f0 <SD_Read_IT>
 800e2a4:	e19a      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 80ac 	beq.w	800e40e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2be:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	4b59      	ldr	r3, [pc, #356]	; (800e430 <HAL_SD_IRQHandler+0x1b8>)
 800e2cc:	400b      	ands	r3, r1
 800e2ce:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e2de:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68da      	ldr	r2, [r3, #12]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2ee:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f003 0308 	and.w	r3, r3, #8
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d038      	beq.n	800e36c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f003 0302 	and.w	r3, r3, #2
 800e300:	2b00      	cmp	r3, #0
 800e302:	d104      	bne.n	800e30e <HAL_SD_IRQHandler+0x96>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f003 0320 	and.w	r3, r3, #32
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d011      	beq.n	800e332 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4618      	mov	r0, r3
 800e314:	f004 fe4c 	bl	8012fb0 <SDMMC_CmdStopTransfer>
 800e318:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d008      	beq.n	800e332 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	431a      	orrs	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f95b 	bl	800e5e8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a3f      	ldr	r2, [pc, #252]	; (800e434 <HAL_SD_IRQHandler+0x1bc>)
 800e338:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2201      	movs	r2, #1
 800e33e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f003 0301 	and.w	r3, r3, #1
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <HAL_SD_IRQHandler+0xe4>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f006 fe55 	bl	801500c <HAL_SD_RxCpltCallback>
 800e362:	e13b      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f006 fe47 	bl	8014ff8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e36a:	e137      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e372:	2b00      	cmp	r3, #0
 800e374:	f000 8132 	beq.w	800e5dc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2200      	movs	r2, #0
 800e37e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2200      	movs	r2, #0
 800e386:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2200      	movs	r2, #0
 800e38e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f003 0302 	and.w	r3, r3, #2
 800e396:	2b00      	cmp	r3, #0
 800e398:	d104      	bne.n	800e3a4 <HAL_SD_IRQHandler+0x12c>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f003 0320 	and.w	r3, r3, #32
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d011      	beq.n	800e3c8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f004 fe01 	bl	8012fb0 <SDMMC_CmdStopTransfer>
 800e3ae:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d008      	beq.n	800e3c8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	431a      	orrs	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f910 	bl	800e5e8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f003 0310 	and.w	r3, r3, #16
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d104      	bne.n	800e3ea <HAL_SD_IRQHandler+0x172>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f003 0320 	and.w	r3, r3, #32
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f006 fe04 	bl	8014ff8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f003 0301 	and.w	r3, r3, #1
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d105      	bne.n	800e406 <HAL_SD_IRQHandler+0x18e>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f003 0302 	and.w	r3, r3, #2
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 80eb 	beq.w	800e5dc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f006 fe00 	bl	801500c <HAL_SD_RxCpltCallback>
}
 800e40c:	e0e6      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00d      	beq.n	800e438 <HAL_SD_IRQHandler+0x1c0>
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f003 0308 	and.w	r3, r3, #8
 800e422:	2b00      	cmp	r3, #0
 800e424:	d008      	beq.n	800e438 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f001 f8a8 	bl	800f57c <SD_Write_IT>
 800e42c:	e0d6      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
 800e42e:	bf00      	nop
 800e430:	ffff3ec5 	.word	0xffff3ec5
 800e434:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 809d 	beq.w	800e582 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44e:	f003 0302 	and.w	r3, r3, #2
 800e452:	2b00      	cmp	r3, #0
 800e454:	d005      	beq.n	800e462 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e45a:	f043 0202 	orr.w	r2, r3, #2
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d005      	beq.n	800e47c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e474:	f043 0208 	orr.w	r2, r3, #8
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e482:	f003 0320 	and.w	r3, r3, #32
 800e486:	2b00      	cmp	r3, #0
 800e488:	d005      	beq.n	800e496 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48e:	f043 0220 	orr.w	r2, r3, #32
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49c:	f003 0310 	and.w	r3, r3, #16
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d005      	beq.n	800e4b0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a8:	f043 0210 	orr.w	r2, r3, #16
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a4b      	ldr	r2, [pc, #300]	; (800e5e4 <HAL_SD_IRQHandler+0x36c>)
 800e4b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e4c6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68da      	ldr	r2, [r3, #12]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4d6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e4e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68da      	ldr	r2, [r3, #12]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e4f6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f004 fd57 	bl	8012fb0 <SDMMC_CmdStopTransfer>
 800e502:	4602      	mov	r2, r0
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e508:	431a      	orrs	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	68da      	ldr	r2, [r3, #12]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e51c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e526:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f003 0308 	and.w	r3, r3, #8
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00a      	beq.n	800e548 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f851 	bl	800e5e8 <HAL_SD_ErrorCallback>
}
 800e546:	e049      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d044      	beq.n	800e5dc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e556:	2b00      	cmp	r3, #0
 800e558:	d040      	beq.n	800e5dc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e568:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2200      	movs	r2, #0
 800e570:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f834 	bl	800e5e8 <HAL_SD_ErrorCallback>
}
 800e580:	e02c      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d025      	beq.n	800e5dc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e598:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5a0:	f003 0304 	and.w	r3, r3, #4
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10c      	bne.n	800e5c2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f003 0320 	and.w	r3, r3, #32
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 f84a 	bl	800f64c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e5b8:	e010      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 f832 	bl	800f624 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e5c0:	e00c      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f003 0320 	and.w	r3, r3, #32
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d003      	beq.n	800e5d4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f001 f833 	bl	800f638 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e5d2:	e003      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f001 f81b 	bl	800f610 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e5da:	e7ff      	b.n	800e5dc <HAL_SD_IRQHandler+0x364>
 800e5dc:	bf00      	nop
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	18000f3a 	.word	0x18000f3a

0800e5e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e60a:	0f9b      	lsrs	r3, r3, #30
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e616:	0e9b      	lsrs	r3, r3, #26
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	f003 030f 	and.w	r3, r3, #15
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e628:	0e1b      	lsrs	r3, r3, #24
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	f003 0303 	and.w	r3, r3, #3
 800e630:	b2da      	uxtb	r2, r3
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e63a:	0c1b      	lsrs	r3, r3, #16
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e646:	0a1b      	lsrs	r3, r3, #8
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e652:	b2da      	uxtb	r2, r3
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e65c:	0d1b      	lsrs	r3, r3, #20
 800e65e:	b29a      	uxth	r2, r3
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e668:	0c1b      	lsrs	r3, r3, #16
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	f003 030f 	and.w	r3, r3, #15
 800e670:	b2da      	uxtb	r2, r3
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e67a:	0bdb      	lsrs	r3, r3, #15
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	b2da      	uxtb	r2, r3
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e68c:	0b9b      	lsrs	r3, r3, #14
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	f003 0301 	and.w	r3, r3, #1
 800e694:	b2da      	uxtb	r2, r3
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e69e:	0b5b      	lsrs	r3, r3, #13
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6b0:	0b1b      	lsrs	r3, r3, #12
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d163      	bne.n	800e794 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6d0:	009a      	lsls	r2, r3, #2
 800e6d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e6dc:	0f92      	lsrs	r2, r2, #30
 800e6de:	431a      	orrs	r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6e8:	0edb      	lsrs	r3, r3, #27
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	f003 0307 	and.w	r3, r3, #7
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6fa:	0e1b      	lsrs	r3, r3, #24
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	f003 0307 	and.w	r3, r3, #7
 800e702:	b2da      	uxtb	r2, r3
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e70c:	0d5b      	lsrs	r3, r3, #21
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	f003 0307 	and.w	r3, r3, #7
 800e714:	b2da      	uxtb	r2, r3
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e71e:	0c9b      	lsrs	r3, r3, #18
 800e720:	b2db      	uxtb	r3, r3
 800e722:	f003 0307 	and.w	r3, r3, #7
 800e726:	b2da      	uxtb	r2, r3
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e730:	0bdb      	lsrs	r3, r3, #15
 800e732:	b2db      	uxtb	r3, r3
 800e734:	f003 0307 	and.w	r3, r3, #7
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	7e1b      	ldrb	r3, [r3, #24]
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	f003 0307 	and.w	r3, r3, #7
 800e752:	3302      	adds	r3, #2
 800e754:	2201      	movs	r2, #1
 800e756:	fa02 f303 	lsl.w	r3, r2, r3
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e75e:	fb03 f202 	mul.w	r2, r3, r2
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	7a1b      	ldrb	r3, [r3, #8]
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	f003 030f 	and.w	r3, r3, #15
 800e770:	2201      	movs	r2, #1
 800e772:	409a      	lsls	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e780:	0a52      	lsrs	r2, r2, #9
 800e782:	fb03 f202 	mul.w	r2, r3, r2
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e790:	655a      	str	r2, [r3, #84]	; 0x54
 800e792:	e031      	b.n	800e7f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d11d      	bne.n	800e7d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7a0:	041b      	lsls	r3, r3, #16
 800e7a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7aa:	0c1b      	lsrs	r3, r3, #16
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	691b      	ldr	r3, [r3, #16]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	029a      	lsls	r2, r3, #10
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	655a      	str	r2, [r3, #84]	; 0x54
 800e7d6:	e00f      	b.n	800e7f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a58      	ldr	r2, [pc, #352]	; (800e940 <HAL_SD_GetCardCSD+0x344>)
 800e7de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e09d      	b.n	800e934 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7fc:	0b9b      	lsrs	r3, r3, #14
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	f003 0301 	and.w	r3, r3, #1
 800e804:	b2da      	uxtb	r2, r3
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e80e:	09db      	lsrs	r3, r3, #7
 800e810:	b2db      	uxtb	r3, r3
 800e812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e816:	b2da      	uxtb	r2, r3
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e820:	b2db      	uxtb	r3, r3
 800e822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e826:	b2da      	uxtb	r2, r3
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e830:	0fdb      	lsrs	r3, r3, #31
 800e832:	b2da      	uxtb	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e83c:	0f5b      	lsrs	r3, r3, #29
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	f003 0303 	and.w	r3, r3, #3
 800e844:	b2da      	uxtb	r2, r3
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e84e:	0e9b      	lsrs	r3, r3, #26
 800e850:	b2db      	uxtb	r3, r3
 800e852:	f003 0307 	and.w	r3, r3, #7
 800e856:	b2da      	uxtb	r2, r3
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e860:	0d9b      	lsrs	r3, r3, #22
 800e862:	b2db      	uxtb	r3, r3
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e872:	0d5b      	lsrs	r3, r3, #21
 800e874:	b2db      	uxtb	r3, r3
 800e876:	f003 0301 	and.w	r3, r3, #1
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e88e:	0c1b      	lsrs	r3, r3, #16
 800e890:	b2db      	uxtb	r3, r3
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	b2da      	uxtb	r2, r3
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8a2:	0bdb      	lsrs	r3, r3, #15
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8b6:	0b9b      	lsrs	r3, r3, #14
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ca:	0b5b      	lsrs	r3, r3, #13
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	f003 0301 	and.w	r3, r3, #1
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8de:	0b1b      	lsrs	r3, r3, #12
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	b2da      	uxtb	r2, r3
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8f2:	0a9b      	lsrs	r3, r3, #10
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	f003 0303 	and.w	r3, r3, #3
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e906:	0a1b      	lsrs	r3, r3, #8
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	f003 0303 	and.w	r3, r3, #3
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e91a:	085b      	lsrs	r3, r3, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	b2da      	uxtb	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	1fe00fff 	.word	0x1fe00fff

0800e944 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b094      	sub	sp, #80	; 0x50
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b03      	cmp	r3, #3
 800e95e:	d101      	bne.n	800e964 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e960:	2301      	movs	r3, #1
 800e962:	e0a7      	b.n	800eab4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e964:	f107 0308 	add.w	r3, r7, #8
 800e968:	4619      	mov	r1, r3
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fb62 	bl	800f034 <SD_SendSDStatus>
 800e970:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e974:	2b00      	cmp	r3, #0
 800e976:	d011      	beq.n	800e99c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a4f      	ldr	r2, [pc, #316]	; (800eabc <HAL_SD_GetCardStatus+0x178>)
 800e97e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e986:	431a      	orrs	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e99a:	e070      	b.n	800ea7e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	099b      	lsrs	r3, r3, #6
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	f003 0303 	and.w	r3, r3, #3
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	095b      	lsrs	r3, r3, #5
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	0a1b      	lsrs	r3, r3, #8
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	0e1b      	lsrs	r3, r3, #24
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	061a      	lsls	r2, r3, #24
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	021b      	lsls	r3, r3, #8
 800e9de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e9e2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	0a1b      	lsrs	r3, r3, #8
 800e9e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e9ec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	0e1b      	lsrs	r3, r3, #24
 800e9f2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	0a1b      	lsrs	r3, r3, #8
 800ea04:	b2da      	uxtb	r2, r3
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	0d1b      	lsrs	r3, r3, #20
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	f003 030f 	and.w	r3, r3, #15
 800ea14:	b2da      	uxtb	r2, r3
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	0c1b      	lsrs	r3, r3, #16
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	0a9b      	lsrs	r3, r3, #10
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	0a1b      	lsrs	r3, r3, #8
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	f003 0303 	and.w	r3, r3, #3
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	091b      	lsrs	r3, r3, #4
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	f003 030f 	and.w	r3, r3, #15
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	f003 030f 	and.w	r3, r3, #15
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	0e1b      	lsrs	r3, r3, #24
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea86:	4618      	mov	r0, r3
 800ea88:	f004 f9e2 	bl	8012e50 <SDMMC_CmdBlockLength>
 800ea8c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00d      	beq.n	800eab0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a08      	ldr	r2, [pc, #32]	; (800eabc <HAL_SD_GetCardStatus+0x178>)
 800ea9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaa0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800eab0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3750      	adds	r7, #80	; 0x50
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	1fe00fff 	.word	0x1fe00fff

0800eac0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800eb18:	b590      	push	{r4, r7, lr}
 800eb1a:	b08d      	sub	sp, #52	; 0x34
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2203      	movs	r2, #3
 800eb2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb34:	2b03      	cmp	r3, #3
 800eb36:	d02e      	beq.n	800eb96 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb3e:	d106      	bne.n	800eb4e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	635a      	str	r2, [r3, #52]	; 0x34
 800eb4c:	e029      	b.n	800eba2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb54:	d10a      	bne.n	800eb6c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 fb64 	bl	800f224 <SD_WideBus_Enable>
 800eb5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb62:	6a3b      	ldr	r3, [r7, #32]
 800eb64:	431a      	orrs	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	635a      	str	r2, [r3, #52]	; 0x34
 800eb6a:	e01a      	b.n	800eba2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10a      	bne.n	800eb88 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fba1 	bl	800f2ba <SD_WideBus_Disable>
 800eb78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	431a      	orrs	r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	635a      	str	r2, [r3, #52]	; 0x34
 800eb86:	e00c      	b.n	800eba2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	635a      	str	r2, [r3, #52]	; 0x34
 800eb94:	e005      	b.n	800eba2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d007      	beq.n	800ebba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4a5f      	ldr	r2, [pc, #380]	; (800ed2c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ebb0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebb8:	e096      	b.n	800ece8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ebba:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ebbe:	f04f 0100 	mov.w	r1, #0
 800ebc2:	f7fd fea3 	bl	800c90c <HAL_RCCEx_GetPeriphCLKFreq>
 800ebc6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f000 8083 	beq.w	800ecd6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	695a      	ldr	r2, [r3, #20]
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	4950      	ldr	r1, [pc, #320]	; (800ed30 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ebee:	fba1 1303 	umull	r1, r3, r1, r3
 800ebf2:	0e1b      	lsrs	r3, r3, #24
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d303      	bcc.n	800ec00 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	695b      	ldr	r3, [r3, #20]
 800ebfc:	61bb      	str	r3, [r7, #24]
 800ebfe:	e05a      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec08:	d103      	bne.n	800ec12 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	61bb      	str	r3, [r7, #24]
 800ec10:	e051      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec1a:	d126      	bne.n	800ec6a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	695b      	ldr	r3, [r3, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10e      	bne.n	800ec42 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	4a43      	ldr	r2, [pc, #268]	; (800ed34 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d906      	bls.n	800ec3a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	4a40      	ldr	r2, [pc, #256]	; (800ed30 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ec30:	fba2 2303 	umull	r2, r3, r2, r3
 800ec34:	0e5b      	lsrs	r3, r3, #25
 800ec36:	61bb      	str	r3, [r7, #24]
 800ec38:	e03d      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	695b      	ldr	r3, [r3, #20]
 800ec3e:	61bb      	str	r3, [r7, #24]
 800ec40:	e039      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	005b      	lsls	r3, r3, #1
 800ec48:	69fa      	ldr	r2, [r7, #28]
 800ec4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec4e:	4a39      	ldr	r2, [pc, #228]	; (800ed34 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d906      	bls.n	800ec62 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	4a36      	ldr	r2, [pc, #216]	; (800ed30 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ec58:	fba2 2303 	umull	r2, r3, r2, r3
 800ec5c:	0e5b      	lsrs	r3, r3, #25
 800ec5e:	61bb      	str	r3, [r7, #24]
 800ec60:	e029      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	61bb      	str	r3, [r7, #24]
 800ec68:	e025      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10e      	bne.n	800ec90 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	4a30      	ldr	r2, [pc, #192]	; (800ed38 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d906      	bls.n	800ec88 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	4a2c      	ldr	r2, [pc, #176]	; (800ed30 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ec7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ec82:	0e1b      	lsrs	r3, r3, #24
 800ec84:	61bb      	str	r3, [r7, #24]
 800ec86:	e016      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	695b      	ldr	r3, [r3, #20]
 800ec8c:	61bb      	str	r3, [r7, #24]
 800ec8e:	e012      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	005b      	lsls	r3, r3, #1
 800ec96:	69fa      	ldr	r2, [r7, #28]
 800ec98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec9c:	4a26      	ldr	r2, [pc, #152]	; (800ed38 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d906      	bls.n	800ecb0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	4a22      	ldr	r2, [pc, #136]	; (800ed30 <HAL_SD_ConfigWideBusOperation+0x218>)
 800eca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ecaa:	0e1b      	lsrs	r3, r3, #24
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	e002      	b.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	695b      	ldr	r3, [r3, #20]
 800ecb4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681c      	ldr	r4, [r3, #0]
 800ecba:	466a      	mov	r2, sp
 800ecbc:	f107 0314 	add.w	r3, r7, #20
 800ecc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ecc4:	e882 0003 	stmia.w	r2, {r0, r1}
 800ecc8:	f107 0308 	add.w	r3, r7, #8
 800eccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f003 ffe0 	bl	8012c94 <SDMMC_Init>
 800ecd4:	e008      	b.n	800ece8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ece2:	2301      	movs	r3, #1
 800ece4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f004 f8ad 	bl	8012e50 <SDMMC_CmdBlockLength>
 800ecf6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00c      	beq.n	800ed18 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4a0a      	ldr	r2, [pc, #40]	; (800ed2c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ed04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	431a      	orrs	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ed20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	372c      	adds	r7, #44	; 0x2c
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd90      	pop	{r4, r7, pc}
 800ed2c:	1fe00fff 	.word	0x1fe00fff
 800ed30:	55e63b89 	.word	0x55e63b89
 800ed34:	02faf080 	.word	0x02faf080
 800ed38:	017d7840 	.word	0x017d7840

0800ed3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ed48:	f107 030c 	add.w	r3, r7, #12
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fa40 	bl	800f1d4 <SD_SendStatus>
 800ed54:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d005      	beq.n	800ed68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	431a      	orrs	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	0a5b      	lsrs	r3, r3, #9
 800ed6c:	f003 030f 	and.w	r3, r3, #15
 800ed70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ed72:	693b      	ldr	r3, [r7, #16]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b090      	sub	sp, #64	; 0x40
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ed84:	2300      	movs	r3, #0
 800ed86:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ed88:	f7f5 f8e6 	bl	8003f58 <HAL_GetTick>
 800ed8c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f003 ffd7 	bl	8012d46 <SDMMC_GetPowerState>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d102      	bne.n	800eda4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ed9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800eda2:	e0b5      	b.n	800ef10 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda8:	2b03      	cmp	r3, #3
 800edaa:	d02e      	beq.n	800ee0a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f004 fa22 	bl	80131fa <SDMMC_CmdSendCID>
 800edb6:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <SD_InitCard+0x46>
    {
      return errorstate;
 800edbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc0:	e0a6      	b.n	800ef10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2100      	movs	r1, #0
 800edc8:	4618      	mov	r0, r3
 800edca:	f004 f802 	bl	8012dd2 <SDMMC_GetResponse>
 800edce:	4602      	mov	r2, r0
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	2104      	movs	r1, #4
 800edda:	4618      	mov	r0, r3
 800eddc:	f003 fff9 	bl	8012dd2 <SDMMC_GetResponse>
 800ede0:	4602      	mov	r2, r0
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2108      	movs	r1, #8
 800edec:	4618      	mov	r0, r3
 800edee:	f003 fff0 	bl	8012dd2 <SDMMC_GetResponse>
 800edf2:	4602      	mov	r2, r0
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	210c      	movs	r1, #12
 800edfe:	4618      	mov	r0, r3
 800ee00:	f003 ffe7 	bl	8012dd2 <SDMMC_GetResponse>
 800ee04:	4602      	mov	r2, r0
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d01d      	beq.n	800ee4e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ee12:	e019      	b.n	800ee48 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f107 020a 	add.w	r2, r7, #10
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f004 fa2a 	bl	8013278 <SDMMC_CmdSetRelAdd>
 800ee24:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	e06f      	b.n	800ef10 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ee30:	f7f5 f892 	bl	8003f58 <HAL_GetTick>
 800ee34:	4602      	mov	r2, r0
 800ee36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee38:	1ad3      	subs	r3, r2, r3
 800ee3a:	f241 3287 	movw	r2, #4999	; 0x1387
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d902      	bls.n	800ee48 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ee42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee46:	e063      	b.n	800ef10 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ee48:	897b      	ldrh	r3, [r7, #10]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d0e2      	beq.n	800ee14 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee52:	2b03      	cmp	r3, #3
 800ee54:	d036      	beq.n	800eec4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ee56:	897b      	ldrh	r3, [r7, #10]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee66:	041b      	lsls	r3, r3, #16
 800ee68:	4619      	mov	r1, r3
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	f004 f9e4 	bl	8013238 <SDMMC_CmdSendCSD>
 800ee70:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d001      	beq.n	800ee7c <SD_InitCard+0x100>
    {
      return errorstate;
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	e049      	b.n	800ef10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2100      	movs	r1, #0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f003 ffa5 	bl	8012dd2 <SDMMC_GetResponse>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2104      	movs	r1, #4
 800ee94:	4618      	mov	r0, r3
 800ee96:	f003 ff9c 	bl	8012dd2 <SDMMC_GetResponse>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2108      	movs	r1, #8
 800eea6:	4618      	mov	r0, r3
 800eea8:	f003 ff93 	bl	8012dd2 <SDMMC_GetResponse>
 800eeac:	4602      	mov	r2, r0
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	210c      	movs	r1, #12
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f003 ff8a 	bl	8012dd2 <SDMMC_GetResponse>
 800eebe:	4602      	mov	r2, r0
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2104      	movs	r1, #4
 800eeca:	4618      	mov	r0, r3
 800eecc:	f003 ff81 	bl	8012dd2 <SDMMC_GetResponse>
 800eed0:	4603      	mov	r3, r0
 800eed2:	0d1a      	lsrs	r2, r3, #20
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800eed8:	f107 030c 	add.w	r3, r7, #12
 800eedc:	4619      	mov	r1, r3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff fb8c 	bl	800e5fc <HAL_SD_GetCardCSD>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eeea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eeee:	e00f      	b.n	800ef10 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eef8:	041b      	lsls	r3, r3, #16
 800eefa:	4619      	mov	r1, r3
 800eefc:	4610      	mov	r0, r2
 800eefe:	f004 f893 	bl	8013028 <SDMMC_CmdSelDesel>
 800ef02:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d001      	beq.n	800ef0e <SD_InitCard+0x192>
  {
    return errorstate;
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	e000      	b.n	800ef10 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3740      	adds	r7, #64	; 0x40
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef20:	2300      	movs	r3, #0
 800ef22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ef24:	2300      	movs	r3, #0
 800ef26:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f004 f89c 	bl	801306e <SDMMC_CmdGoIdleState>
 800ef36:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	e072      	b.n	800f028 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4618      	mov	r0, r3
 800ef48:	f004 f8af 	bl	80130aa <SDMMC_CmdOperCond>
 800ef4c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef54:	d10d      	bne.n	800ef72 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4618      	mov	r0, r3
 800ef62:	f004 f884 	bl	801306e <SDMMC_CmdGoIdleState>
 800ef66:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d004      	beq.n	800ef78 <SD_PowerON+0x60>
    {
      return errorstate;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	e05a      	b.n	800f028 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d137      	bne.n	800eff0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2100      	movs	r1, #0
 800ef86:	4618      	mov	r0, r3
 800ef88:	f004 f8af 	bl	80130ea <SDMMC_CmdAppCommand>
 800ef8c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d02d      	beq.n	800eff0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef98:	e046      	b.n	800f028 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2100      	movs	r1, #0
 800efa0:	4618      	mov	r0, r3
 800efa2:	f004 f8a2 	bl	80130ea <SDMMC_CmdAppCommand>
 800efa6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	e03a      	b.n	800f028 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	491e      	ldr	r1, [pc, #120]	; (800f030 <SD_PowerON+0x118>)
 800efb8:	4618      	mov	r0, r3
 800efba:	f004 f8b9 	bl	8013130 <SDMMC_CmdAppOperCommand>
 800efbe:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efca:	e02d      	b.n	800f028 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2100      	movs	r1, #0
 800efd2:	4618      	mov	r0, r3
 800efd4:	f003 fefd 	bl	8012dd2 <SDMMC_GetResponse>
 800efd8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	0fdb      	lsrs	r3, r3, #31
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d101      	bne.n	800efe6 <SD_PowerON+0xce>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e000      	b.n	800efe8 <SD_PowerON+0xd0>
 800efe6:	2300      	movs	r3, #0
 800efe8:	613b      	str	r3, [r7, #16]

    count++;
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	3301      	adds	r3, #1
 800efee:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d802      	bhi.n	800f000 <SD_PowerON+0xe8>
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d0cc      	beq.n	800ef9a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f006:	4293      	cmp	r3, r2
 800f008:	d902      	bls.n	800f010 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f00a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f00e:	e00b      	b.n	800f028 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3718      	adds	r7, #24
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	c1100000 	.word	0xc1100000

0800f034 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08c      	sub	sp, #48	; 0x30
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f03e:	f7f4 ff8b 	bl	8003f58 <HAL_GetTick>
 800f042:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2100      	movs	r1, #0
 800f04e:	4618      	mov	r0, r3
 800f050:	f003 febf 	bl	8012dd2 <SDMMC_GetResponse>
 800f054:	4603      	mov	r3, r0
 800f056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f05a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f05e:	d102      	bne.n	800f066 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f064:	e0b0      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2140      	movs	r1, #64	; 0x40
 800f06c:	4618      	mov	r0, r3
 800f06e:	f003 feef 	bl	8012e50 <SDMMC_CmdBlockLength>
 800f072:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f074:	6a3b      	ldr	r3, [r7, #32]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d005      	beq.n	800f086 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	e0a0      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f08e:	041b      	lsls	r3, r3, #16
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f004 f829 	bl	80130ea <SDMMC_CmdAppCommand>
 800f098:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f09a:	6a3b      	ldr	r3, [r7, #32]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d005      	beq.n	800f0ac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f0a8:	6a3b      	ldr	r3, [r7, #32]
 800f0aa:	e08d      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f0b2:	2340      	movs	r3, #64	; 0x40
 800f0b4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f0b6:	2360      	movs	r3, #96	; 0x60
 800f0b8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f107 0208 	add.w	r2, r7, #8
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f003 fe91 	bl	8012df8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f004 f911 	bl	8013302 <SDMMC_CmdStatusRegister>
 800f0e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d02b      	beq.n	800f140 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f0f0:	6a3b      	ldr	r3, [r7, #32]
 800f0f2:	e069      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d013      	beq.n	800f12a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f102:	2300      	movs	r3, #0
 800f104:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f106:	e00d      	b.n	800f124 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f003 fdeb 	bl	8012ce8 <SDMMC_ReadFIFO>
 800f112:	4602      	mov	r2, r0
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	601a      	str	r2, [r3, #0]
        pData++;
 800f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11a:	3304      	adds	r3, #4
 800f11c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f120:	3301      	adds	r3, #1
 800f122:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	2b07      	cmp	r3, #7
 800f128:	d9ee      	bls.n	800f108 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f12a:	f7f4 ff15 	bl	8003f58 <HAL_GetTick>
 800f12e:	4602      	mov	r2, r0
 800f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f138:	d102      	bne.n	800f140 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f13a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f13e:	e043      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f146:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d0d2      	beq.n	800f0f4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f154:	f003 0308 	and.w	r3, r3, #8
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d001      	beq.n	800f160 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f15c:	2308      	movs	r3, #8
 800f15e:	e033      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f166:	f003 0302 	and.w	r3, r3, #2
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f16e:	2302      	movs	r3, #2
 800f170:	e02a      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f178:	f003 0320 	and.w	r3, r3, #32
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d017      	beq.n	800f1b0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f180:	2320      	movs	r3, #32
 800f182:	e021      	b.n	800f1c8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4618      	mov	r0, r3
 800f18a:	f003 fdad 	bl	8012ce8 <SDMMC_ReadFIFO>
 800f18e:	4602      	mov	r2, r0
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	601a      	str	r2, [r3, #0]
    pData++;
 800f194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f196:	3304      	adds	r3, #4
 800f198:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f19a:	f7f4 fedd 	bl	8003f58 <HAL_GetTick>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a8:	d102      	bne.n	800f1b0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f1aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1ae:	e00b      	b.n	800f1c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1e2      	bne.n	800f184 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a03      	ldr	r2, [pc, #12]	; (800f1d0 <SD_SendSDStatus+0x19c>)
 800f1c4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3730      	adds	r7, #48	; 0x30
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	18000f3a 	.word	0x18000f3a

0800f1d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d102      	bne.n	800f1ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f1e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f1e8:	e018      	b.n	800f21c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f2:	041b      	lsls	r3, r3, #16
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	4610      	mov	r0, r2
 800f1f8:	f004 f860 	bl	80132bc <SDMMC_CmdSendStatus>
 800f1fc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	e009      	b.n	800f21c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2100      	movs	r1, #0
 800f20e:	4618      	mov	r0, r3
 800f210:	f003 fddf 	bl	8012dd2 <SDMMC_GetResponse>
 800f214:	4602      	mov	r2, r0
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f22c:	2300      	movs	r3, #0
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	2300      	movs	r3, #0
 800f232:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2100      	movs	r1, #0
 800f23a:	4618      	mov	r0, r3
 800f23c:	f003 fdc9 	bl	8012dd2 <SDMMC_GetResponse>
 800f240:	4603      	mov	r3, r0
 800f242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f24a:	d102      	bne.n	800f252 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f24c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f250:	e02f      	b.n	800f2b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f252:	f107 030c 	add.w	r3, r7, #12
 800f256:	4619      	mov	r1, r3
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 f879 	bl	800f350 <SD_FindSCR>
 800f25e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	e023      	b.n	800f2b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d01c      	beq.n	800f2ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f27c:	041b      	lsls	r3, r3, #16
 800f27e:	4619      	mov	r1, r3
 800f280:	4610      	mov	r0, r2
 800f282:	f003 ff32 	bl	80130ea <SDMMC_CmdAppCommand>
 800f286:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	e00f      	b.n	800f2b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2102      	movs	r1, #2
 800f298:	4618      	mov	r0, r3
 800f29a:	f003 ff69 	bl	8013170 <SDMMC_CmdBusWidth>
 800f29e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	e003      	b.n	800f2b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e001      	b.n	800f2b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f2ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3718      	adds	r7, #24
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b086      	sub	sp, #24
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	60fb      	str	r3, [r7, #12]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f003 fd7e 	bl	8012dd2 <SDMMC_GetResponse>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2e0:	d102      	bne.n	800f2e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f2e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2e6:	e02f      	b.n	800f348 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f2e8:	f107 030c 	add.w	r3, r7, #12
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f82e 	bl	800f350 <SD_FindSCR>
 800f2f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	e023      	b.n	800f348 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f306:	2b00      	cmp	r3, #0
 800f308:	d01c      	beq.n	800f344 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f312:	041b      	lsls	r3, r3, #16
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	f003 fee7 	bl	80130ea <SDMMC_CmdAppCommand>
 800f31c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d001      	beq.n	800f328 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	e00f      	b.n	800f348 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2100      	movs	r1, #0
 800f32e:	4618      	mov	r0, r3
 800f330:	f003 ff1e 	bl	8013170 <SDMMC_CmdBusWidth>
 800f334:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	e003      	b.n	800f348 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f340:	2300      	movs	r3, #0
 800f342:	e001      	b.n	800f348 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f344:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b08e      	sub	sp, #56	; 0x38
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f35a:	f7f4 fdfd 	bl	8003f58 <HAL_GetTick>
 800f35e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f360:	2300      	movs	r3, #0
 800f362:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f364:	2300      	movs	r3, #0
 800f366:	60bb      	str	r3, [r7, #8]
 800f368:	2300      	movs	r3, #0
 800f36a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2108      	movs	r1, #8
 800f376:	4618      	mov	r0, r3
 800f378:	f003 fd6a 	bl	8012e50 <SDMMC_CmdBlockLength>
 800f37c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	e0ad      	b.n	800f4e4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f390:	041b      	lsls	r3, r3, #16
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f003 fea8 	bl	80130ea <SDMMC_CmdAppCommand>
 800f39a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d001      	beq.n	800f3a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	e09e      	b.n	800f4e4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f3ac:	2308      	movs	r3, #8
 800f3ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f3b0:	2330      	movs	r3, #48	; 0x30
 800f3b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f107 0210 	add.w	r2, r7, #16
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f003 fd14 	bl	8012df8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f003 feee 	bl	80131b6 <SDMMC_CmdSendSCR>
 800f3da:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d027      	beq.n	800f432 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	e07e      	b.n	800f4e4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d113      	bne.n	800f41c <SD_FindSCR+0xcc>
 800f3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d110      	bne.n	800f41c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f003 fc72 	bl	8012ce8 <SDMMC_ReadFIFO>
 800f404:	4603      	mov	r3, r0
 800f406:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f003 fc6b 	bl	8012ce8 <SDMMC_ReadFIFO>
 800f412:	4603      	mov	r3, r0
 800f414:	60fb      	str	r3, [r7, #12]
      index++;
 800f416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f418:	3301      	adds	r3, #1
 800f41a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f41c:	f7f4 fd9c 	bl	8003f58 <HAL_GetTick>
 800f420:	4602      	mov	r2, r0
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42a:	d102      	bne.n	800f432 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f42c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f430:	e058      	b.n	800f4e4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f438:	f240 532a 	movw	r3, #1322	; 0x52a
 800f43c:	4013      	ands	r3, r2
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d0d1      	beq.n	800f3e6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	f003 0308 	and.w	r3, r3, #8
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d005      	beq.n	800f45c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2208      	movs	r2, #8
 800f456:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f458:	2308      	movs	r3, #8
 800f45a:	e043      	b.n	800f4e4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f462:	f003 0302 	and.w	r3, r3, #2
 800f466:	2b00      	cmp	r3, #0
 800f468:	d005      	beq.n	800f476 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2202      	movs	r2, #2
 800f470:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f472:	2302      	movs	r3, #2
 800f474:	e036      	b.n	800f4e4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f47c:	f003 0320 	and.w	r3, r3, #32
 800f480:	2b00      	cmp	r3, #0
 800f482:	d005      	beq.n	800f490 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2220      	movs	r2, #32
 800f48a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f48c:	2320      	movs	r3, #32
 800f48e:	e029      	b.n	800f4e4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a15      	ldr	r2, [pc, #84]	; (800f4ec <SD_FindSCR+0x19c>)
 800f496:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	061a      	lsls	r2, r3, #24
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	021b      	lsls	r3, r3, #8
 800f4a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f4a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	0a1b      	lsrs	r3, r3, #8
 800f4aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f4ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	0e1b      	lsrs	r3, r3, #24
 800f4b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b8:	601a      	str	r2, [r3, #0]
    scr++;
 800f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4bc:	3304      	adds	r3, #4
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	061a      	lsls	r2, r3, #24
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	021b      	lsls	r3, r3, #8
 800f4c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f4cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	0a1b      	lsrs	r3, r3, #8
 800f4d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f4d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	0e1b      	lsrs	r3, r3, #24
 800f4dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3738      	adds	r7, #56	; 0x38
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	18000f3a 	.word	0x18000f3a

0800f4f0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4fc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f502:	2b1f      	cmp	r3, #31
 800f504:	d936      	bls.n	800f574 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f506:	2300      	movs	r3, #0
 800f508:	617b      	str	r3, [r7, #20]
 800f50a:	e027      	b.n	800f55c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4618      	mov	r0, r3
 800f512:	f003 fbe9 	bl	8012ce8 <SDMMC_ReadFIFO>
 800f516:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	b2da      	uxtb	r2, r3
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	3301      	adds	r3, #1
 800f524:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	0a1b      	lsrs	r3, r3, #8
 800f52a:	b2da      	uxtb	r2, r3
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	3301      	adds	r3, #1
 800f534:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	0c1b      	lsrs	r3, r3, #16
 800f53a:	b2da      	uxtb	r2, r3
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	3301      	adds	r3, #1
 800f544:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	0e1b      	lsrs	r3, r3, #24
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	3301      	adds	r3, #1
 800f554:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	3301      	adds	r3, #1
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	2b07      	cmp	r3, #7
 800f560:	d9d4      	bls.n	800f50c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	693a      	ldr	r2, [r7, #16]
 800f566:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f56c:	f1a3 0220 	sub.w	r2, r3, #32
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f574:	bf00      	nop
 800f576:	3718      	adds	r7, #24
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	69db      	ldr	r3, [r3, #28]
 800f588:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	2b1f      	cmp	r3, #31
 800f590:	d93a      	bls.n	800f608 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f592:	2300      	movs	r3, #0
 800f594:	617b      	str	r3, [r7, #20]
 800f596:	e02b      	b.n	800f5f0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	021a      	lsls	r2, r3, #8
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	041a      	lsls	r2, r3, #16
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	061a      	lsls	r2, r3, #24
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f107 020c 	add.w	r2, r7, #12
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f003 fb8c 	bl	8012d02 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	617b      	str	r3, [r7, #20]
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	2b07      	cmp	r3, #7
 800f5f4:	d9d0      	bls.n	800f598 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a1b      	ldr	r3, [r3, #32]
 800f600:	f1a3 0220 	sub.w	r2, r3, #32
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	621a      	str	r2, [r3, #32]
  }
}
 800f608:	bf00      	nop
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f618:	bf00      	nop
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f62c:	bf00      	nop
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f640:	bf00      	nop
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f654:	bf00      	nop
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	e10f      	b.n	800f892 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a87      	ldr	r2, [pc, #540]	; (800f89c <HAL_SPI_Init+0x23c>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d00f      	beq.n	800f6a2 <HAL_SPI_Init+0x42>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a86      	ldr	r2, [pc, #536]	; (800f8a0 <HAL_SPI_Init+0x240>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d00a      	beq.n	800f6a2 <HAL_SPI_Init+0x42>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a84      	ldr	r2, [pc, #528]	; (800f8a4 <HAL_SPI_Init+0x244>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d005      	beq.n	800f6a2 <HAL_SPI_Init+0x42>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	2b0f      	cmp	r3, #15
 800f69c:	d901      	bls.n	800f6a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e0f7      	b.n	800f892 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fd5a 	bl	801015c <SPI_GetPacketSize>
 800f6a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a7b      	ldr	r2, [pc, #492]	; (800f89c <HAL_SPI_Init+0x23c>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d00c      	beq.n	800f6ce <HAL_SPI_Init+0x6e>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a79      	ldr	r2, [pc, #484]	; (800f8a0 <HAL_SPI_Init+0x240>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d007      	beq.n	800f6ce <HAL_SPI_Init+0x6e>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a78      	ldr	r2, [pc, #480]	; (800f8a4 <HAL_SPI_Init+0x244>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d002      	beq.n	800f6ce <HAL_SPI_Init+0x6e>
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2b08      	cmp	r3, #8
 800f6cc:	d811      	bhi.n	800f6f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f6d2:	4a72      	ldr	r2, [pc, #456]	; (800f89c <HAL_SPI_Init+0x23c>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d009      	beq.n	800f6ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a70      	ldr	r2, [pc, #448]	; (800f8a0 <HAL_SPI_Init+0x240>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d004      	beq.n	800f6ec <HAL_SPI_Init+0x8c>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a6f      	ldr	r2, [pc, #444]	; (800f8a4 <HAL_SPI_Init+0x244>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d104      	bne.n	800f6f6 <HAL_SPI_Init+0x96>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b10      	cmp	r3, #16
 800f6f0:	d901      	bls.n	800f6f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e0cd      	b.n	800f892 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d106      	bne.n	800f710 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7f3 fd94 	bl	8003238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f022 0201 	bic.w	r2, r2, #1
 800f726:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f732:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	699b      	ldr	r3, [r3, #24]
 800f738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f73c:	d119      	bne.n	800f772 <HAL_SPI_Init+0x112>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f746:	d103      	bne.n	800f750 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d008      	beq.n	800f762 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f754:	2b00      	cmp	r3, #0
 800f756:	d10c      	bne.n	800f772 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f75c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f760:	d107      	bne.n	800f772 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f770:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00f      	beq.n	800f79e <HAL_SPI_Init+0x13e>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	2b06      	cmp	r3, #6
 800f784:	d90b      	bls.n	800f79e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	430a      	orrs	r2, r1
 800f79a:	601a      	str	r2, [r3, #0]
 800f79c:	e007      	b.n	800f7ae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f7ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	69da      	ldr	r2, [r3, #28]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b6:	431a      	orrs	r2, r3
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	431a      	orrs	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7c0:	ea42 0103 	orr.w	r1, r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	68da      	ldr	r2, [r3, #12]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	430a      	orrs	r2, r1
 800f7ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d8:	431a      	orrs	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7de:	431a      	orrs	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	699b      	ldr	r3, [r3, #24]
 800f7e4:	431a      	orrs	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	431a      	orrs	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	695b      	ldr	r3, [r3, #20]
 800f7f0:	431a      	orrs	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	431a      	orrs	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	431a      	orrs	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f802:	431a      	orrs	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	431a      	orrs	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f80e:	ea42 0103 	orr.w	r1, r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	430a      	orrs	r2, r1
 800f81c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d113      	bne.n	800f84e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f838:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f84c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f022 0201 	bic.w	r2, r2, #1
 800f85c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	430a      	orrs	r2, r1
 800f87e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	40013000 	.word	0x40013000
 800f8a0:	40003800 	.word	0x40003800
 800f8a4:	40003c00 	.word	0x40003c00

0800f8a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b08a      	sub	sp, #40	; 0x28
 800f8ac:	af02      	add	r7, sp, #8
 800f8ae:	60f8      	str	r0, [r7, #12]
 800f8b0:	60b9      	str	r1, [r7, #8]
 800f8b2:	603b      	str	r3, [r7, #0]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3320      	adds	r3, #32
 800f8be:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d101      	bne.n	800f8d2 <HAL_SPI_Transmit+0x2a>
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	e1e1      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f8da:	f7f4 fb3d 	bl	8003f58 <HAL_GetTick>
 800f8de:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d007      	beq.n	800f8fc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f8f8:	7efb      	ldrb	r3, [r7, #27]
 800f8fa:	e1cc      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d002      	beq.n	800f908 <HAL_SPI_Transmit+0x60>
 800f902:	88fb      	ldrh	r3, [r7, #6]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d107      	bne.n	800f918 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f908:	2301      	movs	r3, #1
 800f90a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f914:	7efb      	ldrb	r3, [r7, #27]
 800f916:	e1be      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2203      	movs	r2, #3
 800f91c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	88fa      	ldrh	r2, [r7, #6]
 800f932:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	88fa      	ldrh	r2, [r7, #6]
 800f93a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2200      	movs	r2, #0
 800f942:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2200      	movs	r2, #0
 800f948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2200      	movs	r2, #0
 800f958:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2200      	movs	r2, #0
 800f95e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f968:	d108      	bne.n	800f97c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	e009      	b.n	800f990 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f98e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	685a      	ldr	r2, [r3, #4]
 800f996:	4b96      	ldr	r3, [pc, #600]	; (800fbf0 <HAL_SPI_Transmit+0x348>)
 800f998:	4013      	ands	r3, r2
 800f99a:	88f9      	ldrh	r1, [r7, #6]
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	6812      	ldr	r2, [r2, #0]
 800f9a0:	430b      	orrs	r3, r1
 800f9a2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f042 0201 	orr.w	r2, r2, #1
 800f9b2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f9bc:	d107      	bne.n	800f9ce <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	2b0f      	cmp	r3, #15
 800f9d4:	d947      	bls.n	800fa66 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f9d6:	e03f      	b.n	800fa58 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	f003 0302 	and.w	r3, r3, #2
 800f9e2:	2b02      	cmp	r3, #2
 800f9e4:	d114      	bne.n	800fa10 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	6812      	ldr	r2, [r2, #0]
 800f9f0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9f6:	1d1a      	adds	r2, r3, #4
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	3b01      	subs	r3, #1
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fa0e:	e023      	b.n	800fa58 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa10:	f7f4 faa2 	bl	8003f58 <HAL_GetTick>
 800fa14:	4602      	mov	r2, r0
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	683a      	ldr	r2, [r7, #0]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d803      	bhi.n	800fa28 <HAL_SPI_Transmit+0x180>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa26:	d102      	bne.n	800fa2e <HAL_SPI_Transmit+0x186>
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d114      	bne.n	800fa58 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f000 fac6 	bl	800ffc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fa54:	2303      	movs	r3, #3
 800fa56:	e11e      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1b9      	bne.n	800f9d8 <HAL_SPI_Transmit+0x130>
 800fa64:	e0f1      	b.n	800fc4a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	2b07      	cmp	r3, #7
 800fa6c:	f240 80e6 	bls.w	800fc3c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fa70:	e05d      	b.n	800fb2e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	695b      	ldr	r3, [r3, #20]
 800fa78:	f003 0302 	and.w	r3, r3, #2
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d132      	bne.n	800fae6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d918      	bls.n	800fabe <HAL_SPI_Transmit+0x216>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d014      	beq.n	800fabe <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6812      	ldr	r2, [r2, #0]
 800fa9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faa4:	1d1a      	adds	r2, r3, #4
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	3b02      	subs	r3, #2
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fabc:	e037      	b.n	800fb2e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fac2:	881a      	ldrh	r2, [r3, #0]
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800facc:	1c9a      	adds	r2, r3, #2
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fad8:	b29b      	uxth	r3, r3
 800fada:	3b01      	subs	r3, #1
 800fadc:	b29a      	uxth	r2, r3
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fae4:	e023      	b.n	800fb2e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fae6:	f7f4 fa37 	bl	8003f58 <HAL_GetTick>
 800faea:	4602      	mov	r2, r0
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	1ad3      	subs	r3, r2, r3
 800faf0:	683a      	ldr	r2, [r7, #0]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d803      	bhi.n	800fafe <HAL_SPI_Transmit+0x256>
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fafc:	d102      	bne.n	800fb04 <HAL_SPI_Transmit+0x25c>
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d114      	bne.n	800fb2e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f000 fa5b 	bl	800ffc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2201      	movs	r2, #1
 800fb26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	e0b3      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d19b      	bne.n	800fa72 <HAL_SPI_Transmit+0x1ca>
 800fb3a:	e086      	b.n	800fc4a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	695b      	ldr	r3, [r3, #20]
 800fb42:	f003 0302 	and.w	r3, r3, #2
 800fb46:	2b02      	cmp	r3, #2
 800fb48:	d154      	bne.n	800fbf4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	2b03      	cmp	r3, #3
 800fb54:	d918      	bls.n	800fb88 <HAL_SPI_Transmit+0x2e0>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb5a:	2b40      	cmp	r3, #64	; 0x40
 800fb5c:	d914      	bls.n	800fb88 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	6812      	ldr	r2, [r2, #0]
 800fb68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb6e:	1d1a      	adds	r2, r3, #4
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	3b04      	subs	r3, #4
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fb86:	e059      	b.n	800fc3c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d917      	bls.n	800fbc4 <HAL_SPI_Transmit+0x31c>
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d013      	beq.n	800fbc4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fba0:	881a      	ldrh	r2, [r3, #0]
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbaa:	1c9a      	adds	r2, r3, #2
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	3b02      	subs	r3, #2
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fbc2:	e03b      	b.n	800fc3c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	3320      	adds	r3, #32
 800fbce:	7812      	ldrb	r2, [r2, #0]
 800fbd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbd6:	1c5a      	adds	r2, r3, #1
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fbee:	e025      	b.n	800fc3c <HAL_SPI_Transmit+0x394>
 800fbf0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbf4:	f7f4 f9b0 	bl	8003f58 <HAL_GetTick>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	683a      	ldr	r2, [r7, #0]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d803      	bhi.n	800fc0c <HAL_SPI_Transmit+0x364>
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc0a:	d102      	bne.n	800fc12 <HAL_SPI_Transmit+0x36a>
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d114      	bne.n	800fc3c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f000 f9d4 	bl	800ffc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2201      	movs	r2, #1
 800fc34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e02c      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f47f af79 	bne.w	800fb3c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2200      	movs	r2, #0
 800fc52:	2108      	movs	r1, #8
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f000 fa53 	bl	8010100 <SPI_WaitOnFlagUntilTimeout>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d007      	beq.n	800fc70 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc66:	f043 0220 	orr.w	r2, r3, #32
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f000 f9a5 	bl	800ffc0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	e000      	b.n	800fc96 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fc94:	7efb      	ldrb	r3, [r7, #27]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3720      	adds	r7, #32
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop

0800fca0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b088      	sub	sp, #32
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	603b      	str	r3, [r7, #0]
 800fcac:	4613      	mov	r3, r2
 800fcae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	3330      	adds	r3, #48	; 0x30
 800fcba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d101      	bne.n	800fcca <HAL_SPI_Receive+0x2a>
 800fcc6:	2302      	movs	r3, #2
 800fcc8:	e173      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2201      	movs	r2, #1
 800fcce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcd2:	f7f4 f941 	bl	8003f58 <HAL_GetTick>
 800fcd6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d007      	beq.n	800fcf4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800fce4:	2302      	movs	r3, #2
 800fce6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fcf0:	7ffb      	ldrb	r3, [r7, #31]
 800fcf2:	e15e      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <HAL_SPI_Receive+0x60>
 800fcfa:	88fb      	ldrh	r3, [r7, #6]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d107      	bne.n	800fd10 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fd0c:	7ffb      	ldrb	r3, [r7, #31]
 800fd0e:	e150      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2204      	movs	r2, #4
 800fd14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	68ba      	ldr	r2, [r7, #8]
 800fd24:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	88fa      	ldrh	r2, [r7, #6]
 800fd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	88fa      	ldrh	r2, [r7, #6]
 800fd32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2200      	movs	r2, #0
 800fd56:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fd60:	d108      	bne.n	800fd74 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd70:	601a      	str	r2, [r3, #0]
 800fd72:	e009      	b.n	800fd88 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fd86:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	685a      	ldr	r2, [r3, #4]
 800fd8e:	4b8b      	ldr	r3, [pc, #556]	; (800ffbc <HAL_SPI_Receive+0x31c>)
 800fd90:	4013      	ands	r3, r2
 800fd92:	88f9      	ldrh	r1, [r7, #6]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	6812      	ldr	r2, [r2, #0]
 800fd98:	430b      	orrs	r3, r1
 800fd9a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f042 0201 	orr.w	r2, r2, #1
 800fdaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fdb4:	d107      	bne.n	800fdc6 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fdc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	2b0f      	cmp	r3, #15
 800fdcc:	d948      	bls.n	800fe60 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fdce:	e040      	b.n	800fe52 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	695a      	ldr	r2, [r3, #20]
 800fdd6:	f248 0308 	movw	r3, #32776	; 0x8008
 800fdda:	4013      	ands	r3, r2
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d014      	beq.n	800fe0a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fde8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fdea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdf0:	1d1a      	adds	r2, r3, #4
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fe08:	e023      	b.n	800fe52 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe0a:	f7f4 f8a5 	bl	8003f58 <HAL_GetTick>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d803      	bhi.n	800fe22 <HAL_SPI_Receive+0x182>
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe20:	d102      	bne.n	800fe28 <HAL_SPI_Receive+0x188>
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d114      	bne.n	800fe52 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f000 f8c9 	bl	800ffc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	e0af      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1b8      	bne.n	800fdd0 <HAL_SPI_Receive+0x130>
 800fe5e:	e095      	b.n	800ff8c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	2b07      	cmp	r3, #7
 800fe66:	f240 808b 	bls.w	800ff80 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fe6a:	e03f      	b.n	800feec <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d114      	bne.n	800fea4 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe7e:	69ba      	ldr	r2, [r7, #24]
 800fe80:	8812      	ldrh	r2, [r2, #0]
 800fe82:	b292      	uxth	r2, r2
 800fe84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe8a:	1c9a      	adds	r2, r3, #2
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fea2:	e023      	b.n	800feec <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fea4:	f7f4 f858 	bl	8003f58 <HAL_GetTick>
 800fea8:	4602      	mov	r2, r0
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d803      	bhi.n	800febc <HAL_SPI_Receive+0x21c>
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feba:	d102      	bne.n	800fec2 <HAL_SPI_Receive+0x222>
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d114      	bne.n	800feec <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f000 f87c 	bl	800ffc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fee8:	2303      	movs	r3, #3
 800feea:	e062      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1b9      	bne.n	800fe6c <HAL_SPI_Receive+0x1cc>
 800fef8:	e048      	b.n	800ff8c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d117      	bne.n	800ff38 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff14:	7812      	ldrb	r2, [r2, #0]
 800ff16:	b2d2      	uxtb	r2, r2
 800ff18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff36:	e023      	b.n	800ff80 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff38:	f7f4 f80e 	bl	8003f58 <HAL_GetTick>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	683a      	ldr	r2, [r7, #0]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d803      	bhi.n	800ff50 <HAL_SPI_Receive+0x2b0>
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4e:	d102      	bne.n	800ff56 <HAL_SPI_Receive+0x2b6>
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d114      	bne.n	800ff80 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f000 f832 	bl	800ffc0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	e018      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1b6      	bne.n	800fefa <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ff8c:	68f8      	ldr	r0, [r7, #12]
 800ff8e:	f000 f817 	bl	800ffc0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d001      	beq.n	800ffb0 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	e000      	b.n	800ffb2 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800ffb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3720      	adds	r7, #32
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	ffff0000 	.word	0xffff0000

0800ffc0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	695b      	ldr	r3, [r3, #20]
 800ffce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	699a      	ldr	r2, [r3, #24]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f042 0208 	orr.w	r2, r2, #8
 800ffde:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	699a      	ldr	r2, [r3, #24]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f042 0210 	orr.w	r2, r2, #16
 800ffee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f022 0201 	bic.w	r2, r2, #1
 800fffe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	6919      	ldr	r1, [r3, #16]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	4b3c      	ldr	r3, [pc, #240]	; (80100fc <SPI_CloseTransfer+0x13c>)
 801000c:	400b      	ands	r3, r1
 801000e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	689a      	ldr	r2, [r3, #8]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801001e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b04      	cmp	r3, #4
 801002a:	d014      	beq.n	8010056 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	f003 0320 	and.w	r3, r3, #32
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00f      	beq.n	8010056 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801003c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	699a      	ldr	r2, [r3, #24]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f042 0220 	orr.w	r2, r2, #32
 8010054:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801005c:	b2db      	uxtb	r3, r3
 801005e:	2b03      	cmp	r3, #3
 8010060:	d014      	beq.n	801008c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00f      	beq.n	801008c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010072:	f043 0204 	orr.w	r2, r3, #4
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	699a      	ldr	r2, [r3, #24]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801008a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00f      	beq.n	80100b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801009c:	f043 0201 	orr.w	r2, r3, #1
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	699a      	ldr	r2, [r3, #24]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00f      	beq.n	80100e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100c6:	f043 0208 	orr.w	r2, r3, #8
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	699a      	ldr	r2, [r3, #24]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80100f0:	bf00      	nop
 80100f2:	3714      	adds	r7, #20
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	fffffc90 	.word	0xfffffc90

08010100 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	603b      	str	r3, [r7, #0]
 801010c:	4613      	mov	r3, r2
 801010e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010110:	e010      	b.n	8010134 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010112:	f7f3 ff21 	bl	8003f58 <HAL_GetTick>
 8010116:	4602      	mov	r2, r0
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	683a      	ldr	r2, [r7, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d803      	bhi.n	801012a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010128:	d102      	bne.n	8010130 <SPI_WaitOnFlagUntilTimeout+0x30>
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010130:	2303      	movs	r3, #3
 8010132:	e00f      	b.n	8010154 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	695a      	ldr	r2, [r3, #20]
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	4013      	ands	r3, r2
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	429a      	cmp	r2, r3
 8010142:	bf0c      	ite	eq
 8010144:	2301      	moveq	r3, #1
 8010146:	2300      	movne	r3, #0
 8010148:	b2db      	uxtb	r3, r3
 801014a:	461a      	mov	r2, r3
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	429a      	cmp	r2, r3
 8010150:	d0df      	beq.n	8010112 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010152:	2300      	movs	r3, #0
}
 8010154:	4618      	mov	r0, r3
 8010156:	3710      	adds	r7, #16
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010168:	095b      	lsrs	r3, r3, #5
 801016a:	3301      	adds	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	3301      	adds	r3, #1
 8010174:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	3307      	adds	r3, #7
 801017a:	08db      	lsrs	r3, r3, #3
 801017c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	fb02 f303 	mul.w	r3, r2, r3
}
 8010186:	4618      	mov	r0, r3
 8010188:	3714      	adds	r7, #20
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr

08010192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d101      	bne.n	80101a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	e049      	b.n	8010238 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d106      	bne.n	80101be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7f3 fa8f 	bl	80036dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2202      	movs	r2, #2
 80101c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3304      	adds	r3, #4
 80101ce:	4619      	mov	r1, r3
 80101d0:	4610      	mov	r0, r2
 80101d2:	f000 ff29 	bl	8011028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2201      	movs	r2, #1
 80101da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2201      	movs	r2, #1
 80101ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2201      	movs	r2, #1
 8010202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2201      	movs	r2, #1
 801020a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2201      	movs	r2, #1
 8010212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2201      	movs	r2, #1
 801021a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2201      	movs	r2, #1
 8010222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2201      	movs	r2, #1
 8010232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010236:	2300      	movs	r3, #0
}
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d101      	bne.n	8010252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801024e:	2301      	movs	r3, #1
 8010250:	e049      	b.n	80102e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d106      	bne.n	801026c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7f3 f8a2 	bl	80033b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2202      	movs	r2, #2
 8010270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3304      	adds	r3, #4
 801027c:	4619      	mov	r1, r3
 801027e:	4610      	mov	r0, r2
 8010280:	f000 fed2 	bl	8011028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2201      	movs	r2, #1
 8010288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2201      	movs	r2, #1
 80102c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3708      	adds	r7, #8
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
	...

080102f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d109      	bne.n	8010314 <HAL_TIM_PWM_Start+0x24>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010306:	b2db      	uxtb	r3, r3
 8010308:	2b01      	cmp	r3, #1
 801030a:	bf14      	ite	ne
 801030c:	2301      	movne	r3, #1
 801030e:	2300      	moveq	r3, #0
 8010310:	b2db      	uxtb	r3, r3
 8010312:	e03c      	b.n	801038e <HAL_TIM_PWM_Start+0x9e>
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	2b04      	cmp	r3, #4
 8010318:	d109      	bne.n	801032e <HAL_TIM_PWM_Start+0x3e>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010320:	b2db      	uxtb	r3, r3
 8010322:	2b01      	cmp	r3, #1
 8010324:	bf14      	ite	ne
 8010326:	2301      	movne	r3, #1
 8010328:	2300      	moveq	r3, #0
 801032a:	b2db      	uxtb	r3, r3
 801032c:	e02f      	b.n	801038e <HAL_TIM_PWM_Start+0x9e>
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	2b08      	cmp	r3, #8
 8010332:	d109      	bne.n	8010348 <HAL_TIM_PWM_Start+0x58>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801033a:	b2db      	uxtb	r3, r3
 801033c:	2b01      	cmp	r3, #1
 801033e:	bf14      	ite	ne
 8010340:	2301      	movne	r3, #1
 8010342:	2300      	moveq	r3, #0
 8010344:	b2db      	uxtb	r3, r3
 8010346:	e022      	b.n	801038e <HAL_TIM_PWM_Start+0x9e>
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	2b0c      	cmp	r3, #12
 801034c:	d109      	bne.n	8010362 <HAL_TIM_PWM_Start+0x72>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010354:	b2db      	uxtb	r3, r3
 8010356:	2b01      	cmp	r3, #1
 8010358:	bf14      	ite	ne
 801035a:	2301      	movne	r3, #1
 801035c:	2300      	moveq	r3, #0
 801035e:	b2db      	uxtb	r3, r3
 8010360:	e015      	b.n	801038e <HAL_TIM_PWM_Start+0x9e>
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	2b10      	cmp	r3, #16
 8010366:	d109      	bne.n	801037c <HAL_TIM_PWM_Start+0x8c>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b01      	cmp	r3, #1
 8010372:	bf14      	ite	ne
 8010374:	2301      	movne	r3, #1
 8010376:	2300      	moveq	r3, #0
 8010378:	b2db      	uxtb	r3, r3
 801037a:	e008      	b.n	801038e <HAL_TIM_PWM_Start+0x9e>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b01      	cmp	r3, #1
 8010386:	bf14      	ite	ne
 8010388:	2301      	movne	r3, #1
 801038a:	2300      	moveq	r3, #0
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010392:	2301      	movs	r3, #1
 8010394:	e0ab      	b.n	80104ee <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d104      	bne.n	80103a6 <HAL_TIM_PWM_Start+0xb6>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2202      	movs	r2, #2
 80103a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103a4:	e023      	b.n	80103ee <HAL_TIM_PWM_Start+0xfe>
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	2b04      	cmp	r3, #4
 80103aa:	d104      	bne.n	80103b6 <HAL_TIM_PWM_Start+0xc6>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2202      	movs	r2, #2
 80103b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103b4:	e01b      	b.n	80103ee <HAL_TIM_PWM_Start+0xfe>
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b08      	cmp	r3, #8
 80103ba:	d104      	bne.n	80103c6 <HAL_TIM_PWM_Start+0xd6>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2202      	movs	r2, #2
 80103c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103c4:	e013      	b.n	80103ee <HAL_TIM_PWM_Start+0xfe>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	2b0c      	cmp	r3, #12
 80103ca:	d104      	bne.n	80103d6 <HAL_TIM_PWM_Start+0xe6>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2202      	movs	r2, #2
 80103d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103d4:	e00b      	b.n	80103ee <HAL_TIM_PWM_Start+0xfe>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b10      	cmp	r3, #16
 80103da:	d104      	bne.n	80103e6 <HAL_TIM_PWM_Start+0xf6>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2202      	movs	r2, #2
 80103e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80103e4:	e003      	b.n	80103ee <HAL_TIM_PWM_Start+0xfe>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2202      	movs	r2, #2
 80103ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2201      	movs	r2, #1
 80103f4:	6839      	ldr	r1, [r7, #0]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f001 f992 	bl	8011720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a3d      	ldr	r2, [pc, #244]	; (80104f8 <HAL_TIM_PWM_Start+0x208>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d013      	beq.n	801042e <HAL_TIM_PWM_Start+0x13e>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a3c      	ldr	r2, [pc, #240]	; (80104fc <HAL_TIM_PWM_Start+0x20c>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d00e      	beq.n	801042e <HAL_TIM_PWM_Start+0x13e>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4a3a      	ldr	r2, [pc, #232]	; (8010500 <HAL_TIM_PWM_Start+0x210>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d009      	beq.n	801042e <HAL_TIM_PWM_Start+0x13e>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4a39      	ldr	r2, [pc, #228]	; (8010504 <HAL_TIM_PWM_Start+0x214>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d004      	beq.n	801042e <HAL_TIM_PWM_Start+0x13e>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a37      	ldr	r2, [pc, #220]	; (8010508 <HAL_TIM_PWM_Start+0x218>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d101      	bne.n	8010432 <HAL_TIM_PWM_Start+0x142>
 801042e:	2301      	movs	r3, #1
 8010430:	e000      	b.n	8010434 <HAL_TIM_PWM_Start+0x144>
 8010432:	2300      	movs	r3, #0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d007      	beq.n	8010448 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010446:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a2a      	ldr	r2, [pc, #168]	; (80104f8 <HAL_TIM_PWM_Start+0x208>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d02c      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801045a:	d027      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a2a      	ldr	r2, [pc, #168]	; (801050c <HAL_TIM_PWM_Start+0x21c>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d022      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a29      	ldr	r2, [pc, #164]	; (8010510 <HAL_TIM_PWM_Start+0x220>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d01d      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a27      	ldr	r2, [pc, #156]	; (8010514 <HAL_TIM_PWM_Start+0x224>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d018      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4a1f      	ldr	r2, [pc, #124]	; (80104fc <HAL_TIM_PWM_Start+0x20c>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d013      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a23      	ldr	r2, [pc, #140]	; (8010518 <HAL_TIM_PWM_Start+0x228>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d00e      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4a1b      	ldr	r2, [pc, #108]	; (8010500 <HAL_TIM_PWM_Start+0x210>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d009      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a1f      	ldr	r2, [pc, #124]	; (801051c <HAL_TIM_PWM_Start+0x22c>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d004      	beq.n	80104ac <HAL_TIM_PWM_Start+0x1bc>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a1e      	ldr	r2, [pc, #120]	; (8010520 <HAL_TIM_PWM_Start+0x230>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d115      	bne.n	80104d8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	689a      	ldr	r2, [r3, #8]
 80104b2:	4b1c      	ldr	r3, [pc, #112]	; (8010524 <HAL_TIM_PWM_Start+0x234>)
 80104b4:	4013      	ands	r3, r2
 80104b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2b06      	cmp	r3, #6
 80104bc:	d015      	beq.n	80104ea <HAL_TIM_PWM_Start+0x1fa>
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104c4:	d011      	beq.n	80104ea <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	681a      	ldr	r2, [r3, #0]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f042 0201 	orr.w	r2, r2, #1
 80104d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104d6:	e008      	b.n	80104ea <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f042 0201 	orr.w	r2, r2, #1
 80104e6:	601a      	str	r2, [r3, #0]
 80104e8:	e000      	b.n	80104ec <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	40010000 	.word	0x40010000
 80104fc:	40010400 	.word	0x40010400
 8010500:	40014000 	.word	0x40014000
 8010504:	40014400 	.word	0x40014400
 8010508:	40014800 	.word	0x40014800
 801050c:	40000400 	.word	0x40000400
 8010510:	40000800 	.word	0x40000800
 8010514:	40000c00 	.word	0x40000c00
 8010518:	40001800 	.word	0x40001800
 801051c:	4000e000 	.word	0x4000e000
 8010520:	4000e400 	.word	0x4000e400
 8010524:	00010007 	.word	0x00010007

08010528 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b086      	sub	sp, #24
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010536:	2300      	movs	r3, #0
 8010538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d109      	bne.n	8010554 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010546:	b2db      	uxtb	r3, r3
 8010548:	2b02      	cmp	r3, #2
 801054a:	bf0c      	ite	eq
 801054c:	2301      	moveq	r3, #1
 801054e:	2300      	movne	r3, #0
 8010550:	b2db      	uxtb	r3, r3
 8010552:	e03c      	b.n	80105ce <HAL_TIM_PWM_Start_DMA+0xa6>
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	2b04      	cmp	r3, #4
 8010558:	d109      	bne.n	801056e <HAL_TIM_PWM_Start_DMA+0x46>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b02      	cmp	r3, #2
 8010564:	bf0c      	ite	eq
 8010566:	2301      	moveq	r3, #1
 8010568:	2300      	movne	r3, #0
 801056a:	b2db      	uxtb	r3, r3
 801056c:	e02f      	b.n	80105ce <HAL_TIM_PWM_Start_DMA+0xa6>
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	2b08      	cmp	r3, #8
 8010572:	d109      	bne.n	8010588 <HAL_TIM_PWM_Start_DMA+0x60>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b02      	cmp	r3, #2
 801057e:	bf0c      	ite	eq
 8010580:	2301      	moveq	r3, #1
 8010582:	2300      	movne	r3, #0
 8010584:	b2db      	uxtb	r3, r3
 8010586:	e022      	b.n	80105ce <HAL_TIM_PWM_Start_DMA+0xa6>
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2b0c      	cmp	r3, #12
 801058c:	d109      	bne.n	80105a2 <HAL_TIM_PWM_Start_DMA+0x7a>
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010594:	b2db      	uxtb	r3, r3
 8010596:	2b02      	cmp	r3, #2
 8010598:	bf0c      	ite	eq
 801059a:	2301      	moveq	r3, #1
 801059c:	2300      	movne	r3, #0
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	e015      	b.n	80105ce <HAL_TIM_PWM_Start_DMA+0xa6>
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	2b10      	cmp	r3, #16
 80105a6:	d109      	bne.n	80105bc <HAL_TIM_PWM_Start_DMA+0x94>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	bf0c      	ite	eq
 80105b4:	2301      	moveq	r3, #1
 80105b6:	2300      	movne	r3, #0
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	e008      	b.n	80105ce <HAL_TIM_PWM_Start_DMA+0xa6>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	2b02      	cmp	r3, #2
 80105c6:	bf0c      	ite	eq
 80105c8:	2301      	moveq	r3, #1
 80105ca:	2300      	movne	r3, #0
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80105d2:	2302      	movs	r3, #2
 80105d4:	e1ba      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d109      	bne.n	80105f0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	bf0c      	ite	eq
 80105e8:	2301      	moveq	r3, #1
 80105ea:	2300      	movne	r3, #0
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	e03c      	b.n	801066a <HAL_TIM_PWM_Start_DMA+0x142>
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d109      	bne.n	801060a <HAL_TIM_PWM_Start_DMA+0xe2>
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b01      	cmp	r3, #1
 8010600:	bf0c      	ite	eq
 8010602:	2301      	moveq	r3, #1
 8010604:	2300      	movne	r3, #0
 8010606:	b2db      	uxtb	r3, r3
 8010608:	e02f      	b.n	801066a <HAL_TIM_PWM_Start_DMA+0x142>
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	2b08      	cmp	r3, #8
 801060e:	d109      	bne.n	8010624 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b01      	cmp	r3, #1
 801061a:	bf0c      	ite	eq
 801061c:	2301      	moveq	r3, #1
 801061e:	2300      	movne	r3, #0
 8010620:	b2db      	uxtb	r3, r3
 8010622:	e022      	b.n	801066a <HAL_TIM_PWM_Start_DMA+0x142>
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2b0c      	cmp	r3, #12
 8010628:	d109      	bne.n	801063e <HAL_TIM_PWM_Start_DMA+0x116>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010630:	b2db      	uxtb	r3, r3
 8010632:	2b01      	cmp	r3, #1
 8010634:	bf0c      	ite	eq
 8010636:	2301      	moveq	r3, #1
 8010638:	2300      	movne	r3, #0
 801063a:	b2db      	uxtb	r3, r3
 801063c:	e015      	b.n	801066a <HAL_TIM_PWM_Start_DMA+0x142>
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b10      	cmp	r3, #16
 8010642:	d109      	bne.n	8010658 <HAL_TIM_PWM_Start_DMA+0x130>
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b01      	cmp	r3, #1
 801064e:	bf0c      	ite	eq
 8010650:	2301      	moveq	r3, #1
 8010652:	2300      	movne	r3, #0
 8010654:	b2db      	uxtb	r3, r3
 8010656:	e008      	b.n	801066a <HAL_TIM_PWM_Start_DMA+0x142>
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b01      	cmp	r3, #1
 8010662:	bf0c      	ite	eq
 8010664:	2301      	moveq	r3, #1
 8010666:	2300      	movne	r3, #0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b00      	cmp	r3, #0
 801066c:	d034      	beq.n	80106d8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d002      	beq.n	801067a <HAL_TIM_PWM_Start_DMA+0x152>
 8010674:	887b      	ldrh	r3, [r7, #2]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d101      	bne.n	801067e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	e166      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d104      	bne.n	801068e <HAL_TIM_PWM_Start_DMA+0x166>
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2202      	movs	r2, #2
 8010688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801068c:	e026      	b.n	80106dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b04      	cmp	r3, #4
 8010692:	d104      	bne.n	801069e <HAL_TIM_PWM_Start_DMA+0x176>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2202      	movs	r2, #2
 8010698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801069c:	e01e      	b.n	80106dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b08      	cmp	r3, #8
 80106a2:	d104      	bne.n	80106ae <HAL_TIM_PWM_Start_DMA+0x186>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2202      	movs	r2, #2
 80106a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106ac:	e016      	b.n	80106dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	2b0c      	cmp	r3, #12
 80106b2:	d104      	bne.n	80106be <HAL_TIM_PWM_Start_DMA+0x196>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106bc:	e00e      	b.n	80106dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2b10      	cmp	r3, #16
 80106c2:	d104      	bne.n	80106ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2202      	movs	r2, #2
 80106c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80106cc:	e006      	b.n	80106dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2202      	movs	r2, #2
 80106d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80106d6:	e001      	b.n	80106dc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80106d8:	2301      	movs	r3, #1
 80106da:	e137      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	2b0c      	cmp	r3, #12
 80106e0:	f200 80ae 	bhi.w	8010840 <HAL_TIM_PWM_Start_DMA+0x318>
 80106e4:	a201      	add	r2, pc, #4	; (adr r2, 80106ec <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80106e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ea:	bf00      	nop
 80106ec:	08010721 	.word	0x08010721
 80106f0:	08010841 	.word	0x08010841
 80106f4:	08010841 	.word	0x08010841
 80106f8:	08010841 	.word	0x08010841
 80106fc:	08010769 	.word	0x08010769
 8010700:	08010841 	.word	0x08010841
 8010704:	08010841 	.word	0x08010841
 8010708:	08010841 	.word	0x08010841
 801070c:	080107b1 	.word	0x080107b1
 8010710:	08010841 	.word	0x08010841
 8010714:	08010841 	.word	0x08010841
 8010718:	08010841 	.word	0x08010841
 801071c:	080107f9 	.word	0x080107f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010724:	4a8b      	ldr	r2, [pc, #556]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010726:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072c:	4a8a      	ldr	r2, [pc, #552]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x430>)
 801072e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010734:	4a89      	ldr	r2, [pc, #548]	; (801095c <HAL_TIM_PWM_Start_DMA+0x434>)
 8010736:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801073c:	6879      	ldr	r1, [r7, #4]
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3334      	adds	r3, #52	; 0x34
 8010744:	461a      	mov	r2, r3
 8010746:	887b      	ldrh	r3, [r7, #2]
 8010748:	f7f6 f872 	bl	8006830 <HAL_DMA_Start_IT>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d001      	beq.n	8010756 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	e0fa      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	68da      	ldr	r2, [r3, #12]
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010764:	60da      	str	r2, [r3, #12]
      break;
 8010766:	e06e      	b.n	8010846 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801076c:	4a79      	ldr	r2, [pc, #484]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801076e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010774:	4a78      	ldr	r2, [pc, #480]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801077c:	4a77      	ldr	r2, [pc, #476]	; (801095c <HAL_TIM_PWM_Start_DMA+0x434>)
 801077e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010784:	6879      	ldr	r1, [r7, #4]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3338      	adds	r3, #56	; 0x38
 801078c:	461a      	mov	r2, r3
 801078e:	887b      	ldrh	r3, [r7, #2]
 8010790:	f7f6 f84e 	bl	8006830 <HAL_DMA_Start_IT>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801079a:	2301      	movs	r3, #1
 801079c:	e0d6      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	68da      	ldr	r2, [r3, #12]
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107ac:	60da      	str	r2, [r3, #12]
      break;
 80107ae:	e04a      	b.n	8010846 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b4:	4a67      	ldr	r2, [pc, #412]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80107b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107bc:	4a66      	ldr	r2, [pc, #408]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x430>)
 80107be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c4:	4a65      	ldr	r2, [pc, #404]	; (801095c <HAL_TIM_PWM_Start_DMA+0x434>)
 80107c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80107cc:	6879      	ldr	r1, [r7, #4]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	333c      	adds	r3, #60	; 0x3c
 80107d4:	461a      	mov	r2, r3
 80107d6:	887b      	ldrh	r3, [r7, #2]
 80107d8:	f7f6 f82a 	bl	8006830 <HAL_DMA_Start_IT>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d001      	beq.n	80107e6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e0b2      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	68da      	ldr	r2, [r3, #12]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80107f4:	60da      	str	r2, [r3, #12]
      break;
 80107f6:	e026      	b.n	8010846 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107fc:	4a55      	ldr	r2, [pc, #340]	; (8010954 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80107fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010804:	4a54      	ldr	r2, [pc, #336]	; (8010958 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010806:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080c:	4a53      	ldr	r2, [pc, #332]	; (801095c <HAL_TIM_PWM_Start_DMA+0x434>)
 801080e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010814:	6879      	ldr	r1, [r7, #4]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	3340      	adds	r3, #64	; 0x40
 801081c:	461a      	mov	r2, r3
 801081e:	887b      	ldrh	r3, [r7, #2]
 8010820:	f7f6 f806 	bl	8006830 <HAL_DMA_Start_IT>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d001      	beq.n	801082e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801082a:	2301      	movs	r3, #1
 801082c:	e08e      	b.n	801094c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	68da      	ldr	r2, [r3, #12]
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801083c:	60da      	str	r2, [r3, #12]
      break;
 801083e:	e002      	b.n	8010846 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010840:	2301      	movs	r3, #1
 8010842:	75fb      	strb	r3, [r7, #23]
      break;
 8010844:	bf00      	nop
  }

  if (status == HAL_OK)
 8010846:	7dfb      	ldrb	r3, [r7, #23]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d17e      	bne.n	801094a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2201      	movs	r2, #1
 8010852:	68b9      	ldr	r1, [r7, #8]
 8010854:	4618      	mov	r0, r3
 8010856:	f000 ff63 	bl	8011720 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a40      	ldr	r2, [pc, #256]	; (8010960 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d013      	beq.n	801088c <HAL_TIM_PWM_Start_DMA+0x364>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a3e      	ldr	r2, [pc, #248]	; (8010964 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d00e      	beq.n	801088c <HAL_TIM_PWM_Start_DMA+0x364>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	4a3d      	ldr	r2, [pc, #244]	; (8010968 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010874:	4293      	cmp	r3, r2
 8010876:	d009      	beq.n	801088c <HAL_TIM_PWM_Start_DMA+0x364>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a3b      	ldr	r2, [pc, #236]	; (801096c <HAL_TIM_PWM_Start_DMA+0x444>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d004      	beq.n	801088c <HAL_TIM_PWM_Start_DMA+0x364>
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a3a      	ldr	r2, [pc, #232]	; (8010970 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d101      	bne.n	8010890 <HAL_TIM_PWM_Start_DMA+0x368>
 801088c:	2301      	movs	r3, #1
 801088e:	e000      	b.n	8010892 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010890:	2300      	movs	r3, #0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d007      	beq.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4a2d      	ldr	r2, [pc, #180]	; (8010960 <HAL_TIM_PWM_Start_DMA+0x438>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d02c      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108b8:	d027      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a2d      	ldr	r2, [pc, #180]	; (8010974 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d022      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a2b      	ldr	r2, [pc, #172]	; (8010978 <HAL_TIM_PWM_Start_DMA+0x450>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d01d      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a2a      	ldr	r2, [pc, #168]	; (801097c <HAL_TIM_PWM_Start_DMA+0x454>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d018      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a21      	ldr	r2, [pc, #132]	; (8010964 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d013      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a26      	ldr	r2, [pc, #152]	; (8010980 <HAL_TIM_PWM_Start_DMA+0x458>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d00e      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a1d      	ldr	r2, [pc, #116]	; (8010968 <HAL_TIM_PWM_Start_DMA+0x440>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d009      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a22      	ldr	r2, [pc, #136]	; (8010984 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d004      	beq.n	801090a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a20      	ldr	r2, [pc, #128]	; (8010988 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d115      	bne.n	8010936 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	689a      	ldr	r2, [r3, #8]
 8010910:	4b1e      	ldr	r3, [pc, #120]	; (801098c <HAL_TIM_PWM_Start_DMA+0x464>)
 8010912:	4013      	ands	r3, r2
 8010914:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	2b06      	cmp	r3, #6
 801091a:	d015      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x420>
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010922:	d011      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f042 0201 	orr.w	r2, r2, #1
 8010932:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010934:	e008      	b.n	8010948 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f042 0201 	orr.w	r2, r2, #1
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	e000      	b.n	801094a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010948:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801094a:	7dfb      	ldrb	r3, [r7, #23]
}
 801094c:	4618      	mov	r0, r3
 801094e:	3718      	adds	r7, #24
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	08010f17 	.word	0x08010f17
 8010958:	08010fbf 	.word	0x08010fbf
 801095c:	08010e85 	.word	0x08010e85
 8010960:	40010000 	.word	0x40010000
 8010964:	40010400 	.word	0x40010400
 8010968:	40014000 	.word	0x40014000
 801096c:	40014400 	.word	0x40014400
 8010970:	40014800 	.word	0x40014800
 8010974:	40000400 	.word	0x40000400
 8010978:	40000800 	.word	0x40000800
 801097c:	40000c00 	.word	0x40000c00
 8010980:	40001800 	.word	0x40001800
 8010984:	4000e000 	.word	0x4000e000
 8010988:	4000e400 	.word	0x4000e400
 801098c:	00010007 	.word	0x00010007

08010990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	691b      	ldr	r3, [r3, #16]
 801099e:	f003 0302 	and.w	r3, r3, #2
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d122      	bne.n	80109ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	f003 0302 	and.w	r3, r3, #2
 80109b0:	2b02      	cmp	r3, #2
 80109b2:	d11b      	bne.n	80109ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f06f 0202 	mvn.w	r2, #2
 80109bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2201      	movs	r2, #1
 80109c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	f003 0303 	and.w	r3, r3, #3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d003      	beq.n	80109da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 fa24 	bl	8010e20 <HAL_TIM_IC_CaptureCallback>
 80109d8:	e005      	b.n	80109e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 fa16 	bl	8010e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fa27 	bl	8010e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	f003 0304 	and.w	r3, r3, #4
 80109f6:	2b04      	cmp	r3, #4
 80109f8:	d122      	bne.n	8010a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	f003 0304 	and.w	r3, r3, #4
 8010a04:	2b04      	cmp	r3, #4
 8010a06:	d11b      	bne.n	8010a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f06f 0204 	mvn.w	r2, #4
 8010a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2202      	movs	r2, #2
 8010a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	699b      	ldr	r3, [r3, #24]
 8010a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d003      	beq.n	8010a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 f9fa 	bl	8010e20 <HAL_TIM_IC_CaptureCallback>
 8010a2c:	e005      	b.n	8010a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f9ec 	bl	8010e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 f9fd 	bl	8010e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	f003 0308 	and.w	r3, r3, #8
 8010a4a:	2b08      	cmp	r3, #8
 8010a4c:	d122      	bne.n	8010a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	f003 0308 	and.w	r3, r3, #8
 8010a58:	2b08      	cmp	r3, #8
 8010a5a:	d11b      	bne.n	8010a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f06f 0208 	mvn.w	r2, #8
 8010a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2204      	movs	r2, #4
 8010a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	69db      	ldr	r3, [r3, #28]
 8010a72:	f003 0303 	and.w	r3, r3, #3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d003      	beq.n	8010a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 f9d0 	bl	8010e20 <HAL_TIM_IC_CaptureCallback>
 8010a80:	e005      	b.n	8010a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 f9c2 	bl	8010e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 f9d3 	bl	8010e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2200      	movs	r2, #0
 8010a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	f003 0310 	and.w	r3, r3, #16
 8010a9e:	2b10      	cmp	r3, #16
 8010aa0:	d122      	bne.n	8010ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	f003 0310 	and.w	r3, r3, #16
 8010aac:	2b10      	cmp	r3, #16
 8010aae:	d11b      	bne.n	8010ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f06f 0210 	mvn.w	r2, #16
 8010ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2208      	movs	r2, #8
 8010abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	69db      	ldr	r3, [r3, #28]
 8010ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d003      	beq.n	8010ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f9a6 	bl	8010e20 <HAL_TIM_IC_CaptureCallback>
 8010ad4:	e005      	b.n	8010ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 f998 	bl	8010e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f9a9 	bl	8010e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d10e      	bne.n	8010b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	f003 0301 	and.w	r3, r3, #1
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d107      	bne.n	8010b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f06f 0201 	mvn.w	r2, #1
 8010b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 f972 	bl	8010df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	691b      	ldr	r3, [r3, #16]
 8010b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b1e:	2b80      	cmp	r3, #128	; 0x80
 8010b20:	d10e      	bne.n	8010b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b2c:	2b80      	cmp	r3, #128	; 0x80
 8010b2e:	d107      	bne.n	8010b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 febc 	bl	80118b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b4e:	d10e      	bne.n	8010b6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b5a:	2b80      	cmp	r3, #128	; 0x80
 8010b5c:	d107      	bne.n	8010b6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 feaf 	bl	80118cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b78:	2b40      	cmp	r3, #64	; 0x40
 8010b7a:	d10e      	bne.n	8010b9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b86:	2b40      	cmp	r3, #64	; 0x40
 8010b88:	d107      	bne.n	8010b9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f961 	bl	8010e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	691b      	ldr	r3, [r3, #16]
 8010ba0:	f003 0320 	and.w	r3, r3, #32
 8010ba4:	2b20      	cmp	r3, #32
 8010ba6:	d10e      	bne.n	8010bc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	f003 0320 	and.w	r3, r3, #32
 8010bb2:	2b20      	cmp	r3, #32
 8010bb4:	d107      	bne.n	8010bc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f06f 0220 	mvn.w	r2, #32
 8010bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fe6f 	bl	80118a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010bc6:	bf00      	nop
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
	...

08010bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b086      	sub	sp, #24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d101      	bne.n	8010bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010bea:	2302      	movs	r3, #2
 8010bec:	e0ff      	b.n	8010dee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2b14      	cmp	r3, #20
 8010bfa:	f200 80f0 	bhi.w	8010dde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010bfe:	a201      	add	r2, pc, #4	; (adr r2, 8010c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c04:	08010c59 	.word	0x08010c59
 8010c08:	08010ddf 	.word	0x08010ddf
 8010c0c:	08010ddf 	.word	0x08010ddf
 8010c10:	08010ddf 	.word	0x08010ddf
 8010c14:	08010c99 	.word	0x08010c99
 8010c18:	08010ddf 	.word	0x08010ddf
 8010c1c:	08010ddf 	.word	0x08010ddf
 8010c20:	08010ddf 	.word	0x08010ddf
 8010c24:	08010cdb 	.word	0x08010cdb
 8010c28:	08010ddf 	.word	0x08010ddf
 8010c2c:	08010ddf 	.word	0x08010ddf
 8010c30:	08010ddf 	.word	0x08010ddf
 8010c34:	08010d1b 	.word	0x08010d1b
 8010c38:	08010ddf 	.word	0x08010ddf
 8010c3c:	08010ddf 	.word	0x08010ddf
 8010c40:	08010ddf 	.word	0x08010ddf
 8010c44:	08010d5d 	.word	0x08010d5d
 8010c48:	08010ddf 	.word	0x08010ddf
 8010c4c:	08010ddf 	.word	0x08010ddf
 8010c50:	08010ddf 	.word	0x08010ddf
 8010c54:	08010d9d 	.word	0x08010d9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	68b9      	ldr	r1, [r7, #8]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f000 fa88 	bl	8011174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	699a      	ldr	r2, [r3, #24]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f042 0208 	orr.w	r2, r2, #8
 8010c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	699a      	ldr	r2, [r3, #24]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f022 0204 	bic.w	r2, r2, #4
 8010c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	6999      	ldr	r1, [r3, #24]
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	691a      	ldr	r2, [r3, #16]
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	430a      	orrs	r2, r1
 8010c94:	619a      	str	r2, [r3, #24]
      break;
 8010c96:	e0a5      	b.n	8010de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	68b9      	ldr	r1, [r7, #8]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f000 faf8 	bl	8011294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	699a      	ldr	r2, [r3, #24]
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	699a      	ldr	r2, [r3, #24]
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	6999      	ldr	r1, [r3, #24]
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	021a      	lsls	r2, r3, #8
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	430a      	orrs	r2, r1
 8010cd6:	619a      	str	r2, [r3, #24]
      break;
 8010cd8:	e084      	b.n	8010de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	68b9      	ldr	r1, [r7, #8]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f000 fb61 	bl	80113a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	69da      	ldr	r2, [r3, #28]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f042 0208 	orr.w	r2, r2, #8
 8010cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	69da      	ldr	r2, [r3, #28]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f022 0204 	bic.w	r2, r2, #4
 8010d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	69d9      	ldr	r1, [r3, #28]
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	691a      	ldr	r2, [r3, #16]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	430a      	orrs	r2, r1
 8010d16:	61da      	str	r2, [r3, #28]
      break;
 8010d18:	e064      	b.n	8010de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	68b9      	ldr	r1, [r7, #8]
 8010d20:	4618      	mov	r0, r3
 8010d22:	f000 fbc9 	bl	80114b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	69da      	ldr	r2, [r3, #28]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	69da      	ldr	r2, [r3, #28]
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	69d9      	ldr	r1, [r3, #28]
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	691b      	ldr	r3, [r3, #16]
 8010d50:	021a      	lsls	r2, r3, #8
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	430a      	orrs	r2, r1
 8010d58:	61da      	str	r2, [r3, #28]
      break;
 8010d5a:	e043      	b.n	8010de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	68b9      	ldr	r1, [r7, #8]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f000 fc12 	bl	801158c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f042 0208 	orr.w	r2, r2, #8
 8010d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f022 0204 	bic.w	r2, r2, #4
 8010d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	691a      	ldr	r2, [r3, #16]
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	430a      	orrs	r2, r1
 8010d98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010d9a:	e023      	b.n	8010de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68b9      	ldr	r1, [r7, #8]
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 fc56 	bl	8011654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	021a      	lsls	r2, r3, #8
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	430a      	orrs	r2, r1
 8010dda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010ddc:	e002      	b.n	8010de4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	75fb      	strb	r3, [r7, #23]
      break;
 8010de2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2200      	movs	r2, #0
 8010de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3718      	adds	r7, #24
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop

08010df8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010e00:	bf00      	nop
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e28:	bf00      	nop
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d107      	bne.n	8010eac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010eaa:	e02a      	b.n	8010f02 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d107      	bne.n	8010ec6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2202      	movs	r2, #2
 8010eba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010ec4:	e01d      	b.n	8010f02 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d107      	bne.n	8010ee0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2204      	movs	r2, #4
 8010ed4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2201      	movs	r2, #1
 8010eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ede:	e010      	b.n	8010f02 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d107      	bne.n	8010efa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2208      	movs	r2, #8
 8010eee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010ef8:	e003      	b.n	8010f02 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2201      	movs	r2, #1
 8010efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7ff ffb4 	bl	8010e70 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	771a      	strb	r2, [r3, #28]
}
 8010f0e:	bf00      	nop
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010f16:	b580      	push	{r7, lr}
 8010f18:	b084      	sub	sp, #16
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d10b      	bne.n	8010f46 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2201      	movs	r2, #1
 8010f32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	69db      	ldr	r3, [r3, #28]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d136      	bne.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f44:	e031      	b.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d10b      	bne.n	8010f68 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2202      	movs	r2, #2
 8010f54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	69db      	ldr	r3, [r3, #28]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d125      	bne.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2201      	movs	r2, #1
 8010f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f66:	e020      	b.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d10b      	bne.n	8010f8a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2204      	movs	r2, #4
 8010f76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d114      	bne.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2201      	movs	r2, #1
 8010f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f88:	e00f      	b.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d10a      	bne.n	8010faa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2208      	movs	r2, #8
 8010f98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d103      	bne.n	8010faa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f7ff ff42 	bl	8010e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	771a      	strb	r2, [r3, #28]
}
 8010fb6:	bf00      	nop
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b084      	sub	sp, #16
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d103      	bne.n	8010fde <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2201      	movs	r2, #1
 8010fda:	771a      	strb	r2, [r3, #28]
 8010fdc:	e019      	b.n	8011012 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d103      	bne.n	8010ff0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2202      	movs	r2, #2
 8010fec:	771a      	strb	r2, [r3, #28]
 8010fee:	e010      	b.n	8011012 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d103      	bne.n	8011002 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2204      	movs	r2, #4
 8010ffe:	771a      	strb	r2, [r3, #28]
 8011000:	e007      	b.n	8011012 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	429a      	cmp	r2, r3
 801100a:	d102      	bne.n	8011012 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2208      	movs	r2, #8
 8011010:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff ff18 	bl	8010e48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2200      	movs	r2, #0
 801101c:	771a      	strb	r2, [r3, #28]
}
 801101e:	bf00      	nop
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
	...

08011028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011028:	b480      	push	{r7}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	4a44      	ldr	r2, [pc, #272]	; (801114c <TIM_Base_SetConfig+0x124>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d013      	beq.n	8011068 <TIM_Base_SetConfig+0x40>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011046:	d00f      	beq.n	8011068 <TIM_Base_SetConfig+0x40>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4a41      	ldr	r2, [pc, #260]	; (8011150 <TIM_Base_SetConfig+0x128>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d00b      	beq.n	8011068 <TIM_Base_SetConfig+0x40>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a40      	ldr	r2, [pc, #256]	; (8011154 <TIM_Base_SetConfig+0x12c>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d007      	beq.n	8011068 <TIM_Base_SetConfig+0x40>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a3f      	ldr	r2, [pc, #252]	; (8011158 <TIM_Base_SetConfig+0x130>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d003      	beq.n	8011068 <TIM_Base_SetConfig+0x40>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4a3e      	ldr	r2, [pc, #248]	; (801115c <TIM_Base_SetConfig+0x134>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d108      	bne.n	801107a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801106e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	4313      	orrs	r3, r2
 8011078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4a33      	ldr	r2, [pc, #204]	; (801114c <TIM_Base_SetConfig+0x124>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d027      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011088:	d023      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a30      	ldr	r2, [pc, #192]	; (8011150 <TIM_Base_SetConfig+0x128>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d01f      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4a2f      	ldr	r2, [pc, #188]	; (8011154 <TIM_Base_SetConfig+0x12c>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d01b      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4a2e      	ldr	r2, [pc, #184]	; (8011158 <TIM_Base_SetConfig+0x130>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d017      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4a2d      	ldr	r2, [pc, #180]	; (801115c <TIM_Base_SetConfig+0x134>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d013      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4a2c      	ldr	r2, [pc, #176]	; (8011160 <TIM_Base_SetConfig+0x138>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d00f      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	4a2b      	ldr	r2, [pc, #172]	; (8011164 <TIM_Base_SetConfig+0x13c>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d00b      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4a2a      	ldr	r2, [pc, #168]	; (8011168 <TIM_Base_SetConfig+0x140>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d007      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4a29      	ldr	r2, [pc, #164]	; (801116c <TIM_Base_SetConfig+0x144>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d003      	beq.n	80110d2 <TIM_Base_SetConfig+0xaa>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4a28      	ldr	r2, [pc, #160]	; (8011170 <TIM_Base_SetConfig+0x148>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d108      	bne.n	80110e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	695b      	ldr	r3, [r3, #20]
 80110ee:	4313      	orrs	r3, r2
 80110f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	689a      	ldr	r2, [r3, #8]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4a10      	ldr	r2, [pc, #64]	; (801114c <TIM_Base_SetConfig+0x124>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d00f      	beq.n	8011130 <TIM_Base_SetConfig+0x108>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a12      	ldr	r2, [pc, #72]	; (801115c <TIM_Base_SetConfig+0x134>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d00b      	beq.n	8011130 <TIM_Base_SetConfig+0x108>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4a11      	ldr	r2, [pc, #68]	; (8011160 <TIM_Base_SetConfig+0x138>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d007      	beq.n	8011130 <TIM_Base_SetConfig+0x108>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a10      	ldr	r2, [pc, #64]	; (8011164 <TIM_Base_SetConfig+0x13c>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d003      	beq.n	8011130 <TIM_Base_SetConfig+0x108>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	4a0f      	ldr	r2, [pc, #60]	; (8011168 <TIM_Base_SetConfig+0x140>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d103      	bne.n	8011138 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	691a      	ldr	r2, [r3, #16]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2201      	movs	r2, #1
 801113c:	615a      	str	r2, [r3, #20]
}
 801113e:	bf00      	nop
 8011140:	3714      	adds	r7, #20
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	40010000 	.word	0x40010000
 8011150:	40000400 	.word	0x40000400
 8011154:	40000800 	.word	0x40000800
 8011158:	40000c00 	.word	0x40000c00
 801115c:	40010400 	.word	0x40010400
 8011160:	40014000 	.word	0x40014000
 8011164:	40014400 	.word	0x40014400
 8011168:	40014800 	.word	0x40014800
 801116c:	4000e000 	.word	0x4000e000
 8011170:	4000e400 	.word	0x4000e400

08011174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011174:	b480      	push	{r7}
 8011176:	b087      	sub	sp, #28
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a1b      	ldr	r3, [r3, #32]
 8011182:	f023 0201 	bic.w	r2, r3, #1
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a1b      	ldr	r3, [r3, #32]
 801118e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	699b      	ldr	r3, [r3, #24]
 801119a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	4b37      	ldr	r3, [pc, #220]	; (801127c <TIM_OC1_SetConfig+0x108>)
 80111a0:	4013      	ands	r3, r2
 80111a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f023 0303 	bic.w	r3, r3, #3
 80111aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	4313      	orrs	r3, r2
 80111b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f023 0302 	bic.w	r3, r3, #2
 80111bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	689b      	ldr	r3, [r3, #8]
 80111c2:	697a      	ldr	r2, [r7, #20]
 80111c4:	4313      	orrs	r3, r2
 80111c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4a2d      	ldr	r2, [pc, #180]	; (8011280 <TIM_OC1_SetConfig+0x10c>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d00f      	beq.n	80111f0 <TIM_OC1_SetConfig+0x7c>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4a2c      	ldr	r2, [pc, #176]	; (8011284 <TIM_OC1_SetConfig+0x110>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d00b      	beq.n	80111f0 <TIM_OC1_SetConfig+0x7c>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4a2b      	ldr	r2, [pc, #172]	; (8011288 <TIM_OC1_SetConfig+0x114>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d007      	beq.n	80111f0 <TIM_OC1_SetConfig+0x7c>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4a2a      	ldr	r2, [pc, #168]	; (801128c <TIM_OC1_SetConfig+0x118>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d003      	beq.n	80111f0 <TIM_OC1_SetConfig+0x7c>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4a29      	ldr	r2, [pc, #164]	; (8011290 <TIM_OC1_SetConfig+0x11c>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d10c      	bne.n	801120a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	f023 0308 	bic.w	r3, r3, #8
 80111f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	4313      	orrs	r3, r2
 8011200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	f023 0304 	bic.w	r3, r3, #4
 8011208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4a1c      	ldr	r2, [pc, #112]	; (8011280 <TIM_OC1_SetConfig+0x10c>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d00f      	beq.n	8011232 <TIM_OC1_SetConfig+0xbe>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a1b      	ldr	r2, [pc, #108]	; (8011284 <TIM_OC1_SetConfig+0x110>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d00b      	beq.n	8011232 <TIM_OC1_SetConfig+0xbe>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4a1a      	ldr	r2, [pc, #104]	; (8011288 <TIM_OC1_SetConfig+0x114>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d007      	beq.n	8011232 <TIM_OC1_SetConfig+0xbe>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4a19      	ldr	r2, [pc, #100]	; (801128c <TIM_OC1_SetConfig+0x118>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d003      	beq.n	8011232 <TIM_OC1_SetConfig+0xbe>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4a18      	ldr	r2, [pc, #96]	; (8011290 <TIM_OC1_SetConfig+0x11c>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d111      	bne.n	8011256 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	695b      	ldr	r3, [r3, #20]
 8011246:	693a      	ldr	r2, [r7, #16]
 8011248:	4313      	orrs	r3, r2
 801124a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	699b      	ldr	r3, [r3, #24]
 8011250:	693a      	ldr	r2, [r7, #16]
 8011252:	4313      	orrs	r3, r2
 8011254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	693a      	ldr	r2, [r7, #16]
 801125a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	685a      	ldr	r2, [r3, #4]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	697a      	ldr	r2, [r7, #20]
 801126e:	621a      	str	r2, [r3, #32]
}
 8011270:	bf00      	nop
 8011272:	371c      	adds	r7, #28
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	fffeff8f 	.word	0xfffeff8f
 8011280:	40010000 	.word	0x40010000
 8011284:	40010400 	.word	0x40010400
 8011288:	40014000 	.word	0x40014000
 801128c:	40014400 	.word	0x40014400
 8011290:	40014800 	.word	0x40014800

08011294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011294:	b480      	push	{r7}
 8011296:	b087      	sub	sp, #28
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6a1b      	ldr	r3, [r3, #32]
 80112a2:	f023 0210 	bic.w	r2, r3, #16
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6a1b      	ldr	r3, [r3, #32]
 80112ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	699b      	ldr	r3, [r3, #24]
 80112ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80112bc:	68fa      	ldr	r2, [r7, #12]
 80112be:	4b34      	ldr	r3, [pc, #208]	; (8011390 <TIM_OC2_SetConfig+0xfc>)
 80112c0:	4013      	ands	r3, r2
 80112c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	021b      	lsls	r3, r3, #8
 80112d2:	68fa      	ldr	r2, [r7, #12]
 80112d4:	4313      	orrs	r3, r2
 80112d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	f023 0320 	bic.w	r3, r3, #32
 80112de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	011b      	lsls	r3, r3, #4
 80112e6:	697a      	ldr	r2, [r7, #20]
 80112e8:	4313      	orrs	r3, r2
 80112ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4a29      	ldr	r2, [pc, #164]	; (8011394 <TIM_OC2_SetConfig+0x100>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d003      	beq.n	80112fc <TIM_OC2_SetConfig+0x68>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	4a28      	ldr	r2, [pc, #160]	; (8011398 <TIM_OC2_SetConfig+0x104>)
 80112f8:	4293      	cmp	r3, r2
 80112fa:	d10d      	bne.n	8011318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	011b      	lsls	r3, r3, #4
 801130a:	697a      	ldr	r2, [r7, #20]
 801130c:	4313      	orrs	r3, r2
 801130e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4a1e      	ldr	r2, [pc, #120]	; (8011394 <TIM_OC2_SetConfig+0x100>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d00f      	beq.n	8011340 <TIM_OC2_SetConfig+0xac>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4a1d      	ldr	r2, [pc, #116]	; (8011398 <TIM_OC2_SetConfig+0x104>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d00b      	beq.n	8011340 <TIM_OC2_SetConfig+0xac>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	4a1c      	ldr	r2, [pc, #112]	; (801139c <TIM_OC2_SetConfig+0x108>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d007      	beq.n	8011340 <TIM_OC2_SetConfig+0xac>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4a1b      	ldr	r2, [pc, #108]	; (80113a0 <TIM_OC2_SetConfig+0x10c>)
 8011334:	4293      	cmp	r3, r2
 8011336:	d003      	beq.n	8011340 <TIM_OC2_SetConfig+0xac>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4a1a      	ldr	r2, [pc, #104]	; (80113a4 <TIM_OC2_SetConfig+0x110>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d113      	bne.n	8011368 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801134e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	695b      	ldr	r3, [r3, #20]
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	693a      	ldr	r2, [r7, #16]
 8011358:	4313      	orrs	r3, r2
 801135a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	699b      	ldr	r3, [r3, #24]
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	693a      	ldr	r2, [r7, #16]
 8011364:	4313      	orrs	r3, r2
 8011366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	693a      	ldr	r2, [r7, #16]
 801136c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	621a      	str	r2, [r3, #32]
}
 8011382:	bf00      	nop
 8011384:	371c      	adds	r7, #28
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	feff8fff 	.word	0xfeff8fff
 8011394:	40010000 	.word	0x40010000
 8011398:	40010400 	.word	0x40010400
 801139c:	40014000 	.word	0x40014000
 80113a0:	40014400 	.word	0x40014400
 80113a4:	40014800 	.word	0x40014800

080113a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b087      	sub	sp, #28
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6a1b      	ldr	r3, [r3, #32]
 80113b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6a1b      	ldr	r3, [r3, #32]
 80113c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	69db      	ldr	r3, [r3, #28]
 80113ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	4b33      	ldr	r3, [pc, #204]	; (80114a0 <TIM_OC3_SetConfig+0xf8>)
 80113d4:	4013      	ands	r3, r2
 80113d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f023 0303 	bic.w	r3, r3, #3
 80113de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	4313      	orrs	r3, r2
 80113e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80113f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	021b      	lsls	r3, r3, #8
 80113f8:	697a      	ldr	r2, [r7, #20]
 80113fa:	4313      	orrs	r3, r2
 80113fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4a28      	ldr	r2, [pc, #160]	; (80114a4 <TIM_OC3_SetConfig+0xfc>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d003      	beq.n	801140e <TIM_OC3_SetConfig+0x66>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4a27      	ldr	r2, [pc, #156]	; (80114a8 <TIM_OC3_SetConfig+0x100>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d10d      	bne.n	801142a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	021b      	lsls	r3, r3, #8
 801141c:	697a      	ldr	r2, [r7, #20]
 801141e:	4313      	orrs	r3, r2
 8011420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4a1d      	ldr	r2, [pc, #116]	; (80114a4 <TIM_OC3_SetConfig+0xfc>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d00f      	beq.n	8011452 <TIM_OC3_SetConfig+0xaa>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4a1c      	ldr	r2, [pc, #112]	; (80114a8 <TIM_OC3_SetConfig+0x100>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d00b      	beq.n	8011452 <TIM_OC3_SetConfig+0xaa>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	4a1b      	ldr	r2, [pc, #108]	; (80114ac <TIM_OC3_SetConfig+0x104>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d007      	beq.n	8011452 <TIM_OC3_SetConfig+0xaa>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4a1a      	ldr	r2, [pc, #104]	; (80114b0 <TIM_OC3_SetConfig+0x108>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d003      	beq.n	8011452 <TIM_OC3_SetConfig+0xaa>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4a19      	ldr	r2, [pc, #100]	; (80114b4 <TIM_OC3_SetConfig+0x10c>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d113      	bne.n	801147a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	695b      	ldr	r3, [r3, #20]
 8011466:	011b      	lsls	r3, r3, #4
 8011468:	693a      	ldr	r2, [r7, #16]
 801146a:	4313      	orrs	r3, r2
 801146c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	699b      	ldr	r3, [r3, #24]
 8011472:	011b      	lsls	r3, r3, #4
 8011474:	693a      	ldr	r2, [r7, #16]
 8011476:	4313      	orrs	r3, r2
 8011478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	693a      	ldr	r2, [r7, #16]
 801147e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	68fa      	ldr	r2, [r7, #12]
 8011484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	697a      	ldr	r2, [r7, #20]
 8011492:	621a      	str	r2, [r3, #32]
}
 8011494:	bf00      	nop
 8011496:	371c      	adds	r7, #28
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	fffeff8f 	.word	0xfffeff8f
 80114a4:	40010000 	.word	0x40010000
 80114a8:	40010400 	.word	0x40010400
 80114ac:	40014000 	.word	0x40014000
 80114b0:	40014400 	.word	0x40014400
 80114b4:	40014800 	.word	0x40014800

080114b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b087      	sub	sp, #28
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a1b      	ldr	r3, [r3, #32]
 80114c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a1b      	ldr	r3, [r3, #32]
 80114d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	69db      	ldr	r3, [r3, #28]
 80114de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	4b24      	ldr	r3, [pc, #144]	; (8011574 <TIM_OC4_SetConfig+0xbc>)
 80114e4:	4013      	ands	r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	021b      	lsls	r3, r3, #8
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	4313      	orrs	r3, r2
 80114fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	689b      	ldr	r3, [r3, #8]
 8011508:	031b      	lsls	r3, r3, #12
 801150a:	693a      	ldr	r2, [r7, #16]
 801150c:	4313      	orrs	r3, r2
 801150e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4a19      	ldr	r2, [pc, #100]	; (8011578 <TIM_OC4_SetConfig+0xc0>)
 8011514:	4293      	cmp	r3, r2
 8011516:	d00f      	beq.n	8011538 <TIM_OC4_SetConfig+0x80>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	4a18      	ldr	r2, [pc, #96]	; (801157c <TIM_OC4_SetConfig+0xc4>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d00b      	beq.n	8011538 <TIM_OC4_SetConfig+0x80>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	4a17      	ldr	r2, [pc, #92]	; (8011580 <TIM_OC4_SetConfig+0xc8>)
 8011524:	4293      	cmp	r3, r2
 8011526:	d007      	beq.n	8011538 <TIM_OC4_SetConfig+0x80>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	4a16      	ldr	r2, [pc, #88]	; (8011584 <TIM_OC4_SetConfig+0xcc>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d003      	beq.n	8011538 <TIM_OC4_SetConfig+0x80>
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	4a15      	ldr	r2, [pc, #84]	; (8011588 <TIM_OC4_SetConfig+0xd0>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d109      	bne.n	801154c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801153e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	695b      	ldr	r3, [r3, #20]
 8011544:	019b      	lsls	r3, r3, #6
 8011546:	697a      	ldr	r2, [r7, #20]
 8011548:	4313      	orrs	r3, r2
 801154a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	68fa      	ldr	r2, [r7, #12]
 8011556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	685a      	ldr	r2, [r3, #4]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	693a      	ldr	r2, [r7, #16]
 8011564:	621a      	str	r2, [r3, #32]
}
 8011566:	bf00      	nop
 8011568:	371c      	adds	r7, #28
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop
 8011574:	feff8fff 	.word	0xfeff8fff
 8011578:	40010000 	.word	0x40010000
 801157c:	40010400 	.word	0x40010400
 8011580:	40014000 	.word	0x40014000
 8011584:	40014400 	.word	0x40014400
 8011588:	40014800 	.word	0x40014800

0801158c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801158c:	b480      	push	{r7}
 801158e:	b087      	sub	sp, #28
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a1b      	ldr	r3, [r3, #32]
 801159a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a1b      	ldr	r3, [r3, #32]
 80115a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	4b21      	ldr	r3, [pc, #132]	; (801163c <TIM_OC5_SetConfig+0xb0>)
 80115b8:	4013      	ands	r3, r2
 80115ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	68fa      	ldr	r2, [r7, #12]
 80115c2:	4313      	orrs	r3, r2
 80115c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80115cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	041b      	lsls	r3, r3, #16
 80115d4:	693a      	ldr	r2, [r7, #16]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a18      	ldr	r2, [pc, #96]	; (8011640 <TIM_OC5_SetConfig+0xb4>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d00f      	beq.n	8011602 <TIM_OC5_SetConfig+0x76>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4a17      	ldr	r2, [pc, #92]	; (8011644 <TIM_OC5_SetConfig+0xb8>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d00b      	beq.n	8011602 <TIM_OC5_SetConfig+0x76>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4a16      	ldr	r2, [pc, #88]	; (8011648 <TIM_OC5_SetConfig+0xbc>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d007      	beq.n	8011602 <TIM_OC5_SetConfig+0x76>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4a15      	ldr	r2, [pc, #84]	; (801164c <TIM_OC5_SetConfig+0xc0>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d003      	beq.n	8011602 <TIM_OC5_SetConfig+0x76>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4a14      	ldr	r2, [pc, #80]	; (8011650 <TIM_OC5_SetConfig+0xc4>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d109      	bne.n	8011616 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	021b      	lsls	r3, r3, #8
 8011610:	697a      	ldr	r2, [r7, #20]
 8011612:	4313      	orrs	r3, r2
 8011614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	697a      	ldr	r2, [r7, #20]
 801161a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	693a      	ldr	r2, [r7, #16]
 801162e:	621a      	str	r2, [r3, #32]
}
 8011630:	bf00      	nop
 8011632:	371c      	adds	r7, #28
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr
 801163c:	fffeff8f 	.word	0xfffeff8f
 8011640:	40010000 	.word	0x40010000
 8011644:	40010400 	.word	0x40010400
 8011648:	40014000 	.word	0x40014000
 801164c:	40014400 	.word	0x40014400
 8011650:	40014800 	.word	0x40014800

08011654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011654:	b480      	push	{r7}
 8011656:	b087      	sub	sp, #28
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6a1b      	ldr	r3, [r3, #32]
 8011662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6a1b      	ldr	r3, [r3, #32]
 801166e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801167a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801167c:	68fa      	ldr	r2, [r7, #12]
 801167e:	4b22      	ldr	r3, [pc, #136]	; (8011708 <TIM_OC6_SetConfig+0xb4>)
 8011680:	4013      	ands	r3, r2
 8011682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	021b      	lsls	r3, r3, #8
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	4313      	orrs	r3, r2
 801168e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	051b      	lsls	r3, r3, #20
 801169e:	693a      	ldr	r2, [r7, #16]
 80116a0:	4313      	orrs	r3, r2
 80116a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	4a19      	ldr	r2, [pc, #100]	; (801170c <TIM_OC6_SetConfig+0xb8>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d00f      	beq.n	80116cc <TIM_OC6_SetConfig+0x78>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	4a18      	ldr	r2, [pc, #96]	; (8011710 <TIM_OC6_SetConfig+0xbc>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d00b      	beq.n	80116cc <TIM_OC6_SetConfig+0x78>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	4a17      	ldr	r2, [pc, #92]	; (8011714 <TIM_OC6_SetConfig+0xc0>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d007      	beq.n	80116cc <TIM_OC6_SetConfig+0x78>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	4a16      	ldr	r2, [pc, #88]	; (8011718 <TIM_OC6_SetConfig+0xc4>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d003      	beq.n	80116cc <TIM_OC6_SetConfig+0x78>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4a15      	ldr	r2, [pc, #84]	; (801171c <TIM_OC6_SetConfig+0xc8>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d109      	bne.n	80116e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80116d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	695b      	ldr	r3, [r3, #20]
 80116d8:	029b      	lsls	r3, r3, #10
 80116da:	697a      	ldr	r2, [r7, #20]
 80116dc:	4313      	orrs	r3, r2
 80116de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	685a      	ldr	r2, [r3, #4]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	693a      	ldr	r2, [r7, #16]
 80116f8:	621a      	str	r2, [r3, #32]
}
 80116fa:	bf00      	nop
 80116fc:	371c      	adds	r7, #28
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	feff8fff 	.word	0xfeff8fff
 801170c:	40010000 	.word	0x40010000
 8011710:	40010400 	.word	0x40010400
 8011714:	40014000 	.word	0x40014000
 8011718:	40014400 	.word	0x40014400
 801171c:	40014800 	.word	0x40014800

08011720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011720:	b480      	push	{r7}
 8011722:	b087      	sub	sp, #28
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	f003 031f 	and.w	r3, r3, #31
 8011732:	2201      	movs	r2, #1
 8011734:	fa02 f303 	lsl.w	r3, r2, r3
 8011738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6a1a      	ldr	r2, [r3, #32]
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	43db      	mvns	r3, r3
 8011742:	401a      	ands	r2, r3
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	6a1a      	ldr	r2, [r3, #32]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	f003 031f 	and.w	r3, r3, #31
 8011752:	6879      	ldr	r1, [r7, #4]
 8011754:	fa01 f303 	lsl.w	r3, r1, r3
 8011758:	431a      	orrs	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	621a      	str	r2, [r3, #32]
}
 801175e:	bf00      	nop
 8011760:	371c      	adds	r7, #28
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
	...

0801176c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801177c:	2b01      	cmp	r3, #1
 801177e:	d101      	bne.n	8011784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011780:	2302      	movs	r3, #2
 8011782:	e077      	b.n	8011874 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2201      	movs	r2, #1
 8011788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2202      	movs	r2, #2
 8011790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4a35      	ldr	r2, [pc, #212]	; (8011880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d004      	beq.n	80117b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	4a34      	ldr	r2, [pc, #208]	; (8011884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d108      	bne.n	80117ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80117be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	68fa      	ldr	r2, [r7, #12]
 80117c6:	4313      	orrs	r3, r2
 80117c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	4313      	orrs	r3, r2
 80117da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68fa      	ldr	r2, [r7, #12]
 80117e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4a25      	ldr	r2, [pc, #148]	; (8011880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d02c      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117f6:	d027      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4a22      	ldr	r2, [pc, #136]	; (8011888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d022      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4a21      	ldr	r2, [pc, #132]	; (801188c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d01d      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4a1f      	ldr	r2, [pc, #124]	; (8011890 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d018      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	4a1a      	ldr	r2, [pc, #104]	; (8011884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d013      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4a1b      	ldr	r2, [pc, #108]	; (8011894 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d00e      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4a1a      	ldr	r2, [pc, #104]	; (8011898 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011830:	4293      	cmp	r3, r2
 8011832:	d009      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4a18      	ldr	r2, [pc, #96]	; (801189c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d004      	beq.n	8011848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4a17      	ldr	r2, [pc, #92]	; (80118a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d10c      	bne.n	8011862 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801184e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	4313      	orrs	r3, r2
 8011858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2201      	movs	r2, #1
 8011866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2200      	movs	r2, #0
 801186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3714      	adds	r7, #20
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr
 8011880:	40010000 	.word	0x40010000
 8011884:	40010400 	.word	0x40010400
 8011888:	40000400 	.word	0x40000400
 801188c:	40000800 	.word	0x40000800
 8011890:	40000c00 	.word	0x40000c00
 8011894:	40001800 	.word	0x40001800
 8011898:	40014000 	.word	0x40014000
 801189c:	4000e000 	.word	0x4000e000
 80118a0:	4000e400 	.word	0x4000e400

080118a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80118d4:	bf00      	nop
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d101      	bne.n	80118f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80118ee:	2301      	movs	r3, #1
 80118f0:	e042      	b.n	8011978 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d106      	bne.n	801190a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7f1 ffe7 	bl	80038d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2224      	movs	r2, #36	; 0x24
 801190e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f022 0201 	bic.w	r2, r2, #1
 8011920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 f82c 	bl	8011980 <UART_SetConfig>
 8011928:	4603      	mov	r3, r0
 801192a:	2b01      	cmp	r3, #1
 801192c:	d101      	bne.n	8011932 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801192e:	2301      	movs	r3, #1
 8011930:	e022      	b.n	8011978 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011936:	2b00      	cmp	r3, #0
 8011938:	d002      	beq.n	8011940 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 fe8c 	bl	8012658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	685a      	ldr	r2, [r3, #4]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801194e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	689a      	ldr	r2, [r3, #8]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801195e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f042 0201 	orr.w	r2, r2, #1
 801196e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 ff13 	bl	801279c <UART_CheckIdleState>
 8011976:	4603      	mov	r3, r0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011984:	b092      	sub	sp, #72	; 0x48
 8011986:	af00      	add	r7, sp, #0
 8011988:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	689a      	ldr	r2, [r3, #8]
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	691b      	ldr	r3, [r3, #16]
 8011998:	431a      	orrs	r2, r3
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	695b      	ldr	r3, [r3, #20]
 801199e:	431a      	orrs	r2, r3
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	69db      	ldr	r3, [r3, #28]
 80119a4:	4313      	orrs	r3, r2
 80119a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	4bbe      	ldr	r3, [pc, #760]	; (8011ca8 <UART_SetConfig+0x328>)
 80119b0:	4013      	ands	r3, r2
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	6812      	ldr	r2, [r2, #0]
 80119b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119b8:	430b      	orrs	r3, r1
 80119ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	68da      	ldr	r2, [r3, #12]
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	430a      	orrs	r2, r1
 80119d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	699b      	ldr	r3, [r3, #24]
 80119d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4ab3      	ldr	r2, [pc, #716]	; (8011cac <UART_SetConfig+0x32c>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d004      	beq.n	80119ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	6a1b      	ldr	r3, [r3, #32]
 80119e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119e8:	4313      	orrs	r3, r2
 80119ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	689a      	ldr	r2, [r3, #8]
 80119f2:	4baf      	ldr	r3, [pc, #700]	; (8011cb0 <UART_SetConfig+0x330>)
 80119f4:	4013      	ands	r3, r2
 80119f6:	697a      	ldr	r2, [r7, #20]
 80119f8:	6812      	ldr	r2, [r2, #0]
 80119fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119fc:	430b      	orrs	r3, r1
 80119fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a06:	f023 010f 	bic.w	r1, r3, #15
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	430a      	orrs	r2, r1
 8011a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4aa6      	ldr	r2, [pc, #664]	; (8011cb4 <UART_SetConfig+0x334>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d177      	bne.n	8011b10 <UART_SetConfig+0x190>
 8011a20:	4ba5      	ldr	r3, [pc, #660]	; (8011cb8 <UART_SetConfig+0x338>)
 8011a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011a28:	2b28      	cmp	r3, #40	; 0x28
 8011a2a:	d86d      	bhi.n	8011b08 <UART_SetConfig+0x188>
 8011a2c:	a201      	add	r2, pc, #4	; (adr r2, 8011a34 <UART_SetConfig+0xb4>)
 8011a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a32:	bf00      	nop
 8011a34:	08011ad9 	.word	0x08011ad9
 8011a38:	08011b09 	.word	0x08011b09
 8011a3c:	08011b09 	.word	0x08011b09
 8011a40:	08011b09 	.word	0x08011b09
 8011a44:	08011b09 	.word	0x08011b09
 8011a48:	08011b09 	.word	0x08011b09
 8011a4c:	08011b09 	.word	0x08011b09
 8011a50:	08011b09 	.word	0x08011b09
 8011a54:	08011ae1 	.word	0x08011ae1
 8011a58:	08011b09 	.word	0x08011b09
 8011a5c:	08011b09 	.word	0x08011b09
 8011a60:	08011b09 	.word	0x08011b09
 8011a64:	08011b09 	.word	0x08011b09
 8011a68:	08011b09 	.word	0x08011b09
 8011a6c:	08011b09 	.word	0x08011b09
 8011a70:	08011b09 	.word	0x08011b09
 8011a74:	08011ae9 	.word	0x08011ae9
 8011a78:	08011b09 	.word	0x08011b09
 8011a7c:	08011b09 	.word	0x08011b09
 8011a80:	08011b09 	.word	0x08011b09
 8011a84:	08011b09 	.word	0x08011b09
 8011a88:	08011b09 	.word	0x08011b09
 8011a8c:	08011b09 	.word	0x08011b09
 8011a90:	08011b09 	.word	0x08011b09
 8011a94:	08011af1 	.word	0x08011af1
 8011a98:	08011b09 	.word	0x08011b09
 8011a9c:	08011b09 	.word	0x08011b09
 8011aa0:	08011b09 	.word	0x08011b09
 8011aa4:	08011b09 	.word	0x08011b09
 8011aa8:	08011b09 	.word	0x08011b09
 8011aac:	08011b09 	.word	0x08011b09
 8011ab0:	08011b09 	.word	0x08011b09
 8011ab4:	08011af9 	.word	0x08011af9
 8011ab8:	08011b09 	.word	0x08011b09
 8011abc:	08011b09 	.word	0x08011b09
 8011ac0:	08011b09 	.word	0x08011b09
 8011ac4:	08011b09 	.word	0x08011b09
 8011ac8:	08011b09 	.word	0x08011b09
 8011acc:	08011b09 	.word	0x08011b09
 8011ad0:	08011b09 	.word	0x08011b09
 8011ad4:	08011b01 	.word	0x08011b01
 8011ad8:	2301      	movs	r3, #1
 8011ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ade:	e326      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ae0:	2304      	movs	r3, #4
 8011ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ae6:	e322      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ae8:	2308      	movs	r3, #8
 8011aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aee:	e31e      	b.n	801212e <UART_SetConfig+0x7ae>
 8011af0:	2310      	movs	r3, #16
 8011af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011af6:	e31a      	b.n	801212e <UART_SetConfig+0x7ae>
 8011af8:	2320      	movs	r3, #32
 8011afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011afe:	e316      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b00:	2340      	movs	r3, #64	; 0x40
 8011b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b06:	e312      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b08:	2380      	movs	r3, #128	; 0x80
 8011b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b0e:	e30e      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	4a69      	ldr	r2, [pc, #420]	; (8011cbc <UART_SetConfig+0x33c>)
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d130      	bne.n	8011b7c <UART_SetConfig+0x1fc>
 8011b1a:	4b67      	ldr	r3, [pc, #412]	; (8011cb8 <UART_SetConfig+0x338>)
 8011b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b1e:	f003 0307 	and.w	r3, r3, #7
 8011b22:	2b05      	cmp	r3, #5
 8011b24:	d826      	bhi.n	8011b74 <UART_SetConfig+0x1f4>
 8011b26:	a201      	add	r2, pc, #4	; (adr r2, 8011b2c <UART_SetConfig+0x1ac>)
 8011b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b2c:	08011b45 	.word	0x08011b45
 8011b30:	08011b4d 	.word	0x08011b4d
 8011b34:	08011b55 	.word	0x08011b55
 8011b38:	08011b5d 	.word	0x08011b5d
 8011b3c:	08011b65 	.word	0x08011b65
 8011b40:	08011b6d 	.word	0x08011b6d
 8011b44:	2300      	movs	r3, #0
 8011b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b4a:	e2f0      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b4c:	2304      	movs	r3, #4
 8011b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b52:	e2ec      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b54:	2308      	movs	r3, #8
 8011b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b5a:	e2e8      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b5c:	2310      	movs	r3, #16
 8011b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b62:	e2e4      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b64:	2320      	movs	r3, #32
 8011b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b6a:	e2e0      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b6c:	2340      	movs	r3, #64	; 0x40
 8011b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b72:	e2dc      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b74:	2380      	movs	r3, #128	; 0x80
 8011b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b7a:	e2d8      	b.n	801212e <UART_SetConfig+0x7ae>
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a4f      	ldr	r2, [pc, #316]	; (8011cc0 <UART_SetConfig+0x340>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d130      	bne.n	8011be8 <UART_SetConfig+0x268>
 8011b86:	4b4c      	ldr	r3, [pc, #304]	; (8011cb8 <UART_SetConfig+0x338>)
 8011b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b8a:	f003 0307 	and.w	r3, r3, #7
 8011b8e:	2b05      	cmp	r3, #5
 8011b90:	d826      	bhi.n	8011be0 <UART_SetConfig+0x260>
 8011b92:	a201      	add	r2, pc, #4	; (adr r2, 8011b98 <UART_SetConfig+0x218>)
 8011b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b98:	08011bb1 	.word	0x08011bb1
 8011b9c:	08011bb9 	.word	0x08011bb9
 8011ba0:	08011bc1 	.word	0x08011bc1
 8011ba4:	08011bc9 	.word	0x08011bc9
 8011ba8:	08011bd1 	.word	0x08011bd1
 8011bac:	08011bd9 	.word	0x08011bd9
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bb6:	e2ba      	b.n	801212e <UART_SetConfig+0x7ae>
 8011bb8:	2304      	movs	r3, #4
 8011bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bbe:	e2b6      	b.n	801212e <UART_SetConfig+0x7ae>
 8011bc0:	2308      	movs	r3, #8
 8011bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc6:	e2b2      	b.n	801212e <UART_SetConfig+0x7ae>
 8011bc8:	2310      	movs	r3, #16
 8011bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bce:	e2ae      	b.n	801212e <UART_SetConfig+0x7ae>
 8011bd0:	2320      	movs	r3, #32
 8011bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bd6:	e2aa      	b.n	801212e <UART_SetConfig+0x7ae>
 8011bd8:	2340      	movs	r3, #64	; 0x40
 8011bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bde:	e2a6      	b.n	801212e <UART_SetConfig+0x7ae>
 8011be0:	2380      	movs	r3, #128	; 0x80
 8011be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011be6:	e2a2      	b.n	801212e <UART_SetConfig+0x7ae>
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4a35      	ldr	r2, [pc, #212]	; (8011cc4 <UART_SetConfig+0x344>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d130      	bne.n	8011c54 <UART_SetConfig+0x2d4>
 8011bf2:	4b31      	ldr	r3, [pc, #196]	; (8011cb8 <UART_SetConfig+0x338>)
 8011bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bf6:	f003 0307 	and.w	r3, r3, #7
 8011bfa:	2b05      	cmp	r3, #5
 8011bfc:	d826      	bhi.n	8011c4c <UART_SetConfig+0x2cc>
 8011bfe:	a201      	add	r2, pc, #4	; (adr r2, 8011c04 <UART_SetConfig+0x284>)
 8011c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c04:	08011c1d 	.word	0x08011c1d
 8011c08:	08011c25 	.word	0x08011c25
 8011c0c:	08011c2d 	.word	0x08011c2d
 8011c10:	08011c35 	.word	0x08011c35
 8011c14:	08011c3d 	.word	0x08011c3d
 8011c18:	08011c45 	.word	0x08011c45
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c22:	e284      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c24:	2304      	movs	r3, #4
 8011c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c2a:	e280      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c2c:	2308      	movs	r3, #8
 8011c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c32:	e27c      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c34:	2310      	movs	r3, #16
 8011c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c3a:	e278      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c3c:	2320      	movs	r3, #32
 8011c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c42:	e274      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c44:	2340      	movs	r3, #64	; 0x40
 8011c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c4a:	e270      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c4c:	2380      	movs	r3, #128	; 0x80
 8011c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c52:	e26c      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4a1b      	ldr	r2, [pc, #108]	; (8011cc8 <UART_SetConfig+0x348>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d142      	bne.n	8011ce4 <UART_SetConfig+0x364>
 8011c5e:	4b16      	ldr	r3, [pc, #88]	; (8011cb8 <UART_SetConfig+0x338>)
 8011c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c62:	f003 0307 	and.w	r3, r3, #7
 8011c66:	2b05      	cmp	r3, #5
 8011c68:	d838      	bhi.n	8011cdc <UART_SetConfig+0x35c>
 8011c6a:	a201      	add	r2, pc, #4	; (adr r2, 8011c70 <UART_SetConfig+0x2f0>)
 8011c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c70:	08011c89 	.word	0x08011c89
 8011c74:	08011c91 	.word	0x08011c91
 8011c78:	08011c99 	.word	0x08011c99
 8011c7c:	08011ca1 	.word	0x08011ca1
 8011c80:	08011ccd 	.word	0x08011ccd
 8011c84:	08011cd5 	.word	0x08011cd5
 8011c88:	2300      	movs	r3, #0
 8011c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8e:	e24e      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c90:	2304      	movs	r3, #4
 8011c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c96:	e24a      	b.n	801212e <UART_SetConfig+0x7ae>
 8011c98:	2308      	movs	r3, #8
 8011c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9e:	e246      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ca0:	2310      	movs	r3, #16
 8011ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca6:	e242      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ca8:	cfff69f3 	.word	0xcfff69f3
 8011cac:	58000c00 	.word	0x58000c00
 8011cb0:	11fff4ff 	.word	0x11fff4ff
 8011cb4:	40011000 	.word	0x40011000
 8011cb8:	58024400 	.word	0x58024400
 8011cbc:	40004400 	.word	0x40004400
 8011cc0:	40004800 	.word	0x40004800
 8011cc4:	40004c00 	.word	0x40004c00
 8011cc8:	40005000 	.word	0x40005000
 8011ccc:	2320      	movs	r3, #32
 8011cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cd2:	e22c      	b.n	801212e <UART_SetConfig+0x7ae>
 8011cd4:	2340      	movs	r3, #64	; 0x40
 8011cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cda:	e228      	b.n	801212e <UART_SetConfig+0x7ae>
 8011cdc:	2380      	movs	r3, #128	; 0x80
 8011cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ce2:	e224      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4ab1      	ldr	r2, [pc, #708]	; (8011fb0 <UART_SetConfig+0x630>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d176      	bne.n	8011ddc <UART_SetConfig+0x45c>
 8011cee:	4bb1      	ldr	r3, [pc, #708]	; (8011fb4 <UART_SetConfig+0x634>)
 8011cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011cf6:	2b28      	cmp	r3, #40	; 0x28
 8011cf8:	d86c      	bhi.n	8011dd4 <UART_SetConfig+0x454>
 8011cfa:	a201      	add	r2, pc, #4	; (adr r2, 8011d00 <UART_SetConfig+0x380>)
 8011cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d00:	08011da5 	.word	0x08011da5
 8011d04:	08011dd5 	.word	0x08011dd5
 8011d08:	08011dd5 	.word	0x08011dd5
 8011d0c:	08011dd5 	.word	0x08011dd5
 8011d10:	08011dd5 	.word	0x08011dd5
 8011d14:	08011dd5 	.word	0x08011dd5
 8011d18:	08011dd5 	.word	0x08011dd5
 8011d1c:	08011dd5 	.word	0x08011dd5
 8011d20:	08011dad 	.word	0x08011dad
 8011d24:	08011dd5 	.word	0x08011dd5
 8011d28:	08011dd5 	.word	0x08011dd5
 8011d2c:	08011dd5 	.word	0x08011dd5
 8011d30:	08011dd5 	.word	0x08011dd5
 8011d34:	08011dd5 	.word	0x08011dd5
 8011d38:	08011dd5 	.word	0x08011dd5
 8011d3c:	08011dd5 	.word	0x08011dd5
 8011d40:	08011db5 	.word	0x08011db5
 8011d44:	08011dd5 	.word	0x08011dd5
 8011d48:	08011dd5 	.word	0x08011dd5
 8011d4c:	08011dd5 	.word	0x08011dd5
 8011d50:	08011dd5 	.word	0x08011dd5
 8011d54:	08011dd5 	.word	0x08011dd5
 8011d58:	08011dd5 	.word	0x08011dd5
 8011d5c:	08011dd5 	.word	0x08011dd5
 8011d60:	08011dbd 	.word	0x08011dbd
 8011d64:	08011dd5 	.word	0x08011dd5
 8011d68:	08011dd5 	.word	0x08011dd5
 8011d6c:	08011dd5 	.word	0x08011dd5
 8011d70:	08011dd5 	.word	0x08011dd5
 8011d74:	08011dd5 	.word	0x08011dd5
 8011d78:	08011dd5 	.word	0x08011dd5
 8011d7c:	08011dd5 	.word	0x08011dd5
 8011d80:	08011dc5 	.word	0x08011dc5
 8011d84:	08011dd5 	.word	0x08011dd5
 8011d88:	08011dd5 	.word	0x08011dd5
 8011d8c:	08011dd5 	.word	0x08011dd5
 8011d90:	08011dd5 	.word	0x08011dd5
 8011d94:	08011dd5 	.word	0x08011dd5
 8011d98:	08011dd5 	.word	0x08011dd5
 8011d9c:	08011dd5 	.word	0x08011dd5
 8011da0:	08011dcd 	.word	0x08011dcd
 8011da4:	2301      	movs	r3, #1
 8011da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011daa:	e1c0      	b.n	801212e <UART_SetConfig+0x7ae>
 8011dac:	2304      	movs	r3, #4
 8011dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011db2:	e1bc      	b.n	801212e <UART_SetConfig+0x7ae>
 8011db4:	2308      	movs	r3, #8
 8011db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dba:	e1b8      	b.n	801212e <UART_SetConfig+0x7ae>
 8011dbc:	2310      	movs	r3, #16
 8011dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dc2:	e1b4      	b.n	801212e <UART_SetConfig+0x7ae>
 8011dc4:	2320      	movs	r3, #32
 8011dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dca:	e1b0      	b.n	801212e <UART_SetConfig+0x7ae>
 8011dcc:	2340      	movs	r3, #64	; 0x40
 8011dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dd2:	e1ac      	b.n	801212e <UART_SetConfig+0x7ae>
 8011dd4:	2380      	movs	r3, #128	; 0x80
 8011dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dda:	e1a8      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	4a75      	ldr	r2, [pc, #468]	; (8011fb8 <UART_SetConfig+0x638>)
 8011de2:	4293      	cmp	r3, r2
 8011de4:	d130      	bne.n	8011e48 <UART_SetConfig+0x4c8>
 8011de6:	4b73      	ldr	r3, [pc, #460]	; (8011fb4 <UART_SetConfig+0x634>)
 8011de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dea:	f003 0307 	and.w	r3, r3, #7
 8011dee:	2b05      	cmp	r3, #5
 8011df0:	d826      	bhi.n	8011e40 <UART_SetConfig+0x4c0>
 8011df2:	a201      	add	r2, pc, #4	; (adr r2, 8011df8 <UART_SetConfig+0x478>)
 8011df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011df8:	08011e11 	.word	0x08011e11
 8011dfc:	08011e19 	.word	0x08011e19
 8011e00:	08011e21 	.word	0x08011e21
 8011e04:	08011e29 	.word	0x08011e29
 8011e08:	08011e31 	.word	0x08011e31
 8011e0c:	08011e39 	.word	0x08011e39
 8011e10:	2300      	movs	r3, #0
 8011e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e16:	e18a      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e18:	2304      	movs	r3, #4
 8011e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e1e:	e186      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e20:	2308      	movs	r3, #8
 8011e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e26:	e182      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e28:	2310      	movs	r3, #16
 8011e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e2e:	e17e      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e30:	2320      	movs	r3, #32
 8011e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e36:	e17a      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e38:	2340      	movs	r3, #64	; 0x40
 8011e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e3e:	e176      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e40:	2380      	movs	r3, #128	; 0x80
 8011e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e46:	e172      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4a5b      	ldr	r2, [pc, #364]	; (8011fbc <UART_SetConfig+0x63c>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d130      	bne.n	8011eb4 <UART_SetConfig+0x534>
 8011e52:	4b58      	ldr	r3, [pc, #352]	; (8011fb4 <UART_SetConfig+0x634>)
 8011e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e56:	f003 0307 	and.w	r3, r3, #7
 8011e5a:	2b05      	cmp	r3, #5
 8011e5c:	d826      	bhi.n	8011eac <UART_SetConfig+0x52c>
 8011e5e:	a201      	add	r2, pc, #4	; (adr r2, 8011e64 <UART_SetConfig+0x4e4>)
 8011e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e64:	08011e7d 	.word	0x08011e7d
 8011e68:	08011e85 	.word	0x08011e85
 8011e6c:	08011e8d 	.word	0x08011e8d
 8011e70:	08011e95 	.word	0x08011e95
 8011e74:	08011e9d 	.word	0x08011e9d
 8011e78:	08011ea5 	.word	0x08011ea5
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e82:	e154      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e84:	2304      	movs	r3, #4
 8011e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8a:	e150      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e8c:	2308      	movs	r3, #8
 8011e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e92:	e14c      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e94:	2310      	movs	r3, #16
 8011e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e9a:	e148      	b.n	801212e <UART_SetConfig+0x7ae>
 8011e9c:	2320      	movs	r3, #32
 8011e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ea2:	e144      	b.n	801212e <UART_SetConfig+0x7ae>
 8011ea4:	2340      	movs	r3, #64	; 0x40
 8011ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eaa:	e140      	b.n	801212e <UART_SetConfig+0x7ae>
 8011eac:	2380      	movs	r3, #128	; 0x80
 8011eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eb2:	e13c      	b.n	801212e <UART_SetConfig+0x7ae>
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	4a41      	ldr	r2, [pc, #260]	; (8011fc0 <UART_SetConfig+0x640>)
 8011eba:	4293      	cmp	r3, r2
 8011ebc:	f040 8082 	bne.w	8011fc4 <UART_SetConfig+0x644>
 8011ec0:	4b3c      	ldr	r3, [pc, #240]	; (8011fb4 <UART_SetConfig+0x634>)
 8011ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011ec8:	2b28      	cmp	r3, #40	; 0x28
 8011eca:	d86d      	bhi.n	8011fa8 <UART_SetConfig+0x628>
 8011ecc:	a201      	add	r2, pc, #4	; (adr r2, 8011ed4 <UART_SetConfig+0x554>)
 8011ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ed2:	bf00      	nop
 8011ed4:	08011f79 	.word	0x08011f79
 8011ed8:	08011fa9 	.word	0x08011fa9
 8011edc:	08011fa9 	.word	0x08011fa9
 8011ee0:	08011fa9 	.word	0x08011fa9
 8011ee4:	08011fa9 	.word	0x08011fa9
 8011ee8:	08011fa9 	.word	0x08011fa9
 8011eec:	08011fa9 	.word	0x08011fa9
 8011ef0:	08011fa9 	.word	0x08011fa9
 8011ef4:	08011f81 	.word	0x08011f81
 8011ef8:	08011fa9 	.word	0x08011fa9
 8011efc:	08011fa9 	.word	0x08011fa9
 8011f00:	08011fa9 	.word	0x08011fa9
 8011f04:	08011fa9 	.word	0x08011fa9
 8011f08:	08011fa9 	.word	0x08011fa9
 8011f0c:	08011fa9 	.word	0x08011fa9
 8011f10:	08011fa9 	.word	0x08011fa9
 8011f14:	08011f89 	.word	0x08011f89
 8011f18:	08011fa9 	.word	0x08011fa9
 8011f1c:	08011fa9 	.word	0x08011fa9
 8011f20:	08011fa9 	.word	0x08011fa9
 8011f24:	08011fa9 	.word	0x08011fa9
 8011f28:	08011fa9 	.word	0x08011fa9
 8011f2c:	08011fa9 	.word	0x08011fa9
 8011f30:	08011fa9 	.word	0x08011fa9
 8011f34:	08011f91 	.word	0x08011f91
 8011f38:	08011fa9 	.word	0x08011fa9
 8011f3c:	08011fa9 	.word	0x08011fa9
 8011f40:	08011fa9 	.word	0x08011fa9
 8011f44:	08011fa9 	.word	0x08011fa9
 8011f48:	08011fa9 	.word	0x08011fa9
 8011f4c:	08011fa9 	.word	0x08011fa9
 8011f50:	08011fa9 	.word	0x08011fa9
 8011f54:	08011f99 	.word	0x08011f99
 8011f58:	08011fa9 	.word	0x08011fa9
 8011f5c:	08011fa9 	.word	0x08011fa9
 8011f60:	08011fa9 	.word	0x08011fa9
 8011f64:	08011fa9 	.word	0x08011fa9
 8011f68:	08011fa9 	.word	0x08011fa9
 8011f6c:	08011fa9 	.word	0x08011fa9
 8011f70:	08011fa9 	.word	0x08011fa9
 8011f74:	08011fa1 	.word	0x08011fa1
 8011f78:	2301      	movs	r3, #1
 8011f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f7e:	e0d6      	b.n	801212e <UART_SetConfig+0x7ae>
 8011f80:	2304      	movs	r3, #4
 8011f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f86:	e0d2      	b.n	801212e <UART_SetConfig+0x7ae>
 8011f88:	2308      	movs	r3, #8
 8011f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f8e:	e0ce      	b.n	801212e <UART_SetConfig+0x7ae>
 8011f90:	2310      	movs	r3, #16
 8011f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f96:	e0ca      	b.n	801212e <UART_SetConfig+0x7ae>
 8011f98:	2320      	movs	r3, #32
 8011f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f9e:	e0c6      	b.n	801212e <UART_SetConfig+0x7ae>
 8011fa0:	2340      	movs	r3, #64	; 0x40
 8011fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fa6:	e0c2      	b.n	801212e <UART_SetConfig+0x7ae>
 8011fa8:	2380      	movs	r3, #128	; 0x80
 8011faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fae:	e0be      	b.n	801212e <UART_SetConfig+0x7ae>
 8011fb0:	40011400 	.word	0x40011400
 8011fb4:	58024400 	.word	0x58024400
 8011fb8:	40007800 	.word	0x40007800
 8011fbc:	40007c00 	.word	0x40007c00
 8011fc0:	40011800 	.word	0x40011800
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4aad      	ldr	r2, [pc, #692]	; (8012280 <UART_SetConfig+0x900>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d176      	bne.n	80120bc <UART_SetConfig+0x73c>
 8011fce:	4bad      	ldr	r3, [pc, #692]	; (8012284 <UART_SetConfig+0x904>)
 8011fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011fd6:	2b28      	cmp	r3, #40	; 0x28
 8011fd8:	d86c      	bhi.n	80120b4 <UART_SetConfig+0x734>
 8011fda:	a201      	add	r2, pc, #4	; (adr r2, 8011fe0 <UART_SetConfig+0x660>)
 8011fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fe0:	08012085 	.word	0x08012085
 8011fe4:	080120b5 	.word	0x080120b5
 8011fe8:	080120b5 	.word	0x080120b5
 8011fec:	080120b5 	.word	0x080120b5
 8011ff0:	080120b5 	.word	0x080120b5
 8011ff4:	080120b5 	.word	0x080120b5
 8011ff8:	080120b5 	.word	0x080120b5
 8011ffc:	080120b5 	.word	0x080120b5
 8012000:	0801208d 	.word	0x0801208d
 8012004:	080120b5 	.word	0x080120b5
 8012008:	080120b5 	.word	0x080120b5
 801200c:	080120b5 	.word	0x080120b5
 8012010:	080120b5 	.word	0x080120b5
 8012014:	080120b5 	.word	0x080120b5
 8012018:	080120b5 	.word	0x080120b5
 801201c:	080120b5 	.word	0x080120b5
 8012020:	08012095 	.word	0x08012095
 8012024:	080120b5 	.word	0x080120b5
 8012028:	080120b5 	.word	0x080120b5
 801202c:	080120b5 	.word	0x080120b5
 8012030:	080120b5 	.word	0x080120b5
 8012034:	080120b5 	.word	0x080120b5
 8012038:	080120b5 	.word	0x080120b5
 801203c:	080120b5 	.word	0x080120b5
 8012040:	0801209d 	.word	0x0801209d
 8012044:	080120b5 	.word	0x080120b5
 8012048:	080120b5 	.word	0x080120b5
 801204c:	080120b5 	.word	0x080120b5
 8012050:	080120b5 	.word	0x080120b5
 8012054:	080120b5 	.word	0x080120b5
 8012058:	080120b5 	.word	0x080120b5
 801205c:	080120b5 	.word	0x080120b5
 8012060:	080120a5 	.word	0x080120a5
 8012064:	080120b5 	.word	0x080120b5
 8012068:	080120b5 	.word	0x080120b5
 801206c:	080120b5 	.word	0x080120b5
 8012070:	080120b5 	.word	0x080120b5
 8012074:	080120b5 	.word	0x080120b5
 8012078:	080120b5 	.word	0x080120b5
 801207c:	080120b5 	.word	0x080120b5
 8012080:	080120ad 	.word	0x080120ad
 8012084:	2301      	movs	r3, #1
 8012086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801208a:	e050      	b.n	801212e <UART_SetConfig+0x7ae>
 801208c:	2304      	movs	r3, #4
 801208e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012092:	e04c      	b.n	801212e <UART_SetConfig+0x7ae>
 8012094:	2308      	movs	r3, #8
 8012096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801209a:	e048      	b.n	801212e <UART_SetConfig+0x7ae>
 801209c:	2310      	movs	r3, #16
 801209e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120a2:	e044      	b.n	801212e <UART_SetConfig+0x7ae>
 80120a4:	2320      	movs	r3, #32
 80120a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120aa:	e040      	b.n	801212e <UART_SetConfig+0x7ae>
 80120ac:	2340      	movs	r3, #64	; 0x40
 80120ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120b2:	e03c      	b.n	801212e <UART_SetConfig+0x7ae>
 80120b4:	2380      	movs	r3, #128	; 0x80
 80120b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ba:	e038      	b.n	801212e <UART_SetConfig+0x7ae>
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a71      	ldr	r2, [pc, #452]	; (8012288 <UART_SetConfig+0x908>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d130      	bne.n	8012128 <UART_SetConfig+0x7a8>
 80120c6:	4b6f      	ldr	r3, [pc, #444]	; (8012284 <UART_SetConfig+0x904>)
 80120c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ca:	f003 0307 	and.w	r3, r3, #7
 80120ce:	2b05      	cmp	r3, #5
 80120d0:	d826      	bhi.n	8012120 <UART_SetConfig+0x7a0>
 80120d2:	a201      	add	r2, pc, #4	; (adr r2, 80120d8 <UART_SetConfig+0x758>)
 80120d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120d8:	080120f1 	.word	0x080120f1
 80120dc:	080120f9 	.word	0x080120f9
 80120e0:	08012101 	.word	0x08012101
 80120e4:	08012109 	.word	0x08012109
 80120e8:	08012111 	.word	0x08012111
 80120ec:	08012119 	.word	0x08012119
 80120f0:	2302      	movs	r3, #2
 80120f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120f6:	e01a      	b.n	801212e <UART_SetConfig+0x7ae>
 80120f8:	2304      	movs	r3, #4
 80120fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120fe:	e016      	b.n	801212e <UART_SetConfig+0x7ae>
 8012100:	2308      	movs	r3, #8
 8012102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012106:	e012      	b.n	801212e <UART_SetConfig+0x7ae>
 8012108:	2310      	movs	r3, #16
 801210a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801210e:	e00e      	b.n	801212e <UART_SetConfig+0x7ae>
 8012110:	2320      	movs	r3, #32
 8012112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012116:	e00a      	b.n	801212e <UART_SetConfig+0x7ae>
 8012118:	2340      	movs	r3, #64	; 0x40
 801211a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801211e:	e006      	b.n	801212e <UART_SetConfig+0x7ae>
 8012120:	2380      	movs	r3, #128	; 0x80
 8012122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012126:	e002      	b.n	801212e <UART_SetConfig+0x7ae>
 8012128:	2380      	movs	r3, #128	; 0x80
 801212a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4a55      	ldr	r2, [pc, #340]	; (8012288 <UART_SetConfig+0x908>)
 8012134:	4293      	cmp	r3, r2
 8012136:	f040 80f8 	bne.w	801232a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801213a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801213e:	2b20      	cmp	r3, #32
 8012140:	dc46      	bgt.n	80121d0 <UART_SetConfig+0x850>
 8012142:	2b02      	cmp	r3, #2
 8012144:	db75      	blt.n	8012232 <UART_SetConfig+0x8b2>
 8012146:	3b02      	subs	r3, #2
 8012148:	2b1e      	cmp	r3, #30
 801214a:	d872      	bhi.n	8012232 <UART_SetConfig+0x8b2>
 801214c:	a201      	add	r2, pc, #4	; (adr r2, 8012154 <UART_SetConfig+0x7d4>)
 801214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012152:	bf00      	nop
 8012154:	080121d7 	.word	0x080121d7
 8012158:	08012233 	.word	0x08012233
 801215c:	080121df 	.word	0x080121df
 8012160:	08012233 	.word	0x08012233
 8012164:	08012233 	.word	0x08012233
 8012168:	08012233 	.word	0x08012233
 801216c:	080121ef 	.word	0x080121ef
 8012170:	08012233 	.word	0x08012233
 8012174:	08012233 	.word	0x08012233
 8012178:	08012233 	.word	0x08012233
 801217c:	08012233 	.word	0x08012233
 8012180:	08012233 	.word	0x08012233
 8012184:	08012233 	.word	0x08012233
 8012188:	08012233 	.word	0x08012233
 801218c:	080121ff 	.word	0x080121ff
 8012190:	08012233 	.word	0x08012233
 8012194:	08012233 	.word	0x08012233
 8012198:	08012233 	.word	0x08012233
 801219c:	08012233 	.word	0x08012233
 80121a0:	08012233 	.word	0x08012233
 80121a4:	08012233 	.word	0x08012233
 80121a8:	08012233 	.word	0x08012233
 80121ac:	08012233 	.word	0x08012233
 80121b0:	08012233 	.word	0x08012233
 80121b4:	08012233 	.word	0x08012233
 80121b8:	08012233 	.word	0x08012233
 80121bc:	08012233 	.word	0x08012233
 80121c0:	08012233 	.word	0x08012233
 80121c4:	08012233 	.word	0x08012233
 80121c8:	08012233 	.word	0x08012233
 80121cc:	08012225 	.word	0x08012225
 80121d0:	2b40      	cmp	r3, #64	; 0x40
 80121d2:	d02a      	beq.n	801222a <UART_SetConfig+0x8aa>
 80121d4:	e02d      	b.n	8012232 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80121d6:	f7fb f86b 	bl	800d2b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80121da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80121dc:	e02f      	b.n	801223e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80121de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7fb f87a 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80121e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121ec:	e027      	b.n	801223e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80121ee:	f107 0318 	add.w	r3, r7, #24
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fb f9c6 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121fc:	e01f      	b.n	801223e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121fe:	4b21      	ldr	r3, [pc, #132]	; (8012284 <UART_SetConfig+0x904>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f003 0320 	and.w	r3, r3, #32
 8012206:	2b00      	cmp	r3, #0
 8012208:	d009      	beq.n	801221e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801220a:	4b1e      	ldr	r3, [pc, #120]	; (8012284 <UART_SetConfig+0x904>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	08db      	lsrs	r3, r3, #3
 8012210:	f003 0303 	and.w	r3, r3, #3
 8012214:	4a1d      	ldr	r2, [pc, #116]	; (801228c <UART_SetConfig+0x90c>)
 8012216:	fa22 f303 	lsr.w	r3, r2, r3
 801221a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801221c:	e00f      	b.n	801223e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801221e:	4b1b      	ldr	r3, [pc, #108]	; (801228c <UART_SetConfig+0x90c>)
 8012220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012222:	e00c      	b.n	801223e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012224:	4b1a      	ldr	r3, [pc, #104]	; (8012290 <UART_SetConfig+0x910>)
 8012226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012228:	e009      	b.n	801223e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801222a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801222e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012230:	e005      	b.n	801223e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012232:	2300      	movs	r3, #0
 8012234:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012236:	2301      	movs	r3, #1
 8012238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801223c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801223e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012240:	2b00      	cmp	r3, #0
 8012242:	f000 81ee 	beq.w	8012622 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801224a:	4a12      	ldr	r2, [pc, #72]	; (8012294 <UART_SetConfig+0x914>)
 801224c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012250:	461a      	mov	r2, r3
 8012252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012254:	fbb3 f3f2 	udiv	r3, r3, r2
 8012258:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	685a      	ldr	r2, [r3, #4]
 801225e:	4613      	mov	r3, r2
 8012260:	005b      	lsls	r3, r3, #1
 8012262:	4413      	add	r3, r2
 8012264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012266:	429a      	cmp	r2, r3
 8012268:	d305      	bcc.n	8012276 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012272:	429a      	cmp	r2, r3
 8012274:	d910      	bls.n	8012298 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012276:	2301      	movs	r3, #1
 8012278:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801227c:	e1d1      	b.n	8012622 <UART_SetConfig+0xca2>
 801227e:	bf00      	nop
 8012280:	40011c00 	.word	0x40011c00
 8012284:	58024400 	.word	0x58024400
 8012288:	58000c00 	.word	0x58000c00
 801228c:	03d09000 	.word	0x03d09000
 8012290:	003d0900 	.word	0x003d0900
 8012294:	0801f6fc 	.word	0x0801f6fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801229a:	2200      	movs	r2, #0
 801229c:	60bb      	str	r3, [r7, #8]
 801229e:	60fa      	str	r2, [r7, #12]
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a4:	4ac0      	ldr	r2, [pc, #768]	; (80125a8 <UART_SetConfig+0xc28>)
 80122a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	2200      	movs	r2, #0
 80122ae:	603b      	str	r3, [r7, #0]
 80122b0:	607a      	str	r2, [r7, #4]
 80122b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80122ba:	f7ee fa4d 	bl	8000758 <__aeabi_uldivmod>
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4610      	mov	r0, r2
 80122c4:	4619      	mov	r1, r3
 80122c6:	f04f 0200 	mov.w	r2, #0
 80122ca:	f04f 0300 	mov.w	r3, #0
 80122ce:	020b      	lsls	r3, r1, #8
 80122d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80122d4:	0202      	lsls	r2, r0, #8
 80122d6:	6979      	ldr	r1, [r7, #20]
 80122d8:	6849      	ldr	r1, [r1, #4]
 80122da:	0849      	lsrs	r1, r1, #1
 80122dc:	2000      	movs	r0, #0
 80122de:	460c      	mov	r4, r1
 80122e0:	4605      	mov	r5, r0
 80122e2:	eb12 0804 	adds.w	r8, r2, r4
 80122e6:	eb43 0905 	adc.w	r9, r3, r5
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	2200      	movs	r2, #0
 80122f0:	469a      	mov	sl, r3
 80122f2:	4693      	mov	fp, r2
 80122f4:	4652      	mov	r2, sl
 80122f6:	465b      	mov	r3, fp
 80122f8:	4640      	mov	r0, r8
 80122fa:	4649      	mov	r1, r9
 80122fc:	f7ee fa2c 	bl	8000758 <__aeabi_uldivmod>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4613      	mov	r3, r2
 8012306:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801230e:	d308      	bcc.n	8012322 <UART_SetConfig+0x9a2>
 8012310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012316:	d204      	bcs.n	8012322 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801231e:	60da      	str	r2, [r3, #12]
 8012320:	e17f      	b.n	8012622 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012322:	2301      	movs	r3, #1
 8012324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012328:	e17b      	b.n	8012622 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	69db      	ldr	r3, [r3, #28]
 801232e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012332:	f040 80bd 	bne.w	80124b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801233a:	2b20      	cmp	r3, #32
 801233c:	dc48      	bgt.n	80123d0 <UART_SetConfig+0xa50>
 801233e:	2b00      	cmp	r3, #0
 8012340:	db7b      	blt.n	801243a <UART_SetConfig+0xaba>
 8012342:	2b20      	cmp	r3, #32
 8012344:	d879      	bhi.n	801243a <UART_SetConfig+0xaba>
 8012346:	a201      	add	r2, pc, #4	; (adr r2, 801234c <UART_SetConfig+0x9cc>)
 8012348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801234c:	080123d7 	.word	0x080123d7
 8012350:	080123df 	.word	0x080123df
 8012354:	0801243b 	.word	0x0801243b
 8012358:	0801243b 	.word	0x0801243b
 801235c:	080123e7 	.word	0x080123e7
 8012360:	0801243b 	.word	0x0801243b
 8012364:	0801243b 	.word	0x0801243b
 8012368:	0801243b 	.word	0x0801243b
 801236c:	080123f7 	.word	0x080123f7
 8012370:	0801243b 	.word	0x0801243b
 8012374:	0801243b 	.word	0x0801243b
 8012378:	0801243b 	.word	0x0801243b
 801237c:	0801243b 	.word	0x0801243b
 8012380:	0801243b 	.word	0x0801243b
 8012384:	0801243b 	.word	0x0801243b
 8012388:	0801243b 	.word	0x0801243b
 801238c:	08012407 	.word	0x08012407
 8012390:	0801243b 	.word	0x0801243b
 8012394:	0801243b 	.word	0x0801243b
 8012398:	0801243b 	.word	0x0801243b
 801239c:	0801243b 	.word	0x0801243b
 80123a0:	0801243b 	.word	0x0801243b
 80123a4:	0801243b 	.word	0x0801243b
 80123a8:	0801243b 	.word	0x0801243b
 80123ac:	0801243b 	.word	0x0801243b
 80123b0:	0801243b 	.word	0x0801243b
 80123b4:	0801243b 	.word	0x0801243b
 80123b8:	0801243b 	.word	0x0801243b
 80123bc:	0801243b 	.word	0x0801243b
 80123c0:	0801243b 	.word	0x0801243b
 80123c4:	0801243b 	.word	0x0801243b
 80123c8:	0801243b 	.word	0x0801243b
 80123cc:	0801242d 	.word	0x0801242d
 80123d0:	2b40      	cmp	r3, #64	; 0x40
 80123d2:	d02e      	beq.n	8012432 <UART_SetConfig+0xab2>
 80123d4:	e031      	b.n	801243a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80123d6:	f7f9 f8cd 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 80123da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80123dc:	e033      	b.n	8012446 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80123de:	f7f9 f8df 	bl	800b5a0 <HAL_RCC_GetPCLK2Freq>
 80123e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80123e4:	e02f      	b.n	8012446 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80123e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fa ff76 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80123f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123f4:	e027      	b.n	8012446 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80123f6:	f107 0318 	add.w	r3, r7, #24
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fb f8c2 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012404:	e01f      	b.n	8012446 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012406:	4b69      	ldr	r3, [pc, #420]	; (80125ac <UART_SetConfig+0xc2c>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f003 0320 	and.w	r3, r3, #32
 801240e:	2b00      	cmp	r3, #0
 8012410:	d009      	beq.n	8012426 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012412:	4b66      	ldr	r3, [pc, #408]	; (80125ac <UART_SetConfig+0xc2c>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	08db      	lsrs	r3, r3, #3
 8012418:	f003 0303 	and.w	r3, r3, #3
 801241c:	4a64      	ldr	r2, [pc, #400]	; (80125b0 <UART_SetConfig+0xc30>)
 801241e:	fa22 f303 	lsr.w	r3, r2, r3
 8012422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012424:	e00f      	b.n	8012446 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012426:	4b62      	ldr	r3, [pc, #392]	; (80125b0 <UART_SetConfig+0xc30>)
 8012428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801242a:	e00c      	b.n	8012446 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801242c:	4b61      	ldr	r3, [pc, #388]	; (80125b4 <UART_SetConfig+0xc34>)
 801242e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012430:	e009      	b.n	8012446 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012438:	e005      	b.n	8012446 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801243e:	2301      	movs	r3, #1
 8012440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012448:	2b00      	cmp	r3, #0
 801244a:	f000 80ea 	beq.w	8012622 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012452:	4a55      	ldr	r2, [pc, #340]	; (80125a8 <UART_SetConfig+0xc28>)
 8012454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012458:	461a      	mov	r2, r3
 801245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801245c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012460:	005a      	lsls	r2, r3, #1
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	085b      	lsrs	r3, r3, #1
 8012468:	441a      	add	r2, r3
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012472:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012476:	2b0f      	cmp	r3, #15
 8012478:	d916      	bls.n	80124a8 <UART_SetConfig+0xb28>
 801247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012480:	d212      	bcs.n	80124a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012484:	b29b      	uxth	r3, r3
 8012486:	f023 030f 	bic.w	r3, r3, #15
 801248a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248e:	085b      	lsrs	r3, r3, #1
 8012490:	b29b      	uxth	r3, r3
 8012492:	f003 0307 	and.w	r3, r3, #7
 8012496:	b29a      	uxth	r2, r3
 8012498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801249a:	4313      	orrs	r3, r2
 801249c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80124a4:	60da      	str	r2, [r3, #12]
 80124a6:	e0bc      	b.n	8012622 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80124a8:	2301      	movs	r3, #1
 80124aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80124ae:	e0b8      	b.n	8012622 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80124b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80124b4:	2b20      	cmp	r3, #32
 80124b6:	dc4b      	bgt.n	8012550 <UART_SetConfig+0xbd0>
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f2c0 8087 	blt.w	80125cc <UART_SetConfig+0xc4c>
 80124be:	2b20      	cmp	r3, #32
 80124c0:	f200 8084 	bhi.w	80125cc <UART_SetConfig+0xc4c>
 80124c4:	a201      	add	r2, pc, #4	; (adr r2, 80124cc <UART_SetConfig+0xb4c>)
 80124c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ca:	bf00      	nop
 80124cc:	08012557 	.word	0x08012557
 80124d0:	0801255f 	.word	0x0801255f
 80124d4:	080125cd 	.word	0x080125cd
 80124d8:	080125cd 	.word	0x080125cd
 80124dc:	08012567 	.word	0x08012567
 80124e0:	080125cd 	.word	0x080125cd
 80124e4:	080125cd 	.word	0x080125cd
 80124e8:	080125cd 	.word	0x080125cd
 80124ec:	08012577 	.word	0x08012577
 80124f0:	080125cd 	.word	0x080125cd
 80124f4:	080125cd 	.word	0x080125cd
 80124f8:	080125cd 	.word	0x080125cd
 80124fc:	080125cd 	.word	0x080125cd
 8012500:	080125cd 	.word	0x080125cd
 8012504:	080125cd 	.word	0x080125cd
 8012508:	080125cd 	.word	0x080125cd
 801250c:	08012587 	.word	0x08012587
 8012510:	080125cd 	.word	0x080125cd
 8012514:	080125cd 	.word	0x080125cd
 8012518:	080125cd 	.word	0x080125cd
 801251c:	080125cd 	.word	0x080125cd
 8012520:	080125cd 	.word	0x080125cd
 8012524:	080125cd 	.word	0x080125cd
 8012528:	080125cd 	.word	0x080125cd
 801252c:	080125cd 	.word	0x080125cd
 8012530:	080125cd 	.word	0x080125cd
 8012534:	080125cd 	.word	0x080125cd
 8012538:	080125cd 	.word	0x080125cd
 801253c:	080125cd 	.word	0x080125cd
 8012540:	080125cd 	.word	0x080125cd
 8012544:	080125cd 	.word	0x080125cd
 8012548:	080125cd 	.word	0x080125cd
 801254c:	080125bf 	.word	0x080125bf
 8012550:	2b40      	cmp	r3, #64	; 0x40
 8012552:	d037      	beq.n	80125c4 <UART_SetConfig+0xc44>
 8012554:	e03a      	b.n	80125cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012556:	f7f9 f80d 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 801255a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801255c:	e03c      	b.n	80125d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801255e:	f7f9 f81f 	bl	800b5a0 <HAL_RCC_GetPCLK2Freq>
 8012562:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012564:	e038      	b.n	80125d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801256a:	4618      	mov	r0, r3
 801256c:	f7fa feb6 	bl	800d2dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012574:	e030      	b.n	80125d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012576:	f107 0318 	add.w	r3, r7, #24
 801257a:	4618      	mov	r0, r3
 801257c:	f7fb f802 	bl	800d584 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012584:	e028      	b.n	80125d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012586:	4b09      	ldr	r3, [pc, #36]	; (80125ac <UART_SetConfig+0xc2c>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f003 0320 	and.w	r3, r3, #32
 801258e:	2b00      	cmp	r3, #0
 8012590:	d012      	beq.n	80125b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012592:	4b06      	ldr	r3, [pc, #24]	; (80125ac <UART_SetConfig+0xc2c>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	08db      	lsrs	r3, r3, #3
 8012598:	f003 0303 	and.w	r3, r3, #3
 801259c:	4a04      	ldr	r2, [pc, #16]	; (80125b0 <UART_SetConfig+0xc30>)
 801259e:	fa22 f303 	lsr.w	r3, r2, r3
 80125a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80125a4:	e018      	b.n	80125d8 <UART_SetConfig+0xc58>
 80125a6:	bf00      	nop
 80125a8:	0801f6fc 	.word	0x0801f6fc
 80125ac:	58024400 	.word	0x58024400
 80125b0:	03d09000 	.word	0x03d09000
 80125b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80125b8:	4b24      	ldr	r3, [pc, #144]	; (801264c <UART_SetConfig+0xccc>)
 80125ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125bc:	e00c      	b.n	80125d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80125be:	4b24      	ldr	r3, [pc, #144]	; (8012650 <UART_SetConfig+0xcd0>)
 80125c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125c2:	e009      	b.n	80125d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80125c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125ca:	e005      	b.n	80125d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80125cc:	2300      	movs	r3, #0
 80125ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80125d0:	2301      	movs	r3, #1
 80125d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80125d6:	bf00      	nop
    }

    if (pclk != 0U)
 80125d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d021      	beq.n	8012622 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e2:	4a1c      	ldr	r2, [pc, #112]	; (8012654 <UART_SetConfig+0xcd4>)
 80125e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125e8:	461a      	mov	r2, r3
 80125ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	085b      	lsrs	r3, r3, #1
 80125f6:	441a      	add	r2, r3
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012600:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012604:	2b0f      	cmp	r3, #15
 8012606:	d909      	bls.n	801261c <UART_SetConfig+0xc9c>
 8012608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801260e:	d205      	bcs.n	801261c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012612:	b29a      	uxth	r2, r3
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	60da      	str	r2, [r3, #12]
 801261a:	e002      	b.n	8012622 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801261c:	2301      	movs	r3, #1
 801261e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2201      	movs	r2, #1
 8012626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	2201      	movs	r2, #1
 801262e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2200      	movs	r2, #0
 8012636:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	2200      	movs	r2, #0
 801263c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801263e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012642:	4618      	mov	r0, r3
 8012644:	3748      	adds	r7, #72	; 0x48
 8012646:	46bd      	mov	sp, r7
 8012648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801264c:	03d09000 	.word	0x03d09000
 8012650:	003d0900 	.word	0x003d0900
 8012654:	0801f6fc 	.word	0x0801f6fc

08012658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012664:	f003 0301 	and.w	r3, r3, #1
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00a      	beq.n	8012682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	430a      	orrs	r2, r1
 8012680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012686:	f003 0302 	and.w	r3, r3, #2
 801268a:	2b00      	cmp	r3, #0
 801268c:	d00a      	beq.n	80126a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	430a      	orrs	r2, r1
 80126a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126a8:	f003 0304 	and.w	r3, r3, #4
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d00a      	beq.n	80126c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	430a      	orrs	r2, r1
 80126c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126ca:	f003 0308 	and.w	r3, r3, #8
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00a      	beq.n	80126e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	430a      	orrs	r2, r1
 80126e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126ec:	f003 0310 	and.w	r3, r3, #16
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00a      	beq.n	801270a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	430a      	orrs	r2, r1
 8012708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801270e:	f003 0320 	and.w	r3, r3, #32
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00a      	beq.n	801272c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	430a      	orrs	r2, r1
 801272a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012734:	2b00      	cmp	r3, #0
 8012736:	d01a      	beq.n	801276e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	430a      	orrs	r2, r1
 801274c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012756:	d10a      	bne.n	801276e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	430a      	orrs	r2, r1
 801276c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00a      	beq.n	8012790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	430a      	orrs	r2, r1
 801278e:	605a      	str	r2, [r3, #4]
  }
}
 8012790:	bf00      	nop
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr

0801279c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b098      	sub	sp, #96	; 0x60
 80127a0:	af02      	add	r7, sp, #8
 80127a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80127ac:	f7f1 fbd4 	bl	8003f58 <HAL_GetTick>
 80127b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f003 0308 	and.w	r3, r3, #8
 80127bc:	2b08      	cmp	r3, #8
 80127be:	d12f      	bne.n	8012820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80127c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127c8:	2200      	movs	r2, #0
 80127ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f88e 	bl	80128f0 <UART_WaitOnFlagUntilTimeout>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d022      	beq.n	8012820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e2:	e853 3f00 	ldrex	r3, [r3]
 80127e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80127e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80127ee:	653b      	str	r3, [r7, #80]	; 0x50
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	461a      	mov	r2, r3
 80127f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127f8:	647b      	str	r3, [r7, #68]	; 0x44
 80127fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80127fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012800:	e841 2300 	strex	r3, r2, [r1]
 8012804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012808:	2b00      	cmp	r3, #0
 801280a:	d1e6      	bne.n	80127da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2220      	movs	r2, #32
 8012810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2200      	movs	r2, #0
 8012818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801281c:	2303      	movs	r3, #3
 801281e:	e063      	b.n	80128e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f003 0304 	and.w	r3, r3, #4
 801282a:	2b04      	cmp	r3, #4
 801282c:	d149      	bne.n	80128c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801282e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012832:	9300      	str	r3, [sp, #0]
 8012834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012836:	2200      	movs	r2, #0
 8012838:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f857 	bl	80128f0 <UART_WaitOnFlagUntilTimeout>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d03c      	beq.n	80128c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012850:	e853 3f00 	ldrex	r3, [r3]
 8012854:	623b      	str	r3, [r7, #32]
   return(result);
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801285c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	461a      	mov	r2, r3
 8012864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012866:	633b      	str	r3, [r7, #48]	; 0x30
 8012868:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801286a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801286c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801286e:	e841 2300 	strex	r3, r2, [r1]
 8012872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1e6      	bne.n	8012848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	3308      	adds	r3, #8
 8012880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	e853 3f00 	ldrex	r3, [r3]
 8012888:	60fb      	str	r3, [r7, #12]
   return(result);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	f023 0301 	bic.w	r3, r3, #1
 8012890:	64bb      	str	r3, [r7, #72]	; 0x48
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	3308      	adds	r3, #8
 8012898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801289a:	61fa      	str	r2, [r7, #28]
 801289c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801289e:	69b9      	ldr	r1, [r7, #24]
 80128a0:	69fa      	ldr	r2, [r7, #28]
 80128a2:	e841 2300 	strex	r3, r2, [r1]
 80128a6:	617b      	str	r3, [r7, #20]
   return(result);
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d1e5      	bne.n	801287a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2220      	movs	r2, #32
 80128b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80128be:	2303      	movs	r3, #3
 80128c0:	e012      	b.n	80128e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2220      	movs	r2, #32
 80128c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2220      	movs	r2, #32
 80128ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2200      	movs	r2, #0
 80128d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3758      	adds	r7, #88	; 0x58
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	603b      	str	r3, [r7, #0]
 80128fc:	4613      	mov	r3, r2
 80128fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012900:	e049      	b.n	8012996 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012908:	d045      	beq.n	8012996 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801290a:	f7f1 fb25 	bl	8003f58 <HAL_GetTick>
 801290e:	4602      	mov	r2, r0
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	1ad3      	subs	r3, r2, r3
 8012914:	69ba      	ldr	r2, [r7, #24]
 8012916:	429a      	cmp	r2, r3
 8012918:	d302      	bcc.n	8012920 <UART_WaitOnFlagUntilTimeout+0x30>
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d101      	bne.n	8012924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012920:	2303      	movs	r3, #3
 8012922:	e048      	b.n	80129b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f003 0304 	and.w	r3, r3, #4
 801292e:	2b00      	cmp	r3, #0
 8012930:	d031      	beq.n	8012996 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	69db      	ldr	r3, [r3, #28]
 8012938:	f003 0308 	and.w	r3, r3, #8
 801293c:	2b08      	cmp	r3, #8
 801293e:	d110      	bne.n	8012962 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2208      	movs	r2, #8
 8012946:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f000 f839 	bl	80129c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2208      	movs	r2, #8
 8012952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	2200      	movs	r2, #0
 801295a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801295e:	2301      	movs	r3, #1
 8012960:	e029      	b.n	80129b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	69db      	ldr	r3, [r3, #28]
 8012968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801296c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012970:	d111      	bne.n	8012996 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801297a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f000 f81f 	bl	80129c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2220      	movs	r2, #32
 8012986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2200      	movs	r2, #0
 801298e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012992:	2303      	movs	r3, #3
 8012994:	e00f      	b.n	80129b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	69da      	ldr	r2, [r3, #28]
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	4013      	ands	r3, r2
 80129a0:	68ba      	ldr	r2, [r7, #8]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	bf0c      	ite	eq
 80129a6:	2301      	moveq	r3, #1
 80129a8:	2300      	movne	r3, #0
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	461a      	mov	r2, r3
 80129ae:	79fb      	ldrb	r3, [r7, #7]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d0a6      	beq.n	8012902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80129b4:	2300      	movs	r3, #0
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
	...

080129c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b095      	sub	sp, #84	; 0x54
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d0:	e853 3f00 	ldrex	r3, [r3]
 80129d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80129d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80129dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	461a      	mov	r2, r3
 80129e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129e6:	643b      	str	r3, [r7, #64]	; 0x40
 80129e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80129ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129ee:	e841 2300 	strex	r3, r2, [r1]
 80129f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80129f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d1e6      	bne.n	80129c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	3308      	adds	r3, #8
 8012a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a02:	6a3b      	ldr	r3, [r7, #32]
 8012a04:	e853 3f00 	ldrex	r3, [r3]
 8012a08:	61fb      	str	r3, [r7, #28]
   return(result);
 8012a0a:	69fa      	ldr	r2, [r7, #28]
 8012a0c:	4b1e      	ldr	r3, [pc, #120]	; (8012a88 <UART_EndRxTransfer+0xc8>)
 8012a0e:	4013      	ands	r3, r2
 8012a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	3308      	adds	r3, #8
 8012a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a22:	e841 2300 	strex	r3, r2, [r1]
 8012a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d1e5      	bne.n	80129fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d118      	bne.n	8012a68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	e853 3f00 	ldrex	r3, [r3]
 8012a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	f023 0310 	bic.w	r3, r3, #16
 8012a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	461a      	mov	r2, r3
 8012a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a54:	61bb      	str	r3, [r7, #24]
 8012a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a58:	6979      	ldr	r1, [r7, #20]
 8012a5a:	69ba      	ldr	r2, [r7, #24]
 8012a5c:	e841 2300 	strex	r3, r2, [r1]
 8012a60:	613b      	str	r3, [r7, #16]
   return(result);
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d1e6      	bne.n	8012a36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2220      	movs	r2, #32
 8012a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012a7c:	bf00      	nop
 8012a7e:	3754      	adds	r7, #84	; 0x54
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr
 8012a88:	effffffe 	.word	0xeffffffe

08012a8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b085      	sub	sp, #20
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d101      	bne.n	8012aa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012a9e:	2302      	movs	r3, #2
 8012aa0:	e027      	b.n	8012af2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2224      	movs	r2, #36	; 0x24
 8012aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	f022 0201 	bic.w	r2, r2, #1
 8012ac8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ad0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2220      	movs	r2, #32
 8012ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2200      	movs	r2, #0
 8012aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3714      	adds	r7, #20
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b084      	sub	sp, #16
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d101      	bne.n	8012b16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012b12:	2302      	movs	r3, #2
 8012b14:	e02d      	b.n	8012b72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2201      	movs	r2, #1
 8012b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2224      	movs	r2, #36	; 0x24
 8012b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f022 0201 	bic.w	r2, r2, #1
 8012b3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	689b      	ldr	r3, [r3, #8]
 8012b44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	683a      	ldr	r2, [r7, #0]
 8012b4e:	430a      	orrs	r2, r1
 8012b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 f850 	bl	8012bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2220      	movs	r2, #32
 8012b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b7a:	b580      	push	{r7, lr}
 8012b7c:	b084      	sub	sp, #16
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
 8012b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d101      	bne.n	8012b92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012b8e:	2302      	movs	r3, #2
 8012b90:	e02d      	b.n	8012bee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2201      	movs	r2, #1
 8012b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2224      	movs	r2, #36	; 0x24
 8012b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f022 0201 	bic.w	r2, r2, #1
 8012bb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	430a      	orrs	r2, r1
 8012bcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f812 	bl	8012bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	68fa      	ldr	r2, [r7, #12]
 8012bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2220      	movs	r2, #32
 8012be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2200      	movs	r2, #0
 8012be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bec:	2300      	movs	r3, #0
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3710      	adds	r7, #16
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
	...

08012bf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b085      	sub	sp, #20
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d108      	bne.n	8012c1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012c18:	e031      	b.n	8012c7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012c1a:	2310      	movs	r3, #16
 8012c1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012c1e:	2310      	movs	r3, #16
 8012c20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	0e5b      	lsrs	r3, r3, #25
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	f003 0307 	and.w	r3, r3, #7
 8012c30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	0f5b      	lsrs	r3, r3, #29
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	f003 0307 	and.w	r3, r3, #7
 8012c40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012c42:	7bbb      	ldrb	r3, [r7, #14]
 8012c44:	7b3a      	ldrb	r2, [r7, #12]
 8012c46:	4911      	ldr	r1, [pc, #68]	; (8012c8c <UARTEx_SetNbDataToProcess+0x94>)
 8012c48:	5c8a      	ldrb	r2, [r1, r2]
 8012c4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012c4e:	7b3a      	ldrb	r2, [r7, #12]
 8012c50:	490f      	ldr	r1, [pc, #60]	; (8012c90 <UARTEx_SetNbDataToProcess+0x98>)
 8012c52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c58:	b29a      	uxth	r2, r3
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012c60:	7bfb      	ldrb	r3, [r7, #15]
 8012c62:	7b7a      	ldrb	r2, [r7, #13]
 8012c64:	4909      	ldr	r1, [pc, #36]	; (8012c8c <UARTEx_SetNbDataToProcess+0x94>)
 8012c66:	5c8a      	ldrb	r2, [r1, r2]
 8012c68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012c6c:	7b7a      	ldrb	r2, [r7, #13]
 8012c6e:	4908      	ldr	r1, [pc, #32]	; (8012c90 <UARTEx_SetNbDataToProcess+0x98>)
 8012c70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012c72:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012c7e:	bf00      	nop
 8012c80:	3714      	adds	r7, #20
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	0801f714 	.word	0x0801f714
 8012c90:	0801f71c 	.word	0x0801f71c

08012c94 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012c94:	b084      	sub	sp, #16
 8012c96:	b480      	push	{r7}
 8012c98:	b085      	sub	sp, #20
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	f107 001c 	add.w	r0, r7, #28
 8012ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012caa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012cac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012cae:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012cb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012cb6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012cba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	4313      	orrs	r3, r2
 8012cc0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	685a      	ldr	r2, [r3, #4]
 8012cc6:	4b07      	ldr	r3, [pc, #28]	; (8012ce4 <SDMMC_Init+0x50>)
 8012cc8:	4013      	ands	r3, r2
 8012cca:	68fa      	ldr	r2, [r7, #12]
 8012ccc:	431a      	orrs	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3714      	adds	r7, #20
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	b004      	add	sp, #16
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	ffc02c00 	.word	0xffc02c00

08012ce8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	370c      	adds	r7, #12
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012d02:	b480      	push	{r7}
 8012d04:	b083      	sub	sp, #12
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
 8012d0a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	f043 0203 	orr.w	r2, r3, #3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	370c      	adds	r7, #12
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr

08012d46 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012d46:	b480      	push	{r7}
 8012d48:	b083      	sub	sp, #12
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f003 0303 	and.w	r3, r3, #3
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr
	...

08012d64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012d82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012d88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012d8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	68da      	ldr	r2, [r3, #12]
 8012d9a:	4b06      	ldr	r3, [pc, #24]	; (8012db4 <SDMMC_SendCommand+0x50>)
 8012d9c:	4013      	ands	r3, r2
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	431a      	orrs	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3714      	adds	r7, #20
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr
 8012db4:	fffee0c0 	.word	0xfffee0c0

08012db8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b083      	sub	sp, #12
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	691b      	ldr	r3, [r3, #16]
 8012dc4:	b2db      	uxtb	r3, r3
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	370c      	adds	r7, #12
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012dd2:	b480      	push	{r7}
 8012dd4:	b085      	sub	sp, #20
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	6078      	str	r0, [r7, #4]
 8012dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3314      	adds	r3, #20
 8012de0:	461a      	mov	r2, r3
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	4413      	add	r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3714      	adds	r7, #20
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	685a      	ldr	r2, [r3, #4]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e1e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012e24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012e2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e2c:	68fa      	ldr	r2, [r7, #12]
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	431a      	orrs	r2, r3
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012e42:	2300      	movs	r3, #0

}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3714      	adds	r7, #20
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b088      	sub	sp, #32
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012e5e:	2310      	movs	r3, #16
 8012e60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e72:	f107 0308 	add.w	r3, r7, #8
 8012e76:	4619      	mov	r1, r3
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff ff73 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e82:	2110      	movs	r1, #16
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 fa5f 	bl	8013348 <SDMMC_GetCmdResp1>
 8012e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e8c:	69fb      	ldr	r3, [r7, #28]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3720      	adds	r7, #32
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b088      	sub	sp, #32
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
 8012e9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012ea4:	2311      	movs	r3, #17
 8012ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012eb8:	f107 0308 	add.w	r3, r7, #8
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f7ff ff50 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ec8:	2111      	movs	r1, #17
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f000 fa3c 	bl	8013348 <SDMMC_GetCmdResp1>
 8012ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ed2:	69fb      	ldr	r3, [r7, #28]
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3720      	adds	r7, #32
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b088      	sub	sp, #32
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012eea:	2312      	movs	r3, #18
 8012eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012efc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012efe:	f107 0308 	add.w	r3, r7, #8
 8012f02:	4619      	mov	r1, r3
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7ff ff2d 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f0e:	2112      	movs	r1, #18
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 fa19 	bl	8013348 <SDMMC_GetCmdResp1>
 8012f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f18:	69fb      	ldr	r3, [r7, #28]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}

08012f22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012f22:	b580      	push	{r7, lr}
 8012f24:	b088      	sub	sp, #32
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
 8012f2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012f30:	2318      	movs	r3, #24
 8012f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f44:	f107 0308 	add.w	r3, r7, #8
 8012f48:	4619      	mov	r1, r3
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f7ff ff0a 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f54:	2118      	movs	r1, #24
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 f9f6 	bl	8013348 <SDMMC_GetCmdResp1>
 8012f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f5e:	69fb      	ldr	r3, [r7, #28]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3720      	adds	r7, #32
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}

08012f68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b088      	sub	sp, #32
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012f76:	2319      	movs	r3, #25
 8012f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f80:	2300      	movs	r3, #0
 8012f82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f8a:	f107 0308 	add.w	r3, r7, #8
 8012f8e:	4619      	mov	r1, r3
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7ff fee7 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f9a:	2119      	movs	r1, #25
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 f9d3 	bl	8013348 <SDMMC_GetCmdResp1>
 8012fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fa4:	69fb      	ldr	r3, [r7, #28]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3720      	adds	r7, #32
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
	...

08012fb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b088      	sub	sp, #32
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012fbc:	230c      	movs	r3, #12
 8012fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fce:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fe8:	f107 0308 	add.w	r3, r7, #8
 8012fec:	4619      	mov	r1, r3
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7ff feb8 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012ff4:	4a0b      	ldr	r2, [pc, #44]	; (8013024 <SDMMC_CmdStopTransfer+0x74>)
 8012ff6:	210c      	movs	r1, #12
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f000 f9a5 	bl	8013348 <SDMMC_GetCmdResp1>
 8012ffe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	68db      	ldr	r3, [r3, #12]
 8013004:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013012:	d101      	bne.n	8013018 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013014:	2300      	movs	r3, #0
 8013016:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013018:	69fb      	ldr	r3, [r7, #28]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3720      	adds	r7, #32
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	05f5e100 	.word	0x05f5e100

08013028 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b088      	sub	sp, #32
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013036:	2307      	movs	r3, #7
 8013038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801303a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801303e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013040:	2300      	movs	r3, #0
 8013042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801304a:	f107 0308 	add.w	r3, r7, #8
 801304e:	4619      	mov	r1, r3
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7ff fe87 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013056:	f241 3288 	movw	r2, #5000	; 0x1388
 801305a:	2107      	movs	r1, #7
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 f973 	bl	8013348 <SDMMC_GetCmdResp1>
 8013062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013064:	69fb      	ldr	r3, [r7, #28]
}
 8013066:	4618      	mov	r0, r3
 8013068:	3720      	adds	r7, #32
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}

0801306e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801306e:	b580      	push	{r7, lr}
 8013070:	b088      	sub	sp, #32
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013076:	2300      	movs	r3, #0
 8013078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801307a:	2300      	movs	r3, #0
 801307c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801307e:	2300      	movs	r3, #0
 8013080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013082:	2300      	movs	r3, #0
 8013084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801308a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801308c:	f107 0308 	add.w	r3, r7, #8
 8013090:	4619      	mov	r1, r3
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f7ff fe66 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f000 fb97 	bl	80137cc <SDMMC_GetCmdError>
 801309e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130a0:	69fb      	ldr	r3, [r7, #28]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3720      	adds	r7, #32
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b088      	sub	sp, #32
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80130b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80130b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80130b8:	2308      	movs	r3, #8
 80130ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130c2:	2300      	movs	r3, #0
 80130c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130cc:	f107 0308 	add.w	r3, r7, #8
 80130d0:	4619      	mov	r1, r3
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff fe46 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fb29 	bl	8013730 <SDMMC_GetCmdResp7>
 80130de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130e0:	69fb      	ldr	r3, [r7, #28]
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3720      	adds	r7, #32
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}

080130ea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80130ea:	b580      	push	{r7, lr}
 80130ec:	b088      	sub	sp, #32
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
 80130f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80130f8:	2337      	movs	r3, #55	; 0x37
 80130fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013102:	2300      	movs	r3, #0
 8013104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801310a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801310c:	f107 0308 	add.w	r3, r7, #8
 8013110:	4619      	mov	r1, r3
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7ff fe26 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013118:	f241 3288 	movw	r2, #5000	; 0x1388
 801311c:	2137      	movs	r1, #55	; 0x37
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 f912 	bl	8013348 <SDMMC_GetCmdResp1>
 8013124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013126:	69fb      	ldr	r3, [r7, #28]
}
 8013128:	4618      	mov	r0, r3
 801312a:	3720      	adds	r7, #32
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b088      	sub	sp, #32
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801313e:	2329      	movs	r3, #41	; 0x29
 8013140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013148:	2300      	movs	r3, #0
 801314a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801314c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013152:	f107 0308 	add.w	r3, r7, #8
 8013156:	4619      	mov	r1, r3
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7ff fe03 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f000 fa2e 	bl	80135c0 <SDMMC_GetCmdResp3>
 8013164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013166:	69fb      	ldr	r3, [r7, #28]
}
 8013168:	4618      	mov	r0, r3
 801316a:	3720      	adds	r7, #32
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b088      	sub	sp, #32
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801317e:	2306      	movs	r3, #6
 8013180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013188:	2300      	movs	r3, #0
 801318a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801318c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013190:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013192:	f107 0308 	add.w	r3, r7, #8
 8013196:	4619      	mov	r1, r3
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ff fde3 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80131a2:	2106      	movs	r1, #6
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 f8cf 	bl	8013348 <SDMMC_GetCmdResp1>
 80131aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131ac:	69fb      	ldr	r3, [r7, #28]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3720      	adds	r7, #32
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}

080131b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80131b6:	b580      	push	{r7, lr}
 80131b8:	b088      	sub	sp, #32
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80131be:	2300      	movs	r3, #0
 80131c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80131c2:	2333      	movs	r3, #51	; 0x33
 80131c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131cc:	2300      	movs	r3, #0
 80131ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131d6:	f107 0308 	add.w	r3, r7, #8
 80131da:	4619      	mov	r1, r3
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ff fdc1 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80131e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80131e6:	2133      	movs	r1, #51	; 0x33
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f000 f8ad 	bl	8013348 <SDMMC_GetCmdResp1>
 80131ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131f0:	69fb      	ldr	r3, [r7, #28]
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3720      	adds	r7, #32
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b088      	sub	sp, #32
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013202:	2300      	movs	r3, #0
 8013204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013206:	2302      	movs	r3, #2
 8013208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801320a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801320e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013210:	2300      	movs	r3, #0
 8013212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801321a:	f107 0308 	add.w	r3, r7, #8
 801321e:	4619      	mov	r1, r3
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7ff fd9f 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 f980 	bl	801352c <SDMMC_GetCmdResp2>
 801322c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801322e:	69fb      	ldr	r3, [r7, #28]
}
 8013230:	4618      	mov	r0, r3
 8013232:	3720      	adds	r7, #32
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}

08013238 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b088      	sub	sp, #32
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013246:	2309      	movs	r3, #9
 8013248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801324a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801324e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013250:	2300      	movs	r3, #0
 8013252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801325a:	f107 0308 	add.w	r3, r7, #8
 801325e:	4619      	mov	r1, r3
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f7ff fd7f 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f000 f960 	bl	801352c <SDMMC_GetCmdResp2>
 801326c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801326e:	69fb      	ldr	r3, [r7, #28]
}
 8013270:	4618      	mov	r0, r3
 8013272:	3720      	adds	r7, #32
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b088      	sub	sp, #32
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013282:	2300      	movs	r3, #0
 8013284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013286:	2303      	movs	r3, #3
 8013288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801328a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801328e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013290:	2300      	movs	r3, #0
 8013292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013298:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801329a:	f107 0308 	add.w	r3, r7, #8
 801329e:	4619      	mov	r1, r3
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f7ff fd5f 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80132a6:	683a      	ldr	r2, [r7, #0]
 80132a8:	2103      	movs	r1, #3
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 f9c8 	bl	8013640 <SDMMC_GetCmdResp6>
 80132b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132b2:	69fb      	ldr	r3, [r7, #28]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3720      	adds	r7, #32
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80132ca:	230d      	movs	r3, #13
 80132cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132d4:	2300      	movs	r3, #0
 80132d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132de:	f107 0308 	add.w	r3, r7, #8
 80132e2:	4619      	mov	r1, r3
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f7ff fd3d 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80132ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80132ee:	210d      	movs	r1, #13
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f000 f829 	bl	8013348 <SDMMC_GetCmdResp1>
 80132f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132f8:	69fb      	ldr	r3, [r7, #28]
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3720      	adds	r7, #32
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}

08013302 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013302:	b580      	push	{r7, lr}
 8013304:	b088      	sub	sp, #32
 8013306:	af00      	add	r7, sp, #0
 8013308:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801330a:	2300      	movs	r3, #0
 801330c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801330e:	230d      	movs	r3, #13
 8013310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013318:	2300      	movs	r3, #0
 801331a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013320:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013322:	f107 0308 	add.w	r3, r7, #8
 8013326:	4619      	mov	r1, r3
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7ff fd1b 	bl	8012d64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013332:	210d      	movs	r1, #13
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 f807 	bl	8013348 <SDMMC_GetCmdResp1>
 801333a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801333c:	69fb      	ldr	r3, [r7, #28]
}
 801333e:	4618      	mov	r0, r3
 8013340:	3720      	adds	r7, #32
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
	...

08013348 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b088      	sub	sp, #32
 801334c:	af00      	add	r7, sp, #0
 801334e:	60f8      	str	r0, [r7, #12]
 8013350:	460b      	mov	r3, r1
 8013352:	607a      	str	r2, [r7, #4]
 8013354:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013356:	4b70      	ldr	r3, [pc, #448]	; (8013518 <SDMMC_GetCmdResp1+0x1d0>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4a70      	ldr	r2, [pc, #448]	; (801351c <SDMMC_GetCmdResp1+0x1d4>)
 801335c:	fba2 2303 	umull	r2, r3, r2, r3
 8013360:	0a5a      	lsrs	r2, r3, #9
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	fb02 f303 	mul.w	r3, r2, r3
 8013368:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801336a:	69fb      	ldr	r3, [r7, #28]
 801336c:	1e5a      	subs	r2, r3, #1
 801336e:	61fa      	str	r2, [r7, #28]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d102      	bne.n	801337a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013378:	e0c9      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801337e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013380:	69ba      	ldr	r2, [r7, #24]
 8013382:	4b67      	ldr	r3, [pc, #412]	; (8013520 <SDMMC_GetCmdResp1+0x1d8>)
 8013384:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013386:	2b00      	cmp	r3, #0
 8013388:	d0ef      	beq.n	801336a <SDMMC_GetCmdResp1+0x22>
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013390:	2b00      	cmp	r3, #0
 8013392:	d1ea      	bne.n	801336a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013398:	f003 0304 	and.w	r3, r3, #4
 801339c:	2b00      	cmp	r3, #0
 801339e:	d004      	beq.n	80133aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2204      	movs	r2, #4
 80133a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80133a6:	2304      	movs	r3, #4
 80133a8:	e0b1      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133ae:	f003 0301 	and.w	r3, r3, #1
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d004      	beq.n	80133c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2201      	movs	r2, #1
 80133ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133bc:	2301      	movs	r3, #1
 80133be:	e0a6      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	4a58      	ldr	r2, [pc, #352]	; (8013524 <SDMMC_GetCmdResp1+0x1dc>)
 80133c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f7ff fcf6 	bl	8012db8 <SDMMC_GetCommandResponse>
 80133cc:	4603      	mov	r3, r0
 80133ce:	461a      	mov	r2, r3
 80133d0:	7afb      	ldrb	r3, [r7, #11]
 80133d2:	4293      	cmp	r3, r2
 80133d4:	d001      	beq.n	80133da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133d6:	2301      	movs	r3, #1
 80133d8:	e099      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80133da:	2100      	movs	r1, #0
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f7ff fcf8 	bl	8012dd2 <SDMMC_GetResponse>
 80133e2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80133e4:	697a      	ldr	r2, [r7, #20]
 80133e6:	4b50      	ldr	r3, [pc, #320]	; (8013528 <SDMMC_GetCmdResp1+0x1e0>)
 80133e8:	4013      	ands	r3, r2
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d101      	bne.n	80133f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80133ee:	2300      	movs	r3, #0
 80133f0:	e08d      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	da02      	bge.n	80133fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80133f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80133fc:	e087      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013404:	2b00      	cmp	r3, #0
 8013406:	d001      	beq.n	801340c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013408:	2340      	movs	r3, #64	; 0x40
 801340a:	e080      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013412:	2b00      	cmp	r3, #0
 8013414:	d001      	beq.n	801341a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013416:	2380      	movs	r3, #128	; 0x80
 8013418:	e079      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013420:	2b00      	cmp	r3, #0
 8013422:	d002      	beq.n	801342a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013428:	e071      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013438:	e069      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013440:	2b00      	cmp	r3, #0
 8013442:	d002      	beq.n	801344a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013448:	e061      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013458:	e059      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013460:	2b00      	cmp	r3, #0
 8013462:	d002      	beq.n	801346a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013468:	e051      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013478:	e049      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013484:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013488:	e041      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013490:	2b00      	cmp	r3, #0
 8013492:	d002      	beq.n	801349a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013498:	e039      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d002      	beq.n	80134aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80134a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80134a8:	e031      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80134b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80134b8:	e029      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d002      	beq.n	80134ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80134c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80134c8:	e021      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80134d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80134d8:	e019      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80134e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80134e8:	e011      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d002      	beq.n	80134fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80134f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80134f8:	e009      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	f003 0308 	and.w	r3, r3, #8
 8013500:	2b00      	cmp	r3, #0
 8013502:	d002      	beq.n	801350a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013504:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013508:	e001      	b.n	801350e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801350a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801350e:	4618      	mov	r0, r3
 8013510:	3720      	adds	r7, #32
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	24000000 	.word	0x24000000
 801351c:	10624dd3 	.word	0x10624dd3
 8013520:	00200045 	.word	0x00200045
 8013524:	002000c5 	.word	0x002000c5
 8013528:	fdffe008 	.word	0xfdffe008

0801352c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801352c:	b480      	push	{r7}
 801352e:	b085      	sub	sp, #20
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013534:	4b1f      	ldr	r3, [pc, #124]	; (80135b4 <SDMMC_GetCmdResp2+0x88>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4a1f      	ldr	r2, [pc, #124]	; (80135b8 <SDMMC_GetCmdResp2+0x8c>)
 801353a:	fba2 2303 	umull	r2, r3, r2, r3
 801353e:	0a5b      	lsrs	r3, r3, #9
 8013540:	f241 3288 	movw	r2, #5000	; 0x1388
 8013544:	fb02 f303 	mul.w	r3, r2, r3
 8013548:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	1e5a      	subs	r2, r3, #1
 801354e:	60fa      	str	r2, [r7, #12]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d102      	bne.n	801355a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013558:	e026      	b.n	80135a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801355e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013566:	2b00      	cmp	r3, #0
 8013568:	d0ef      	beq.n	801354a <SDMMC_GetCmdResp2+0x1e>
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013570:	2b00      	cmp	r3, #0
 8013572:	d1ea      	bne.n	801354a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013578:	f003 0304 	and.w	r3, r3, #4
 801357c:	2b00      	cmp	r3, #0
 801357e:	d004      	beq.n	801358a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2204      	movs	r2, #4
 8013584:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013586:	2304      	movs	r3, #4
 8013588:	e00e      	b.n	80135a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801358e:	f003 0301 	and.w	r3, r3, #1
 8013592:	2b00      	cmp	r3, #0
 8013594:	d004      	beq.n	80135a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2201      	movs	r2, #1
 801359a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801359c:	2301      	movs	r3, #1
 801359e:	e003      	b.n	80135a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	4a06      	ldr	r2, [pc, #24]	; (80135bc <SDMMC_GetCmdResp2+0x90>)
 80135a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80135a6:	2300      	movs	r3, #0
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3714      	adds	r7, #20
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr
 80135b4:	24000000 	.word	0x24000000
 80135b8:	10624dd3 	.word	0x10624dd3
 80135bc:	002000c5 	.word	0x002000c5

080135c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b085      	sub	sp, #20
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80135c8:	4b1a      	ldr	r3, [pc, #104]	; (8013634 <SDMMC_GetCmdResp3+0x74>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	4a1a      	ldr	r2, [pc, #104]	; (8013638 <SDMMC_GetCmdResp3+0x78>)
 80135ce:	fba2 2303 	umull	r2, r3, r2, r3
 80135d2:	0a5b      	lsrs	r3, r3, #9
 80135d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80135d8:	fb02 f303 	mul.w	r3, r2, r3
 80135dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	1e5a      	subs	r2, r3, #1
 80135e2:	60fa      	str	r2, [r7, #12]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d102      	bne.n	80135ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135ec:	e01b      	b.n	8013626 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d0ef      	beq.n	80135de <SDMMC_GetCmdResp3+0x1e>
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013604:	2b00      	cmp	r3, #0
 8013606:	d1ea      	bne.n	80135de <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801360c:	f003 0304 	and.w	r3, r3, #4
 8013610:	2b00      	cmp	r3, #0
 8013612:	d004      	beq.n	801361e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2204      	movs	r2, #4
 8013618:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801361a:	2304      	movs	r3, #4
 801361c:	e003      	b.n	8013626 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4a06      	ldr	r2, [pc, #24]	; (801363c <SDMMC_GetCmdResp3+0x7c>)
 8013622:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013624:	2300      	movs	r3, #0
}
 8013626:	4618      	mov	r0, r3
 8013628:	3714      	adds	r7, #20
 801362a:	46bd      	mov	sp, r7
 801362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013630:	4770      	bx	lr
 8013632:	bf00      	nop
 8013634:	24000000 	.word	0x24000000
 8013638:	10624dd3 	.word	0x10624dd3
 801363c:	002000c5 	.word	0x002000c5

08013640 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b088      	sub	sp, #32
 8013644:	af00      	add	r7, sp, #0
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	460b      	mov	r3, r1
 801364a:	607a      	str	r2, [r7, #4]
 801364c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801364e:	4b35      	ldr	r3, [pc, #212]	; (8013724 <SDMMC_GetCmdResp6+0xe4>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	4a35      	ldr	r2, [pc, #212]	; (8013728 <SDMMC_GetCmdResp6+0xe8>)
 8013654:	fba2 2303 	umull	r2, r3, r2, r3
 8013658:	0a5b      	lsrs	r3, r3, #9
 801365a:	f241 3288 	movw	r2, #5000	; 0x1388
 801365e:	fb02 f303 	mul.w	r3, r2, r3
 8013662:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	1e5a      	subs	r2, r3, #1
 8013668:	61fa      	str	r2, [r7, #28]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d102      	bne.n	8013674 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801366e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013672:	e052      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013678:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013680:	2b00      	cmp	r3, #0
 8013682:	d0ef      	beq.n	8013664 <SDMMC_GetCmdResp6+0x24>
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1ea      	bne.n	8013664 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013692:	f003 0304 	and.w	r3, r3, #4
 8013696:	2b00      	cmp	r3, #0
 8013698:	d004      	beq.n	80136a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2204      	movs	r2, #4
 801369e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136a0:	2304      	movs	r3, #4
 80136a2:	e03a      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136a8:	f003 0301 	and.w	r3, r3, #1
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d004      	beq.n	80136ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2201      	movs	r2, #1
 80136b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136b6:	2301      	movs	r3, #1
 80136b8:	e02f      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	f7ff fb7c 	bl	8012db8 <SDMMC_GetCommandResponse>
 80136c0:	4603      	mov	r3, r0
 80136c2:	461a      	mov	r2, r3
 80136c4:	7afb      	ldrb	r3, [r7, #11]
 80136c6:	4293      	cmp	r3, r2
 80136c8:	d001      	beq.n	80136ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136ca:	2301      	movs	r3, #1
 80136cc:	e025      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	4a16      	ldr	r2, [pc, #88]	; (801372c <SDMMC_GetCmdResp6+0xec>)
 80136d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80136d4:	2100      	movs	r1, #0
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f7ff fb7b 	bl	8012dd2 <SDMMC_GetResponse>
 80136dc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d106      	bne.n	80136f6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	0c1b      	lsrs	r3, r3, #16
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80136f2:	2300      	movs	r3, #0
 80136f4:	e011      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d002      	beq.n	8013706 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013704:	e009      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801370c:	2b00      	cmp	r3, #0
 801370e:	d002      	beq.n	8013716 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013714:	e001      	b.n	801371a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801371a:	4618      	mov	r0, r3
 801371c:	3720      	adds	r7, #32
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	24000000 	.word	0x24000000
 8013728:	10624dd3 	.word	0x10624dd3
 801372c:	002000c5 	.word	0x002000c5

08013730 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013738:	4b22      	ldr	r3, [pc, #136]	; (80137c4 <SDMMC_GetCmdResp7+0x94>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	4a22      	ldr	r2, [pc, #136]	; (80137c8 <SDMMC_GetCmdResp7+0x98>)
 801373e:	fba2 2303 	umull	r2, r3, r2, r3
 8013742:	0a5b      	lsrs	r3, r3, #9
 8013744:	f241 3288 	movw	r2, #5000	; 0x1388
 8013748:	fb02 f303 	mul.w	r3, r2, r3
 801374c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	1e5a      	subs	r2, r3, #1
 8013752:	60fa      	str	r2, [r7, #12]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d102      	bne.n	801375e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801375c:	e02c      	b.n	80137b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013762:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801376a:	2b00      	cmp	r3, #0
 801376c:	d0ef      	beq.n	801374e <SDMMC_GetCmdResp7+0x1e>
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013774:	2b00      	cmp	r3, #0
 8013776:	d1ea      	bne.n	801374e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801377c:	f003 0304 	and.w	r3, r3, #4
 8013780:	2b00      	cmp	r3, #0
 8013782:	d004      	beq.n	801378e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2204      	movs	r2, #4
 8013788:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801378a:	2304      	movs	r3, #4
 801378c:	e014      	b.n	80137b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013792:	f003 0301 	and.w	r3, r3, #1
 8013796:	2b00      	cmp	r3, #0
 8013798:	d004      	beq.n	80137a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2201      	movs	r2, #1
 801379e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80137a0:	2301      	movs	r3, #1
 80137a2:	e009      	b.n	80137b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d002      	beq.n	80137b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2240      	movs	r2, #64	; 0x40
 80137b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80137b6:	2300      	movs	r3, #0

}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3714      	adds	r7, #20
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	24000000 	.word	0x24000000
 80137c8:	10624dd3 	.word	0x10624dd3

080137cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80137cc:	b480      	push	{r7}
 80137ce:	b085      	sub	sp, #20
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80137d4:	4b11      	ldr	r3, [pc, #68]	; (801381c <SDMMC_GetCmdError+0x50>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4a11      	ldr	r2, [pc, #68]	; (8013820 <SDMMC_GetCmdError+0x54>)
 80137da:	fba2 2303 	umull	r2, r3, r2, r3
 80137de:	0a5b      	lsrs	r3, r3, #9
 80137e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80137e4:	fb02 f303 	mul.w	r3, r2, r3
 80137e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	1e5a      	subs	r2, r3, #1
 80137ee:	60fa      	str	r2, [r7, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d102      	bne.n	80137fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80137f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80137f8:	e009      	b.n	801380e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013802:	2b00      	cmp	r3, #0
 8013804:	d0f1      	beq.n	80137ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4a06      	ldr	r2, [pc, #24]	; (8013824 <SDMMC_GetCmdError+0x58>)
 801380a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801380c:	2300      	movs	r3, #0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3714      	adds	r7, #20
 8013812:	46bd      	mov	sp, r7
 8013814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013818:	4770      	bx	lr
 801381a:	bf00      	nop
 801381c:	24000000 	.word	0x24000000
 8013820:	10624dd3 	.word	0x10624dd3
 8013824:	002000c5 	.word	0x002000c5

08013828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013828:	b084      	sub	sp, #16
 801382a:	b580      	push	{r7, lr}
 801382c:	b084      	sub	sp, #16
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
 8013832:	f107 001c 	add.w	r0, r7, #28
 8013836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383c:	2b01      	cmp	r3, #1
 801383e:	d120      	bne.n	8013882 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	68da      	ldr	r2, [r3, #12]
 8013850:	4b2a      	ldr	r3, [pc, #168]	; (80138fc <USB_CoreInit+0xd4>)
 8013852:	4013      	ands	r3, r2
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	68db      	ldr	r3, [r3, #12]
 801385c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013866:	2b01      	cmp	r3, #1
 8013868:	d105      	bne.n	8013876 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f001 faf8 	bl	8014e6c <USB_CoreReset>
 801387c:	4603      	mov	r3, r0
 801387e:	73fb      	strb	r3, [r7, #15]
 8013880:	e01a      	b.n	80138b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f001 faec 	bl	8014e6c <USB_CoreReset>
 8013894:	4603      	mov	r3, r0
 8013896:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801389a:	2b00      	cmp	r3, #0
 801389c:	d106      	bne.n	80138ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	639a      	str	r2, [r3, #56]	; 0x38
 80138aa:	e005      	b.n	80138b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80138b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d116      	bne.n	80138ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80138c2:	b29a      	uxth	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80138cc:	4b0c      	ldr	r3, [pc, #48]	; (8013900 <USB_CoreInit+0xd8>)
 80138ce:	4313      	orrs	r3, r2
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	689b      	ldr	r3, [r3, #8]
 80138d8:	f043 0206 	orr.w	r2, r3, #6
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	f043 0220 	orr.w	r2, r3, #32
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80138f8:	b004      	add	sp, #16
 80138fa:	4770      	bx	lr
 80138fc:	ffbdffbf 	.word	0xffbdffbf
 8013900:	03ee0000 	.word	0x03ee0000

08013904 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013904:	b480      	push	{r7}
 8013906:	b087      	sub	sp, #28
 8013908:	af00      	add	r7, sp, #0
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	60b9      	str	r1, [r7, #8]
 801390e:	4613      	mov	r3, r2
 8013910:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	2b02      	cmp	r3, #2
 8013916:	d165      	bne.n	80139e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	4a41      	ldr	r2, [pc, #260]	; (8013a20 <USB_SetTurnaroundTime+0x11c>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d906      	bls.n	801392e <USB_SetTurnaroundTime+0x2a>
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	4a40      	ldr	r2, [pc, #256]	; (8013a24 <USB_SetTurnaroundTime+0x120>)
 8013924:	4293      	cmp	r3, r2
 8013926:	d202      	bcs.n	801392e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013928:	230f      	movs	r3, #15
 801392a:	617b      	str	r3, [r7, #20]
 801392c:	e062      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	4a3c      	ldr	r2, [pc, #240]	; (8013a24 <USB_SetTurnaroundTime+0x120>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d306      	bcc.n	8013944 <USB_SetTurnaroundTime+0x40>
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	4a3b      	ldr	r2, [pc, #236]	; (8013a28 <USB_SetTurnaroundTime+0x124>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d202      	bcs.n	8013944 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801393e:	230e      	movs	r3, #14
 8013940:	617b      	str	r3, [r7, #20]
 8013942:	e057      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	4a38      	ldr	r2, [pc, #224]	; (8013a28 <USB_SetTurnaroundTime+0x124>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d306      	bcc.n	801395a <USB_SetTurnaroundTime+0x56>
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	4a37      	ldr	r2, [pc, #220]	; (8013a2c <USB_SetTurnaroundTime+0x128>)
 8013950:	4293      	cmp	r3, r2
 8013952:	d202      	bcs.n	801395a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013954:	230d      	movs	r3, #13
 8013956:	617b      	str	r3, [r7, #20]
 8013958:	e04c      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	4a33      	ldr	r2, [pc, #204]	; (8013a2c <USB_SetTurnaroundTime+0x128>)
 801395e:	4293      	cmp	r3, r2
 8013960:	d306      	bcc.n	8013970 <USB_SetTurnaroundTime+0x6c>
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	4a32      	ldr	r2, [pc, #200]	; (8013a30 <USB_SetTurnaroundTime+0x12c>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d802      	bhi.n	8013970 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801396a:	230c      	movs	r3, #12
 801396c:	617b      	str	r3, [r7, #20]
 801396e:	e041      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	4a2f      	ldr	r2, [pc, #188]	; (8013a30 <USB_SetTurnaroundTime+0x12c>)
 8013974:	4293      	cmp	r3, r2
 8013976:	d906      	bls.n	8013986 <USB_SetTurnaroundTime+0x82>
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	4a2e      	ldr	r2, [pc, #184]	; (8013a34 <USB_SetTurnaroundTime+0x130>)
 801397c:	4293      	cmp	r3, r2
 801397e:	d802      	bhi.n	8013986 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013980:	230b      	movs	r3, #11
 8013982:	617b      	str	r3, [r7, #20]
 8013984:	e036      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	4a2a      	ldr	r2, [pc, #168]	; (8013a34 <USB_SetTurnaroundTime+0x130>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d906      	bls.n	801399c <USB_SetTurnaroundTime+0x98>
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	4a29      	ldr	r2, [pc, #164]	; (8013a38 <USB_SetTurnaroundTime+0x134>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d802      	bhi.n	801399c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013996:	230a      	movs	r3, #10
 8013998:	617b      	str	r3, [r7, #20]
 801399a:	e02b      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	4a26      	ldr	r2, [pc, #152]	; (8013a38 <USB_SetTurnaroundTime+0x134>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d906      	bls.n	80139b2 <USB_SetTurnaroundTime+0xae>
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	4a25      	ldr	r2, [pc, #148]	; (8013a3c <USB_SetTurnaroundTime+0x138>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d202      	bcs.n	80139b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80139ac:	2309      	movs	r3, #9
 80139ae:	617b      	str	r3, [r7, #20]
 80139b0:	e020      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	4a21      	ldr	r2, [pc, #132]	; (8013a3c <USB_SetTurnaroundTime+0x138>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d306      	bcc.n	80139c8 <USB_SetTurnaroundTime+0xc4>
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	4a20      	ldr	r2, [pc, #128]	; (8013a40 <USB_SetTurnaroundTime+0x13c>)
 80139be:	4293      	cmp	r3, r2
 80139c0:	d802      	bhi.n	80139c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80139c2:	2308      	movs	r3, #8
 80139c4:	617b      	str	r3, [r7, #20]
 80139c6:	e015      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	4a1d      	ldr	r2, [pc, #116]	; (8013a40 <USB_SetTurnaroundTime+0x13c>)
 80139cc:	4293      	cmp	r3, r2
 80139ce:	d906      	bls.n	80139de <USB_SetTurnaroundTime+0xda>
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	4a1c      	ldr	r2, [pc, #112]	; (8013a44 <USB_SetTurnaroundTime+0x140>)
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d202      	bcs.n	80139de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80139d8:	2307      	movs	r3, #7
 80139da:	617b      	str	r3, [r7, #20]
 80139dc:	e00a      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80139de:	2306      	movs	r3, #6
 80139e0:	617b      	str	r3, [r7, #20]
 80139e2:	e007      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80139e4:	79fb      	ldrb	r3, [r7, #7]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d102      	bne.n	80139f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80139ea:	2309      	movs	r3, #9
 80139ec:	617b      	str	r3, [r7, #20]
 80139ee:	e001      	b.n	80139f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80139f0:	2309      	movs	r3, #9
 80139f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	68da      	ldr	r2, [r3, #12]
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	029b      	lsls	r3, r3, #10
 8013a08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013a0c:	431a      	orrs	r2, r3
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	371c      	adds	r7, #28
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	00d8acbf 	.word	0x00d8acbf
 8013a24:	00e4e1c0 	.word	0x00e4e1c0
 8013a28:	00f42400 	.word	0x00f42400
 8013a2c:	01067380 	.word	0x01067380
 8013a30:	011a499f 	.word	0x011a499f
 8013a34:	01312cff 	.word	0x01312cff
 8013a38:	014ca43f 	.word	0x014ca43f
 8013a3c:	016e3600 	.word	0x016e3600
 8013a40:	01a6ab1f 	.word	0x01a6ab1f
 8013a44:	01e84800 	.word	0x01e84800

08013a48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	689b      	ldr	r3, [r3, #8]
 8013a54:	f043 0201 	orr.w	r2, r3, #1
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr

08013a6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013a6a:	b480      	push	{r7}
 8013a6c:	b083      	sub	sp, #12
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	689b      	ldr	r3, [r3, #8]
 8013a76:	f023 0201 	bic.w	r2, r3, #1
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013a7e:	2300      	movs	r3, #0
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	370c      	adds	r7, #12
 8013a84:	46bd      	mov	sp, r7
 8013a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8a:	4770      	bx	lr

08013a8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	460b      	mov	r3, r1
 8013a96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013aa8:	78fb      	ldrb	r3, [r7, #3]
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d115      	bne.n	8013ada <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013aba:	2001      	movs	r0, #1
 8013abc:	f7f0 fa58 	bl	8003f70 <HAL_Delay>
      ms++;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f001 f93f 	bl	8014d4a <USB_GetMode>
 8013acc:	4603      	mov	r3, r0
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	d01e      	beq.n	8013b10 <USB_SetCurrentMode+0x84>
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	2b31      	cmp	r3, #49	; 0x31
 8013ad6:	d9f0      	bls.n	8013aba <USB_SetCurrentMode+0x2e>
 8013ad8:	e01a      	b.n	8013b10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013ada:	78fb      	ldrb	r3, [r7, #3]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d115      	bne.n	8013b0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013aec:	2001      	movs	r0, #1
 8013aee:	f7f0 fa3f 	bl	8003f70 <HAL_Delay>
      ms++;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	3301      	adds	r3, #1
 8013af6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f001 f926 	bl	8014d4a <USB_GetMode>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d005      	beq.n	8013b10 <USB_SetCurrentMode+0x84>
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2b31      	cmp	r3, #49	; 0x31
 8013b08:	d9f0      	bls.n	8013aec <USB_SetCurrentMode+0x60>
 8013b0a:	e001      	b.n	8013b10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e005      	b.n	8013b1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2b32      	cmp	r3, #50	; 0x32
 8013b14:	d101      	bne.n	8013b1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013b16:	2301      	movs	r3, #1
 8013b18:	e000      	b.n	8013b1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013b1a:	2300      	movs	r3, #0
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013b24:	b084      	sub	sp, #16
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b086      	sub	sp, #24
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013b36:	2300      	movs	r3, #0
 8013b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013b3e:	2300      	movs	r3, #0
 8013b40:	613b      	str	r3, [r7, #16]
 8013b42:	e009      	b.n	8013b58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	3340      	adds	r3, #64	; 0x40
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4413      	add	r3, r2
 8013b4e:	2200      	movs	r2, #0
 8013b50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	3301      	adds	r3, #1
 8013b56:	613b      	str	r3, [r7, #16]
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	2b0e      	cmp	r3, #14
 8013b5c:	d9f2      	bls.n	8013b44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d11c      	bne.n	8013b9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	68fa      	ldr	r2, [r7, #12]
 8013b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b72:	f043 0302 	orr.w	r3, r3, #2
 8013b76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	601a      	str	r2, [r3, #0]
 8013b9c:	e005      	b.n	8013baa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	680b      	ldr	r3, [r1, #0]
 8013bc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d10c      	bne.n	8013bea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d104      	bne.n	8013be0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f000 f965 	bl	8013ea8 <USB_SetDevSpeed>
 8013bde:	e008      	b.n	8013bf2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013be0:	2101      	movs	r1, #1
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 f960 	bl	8013ea8 <USB_SetDevSpeed>
 8013be8:	e003      	b.n	8013bf2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013bea:	2103      	movs	r1, #3
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f000 f95b 	bl	8013ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013bf2:	2110      	movs	r1, #16
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f000 f8f3 	bl	8013de0 <USB_FlushTxFifo>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013c00:	2301      	movs	r3, #1
 8013c02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f000 f91f 	bl	8013e48 <USB_FlushRxFifo>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d001      	beq.n	8013c14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013c10:	2301      	movs	r3, #1
 8013c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c26:	461a      	mov	r2, r3
 8013c28:	2300      	movs	r3, #0
 8013c2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c32:	461a      	mov	r2, r3
 8013c34:	2300      	movs	r3, #0
 8013c36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013c38:	2300      	movs	r3, #0
 8013c3a:	613b      	str	r3, [r7, #16]
 8013c3c:	e043      	b.n	8013cc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	015a      	lsls	r2, r3, #5
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	4413      	add	r3, r2
 8013c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c54:	d118      	bne.n	8013c88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d10a      	bne.n	8013c72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	015a      	lsls	r2, r3, #5
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	4413      	add	r3, r2
 8013c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c68:	461a      	mov	r2, r3
 8013c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013c6e:	6013      	str	r3, [r2, #0]
 8013c70:	e013      	b.n	8013c9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	015a      	lsls	r2, r3, #5
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	4413      	add	r3, r2
 8013c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c7e:	461a      	mov	r2, r3
 8013c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013c84:	6013      	str	r3, [r2, #0]
 8013c86:	e008      	b.n	8013c9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	015a      	lsls	r2, r3, #5
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	4413      	add	r3, r2
 8013c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c94:	461a      	mov	r2, r3
 8013c96:	2300      	movs	r3, #0
 8013c98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	015a      	lsls	r2, r3, #5
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	4413      	add	r3, r2
 8013ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	2300      	movs	r3, #0
 8013caa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	015a      	lsls	r2, r3, #5
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	4413      	add	r3, r2
 8013cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cb8:	461a      	mov	r2, r3
 8013cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013cbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	613b      	str	r3, [r7, #16]
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc8:	693a      	ldr	r2, [r7, #16]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d3b7      	bcc.n	8013c3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013cce:	2300      	movs	r3, #0
 8013cd0:	613b      	str	r3, [r7, #16]
 8013cd2:	e043      	b.n	8013d5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	015a      	lsls	r2, r3, #5
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	4413      	add	r3, r2
 8013cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cea:	d118      	bne.n	8013d1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d10a      	bne.n	8013d08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	015a      	lsls	r2, r3, #5
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfe:	461a      	mov	r2, r3
 8013d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d04:	6013      	str	r3, [r2, #0]
 8013d06:	e013      	b.n	8013d30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	015a      	lsls	r2, r3, #5
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	4413      	add	r3, r2
 8013d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d14:	461a      	mov	r2, r3
 8013d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d1a:	6013      	str	r3, [r2, #0]
 8013d1c:	e008      	b.n	8013d30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	015a      	lsls	r2, r3, #5
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	4413      	add	r3, r2
 8013d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	015a      	lsls	r2, r3, #5
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	4413      	add	r3, r2
 8013d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	2300      	movs	r3, #0
 8013d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	015a      	lsls	r2, r3, #5
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	4413      	add	r3, r2
 8013d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d4e:	461a      	mov	r2, r3
 8013d50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013d54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	3301      	adds	r3, #1
 8013d5a:	613b      	str	r3, [r7, #16]
 8013d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5e:	693a      	ldr	r2, [r7, #16]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d3b7      	bcc.n	8013cd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d6a:	691b      	ldr	r3, [r3, #16]
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013d76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013d84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d105      	bne.n	8013d98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	699b      	ldr	r3, [r3, #24]
 8013d90:	f043 0210 	orr.w	r2, r3, #16
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	699a      	ldr	r2, [r3, #24]
 8013d9c:	4b0e      	ldr	r3, [pc, #56]	; (8013dd8 <USB_DevInit+0x2b4>)
 8013d9e:	4313      	orrs	r3, r2
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d005      	beq.n	8013db6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	699b      	ldr	r3, [r3, #24]
 8013dae:	f043 0208 	orr.w	r2, r3, #8
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d105      	bne.n	8013dc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	699a      	ldr	r2, [r3, #24]
 8013dc0:	4b06      	ldr	r3, [pc, #24]	; (8013ddc <USB_DevInit+0x2b8>)
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3718      	adds	r7, #24
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013dd4:	b004      	add	sp, #16
 8013dd6:	4770      	bx	lr
 8013dd8:	803c3800 	.word	0x803c3800
 8013ddc:	40000004 	.word	0x40000004

08013de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013dea:	2300      	movs	r3, #0
 8013dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	3301      	adds	r3, #1
 8013df2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	4a13      	ldr	r2, [pc, #76]	; (8013e44 <USB_FlushTxFifo+0x64>)
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d901      	bls.n	8013e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	e01b      	b.n	8013e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	691b      	ldr	r3, [r3, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	daf2      	bge.n	8013dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	019b      	lsls	r3, r3, #6
 8013e10:	f043 0220 	orr.w	r2, r3, #32
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	4a08      	ldr	r2, [pc, #32]	; (8013e44 <USB_FlushTxFifo+0x64>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d901      	bls.n	8013e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013e26:	2303      	movs	r3, #3
 8013e28:	e006      	b.n	8013e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	691b      	ldr	r3, [r3, #16]
 8013e2e:	f003 0320 	and.w	r3, r3, #32
 8013e32:	2b20      	cmp	r3, #32
 8013e34:	d0f0      	beq.n	8013e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013e36:	2300      	movs	r3, #0
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3714      	adds	r7, #20
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr
 8013e44:	00030d40 	.word	0x00030d40

08013e48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b085      	sub	sp, #20
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013e50:	2300      	movs	r3, #0
 8013e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	3301      	adds	r3, #1
 8013e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	4a11      	ldr	r2, [pc, #68]	; (8013ea4 <USB_FlushRxFifo+0x5c>)
 8013e5e:	4293      	cmp	r3, r2
 8013e60:	d901      	bls.n	8013e66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013e62:	2303      	movs	r3, #3
 8013e64:	e018      	b.n	8013e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	daf2      	bge.n	8013e54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2210      	movs	r2, #16
 8013e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	4a08      	ldr	r2, [pc, #32]	; (8013ea4 <USB_FlushRxFifo+0x5c>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d901      	bls.n	8013e8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013e86:	2303      	movs	r3, #3
 8013e88:	e006      	b.n	8013e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	691b      	ldr	r3, [r3, #16]
 8013e8e:	f003 0310 	and.w	r3, r3, #16
 8013e92:	2b10      	cmp	r3, #16
 8013e94:	d0f0      	beq.n	8013e78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013e96:	2300      	movs	r3, #0
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3714      	adds	r7, #20
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	00030d40 	.word	0x00030d40

08013ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	78fb      	ldrb	r3, [r7, #3]
 8013ec2:	68f9      	ldr	r1, [r7, #12]
 8013ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013ecc:	2300      	movs	r3, #0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b087      	sub	sp, #28
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eec:	689b      	ldr	r3, [r3, #8]
 8013eee:	f003 0306 	and.w	r3, r3, #6
 8013ef2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d102      	bne.n	8013f00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013efa:	2300      	movs	r3, #0
 8013efc:	75fb      	strb	r3, [r7, #23]
 8013efe:	e00a      	b.n	8013f16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2b02      	cmp	r3, #2
 8013f04:	d002      	beq.n	8013f0c <USB_GetDevSpeed+0x32>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2b06      	cmp	r3, #6
 8013f0a:	d102      	bne.n	8013f12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013f0c:	2302      	movs	r3, #2
 8013f0e:	75fb      	strb	r3, [r7, #23]
 8013f10:	e001      	b.n	8013f16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013f12:	230f      	movs	r3, #15
 8013f14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	371c      	adds	r7, #28
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f22:	4770      	bx	lr

08013f24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f24:	b480      	push	{r7}
 8013f26:	b085      	sub	sp, #20
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	785b      	ldrb	r3, [r3, #1]
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d139      	bne.n	8013fb4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f46:	69da      	ldr	r2, [r3, #28]
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	f003 030f 	and.w	r3, r3, #15
 8013f50:	2101      	movs	r1, #1
 8013f52:	fa01 f303 	lsl.w	r3, r1, r3
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	68f9      	ldr	r1, [r7, #12]
 8013f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	015a      	lsls	r2, r3, #5
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	4413      	add	r3, r2
 8013f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d153      	bne.n	8014020 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	015a      	lsls	r2, r3, #5
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	4413      	add	r3, r2
 8013f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	791b      	ldrb	r3, [r3, #4]
 8013f92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013f94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	059b      	lsls	r3, r3, #22
 8013f9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013f9c:	431a      	orrs	r2, r3
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	0159      	lsls	r1, r3, #5
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	440b      	add	r3, r1
 8013fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013faa:	4619      	mov	r1, r3
 8013fac:	4b20      	ldr	r3, [pc, #128]	; (8014030 <USB_ActivateEndpoint+0x10c>)
 8013fae:	4313      	orrs	r3, r2
 8013fb0:	600b      	str	r3, [r1, #0]
 8013fb2:	e035      	b.n	8014020 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fba:	69da      	ldr	r2, [r3, #28]
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	f003 030f 	and.w	r3, r3, #15
 8013fc4:	2101      	movs	r1, #1
 8013fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8013fca:	041b      	lsls	r3, r3, #16
 8013fcc:	68f9      	ldr	r1, [r7, #12]
 8013fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fd2:	4313      	orrs	r3, r2
 8013fd4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	015a      	lsls	r2, r3, #5
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	4413      	add	r3, r2
 8013fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d119      	bne.n	8014020 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	015a      	lsls	r2, r3, #5
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	689b      	ldr	r3, [r3, #8]
 8013ffe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	791b      	ldrb	r3, [r3, #4]
 8014006:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014008:	430b      	orrs	r3, r1
 801400a:	431a      	orrs	r2, r3
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	0159      	lsls	r1, r3, #5
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	440b      	add	r3, r1
 8014014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014018:	4619      	mov	r1, r3
 801401a:	4b05      	ldr	r3, [pc, #20]	; (8014030 <USB_ActivateEndpoint+0x10c>)
 801401c:	4313      	orrs	r3, r2
 801401e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014020:	2300      	movs	r3, #0
}
 8014022:	4618      	mov	r0, r3
 8014024:	3714      	adds	r7, #20
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	10008000 	.word	0x10008000

08014034 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014034:	b480      	push	{r7}
 8014036:	b085      	sub	sp, #20
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	785b      	ldrb	r3, [r3, #1]
 801404c:	2b01      	cmp	r3, #1
 801404e:	d161      	bne.n	8014114 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	015a      	lsls	r2, r3, #5
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	4413      	add	r3, r2
 8014058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014066:	d11f      	bne.n	80140a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	015a      	lsls	r2, r3, #5
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	4413      	add	r3, r2
 8014070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	68ba      	ldr	r2, [r7, #8]
 8014078:	0151      	lsls	r1, r2, #5
 801407a:	68fa      	ldr	r2, [r7, #12]
 801407c:	440a      	add	r2, r1
 801407e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014086:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	015a      	lsls	r2, r3, #5
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	4413      	add	r3, r2
 8014090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	68ba      	ldr	r2, [r7, #8]
 8014098:	0151      	lsls	r1, r2, #5
 801409a:	68fa      	ldr	r2, [r7, #12]
 801409c:	440a      	add	r2, r1
 801409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80140a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	f003 030f 	and.w	r3, r3, #15
 80140b8:	2101      	movs	r1, #1
 80140ba:	fa01 f303 	lsl.w	r3, r1, r3
 80140be:	b29b      	uxth	r3, r3
 80140c0:	43db      	mvns	r3, r3
 80140c2:	68f9      	ldr	r1, [r7, #12]
 80140c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80140c8:	4013      	ands	r3, r2
 80140ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140d2:	69da      	ldr	r2, [r3, #28]
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	f003 030f 	and.w	r3, r3, #15
 80140dc:	2101      	movs	r1, #1
 80140de:	fa01 f303 	lsl.w	r3, r1, r3
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	43db      	mvns	r3, r3
 80140e6:	68f9      	ldr	r1, [r7, #12]
 80140e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80140ec:	4013      	ands	r3, r2
 80140ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	015a      	lsls	r2, r3, #5
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	4413      	add	r3, r2
 80140f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	0159      	lsls	r1, r3, #5
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	440b      	add	r3, r1
 8014106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801410a:	4619      	mov	r1, r3
 801410c:	4b35      	ldr	r3, [pc, #212]	; (80141e4 <USB_DeactivateEndpoint+0x1b0>)
 801410e:	4013      	ands	r3, r2
 8014110:	600b      	str	r3, [r1, #0]
 8014112:	e060      	b.n	80141d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	015a      	lsls	r2, r3, #5
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	4413      	add	r3, r2
 801411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801412a:	d11f      	bne.n	801416c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	015a      	lsls	r2, r3, #5
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	4413      	add	r3, r2
 8014134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	68ba      	ldr	r2, [r7, #8]
 801413c:	0151      	lsls	r1, r2, #5
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	440a      	add	r2, r1
 8014142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801414a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	015a      	lsls	r2, r3, #5
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	4413      	add	r3, r2
 8014154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	0151      	lsls	r1, r2, #5
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	440a      	add	r2, r1
 8014162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801416a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	f003 030f 	and.w	r3, r3, #15
 801417c:	2101      	movs	r1, #1
 801417e:	fa01 f303 	lsl.w	r3, r1, r3
 8014182:	041b      	lsls	r3, r3, #16
 8014184:	43db      	mvns	r3, r3
 8014186:	68f9      	ldr	r1, [r7, #12]
 8014188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801418c:	4013      	ands	r3, r2
 801418e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014196:	69da      	ldr	r2, [r3, #28]
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	f003 030f 	and.w	r3, r3, #15
 80141a0:	2101      	movs	r1, #1
 80141a2:	fa01 f303 	lsl.w	r3, r1, r3
 80141a6:	041b      	lsls	r3, r3, #16
 80141a8:	43db      	mvns	r3, r3
 80141aa:	68f9      	ldr	r1, [r7, #12]
 80141ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141b0:	4013      	ands	r3, r2
 80141b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	015a      	lsls	r2, r3, #5
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	4413      	add	r3, r2
 80141bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	0159      	lsls	r1, r3, #5
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	440b      	add	r3, r1
 80141ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141ce:	4619      	mov	r1, r3
 80141d0:	4b05      	ldr	r3, [pc, #20]	; (80141e8 <USB_DeactivateEndpoint+0x1b4>)
 80141d2:	4013      	ands	r3, r2
 80141d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3714      	adds	r7, #20
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr
 80141e4:	ec337800 	.word	0xec337800
 80141e8:	eff37800 	.word	0xeff37800

080141ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b08a      	sub	sp, #40	; 0x28
 80141f0:	af02      	add	r7, sp, #8
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	4613      	mov	r3, r2
 80141f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	781b      	ldrb	r3, [r3, #0]
 8014202:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	785b      	ldrb	r3, [r3, #1]
 8014208:	2b01      	cmp	r3, #1
 801420a:	f040 8181 	bne.w	8014510 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	691b      	ldr	r3, [r3, #16]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d132      	bne.n	801427c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014216:	69bb      	ldr	r3, [r7, #24]
 8014218:	015a      	lsls	r2, r3, #5
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	4413      	add	r3, r2
 801421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014222:	691a      	ldr	r2, [r3, #16]
 8014224:	69bb      	ldr	r3, [r7, #24]
 8014226:	0159      	lsls	r1, r3, #5
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	440b      	add	r3, r1
 801422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014230:	4619      	mov	r1, r3
 8014232:	4ba5      	ldr	r3, [pc, #660]	; (80144c8 <USB_EPStartXfer+0x2dc>)
 8014234:	4013      	ands	r3, r2
 8014236:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	015a      	lsls	r2, r3, #5
 801423c:	69fb      	ldr	r3, [r7, #28]
 801423e:	4413      	add	r3, r2
 8014240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014244:	691b      	ldr	r3, [r3, #16]
 8014246:	69ba      	ldr	r2, [r7, #24]
 8014248:	0151      	lsls	r1, r2, #5
 801424a:	69fa      	ldr	r2, [r7, #28]
 801424c:	440a      	add	r2, r1
 801424e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	015a      	lsls	r2, r3, #5
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	4413      	add	r3, r2
 8014260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014264:	691a      	ldr	r2, [r3, #16]
 8014266:	69bb      	ldr	r3, [r7, #24]
 8014268:	0159      	lsls	r1, r3, #5
 801426a:	69fb      	ldr	r3, [r7, #28]
 801426c:	440b      	add	r3, r1
 801426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014272:	4619      	mov	r1, r3
 8014274:	4b95      	ldr	r3, [pc, #596]	; (80144cc <USB_EPStartXfer+0x2e0>)
 8014276:	4013      	ands	r3, r2
 8014278:	610b      	str	r3, [r1, #16]
 801427a:	e092      	b.n	80143a2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	015a      	lsls	r2, r3, #5
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	4413      	add	r3, r2
 8014284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014288:	691a      	ldr	r2, [r3, #16]
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	0159      	lsls	r1, r3, #5
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	440b      	add	r3, r1
 8014292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014296:	4619      	mov	r1, r3
 8014298:	4b8c      	ldr	r3, [pc, #560]	; (80144cc <USB_EPStartXfer+0x2e0>)
 801429a:	4013      	ands	r3, r2
 801429c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	015a      	lsls	r2, r3, #5
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	4413      	add	r3, r2
 80142a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142aa:	691a      	ldr	r2, [r3, #16]
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	0159      	lsls	r1, r3, #5
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	440b      	add	r3, r1
 80142b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142b8:	4619      	mov	r1, r3
 80142ba:	4b83      	ldr	r3, [pc, #524]	; (80144c8 <USB_EPStartXfer+0x2dc>)
 80142bc:	4013      	ands	r3, r2
 80142be:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80142c0:	69bb      	ldr	r3, [r7, #24]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d11a      	bne.n	80142fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	691a      	ldr	r2, [r3, #16]
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	689b      	ldr	r3, [r3, #8]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d903      	bls.n	80142da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	689a      	ldr	r2, [r3, #8]
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	015a      	lsls	r2, r3, #5
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	4413      	add	r3, r2
 80142e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142e6:	691b      	ldr	r3, [r3, #16]
 80142e8:	69ba      	ldr	r2, [r7, #24]
 80142ea:	0151      	lsls	r1, r2, #5
 80142ec:	69fa      	ldr	r2, [r7, #28]
 80142ee:	440a      	add	r2, r1
 80142f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142f8:	6113      	str	r3, [r2, #16]
 80142fa:	e01b      	b.n	8014334 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	015a      	lsls	r2, r3, #5
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	4413      	add	r3, r2
 8014304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014308:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	6919      	ldr	r1, [r3, #16]
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	689b      	ldr	r3, [r3, #8]
 8014312:	440b      	add	r3, r1
 8014314:	1e59      	subs	r1, r3, #1
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	689b      	ldr	r3, [r3, #8]
 801431a:	fbb1 f3f3 	udiv	r3, r1, r3
 801431e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014320:	4b6b      	ldr	r3, [pc, #428]	; (80144d0 <USB_EPStartXfer+0x2e4>)
 8014322:	400b      	ands	r3, r1
 8014324:	69b9      	ldr	r1, [r7, #24]
 8014326:	0148      	lsls	r0, r1, #5
 8014328:	69f9      	ldr	r1, [r7, #28]
 801432a:	4401      	add	r1, r0
 801432c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014330:	4313      	orrs	r3, r2
 8014332:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	015a      	lsls	r2, r3, #5
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	4413      	add	r3, r2
 801433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014340:	691a      	ldr	r2, [r3, #16]
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	691b      	ldr	r3, [r3, #16]
 8014346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801434a:	69b9      	ldr	r1, [r7, #24]
 801434c:	0148      	lsls	r0, r1, #5
 801434e:	69f9      	ldr	r1, [r7, #28]
 8014350:	4401      	add	r1, r0
 8014352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014356:	4313      	orrs	r3, r2
 8014358:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	791b      	ldrb	r3, [r3, #4]
 801435e:	2b01      	cmp	r3, #1
 8014360:	d11f      	bne.n	80143a2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	015a      	lsls	r2, r3, #5
 8014366:	69fb      	ldr	r3, [r7, #28]
 8014368:	4413      	add	r3, r2
 801436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801436e:	691b      	ldr	r3, [r3, #16]
 8014370:	69ba      	ldr	r2, [r7, #24]
 8014372:	0151      	lsls	r1, r2, #5
 8014374:	69fa      	ldr	r2, [r7, #28]
 8014376:	440a      	add	r2, r1
 8014378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801437c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014380:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014382:	69bb      	ldr	r3, [r7, #24]
 8014384:	015a      	lsls	r2, r3, #5
 8014386:	69fb      	ldr	r3, [r7, #28]
 8014388:	4413      	add	r3, r2
 801438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801438e:	691b      	ldr	r3, [r3, #16]
 8014390:	69ba      	ldr	r2, [r7, #24]
 8014392:	0151      	lsls	r1, r2, #5
 8014394:	69fa      	ldr	r2, [r7, #28]
 8014396:	440a      	add	r2, r1
 8014398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801439c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80143a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80143a2:	79fb      	ldrb	r3, [r7, #7]
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d14b      	bne.n	8014440 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	69db      	ldr	r3, [r3, #28]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d009      	beq.n	80143c4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80143b0:	69bb      	ldr	r3, [r7, #24]
 80143b2:	015a      	lsls	r2, r3, #5
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	4413      	add	r3, r2
 80143b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143bc:	461a      	mov	r2, r3
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	69db      	ldr	r3, [r3, #28]
 80143c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	791b      	ldrb	r3, [r3, #4]
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	d128      	bne.n	801441e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143d2:	689b      	ldr	r3, [r3, #8]
 80143d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d110      	bne.n	80143fe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	015a      	lsls	r2, r3, #5
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	4413      	add	r3, r2
 80143e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	69ba      	ldr	r2, [r7, #24]
 80143ec:	0151      	lsls	r1, r2, #5
 80143ee:	69fa      	ldr	r2, [r7, #28]
 80143f0:	440a      	add	r2, r1
 80143f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80143fa:	6013      	str	r3, [r2, #0]
 80143fc:	e00f      	b.n	801441e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	015a      	lsls	r2, r3, #5
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	4413      	add	r3, r2
 8014406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	69ba      	ldr	r2, [r7, #24]
 801440e:	0151      	lsls	r1, r2, #5
 8014410:	69fa      	ldr	r2, [r7, #28]
 8014412:	440a      	add	r2, r1
 8014414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801441c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	015a      	lsls	r2, r3, #5
 8014422:	69fb      	ldr	r3, [r7, #28]
 8014424:	4413      	add	r3, r2
 8014426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	69ba      	ldr	r2, [r7, #24]
 801442e:	0151      	lsls	r1, r2, #5
 8014430:	69fa      	ldr	r2, [r7, #28]
 8014432:	440a      	add	r2, r1
 8014434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801443c:	6013      	str	r3, [r2, #0]
 801443e:	e16a      	b.n	8014716 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	015a      	lsls	r2, r3, #5
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	4413      	add	r3, r2
 8014448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	69ba      	ldr	r2, [r7, #24]
 8014450:	0151      	lsls	r1, r2, #5
 8014452:	69fa      	ldr	r2, [r7, #28]
 8014454:	440a      	add	r2, r1
 8014456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801445a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801445e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	791b      	ldrb	r3, [r3, #4]
 8014464:	2b01      	cmp	r3, #1
 8014466:	d015      	beq.n	8014494 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	691b      	ldr	r3, [r3, #16]
 801446c:	2b00      	cmp	r3, #0
 801446e:	f000 8152 	beq.w	8014716 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	f003 030f 	and.w	r3, r3, #15
 8014482:	2101      	movs	r1, #1
 8014484:	fa01 f303 	lsl.w	r3, r1, r3
 8014488:	69f9      	ldr	r1, [r7, #28]
 801448a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801448e:	4313      	orrs	r3, r2
 8014490:	634b      	str	r3, [r1, #52]	; 0x34
 8014492:	e140      	b.n	8014716 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801449a:	689b      	ldr	r3, [r3, #8]
 801449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d117      	bne.n	80144d4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80144a4:	69bb      	ldr	r3, [r7, #24]
 80144a6:	015a      	lsls	r2, r3, #5
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	4413      	add	r3, r2
 80144ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	69ba      	ldr	r2, [r7, #24]
 80144b4:	0151      	lsls	r1, r2, #5
 80144b6:	69fa      	ldr	r2, [r7, #28]
 80144b8:	440a      	add	r2, r1
 80144ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144c2:	6013      	str	r3, [r2, #0]
 80144c4:	e016      	b.n	80144f4 <USB_EPStartXfer+0x308>
 80144c6:	bf00      	nop
 80144c8:	e007ffff 	.word	0xe007ffff
 80144cc:	fff80000 	.word	0xfff80000
 80144d0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80144d4:	69bb      	ldr	r3, [r7, #24]
 80144d6:	015a      	lsls	r2, r3, #5
 80144d8:	69fb      	ldr	r3, [r7, #28]
 80144da:	4413      	add	r3, r2
 80144dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	69ba      	ldr	r2, [r7, #24]
 80144e4:	0151      	lsls	r1, r2, #5
 80144e6:	69fa      	ldr	r2, [r7, #28]
 80144e8:	440a      	add	r2, r1
 80144ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144f2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	68d9      	ldr	r1, [r3, #12]
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	781a      	ldrb	r2, [r3, #0]
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	691b      	ldr	r3, [r3, #16]
 8014500:	b298      	uxth	r0, r3
 8014502:	79fb      	ldrb	r3, [r7, #7]
 8014504:	9300      	str	r3, [sp, #0]
 8014506:	4603      	mov	r3, r0
 8014508:	68f8      	ldr	r0, [r7, #12]
 801450a:	f000 f9b9 	bl	8014880 <USB_WritePacket>
 801450e:	e102      	b.n	8014716 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014510:	69bb      	ldr	r3, [r7, #24]
 8014512:	015a      	lsls	r2, r3, #5
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	4413      	add	r3, r2
 8014518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801451c:	691a      	ldr	r2, [r3, #16]
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	0159      	lsls	r1, r3, #5
 8014522:	69fb      	ldr	r3, [r7, #28]
 8014524:	440b      	add	r3, r1
 8014526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801452a:	4619      	mov	r1, r3
 801452c:	4b7c      	ldr	r3, [pc, #496]	; (8014720 <USB_EPStartXfer+0x534>)
 801452e:	4013      	ands	r3, r2
 8014530:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	015a      	lsls	r2, r3, #5
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	4413      	add	r3, r2
 801453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801453e:	691a      	ldr	r2, [r3, #16]
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	0159      	lsls	r1, r3, #5
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	440b      	add	r3, r1
 8014548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801454c:	4619      	mov	r1, r3
 801454e:	4b75      	ldr	r3, [pc, #468]	; (8014724 <USB_EPStartXfer+0x538>)
 8014550:	4013      	ands	r3, r2
 8014552:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014554:	69bb      	ldr	r3, [r7, #24]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d12f      	bne.n	80145ba <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	691b      	ldr	r3, [r3, #16]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d003      	beq.n	801456a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	689a      	ldr	r2, [r3, #8]
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	689a      	ldr	r2, [r3, #8]
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	015a      	lsls	r2, r3, #5
 8014576:	69fb      	ldr	r3, [r7, #28]
 8014578:	4413      	add	r3, r2
 801457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801457e:	691a      	ldr	r2, [r3, #16]
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	6a1b      	ldr	r3, [r3, #32]
 8014584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014588:	69b9      	ldr	r1, [r7, #24]
 801458a:	0148      	lsls	r0, r1, #5
 801458c:	69f9      	ldr	r1, [r7, #28]
 801458e:	4401      	add	r1, r0
 8014590:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014594:	4313      	orrs	r3, r2
 8014596:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014598:	69bb      	ldr	r3, [r7, #24]
 801459a:	015a      	lsls	r2, r3, #5
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	4413      	add	r3, r2
 80145a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145a4:	691b      	ldr	r3, [r3, #16]
 80145a6:	69ba      	ldr	r2, [r7, #24]
 80145a8:	0151      	lsls	r1, r2, #5
 80145aa:	69fa      	ldr	r2, [r7, #28]
 80145ac:	440a      	add	r2, r1
 80145ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80145b6:	6113      	str	r3, [r2, #16]
 80145b8:	e05f      	b.n	801467a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	691b      	ldr	r3, [r3, #16]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d123      	bne.n	801460a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	015a      	lsls	r2, r3, #5
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	4413      	add	r3, r2
 80145ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ce:	691a      	ldr	r2, [r3, #16]
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145d8:	69b9      	ldr	r1, [r7, #24]
 80145da:	0148      	lsls	r0, r1, #5
 80145dc:	69f9      	ldr	r1, [r7, #28]
 80145de:	4401      	add	r1, r0
 80145e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80145e4:	4313      	orrs	r3, r2
 80145e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	015a      	lsls	r2, r3, #5
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	4413      	add	r3, r2
 80145f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f4:	691b      	ldr	r3, [r3, #16]
 80145f6:	69ba      	ldr	r2, [r7, #24]
 80145f8:	0151      	lsls	r1, r2, #5
 80145fa:	69fa      	ldr	r2, [r7, #28]
 80145fc:	440a      	add	r2, r1
 80145fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014606:	6113      	str	r3, [r2, #16]
 8014608:	e037      	b.n	801467a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	691a      	ldr	r2, [r3, #16]
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	689b      	ldr	r3, [r3, #8]
 8014612:	4413      	add	r3, r2
 8014614:	1e5a      	subs	r2, r3, #1
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	689b      	ldr	r3, [r3, #8]
 801461a:	fbb2 f3f3 	udiv	r3, r2, r3
 801461e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	8afa      	ldrh	r2, [r7, #22]
 8014626:	fb03 f202 	mul.w	r2, r3, r2
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	015a      	lsls	r2, r3, #5
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	4413      	add	r3, r2
 8014636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801463a:	691a      	ldr	r2, [r3, #16]
 801463c:	8afb      	ldrh	r3, [r7, #22]
 801463e:	04d9      	lsls	r1, r3, #19
 8014640:	4b39      	ldr	r3, [pc, #228]	; (8014728 <USB_EPStartXfer+0x53c>)
 8014642:	400b      	ands	r3, r1
 8014644:	69b9      	ldr	r1, [r7, #24]
 8014646:	0148      	lsls	r0, r1, #5
 8014648:	69f9      	ldr	r1, [r7, #28]
 801464a:	4401      	add	r1, r0
 801464c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014650:	4313      	orrs	r3, r2
 8014652:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	4413      	add	r3, r2
 801465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014660:	691a      	ldr	r2, [r3, #16]
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	6a1b      	ldr	r3, [r3, #32]
 8014666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801466a:	69b9      	ldr	r1, [r7, #24]
 801466c:	0148      	lsls	r0, r1, #5
 801466e:	69f9      	ldr	r1, [r7, #28]
 8014670:	4401      	add	r1, r0
 8014672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014676:	4313      	orrs	r3, r2
 8014678:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801467a:	79fb      	ldrb	r3, [r7, #7]
 801467c:	2b01      	cmp	r3, #1
 801467e:	d10d      	bne.n	801469c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	68db      	ldr	r3, [r3, #12]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d009      	beq.n	801469c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	68d9      	ldr	r1, [r3, #12]
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	4413      	add	r3, r2
 8014694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014698:	460a      	mov	r2, r1
 801469a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	791b      	ldrb	r3, [r3, #4]
 80146a0:	2b01      	cmp	r3, #1
 80146a2:	d128      	bne.n	80146f6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80146a4:	69fb      	ldr	r3, [r7, #28]
 80146a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146aa:	689b      	ldr	r3, [r3, #8]
 80146ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d110      	bne.n	80146d6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	015a      	lsls	r2, r3, #5
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	4413      	add	r3, r2
 80146bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	69ba      	ldr	r2, [r7, #24]
 80146c4:	0151      	lsls	r1, r2, #5
 80146c6:	69fa      	ldr	r2, [r7, #28]
 80146c8:	440a      	add	r2, r1
 80146ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80146d2:	6013      	str	r3, [r2, #0]
 80146d4:	e00f      	b.n	80146f6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	015a      	lsls	r2, r3, #5
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	4413      	add	r3, r2
 80146de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	69ba      	ldr	r2, [r7, #24]
 80146e6:	0151      	lsls	r1, r2, #5
 80146e8:	69fa      	ldr	r2, [r7, #28]
 80146ea:	440a      	add	r2, r1
 80146ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	015a      	lsls	r2, r3, #5
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	4413      	add	r3, r2
 80146fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	69ba      	ldr	r2, [r7, #24]
 8014706:	0151      	lsls	r1, r2, #5
 8014708:	69fa      	ldr	r2, [r7, #28]
 801470a:	440a      	add	r2, r1
 801470c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014710:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014716:	2300      	movs	r3, #0
}
 8014718:	4618      	mov	r0, r3
 801471a:	3720      	adds	r7, #32
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	fff80000 	.word	0xfff80000
 8014724:	e007ffff 	.word	0xe007ffff
 8014728:	1ff80000 	.word	0x1ff80000

0801472c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801472c:	b480      	push	{r7}
 801472e:	b087      	sub	sp, #28
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014736:	2300      	movs	r3, #0
 8014738:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801473a:	2300      	movs	r3, #0
 801473c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	785b      	ldrb	r3, [r3, #1]
 8014746:	2b01      	cmp	r3, #1
 8014748:	d14a      	bne.n	80147e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	015a      	lsls	r2, r3, #5
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	4413      	add	r3, r2
 8014754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801475e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014762:	f040 8086 	bne.w	8014872 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	015a      	lsls	r2, r3, #5
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	4413      	add	r3, r2
 8014770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	683a      	ldr	r2, [r7, #0]
 8014778:	7812      	ldrb	r2, [r2, #0]
 801477a:	0151      	lsls	r1, r2, #5
 801477c:	693a      	ldr	r2, [r7, #16]
 801477e:	440a      	add	r2, r1
 8014780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014788:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	015a      	lsls	r2, r3, #5
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	4413      	add	r3, r2
 8014794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	683a      	ldr	r2, [r7, #0]
 801479c:	7812      	ldrb	r2, [r2, #0]
 801479e:	0151      	lsls	r1, r2, #5
 80147a0:	693a      	ldr	r2, [r7, #16]
 80147a2:	440a      	add	r2, r1
 80147a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80147ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	3301      	adds	r3, #1
 80147b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80147ba:	4293      	cmp	r3, r2
 80147bc:	d902      	bls.n	80147c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80147be:	2301      	movs	r3, #1
 80147c0:	75fb      	strb	r3, [r7, #23]
          break;
 80147c2:	e056      	b.n	8014872 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	015a      	lsls	r2, r3, #5
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	4413      	add	r3, r2
 80147ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80147d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147dc:	d0e7      	beq.n	80147ae <USB_EPStopXfer+0x82>
 80147de:	e048      	b.n	8014872 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	015a      	lsls	r2, r3, #5
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	4413      	add	r3, r2
 80147ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80147f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147f8:	d13b      	bne.n	8014872 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	015a      	lsls	r2, r3, #5
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	4413      	add	r3, r2
 8014804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	683a      	ldr	r2, [r7, #0]
 801480c:	7812      	ldrb	r2, [r2, #0]
 801480e:	0151      	lsls	r1, r2, #5
 8014810:	693a      	ldr	r2, [r7, #16]
 8014812:	440a      	add	r2, r1
 8014814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801481c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	015a      	lsls	r2, r3, #5
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	4413      	add	r3, r2
 8014828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	683a      	ldr	r2, [r7, #0]
 8014830:	7812      	ldrb	r2, [r2, #0]
 8014832:	0151      	lsls	r1, r2, #5
 8014834:	693a      	ldr	r2, [r7, #16]
 8014836:	440a      	add	r2, r1
 8014838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801483c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014840:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	3301      	adds	r3, #1
 8014846:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f242 7210 	movw	r2, #10000	; 0x2710
 801484e:	4293      	cmp	r3, r2
 8014850:	d902      	bls.n	8014858 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014852:	2301      	movs	r3, #1
 8014854:	75fb      	strb	r3, [r7, #23]
          break;
 8014856:	e00c      	b.n	8014872 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	015a      	lsls	r2, r3, #5
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	4413      	add	r3, r2
 8014862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801486c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014870:	d0e7      	beq.n	8014842 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014872:	7dfb      	ldrb	r3, [r7, #23]
}
 8014874:	4618      	mov	r0, r3
 8014876:	371c      	adds	r7, #28
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014880:	b480      	push	{r7}
 8014882:	b089      	sub	sp, #36	; 0x24
 8014884:	af00      	add	r7, sp, #0
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	4611      	mov	r1, r2
 801488c:	461a      	mov	r2, r3
 801488e:	460b      	mov	r3, r1
 8014890:	71fb      	strb	r3, [r7, #7]
 8014892:	4613      	mov	r3, r2
 8014894:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801489e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d123      	bne.n	80148ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80148a6:	88bb      	ldrh	r3, [r7, #4]
 80148a8:	3303      	adds	r3, #3
 80148aa:	089b      	lsrs	r3, r3, #2
 80148ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80148ae:	2300      	movs	r3, #0
 80148b0:	61bb      	str	r3, [r7, #24]
 80148b2:	e018      	b.n	80148e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80148b4:	79fb      	ldrb	r3, [r7, #7]
 80148b6:	031a      	lsls	r2, r3, #12
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	4413      	add	r3, r2
 80148bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80148c0:	461a      	mov	r2, r3
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80148c8:	69fb      	ldr	r3, [r7, #28]
 80148ca:	3301      	adds	r3, #1
 80148cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	3301      	adds	r3, #1
 80148d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	3301      	adds	r3, #1
 80148d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	3301      	adds	r3, #1
 80148de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80148e0:	69bb      	ldr	r3, [r7, #24]
 80148e2:	3301      	adds	r3, #1
 80148e4:	61bb      	str	r3, [r7, #24]
 80148e6:	69ba      	ldr	r2, [r7, #24]
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d3e2      	bcc.n	80148b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3724      	adds	r7, #36	; 0x24
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr

080148fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80148fc:	b480      	push	{r7}
 80148fe:	b08b      	sub	sp, #44	; 0x2c
 8014900:	af00      	add	r7, sp, #0
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	4613      	mov	r3, r2
 8014908:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014912:	88fb      	ldrh	r3, [r7, #6]
 8014914:	089b      	lsrs	r3, r3, #2
 8014916:	b29b      	uxth	r3, r3
 8014918:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801491a:	88fb      	ldrh	r3, [r7, #6]
 801491c:	f003 0303 	and.w	r3, r3, #3
 8014920:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014922:	2300      	movs	r3, #0
 8014924:	623b      	str	r3, [r7, #32]
 8014926:	e014      	b.n	8014952 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014932:	601a      	str	r2, [r3, #0]
    pDest++;
 8014934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014936:	3301      	adds	r3, #1
 8014938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493c:	3301      	adds	r3, #1
 801493e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014942:	3301      	adds	r3, #1
 8014944:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	3301      	adds	r3, #1
 801494a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801494c:	6a3b      	ldr	r3, [r7, #32]
 801494e:	3301      	adds	r3, #1
 8014950:	623b      	str	r3, [r7, #32]
 8014952:	6a3a      	ldr	r2, [r7, #32]
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	429a      	cmp	r2, r3
 8014958:	d3e6      	bcc.n	8014928 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801495a:	8bfb      	ldrh	r3, [r7, #30]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d01e      	beq.n	801499e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014960:	2300      	movs	r3, #0
 8014962:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014964:	69bb      	ldr	r3, [r7, #24]
 8014966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801496a:	461a      	mov	r2, r3
 801496c:	f107 0310 	add.w	r3, r7, #16
 8014970:	6812      	ldr	r2, [r2, #0]
 8014972:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014974:	693a      	ldr	r2, [r7, #16]
 8014976:	6a3b      	ldr	r3, [r7, #32]
 8014978:	b2db      	uxtb	r3, r3
 801497a:	00db      	lsls	r3, r3, #3
 801497c:	fa22 f303 	lsr.w	r3, r2, r3
 8014980:	b2da      	uxtb	r2, r3
 8014982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014984:	701a      	strb	r2, [r3, #0]
      i++;
 8014986:	6a3b      	ldr	r3, [r7, #32]
 8014988:	3301      	adds	r3, #1
 801498a:	623b      	str	r3, [r7, #32]
      pDest++;
 801498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498e:	3301      	adds	r3, #1
 8014990:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014992:	8bfb      	ldrh	r3, [r7, #30]
 8014994:	3b01      	subs	r3, #1
 8014996:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014998:	8bfb      	ldrh	r3, [r7, #30]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d1ea      	bne.n	8014974 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	372c      	adds	r7, #44	; 0x2c
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr

080149ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b085      	sub	sp, #20
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	785b      	ldrb	r3, [r3, #1]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d12c      	bne.n	8014a22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	015a      	lsls	r2, r3, #5
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	4413      	add	r3, r2
 80149d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	db12      	blt.n	8014a00 <USB_EPSetStall+0x54>
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d00f      	beq.n	8014a00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	015a      	lsls	r2, r3, #5
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	4413      	add	r3, r2
 80149e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	68ba      	ldr	r2, [r7, #8]
 80149f0:	0151      	lsls	r1, r2, #5
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	440a      	add	r2, r1
 80149f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80149fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	015a      	lsls	r2, r3, #5
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	4413      	add	r3, r2
 8014a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	68ba      	ldr	r2, [r7, #8]
 8014a10:	0151      	lsls	r1, r2, #5
 8014a12:	68fa      	ldr	r2, [r7, #12]
 8014a14:	440a      	add	r2, r1
 8014a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014a1e:	6013      	str	r3, [r2, #0]
 8014a20:	e02b      	b.n	8014a7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	015a      	lsls	r2, r3, #5
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	4413      	add	r3, r2
 8014a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	db12      	blt.n	8014a5a <USB_EPSetStall+0xae>
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00f      	beq.n	8014a5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	015a      	lsls	r2, r3, #5
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	4413      	add	r3, r2
 8014a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	68ba      	ldr	r2, [r7, #8]
 8014a4a:	0151      	lsls	r1, r2, #5
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	440a      	add	r2, r1
 8014a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014a58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	015a      	lsls	r2, r3, #5
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	4413      	add	r3, r2
 8014a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	0151      	lsls	r1, r2, #5
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	440a      	add	r2, r1
 8014a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014a78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014a7a:	2300      	movs	r3, #0
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3714      	adds	r7, #20
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b085      	sub	sp, #20
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	785b      	ldrb	r3, [r3, #1]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d128      	bne.n	8014af6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	015a      	lsls	r2, r3, #5
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	4413      	add	r3, r2
 8014aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	68ba      	ldr	r2, [r7, #8]
 8014ab4:	0151      	lsls	r1, r2, #5
 8014ab6:	68fa      	ldr	r2, [r7, #12]
 8014ab8:	440a      	add	r2, r1
 8014aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014abe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014ac2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	791b      	ldrb	r3, [r3, #4]
 8014ac8:	2b03      	cmp	r3, #3
 8014aca:	d003      	beq.n	8014ad4 <USB_EPClearStall+0x4c>
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	791b      	ldrb	r3, [r3, #4]
 8014ad0:	2b02      	cmp	r3, #2
 8014ad2:	d138      	bne.n	8014b46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	015a      	lsls	r2, r3, #5
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	4413      	add	r3, r2
 8014adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	0151      	lsls	r1, r2, #5
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	440a      	add	r2, r1
 8014aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014af2:	6013      	str	r3, [r2, #0]
 8014af4:	e027      	b.n	8014b46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	015a      	lsls	r2, r3, #5
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	4413      	add	r3, r2
 8014afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	0151      	lsls	r1, r2, #5
 8014b08:	68fa      	ldr	r2, [r7, #12]
 8014b0a:	440a      	add	r2, r1
 8014b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	791b      	ldrb	r3, [r3, #4]
 8014b1a:	2b03      	cmp	r3, #3
 8014b1c:	d003      	beq.n	8014b26 <USB_EPClearStall+0x9e>
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	791b      	ldrb	r3, [r3, #4]
 8014b22:	2b02      	cmp	r3, #2
 8014b24:	d10f      	bne.n	8014b46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	015a      	lsls	r2, r3, #5
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	68ba      	ldr	r2, [r7, #8]
 8014b36:	0151      	lsls	r1, r2, #5
 8014b38:	68fa      	ldr	r2, [r7, #12]
 8014b3a:	440a      	add	r2, r1
 8014b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014b46:	2300      	movs	r3, #0
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	3714      	adds	r7, #20
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b52:	4770      	bx	lr

08014b54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014b54:	b480      	push	{r7}
 8014b56:	b085      	sub	sp, #20
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	68fa      	ldr	r2, [r7, #12]
 8014b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014b72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014b76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b7e:	681a      	ldr	r2, [r3, #0]
 8014b80:	78fb      	ldrb	r3, [r7, #3]
 8014b82:	011b      	lsls	r3, r3, #4
 8014b84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014b88:	68f9      	ldr	r1, [r7, #12]
 8014b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014b92:	2300      	movs	r3, #0
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3714      	adds	r7, #20
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr

08014ba0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b085      	sub	sp, #20
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	68fa      	ldr	r2, [r7, #12]
 8014bb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014bba:	f023 0303 	bic.w	r3, r3, #3
 8014bbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	68fa      	ldr	r2, [r7, #12]
 8014bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014bce:	f023 0302 	bic.w	r3, r3, #2
 8014bd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr

08014be2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014be2:	b480      	push	{r7}
 8014be4:	b085      	sub	sp, #20
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	68fa      	ldr	r2, [r7, #12]
 8014bf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014bfc:	f023 0303 	bic.w	r3, r3, #3
 8014c00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	68fa      	ldr	r2, [r7, #12]
 8014c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c10:	f043 0302 	orr.w	r3, r3, #2
 8014c14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c16:	2300      	movs	r3, #0
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3714      	adds	r7, #20
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr

08014c24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	699b      	ldr	r3, [r3, #24]
 8014c36:	68fa      	ldr	r2, [r7, #12]
 8014c38:	4013      	ands	r3, r2
 8014c3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3714      	adds	r7, #20
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr

08014c4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014c4a:	b480      	push	{r7}
 8014c4c:	b085      	sub	sp, #20
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c5c:	699b      	ldr	r3, [r3, #24]
 8014c5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c66:	69db      	ldr	r3, [r3, #28]
 8014c68:	68ba      	ldr	r2, [r7, #8]
 8014c6a:	4013      	ands	r3, r2
 8014c6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	0c1b      	lsrs	r3, r3, #16
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014c7e:	b480      	push	{r7}
 8014c80:	b085      	sub	sp, #20
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c9a:	69db      	ldr	r3, [r3, #28]
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	b29b      	uxth	r3, r3
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3714      	adds	r7, #20
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014cb2:	b480      	push	{r7}
 8014cb4:	b085      	sub	sp, #20
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	6078      	str	r0, [r7, #4]
 8014cba:	460b      	mov	r3, r1
 8014cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014cc2:	78fb      	ldrb	r3, [r7, #3]
 8014cc4:	015a      	lsls	r2, r3, #5
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	4413      	add	r3, r2
 8014cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cce:	689b      	ldr	r3, [r3, #8]
 8014cd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cd8:	695b      	ldr	r3, [r3, #20]
 8014cda:	68ba      	ldr	r2, [r7, #8]
 8014cdc:	4013      	ands	r3, r2
 8014cde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014ce0:	68bb      	ldr	r3, [r7, #8]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3714      	adds	r7, #20
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b087      	sub	sp, #28
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	6078      	str	r0, [r7, #4]
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d04:	691b      	ldr	r3, [r3, #16]
 8014d06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014d12:	78fb      	ldrb	r3, [r7, #3]
 8014d14:	f003 030f 	and.w	r3, r3, #15
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8014d1e:	01db      	lsls	r3, r3, #7
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	693a      	ldr	r2, [r7, #16]
 8014d24:	4313      	orrs	r3, r2
 8014d26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014d28:	78fb      	ldrb	r3, [r7, #3]
 8014d2a:	015a      	lsls	r2, r3, #5
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	4413      	add	r3, r2
 8014d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d34:	689b      	ldr	r3, [r3, #8]
 8014d36:	693a      	ldr	r2, [r7, #16]
 8014d38:	4013      	ands	r3, r2
 8014d3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d3c:	68bb      	ldr	r3, [r7, #8]
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	371c      	adds	r7, #28
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr

08014d4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014d4a:	b480      	push	{r7}
 8014d4c:	b083      	sub	sp, #12
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	695b      	ldr	r3, [r3, #20]
 8014d56:	f003 0301 	and.w	r3, r3, #1
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	370c      	adds	r7, #12
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
	...

08014d68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b085      	sub	sp, #20
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d82:	4619      	mov	r1, r3
 8014d84:	4b09      	ldr	r3, [pc, #36]	; (8014dac <USB_ActivateSetup+0x44>)
 8014d86:	4013      	ands	r3, r2
 8014d88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	68fa      	ldr	r2, [r7, #12]
 8014d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014d9e:	2300      	movs	r3, #0
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3714      	adds	r7, #20
 8014da4:	46bd      	mov	sp, r7
 8014da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014daa:	4770      	bx	lr
 8014dac:	fffff800 	.word	0xfffff800

08014db0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b087      	sub	sp, #28
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	60f8      	str	r0, [r7, #12]
 8014db8:	460b      	mov	r3, r1
 8014dba:	607a      	str	r2, [r7, #4]
 8014dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	333c      	adds	r3, #60	; 0x3c
 8014dc6:	3304      	adds	r3, #4
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	4a26      	ldr	r2, [pc, #152]	; (8014e68 <USB_EP0_OutStart+0xb8>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d90a      	bls.n	8014dea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014de4:	d101      	bne.n	8014dea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014de6:	2300      	movs	r3, #0
 8014de8:	e037      	b.n	8014e5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014df0:	461a      	mov	r2, r3
 8014df2:	2300      	movs	r3, #0
 8014df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	697a      	ldr	r2, [r7, #20]
 8014e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e10:	691b      	ldr	r3, [r3, #16]
 8014e12:	697a      	ldr	r2, [r7, #20]
 8014e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e18:	f043 0318 	orr.w	r3, r3, #24
 8014e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	697a      	ldr	r2, [r7, #20]
 8014e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014e30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014e32:	7afb      	ldrb	r3, [r7, #11]
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d10f      	bne.n	8014e58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e3e:	461a      	mov	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	697a      	ldr	r2, [r7, #20]
 8014e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e58:	2300      	movs	r3, #0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	371c      	adds	r7, #28
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop
 8014e68:	4f54300a 	.word	0x4f54300a

08014e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b085      	sub	sp, #20
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014e74:	2300      	movs	r3, #0
 8014e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	4a13      	ldr	r2, [pc, #76]	; (8014ed0 <USB_CoreReset+0x64>)
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d901      	bls.n	8014e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014e86:	2303      	movs	r3, #3
 8014e88:	e01b      	b.n	8014ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	691b      	ldr	r3, [r3, #16]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	daf2      	bge.n	8014e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014e92:	2300      	movs	r3, #0
 8014e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	691b      	ldr	r3, [r3, #16]
 8014e9a:	f043 0201 	orr.w	r2, r3, #1
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	4a09      	ldr	r2, [pc, #36]	; (8014ed0 <USB_CoreReset+0x64>)
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d901      	bls.n	8014eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014eb0:	2303      	movs	r3, #3
 8014eb2:	e006      	b.n	8014ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	691b      	ldr	r3, [r3, #16]
 8014eb8:	f003 0301 	and.w	r3, r3, #1
 8014ebc:	2b01      	cmp	r3, #1
 8014ebe:	d0f0      	beq.n	8014ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	00030d40 	.word	0x00030d40

08014ed4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014ed8:	4904      	ldr	r1, [pc, #16]	; (8014eec <MX_FATFS_Init+0x18>)
 8014eda:	4805      	ldr	r0, [pc, #20]	; (8014ef0 <MX_FATFS_Init+0x1c>)
 8014edc:	f005 f906 	bl	801a0ec <FATFS_LinkDriver>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	4b03      	ldr	r3, [pc, #12]	; (8014ef4 <MX_FATFS_Init+0x20>)
 8014ee6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014ee8:	bf00      	nop
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	240016a4 	.word	0x240016a4
 8014ef0:	0801f724 	.word	0x0801f724
 8014ef4:	240016a0 	.word	0x240016a0

08014ef8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014efc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014f12:	f000 f885 	bl	8015020 <BSP_SD_IsDetected>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d001      	beq.n	8014f20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014f1c:	2302      	movs	r3, #2
 8014f1e:	e012      	b.n	8014f46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014f20:	480b      	ldr	r0, [pc, #44]	; (8014f50 <BSP_SD_Init+0x48>)
 8014f22:	f7f8 ff39 	bl	800dd98 <HAL_SD_Init>
 8014f26:	4603      	mov	r3, r0
 8014f28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014f2a:	79fb      	ldrb	r3, [r7, #7]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d109      	bne.n	8014f44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014f34:	4806      	ldr	r0, [pc, #24]	; (8014f50 <BSP_SD_Init+0x48>)
 8014f36:	f7f9 fdef 	bl	800eb18 <HAL_SD_ConfigWideBusOperation>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d001      	beq.n	8014f44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014f40:	2301      	movs	r3, #1
 8014f42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014f44:	79fb      	ldrb	r3, [r7, #7]
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3708      	adds	r7, #8
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	24000f3c 	.word	0x24000f3c

08014f54 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014f60:	2300      	movs	r3, #0
 8014f62:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	68ba      	ldr	r2, [r7, #8]
 8014f68:	68f9      	ldr	r1, [r7, #12]
 8014f6a:	4806      	ldr	r0, [pc, #24]	; (8014f84 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014f6c:	f7f9 f834 	bl	800dfd8 <HAL_SD_ReadBlocks_DMA>
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d001      	beq.n	8014f7a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014f76:	2301      	movs	r3, #1
 8014f78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3718      	adds	r7, #24
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	24000f3c 	.word	0x24000f3c

08014f88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	68ba      	ldr	r2, [r7, #8]
 8014f9c:	68f9      	ldr	r1, [r7, #12]
 8014f9e:	4806      	ldr	r0, [pc, #24]	; (8014fb8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014fa0:	f7f9 f8c2 	bl	800e128 <HAL_SD_WriteBlocks_DMA>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d001      	beq.n	8014fae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014faa:	2301      	movs	r3, #1
 8014fac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3718      	adds	r7, #24
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	24000f3c 	.word	0x24000f3c

08014fbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014fc0:	4805      	ldr	r0, [pc, #20]	; (8014fd8 <BSP_SD_GetCardState+0x1c>)
 8014fc2:	f7f9 febb 	bl	800ed3c <HAL_SD_GetCardState>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	2b04      	cmp	r3, #4
 8014fca:	bf14      	ite	ne
 8014fcc:	2301      	movne	r3, #1
 8014fce:	2300      	moveq	r3, #0
 8014fd0:	b2db      	uxtb	r3, r3
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	24000f3c 	.word	0x24000f3c

08014fdc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014fe4:	6879      	ldr	r1, [r7, #4]
 8014fe6:	4803      	ldr	r0, [pc, #12]	; (8014ff4 <BSP_SD_GetCardInfo+0x18>)
 8014fe8:	f7f9 fd6a 	bl	800eac0 <HAL_SD_GetCardInfo>
}
 8014fec:	bf00      	nop
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	24000f3c 	.word	0x24000f3c

08014ff8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015000:	f000 f984 	bl	801530c <BSP_SD_WriteCpltCallback>
}
 8015004:	bf00      	nop
 8015006:	3708      	adds	r7, #8
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}

0801500c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015014:	f000 f986 	bl	8015324 <BSP_SD_ReadCpltCallback>
}
 8015018:	bf00      	nop
 801501a:	3708      	adds	r7, #8
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015026:	2301      	movs	r3, #1
 8015028:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801502a:	79fb      	ldrb	r3, [r7, #7]
 801502c:	b2db      	uxtb	r3, r3
}
 801502e:	4618      	mov	r0, r3
 8015030:	370c      	adds	r7, #12
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr

0801503a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801503a:	b580      	push	{r7, lr}
 801503c:	b084      	sub	sp, #16
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015042:	f7ee ff89 	bl	8003f58 <HAL_GetTick>
 8015046:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015048:	e006      	b.n	8015058 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801504a:	f7ff ffb7 	bl	8014fbc <BSP_SD_GetCardState>
 801504e:	4603      	mov	r3, r0
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015054:	2300      	movs	r3, #0
 8015056:	e009      	b.n	801506c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015058:	f7ee ff7e 	bl	8003f58 <HAL_GetTick>
 801505c:	4602      	mov	r2, r0
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	429a      	cmp	r2, r3
 8015066:	d8f0      	bhi.n	801504a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015068:	f04f 33ff 	mov.w	r3, #4294967295
}
 801506c:	4618      	mov	r0, r3
 801506e:	3710      	adds	r7, #16
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	4603      	mov	r3, r0
 801507c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801507e:	4b0b      	ldr	r3, [pc, #44]	; (80150ac <SD_CheckStatus+0x38>)
 8015080:	2201      	movs	r2, #1
 8015082:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015084:	f7ff ff9a 	bl	8014fbc <BSP_SD_GetCardState>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d107      	bne.n	801509e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801508e:	4b07      	ldr	r3, [pc, #28]	; (80150ac <SD_CheckStatus+0x38>)
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	b2db      	uxtb	r3, r3
 8015094:	f023 0301 	bic.w	r3, r3, #1
 8015098:	b2da      	uxtb	r2, r3
 801509a:	4b04      	ldr	r3, [pc, #16]	; (80150ac <SD_CheckStatus+0x38>)
 801509c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801509e:	4b03      	ldr	r3, [pc, #12]	; (80150ac <SD_CheckStatus+0x38>)
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	b2db      	uxtb	r3, r3
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	2400000d 	.word	0x2400000d

080150b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	4603      	mov	r3, r0
 80150b8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80150ba:	f7ff ff25 	bl	8014f08 <BSP_SD_Init>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d107      	bne.n	80150d4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80150c4:	79fb      	ldrb	r3, [r7, #7]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff ffd4 	bl	8015074 <SD_CheckStatus>
 80150cc:	4603      	mov	r3, r0
 80150ce:	461a      	mov	r2, r3
 80150d0:	4b04      	ldr	r3, [pc, #16]	; (80150e4 <SD_initialize+0x34>)
 80150d2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80150d4:	4b03      	ldr	r3, [pc, #12]	; (80150e4 <SD_initialize+0x34>)
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	b2db      	uxtb	r3, r3
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3708      	adds	r7, #8
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	2400000d 	.word	0x2400000d

080150e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	4603      	mov	r3, r0
 80150f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80150f2:	79fb      	ldrb	r3, [r7, #7]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7ff ffbd 	bl	8015074 <SD_CheckStatus>
 80150fa:	4603      	mov	r3, r0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b086      	sub	sp, #24
 8015108:	af00      	add	r7, sp, #0
 801510a:	60b9      	str	r1, [r7, #8]
 801510c:	607a      	str	r2, [r7, #4]
 801510e:	603b      	str	r3, [r7, #0]
 8015110:	4603      	mov	r3, r0
 8015112:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015114:	2301      	movs	r3, #1
 8015116:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015118:	f247 5030 	movw	r0, #30000	; 0x7530
 801511c:	f7ff ff8d 	bl	801503a <SD_CheckStatusWithTimeout>
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	da01      	bge.n	801512a <SD_read+0x26>
  {
    return res;
 8015126:	7dfb      	ldrb	r3, [r7, #23]
 8015128:	e03b      	b.n	80151a2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801512a:	683a      	ldr	r2, [r7, #0]
 801512c:	6879      	ldr	r1, [r7, #4]
 801512e:	68b8      	ldr	r0, [r7, #8]
 8015130:	f7ff ff10 	bl	8014f54 <BSP_SD_ReadBlocks_DMA>
 8015134:	4603      	mov	r3, r0
 8015136:	2b00      	cmp	r3, #0
 8015138:	d132      	bne.n	80151a0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801513a:	4b1c      	ldr	r3, [pc, #112]	; (80151ac <SD_read+0xa8>)
 801513c:	2200      	movs	r2, #0
 801513e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015140:	f7ee ff0a 	bl	8003f58 <HAL_GetTick>
 8015144:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015146:	bf00      	nop
 8015148:	4b18      	ldr	r3, [pc, #96]	; (80151ac <SD_read+0xa8>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d108      	bne.n	8015162 <SD_read+0x5e>
 8015150:	f7ee ff02 	bl	8003f58 <HAL_GetTick>
 8015154:	4602      	mov	r2, r0
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	f247 522f 	movw	r2, #29999	; 0x752f
 801515e:	4293      	cmp	r3, r2
 8015160:	d9f2      	bls.n	8015148 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8015162:	4b12      	ldr	r3, [pc, #72]	; (80151ac <SD_read+0xa8>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d102      	bne.n	8015170 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801516a:	2301      	movs	r3, #1
 801516c:	75fb      	strb	r3, [r7, #23]
 801516e:	e017      	b.n	80151a0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8015170:	4b0e      	ldr	r3, [pc, #56]	; (80151ac <SD_read+0xa8>)
 8015172:	2200      	movs	r2, #0
 8015174:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015176:	f7ee feef 	bl	8003f58 <HAL_GetTick>
 801517a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801517c:	e007      	b.n	801518e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801517e:	f7ff ff1d 	bl	8014fbc <BSP_SD_GetCardState>
 8015182:	4603      	mov	r3, r0
 8015184:	2b00      	cmp	r3, #0
 8015186:	d102      	bne.n	801518e <SD_read+0x8a>
          {
            res = RES_OK;
 8015188:	2300      	movs	r3, #0
 801518a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801518c:	e008      	b.n	80151a0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801518e:	f7ee fee3 	bl	8003f58 <HAL_GetTick>
 8015192:	4602      	mov	r2, r0
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	f247 522f 	movw	r2, #29999	; 0x752f
 801519c:	4293      	cmp	r3, r2
 801519e:	d9ee      	bls.n	801517e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80151a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3718      	adds	r7, #24
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop
 80151ac:	240016ac 	.word	0x240016ac

080151b0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b086      	sub	sp, #24
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	60b9      	str	r1, [r7, #8]
 80151b8:	607a      	str	r2, [r7, #4]
 80151ba:	603b      	str	r3, [r7, #0]
 80151bc:	4603      	mov	r3, r0
 80151be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80151c0:	2301      	movs	r3, #1
 80151c2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80151c4:	4b24      	ldr	r3, [pc, #144]	; (8015258 <SD_write+0xa8>)
 80151c6:	2200      	movs	r2, #0
 80151c8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80151ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80151ce:	f7ff ff34 	bl	801503a <SD_CheckStatusWithTimeout>
 80151d2:	4603      	mov	r3, r0
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	da01      	bge.n	80151dc <SD_write+0x2c>
  {
    return res;
 80151d8:	7dfb      	ldrb	r3, [r7, #23]
 80151da:	e038      	b.n	801524e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80151dc:	683a      	ldr	r2, [r7, #0]
 80151de:	6879      	ldr	r1, [r7, #4]
 80151e0:	68b8      	ldr	r0, [r7, #8]
 80151e2:	f7ff fed1 	bl	8014f88 <BSP_SD_WriteBlocks_DMA>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d12f      	bne.n	801524c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80151ec:	f7ee feb4 	bl	8003f58 <HAL_GetTick>
 80151f0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80151f2:	bf00      	nop
 80151f4:	4b18      	ldr	r3, [pc, #96]	; (8015258 <SD_write+0xa8>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d108      	bne.n	801520e <SD_write+0x5e>
 80151fc:	f7ee feac 	bl	8003f58 <HAL_GetTick>
 8015200:	4602      	mov	r2, r0
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	f247 522f 	movw	r2, #29999	; 0x752f
 801520a:	4293      	cmp	r3, r2
 801520c:	d9f2      	bls.n	80151f4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801520e:	4b12      	ldr	r3, [pc, #72]	; (8015258 <SD_write+0xa8>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d102      	bne.n	801521c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8015216:	2301      	movs	r3, #1
 8015218:	75fb      	strb	r3, [r7, #23]
 801521a:	e017      	b.n	801524c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801521c:	4b0e      	ldr	r3, [pc, #56]	; (8015258 <SD_write+0xa8>)
 801521e:	2200      	movs	r2, #0
 8015220:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015222:	f7ee fe99 	bl	8003f58 <HAL_GetTick>
 8015226:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015228:	e007      	b.n	801523a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801522a:	f7ff fec7 	bl	8014fbc <BSP_SD_GetCardState>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d102      	bne.n	801523a <SD_write+0x8a>
          {
            res = RES_OK;
 8015234:	2300      	movs	r3, #0
 8015236:	75fb      	strb	r3, [r7, #23]
            break;
 8015238:	e008      	b.n	801524c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801523a:	f7ee fe8d 	bl	8003f58 <HAL_GetTick>
 801523e:	4602      	mov	r2, r0
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	1ad3      	subs	r3, r2, r3
 8015244:	f247 522f 	movw	r2, #29999	; 0x752f
 8015248:	4293      	cmp	r3, r2
 801524a:	d9ee      	bls.n	801522a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801524c:	7dfb      	ldrb	r3, [r7, #23]
}
 801524e:	4618      	mov	r0, r3
 8015250:	3718      	adds	r7, #24
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	240016a8 	.word	0x240016a8

0801525c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b08c      	sub	sp, #48	; 0x30
 8015260:	af00      	add	r7, sp, #0
 8015262:	4603      	mov	r3, r0
 8015264:	603a      	str	r2, [r7, #0]
 8015266:	71fb      	strb	r3, [r7, #7]
 8015268:	460b      	mov	r3, r1
 801526a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801526c:	2301      	movs	r3, #1
 801526e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015272:	4b25      	ldr	r3, [pc, #148]	; (8015308 <SD_ioctl+0xac>)
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	b2db      	uxtb	r3, r3
 8015278:	f003 0301 	and.w	r3, r3, #1
 801527c:	2b00      	cmp	r3, #0
 801527e:	d001      	beq.n	8015284 <SD_ioctl+0x28>
 8015280:	2303      	movs	r3, #3
 8015282:	e03c      	b.n	80152fe <SD_ioctl+0xa2>

  switch (cmd)
 8015284:	79bb      	ldrb	r3, [r7, #6]
 8015286:	2b03      	cmp	r3, #3
 8015288:	d834      	bhi.n	80152f4 <SD_ioctl+0x98>
 801528a:	a201      	add	r2, pc, #4	; (adr r2, 8015290 <SD_ioctl+0x34>)
 801528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015290:	080152a1 	.word	0x080152a1
 8015294:	080152a9 	.word	0x080152a9
 8015298:	080152c1 	.word	0x080152c1
 801529c:	080152db 	.word	0x080152db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80152a0:	2300      	movs	r3, #0
 80152a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80152a6:	e028      	b.n	80152fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80152a8:	f107 0308 	add.w	r3, r7, #8
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ff fe95 	bl	8014fdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80152b2:	6a3a      	ldr	r2, [r7, #32]
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80152b8:	2300      	movs	r3, #0
 80152ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80152be:	e01c      	b.n	80152fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80152c0:	f107 0308 	add.w	r3, r7, #8
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7ff fe89 	bl	8014fdc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	b29a      	uxth	r2, r3
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80152d2:	2300      	movs	r3, #0
 80152d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80152d8:	e00f      	b.n	80152fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80152da:	f107 0308 	add.w	r3, r7, #8
 80152de:	4618      	mov	r0, r3
 80152e0:	f7ff fe7c 	bl	8014fdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80152e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e6:	0a5a      	lsrs	r2, r3, #9
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80152f2:	e002      	b.n	80152fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80152f4:	2304      	movs	r3, #4
 80152f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80152fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3730      	adds	r7, #48	; 0x30
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	2400000d 	.word	0x2400000d

0801530c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801530c:	b480      	push	{r7}
 801530e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015310:	4b03      	ldr	r3, [pc, #12]	; (8015320 <BSP_SD_WriteCpltCallback+0x14>)
 8015312:	2201      	movs	r2, #1
 8015314:	601a      	str	r2, [r3, #0]
}
 8015316:	bf00      	nop
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr
 8015320:	240016a8 	.word	0x240016a8

08015324 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015324:	b480      	push	{r7}
 8015326:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015328:	4b03      	ldr	r3, [pc, #12]	; (8015338 <BSP_SD_ReadCpltCallback+0x14>)
 801532a:	2201      	movs	r2, #1
 801532c:	601a      	str	r2, [r3, #0]
}
 801532e:	bf00      	nop
 8015330:	46bd      	mov	sp, r7
 8015332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015336:	4770      	bx	lr
 8015338:	240016ac 	.word	0x240016ac

0801533c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	460b      	mov	r3, r1
 8015346:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015348:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801534c:	f005 fc74 	bl	801ac38 <USBD_static_malloc>
 8015350:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d109      	bne.n	801536c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	32b0      	adds	r2, #176	; 0xb0
 8015362:	2100      	movs	r1, #0
 8015364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015368:	2302      	movs	r3, #2
 801536a:	e0d4      	b.n	8015516 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801536c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015370:	2100      	movs	r1, #0
 8015372:	68f8      	ldr	r0, [r7, #12]
 8015374:	f005 fcdc 	bl	801ad30 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	32b0      	adds	r2, #176	; 0xb0
 8015382:	68f9      	ldr	r1, [r7, #12]
 8015384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	32b0      	adds	r2, #176	; 0xb0
 8015392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	7c1b      	ldrb	r3, [r3, #16]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d138      	bne.n	8015416 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80153a4:	4b5e      	ldr	r3, [pc, #376]	; (8015520 <USBD_CDC_Init+0x1e4>)
 80153a6:	7819      	ldrb	r1, [r3, #0]
 80153a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80153ac:	2202      	movs	r2, #2
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f005 fb1f 	bl	801a9f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80153b4:	4b5a      	ldr	r3, [pc, #360]	; (8015520 <USBD_CDC_Init+0x1e4>)
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	f003 020f 	and.w	r2, r3, #15
 80153bc:	6879      	ldr	r1, [r7, #4]
 80153be:	4613      	mov	r3, r2
 80153c0:	009b      	lsls	r3, r3, #2
 80153c2:	4413      	add	r3, r2
 80153c4:	009b      	lsls	r3, r3, #2
 80153c6:	440b      	add	r3, r1
 80153c8:	3324      	adds	r3, #36	; 0x24
 80153ca:	2201      	movs	r2, #1
 80153cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80153ce:	4b55      	ldr	r3, [pc, #340]	; (8015524 <USBD_CDC_Init+0x1e8>)
 80153d0:	7819      	ldrb	r1, [r3, #0]
 80153d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80153d6:	2202      	movs	r2, #2
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f005 fb0a 	bl	801a9f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80153de:	4b51      	ldr	r3, [pc, #324]	; (8015524 <USBD_CDC_Init+0x1e8>)
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	f003 020f 	and.w	r2, r3, #15
 80153e6:	6879      	ldr	r1, [r7, #4]
 80153e8:	4613      	mov	r3, r2
 80153ea:	009b      	lsls	r3, r3, #2
 80153ec:	4413      	add	r3, r2
 80153ee:	009b      	lsls	r3, r3, #2
 80153f0:	440b      	add	r3, r1
 80153f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80153f6:	2201      	movs	r2, #1
 80153f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80153fa:	4b4b      	ldr	r3, [pc, #300]	; (8015528 <USBD_CDC_Init+0x1ec>)
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	f003 020f 	and.w	r2, r3, #15
 8015402:	6879      	ldr	r1, [r7, #4]
 8015404:	4613      	mov	r3, r2
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	4413      	add	r3, r2
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	440b      	add	r3, r1
 801540e:	3326      	adds	r3, #38	; 0x26
 8015410:	2210      	movs	r2, #16
 8015412:	801a      	strh	r2, [r3, #0]
 8015414:	e035      	b.n	8015482 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015416:	4b42      	ldr	r3, [pc, #264]	; (8015520 <USBD_CDC_Init+0x1e4>)
 8015418:	7819      	ldrb	r1, [r3, #0]
 801541a:	2340      	movs	r3, #64	; 0x40
 801541c:	2202      	movs	r2, #2
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f005 fae7 	bl	801a9f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015424:	4b3e      	ldr	r3, [pc, #248]	; (8015520 <USBD_CDC_Init+0x1e4>)
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	f003 020f 	and.w	r2, r3, #15
 801542c:	6879      	ldr	r1, [r7, #4]
 801542e:	4613      	mov	r3, r2
 8015430:	009b      	lsls	r3, r3, #2
 8015432:	4413      	add	r3, r2
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	440b      	add	r3, r1
 8015438:	3324      	adds	r3, #36	; 0x24
 801543a:	2201      	movs	r2, #1
 801543c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801543e:	4b39      	ldr	r3, [pc, #228]	; (8015524 <USBD_CDC_Init+0x1e8>)
 8015440:	7819      	ldrb	r1, [r3, #0]
 8015442:	2340      	movs	r3, #64	; 0x40
 8015444:	2202      	movs	r2, #2
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f005 fad3 	bl	801a9f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801544c:	4b35      	ldr	r3, [pc, #212]	; (8015524 <USBD_CDC_Init+0x1e8>)
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	f003 020f 	and.w	r2, r3, #15
 8015454:	6879      	ldr	r1, [r7, #4]
 8015456:	4613      	mov	r3, r2
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	4413      	add	r3, r2
 801545c:	009b      	lsls	r3, r3, #2
 801545e:	440b      	add	r3, r1
 8015460:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015464:	2201      	movs	r2, #1
 8015466:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015468:	4b2f      	ldr	r3, [pc, #188]	; (8015528 <USBD_CDC_Init+0x1ec>)
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	f003 020f 	and.w	r2, r3, #15
 8015470:	6879      	ldr	r1, [r7, #4]
 8015472:	4613      	mov	r3, r2
 8015474:	009b      	lsls	r3, r3, #2
 8015476:	4413      	add	r3, r2
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	440b      	add	r3, r1
 801547c:	3326      	adds	r3, #38	; 0x26
 801547e:	2210      	movs	r2, #16
 8015480:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015482:	4b29      	ldr	r3, [pc, #164]	; (8015528 <USBD_CDC_Init+0x1ec>)
 8015484:	7819      	ldrb	r1, [r3, #0]
 8015486:	2308      	movs	r3, #8
 8015488:	2203      	movs	r2, #3
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f005 fab1 	bl	801a9f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015490:	4b25      	ldr	r3, [pc, #148]	; (8015528 <USBD_CDC_Init+0x1ec>)
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	f003 020f 	and.w	r2, r3, #15
 8015498:	6879      	ldr	r1, [r7, #4]
 801549a:	4613      	mov	r3, r2
 801549c:	009b      	lsls	r3, r3, #2
 801549e:	4413      	add	r3, r2
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	440b      	add	r3, r1
 80154a4:	3324      	adds	r3, #36	; 0x24
 80154a6:	2201      	movs	r2, #1
 80154a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2200      	movs	r2, #0
 80154ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80154b8:	687a      	ldr	r2, [r7, #4]
 80154ba:	33b0      	adds	r3, #176	; 0xb0
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	4413      	add	r3, r2
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2200      	movs	r2, #0
 80154d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d101      	bne.n	80154e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80154e0:	2302      	movs	r3, #2
 80154e2:	e018      	b.n	8015516 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	7c1b      	ldrb	r3, [r3, #16]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d10a      	bne.n	8015502 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80154ec:	4b0d      	ldr	r3, [pc, #52]	; (8015524 <USBD_CDC_Init+0x1e8>)
 80154ee:	7819      	ldrb	r1, [r3, #0]
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80154f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f005 fb68 	bl	801abd0 <USBD_LL_PrepareReceive>
 8015500:	e008      	b.n	8015514 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015502:	4b08      	ldr	r3, [pc, #32]	; (8015524 <USBD_CDC_Init+0x1e8>)
 8015504:	7819      	ldrb	r1, [r3, #0]
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801550c:	2340      	movs	r3, #64	; 0x40
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f005 fb5e 	bl	801abd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	24000097 	.word	0x24000097
 8015524:	24000098 	.word	0x24000098
 8015528:	24000099 	.word	0x24000099

0801552c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	460b      	mov	r3, r1
 8015536:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015538:	4b3a      	ldr	r3, [pc, #232]	; (8015624 <USBD_CDC_DeInit+0xf8>)
 801553a:	781b      	ldrb	r3, [r3, #0]
 801553c:	4619      	mov	r1, r3
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f005 fa7d 	bl	801aa3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015544:	4b37      	ldr	r3, [pc, #220]	; (8015624 <USBD_CDC_DeInit+0xf8>)
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	f003 020f 	and.w	r2, r3, #15
 801554c:	6879      	ldr	r1, [r7, #4]
 801554e:	4613      	mov	r3, r2
 8015550:	009b      	lsls	r3, r3, #2
 8015552:	4413      	add	r3, r2
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	440b      	add	r3, r1
 8015558:	3324      	adds	r3, #36	; 0x24
 801555a:	2200      	movs	r2, #0
 801555c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801555e:	4b32      	ldr	r3, [pc, #200]	; (8015628 <USBD_CDC_DeInit+0xfc>)
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	4619      	mov	r1, r3
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f005 fa6a 	bl	801aa3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801556a:	4b2f      	ldr	r3, [pc, #188]	; (8015628 <USBD_CDC_DeInit+0xfc>)
 801556c:	781b      	ldrb	r3, [r3, #0]
 801556e:	f003 020f 	and.w	r2, r3, #15
 8015572:	6879      	ldr	r1, [r7, #4]
 8015574:	4613      	mov	r3, r2
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	4413      	add	r3, r2
 801557a:	009b      	lsls	r3, r3, #2
 801557c:	440b      	add	r3, r1
 801557e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015582:	2200      	movs	r2, #0
 8015584:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015586:	4b29      	ldr	r3, [pc, #164]	; (801562c <USBD_CDC_DeInit+0x100>)
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	4619      	mov	r1, r3
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f005 fa56 	bl	801aa3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015592:	4b26      	ldr	r3, [pc, #152]	; (801562c <USBD_CDC_DeInit+0x100>)
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	f003 020f 	and.w	r2, r3, #15
 801559a:	6879      	ldr	r1, [r7, #4]
 801559c:	4613      	mov	r3, r2
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	4413      	add	r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	440b      	add	r3, r1
 80155a6:	3324      	adds	r3, #36	; 0x24
 80155a8:	2200      	movs	r2, #0
 80155aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80155ac:	4b1f      	ldr	r3, [pc, #124]	; (801562c <USBD_CDC_DeInit+0x100>)
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	f003 020f 	and.w	r2, r3, #15
 80155b4:	6879      	ldr	r1, [r7, #4]
 80155b6:	4613      	mov	r3, r2
 80155b8:	009b      	lsls	r3, r3, #2
 80155ba:	4413      	add	r3, r2
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	440b      	add	r3, r1
 80155c0:	3326      	adds	r3, #38	; 0x26
 80155c2:	2200      	movs	r2, #0
 80155c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	32b0      	adds	r2, #176	; 0xb0
 80155d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d01f      	beq.n	8015618 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	33b0      	adds	r3, #176	; 0xb0
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4413      	add	r3, r2
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	32b0      	adds	r2, #176	; 0xb0
 80155f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f005 fb2a 	bl	801ac54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	32b0      	adds	r2, #176	; 0xb0
 801560a:	2100      	movs	r1, #0
 801560c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2200      	movs	r2, #0
 8015614:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015618:	2300      	movs	r3, #0
}
 801561a:	4618      	mov	r0, r3
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	24000097 	.word	0x24000097
 8015628:	24000098 	.word	0x24000098
 801562c:	24000099 	.word	0x24000099

08015630 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b086      	sub	sp, #24
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	32b0      	adds	r2, #176	; 0xb0
 8015644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015648:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801564a:	2300      	movs	r3, #0
 801564c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801564e:	2300      	movs	r3, #0
 8015650:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015652:	2300      	movs	r3, #0
 8015654:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d101      	bne.n	8015660 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801565c:	2303      	movs	r3, #3
 801565e:	e0bf      	b.n	80157e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015668:	2b00      	cmp	r3, #0
 801566a:	d050      	beq.n	801570e <USBD_CDC_Setup+0xde>
 801566c:	2b20      	cmp	r3, #32
 801566e:	f040 80af 	bne.w	80157d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	88db      	ldrh	r3, [r3, #6]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d03a      	beq.n	80156f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	b25b      	sxtb	r3, r3
 8015680:	2b00      	cmp	r3, #0
 8015682:	da1b      	bge.n	80156bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	33b0      	adds	r3, #176	; 0xb0
 801568e:	009b      	lsls	r3, r3, #2
 8015690:	4413      	add	r3, r2
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	689b      	ldr	r3, [r3, #8]
 8015696:	683a      	ldr	r2, [r7, #0]
 8015698:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801569a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801569c:	683a      	ldr	r2, [r7, #0]
 801569e:	88d2      	ldrh	r2, [r2, #6]
 80156a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	88db      	ldrh	r3, [r3, #6]
 80156a6:	2b07      	cmp	r3, #7
 80156a8:	bf28      	it	cs
 80156aa:	2307      	movcs	r3, #7
 80156ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	89fa      	ldrh	r2, [r7, #14]
 80156b2:	4619      	mov	r1, r3
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f001 fd89 	bl	80171cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80156ba:	e090      	b.n	80157de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	785a      	ldrb	r2, [r3, #1]
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	88db      	ldrh	r3, [r3, #6]
 80156ca:	2b3f      	cmp	r3, #63	; 0x3f
 80156cc:	d803      	bhi.n	80156d6 <USBD_CDC_Setup+0xa6>
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	88db      	ldrh	r3, [r3, #6]
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	e000      	b.n	80156d8 <USBD_CDC_Setup+0xa8>
 80156d6:	2240      	movs	r2, #64	; 0x40
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80156de:	6939      	ldr	r1, [r7, #16]
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80156e6:	461a      	mov	r2, r3
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f001 fd9b 	bl	8017224 <USBD_CtlPrepareRx>
      break;
 80156ee:	e076      	b.n	80157de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	33b0      	adds	r3, #176	; 0xb0
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	4413      	add	r3, r2
 80156fe:	685b      	ldr	r3, [r3, #4]
 8015700:	689b      	ldr	r3, [r3, #8]
 8015702:	683a      	ldr	r2, [r7, #0]
 8015704:	7850      	ldrb	r0, [r2, #1]
 8015706:	2200      	movs	r2, #0
 8015708:	6839      	ldr	r1, [r7, #0]
 801570a:	4798      	blx	r3
      break;
 801570c:	e067      	b.n	80157de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	785b      	ldrb	r3, [r3, #1]
 8015712:	2b0b      	cmp	r3, #11
 8015714:	d851      	bhi.n	80157ba <USBD_CDC_Setup+0x18a>
 8015716:	a201      	add	r2, pc, #4	; (adr r2, 801571c <USBD_CDC_Setup+0xec>)
 8015718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801571c:	0801574d 	.word	0x0801574d
 8015720:	080157c9 	.word	0x080157c9
 8015724:	080157bb 	.word	0x080157bb
 8015728:	080157bb 	.word	0x080157bb
 801572c:	080157bb 	.word	0x080157bb
 8015730:	080157bb 	.word	0x080157bb
 8015734:	080157bb 	.word	0x080157bb
 8015738:	080157bb 	.word	0x080157bb
 801573c:	080157bb 	.word	0x080157bb
 8015740:	080157bb 	.word	0x080157bb
 8015744:	08015777 	.word	0x08015777
 8015748:	080157a1 	.word	0x080157a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015752:	b2db      	uxtb	r3, r3
 8015754:	2b03      	cmp	r3, #3
 8015756:	d107      	bne.n	8015768 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015758:	f107 030a 	add.w	r3, r7, #10
 801575c:	2202      	movs	r2, #2
 801575e:	4619      	mov	r1, r3
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f001 fd33 	bl	80171cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015766:	e032      	b.n	80157ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015768:	6839      	ldr	r1, [r7, #0]
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f001 fcbd 	bl	80170ea <USBD_CtlError>
            ret = USBD_FAIL;
 8015770:	2303      	movs	r3, #3
 8015772:	75fb      	strb	r3, [r7, #23]
          break;
 8015774:	e02b      	b.n	80157ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801577c:	b2db      	uxtb	r3, r3
 801577e:	2b03      	cmp	r3, #3
 8015780:	d107      	bne.n	8015792 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015782:	f107 030d 	add.w	r3, r7, #13
 8015786:	2201      	movs	r2, #1
 8015788:	4619      	mov	r1, r3
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f001 fd1e 	bl	80171cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015790:	e01d      	b.n	80157ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015792:	6839      	ldr	r1, [r7, #0]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f001 fca8 	bl	80170ea <USBD_CtlError>
            ret = USBD_FAIL;
 801579a:	2303      	movs	r3, #3
 801579c:	75fb      	strb	r3, [r7, #23]
          break;
 801579e:	e016      	b.n	80157ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	2b03      	cmp	r3, #3
 80157aa:	d00f      	beq.n	80157cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80157ac:	6839      	ldr	r1, [r7, #0]
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f001 fc9b 	bl	80170ea <USBD_CtlError>
            ret = USBD_FAIL;
 80157b4:	2303      	movs	r3, #3
 80157b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80157b8:	e008      	b.n	80157cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80157ba:	6839      	ldr	r1, [r7, #0]
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f001 fc94 	bl	80170ea <USBD_CtlError>
          ret = USBD_FAIL;
 80157c2:	2303      	movs	r3, #3
 80157c4:	75fb      	strb	r3, [r7, #23]
          break;
 80157c6:	e002      	b.n	80157ce <USBD_CDC_Setup+0x19e>
          break;
 80157c8:	bf00      	nop
 80157ca:	e008      	b.n	80157de <USBD_CDC_Setup+0x1ae>
          break;
 80157cc:	bf00      	nop
      }
      break;
 80157ce:	e006      	b.n	80157de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80157d0:	6839      	ldr	r1, [r7, #0]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f001 fc89 	bl	80170ea <USBD_CtlError>
      ret = USBD_FAIL;
 80157d8:	2303      	movs	r3, #3
 80157da:	75fb      	strb	r3, [r7, #23]
      break;
 80157dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80157de:	7dfb      	ldrb	r3, [r7, #23]
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3718      	adds	r7, #24
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	460b      	mov	r3, r1
 80157f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80157fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	32b0      	adds	r2, #176	; 0xb0
 8015806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d101      	bne.n	8015812 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801580e:	2303      	movs	r3, #3
 8015810:	e065      	b.n	80158de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	32b0      	adds	r2, #176	; 0xb0
 801581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015820:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015822:	78fb      	ldrb	r3, [r7, #3]
 8015824:	f003 020f 	and.w	r2, r3, #15
 8015828:	6879      	ldr	r1, [r7, #4]
 801582a:	4613      	mov	r3, r2
 801582c:	009b      	lsls	r3, r3, #2
 801582e:	4413      	add	r3, r2
 8015830:	009b      	lsls	r3, r3, #2
 8015832:	440b      	add	r3, r1
 8015834:	3318      	adds	r3, #24
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d02f      	beq.n	801589c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801583c:	78fb      	ldrb	r3, [r7, #3]
 801583e:	f003 020f 	and.w	r2, r3, #15
 8015842:	6879      	ldr	r1, [r7, #4]
 8015844:	4613      	mov	r3, r2
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	4413      	add	r3, r2
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	440b      	add	r3, r1
 801584e:	3318      	adds	r3, #24
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	78fb      	ldrb	r3, [r7, #3]
 8015854:	f003 010f 	and.w	r1, r3, #15
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	460b      	mov	r3, r1
 801585c:	00db      	lsls	r3, r3, #3
 801585e:	440b      	add	r3, r1
 8015860:	009b      	lsls	r3, r3, #2
 8015862:	4403      	add	r3, r0
 8015864:	3344      	adds	r3, #68	; 0x44
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	fbb2 f1f3 	udiv	r1, r2, r3
 801586c:	fb01 f303 	mul.w	r3, r1, r3
 8015870:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015872:	2b00      	cmp	r3, #0
 8015874:	d112      	bne.n	801589c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015876:	78fb      	ldrb	r3, [r7, #3]
 8015878:	f003 020f 	and.w	r2, r3, #15
 801587c:	6879      	ldr	r1, [r7, #4]
 801587e:	4613      	mov	r3, r2
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	4413      	add	r3, r2
 8015884:	009b      	lsls	r3, r3, #2
 8015886:	440b      	add	r3, r1
 8015888:	3318      	adds	r3, #24
 801588a:	2200      	movs	r2, #0
 801588c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801588e:	78f9      	ldrb	r1, [r7, #3]
 8015890:	2300      	movs	r3, #0
 8015892:	2200      	movs	r2, #0
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f005 f97a 	bl	801ab8e <USBD_LL_Transmit>
 801589a:	e01f      	b.n	80158dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	2200      	movs	r2, #0
 80158a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158aa:	687a      	ldr	r2, [r7, #4]
 80158ac:	33b0      	adds	r3, #176	; 0xb0
 80158ae:	009b      	lsls	r3, r3, #2
 80158b0:	4413      	add	r3, r2
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	691b      	ldr	r3, [r3, #16]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d010      	beq.n	80158dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158c0:	687a      	ldr	r2, [r7, #4]
 80158c2:	33b0      	adds	r3, #176	; 0xb0
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	4413      	add	r3, r2
 80158c8:	685b      	ldr	r3, [r3, #4]
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	68ba      	ldr	r2, [r7, #8]
 80158ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80158d2:	68ba      	ldr	r2, [r7, #8]
 80158d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80158d8:	78fa      	ldrb	r2, [r7, #3]
 80158da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80158dc:	2300      	movs	r3, #0
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3710      	adds	r7, #16
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}

080158e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80158e6:	b580      	push	{r7, lr}
 80158e8:	b084      	sub	sp, #16
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
 80158ee:	460b      	mov	r3, r1
 80158f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	32b0      	adds	r2, #176	; 0xb0
 80158fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015900:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	32b0      	adds	r2, #176	; 0xb0
 801590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d101      	bne.n	8015918 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015914:	2303      	movs	r3, #3
 8015916:	e01a      	b.n	801594e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015918:	78fb      	ldrb	r3, [r7, #3]
 801591a:	4619      	mov	r1, r3
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f005 f978 	bl	801ac12 <USBD_LL_GetRxDataSize>
 8015922:	4602      	mov	r2, r0
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	33b0      	adds	r3, #176	; 0xb0
 8015934:	009b      	lsls	r3, r3, #2
 8015936:	4413      	add	r3, r2
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	68fa      	ldr	r2, [r7, #12]
 801593e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015942:	68fa      	ldr	r2, [r7, #12]
 8015944:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015948:	4611      	mov	r1, r2
 801594a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801594c:	2300      	movs	r3, #0
}
 801594e:	4618      	mov	r0, r3
 8015950:	3710      	adds	r7, #16
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}

08015956 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b084      	sub	sp, #16
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	32b0      	adds	r2, #176	; 0xb0
 8015968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801596c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d101      	bne.n	8015978 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015974:	2303      	movs	r3, #3
 8015976:	e025      	b.n	80159c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	33b0      	adds	r3, #176	; 0xb0
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	4413      	add	r3, r2
 8015986:	685b      	ldr	r3, [r3, #4]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d01a      	beq.n	80159c2 <USBD_CDC_EP0_RxReady+0x6c>
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015992:	2bff      	cmp	r3, #255	; 0xff
 8015994:	d015      	beq.n	80159c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	33b0      	adds	r3, #176	; 0xb0
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	4413      	add	r3, r2
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	689b      	ldr	r3, [r3, #8]
 80159a8:	68fa      	ldr	r2, [r7, #12]
 80159aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80159ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80159b0:	68fa      	ldr	r2, [r7, #12]
 80159b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80159b6:	b292      	uxth	r2, r2
 80159b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	22ff      	movs	r2, #255	; 0xff
 80159be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80159c2:	2300      	movs	r3, #0
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3710      	adds	r7, #16
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b086      	sub	sp, #24
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80159d4:	2182      	movs	r1, #130	; 0x82
 80159d6:	4818      	ldr	r0, [pc, #96]	; (8015a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80159d8:	f000 fd4f 	bl	801647a <USBD_GetEpDesc>
 80159dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80159de:	2101      	movs	r1, #1
 80159e0:	4815      	ldr	r0, [pc, #84]	; (8015a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80159e2:	f000 fd4a 	bl	801647a <USBD_GetEpDesc>
 80159e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80159e8:	2181      	movs	r1, #129	; 0x81
 80159ea:	4813      	ldr	r0, [pc, #76]	; (8015a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80159ec:	f000 fd45 	bl	801647a <USBD_GetEpDesc>
 80159f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d002      	beq.n	80159fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	2210      	movs	r2, #16
 80159fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d006      	beq.n	8015a12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	2200      	movs	r2, #0
 8015a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a0c:	711a      	strb	r2, [r3, #4]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d006      	beq.n	8015a26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a20:	711a      	strb	r2, [r3, #4]
 8015a22:	2200      	movs	r2, #0
 8015a24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2243      	movs	r2, #67	; 0x43
 8015a2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015a2c:	4b02      	ldr	r3, [pc, #8]	; (8015a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015a2e:	4618      	mov	r0, r3
 8015a30:	3718      	adds	r7, #24
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd80      	pop	{r7, pc}
 8015a36:	bf00      	nop
 8015a38:	24000054 	.word	0x24000054

08015a3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b086      	sub	sp, #24
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015a44:	2182      	movs	r1, #130	; 0x82
 8015a46:	4818      	ldr	r0, [pc, #96]	; (8015aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015a48:	f000 fd17 	bl	801647a <USBD_GetEpDesc>
 8015a4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015a4e:	2101      	movs	r1, #1
 8015a50:	4815      	ldr	r0, [pc, #84]	; (8015aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015a52:	f000 fd12 	bl	801647a <USBD_GetEpDesc>
 8015a56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015a58:	2181      	movs	r1, #129	; 0x81
 8015a5a:	4813      	ldr	r0, [pc, #76]	; (8015aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015a5c:	f000 fd0d 	bl	801647a <USBD_GetEpDesc>
 8015a60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d002      	beq.n	8015a6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	2210      	movs	r2, #16
 8015a6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015a6e:	693b      	ldr	r3, [r7, #16]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d006      	beq.n	8015a82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015a74:	693b      	ldr	r3, [r7, #16]
 8015a76:	2200      	movs	r2, #0
 8015a78:	711a      	strb	r2, [r3, #4]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f042 0202 	orr.w	r2, r2, #2
 8015a80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d006      	beq.n	8015a96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	711a      	strb	r2, [r3, #4]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	f042 0202 	orr.w	r2, r2, #2
 8015a94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2243      	movs	r2, #67	; 0x43
 8015a9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015a9c:	4b02      	ldr	r3, [pc, #8]	; (8015aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3718      	adds	r7, #24
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	24000054 	.word	0x24000054

08015aac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b086      	sub	sp, #24
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ab4:	2182      	movs	r1, #130	; 0x82
 8015ab6:	4818      	ldr	r0, [pc, #96]	; (8015b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ab8:	f000 fcdf 	bl	801647a <USBD_GetEpDesc>
 8015abc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015abe:	2101      	movs	r1, #1
 8015ac0:	4815      	ldr	r0, [pc, #84]	; (8015b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ac2:	f000 fcda 	bl	801647a <USBD_GetEpDesc>
 8015ac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ac8:	2181      	movs	r1, #129	; 0x81
 8015aca:	4813      	ldr	r0, [pc, #76]	; (8015b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015acc:	f000 fcd5 	bl	801647a <USBD_GetEpDesc>
 8015ad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d002      	beq.n	8015ade <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	2210      	movs	r2, #16
 8015adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d006      	beq.n	8015af2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015aec:	711a      	strb	r2, [r3, #4]
 8015aee:	2200      	movs	r2, #0
 8015af0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d006      	beq.n	8015b06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	2200      	movs	r2, #0
 8015afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015b00:	711a      	strb	r2, [r3, #4]
 8015b02:	2200      	movs	r2, #0
 8015b04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2243      	movs	r2, #67	; 0x43
 8015b0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b0c:	4b02      	ldr	r3, [pc, #8]	; (8015b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3718      	adds	r7, #24
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	24000054 	.word	0x24000054

08015b1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b083      	sub	sp, #12
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	220a      	movs	r2, #10
 8015b28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015b2a:	4b03      	ldr	r3, [pc, #12]	; (8015b38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	370c      	adds	r7, #12
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	24000010 	.word	0x24000010

08015b3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d101      	bne.n	8015b50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015b4c:	2303      	movs	r3, #3
 8015b4e:	e009      	b.n	8015b64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b56:	687a      	ldr	r2, [r7, #4]
 8015b58:	33b0      	adds	r3, #176	; 0xb0
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	4413      	add	r3, r2
 8015b5e:	683a      	ldr	r2, [r7, #0]
 8015b60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015b62:	2300      	movs	r3, #0
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	370c      	adds	r7, #12
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr

08015b70 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015b70:	b480      	push	{r7}
 8015b72:	b087      	sub	sp, #28
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	60f8      	str	r0, [r7, #12]
 8015b78:	60b9      	str	r1, [r7, #8]
 8015b7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	32b0      	adds	r2, #176	; 0xb0
 8015b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b8a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d101      	bne.n	8015b96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015b92:	2303      	movs	r3, #3
 8015b94:	e008      	b.n	8015ba8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	68ba      	ldr	r2, [r7, #8]
 8015b9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	687a      	ldr	r2, [r7, #4]
 8015ba2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015ba6:	2300      	movs	r3, #0
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	371c      	adds	r7, #28
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr

08015bb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b085      	sub	sp, #20
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	32b0      	adds	r2, #176	; 0xb0
 8015bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d101      	bne.n	8015bd8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015bd4:	2303      	movs	r3, #3
 8015bd6:	e004      	b.n	8015be2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	683a      	ldr	r2, [r7, #0]
 8015bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015be0:	2300      	movs	r3, #0
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3714      	adds	r7, #20
 8015be6:	46bd      	mov	sp, r7
 8015be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bec:	4770      	bx	lr
	...

08015bf0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	32b0      	adds	r2, #176	; 0xb0
 8015c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c06:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d101      	bne.n	8015c16 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015c12:	2303      	movs	r3, #3
 8015c14:	e025      	b.n	8015c62 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d11f      	bne.n	8015c60 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	2201      	movs	r2, #1
 8015c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015c28:	4b10      	ldr	r3, [pc, #64]	; (8015c6c <USBD_CDC_TransmitPacket+0x7c>)
 8015c2a:	781b      	ldrb	r3, [r3, #0]
 8015c2c:	f003 020f 	and.w	r2, r3, #15
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	4613      	mov	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	4413      	add	r3, r2
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	4403      	add	r3, r0
 8015c42:	3318      	adds	r3, #24
 8015c44:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015c46:	4b09      	ldr	r3, [pc, #36]	; (8015c6c <USBD_CDC_TransmitPacket+0x7c>)
 8015c48:	7819      	ldrb	r1, [r3, #0]
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f004 ff99 	bl	801ab8e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3710      	adds	r7, #16
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	24000097 	.word	0x24000097

08015c70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b084      	sub	sp, #16
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	32b0      	adds	r2, #176	; 0xb0
 8015c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	32b0      	adds	r2, #176	; 0xb0
 8015c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d101      	bne.n	8015c9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015c9a:	2303      	movs	r3, #3
 8015c9c:	e018      	b.n	8015cd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	7c1b      	ldrb	r3, [r3, #16]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d10a      	bne.n	8015cbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015ca6:	4b0c      	ldr	r3, [pc, #48]	; (8015cd8 <USBD_CDC_ReceivePacket+0x68>)
 8015ca8:	7819      	ldrb	r1, [r3, #0]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f004 ff8b 	bl	801abd0 <USBD_LL_PrepareReceive>
 8015cba:	e008      	b.n	8015cce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015cbc:	4b06      	ldr	r3, [pc, #24]	; (8015cd8 <USBD_CDC_ReceivePacket+0x68>)
 8015cbe:	7819      	ldrb	r1, [r3, #0]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015cc6:	2340      	movs	r3, #64	; 0x40
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f004 ff81 	bl	801abd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015cce:	2300      	movs	r3, #0
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3710      	adds	r7, #16
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}
 8015cd8:	24000098 	.word	0x24000098

08015cdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d101      	bne.n	8015cf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015cf0:	2303      	movs	r3, #3
 8015cf2:	e01f      	b.n	8015d34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	2200      	movs	r2, #0
 8015d08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d003      	beq.n	8015d1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	68ba      	ldr	r2, [r7, #8]
 8015d16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	79fa      	ldrb	r2, [r7, #7]
 8015d26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f004 fdf5 	bl	801a918 <USBD_LL_Init>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3718      	adds	r7, #24
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d46:	2300      	movs	r3, #0
 8015d48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d101      	bne.n	8015d54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015d50:	2303      	movs	r3, #3
 8015d52:	e025      	b.n	8015da0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	32ae      	adds	r2, #174	; 0xae
 8015d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d00f      	beq.n	8015d90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	32ae      	adds	r2, #174	; 0xae
 8015d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d80:	f107 020e 	add.w	r2, r7, #14
 8015d84:	4610      	mov	r0, r2
 8015d86:	4798      	blx	r3
 8015d88:	4602      	mov	r2, r0
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015d96:	1c5a      	adds	r2, r3, #1
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015d9e:	2300      	movs	r3, #0
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3710      	adds	r7, #16
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b082      	sub	sp, #8
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f004 fe03 	bl	801a9bc <USBD_LL_Start>
 8015db6:	4603      	mov	r3, r0
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3708      	adds	r7, #8
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b083      	sub	sp, #12
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015dc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	370c      	adds	r7, #12
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd4:	4770      	bx	lr

08015dd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015dd6:	b580      	push	{r7, lr}
 8015dd8:	b084      	sub	sp, #16
 8015dda:	af00      	add	r7, sp, #0
 8015ddc:	6078      	str	r0, [r7, #4]
 8015dde:	460b      	mov	r3, r1
 8015de0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015de2:	2300      	movs	r3, #0
 8015de4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d009      	beq.n	8015e04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	78fa      	ldrb	r2, [r7, #3]
 8015dfa:	4611      	mov	r1, r2
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	4798      	blx	r3
 8015e00:	4603      	mov	r3, r0
 8015e02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}

08015e0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015e0e:	b580      	push	{r7, lr}
 8015e10:	b084      	sub	sp, #16
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
 8015e16:	460b      	mov	r3, r1
 8015e18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	78fa      	ldrb	r2, [r7, #3]
 8015e28:	4611      	mov	r1, r2
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	4798      	blx	r3
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d001      	beq.n	8015e38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015e34:	2303      	movs	r3, #3
 8015e36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b084      	sub	sp, #16
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	6078      	str	r0, [r7, #4]
 8015e4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015e52:	6839      	ldr	r1, [r7, #0]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f001 f90e 	bl	8017076 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015e68:	461a      	mov	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015e76:	f003 031f 	and.w	r3, r3, #31
 8015e7a:	2b02      	cmp	r3, #2
 8015e7c:	d01a      	beq.n	8015eb4 <USBD_LL_SetupStage+0x72>
 8015e7e:	2b02      	cmp	r3, #2
 8015e80:	d822      	bhi.n	8015ec8 <USBD_LL_SetupStage+0x86>
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d002      	beq.n	8015e8c <USBD_LL_SetupStage+0x4a>
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d00a      	beq.n	8015ea0 <USBD_LL_SetupStage+0x5e>
 8015e8a:	e01d      	b.n	8015ec8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015e92:	4619      	mov	r1, r3
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 fb65 	bl	8016564 <USBD_StdDevReq>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8015e9e:	e020      	b.n	8015ee2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f000 fbcd 	bl	8016648 <USBD_StdItfReq>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8015eb2:	e016      	b.n	8015ee2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015eba:	4619      	mov	r1, r3
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f000 fc2f 	bl	8016720 <USBD_StdEPReq>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8015ec6:	e00c      	b.n	8015ee2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015ece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	4619      	mov	r1, r3
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f004 fdd0 	bl	801aa7c <USBD_LL_StallEP>
 8015edc:	4603      	mov	r3, r0
 8015ede:	73fb      	strb	r3, [r7, #15]
      break;
 8015ee0:	bf00      	nop
  }

  return ret;
 8015ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3710      	adds	r7, #16
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}

08015eec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b086      	sub	sp, #24
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	60f8      	str	r0, [r7, #12]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	607a      	str	r2, [r7, #4]
 8015ef8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015efa:	2300      	movs	r3, #0
 8015efc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015efe:	7afb      	ldrb	r3, [r7, #11]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d16e      	bne.n	8015fe2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015f0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015f12:	2b03      	cmp	r3, #3
 8015f14:	f040 8098 	bne.w	8016048 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	689a      	ldr	r2, [r3, #8]
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d913      	bls.n	8015f4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	689a      	ldr	r2, [r3, #8]
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	1ad2      	subs	r2, r2, r3
 8015f2e:	693b      	ldr	r3, [r7, #16]
 8015f30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015f32:	693b      	ldr	r3, [r7, #16]
 8015f34:	68da      	ldr	r2, [r3, #12]
 8015f36:	693b      	ldr	r3, [r7, #16]
 8015f38:	689b      	ldr	r3, [r3, #8]
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	bf28      	it	cs
 8015f3e:	4613      	movcs	r3, r2
 8015f40:	461a      	mov	r2, r3
 8015f42:	6879      	ldr	r1, [r7, #4]
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f001 f98a 	bl	801725e <USBD_CtlContinueRx>
 8015f4a:	e07d      	b.n	8016048 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f52:	f003 031f 	and.w	r3, r3, #31
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d014      	beq.n	8015f84 <USBD_LL_DataOutStage+0x98>
 8015f5a:	2b02      	cmp	r3, #2
 8015f5c:	d81d      	bhi.n	8015f9a <USBD_LL_DataOutStage+0xae>
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d002      	beq.n	8015f68 <USBD_LL_DataOutStage+0x7c>
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d003      	beq.n	8015f6e <USBD_LL_DataOutStage+0x82>
 8015f66:	e018      	b.n	8015f9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	75bb      	strb	r3, [r7, #22]
            break;
 8015f6c:	e018      	b.n	8015fa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	4619      	mov	r1, r3
 8015f78:	68f8      	ldr	r0, [r7, #12]
 8015f7a:	f000 fa64 	bl	8016446 <USBD_CoreFindIF>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	75bb      	strb	r3, [r7, #22]
            break;
 8015f82:	e00d      	b.n	8015fa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	68f8      	ldr	r0, [r7, #12]
 8015f90:	f000 fa66 	bl	8016460 <USBD_CoreFindEP>
 8015f94:	4603      	mov	r3, r0
 8015f96:	75bb      	strb	r3, [r7, #22]
            break;
 8015f98:	e002      	b.n	8015fa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	75bb      	strb	r3, [r7, #22]
            break;
 8015f9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015fa0:	7dbb      	ldrb	r3, [r7, #22]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d119      	bne.n	8015fda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	2b03      	cmp	r3, #3
 8015fb0:	d113      	bne.n	8015fda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015fb2:	7dba      	ldrb	r2, [r7, #22]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	32ae      	adds	r2, #174	; 0xae
 8015fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fbc:	691b      	ldr	r3, [r3, #16]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d00b      	beq.n	8015fda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015fc2:	7dba      	ldrb	r2, [r7, #22]
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015fca:	7dba      	ldrb	r2, [r7, #22]
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	32ae      	adds	r2, #174	; 0xae
 8015fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fd4:	691b      	ldr	r3, [r3, #16]
 8015fd6:	68f8      	ldr	r0, [r7, #12]
 8015fd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f001 f950 	bl	8017280 <USBD_CtlSendStatus>
 8015fe0:	e032      	b.n	8016048 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015fe2:	7afb      	ldrb	r3, [r7, #11]
 8015fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fe8:	b2db      	uxtb	r3, r3
 8015fea:	4619      	mov	r1, r3
 8015fec:	68f8      	ldr	r0, [r7, #12]
 8015fee:	f000 fa37 	bl	8016460 <USBD_CoreFindEP>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ff6:	7dbb      	ldrb	r3, [r7, #22]
 8015ff8:	2bff      	cmp	r3, #255	; 0xff
 8015ffa:	d025      	beq.n	8016048 <USBD_LL_DataOutStage+0x15c>
 8015ffc:	7dbb      	ldrb	r3, [r7, #22]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d122      	bne.n	8016048 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b03      	cmp	r3, #3
 801600c:	d117      	bne.n	801603e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801600e:	7dba      	ldrb	r2, [r7, #22]
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	32ae      	adds	r2, #174	; 0xae
 8016014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016018:	699b      	ldr	r3, [r3, #24]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00f      	beq.n	801603e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801601e:	7dba      	ldrb	r2, [r7, #22]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016026:	7dba      	ldrb	r2, [r7, #22]
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	32ae      	adds	r2, #174	; 0xae
 801602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016030:	699b      	ldr	r3, [r3, #24]
 8016032:	7afa      	ldrb	r2, [r7, #11]
 8016034:	4611      	mov	r1, r2
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	4798      	blx	r3
 801603a:	4603      	mov	r3, r0
 801603c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801603e:	7dfb      	ldrb	r3, [r7, #23]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d001      	beq.n	8016048 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016044:	7dfb      	ldrb	r3, [r7, #23]
 8016046:	e000      	b.n	801604a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016048:	2300      	movs	r3, #0
}
 801604a:	4618      	mov	r0, r3
 801604c:	3718      	adds	r7, #24
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}

08016052 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016052:	b580      	push	{r7, lr}
 8016054:	b086      	sub	sp, #24
 8016056:	af00      	add	r7, sp, #0
 8016058:	60f8      	str	r0, [r7, #12]
 801605a:	460b      	mov	r3, r1
 801605c:	607a      	str	r2, [r7, #4]
 801605e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016060:	7afb      	ldrb	r3, [r7, #11]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d16f      	bne.n	8016146 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	3314      	adds	r3, #20
 801606a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016072:	2b02      	cmp	r3, #2
 8016074:	d15a      	bne.n	801612c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	689a      	ldr	r2, [r3, #8]
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	429a      	cmp	r2, r3
 8016080:	d914      	bls.n	80160ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	689a      	ldr	r2, [r3, #8]
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	68db      	ldr	r3, [r3, #12]
 801608a:	1ad2      	subs	r2, r2, r3
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016090:	693b      	ldr	r3, [r7, #16]
 8016092:	689b      	ldr	r3, [r3, #8]
 8016094:	461a      	mov	r2, r3
 8016096:	6879      	ldr	r1, [r7, #4]
 8016098:	68f8      	ldr	r0, [r7, #12]
 801609a:	f001 f8b2 	bl	8017202 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801609e:	2300      	movs	r3, #0
 80160a0:	2200      	movs	r2, #0
 80160a2:	2100      	movs	r1, #0
 80160a4:	68f8      	ldr	r0, [r7, #12]
 80160a6:	f004 fd93 	bl	801abd0 <USBD_LL_PrepareReceive>
 80160aa:	e03f      	b.n	801612c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80160ac:	693b      	ldr	r3, [r7, #16]
 80160ae:	68da      	ldr	r2, [r3, #12]
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	689b      	ldr	r3, [r3, #8]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d11c      	bne.n	80160f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	685a      	ldr	r2, [r3, #4]
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d316      	bcc.n	80160f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	685a      	ldr	r2, [r3, #4]
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d20f      	bcs.n	80160f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80160d2:	2200      	movs	r2, #0
 80160d4:	2100      	movs	r1, #0
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	f001 f893 	bl	8017202 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2200      	movs	r2, #0
 80160e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80160e4:	2300      	movs	r3, #0
 80160e6:	2200      	movs	r2, #0
 80160e8:	2100      	movs	r1, #0
 80160ea:	68f8      	ldr	r0, [r7, #12]
 80160ec:	f004 fd70 	bl	801abd0 <USBD_LL_PrepareReceive>
 80160f0:	e01c      	b.n	801612c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	2b03      	cmp	r3, #3
 80160fc:	d10f      	bne.n	801611e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016104:	68db      	ldr	r3, [r3, #12]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d009      	beq.n	801611e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2200      	movs	r2, #0
 801610e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	68f8      	ldr	r0, [r7, #12]
 801611c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801611e:	2180      	movs	r1, #128	; 0x80
 8016120:	68f8      	ldr	r0, [r7, #12]
 8016122:	f004 fcab 	bl	801aa7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016126:	68f8      	ldr	r0, [r7, #12]
 8016128:	f001 f8bd 	bl	80172a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d03a      	beq.n	80161ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016136:	68f8      	ldr	r0, [r7, #12]
 8016138:	f7ff fe42 	bl	8015dc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	2200      	movs	r2, #0
 8016140:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016144:	e032      	b.n	80161ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016146:	7afb      	ldrb	r3, [r7, #11]
 8016148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801614c:	b2db      	uxtb	r3, r3
 801614e:	4619      	mov	r1, r3
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f000 f985 	bl	8016460 <USBD_CoreFindEP>
 8016156:	4603      	mov	r3, r0
 8016158:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801615a:	7dfb      	ldrb	r3, [r7, #23]
 801615c:	2bff      	cmp	r3, #255	; 0xff
 801615e:	d025      	beq.n	80161ac <USBD_LL_DataInStage+0x15a>
 8016160:	7dfb      	ldrb	r3, [r7, #23]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d122      	bne.n	80161ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801616c:	b2db      	uxtb	r3, r3
 801616e:	2b03      	cmp	r3, #3
 8016170:	d11c      	bne.n	80161ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016172:	7dfa      	ldrb	r2, [r7, #23]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	32ae      	adds	r2, #174	; 0xae
 8016178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801617c:	695b      	ldr	r3, [r3, #20]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d014      	beq.n	80161ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016182:	7dfa      	ldrb	r2, [r7, #23]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801618a:	7dfa      	ldrb	r2, [r7, #23]
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	32ae      	adds	r2, #174	; 0xae
 8016190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016194:	695b      	ldr	r3, [r3, #20]
 8016196:	7afa      	ldrb	r2, [r7, #11]
 8016198:	4611      	mov	r1, r2
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	4798      	blx	r3
 801619e:	4603      	mov	r3, r0
 80161a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80161a2:	7dbb      	ldrb	r3, [r7, #22]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d001      	beq.n	80161ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80161a8:	7dbb      	ldrb	r3, [r7, #22]
 80161aa:	e000      	b.n	80161ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80161ac:	2300      	movs	r3, #0
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3718      	adds	r7, #24
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}

080161b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80161b6:	b580      	push	{r7, lr}
 80161b8:	b084      	sub	sp, #16
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80161be:	2300      	movs	r3, #0
 80161c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2201      	movs	r2, #1
 80161c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2200      	movs	r2, #0
 80161d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2200      	movs	r2, #0
 80161dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2200      	movs	r2, #0
 80161e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d014      	beq.n	801621c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00e      	beq.n	801621c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	687a      	ldr	r2, [r7, #4]
 8016208:	6852      	ldr	r2, [r2, #4]
 801620a:	b2d2      	uxtb	r2, r2
 801620c:	4611      	mov	r1, r2
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	4798      	blx	r3
 8016212:	4603      	mov	r3, r0
 8016214:	2b00      	cmp	r3, #0
 8016216:	d001      	beq.n	801621c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016218:	2303      	movs	r3, #3
 801621a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801621c:	2340      	movs	r3, #64	; 0x40
 801621e:	2200      	movs	r2, #0
 8016220:	2100      	movs	r1, #0
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f004 fbe5 	bl	801a9f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	2201      	movs	r2, #1
 801622c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2240      	movs	r2, #64	; 0x40
 8016234:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016238:	2340      	movs	r3, #64	; 0x40
 801623a:	2200      	movs	r2, #0
 801623c:	2180      	movs	r1, #128	; 0x80
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f004 fbd7 	bl	801a9f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2201      	movs	r2, #1
 8016248:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2240      	movs	r2, #64	; 0x40
 801624e:	621a      	str	r2, [r3, #32]

  return ret;
 8016250:	7bfb      	ldrb	r3, [r7, #15]
}
 8016252:	4618      	mov	r0, r3
 8016254:	3710      	adds	r7, #16
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801625a:	b480      	push	{r7}
 801625c:	b083      	sub	sp, #12
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	460b      	mov	r3, r1
 8016264:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	78fa      	ldrb	r2, [r7, #3]
 801626a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801626c:	2300      	movs	r3, #0
}
 801626e:	4618      	mov	r0, r3
 8016270:	370c      	adds	r7, #12
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr

0801627a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801627a:	b480      	push	{r7}
 801627c:	b083      	sub	sp, #12
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016288:	b2db      	uxtb	r3, r3
 801628a:	2b04      	cmp	r3, #4
 801628c:	d006      	beq.n	801629c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016294:	b2da      	uxtb	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2204      	movs	r2, #4
 80162a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80162a4:	2300      	movs	r3, #0
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	370c      	adds	r7, #12
 80162aa:	46bd      	mov	sp, r7
 80162ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b0:	4770      	bx	lr

080162b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80162b2:	b480      	push	{r7}
 80162b4:	b083      	sub	sp, #12
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	2b04      	cmp	r3, #4
 80162c4:	d106      	bne.n	80162d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80162cc:	b2da      	uxtb	r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80162d4:	2300      	movs	r3, #0
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	370c      	adds	r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr

080162e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b082      	sub	sp, #8
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b03      	cmp	r3, #3
 80162f4:	d110      	bne.n	8016318 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d00b      	beq.n	8016318 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016306:	69db      	ldr	r3, [r3, #28]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d005      	beq.n	8016318 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016312:	69db      	ldr	r3, [r3, #28]
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016318:	2300      	movs	r3, #0
}
 801631a:	4618      	mov	r0, r3
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}

08016322 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016322:	b580      	push	{r7, lr}
 8016324:	b082      	sub	sp, #8
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]
 801632a:	460b      	mov	r3, r1
 801632c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	32ae      	adds	r2, #174	; 0xae
 8016338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d101      	bne.n	8016344 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016340:	2303      	movs	r3, #3
 8016342:	e01c      	b.n	801637e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801634a:	b2db      	uxtb	r3, r3
 801634c:	2b03      	cmp	r3, #3
 801634e:	d115      	bne.n	801637c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	32ae      	adds	r2, #174	; 0xae
 801635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801635e:	6a1b      	ldr	r3, [r3, #32]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d00b      	beq.n	801637c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	32ae      	adds	r2, #174	; 0xae
 801636e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016372:	6a1b      	ldr	r3, [r3, #32]
 8016374:	78fa      	ldrb	r2, [r7, #3]
 8016376:	4611      	mov	r1, r2
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801637c:	2300      	movs	r3, #0
}
 801637e:	4618      	mov	r0, r3
 8016380:	3708      	adds	r7, #8
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}

08016386 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016386:	b580      	push	{r7, lr}
 8016388:	b082      	sub	sp, #8
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
 801638e:	460b      	mov	r3, r1
 8016390:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	32ae      	adds	r2, #174	; 0xae
 801639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d101      	bne.n	80163a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80163a4:	2303      	movs	r3, #3
 80163a6:	e01c      	b.n	80163e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	2b03      	cmp	r3, #3
 80163b2:	d115      	bne.n	80163e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	32ae      	adds	r2, #174	; 0xae
 80163be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d00b      	beq.n	80163e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	32ae      	adds	r2, #174	; 0xae
 80163d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163d8:	78fa      	ldrb	r2, [r7, #3]
 80163da:	4611      	mov	r1, r2
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80163e0:	2300      	movs	r3, #0
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}

080163ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80163ea:	b480      	push	{r7}
 80163ec:	b083      	sub	sp, #12
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80163f2:	2300      	movs	r3, #0
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	370c      	adds	r7, #12
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016408:	2300      	movs	r3, #0
 801640a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2201      	movs	r2, #1
 8016410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801641a:	2b00      	cmp	r3, #0
 801641c:	d00e      	beq.n	801643c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	6852      	ldr	r2, [r2, #4]
 801642a:	b2d2      	uxtb	r2, r2
 801642c:	4611      	mov	r1, r2
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	4798      	blx	r3
 8016432:	4603      	mov	r3, r0
 8016434:	2b00      	cmp	r3, #0
 8016436:	d001      	beq.n	801643c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016438:	2303      	movs	r3, #3
 801643a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801643c:	7bfb      	ldrb	r3, [r7, #15]
}
 801643e:	4618      	mov	r0, r3
 8016440:	3710      	adds	r7, #16
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}

08016446 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016446:	b480      	push	{r7}
 8016448:	b083      	sub	sp, #12
 801644a:	af00      	add	r7, sp, #0
 801644c:	6078      	str	r0, [r7, #4]
 801644e:	460b      	mov	r3, r1
 8016450:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016452:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016454:	4618      	mov	r0, r3
 8016456:	370c      	adds	r7, #12
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr

08016460 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	460b      	mov	r3, r1
 801646a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801646c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801646e:	4618      	mov	r0, r3
 8016470:	370c      	adds	r7, #12
 8016472:	46bd      	mov	sp, r7
 8016474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016478:	4770      	bx	lr

0801647a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801647a:	b580      	push	{r7, lr}
 801647c:	b086      	sub	sp, #24
 801647e:	af00      	add	r7, sp, #0
 8016480:	6078      	str	r0, [r7, #4]
 8016482:	460b      	mov	r3, r1
 8016484:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801648e:	2300      	movs	r3, #0
 8016490:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	885b      	ldrh	r3, [r3, #2]
 8016496:	b29a      	uxth	r2, r3
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	b29b      	uxth	r3, r3
 801649e:	429a      	cmp	r2, r3
 80164a0:	d920      	bls.n	80164e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80164aa:	e013      	b.n	80164d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80164ac:	f107 030a 	add.w	r3, r7, #10
 80164b0:	4619      	mov	r1, r3
 80164b2:	6978      	ldr	r0, [r7, #20]
 80164b4:	f000 f81b 	bl	80164ee <USBD_GetNextDesc>
 80164b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	785b      	ldrb	r3, [r3, #1]
 80164be:	2b05      	cmp	r3, #5
 80164c0:	d108      	bne.n	80164d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	789b      	ldrb	r3, [r3, #2]
 80164ca:	78fa      	ldrb	r2, [r7, #3]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d008      	beq.n	80164e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80164d0:	2300      	movs	r3, #0
 80164d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	885b      	ldrh	r3, [r3, #2]
 80164d8:	b29a      	uxth	r2, r3
 80164da:	897b      	ldrh	r3, [r7, #10]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d8e5      	bhi.n	80164ac <USBD_GetEpDesc+0x32>
 80164e0:	e000      	b.n	80164e4 <USBD_GetEpDesc+0x6a>
          break;
 80164e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80164e4:	693b      	ldr	r3, [r7, #16]
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3718      	adds	r7, #24
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80164ee:	b480      	push	{r7}
 80164f0:	b085      	sub	sp, #20
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	881a      	ldrh	r2, [r3, #0]
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	b29b      	uxth	r3, r3
 8016506:	4413      	add	r3, r2
 8016508:	b29a      	uxth	r2, r3
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	461a      	mov	r2, r3
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	4413      	add	r3, r2
 8016518:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801651a:	68fb      	ldr	r3, [r7, #12]
}
 801651c:	4618      	mov	r0, r3
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016526:	4770      	bx	lr

08016528 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016528:	b480      	push	{r7}
 801652a:	b087      	sub	sp, #28
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016534:	697b      	ldr	r3, [r7, #20]
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	3301      	adds	r3, #1
 801653e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016546:	8a3b      	ldrh	r3, [r7, #16]
 8016548:	021b      	lsls	r3, r3, #8
 801654a:	b21a      	sxth	r2, r3
 801654c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016550:	4313      	orrs	r3, r2
 8016552:	b21b      	sxth	r3, r3
 8016554:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016556:	89fb      	ldrh	r3, [r7, #14]
}
 8016558:	4618      	mov	r0, r3
 801655a:	371c      	adds	r7, #28
 801655c:	46bd      	mov	sp, r7
 801655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016562:	4770      	bx	lr

08016564 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b084      	sub	sp, #16
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801656e:	2300      	movs	r3, #0
 8016570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801657a:	2b40      	cmp	r3, #64	; 0x40
 801657c:	d005      	beq.n	801658a <USBD_StdDevReq+0x26>
 801657e:	2b40      	cmp	r3, #64	; 0x40
 8016580:	d857      	bhi.n	8016632 <USBD_StdDevReq+0xce>
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00f      	beq.n	80165a6 <USBD_StdDevReq+0x42>
 8016586:	2b20      	cmp	r3, #32
 8016588:	d153      	bne.n	8016632 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	32ae      	adds	r2, #174	; 0xae
 8016594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016598:	689b      	ldr	r3, [r3, #8]
 801659a:	6839      	ldr	r1, [r7, #0]
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	4798      	blx	r3
 80165a0:	4603      	mov	r3, r0
 80165a2:	73fb      	strb	r3, [r7, #15]
      break;
 80165a4:	e04a      	b.n	801663c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	785b      	ldrb	r3, [r3, #1]
 80165aa:	2b09      	cmp	r3, #9
 80165ac:	d83b      	bhi.n	8016626 <USBD_StdDevReq+0xc2>
 80165ae:	a201      	add	r2, pc, #4	; (adr r2, 80165b4 <USBD_StdDevReq+0x50>)
 80165b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b4:	08016609 	.word	0x08016609
 80165b8:	0801661d 	.word	0x0801661d
 80165bc:	08016627 	.word	0x08016627
 80165c0:	08016613 	.word	0x08016613
 80165c4:	08016627 	.word	0x08016627
 80165c8:	080165e7 	.word	0x080165e7
 80165cc:	080165dd 	.word	0x080165dd
 80165d0:	08016627 	.word	0x08016627
 80165d4:	080165ff 	.word	0x080165ff
 80165d8:	080165f1 	.word	0x080165f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80165dc:	6839      	ldr	r1, [r7, #0]
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f000 fa3c 	bl	8016a5c <USBD_GetDescriptor>
          break;
 80165e4:	e024      	b.n	8016630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80165e6:	6839      	ldr	r1, [r7, #0]
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	f000 fba1 	bl	8016d30 <USBD_SetAddress>
          break;
 80165ee:	e01f      	b.n	8016630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80165f0:	6839      	ldr	r1, [r7, #0]
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f000 fbe0 	bl	8016db8 <USBD_SetConfig>
 80165f8:	4603      	mov	r3, r0
 80165fa:	73fb      	strb	r3, [r7, #15]
          break;
 80165fc:	e018      	b.n	8016630 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80165fe:	6839      	ldr	r1, [r7, #0]
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f000 fc83 	bl	8016f0c <USBD_GetConfig>
          break;
 8016606:	e013      	b.n	8016630 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fcb4 	bl	8016f78 <USBD_GetStatus>
          break;
 8016610:	e00e      	b.n	8016630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016612:	6839      	ldr	r1, [r7, #0]
 8016614:	6878      	ldr	r0, [r7, #4]
 8016616:	f000 fce3 	bl	8016fe0 <USBD_SetFeature>
          break;
 801661a:	e009      	b.n	8016630 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801661c:	6839      	ldr	r1, [r7, #0]
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f000 fd07 	bl	8017032 <USBD_ClrFeature>
          break;
 8016624:	e004      	b.n	8016630 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016626:	6839      	ldr	r1, [r7, #0]
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 fd5e 	bl	80170ea <USBD_CtlError>
          break;
 801662e:	bf00      	nop
      }
      break;
 8016630:	e004      	b.n	801663c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016632:	6839      	ldr	r1, [r7, #0]
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f000 fd58 	bl	80170ea <USBD_CtlError>
      break;
 801663a:	bf00      	nop
  }

  return ret;
 801663c:	7bfb      	ldrb	r3, [r7, #15]
}
 801663e:	4618      	mov	r0, r3
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop

08016648 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016652:	2300      	movs	r3, #0
 8016654:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801665e:	2b40      	cmp	r3, #64	; 0x40
 8016660:	d005      	beq.n	801666e <USBD_StdItfReq+0x26>
 8016662:	2b40      	cmp	r3, #64	; 0x40
 8016664:	d852      	bhi.n	801670c <USBD_StdItfReq+0xc4>
 8016666:	2b00      	cmp	r3, #0
 8016668:	d001      	beq.n	801666e <USBD_StdItfReq+0x26>
 801666a:	2b20      	cmp	r3, #32
 801666c:	d14e      	bne.n	801670c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016674:	b2db      	uxtb	r3, r3
 8016676:	3b01      	subs	r3, #1
 8016678:	2b02      	cmp	r3, #2
 801667a:	d840      	bhi.n	80166fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	889b      	ldrh	r3, [r3, #4]
 8016680:	b2db      	uxtb	r3, r3
 8016682:	2b01      	cmp	r3, #1
 8016684:	d836      	bhi.n	80166f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	889b      	ldrh	r3, [r3, #4]
 801668a:	b2db      	uxtb	r3, r3
 801668c:	4619      	mov	r1, r3
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f7ff fed9 	bl	8016446 <USBD_CoreFindIF>
 8016694:	4603      	mov	r3, r0
 8016696:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016698:	7bbb      	ldrb	r3, [r7, #14]
 801669a:	2bff      	cmp	r3, #255	; 0xff
 801669c:	d01d      	beq.n	80166da <USBD_StdItfReq+0x92>
 801669e:	7bbb      	ldrb	r3, [r7, #14]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d11a      	bne.n	80166da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80166a4:	7bba      	ldrb	r2, [r7, #14]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	32ae      	adds	r2, #174	; 0xae
 80166aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166ae:	689b      	ldr	r3, [r3, #8]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d00f      	beq.n	80166d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80166b4:	7bba      	ldrb	r2, [r7, #14]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80166bc:	7bba      	ldrb	r2, [r7, #14]
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	32ae      	adds	r2, #174	; 0xae
 80166c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166c6:	689b      	ldr	r3, [r3, #8]
 80166c8:	6839      	ldr	r1, [r7, #0]
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	4798      	blx	r3
 80166ce:	4603      	mov	r3, r0
 80166d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80166d2:	e004      	b.n	80166de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80166d4:	2303      	movs	r3, #3
 80166d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80166d8:	e001      	b.n	80166de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80166da:	2303      	movs	r3, #3
 80166dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	88db      	ldrh	r3, [r3, #6]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d110      	bne.n	8016708 <USBD_StdItfReq+0xc0>
 80166e6:	7bfb      	ldrb	r3, [r7, #15]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d10d      	bne.n	8016708 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f000 fdc7 	bl	8017280 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80166f2:	e009      	b.n	8016708 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80166f4:	6839      	ldr	r1, [r7, #0]
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f000 fcf7 	bl	80170ea <USBD_CtlError>
          break;
 80166fc:	e004      	b.n	8016708 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80166fe:	6839      	ldr	r1, [r7, #0]
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	f000 fcf2 	bl	80170ea <USBD_CtlError>
          break;
 8016706:	e000      	b.n	801670a <USBD_StdItfReq+0xc2>
          break;
 8016708:	bf00      	nop
      }
      break;
 801670a:	e004      	b.n	8016716 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801670c:	6839      	ldr	r1, [r7, #0]
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f000 fceb 	bl	80170ea <USBD_CtlError>
      break;
 8016714:	bf00      	nop
  }

  return ret;
 8016716:	7bfb      	ldrb	r3, [r7, #15]
}
 8016718:	4618      	mov	r0, r3
 801671a:	3710      	adds	r7, #16
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}

08016720 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801672a:	2300      	movs	r3, #0
 801672c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	889b      	ldrh	r3, [r3, #4]
 8016732:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801673c:	2b40      	cmp	r3, #64	; 0x40
 801673e:	d007      	beq.n	8016750 <USBD_StdEPReq+0x30>
 8016740:	2b40      	cmp	r3, #64	; 0x40
 8016742:	f200 817f 	bhi.w	8016a44 <USBD_StdEPReq+0x324>
 8016746:	2b00      	cmp	r3, #0
 8016748:	d02a      	beq.n	80167a0 <USBD_StdEPReq+0x80>
 801674a:	2b20      	cmp	r3, #32
 801674c:	f040 817a 	bne.w	8016a44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016750:	7bbb      	ldrb	r3, [r7, #14]
 8016752:	4619      	mov	r1, r3
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f7ff fe83 	bl	8016460 <USBD_CoreFindEP>
 801675a:	4603      	mov	r3, r0
 801675c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801675e:	7b7b      	ldrb	r3, [r7, #13]
 8016760:	2bff      	cmp	r3, #255	; 0xff
 8016762:	f000 8174 	beq.w	8016a4e <USBD_StdEPReq+0x32e>
 8016766:	7b7b      	ldrb	r3, [r7, #13]
 8016768:	2b00      	cmp	r3, #0
 801676a:	f040 8170 	bne.w	8016a4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801676e:	7b7a      	ldrb	r2, [r7, #13]
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016776:	7b7a      	ldrb	r2, [r7, #13]
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	32ae      	adds	r2, #174	; 0xae
 801677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016780:	689b      	ldr	r3, [r3, #8]
 8016782:	2b00      	cmp	r3, #0
 8016784:	f000 8163 	beq.w	8016a4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016788:	7b7a      	ldrb	r2, [r7, #13]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	32ae      	adds	r2, #174	; 0xae
 801678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	6839      	ldr	r1, [r7, #0]
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	4798      	blx	r3
 801679a:	4603      	mov	r3, r0
 801679c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801679e:	e156      	b.n	8016a4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	785b      	ldrb	r3, [r3, #1]
 80167a4:	2b03      	cmp	r3, #3
 80167a6:	d008      	beq.n	80167ba <USBD_StdEPReq+0x9a>
 80167a8:	2b03      	cmp	r3, #3
 80167aa:	f300 8145 	bgt.w	8016a38 <USBD_StdEPReq+0x318>
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	f000 809b 	beq.w	80168ea <USBD_StdEPReq+0x1ca>
 80167b4:	2b01      	cmp	r3, #1
 80167b6:	d03c      	beq.n	8016832 <USBD_StdEPReq+0x112>
 80167b8:	e13e      	b.n	8016a38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	2b02      	cmp	r3, #2
 80167c4:	d002      	beq.n	80167cc <USBD_StdEPReq+0xac>
 80167c6:	2b03      	cmp	r3, #3
 80167c8:	d016      	beq.n	80167f8 <USBD_StdEPReq+0xd8>
 80167ca:	e02c      	b.n	8016826 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80167cc:	7bbb      	ldrb	r3, [r7, #14]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d00d      	beq.n	80167ee <USBD_StdEPReq+0xce>
 80167d2:	7bbb      	ldrb	r3, [r7, #14]
 80167d4:	2b80      	cmp	r3, #128	; 0x80
 80167d6:	d00a      	beq.n	80167ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80167d8:	7bbb      	ldrb	r3, [r7, #14]
 80167da:	4619      	mov	r1, r3
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f004 f94d 	bl	801aa7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80167e2:	2180      	movs	r1, #128	; 0x80
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f004 f949 	bl	801aa7c <USBD_LL_StallEP>
 80167ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80167ec:	e020      	b.n	8016830 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80167ee:	6839      	ldr	r1, [r7, #0]
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f000 fc7a 	bl	80170ea <USBD_CtlError>
              break;
 80167f6:	e01b      	b.n	8016830 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	885b      	ldrh	r3, [r3, #2]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d10e      	bne.n	801681e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016800:	7bbb      	ldrb	r3, [r7, #14]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d00b      	beq.n	801681e <USBD_StdEPReq+0xfe>
 8016806:	7bbb      	ldrb	r3, [r7, #14]
 8016808:	2b80      	cmp	r3, #128	; 0x80
 801680a:	d008      	beq.n	801681e <USBD_StdEPReq+0xfe>
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	88db      	ldrh	r3, [r3, #6]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d104      	bne.n	801681e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016814:	7bbb      	ldrb	r3, [r7, #14]
 8016816:	4619      	mov	r1, r3
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f004 f92f 	bl	801aa7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 fd2e 	bl	8017280 <USBD_CtlSendStatus>

              break;
 8016824:	e004      	b.n	8016830 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016826:	6839      	ldr	r1, [r7, #0]
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f000 fc5e 	bl	80170ea <USBD_CtlError>
              break;
 801682e:	bf00      	nop
          }
          break;
 8016830:	e107      	b.n	8016a42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016838:	b2db      	uxtb	r3, r3
 801683a:	2b02      	cmp	r3, #2
 801683c:	d002      	beq.n	8016844 <USBD_StdEPReq+0x124>
 801683e:	2b03      	cmp	r3, #3
 8016840:	d016      	beq.n	8016870 <USBD_StdEPReq+0x150>
 8016842:	e04b      	b.n	80168dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016844:	7bbb      	ldrb	r3, [r7, #14]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d00d      	beq.n	8016866 <USBD_StdEPReq+0x146>
 801684a:	7bbb      	ldrb	r3, [r7, #14]
 801684c:	2b80      	cmp	r3, #128	; 0x80
 801684e:	d00a      	beq.n	8016866 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016850:	7bbb      	ldrb	r3, [r7, #14]
 8016852:	4619      	mov	r1, r3
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f004 f911 	bl	801aa7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801685a:	2180      	movs	r1, #128	; 0x80
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	f004 f90d 	bl	801aa7c <USBD_LL_StallEP>
 8016862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016864:	e040      	b.n	80168e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016866:	6839      	ldr	r1, [r7, #0]
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f000 fc3e 	bl	80170ea <USBD_CtlError>
              break;
 801686e:	e03b      	b.n	80168e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	885b      	ldrh	r3, [r3, #2]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d136      	bne.n	80168e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016878:	7bbb      	ldrb	r3, [r7, #14]
 801687a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801687e:	2b00      	cmp	r3, #0
 8016880:	d004      	beq.n	801688c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016882:	7bbb      	ldrb	r3, [r7, #14]
 8016884:	4619      	mov	r1, r3
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f004 f917 	bl	801aaba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 fcf7 	bl	8017280 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016892:	7bbb      	ldrb	r3, [r7, #14]
 8016894:	4619      	mov	r1, r3
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7ff fde2 	bl	8016460 <USBD_CoreFindEP>
 801689c:	4603      	mov	r3, r0
 801689e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80168a0:	7b7b      	ldrb	r3, [r7, #13]
 80168a2:	2bff      	cmp	r3, #255	; 0xff
 80168a4:	d01f      	beq.n	80168e6 <USBD_StdEPReq+0x1c6>
 80168a6:	7b7b      	ldrb	r3, [r7, #13]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d11c      	bne.n	80168e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80168ac:	7b7a      	ldrb	r2, [r7, #13]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80168b4:	7b7a      	ldrb	r2, [r7, #13]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	32ae      	adds	r2, #174	; 0xae
 80168ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168be:	689b      	ldr	r3, [r3, #8]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d010      	beq.n	80168e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80168c4:	7b7a      	ldrb	r2, [r7, #13]
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	32ae      	adds	r2, #174	; 0xae
 80168ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168ce:	689b      	ldr	r3, [r3, #8]
 80168d0:	6839      	ldr	r1, [r7, #0]
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	4798      	blx	r3
 80168d6:	4603      	mov	r3, r0
 80168d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80168da:	e004      	b.n	80168e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80168dc:	6839      	ldr	r1, [r7, #0]
 80168de:	6878      	ldr	r0, [r7, #4]
 80168e0:	f000 fc03 	bl	80170ea <USBD_CtlError>
              break;
 80168e4:	e000      	b.n	80168e8 <USBD_StdEPReq+0x1c8>
              break;
 80168e6:	bf00      	nop
          }
          break;
 80168e8:	e0ab      	b.n	8016a42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168f0:	b2db      	uxtb	r3, r3
 80168f2:	2b02      	cmp	r3, #2
 80168f4:	d002      	beq.n	80168fc <USBD_StdEPReq+0x1dc>
 80168f6:	2b03      	cmp	r3, #3
 80168f8:	d032      	beq.n	8016960 <USBD_StdEPReq+0x240>
 80168fa:	e097      	b.n	8016a2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168fc:	7bbb      	ldrb	r3, [r7, #14]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d007      	beq.n	8016912 <USBD_StdEPReq+0x1f2>
 8016902:	7bbb      	ldrb	r3, [r7, #14]
 8016904:	2b80      	cmp	r3, #128	; 0x80
 8016906:	d004      	beq.n	8016912 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016908:	6839      	ldr	r1, [r7, #0]
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f000 fbed 	bl	80170ea <USBD_CtlError>
                break;
 8016910:	e091      	b.n	8016a36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016916:	2b00      	cmp	r3, #0
 8016918:	da0b      	bge.n	8016932 <USBD_StdEPReq+0x212>
 801691a:	7bbb      	ldrb	r3, [r7, #14]
 801691c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016920:	4613      	mov	r3, r2
 8016922:	009b      	lsls	r3, r3, #2
 8016924:	4413      	add	r3, r2
 8016926:	009b      	lsls	r3, r3, #2
 8016928:	3310      	adds	r3, #16
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	4413      	add	r3, r2
 801692e:	3304      	adds	r3, #4
 8016930:	e00b      	b.n	801694a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016932:	7bbb      	ldrb	r3, [r7, #14]
 8016934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016938:	4613      	mov	r3, r2
 801693a:	009b      	lsls	r3, r3, #2
 801693c:	4413      	add	r3, r2
 801693e:	009b      	lsls	r3, r3, #2
 8016940:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	4413      	add	r3, r2
 8016948:	3304      	adds	r3, #4
 801694a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	2200      	movs	r2, #0
 8016950:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	2202      	movs	r2, #2
 8016956:	4619      	mov	r1, r3
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 fc37 	bl	80171cc <USBD_CtlSendData>
              break;
 801695e:	e06a      	b.n	8016a36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016964:	2b00      	cmp	r3, #0
 8016966:	da11      	bge.n	801698c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016968:	7bbb      	ldrb	r3, [r7, #14]
 801696a:	f003 020f 	and.w	r2, r3, #15
 801696e:	6879      	ldr	r1, [r7, #4]
 8016970:	4613      	mov	r3, r2
 8016972:	009b      	lsls	r3, r3, #2
 8016974:	4413      	add	r3, r2
 8016976:	009b      	lsls	r3, r3, #2
 8016978:	440b      	add	r3, r1
 801697a:	3324      	adds	r3, #36	; 0x24
 801697c:	881b      	ldrh	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d117      	bne.n	80169b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f000 fbb0 	bl	80170ea <USBD_CtlError>
                  break;
 801698a:	e054      	b.n	8016a36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801698c:	7bbb      	ldrb	r3, [r7, #14]
 801698e:	f003 020f 	and.w	r2, r3, #15
 8016992:	6879      	ldr	r1, [r7, #4]
 8016994:	4613      	mov	r3, r2
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	4413      	add	r3, r2
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	440b      	add	r3, r1
 801699e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80169a2:	881b      	ldrh	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d104      	bne.n	80169b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80169a8:	6839      	ldr	r1, [r7, #0]
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f000 fb9d 	bl	80170ea <USBD_CtlError>
                  break;
 80169b0:	e041      	b.n	8016a36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	da0b      	bge.n	80169d2 <USBD_StdEPReq+0x2b2>
 80169ba:	7bbb      	ldrb	r3, [r7, #14]
 80169bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169c0:	4613      	mov	r3, r2
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	4413      	add	r3, r2
 80169c6:	009b      	lsls	r3, r3, #2
 80169c8:	3310      	adds	r3, #16
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	4413      	add	r3, r2
 80169ce:	3304      	adds	r3, #4
 80169d0:	e00b      	b.n	80169ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80169d2:	7bbb      	ldrb	r3, [r7, #14]
 80169d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169d8:	4613      	mov	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	4413      	add	r3, r2
 80169de:	009b      	lsls	r3, r3, #2
 80169e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	4413      	add	r3, r2
 80169e8:	3304      	adds	r3, #4
 80169ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80169ec:	7bbb      	ldrb	r3, [r7, #14]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d002      	beq.n	80169f8 <USBD_StdEPReq+0x2d8>
 80169f2:	7bbb      	ldrb	r3, [r7, #14]
 80169f4:	2b80      	cmp	r3, #128	; 0x80
 80169f6:	d103      	bne.n	8016a00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	2200      	movs	r2, #0
 80169fc:	601a      	str	r2, [r3, #0]
 80169fe:	e00e      	b.n	8016a1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016a00:	7bbb      	ldrb	r3, [r7, #14]
 8016a02:	4619      	mov	r1, r3
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f004 f877 	bl	801aaf8 <USBD_LL_IsStallEP>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d003      	beq.n	8016a18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	2201      	movs	r2, #1
 8016a14:	601a      	str	r2, [r3, #0]
 8016a16:	e002      	b.n	8016a1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	2202      	movs	r2, #2
 8016a22:	4619      	mov	r1, r3
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 fbd1 	bl	80171cc <USBD_CtlSendData>
              break;
 8016a2a:	e004      	b.n	8016a36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016a2c:	6839      	ldr	r1, [r7, #0]
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fb5b 	bl	80170ea <USBD_CtlError>
              break;
 8016a34:	bf00      	nop
          }
          break;
 8016a36:	e004      	b.n	8016a42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016a38:	6839      	ldr	r1, [r7, #0]
 8016a3a:	6878      	ldr	r0, [r7, #4]
 8016a3c:	f000 fb55 	bl	80170ea <USBD_CtlError>
          break;
 8016a40:	bf00      	nop
      }
      break;
 8016a42:	e005      	b.n	8016a50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016a44:	6839      	ldr	r1, [r7, #0]
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 fb4f 	bl	80170ea <USBD_CtlError>
      break;
 8016a4c:	e000      	b.n	8016a50 <USBD_StdEPReq+0x330>
      break;
 8016a4e:	bf00      	nop
  }

  return ret;
 8016a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	3710      	adds	r7, #16
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}
	...

08016a5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016a66:	2300      	movs	r3, #0
 8016a68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	885b      	ldrh	r3, [r3, #2]
 8016a76:	0a1b      	lsrs	r3, r3, #8
 8016a78:	b29b      	uxth	r3, r3
 8016a7a:	3b01      	subs	r3, #1
 8016a7c:	2b06      	cmp	r3, #6
 8016a7e:	f200 8128 	bhi.w	8016cd2 <USBD_GetDescriptor+0x276>
 8016a82:	a201      	add	r2, pc, #4	; (adr r2, 8016a88 <USBD_GetDescriptor+0x2c>)
 8016a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a88:	08016aa5 	.word	0x08016aa5
 8016a8c:	08016abd 	.word	0x08016abd
 8016a90:	08016afd 	.word	0x08016afd
 8016a94:	08016cd3 	.word	0x08016cd3
 8016a98:	08016cd3 	.word	0x08016cd3
 8016a9c:	08016c73 	.word	0x08016c73
 8016aa0:	08016c9f 	.word	0x08016c9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	7c12      	ldrb	r2, [r2, #16]
 8016ab0:	f107 0108 	add.w	r1, r7, #8
 8016ab4:	4610      	mov	r0, r2
 8016ab6:	4798      	blx	r3
 8016ab8:	60f8      	str	r0, [r7, #12]
      break;
 8016aba:	e112      	b.n	8016ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	7c1b      	ldrb	r3, [r3, #16]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d10d      	bne.n	8016ae0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016acc:	f107 0208 	add.w	r2, r7, #8
 8016ad0:	4610      	mov	r0, r2
 8016ad2:	4798      	blx	r3
 8016ad4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	3301      	adds	r3, #1
 8016ada:	2202      	movs	r2, #2
 8016adc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016ade:	e100      	b.n	8016ce2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae8:	f107 0208 	add.w	r2, r7, #8
 8016aec:	4610      	mov	r0, r2
 8016aee:	4798      	blx	r3
 8016af0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	3301      	adds	r3, #1
 8016af6:	2202      	movs	r2, #2
 8016af8:	701a      	strb	r2, [r3, #0]
      break;
 8016afa:	e0f2      	b.n	8016ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	885b      	ldrh	r3, [r3, #2]
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	2b05      	cmp	r3, #5
 8016b04:	f200 80ac 	bhi.w	8016c60 <USBD_GetDescriptor+0x204>
 8016b08:	a201      	add	r2, pc, #4	; (adr r2, 8016b10 <USBD_GetDescriptor+0xb4>)
 8016b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b0e:	bf00      	nop
 8016b10:	08016b29 	.word	0x08016b29
 8016b14:	08016b5d 	.word	0x08016b5d
 8016b18:	08016b91 	.word	0x08016b91
 8016b1c:	08016bc5 	.word	0x08016bc5
 8016b20:	08016bf9 	.word	0x08016bf9
 8016b24:	08016c2d 	.word	0x08016c2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b2e:	685b      	ldr	r3, [r3, #4]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d00b      	beq.n	8016b4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b3a:	685b      	ldr	r3, [r3, #4]
 8016b3c:	687a      	ldr	r2, [r7, #4]
 8016b3e:	7c12      	ldrb	r2, [r2, #16]
 8016b40:	f107 0108 	add.w	r1, r7, #8
 8016b44:	4610      	mov	r0, r2
 8016b46:	4798      	blx	r3
 8016b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016b4a:	e091      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016b4c:	6839      	ldr	r1, [r7, #0]
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f000 facb 	bl	80170ea <USBD_CtlError>
            err++;
 8016b54:	7afb      	ldrb	r3, [r7, #11]
 8016b56:	3301      	adds	r3, #1
 8016b58:	72fb      	strb	r3, [r7, #11]
          break;
 8016b5a:	e089      	b.n	8016c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b62:	689b      	ldr	r3, [r3, #8]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d00b      	beq.n	8016b80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b6e:	689b      	ldr	r3, [r3, #8]
 8016b70:	687a      	ldr	r2, [r7, #4]
 8016b72:	7c12      	ldrb	r2, [r2, #16]
 8016b74:	f107 0108 	add.w	r1, r7, #8
 8016b78:	4610      	mov	r0, r2
 8016b7a:	4798      	blx	r3
 8016b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016b7e:	e077      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016b80:	6839      	ldr	r1, [r7, #0]
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f000 fab1 	bl	80170ea <USBD_CtlError>
            err++;
 8016b88:	7afb      	ldrb	r3, [r7, #11]
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8016b8e:	e06f      	b.n	8016c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b96:	68db      	ldr	r3, [r3, #12]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d00b      	beq.n	8016bb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ba2:	68db      	ldr	r3, [r3, #12]
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	7c12      	ldrb	r2, [r2, #16]
 8016ba8:	f107 0108 	add.w	r1, r7, #8
 8016bac:	4610      	mov	r0, r2
 8016bae:	4798      	blx	r3
 8016bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016bb2:	e05d      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016bb4:	6839      	ldr	r1, [r7, #0]
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f000 fa97 	bl	80170ea <USBD_CtlError>
            err++;
 8016bbc:	7afb      	ldrb	r3, [r7, #11]
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8016bc2:	e055      	b.n	8016c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bca:	691b      	ldr	r3, [r3, #16]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d00b      	beq.n	8016be8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bd6:	691b      	ldr	r3, [r3, #16]
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	7c12      	ldrb	r2, [r2, #16]
 8016bdc:	f107 0108 	add.w	r1, r7, #8
 8016be0:	4610      	mov	r0, r2
 8016be2:	4798      	blx	r3
 8016be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016be6:	e043      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016be8:	6839      	ldr	r1, [r7, #0]
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f000 fa7d 	bl	80170ea <USBD_CtlError>
            err++;
 8016bf0:	7afb      	ldrb	r3, [r7, #11]
 8016bf2:	3301      	adds	r3, #1
 8016bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8016bf6:	e03b      	b.n	8016c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bfe:	695b      	ldr	r3, [r3, #20]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d00b      	beq.n	8016c1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c0a:	695b      	ldr	r3, [r3, #20]
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	7c12      	ldrb	r2, [r2, #16]
 8016c10:	f107 0108 	add.w	r1, r7, #8
 8016c14:	4610      	mov	r0, r2
 8016c16:	4798      	blx	r3
 8016c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c1a:	e029      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c1c:	6839      	ldr	r1, [r7, #0]
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f000 fa63 	bl	80170ea <USBD_CtlError>
            err++;
 8016c24:	7afb      	ldrb	r3, [r7, #11]
 8016c26:	3301      	adds	r3, #1
 8016c28:	72fb      	strb	r3, [r7, #11]
          break;
 8016c2a:	e021      	b.n	8016c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c32:	699b      	ldr	r3, [r3, #24]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d00b      	beq.n	8016c50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c3e:	699b      	ldr	r3, [r3, #24]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	7c12      	ldrb	r2, [r2, #16]
 8016c44:	f107 0108 	add.w	r1, r7, #8
 8016c48:	4610      	mov	r0, r2
 8016c4a:	4798      	blx	r3
 8016c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c4e:	e00f      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c50:	6839      	ldr	r1, [r7, #0]
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f000 fa49 	bl	80170ea <USBD_CtlError>
            err++;
 8016c58:	7afb      	ldrb	r3, [r7, #11]
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c5e:	e007      	b.n	8016c70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016c60:	6839      	ldr	r1, [r7, #0]
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f000 fa41 	bl	80170ea <USBD_CtlError>
          err++;
 8016c68:	7afb      	ldrb	r3, [r7, #11]
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016c6e:	bf00      	nop
      }
      break;
 8016c70:	e037      	b.n	8016ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	7c1b      	ldrb	r3, [r3, #16]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d109      	bne.n	8016c8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c82:	f107 0208 	add.w	r2, r7, #8
 8016c86:	4610      	mov	r0, r2
 8016c88:	4798      	blx	r3
 8016c8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016c8c:	e029      	b.n	8016ce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016c8e:	6839      	ldr	r1, [r7, #0]
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f000 fa2a 	bl	80170ea <USBD_CtlError>
        err++;
 8016c96:	7afb      	ldrb	r3, [r7, #11]
 8016c98:	3301      	adds	r3, #1
 8016c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8016c9c:	e021      	b.n	8016ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	7c1b      	ldrb	r3, [r3, #16]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d10d      	bne.n	8016cc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016cae:	f107 0208 	add.w	r2, r7, #8
 8016cb2:	4610      	mov	r0, r2
 8016cb4:	4798      	blx	r3
 8016cb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	2207      	movs	r2, #7
 8016cbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016cc0:	e00f      	b.n	8016ce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f000 fa10 	bl	80170ea <USBD_CtlError>
        err++;
 8016cca:	7afb      	ldrb	r3, [r7, #11]
 8016ccc:	3301      	adds	r3, #1
 8016cce:	72fb      	strb	r3, [r7, #11]
      break;
 8016cd0:	e007      	b.n	8016ce2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016cd2:	6839      	ldr	r1, [r7, #0]
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f000 fa08 	bl	80170ea <USBD_CtlError>
      err++;
 8016cda:	7afb      	ldrb	r3, [r7, #11]
 8016cdc:	3301      	adds	r3, #1
 8016cde:	72fb      	strb	r3, [r7, #11]
      break;
 8016ce0:	bf00      	nop
  }

  if (err != 0U)
 8016ce2:	7afb      	ldrb	r3, [r7, #11]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d11e      	bne.n	8016d26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016ce8:	683b      	ldr	r3, [r7, #0]
 8016cea:	88db      	ldrh	r3, [r3, #6]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d016      	beq.n	8016d1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016cf0:	893b      	ldrh	r3, [r7, #8]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d00e      	beq.n	8016d14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	88da      	ldrh	r2, [r3, #6]
 8016cfa:	893b      	ldrh	r3, [r7, #8]
 8016cfc:	4293      	cmp	r3, r2
 8016cfe:	bf28      	it	cs
 8016d00:	4613      	movcs	r3, r2
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016d06:	893b      	ldrh	r3, [r7, #8]
 8016d08:	461a      	mov	r2, r3
 8016d0a:	68f9      	ldr	r1, [r7, #12]
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f000 fa5d 	bl	80171cc <USBD_CtlSendData>
 8016d12:	e009      	b.n	8016d28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016d14:	6839      	ldr	r1, [r7, #0]
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f000 f9e7 	bl	80170ea <USBD_CtlError>
 8016d1c:	e004      	b.n	8016d28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f000 faae 	bl	8017280 <USBD_CtlSendStatus>
 8016d24:	e000      	b.n	8016d28 <USBD_GetDescriptor+0x2cc>
    return;
 8016d26:	bf00      	nop
  }
}
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	bf00      	nop

08016d30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b084      	sub	sp, #16
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
 8016d38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	889b      	ldrh	r3, [r3, #4]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d131      	bne.n	8016da6 <USBD_SetAddress+0x76>
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	88db      	ldrh	r3, [r3, #6]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d12d      	bne.n	8016da6 <USBD_SetAddress+0x76>
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	885b      	ldrh	r3, [r3, #2]
 8016d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8016d50:	d829      	bhi.n	8016da6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	885b      	ldrh	r3, [r3, #2]
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016d5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d64:	b2db      	uxtb	r3, r3
 8016d66:	2b03      	cmp	r3, #3
 8016d68:	d104      	bne.n	8016d74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016d6a:	6839      	ldr	r1, [r7, #0]
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f000 f9bc 	bl	80170ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d72:	e01d      	b.n	8016db0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	7bfa      	ldrb	r2, [r7, #15]
 8016d78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016d7c:	7bfb      	ldrb	r3, [r7, #15]
 8016d7e:	4619      	mov	r1, r3
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f003 fee5 	bl	801ab50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	f000 fa7a 	bl	8017280 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016d8c:	7bfb      	ldrb	r3, [r7, #15]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d004      	beq.n	8016d9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2202      	movs	r2, #2
 8016d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d9a:	e009      	b.n	8016db0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2201      	movs	r2, #1
 8016da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016da4:	e004      	b.n	8016db0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016da6:	6839      	ldr	r1, [r7, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f000 f99e 	bl	80170ea <USBD_CtlError>
  }
}
 8016dae:	bf00      	nop
 8016db0:	bf00      	nop
 8016db2:	3710      	adds	r7, #16
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016dc6:	683b      	ldr	r3, [r7, #0]
 8016dc8:	885b      	ldrh	r3, [r3, #2]
 8016dca:	b2da      	uxtb	r2, r3
 8016dcc:	4b4e      	ldr	r3, [pc, #312]	; (8016f08 <USBD_SetConfig+0x150>)
 8016dce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016dd0:	4b4d      	ldr	r3, [pc, #308]	; (8016f08 <USBD_SetConfig+0x150>)
 8016dd2:	781b      	ldrb	r3, [r3, #0]
 8016dd4:	2b01      	cmp	r3, #1
 8016dd6:	d905      	bls.n	8016de4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016dd8:	6839      	ldr	r1, [r7, #0]
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	f000 f985 	bl	80170ea <USBD_CtlError>
    return USBD_FAIL;
 8016de0:	2303      	movs	r3, #3
 8016de2:	e08c      	b.n	8016efe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016dea:	b2db      	uxtb	r3, r3
 8016dec:	2b02      	cmp	r3, #2
 8016dee:	d002      	beq.n	8016df6 <USBD_SetConfig+0x3e>
 8016df0:	2b03      	cmp	r3, #3
 8016df2:	d029      	beq.n	8016e48 <USBD_SetConfig+0x90>
 8016df4:	e075      	b.n	8016ee2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016df6:	4b44      	ldr	r3, [pc, #272]	; (8016f08 <USBD_SetConfig+0x150>)
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d020      	beq.n	8016e40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016dfe:	4b42      	ldr	r3, [pc, #264]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	461a      	mov	r2, r3
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016e08:	4b3f      	ldr	r3, [pc, #252]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e0a:	781b      	ldrb	r3, [r3, #0]
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f7fe ffe1 	bl	8015dd6 <USBD_SetClassConfig>
 8016e14:	4603      	mov	r3, r0
 8016e16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016e18:	7bfb      	ldrb	r3, [r7, #15]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d008      	beq.n	8016e30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016e1e:	6839      	ldr	r1, [r7, #0]
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f000 f962 	bl	80170ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2202      	movs	r2, #2
 8016e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016e2e:	e065      	b.n	8016efc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f000 fa25 	bl	8017280 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2203      	movs	r2, #3
 8016e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016e3e:	e05d      	b.n	8016efc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f000 fa1d 	bl	8017280 <USBD_CtlSendStatus>
      break;
 8016e46:	e059      	b.n	8016efc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016e48:	4b2f      	ldr	r3, [pc, #188]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d112      	bne.n	8016e76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2202      	movs	r2, #2
 8016e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016e58:	4b2b      	ldr	r3, [pc, #172]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e5a:	781b      	ldrb	r3, [r3, #0]
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016e62:	4b29      	ldr	r3, [pc, #164]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	4619      	mov	r1, r3
 8016e68:	6878      	ldr	r0, [r7, #4]
 8016e6a:	f7fe ffd0 	bl	8015e0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f000 fa06 	bl	8017280 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016e74:	e042      	b.n	8016efc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016e76:	4b24      	ldr	r3, [pc, #144]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	429a      	cmp	r2, r3
 8016e82:	d02a      	beq.n	8016eda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	4619      	mov	r1, r3
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f7fe ffbe 	bl	8015e0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016e92:	4b1d      	ldr	r3, [pc, #116]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	461a      	mov	r2, r3
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016e9c:	4b1a      	ldr	r3, [pc, #104]	; (8016f08 <USBD_SetConfig+0x150>)
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f7fe ff97 	bl	8015dd6 <USBD_SetClassConfig>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016eac:	7bfb      	ldrb	r3, [r7, #15]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d00f      	beq.n	8016ed2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016eb2:	6839      	ldr	r1, [r7, #0]
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f000 f918 	bl	80170ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	685b      	ldr	r3, [r3, #4]
 8016ebe:	b2db      	uxtb	r3, r3
 8016ec0:	4619      	mov	r1, r3
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f7fe ffa3 	bl	8015e0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	2202      	movs	r2, #2
 8016ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016ed0:	e014      	b.n	8016efc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f000 f9d4 	bl	8017280 <USBD_CtlSendStatus>
      break;
 8016ed8:	e010      	b.n	8016efc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f000 f9d0 	bl	8017280 <USBD_CtlSendStatus>
      break;
 8016ee0:	e00c      	b.n	8016efc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016ee2:	6839      	ldr	r1, [r7, #0]
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f000 f900 	bl	80170ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016eea:	4b07      	ldr	r3, [pc, #28]	; (8016f08 <USBD_SetConfig+0x150>)
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	4619      	mov	r1, r3
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f7fe ff8c 	bl	8015e0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016ef6:	2303      	movs	r3, #3
 8016ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8016efa:	bf00      	nop
  }

  return ret;
 8016efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
 8016f06:	bf00      	nop
 8016f08:	240016b0 	.word	0x240016b0

08016f0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	88db      	ldrh	r3, [r3, #6]
 8016f1a:	2b01      	cmp	r3, #1
 8016f1c:	d004      	beq.n	8016f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016f1e:	6839      	ldr	r1, [r7, #0]
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f000 f8e2 	bl	80170ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016f26:	e023      	b.n	8016f70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f2e:	b2db      	uxtb	r3, r3
 8016f30:	2b02      	cmp	r3, #2
 8016f32:	dc02      	bgt.n	8016f3a <USBD_GetConfig+0x2e>
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	dc03      	bgt.n	8016f40 <USBD_GetConfig+0x34>
 8016f38:	e015      	b.n	8016f66 <USBD_GetConfig+0x5a>
 8016f3a:	2b03      	cmp	r3, #3
 8016f3c:	d00b      	beq.n	8016f56 <USBD_GetConfig+0x4a>
 8016f3e:	e012      	b.n	8016f66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2200      	movs	r2, #0
 8016f44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	3308      	adds	r3, #8
 8016f4a:	2201      	movs	r2, #1
 8016f4c:	4619      	mov	r1, r3
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f000 f93c 	bl	80171cc <USBD_CtlSendData>
        break;
 8016f54:	e00c      	b.n	8016f70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	3304      	adds	r3, #4
 8016f5a:	2201      	movs	r2, #1
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f000 f934 	bl	80171cc <USBD_CtlSendData>
        break;
 8016f64:	e004      	b.n	8016f70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016f66:	6839      	ldr	r1, [r7, #0]
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f000 f8be 	bl	80170ea <USBD_CtlError>
        break;
 8016f6e:	bf00      	nop
}
 8016f70:	bf00      	nop
 8016f72:	3708      	adds	r7, #8
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}

08016f78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b082      	sub	sp, #8
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
 8016f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	3b01      	subs	r3, #1
 8016f8c:	2b02      	cmp	r3, #2
 8016f8e:	d81e      	bhi.n	8016fce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	88db      	ldrh	r3, [r3, #6]
 8016f94:	2b02      	cmp	r3, #2
 8016f96:	d004      	beq.n	8016fa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016f98:	6839      	ldr	r1, [r7, #0]
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	f000 f8a5 	bl	80170ea <USBD_CtlError>
        break;
 8016fa0:	e01a      	b.n	8016fd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d005      	beq.n	8016fbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	68db      	ldr	r3, [r3, #12]
 8016fb6:	f043 0202 	orr.w	r2, r3, #2
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	330c      	adds	r3, #12
 8016fc2:	2202      	movs	r2, #2
 8016fc4:	4619      	mov	r1, r3
 8016fc6:	6878      	ldr	r0, [r7, #4]
 8016fc8:	f000 f900 	bl	80171cc <USBD_CtlSendData>
      break;
 8016fcc:	e004      	b.n	8016fd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016fce:	6839      	ldr	r1, [r7, #0]
 8016fd0:	6878      	ldr	r0, [r7, #4]
 8016fd2:	f000 f88a 	bl	80170ea <USBD_CtlError>
      break;
 8016fd6:	bf00      	nop
  }
}
 8016fd8:	bf00      	nop
 8016fda:	3708      	adds	r7, #8
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}

08016fe0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b082      	sub	sp, #8
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	885b      	ldrh	r3, [r3, #2]
 8016fee:	2b01      	cmp	r3, #1
 8016ff0:	d107      	bne.n	8017002 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 f940 	bl	8017280 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017000:	e013      	b.n	801702a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	885b      	ldrh	r3, [r3, #2]
 8017006:	2b02      	cmp	r3, #2
 8017008:	d10b      	bne.n	8017022 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	889b      	ldrh	r3, [r3, #4]
 801700e:	0a1b      	lsrs	r3, r3, #8
 8017010:	b29b      	uxth	r3, r3
 8017012:	b2da      	uxtb	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f000 f930 	bl	8017280 <USBD_CtlSendStatus>
}
 8017020:	e003      	b.n	801702a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017022:	6839      	ldr	r1, [r7, #0]
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f000 f860 	bl	80170ea <USBD_CtlError>
}
 801702a:	bf00      	nop
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}

08017032 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017032:	b580      	push	{r7, lr}
 8017034:	b082      	sub	sp, #8
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
 801703a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017042:	b2db      	uxtb	r3, r3
 8017044:	3b01      	subs	r3, #1
 8017046:	2b02      	cmp	r3, #2
 8017048:	d80b      	bhi.n	8017062 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	885b      	ldrh	r3, [r3, #2]
 801704e:	2b01      	cmp	r3, #1
 8017050:	d10c      	bne.n	801706c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2200      	movs	r2, #0
 8017056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f000 f910 	bl	8017280 <USBD_CtlSendStatus>
      }
      break;
 8017060:	e004      	b.n	801706c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017062:	6839      	ldr	r1, [r7, #0]
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 f840 	bl	80170ea <USBD_CtlError>
      break;
 801706a:	e000      	b.n	801706e <USBD_ClrFeature+0x3c>
      break;
 801706c:	bf00      	nop
  }
}
 801706e:	bf00      	nop
 8017070:	3708      	adds	r7, #8
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}

08017076 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017076:	b580      	push	{r7, lr}
 8017078:	b084      	sub	sp, #16
 801707a:	af00      	add	r7, sp, #0
 801707c:	6078      	str	r0, [r7, #4]
 801707e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	781a      	ldrb	r2, [r3, #0]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	3301      	adds	r3, #1
 8017090:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	781a      	ldrb	r2, [r3, #0]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	3301      	adds	r3, #1
 801709e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80170a0:	68f8      	ldr	r0, [r7, #12]
 80170a2:	f7ff fa41 	bl	8016528 <SWAPBYTE>
 80170a6:	4603      	mov	r3, r0
 80170a8:	461a      	mov	r2, r3
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	3301      	adds	r3, #1
 80170b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	3301      	adds	r3, #1
 80170b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80170ba:	68f8      	ldr	r0, [r7, #12]
 80170bc:	f7ff fa34 	bl	8016528 <SWAPBYTE>
 80170c0:	4603      	mov	r3, r0
 80170c2:	461a      	mov	r2, r3
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	3301      	adds	r3, #1
 80170cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	3301      	adds	r3, #1
 80170d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80170d4:	68f8      	ldr	r0, [r7, #12]
 80170d6:	f7ff fa27 	bl	8016528 <SWAPBYTE>
 80170da:	4603      	mov	r3, r0
 80170dc:	461a      	mov	r2, r3
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	80da      	strh	r2, [r3, #6]
}
 80170e2:	bf00      	nop
 80170e4:	3710      	adds	r7, #16
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170ea:	b580      	push	{r7, lr}
 80170ec:	b082      	sub	sp, #8
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	6078      	str	r0, [r7, #4]
 80170f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80170f4:	2180      	movs	r1, #128	; 0x80
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f003 fcc0 	bl	801aa7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80170fc:	2100      	movs	r1, #0
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f003 fcbc 	bl	801aa7c <USBD_LL_StallEP>
}
 8017104:	bf00      	nop
 8017106:	3708      	adds	r7, #8
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b086      	sub	sp, #24
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	60b9      	str	r1, [r7, #8]
 8017116:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017118:	2300      	movs	r3, #0
 801711a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d036      	beq.n	8017190 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017126:	6938      	ldr	r0, [r7, #16]
 8017128:	f000 f836 	bl	8017198 <USBD_GetLen>
 801712c:	4603      	mov	r3, r0
 801712e:	3301      	adds	r3, #1
 8017130:	b29b      	uxth	r3, r3
 8017132:	005b      	lsls	r3, r3, #1
 8017134:	b29a      	uxth	r2, r3
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801713a:	7dfb      	ldrb	r3, [r7, #23]
 801713c:	68ba      	ldr	r2, [r7, #8]
 801713e:	4413      	add	r3, r2
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	7812      	ldrb	r2, [r2, #0]
 8017144:	701a      	strb	r2, [r3, #0]
  idx++;
 8017146:	7dfb      	ldrb	r3, [r7, #23]
 8017148:	3301      	adds	r3, #1
 801714a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801714c:	7dfb      	ldrb	r3, [r7, #23]
 801714e:	68ba      	ldr	r2, [r7, #8]
 8017150:	4413      	add	r3, r2
 8017152:	2203      	movs	r2, #3
 8017154:	701a      	strb	r2, [r3, #0]
  idx++;
 8017156:	7dfb      	ldrb	r3, [r7, #23]
 8017158:	3301      	adds	r3, #1
 801715a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801715c:	e013      	b.n	8017186 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801715e:	7dfb      	ldrb	r3, [r7, #23]
 8017160:	68ba      	ldr	r2, [r7, #8]
 8017162:	4413      	add	r3, r2
 8017164:	693a      	ldr	r2, [r7, #16]
 8017166:	7812      	ldrb	r2, [r2, #0]
 8017168:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801716a:	693b      	ldr	r3, [r7, #16]
 801716c:	3301      	adds	r3, #1
 801716e:	613b      	str	r3, [r7, #16]
    idx++;
 8017170:	7dfb      	ldrb	r3, [r7, #23]
 8017172:	3301      	adds	r3, #1
 8017174:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017176:	7dfb      	ldrb	r3, [r7, #23]
 8017178:	68ba      	ldr	r2, [r7, #8]
 801717a:	4413      	add	r3, r2
 801717c:	2200      	movs	r2, #0
 801717e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017180:	7dfb      	ldrb	r3, [r7, #23]
 8017182:	3301      	adds	r3, #1
 8017184:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017186:	693b      	ldr	r3, [r7, #16]
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d1e7      	bne.n	801715e <USBD_GetString+0x52>
 801718e:	e000      	b.n	8017192 <USBD_GetString+0x86>
    return;
 8017190:	bf00      	nop
  }
}
 8017192:	3718      	adds	r7, #24
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}

08017198 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017198:	b480      	push	{r7}
 801719a:	b085      	sub	sp, #20
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80171a0:	2300      	movs	r3, #0
 80171a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80171a8:	e005      	b.n	80171b6 <USBD_GetLen+0x1e>
  {
    len++;
 80171aa:	7bfb      	ldrb	r3, [r7, #15]
 80171ac:	3301      	adds	r3, #1
 80171ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	3301      	adds	r3, #1
 80171b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1f5      	bne.n	80171aa <USBD_GetLen+0x12>
  }

  return len;
 80171be:	7bfb      	ldrb	r3, [r7, #15]
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3714      	adds	r7, #20
 80171c4:	46bd      	mov	sp, r7
 80171c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ca:	4770      	bx	lr

080171cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b084      	sub	sp, #16
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	60f8      	str	r0, [r7, #12]
 80171d4:	60b9      	str	r1, [r7, #8]
 80171d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2202      	movs	r2, #2
 80171dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	687a      	ldr	r2, [r7, #4]
 80171ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	68ba      	ldr	r2, [r7, #8]
 80171f0:	2100      	movs	r1, #0
 80171f2:	68f8      	ldr	r0, [r7, #12]
 80171f4:	f003 fccb 	bl	801ab8e <USBD_LL_Transmit>

  return USBD_OK;
 80171f8:	2300      	movs	r3, #0
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}

08017202 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017202:	b580      	push	{r7, lr}
 8017204:	b084      	sub	sp, #16
 8017206:	af00      	add	r7, sp, #0
 8017208:	60f8      	str	r0, [r7, #12]
 801720a:	60b9      	str	r1, [r7, #8]
 801720c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	68ba      	ldr	r2, [r7, #8]
 8017212:	2100      	movs	r1, #0
 8017214:	68f8      	ldr	r0, [r7, #12]
 8017216:	f003 fcba 	bl	801ab8e <USBD_LL_Transmit>

  return USBD_OK;
 801721a:	2300      	movs	r3, #0
}
 801721c:	4618      	mov	r0, r3
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	60f8      	str	r0, [r7, #12]
 801722c:	60b9      	str	r1, [r7, #8]
 801722e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	2203      	movs	r2, #3
 8017234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	687a      	ldr	r2, [r7, #4]
 801723c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	687a      	ldr	r2, [r7, #4]
 8017244:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	68ba      	ldr	r2, [r7, #8]
 801724c:	2100      	movs	r1, #0
 801724e:	68f8      	ldr	r0, [r7, #12]
 8017250:	f003 fcbe 	bl	801abd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017254:	2300      	movs	r3, #0
}
 8017256:	4618      	mov	r0, r3
 8017258:	3710      	adds	r7, #16
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}

0801725e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801725e:	b580      	push	{r7, lr}
 8017260:	b084      	sub	sp, #16
 8017262:	af00      	add	r7, sp, #0
 8017264:	60f8      	str	r0, [r7, #12]
 8017266:	60b9      	str	r1, [r7, #8]
 8017268:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	68ba      	ldr	r2, [r7, #8]
 801726e:	2100      	movs	r1, #0
 8017270:	68f8      	ldr	r0, [r7, #12]
 8017272:	f003 fcad 	bl	801abd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017276:	2300      	movs	r3, #0
}
 8017278:	4618      	mov	r0, r3
 801727a:	3710      	adds	r7, #16
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}

08017280 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2204      	movs	r2, #4
 801728c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017290:	2300      	movs	r3, #0
 8017292:	2200      	movs	r2, #0
 8017294:	2100      	movs	r1, #0
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f003 fc79 	bl	801ab8e <USBD_LL_Transmit>

  return USBD_OK;
 801729c:	2300      	movs	r3, #0
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3708      	adds	r7, #8
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}

080172a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b082      	sub	sp, #8
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2205      	movs	r2, #5
 80172b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80172b6:	2300      	movs	r3, #0
 80172b8:	2200      	movs	r2, #0
 80172ba:	2100      	movs	r1, #0
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f003 fc87 	bl	801abd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80172c2:	2300      	movs	r3, #0
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	3708      	adds	r7, #8
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}

080172cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b084      	sub	sp, #16
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	4603      	mov	r3, r0
 80172d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80172d6:	79fb      	ldrb	r3, [r7, #7]
 80172d8:	4a08      	ldr	r2, [pc, #32]	; (80172fc <disk_status+0x30>)
 80172da:	009b      	lsls	r3, r3, #2
 80172dc:	4413      	add	r3, r2
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	685b      	ldr	r3, [r3, #4]
 80172e2:	79fa      	ldrb	r2, [r7, #7]
 80172e4:	4905      	ldr	r1, [pc, #20]	; (80172fc <disk_status+0x30>)
 80172e6:	440a      	add	r2, r1
 80172e8:	7a12      	ldrb	r2, [r2, #8]
 80172ea:	4610      	mov	r0, r2
 80172ec:	4798      	blx	r3
 80172ee:	4603      	mov	r3, r0
 80172f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80172f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3710      	adds	r7, #16
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	240018dc 	.word	0x240018dc

08017300 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b084      	sub	sp, #16
 8017304:	af00      	add	r7, sp, #0
 8017306:	4603      	mov	r3, r0
 8017308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801730a:	2300      	movs	r3, #0
 801730c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801730e:	79fb      	ldrb	r3, [r7, #7]
 8017310:	4a0d      	ldr	r2, [pc, #52]	; (8017348 <disk_initialize+0x48>)
 8017312:	5cd3      	ldrb	r3, [r2, r3]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d111      	bne.n	801733c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017318:	79fb      	ldrb	r3, [r7, #7]
 801731a:	4a0b      	ldr	r2, [pc, #44]	; (8017348 <disk_initialize+0x48>)
 801731c:	2101      	movs	r1, #1
 801731e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017320:	79fb      	ldrb	r3, [r7, #7]
 8017322:	4a09      	ldr	r2, [pc, #36]	; (8017348 <disk_initialize+0x48>)
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	4413      	add	r3, r2
 8017328:	685b      	ldr	r3, [r3, #4]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	79fa      	ldrb	r2, [r7, #7]
 801732e:	4906      	ldr	r1, [pc, #24]	; (8017348 <disk_initialize+0x48>)
 8017330:	440a      	add	r2, r1
 8017332:	7a12      	ldrb	r2, [r2, #8]
 8017334:	4610      	mov	r0, r2
 8017336:	4798      	blx	r3
 8017338:	4603      	mov	r3, r0
 801733a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801733c:	7bfb      	ldrb	r3, [r7, #15]
}
 801733e:	4618      	mov	r0, r3
 8017340:	3710      	adds	r7, #16
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	240018dc 	.word	0x240018dc

0801734c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801734c:	b590      	push	{r4, r7, lr}
 801734e:	b087      	sub	sp, #28
 8017350:	af00      	add	r7, sp, #0
 8017352:	60b9      	str	r1, [r7, #8]
 8017354:	607a      	str	r2, [r7, #4]
 8017356:	603b      	str	r3, [r7, #0]
 8017358:	4603      	mov	r3, r0
 801735a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801735c:	7bfb      	ldrb	r3, [r7, #15]
 801735e:	4a0a      	ldr	r2, [pc, #40]	; (8017388 <disk_read+0x3c>)
 8017360:	009b      	lsls	r3, r3, #2
 8017362:	4413      	add	r3, r2
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	689c      	ldr	r4, [r3, #8]
 8017368:	7bfb      	ldrb	r3, [r7, #15]
 801736a:	4a07      	ldr	r2, [pc, #28]	; (8017388 <disk_read+0x3c>)
 801736c:	4413      	add	r3, r2
 801736e:	7a18      	ldrb	r0, [r3, #8]
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	687a      	ldr	r2, [r7, #4]
 8017374:	68b9      	ldr	r1, [r7, #8]
 8017376:	47a0      	blx	r4
 8017378:	4603      	mov	r3, r0
 801737a:	75fb      	strb	r3, [r7, #23]
  return res;
 801737c:	7dfb      	ldrb	r3, [r7, #23]
}
 801737e:	4618      	mov	r0, r3
 8017380:	371c      	adds	r7, #28
 8017382:	46bd      	mov	sp, r7
 8017384:	bd90      	pop	{r4, r7, pc}
 8017386:	bf00      	nop
 8017388:	240018dc 	.word	0x240018dc

0801738c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801738c:	b590      	push	{r4, r7, lr}
 801738e:	b087      	sub	sp, #28
 8017390:	af00      	add	r7, sp, #0
 8017392:	60b9      	str	r1, [r7, #8]
 8017394:	607a      	str	r2, [r7, #4]
 8017396:	603b      	str	r3, [r7, #0]
 8017398:	4603      	mov	r3, r0
 801739a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801739c:	7bfb      	ldrb	r3, [r7, #15]
 801739e:	4a0a      	ldr	r2, [pc, #40]	; (80173c8 <disk_write+0x3c>)
 80173a0:	009b      	lsls	r3, r3, #2
 80173a2:	4413      	add	r3, r2
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	68dc      	ldr	r4, [r3, #12]
 80173a8:	7bfb      	ldrb	r3, [r7, #15]
 80173aa:	4a07      	ldr	r2, [pc, #28]	; (80173c8 <disk_write+0x3c>)
 80173ac:	4413      	add	r3, r2
 80173ae:	7a18      	ldrb	r0, [r3, #8]
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	687a      	ldr	r2, [r7, #4]
 80173b4:	68b9      	ldr	r1, [r7, #8]
 80173b6:	47a0      	blx	r4
 80173b8:	4603      	mov	r3, r0
 80173ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80173bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80173be:	4618      	mov	r0, r3
 80173c0:	371c      	adds	r7, #28
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd90      	pop	{r4, r7, pc}
 80173c6:	bf00      	nop
 80173c8:	240018dc 	.word	0x240018dc

080173cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b084      	sub	sp, #16
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	4603      	mov	r3, r0
 80173d4:	603a      	str	r2, [r7, #0]
 80173d6:	71fb      	strb	r3, [r7, #7]
 80173d8:	460b      	mov	r3, r1
 80173da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	4a09      	ldr	r2, [pc, #36]	; (8017404 <disk_ioctl+0x38>)
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	4413      	add	r3, r2
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	691b      	ldr	r3, [r3, #16]
 80173e8:	79fa      	ldrb	r2, [r7, #7]
 80173ea:	4906      	ldr	r1, [pc, #24]	; (8017404 <disk_ioctl+0x38>)
 80173ec:	440a      	add	r2, r1
 80173ee:	7a10      	ldrb	r0, [r2, #8]
 80173f0:	79b9      	ldrb	r1, [r7, #6]
 80173f2:	683a      	ldr	r2, [r7, #0]
 80173f4:	4798      	blx	r3
 80173f6:	4603      	mov	r3, r0
 80173f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80173fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80173fc:	4618      	mov	r0, r3
 80173fe:	3710      	adds	r7, #16
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}
 8017404:	240018dc 	.word	0x240018dc

08017408 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017408:	b480      	push	{r7}
 801740a:	b085      	sub	sp, #20
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	3301      	adds	r3, #1
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017418:	89fb      	ldrh	r3, [r7, #14]
 801741a:	021b      	lsls	r3, r3, #8
 801741c:	b21a      	sxth	r2, r3
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	b21b      	sxth	r3, r3
 8017424:	4313      	orrs	r3, r2
 8017426:	b21b      	sxth	r3, r3
 8017428:	81fb      	strh	r3, [r7, #14]
	return rv;
 801742a:	89fb      	ldrh	r3, [r7, #14]
}
 801742c:	4618      	mov	r0, r3
 801742e:	3714      	adds	r7, #20
 8017430:	46bd      	mov	sp, r7
 8017432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017436:	4770      	bx	lr

08017438 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017438:	b480      	push	{r7}
 801743a:	b085      	sub	sp, #20
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	3303      	adds	r3, #3
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	021b      	lsls	r3, r3, #8
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	3202      	adds	r2, #2
 8017450:	7812      	ldrb	r2, [r2, #0]
 8017452:	4313      	orrs	r3, r2
 8017454:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	021b      	lsls	r3, r3, #8
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	3201      	adds	r2, #1
 801745e:	7812      	ldrb	r2, [r2, #0]
 8017460:	4313      	orrs	r3, r2
 8017462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	021b      	lsls	r3, r3, #8
 8017468:	687a      	ldr	r2, [r7, #4]
 801746a:	7812      	ldrb	r2, [r2, #0]
 801746c:	4313      	orrs	r3, r2
 801746e:	60fb      	str	r3, [r7, #12]
	return rv;
 8017470:	68fb      	ldr	r3, [r7, #12]
}
 8017472:	4618      	mov	r0, r3
 8017474:	3714      	adds	r7, #20
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr

0801747e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801747e:	b480      	push	{r7}
 8017480:	b083      	sub	sp, #12
 8017482:	af00      	add	r7, sp, #0
 8017484:	6078      	str	r0, [r7, #4]
 8017486:	460b      	mov	r3, r1
 8017488:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	1c5a      	adds	r2, r3, #1
 801748e:	607a      	str	r2, [r7, #4]
 8017490:	887a      	ldrh	r2, [r7, #2]
 8017492:	b2d2      	uxtb	r2, r2
 8017494:	701a      	strb	r2, [r3, #0]
 8017496:	887b      	ldrh	r3, [r7, #2]
 8017498:	0a1b      	lsrs	r3, r3, #8
 801749a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	1c5a      	adds	r2, r3, #1
 80174a0:	607a      	str	r2, [r7, #4]
 80174a2:	887a      	ldrh	r2, [r7, #2]
 80174a4:	b2d2      	uxtb	r2, r2
 80174a6:	701a      	strb	r2, [r3, #0]
}
 80174a8:	bf00      	nop
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80174b4:	b480      	push	{r7}
 80174b6:	b083      	sub	sp, #12
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	1c5a      	adds	r2, r3, #1
 80174c2:	607a      	str	r2, [r7, #4]
 80174c4:	683a      	ldr	r2, [r7, #0]
 80174c6:	b2d2      	uxtb	r2, r2
 80174c8:	701a      	strb	r2, [r3, #0]
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	0a1b      	lsrs	r3, r3, #8
 80174ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	1c5a      	adds	r2, r3, #1
 80174d4:	607a      	str	r2, [r7, #4]
 80174d6:	683a      	ldr	r2, [r7, #0]
 80174d8:	b2d2      	uxtb	r2, r2
 80174da:	701a      	strb	r2, [r3, #0]
 80174dc:	683b      	ldr	r3, [r7, #0]
 80174de:	0a1b      	lsrs	r3, r3, #8
 80174e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	1c5a      	adds	r2, r3, #1
 80174e6:	607a      	str	r2, [r7, #4]
 80174e8:	683a      	ldr	r2, [r7, #0]
 80174ea:	b2d2      	uxtb	r2, r2
 80174ec:	701a      	strb	r2, [r3, #0]
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	0a1b      	lsrs	r3, r3, #8
 80174f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	1c5a      	adds	r2, r3, #1
 80174f8:	607a      	str	r2, [r7, #4]
 80174fa:	683a      	ldr	r2, [r7, #0]
 80174fc:	b2d2      	uxtb	r2, r2
 80174fe:	701a      	strb	r2, [r3, #0]
}
 8017500:	bf00      	nop
 8017502:	370c      	adds	r7, #12
 8017504:	46bd      	mov	sp, r7
 8017506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750a:	4770      	bx	lr

0801750c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801750c:	b480      	push	{r7}
 801750e:	b087      	sub	sp, #28
 8017510:	af00      	add	r7, sp, #0
 8017512:	60f8      	str	r0, [r7, #12]
 8017514:	60b9      	str	r1, [r7, #8]
 8017516:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d00d      	beq.n	8017542 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017526:	693a      	ldr	r2, [r7, #16]
 8017528:	1c53      	adds	r3, r2, #1
 801752a:	613b      	str	r3, [r7, #16]
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	1c59      	adds	r1, r3, #1
 8017530:	6179      	str	r1, [r7, #20]
 8017532:	7812      	ldrb	r2, [r2, #0]
 8017534:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	3b01      	subs	r3, #1
 801753a:	607b      	str	r3, [r7, #4]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d1f1      	bne.n	8017526 <mem_cpy+0x1a>
	}
}
 8017542:	bf00      	nop
 8017544:	371c      	adds	r7, #28
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr

0801754e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801754e:	b480      	push	{r7}
 8017550:	b087      	sub	sp, #28
 8017552:	af00      	add	r7, sp, #0
 8017554:	60f8      	str	r0, [r7, #12]
 8017556:	60b9      	str	r1, [r7, #8]
 8017558:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	1c5a      	adds	r2, r3, #1
 8017562:	617a      	str	r2, [r7, #20]
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	b2d2      	uxtb	r2, r2
 8017568:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	3b01      	subs	r3, #1
 801756e:	607b      	str	r3, [r7, #4]
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d1f3      	bne.n	801755e <mem_set+0x10>
}
 8017576:	bf00      	nop
 8017578:	bf00      	nop
 801757a:	371c      	adds	r7, #28
 801757c:	46bd      	mov	sp, r7
 801757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017582:	4770      	bx	lr

08017584 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017584:	b480      	push	{r7}
 8017586:	b089      	sub	sp, #36	; 0x24
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	61fb      	str	r3, [r7, #28]
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017598:	2300      	movs	r3, #0
 801759a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	1c5a      	adds	r2, r3, #1
 80175a0:	61fa      	str	r2, [r7, #28]
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	4619      	mov	r1, r3
 80175a6:	69bb      	ldr	r3, [r7, #24]
 80175a8:	1c5a      	adds	r2, r3, #1
 80175aa:	61ba      	str	r2, [r7, #24]
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	1acb      	subs	r3, r1, r3
 80175b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	3b01      	subs	r3, #1
 80175b6:	607b      	str	r3, [r7, #4]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d002      	beq.n	80175c4 <mem_cmp+0x40>
 80175be:	697b      	ldr	r3, [r7, #20]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d0eb      	beq.n	801759c <mem_cmp+0x18>

	return r;
 80175c4:	697b      	ldr	r3, [r7, #20]
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3724      	adds	r7, #36	; 0x24
 80175ca:	46bd      	mov	sp, r7
 80175cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d0:	4770      	bx	lr

080175d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80175d2:	b480      	push	{r7}
 80175d4:	b083      	sub	sp, #12
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	6078      	str	r0, [r7, #4]
 80175da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80175dc:	e002      	b.n	80175e4 <chk_chr+0x12>
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	3301      	adds	r3, #1
 80175e2:	607b      	str	r3, [r7, #4]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	781b      	ldrb	r3, [r3, #0]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d005      	beq.n	80175f8 <chk_chr+0x26>
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	461a      	mov	r2, r3
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	4293      	cmp	r3, r2
 80175f6:	d1f2      	bne.n	80175de <chk_chr+0xc>
	return *str;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	781b      	ldrb	r3, [r3, #0]
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	370c      	adds	r7, #12
 8017600:	46bd      	mov	sp, r7
 8017602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017606:	4770      	bx	lr

08017608 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017608:	b480      	push	{r7}
 801760a:	b085      	sub	sp, #20
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017612:	2300      	movs	r3, #0
 8017614:	60bb      	str	r3, [r7, #8]
 8017616:	68bb      	ldr	r3, [r7, #8]
 8017618:	60fb      	str	r3, [r7, #12]
 801761a:	e029      	b.n	8017670 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801761c:	4a27      	ldr	r2, [pc, #156]	; (80176bc <chk_lock+0xb4>)
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	011b      	lsls	r3, r3, #4
 8017622:	4413      	add	r3, r2
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d01d      	beq.n	8017666 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801762a:	4a24      	ldr	r2, [pc, #144]	; (80176bc <chk_lock+0xb4>)
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	011b      	lsls	r3, r3, #4
 8017630:	4413      	add	r3, r2
 8017632:	681a      	ldr	r2, [r3, #0]
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	429a      	cmp	r2, r3
 801763a:	d116      	bne.n	801766a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801763c:	4a1f      	ldr	r2, [pc, #124]	; (80176bc <chk_lock+0xb4>)
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	011b      	lsls	r3, r3, #4
 8017642:	4413      	add	r3, r2
 8017644:	3304      	adds	r3, #4
 8017646:	681a      	ldr	r2, [r3, #0]
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801764c:	429a      	cmp	r2, r3
 801764e:	d10c      	bne.n	801766a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017650:	4a1a      	ldr	r2, [pc, #104]	; (80176bc <chk_lock+0xb4>)
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	011b      	lsls	r3, r3, #4
 8017656:	4413      	add	r3, r2
 8017658:	3308      	adds	r3, #8
 801765a:	681a      	ldr	r2, [r3, #0]
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017660:	429a      	cmp	r2, r3
 8017662:	d102      	bne.n	801766a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017664:	e007      	b.n	8017676 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017666:	2301      	movs	r3, #1
 8017668:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	3301      	adds	r3, #1
 801766e:	60fb      	str	r3, [r7, #12]
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	2b01      	cmp	r3, #1
 8017674:	d9d2      	bls.n	801761c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	2b02      	cmp	r3, #2
 801767a:	d109      	bne.n	8017690 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801767c:	68bb      	ldr	r3, [r7, #8]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d102      	bne.n	8017688 <chk_lock+0x80>
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	2b02      	cmp	r3, #2
 8017686:	d101      	bne.n	801768c <chk_lock+0x84>
 8017688:	2300      	movs	r3, #0
 801768a:	e010      	b.n	80176ae <chk_lock+0xa6>
 801768c:	2312      	movs	r3, #18
 801768e:	e00e      	b.n	80176ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d108      	bne.n	80176a8 <chk_lock+0xa0>
 8017696:	4a09      	ldr	r2, [pc, #36]	; (80176bc <chk_lock+0xb4>)
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	011b      	lsls	r3, r3, #4
 801769c:	4413      	add	r3, r2
 801769e:	330c      	adds	r3, #12
 80176a0:	881b      	ldrh	r3, [r3, #0]
 80176a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80176a6:	d101      	bne.n	80176ac <chk_lock+0xa4>
 80176a8:	2310      	movs	r3, #16
 80176aa:	e000      	b.n	80176ae <chk_lock+0xa6>
 80176ac:	2300      	movs	r3, #0
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3714      	adds	r7, #20
 80176b2:	46bd      	mov	sp, r7
 80176b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b8:	4770      	bx	lr
 80176ba:	bf00      	nop
 80176bc:	240016bc 	.word	0x240016bc

080176c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80176c0:	b480      	push	{r7}
 80176c2:	b083      	sub	sp, #12
 80176c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80176c6:	2300      	movs	r3, #0
 80176c8:	607b      	str	r3, [r7, #4]
 80176ca:	e002      	b.n	80176d2 <enq_lock+0x12>
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	3301      	adds	r3, #1
 80176d0:	607b      	str	r3, [r7, #4]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d806      	bhi.n	80176e6 <enq_lock+0x26>
 80176d8:	4a09      	ldr	r2, [pc, #36]	; (8017700 <enq_lock+0x40>)
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	011b      	lsls	r3, r3, #4
 80176de:	4413      	add	r3, r2
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d1f2      	bne.n	80176cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	2b02      	cmp	r3, #2
 80176ea:	bf14      	ite	ne
 80176ec:	2301      	movne	r3, #1
 80176ee:	2300      	moveq	r3, #0
 80176f0:	b2db      	uxtb	r3, r3
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	370c      	adds	r7, #12
 80176f6:	46bd      	mov	sp, r7
 80176f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fc:	4770      	bx	lr
 80176fe:	bf00      	nop
 8017700:	240016bc 	.word	0x240016bc

08017704 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017704:	b480      	push	{r7}
 8017706:	b085      	sub	sp, #20
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801770e:	2300      	movs	r3, #0
 8017710:	60fb      	str	r3, [r7, #12]
 8017712:	e01f      	b.n	8017754 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017714:	4a41      	ldr	r2, [pc, #260]	; (801781c <inc_lock+0x118>)
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	011b      	lsls	r3, r3, #4
 801771a:	4413      	add	r3, r2
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	429a      	cmp	r2, r3
 8017724:	d113      	bne.n	801774e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017726:	4a3d      	ldr	r2, [pc, #244]	; (801781c <inc_lock+0x118>)
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	011b      	lsls	r3, r3, #4
 801772c:	4413      	add	r3, r2
 801772e:	3304      	adds	r3, #4
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017736:	429a      	cmp	r2, r3
 8017738:	d109      	bne.n	801774e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801773a:	4a38      	ldr	r2, [pc, #224]	; (801781c <inc_lock+0x118>)
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	011b      	lsls	r3, r3, #4
 8017740:	4413      	add	r3, r2
 8017742:	3308      	adds	r3, #8
 8017744:	681a      	ldr	r2, [r3, #0]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801774a:	429a      	cmp	r2, r3
 801774c:	d006      	beq.n	801775c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	3301      	adds	r3, #1
 8017752:	60fb      	str	r3, [r7, #12]
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2b01      	cmp	r3, #1
 8017758:	d9dc      	bls.n	8017714 <inc_lock+0x10>
 801775a:	e000      	b.n	801775e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801775c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2b02      	cmp	r3, #2
 8017762:	d132      	bne.n	80177ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017764:	2300      	movs	r3, #0
 8017766:	60fb      	str	r3, [r7, #12]
 8017768:	e002      	b.n	8017770 <inc_lock+0x6c>
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	3301      	adds	r3, #1
 801776e:	60fb      	str	r3, [r7, #12]
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	2b01      	cmp	r3, #1
 8017774:	d806      	bhi.n	8017784 <inc_lock+0x80>
 8017776:	4a29      	ldr	r2, [pc, #164]	; (801781c <inc_lock+0x118>)
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	011b      	lsls	r3, r3, #4
 801777c:	4413      	add	r3, r2
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1f2      	bne.n	801776a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	2b02      	cmp	r3, #2
 8017788:	d101      	bne.n	801778e <inc_lock+0x8a>
 801778a:	2300      	movs	r3, #0
 801778c:	e040      	b.n	8017810 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	4922      	ldr	r1, [pc, #136]	; (801781c <inc_lock+0x118>)
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	011b      	lsls	r3, r3, #4
 8017798:	440b      	add	r3, r1
 801779a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	689a      	ldr	r2, [r3, #8]
 80177a0:	491e      	ldr	r1, [pc, #120]	; (801781c <inc_lock+0x118>)
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	011b      	lsls	r3, r3, #4
 80177a6:	440b      	add	r3, r1
 80177a8:	3304      	adds	r3, #4
 80177aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	695a      	ldr	r2, [r3, #20]
 80177b0:	491a      	ldr	r1, [pc, #104]	; (801781c <inc_lock+0x118>)
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	011b      	lsls	r3, r3, #4
 80177b6:	440b      	add	r3, r1
 80177b8:	3308      	adds	r3, #8
 80177ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80177bc:	4a17      	ldr	r2, [pc, #92]	; (801781c <inc_lock+0x118>)
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	011b      	lsls	r3, r3, #4
 80177c2:	4413      	add	r3, r2
 80177c4:	330c      	adds	r3, #12
 80177c6:	2200      	movs	r2, #0
 80177c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d009      	beq.n	80177e4 <inc_lock+0xe0>
 80177d0:	4a12      	ldr	r2, [pc, #72]	; (801781c <inc_lock+0x118>)
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	011b      	lsls	r3, r3, #4
 80177d6:	4413      	add	r3, r2
 80177d8:	330c      	adds	r3, #12
 80177da:	881b      	ldrh	r3, [r3, #0]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d001      	beq.n	80177e4 <inc_lock+0xe0>
 80177e0:	2300      	movs	r3, #0
 80177e2:	e015      	b.n	8017810 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d108      	bne.n	80177fc <inc_lock+0xf8>
 80177ea:	4a0c      	ldr	r2, [pc, #48]	; (801781c <inc_lock+0x118>)
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	011b      	lsls	r3, r3, #4
 80177f0:	4413      	add	r3, r2
 80177f2:	330c      	adds	r3, #12
 80177f4:	881b      	ldrh	r3, [r3, #0]
 80177f6:	3301      	adds	r3, #1
 80177f8:	b29a      	uxth	r2, r3
 80177fa:	e001      	b.n	8017800 <inc_lock+0xfc>
 80177fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017800:	4906      	ldr	r1, [pc, #24]	; (801781c <inc_lock+0x118>)
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	011b      	lsls	r3, r3, #4
 8017806:	440b      	add	r3, r1
 8017808:	330c      	adds	r3, #12
 801780a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	3301      	adds	r3, #1
}
 8017810:	4618      	mov	r0, r3
 8017812:	3714      	adds	r7, #20
 8017814:	46bd      	mov	sp, r7
 8017816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781a:	4770      	bx	lr
 801781c:	240016bc 	.word	0x240016bc

08017820 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017820:	b480      	push	{r7}
 8017822:	b085      	sub	sp, #20
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	3b01      	subs	r3, #1
 801782c:	607b      	str	r3, [r7, #4]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2b01      	cmp	r3, #1
 8017832:	d825      	bhi.n	8017880 <dec_lock+0x60>
		n = Files[i].ctr;
 8017834:	4a17      	ldr	r2, [pc, #92]	; (8017894 <dec_lock+0x74>)
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	011b      	lsls	r3, r3, #4
 801783a:	4413      	add	r3, r2
 801783c:	330c      	adds	r3, #12
 801783e:	881b      	ldrh	r3, [r3, #0]
 8017840:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017842:	89fb      	ldrh	r3, [r7, #14]
 8017844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017848:	d101      	bne.n	801784e <dec_lock+0x2e>
 801784a:	2300      	movs	r3, #0
 801784c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801784e:	89fb      	ldrh	r3, [r7, #14]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d002      	beq.n	801785a <dec_lock+0x3a>
 8017854:	89fb      	ldrh	r3, [r7, #14]
 8017856:	3b01      	subs	r3, #1
 8017858:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801785a:	4a0e      	ldr	r2, [pc, #56]	; (8017894 <dec_lock+0x74>)
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	011b      	lsls	r3, r3, #4
 8017860:	4413      	add	r3, r2
 8017862:	330c      	adds	r3, #12
 8017864:	89fa      	ldrh	r2, [r7, #14]
 8017866:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017868:	89fb      	ldrh	r3, [r7, #14]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d105      	bne.n	801787a <dec_lock+0x5a>
 801786e:	4a09      	ldr	r2, [pc, #36]	; (8017894 <dec_lock+0x74>)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	011b      	lsls	r3, r3, #4
 8017874:	4413      	add	r3, r2
 8017876:	2200      	movs	r2, #0
 8017878:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801787a:	2300      	movs	r3, #0
 801787c:	737b      	strb	r3, [r7, #13]
 801787e:	e001      	b.n	8017884 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017880:	2302      	movs	r3, #2
 8017882:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017884:	7b7b      	ldrb	r3, [r7, #13]
}
 8017886:	4618      	mov	r0, r3
 8017888:	3714      	adds	r7, #20
 801788a:	46bd      	mov	sp, r7
 801788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017890:	4770      	bx	lr
 8017892:	bf00      	nop
 8017894:	240016bc 	.word	0x240016bc

08017898 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017898:	b480      	push	{r7}
 801789a:	b085      	sub	sp, #20
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80178a0:	2300      	movs	r3, #0
 80178a2:	60fb      	str	r3, [r7, #12]
 80178a4:	e010      	b.n	80178c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80178a6:	4a0d      	ldr	r2, [pc, #52]	; (80178dc <clear_lock+0x44>)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	011b      	lsls	r3, r3, #4
 80178ac:	4413      	add	r3, r2
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	687a      	ldr	r2, [r7, #4]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d105      	bne.n	80178c2 <clear_lock+0x2a>
 80178b6:	4a09      	ldr	r2, [pc, #36]	; (80178dc <clear_lock+0x44>)
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	011b      	lsls	r3, r3, #4
 80178bc:	4413      	add	r3, r2
 80178be:	2200      	movs	r2, #0
 80178c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	3301      	adds	r3, #1
 80178c6:	60fb      	str	r3, [r7, #12]
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	d9eb      	bls.n	80178a6 <clear_lock+0xe>
	}
}
 80178ce:	bf00      	nop
 80178d0:	bf00      	nop
 80178d2:	3714      	adds	r7, #20
 80178d4:	46bd      	mov	sp, r7
 80178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178da:	4770      	bx	lr
 80178dc:	240016bc 	.word	0x240016bc

080178e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b086      	sub	sp, #24
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80178e8:	2300      	movs	r3, #0
 80178ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	78db      	ldrb	r3, [r3, #3]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d034      	beq.n	801795e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	7858      	ldrb	r0, [r3, #1]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017904:	2301      	movs	r3, #1
 8017906:	697a      	ldr	r2, [r7, #20]
 8017908:	f7ff fd40 	bl	801738c <disk_write>
 801790c:	4603      	mov	r3, r0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d002      	beq.n	8017918 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017912:	2301      	movs	r3, #1
 8017914:	73fb      	strb	r3, [r7, #15]
 8017916:	e022      	b.n	801795e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	2200      	movs	r2, #0
 801791c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017922:	697a      	ldr	r2, [r7, #20]
 8017924:	1ad2      	subs	r2, r2, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6a1b      	ldr	r3, [r3, #32]
 801792a:	429a      	cmp	r2, r3
 801792c:	d217      	bcs.n	801795e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	789b      	ldrb	r3, [r3, #2]
 8017932:	613b      	str	r3, [r7, #16]
 8017934:	e010      	b.n	8017958 <sync_window+0x78>
					wsect += fs->fsize;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6a1b      	ldr	r3, [r3, #32]
 801793a:	697a      	ldr	r2, [r7, #20]
 801793c:	4413      	add	r3, r2
 801793e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	7858      	ldrb	r0, [r3, #1]
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801794a:	2301      	movs	r3, #1
 801794c:	697a      	ldr	r2, [r7, #20]
 801794e:	f7ff fd1d 	bl	801738c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	3b01      	subs	r3, #1
 8017956:	613b      	str	r3, [r7, #16]
 8017958:	693b      	ldr	r3, [r7, #16]
 801795a:	2b01      	cmp	r3, #1
 801795c:	d8eb      	bhi.n	8017936 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017960:	4618      	mov	r0, r3
 8017962:	3718      	adds	r7, #24
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b084      	sub	sp, #16
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
 8017970:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017972:	2300      	movs	r3, #0
 8017974:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801797a:	683a      	ldr	r2, [r7, #0]
 801797c:	429a      	cmp	r2, r3
 801797e:	d01b      	beq.n	80179b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f7ff ffad 	bl	80178e0 <sync_window>
 8017986:	4603      	mov	r3, r0
 8017988:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801798a:	7bfb      	ldrb	r3, [r7, #15]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d113      	bne.n	80179b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	7858      	ldrb	r0, [r3, #1]
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801799a:	2301      	movs	r3, #1
 801799c:	683a      	ldr	r2, [r7, #0]
 801799e:	f7ff fcd5 	bl	801734c <disk_read>
 80179a2:	4603      	mov	r3, r0
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d004      	beq.n	80179b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80179a8:	f04f 33ff 	mov.w	r3, #4294967295
 80179ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80179ae:	2301      	movs	r3, #1
 80179b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	683a      	ldr	r2, [r7, #0]
 80179b6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80179b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3710      	adds	r7, #16
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
	...

080179c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b084      	sub	sp, #16
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f7ff ff87 	bl	80178e0 <sync_window>
 80179d2:	4603      	mov	r3, r0
 80179d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80179d6:	7bfb      	ldrb	r3, [r7, #15]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d159      	bne.n	8017a90 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	2b03      	cmp	r3, #3
 80179e2:	d149      	bne.n	8017a78 <sync_fs+0xb4>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	791b      	ldrb	r3, [r3, #4]
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d145      	bne.n	8017a78 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	899b      	ldrh	r3, [r3, #12]
 80179f6:	461a      	mov	r2, r3
 80179f8:	2100      	movs	r1, #0
 80179fa:	f7ff fda8 	bl	801754e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	3338      	adds	r3, #56	; 0x38
 8017a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017a06:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7ff fd37 	bl	801747e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	3338      	adds	r3, #56	; 0x38
 8017a14:	4921      	ldr	r1, [pc, #132]	; (8017a9c <sync_fs+0xd8>)
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7ff fd4c 	bl	80174b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	3338      	adds	r3, #56	; 0x38
 8017a20:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017a24:	491e      	ldr	r1, [pc, #120]	; (8017aa0 <sync_fs+0xdc>)
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7ff fd44 	bl	80174b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	3338      	adds	r3, #56	; 0x38
 8017a30:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	699b      	ldr	r3, [r3, #24]
 8017a38:	4619      	mov	r1, r3
 8017a3a:	4610      	mov	r0, r2
 8017a3c:	f7ff fd3a 	bl	80174b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	3338      	adds	r3, #56	; 0x38
 8017a44:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	695b      	ldr	r3, [r3, #20]
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	4610      	mov	r0, r2
 8017a50:	f7ff fd30 	bl	80174b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a58:	1c5a      	adds	r2, r3, #1
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	7858      	ldrb	r0, [r3, #1]
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017a6c:	2301      	movs	r3, #1
 8017a6e:	f7ff fc8d 	bl	801738c <disk_write>
			fs->fsi_flag = 0;
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	2200      	movs	r2, #0
 8017a76:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	785b      	ldrb	r3, [r3, #1]
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	2100      	movs	r1, #0
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7ff fca3 	bl	80173cc <disk_ioctl>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d001      	beq.n	8017a90 <sync_fs+0xcc>
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3710      	adds	r7, #16
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}
 8017a9a:	bf00      	nop
 8017a9c:	41615252 	.word	0x41615252
 8017aa0:	61417272 	.word	0x61417272

08017aa4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	b083      	sub	sp, #12
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017aae:	683b      	ldr	r3, [r7, #0]
 8017ab0:	3b02      	subs	r3, #2
 8017ab2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	69db      	ldr	r3, [r3, #28]
 8017ab8:	3b02      	subs	r3, #2
 8017aba:	683a      	ldr	r2, [r7, #0]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d301      	bcc.n	8017ac4 <clust2sect+0x20>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	e008      	b.n	8017ad6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	895b      	ldrh	r3, [r3, #10]
 8017ac8:	461a      	mov	r2, r3
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	fb03 f202 	mul.w	r2, r3, r2
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad4:	4413      	add	r3, r2
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	370c      	adds	r7, #12
 8017ada:	46bd      	mov	sp, r7
 8017adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae0:	4770      	bx	lr

08017ae2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017ae2:	b580      	push	{r7, lr}
 8017ae4:	b086      	sub	sp, #24
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	6078      	str	r0, [r7, #4]
 8017aea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d904      	bls.n	8017b02 <get_fat+0x20>
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	69db      	ldr	r3, [r3, #28]
 8017afc:	683a      	ldr	r2, [r7, #0]
 8017afe:	429a      	cmp	r2, r3
 8017b00:	d302      	bcc.n	8017b08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017b02:	2301      	movs	r3, #1
 8017b04:	617b      	str	r3, [r7, #20]
 8017b06:	e0bb      	b.n	8017c80 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017b08:	f04f 33ff 	mov.w	r3, #4294967295
 8017b0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017b0e:	693b      	ldr	r3, [r7, #16]
 8017b10:	781b      	ldrb	r3, [r3, #0]
 8017b12:	2b03      	cmp	r3, #3
 8017b14:	f000 8083 	beq.w	8017c1e <get_fat+0x13c>
 8017b18:	2b03      	cmp	r3, #3
 8017b1a:	f300 80a7 	bgt.w	8017c6c <get_fat+0x18a>
 8017b1e:	2b01      	cmp	r3, #1
 8017b20:	d002      	beq.n	8017b28 <get_fat+0x46>
 8017b22:	2b02      	cmp	r3, #2
 8017b24:	d056      	beq.n	8017bd4 <get_fat+0xf2>
 8017b26:	e0a1      	b.n	8017c6c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	60fb      	str	r3, [r7, #12]
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	085b      	lsrs	r3, r3, #1
 8017b30:	68fa      	ldr	r2, [r7, #12]
 8017b32:	4413      	add	r3, r2
 8017b34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017b36:	693b      	ldr	r3, [r7, #16]
 8017b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b3a:	693b      	ldr	r3, [r7, #16]
 8017b3c:	899b      	ldrh	r3, [r3, #12]
 8017b3e:	4619      	mov	r1, r3
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b46:	4413      	add	r3, r2
 8017b48:	4619      	mov	r1, r3
 8017b4a:	6938      	ldr	r0, [r7, #16]
 8017b4c:	f7ff ff0c 	bl	8017968 <move_window>
 8017b50:	4603      	mov	r3, r0
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	f040 808d 	bne.w	8017c72 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	1c5a      	adds	r2, r3, #1
 8017b5c:	60fa      	str	r2, [r7, #12]
 8017b5e:	693a      	ldr	r2, [r7, #16]
 8017b60:	8992      	ldrh	r2, [r2, #12]
 8017b62:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b66:	fb01 f202 	mul.w	r2, r1, r2
 8017b6a:	1a9b      	subs	r3, r3, r2
 8017b6c:	693a      	ldr	r2, [r7, #16]
 8017b6e:	4413      	add	r3, r2
 8017b70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017b74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	899b      	ldrh	r3, [r3, #12]
 8017b7e:	4619      	mov	r1, r3
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b86:	4413      	add	r3, r2
 8017b88:	4619      	mov	r1, r3
 8017b8a:	6938      	ldr	r0, [r7, #16]
 8017b8c:	f7ff feec 	bl	8017968 <move_window>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d16f      	bne.n	8017c76 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017b96:	693b      	ldr	r3, [r7, #16]
 8017b98:	899b      	ldrh	r3, [r3, #12]
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ba2:	fb01 f202 	mul.w	r2, r1, r2
 8017ba6:	1a9b      	subs	r3, r3, r2
 8017ba8:	693a      	ldr	r2, [r7, #16]
 8017baa:	4413      	add	r3, r2
 8017bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017bb0:	021b      	lsls	r3, r3, #8
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	4313      	orrs	r3, r2
 8017bb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	f003 0301 	and.w	r3, r3, #1
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d002      	beq.n	8017bca <get_fat+0xe8>
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	091b      	lsrs	r3, r3, #4
 8017bc8:	e002      	b.n	8017bd0 <get_fat+0xee>
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017bd0:	617b      	str	r3, [r7, #20]
			break;
 8017bd2:	e055      	b.n	8017c80 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017bd4:	693b      	ldr	r3, [r7, #16]
 8017bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	899b      	ldrh	r3, [r3, #12]
 8017bdc:	085b      	lsrs	r3, r3, #1
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	4619      	mov	r1, r3
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8017be8:	4413      	add	r3, r2
 8017bea:	4619      	mov	r1, r3
 8017bec:	6938      	ldr	r0, [r7, #16]
 8017bee:	f7ff febb 	bl	8017968 <move_window>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d140      	bne.n	8017c7a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	005b      	lsls	r3, r3, #1
 8017c02:	693a      	ldr	r2, [r7, #16]
 8017c04:	8992      	ldrh	r2, [r2, #12]
 8017c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8017c0a:	fb00 f202 	mul.w	r2, r0, r2
 8017c0e:	1a9b      	subs	r3, r3, r2
 8017c10:	440b      	add	r3, r1
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7ff fbf8 	bl	8017408 <ld_word>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	617b      	str	r3, [r7, #20]
			break;
 8017c1c:	e030      	b.n	8017c80 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	899b      	ldrh	r3, [r3, #12]
 8017c26:	089b      	lsrs	r3, r3, #2
 8017c28:	b29b      	uxth	r3, r3
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c32:	4413      	add	r3, r2
 8017c34:	4619      	mov	r1, r3
 8017c36:	6938      	ldr	r0, [r7, #16]
 8017c38:	f7ff fe96 	bl	8017968 <move_window>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d11d      	bne.n	8017c7e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017c42:	693b      	ldr	r3, [r7, #16]
 8017c44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	009b      	lsls	r3, r3, #2
 8017c4c:	693a      	ldr	r2, [r7, #16]
 8017c4e:	8992      	ldrh	r2, [r2, #12]
 8017c50:	fbb3 f0f2 	udiv	r0, r3, r2
 8017c54:	fb00 f202 	mul.w	r2, r0, r2
 8017c58:	1a9b      	subs	r3, r3, r2
 8017c5a:	440b      	add	r3, r1
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7ff fbeb 	bl	8017438 <ld_dword>
 8017c62:	4603      	mov	r3, r0
 8017c64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017c68:	617b      	str	r3, [r7, #20]
			break;
 8017c6a:	e009      	b.n	8017c80 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	617b      	str	r3, [r7, #20]
 8017c70:	e006      	b.n	8017c80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017c72:	bf00      	nop
 8017c74:	e004      	b.n	8017c80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017c76:	bf00      	nop
 8017c78:	e002      	b.n	8017c80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017c7a:	bf00      	nop
 8017c7c:	e000      	b.n	8017c80 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017c7e:	bf00      	nop
		}
	}

	return val;
 8017c80:	697b      	ldr	r3, [r7, #20]
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	3718      	adds	r7, #24
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}

08017c8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017c8a:	b590      	push	{r4, r7, lr}
 8017c8c:	b089      	sub	sp, #36	; 0x24
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	60f8      	str	r0, [r7, #12]
 8017c92:	60b9      	str	r1, [r7, #8]
 8017c94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017c96:	2302      	movs	r3, #2
 8017c98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	2b01      	cmp	r3, #1
 8017c9e:	f240 8102 	bls.w	8017ea6 <put_fat+0x21c>
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	69db      	ldr	r3, [r3, #28]
 8017ca6:	68ba      	ldr	r2, [r7, #8]
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	f080 80fc 	bcs.w	8017ea6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	2b03      	cmp	r3, #3
 8017cb4:	f000 80b6 	beq.w	8017e24 <put_fat+0x19a>
 8017cb8:	2b03      	cmp	r3, #3
 8017cba:	f300 80fd 	bgt.w	8017eb8 <put_fat+0x22e>
 8017cbe:	2b01      	cmp	r3, #1
 8017cc0:	d003      	beq.n	8017cca <put_fat+0x40>
 8017cc2:	2b02      	cmp	r3, #2
 8017cc4:	f000 8083 	beq.w	8017dce <put_fat+0x144>
 8017cc8:	e0f6      	b.n	8017eb8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	61bb      	str	r3, [r7, #24]
 8017cce:	69bb      	ldr	r3, [r7, #24]
 8017cd0:	085b      	lsrs	r3, r3, #1
 8017cd2:	69ba      	ldr	r2, [r7, #24]
 8017cd4:	4413      	add	r3, r2
 8017cd6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	899b      	ldrh	r3, [r3, #12]
 8017ce0:	4619      	mov	r1, r3
 8017ce2:	69bb      	ldr	r3, [r7, #24]
 8017ce4:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ce8:	4413      	add	r3, r2
 8017cea:	4619      	mov	r1, r3
 8017cec:	68f8      	ldr	r0, [r7, #12]
 8017cee:	f7ff fe3b 	bl	8017968 <move_window>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017cf6:	7ffb      	ldrb	r3, [r7, #31]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	f040 80d6 	bne.w	8017eaa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017d04:	69bb      	ldr	r3, [r7, #24]
 8017d06:	1c5a      	adds	r2, r3, #1
 8017d08:	61ba      	str	r2, [r7, #24]
 8017d0a:	68fa      	ldr	r2, [r7, #12]
 8017d0c:	8992      	ldrh	r2, [r2, #12]
 8017d0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d12:	fb00 f202 	mul.w	r2, r0, r2
 8017d16:	1a9b      	subs	r3, r3, r2
 8017d18:	440b      	add	r3, r1
 8017d1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017d1c:	68bb      	ldr	r3, [r7, #8]
 8017d1e:	f003 0301 	and.w	r3, r3, #1
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d00d      	beq.n	8017d42 <put_fat+0xb8>
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	781b      	ldrb	r3, [r3, #0]
 8017d2a:	b25b      	sxtb	r3, r3
 8017d2c:	f003 030f 	and.w	r3, r3, #15
 8017d30:	b25a      	sxtb	r2, r3
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	011b      	lsls	r3, r3, #4
 8017d38:	b25b      	sxtb	r3, r3
 8017d3a:	4313      	orrs	r3, r2
 8017d3c:	b25b      	sxtb	r3, r3
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	e001      	b.n	8017d46 <put_fat+0xbc>
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	697a      	ldr	r2, [r7, #20]
 8017d48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	2201      	movs	r2, #1
 8017d4e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	899b      	ldrh	r3, [r3, #12]
 8017d58:	4619      	mov	r1, r3
 8017d5a:	69bb      	ldr	r3, [r7, #24]
 8017d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d60:	4413      	add	r3, r2
 8017d62:	4619      	mov	r1, r3
 8017d64:	68f8      	ldr	r0, [r7, #12]
 8017d66:	f7ff fdff 	bl	8017968 <move_window>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017d6e:	7ffb      	ldrb	r3, [r7, #31]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f040 809c 	bne.w	8017eae <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	899b      	ldrh	r3, [r3, #12]
 8017d80:	461a      	mov	r2, r3
 8017d82:	69bb      	ldr	r3, [r7, #24]
 8017d84:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d88:	fb00 f202 	mul.w	r2, r0, r2
 8017d8c:	1a9b      	subs	r3, r3, r2
 8017d8e:	440b      	add	r3, r1
 8017d90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	f003 0301 	and.w	r3, r3, #1
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d003      	beq.n	8017da4 <put_fat+0x11a>
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	091b      	lsrs	r3, r3, #4
 8017da0:	b2db      	uxtb	r3, r3
 8017da2:	e00e      	b.n	8017dc2 <put_fat+0x138>
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	b25b      	sxtb	r3, r3
 8017daa:	f023 030f 	bic.w	r3, r3, #15
 8017dae:	b25a      	sxtb	r2, r3
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	0a1b      	lsrs	r3, r3, #8
 8017db4:	b25b      	sxtb	r3, r3
 8017db6:	f003 030f 	and.w	r3, r3, #15
 8017dba:	b25b      	sxtb	r3, r3
 8017dbc:	4313      	orrs	r3, r2
 8017dbe:	b25b      	sxtb	r3, r3
 8017dc0:	b2db      	uxtb	r3, r3
 8017dc2:	697a      	ldr	r2, [r7, #20]
 8017dc4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	2201      	movs	r2, #1
 8017dca:	70da      	strb	r2, [r3, #3]
			break;
 8017dcc:	e074      	b.n	8017eb8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	899b      	ldrh	r3, [r3, #12]
 8017dd6:	085b      	lsrs	r3, r3, #1
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	4619      	mov	r1, r3
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8017de2:	4413      	add	r3, r2
 8017de4:	4619      	mov	r1, r3
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	f7ff fdbe 	bl	8017968 <move_window>
 8017dec:	4603      	mov	r3, r0
 8017dee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017df0:	7ffb      	ldrb	r3, [r7, #31]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d15d      	bne.n	8017eb2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	005b      	lsls	r3, r3, #1
 8017e00:	68fa      	ldr	r2, [r7, #12]
 8017e02:	8992      	ldrh	r2, [r2, #12]
 8017e04:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e08:	fb00 f202 	mul.w	r2, r0, r2
 8017e0c:	1a9b      	subs	r3, r3, r2
 8017e0e:	440b      	add	r3, r1
 8017e10:	687a      	ldr	r2, [r7, #4]
 8017e12:	b292      	uxth	r2, r2
 8017e14:	4611      	mov	r1, r2
 8017e16:	4618      	mov	r0, r3
 8017e18:	f7ff fb31 	bl	801747e <st_word>
			fs->wflag = 1;
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	2201      	movs	r2, #1
 8017e20:	70da      	strb	r2, [r3, #3]
			break;
 8017e22:	e049      	b.n	8017eb8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	899b      	ldrh	r3, [r3, #12]
 8017e2c:	089b      	lsrs	r3, r3, #2
 8017e2e:	b29b      	uxth	r3, r3
 8017e30:	4619      	mov	r1, r3
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e38:	4413      	add	r3, r2
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	68f8      	ldr	r0, [r7, #12]
 8017e3e:	f7ff fd93 	bl	8017968 <move_window>
 8017e42:	4603      	mov	r3, r0
 8017e44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017e46:	7ffb      	ldrb	r3, [r7, #31]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d134      	bne.n	8017eb6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	009b      	lsls	r3, r3, #2
 8017e5c:	68fa      	ldr	r2, [r7, #12]
 8017e5e:	8992      	ldrh	r2, [r2, #12]
 8017e60:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e64:	fb00 f202 	mul.w	r2, r0, r2
 8017e68:	1a9b      	subs	r3, r3, r2
 8017e6a:	440b      	add	r3, r1
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f7ff fae3 	bl	8017438 <ld_dword>
 8017e72:	4603      	mov	r3, r0
 8017e74:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017e78:	4323      	orrs	r3, r4
 8017e7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	68fa      	ldr	r2, [r7, #12]
 8017e88:	8992      	ldrh	r2, [r2, #12]
 8017e8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e8e:	fb00 f202 	mul.w	r2, r0, r2
 8017e92:	1a9b      	subs	r3, r3, r2
 8017e94:	440b      	add	r3, r1
 8017e96:	6879      	ldr	r1, [r7, #4]
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f7ff fb0b 	bl	80174b4 <st_dword>
			fs->wflag = 1;
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	2201      	movs	r2, #1
 8017ea2:	70da      	strb	r2, [r3, #3]
			break;
 8017ea4:	e008      	b.n	8017eb8 <put_fat+0x22e>
		}
	}
 8017ea6:	bf00      	nop
 8017ea8:	e006      	b.n	8017eb8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017eaa:	bf00      	nop
 8017eac:	e004      	b.n	8017eb8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017eae:	bf00      	nop
 8017eb0:	e002      	b.n	8017eb8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017eb2:	bf00      	nop
 8017eb4:	e000      	b.n	8017eb8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017eb6:	bf00      	nop
	return res;
 8017eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8017eba:	4618      	mov	r0, r3
 8017ebc:	3724      	adds	r7, #36	; 0x24
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd90      	pop	{r4, r7, pc}

08017ec2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017ec2:	b580      	push	{r7, lr}
 8017ec4:	b088      	sub	sp, #32
 8017ec6:	af00      	add	r7, sp, #0
 8017ec8:	60f8      	str	r0, [r7, #12]
 8017eca:	60b9      	str	r1, [r7, #8]
 8017ecc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	2b01      	cmp	r3, #1
 8017edc:	d904      	bls.n	8017ee8 <remove_chain+0x26>
 8017ede:	69bb      	ldr	r3, [r7, #24]
 8017ee0:	69db      	ldr	r3, [r3, #28]
 8017ee2:	68ba      	ldr	r2, [r7, #8]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d301      	bcc.n	8017eec <remove_chain+0x2a>
 8017ee8:	2302      	movs	r3, #2
 8017eea:	e04b      	b.n	8017f84 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d00c      	beq.n	8017f0c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8017ef6:	6879      	ldr	r1, [r7, #4]
 8017ef8:	69b8      	ldr	r0, [r7, #24]
 8017efa:	f7ff fec6 	bl	8017c8a <put_fat>
 8017efe:	4603      	mov	r3, r0
 8017f00:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017f02:	7ffb      	ldrb	r3, [r7, #31]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d001      	beq.n	8017f0c <remove_chain+0x4a>
 8017f08:	7ffb      	ldrb	r3, [r7, #31]
 8017f0a:	e03b      	b.n	8017f84 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017f0c:	68b9      	ldr	r1, [r7, #8]
 8017f0e:	68f8      	ldr	r0, [r7, #12]
 8017f10:	f7ff fde7 	bl	8017ae2 <get_fat>
 8017f14:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017f16:	697b      	ldr	r3, [r7, #20]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d031      	beq.n	8017f80 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	2b01      	cmp	r3, #1
 8017f20:	d101      	bne.n	8017f26 <remove_chain+0x64>
 8017f22:	2302      	movs	r3, #2
 8017f24:	e02e      	b.n	8017f84 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f2c:	d101      	bne.n	8017f32 <remove_chain+0x70>
 8017f2e:	2301      	movs	r3, #1
 8017f30:	e028      	b.n	8017f84 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017f32:	2200      	movs	r2, #0
 8017f34:	68b9      	ldr	r1, [r7, #8]
 8017f36:	69b8      	ldr	r0, [r7, #24]
 8017f38:	f7ff fea7 	bl	8017c8a <put_fat>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017f40:	7ffb      	ldrb	r3, [r7, #31]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d001      	beq.n	8017f4a <remove_chain+0x88>
 8017f46:	7ffb      	ldrb	r3, [r7, #31]
 8017f48:	e01c      	b.n	8017f84 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	699a      	ldr	r2, [r3, #24]
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	69db      	ldr	r3, [r3, #28]
 8017f52:	3b02      	subs	r3, #2
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d20b      	bcs.n	8017f70 <remove_chain+0xae>
			fs->free_clst++;
 8017f58:	69bb      	ldr	r3, [r7, #24]
 8017f5a:	699b      	ldr	r3, [r3, #24]
 8017f5c:	1c5a      	adds	r2, r3, #1
 8017f5e:	69bb      	ldr	r3, [r7, #24]
 8017f60:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8017f62:	69bb      	ldr	r3, [r7, #24]
 8017f64:	791b      	ldrb	r3, [r3, #4]
 8017f66:	f043 0301 	orr.w	r3, r3, #1
 8017f6a:	b2da      	uxtb	r2, r3
 8017f6c:	69bb      	ldr	r3, [r7, #24]
 8017f6e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017f70:	697b      	ldr	r3, [r7, #20]
 8017f72:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017f74:	69bb      	ldr	r3, [r7, #24]
 8017f76:	69db      	ldr	r3, [r3, #28]
 8017f78:	68ba      	ldr	r2, [r7, #8]
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d3c6      	bcc.n	8017f0c <remove_chain+0x4a>
 8017f7e:	e000      	b.n	8017f82 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017f80:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017f82:	2300      	movs	r3, #0
}
 8017f84:	4618      	mov	r0, r3
 8017f86:	3720      	adds	r7, #32
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b088      	sub	sp, #32
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d10d      	bne.n	8017fbe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017fa2:	693b      	ldr	r3, [r7, #16]
 8017fa4:	695b      	ldr	r3, [r3, #20]
 8017fa6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017fa8:	69bb      	ldr	r3, [r7, #24]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d004      	beq.n	8017fb8 <create_chain+0x2c>
 8017fae:	693b      	ldr	r3, [r7, #16]
 8017fb0:	69db      	ldr	r3, [r3, #28]
 8017fb2:	69ba      	ldr	r2, [r7, #24]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	d31b      	bcc.n	8017ff0 <create_chain+0x64>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	61bb      	str	r3, [r7, #24]
 8017fbc:	e018      	b.n	8017ff0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017fbe:	6839      	ldr	r1, [r7, #0]
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f7ff fd8e 	bl	8017ae2 <get_fat>
 8017fc6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d801      	bhi.n	8017fd2 <create_chain+0x46>
 8017fce:	2301      	movs	r3, #1
 8017fd0:	e070      	b.n	80180b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fd8:	d101      	bne.n	8017fde <create_chain+0x52>
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	e06a      	b.n	80180b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	69db      	ldr	r3, [r3, #28]
 8017fe2:	68fa      	ldr	r2, [r7, #12]
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d201      	bcs.n	8017fec <create_chain+0x60>
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	e063      	b.n	80180b4 <create_chain+0x128>
		scl = clst;
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017ff0:	69bb      	ldr	r3, [r7, #24]
 8017ff2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017ff4:	69fb      	ldr	r3, [r7, #28]
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	69db      	ldr	r3, [r3, #28]
 8017ffe:	69fa      	ldr	r2, [r7, #28]
 8018000:	429a      	cmp	r2, r3
 8018002:	d307      	bcc.n	8018014 <create_chain+0x88>
				ncl = 2;
 8018004:	2302      	movs	r3, #2
 8018006:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8018008:	69fa      	ldr	r2, [r7, #28]
 801800a:	69bb      	ldr	r3, [r7, #24]
 801800c:	429a      	cmp	r2, r3
 801800e:	d901      	bls.n	8018014 <create_chain+0x88>
 8018010:	2300      	movs	r3, #0
 8018012:	e04f      	b.n	80180b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018014:	69f9      	ldr	r1, [r7, #28]
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f7ff fd63 	bl	8017ae2 <get_fat>
 801801c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d00e      	beq.n	8018042 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	2b01      	cmp	r3, #1
 8018028:	d003      	beq.n	8018032 <create_chain+0xa6>
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018030:	d101      	bne.n	8018036 <create_chain+0xaa>
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	e03e      	b.n	80180b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018036:	69fa      	ldr	r2, [r7, #28]
 8018038:	69bb      	ldr	r3, [r7, #24]
 801803a:	429a      	cmp	r2, r3
 801803c:	d1da      	bne.n	8017ff4 <create_chain+0x68>
 801803e:	2300      	movs	r3, #0
 8018040:	e038      	b.n	80180b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018042:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018044:	f04f 32ff 	mov.w	r2, #4294967295
 8018048:	69f9      	ldr	r1, [r7, #28]
 801804a:	6938      	ldr	r0, [r7, #16]
 801804c:	f7ff fe1d 	bl	8017c8a <put_fat>
 8018050:	4603      	mov	r3, r0
 8018052:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018054:	7dfb      	ldrb	r3, [r7, #23]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d109      	bne.n	801806e <create_chain+0xe2>
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d006      	beq.n	801806e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018060:	69fa      	ldr	r2, [r7, #28]
 8018062:	6839      	ldr	r1, [r7, #0]
 8018064:	6938      	ldr	r0, [r7, #16]
 8018066:	f7ff fe10 	bl	8017c8a <put_fat>
 801806a:	4603      	mov	r3, r0
 801806c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801806e:	7dfb      	ldrb	r3, [r7, #23]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d116      	bne.n	80180a2 <create_chain+0x116>
		fs->last_clst = ncl;
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	69fa      	ldr	r2, [r7, #28]
 8018078:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801807a:	693b      	ldr	r3, [r7, #16]
 801807c:	699a      	ldr	r2, [r3, #24]
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	69db      	ldr	r3, [r3, #28]
 8018082:	3b02      	subs	r3, #2
 8018084:	429a      	cmp	r2, r3
 8018086:	d804      	bhi.n	8018092 <create_chain+0x106>
 8018088:	693b      	ldr	r3, [r7, #16]
 801808a:	699b      	ldr	r3, [r3, #24]
 801808c:	1e5a      	subs	r2, r3, #1
 801808e:	693b      	ldr	r3, [r7, #16]
 8018090:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8018092:	693b      	ldr	r3, [r7, #16]
 8018094:	791b      	ldrb	r3, [r3, #4]
 8018096:	f043 0301 	orr.w	r3, r3, #1
 801809a:	b2da      	uxtb	r2, r3
 801809c:	693b      	ldr	r3, [r7, #16]
 801809e:	711a      	strb	r2, [r3, #4]
 80180a0:	e007      	b.n	80180b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80180a2:	7dfb      	ldrb	r3, [r7, #23]
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	d102      	bne.n	80180ae <create_chain+0x122>
 80180a8:	f04f 33ff 	mov.w	r3, #4294967295
 80180ac:	e000      	b.n	80180b0 <create_chain+0x124>
 80180ae:	2301      	movs	r3, #1
 80180b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80180b2:	69fb      	ldr	r3, [r7, #28]
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3720      	adds	r7, #32
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80180bc:	b480      	push	{r7}
 80180be:	b087      	sub	sp, #28
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180d0:	3304      	adds	r3, #4
 80180d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	899b      	ldrh	r3, [r3, #12]
 80180d8:	461a      	mov	r2, r3
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80180e0:	68fa      	ldr	r2, [r7, #12]
 80180e2:	8952      	ldrh	r2, [r2, #10]
 80180e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80180e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	1d1a      	adds	r2, r3, #4
 80180ee:	613a      	str	r2, [r7, #16]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80180f4:	68bb      	ldr	r3, [r7, #8]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d101      	bne.n	80180fe <clmt_clust+0x42>
 80180fa:	2300      	movs	r3, #0
 80180fc:	e010      	b.n	8018120 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80180fe:	697a      	ldr	r2, [r7, #20]
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	429a      	cmp	r2, r3
 8018104:	d307      	bcc.n	8018116 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8018106:	697a      	ldr	r2, [r7, #20]
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	1ad3      	subs	r3, r2, r3
 801810c:	617b      	str	r3, [r7, #20]
 801810e:	693b      	ldr	r3, [r7, #16]
 8018110:	3304      	adds	r3, #4
 8018112:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018114:	e7e9      	b.n	80180ea <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8018116:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	681a      	ldr	r2, [r3, #0]
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	4413      	add	r3, r2
}
 8018120:	4618      	mov	r0, r3
 8018122:	371c      	adds	r7, #28
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr

0801812c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b086      	sub	sp, #24
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018142:	d204      	bcs.n	801814e <dir_sdi+0x22>
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	f003 031f 	and.w	r3, r3, #31
 801814a:	2b00      	cmp	r3, #0
 801814c:	d001      	beq.n	8018152 <dir_sdi+0x26>
		return FR_INT_ERR;
 801814e:	2302      	movs	r3, #2
 8018150:	e071      	b.n	8018236 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	683a      	ldr	r2, [r7, #0]
 8018156:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	689b      	ldr	r3, [r3, #8]
 801815c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801815e:	697b      	ldr	r3, [r7, #20]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d106      	bne.n	8018172 <dir_sdi+0x46>
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	2b02      	cmp	r3, #2
 801816a:	d902      	bls.n	8018172 <dir_sdi+0x46>
		clst = fs->dirbase;
 801816c:	693b      	ldr	r3, [r7, #16]
 801816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018170:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018172:	697b      	ldr	r3, [r7, #20]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d10c      	bne.n	8018192 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	095b      	lsrs	r3, r3, #5
 801817c:	693a      	ldr	r2, [r7, #16]
 801817e:	8912      	ldrh	r2, [r2, #8]
 8018180:	4293      	cmp	r3, r2
 8018182:	d301      	bcc.n	8018188 <dir_sdi+0x5c>
 8018184:	2302      	movs	r3, #2
 8018186:	e056      	b.n	8018236 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	61da      	str	r2, [r3, #28]
 8018190:	e02d      	b.n	80181ee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018192:	693b      	ldr	r3, [r7, #16]
 8018194:	895b      	ldrh	r3, [r3, #10]
 8018196:	461a      	mov	r2, r3
 8018198:	693b      	ldr	r3, [r7, #16]
 801819a:	899b      	ldrh	r3, [r3, #12]
 801819c:	fb02 f303 	mul.w	r3, r2, r3
 80181a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80181a2:	e019      	b.n	80181d8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6979      	ldr	r1, [r7, #20]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7ff fc9a 	bl	8017ae2 <get_fat>
 80181ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80181b0:	697b      	ldr	r3, [r7, #20]
 80181b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181b6:	d101      	bne.n	80181bc <dir_sdi+0x90>
 80181b8:	2301      	movs	r3, #1
 80181ba:	e03c      	b.n	8018236 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80181bc:	697b      	ldr	r3, [r7, #20]
 80181be:	2b01      	cmp	r3, #1
 80181c0:	d904      	bls.n	80181cc <dir_sdi+0xa0>
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	69db      	ldr	r3, [r3, #28]
 80181c6:	697a      	ldr	r2, [r7, #20]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d301      	bcc.n	80181d0 <dir_sdi+0xa4>
 80181cc:	2302      	movs	r3, #2
 80181ce:	e032      	b.n	8018236 <dir_sdi+0x10a>
			ofs -= csz;
 80181d0:	683a      	ldr	r2, [r7, #0]
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	1ad3      	subs	r3, r2, r3
 80181d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80181d8:	683a      	ldr	r2, [r7, #0]
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	429a      	cmp	r2, r3
 80181de:	d2e1      	bcs.n	80181a4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80181e0:	6979      	ldr	r1, [r7, #20]
 80181e2:	6938      	ldr	r0, [r7, #16]
 80181e4:	f7ff fc5e 	bl	8017aa4 <clust2sect>
 80181e8:	4602      	mov	r2, r0
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	697a      	ldr	r2, [r7, #20]
 80181f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	69db      	ldr	r3, [r3, #28]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d101      	bne.n	8018200 <dir_sdi+0xd4>
 80181fc:	2302      	movs	r3, #2
 80181fe:	e01a      	b.n	8018236 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	69da      	ldr	r2, [r3, #28]
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	899b      	ldrh	r3, [r3, #12]
 8018208:	4619      	mov	r1, r3
 801820a:	683b      	ldr	r3, [r7, #0]
 801820c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018210:	441a      	add	r2, r3
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018216:	693b      	ldr	r3, [r7, #16]
 8018218:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	899b      	ldrh	r3, [r3, #12]
 8018220:	461a      	mov	r2, r3
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	fbb3 f0f2 	udiv	r0, r3, r2
 8018228:	fb00 f202 	mul.w	r2, r0, r2
 801822c:	1a9b      	subs	r3, r3, r2
 801822e:	18ca      	adds	r2, r1, r3
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018234:	2300      	movs	r3, #0
}
 8018236:	4618      	mov	r0, r3
 8018238:	3718      	adds	r7, #24
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}

0801823e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801823e:	b580      	push	{r7, lr}
 8018240:	b086      	sub	sp, #24
 8018242:	af00      	add	r7, sp, #0
 8018244:	6078      	str	r0, [r7, #4]
 8018246:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	695b      	ldr	r3, [r3, #20]
 8018252:	3320      	adds	r3, #32
 8018254:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	69db      	ldr	r3, [r3, #28]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d003      	beq.n	8018266 <dir_next+0x28>
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018264:	d301      	bcc.n	801826a <dir_next+0x2c>
 8018266:	2304      	movs	r3, #4
 8018268:	e0bb      	b.n	80183e2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	899b      	ldrh	r3, [r3, #12]
 801826e:	461a      	mov	r2, r3
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	fbb3 f1f2 	udiv	r1, r3, r2
 8018276:	fb01 f202 	mul.w	r2, r1, r2
 801827a:	1a9b      	subs	r3, r3, r2
 801827c:	2b00      	cmp	r3, #0
 801827e:	f040 809d 	bne.w	80183bc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	69db      	ldr	r3, [r3, #28]
 8018286:	1c5a      	adds	r2, r3, #1
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	699b      	ldr	r3, [r3, #24]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d10b      	bne.n	80182ac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018294:	68bb      	ldr	r3, [r7, #8]
 8018296:	095b      	lsrs	r3, r3, #5
 8018298:	68fa      	ldr	r2, [r7, #12]
 801829a:	8912      	ldrh	r2, [r2, #8]
 801829c:	4293      	cmp	r3, r2
 801829e:	f0c0 808d 	bcc.w	80183bc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2200      	movs	r2, #0
 80182a6:	61da      	str	r2, [r3, #28]
 80182a8:	2304      	movs	r3, #4
 80182aa:	e09a      	b.n	80183e2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	899b      	ldrh	r3, [r3, #12]
 80182b0:	461a      	mov	r2, r3
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80182b8:	68fa      	ldr	r2, [r7, #12]
 80182ba:	8952      	ldrh	r2, [r2, #10]
 80182bc:	3a01      	subs	r2, #1
 80182be:	4013      	ands	r3, r2
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d17b      	bne.n	80183bc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	699b      	ldr	r3, [r3, #24]
 80182ca:	4619      	mov	r1, r3
 80182cc:	4610      	mov	r0, r2
 80182ce:	f7ff fc08 	bl	8017ae2 <get_fat>
 80182d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	2b01      	cmp	r3, #1
 80182d8:	d801      	bhi.n	80182de <dir_next+0xa0>
 80182da:	2302      	movs	r3, #2
 80182dc:	e081      	b.n	80183e2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182e4:	d101      	bne.n	80182ea <dir_next+0xac>
 80182e6:	2301      	movs	r3, #1
 80182e8:	e07b      	b.n	80183e2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	69db      	ldr	r3, [r3, #28]
 80182ee:	697a      	ldr	r2, [r7, #20]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d359      	bcc.n	80183a8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d104      	bne.n	8018304 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2200      	movs	r2, #0
 80182fe:	61da      	str	r2, [r3, #28]
 8018300:	2304      	movs	r3, #4
 8018302:	e06e      	b.n	80183e2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018304:	687a      	ldr	r2, [r7, #4]
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	699b      	ldr	r3, [r3, #24]
 801830a:	4619      	mov	r1, r3
 801830c:	4610      	mov	r0, r2
 801830e:	f7ff fe3d 	bl	8017f8c <create_chain>
 8018312:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d101      	bne.n	801831e <dir_next+0xe0>
 801831a:	2307      	movs	r3, #7
 801831c:	e061      	b.n	80183e2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801831e:	697b      	ldr	r3, [r7, #20]
 8018320:	2b01      	cmp	r3, #1
 8018322:	d101      	bne.n	8018328 <dir_next+0xea>
 8018324:	2302      	movs	r3, #2
 8018326:	e05c      	b.n	80183e2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801832e:	d101      	bne.n	8018334 <dir_next+0xf6>
 8018330:	2301      	movs	r3, #1
 8018332:	e056      	b.n	80183e2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018334:	68f8      	ldr	r0, [r7, #12]
 8018336:	f7ff fad3 	bl	80178e0 <sync_window>
 801833a:	4603      	mov	r3, r0
 801833c:	2b00      	cmp	r3, #0
 801833e:	d001      	beq.n	8018344 <dir_next+0x106>
 8018340:	2301      	movs	r3, #1
 8018342:	e04e      	b.n	80183e2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	899b      	ldrh	r3, [r3, #12]
 801834e:	461a      	mov	r2, r3
 8018350:	2100      	movs	r1, #0
 8018352:	f7ff f8fc 	bl	801754e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018356:	2300      	movs	r3, #0
 8018358:	613b      	str	r3, [r7, #16]
 801835a:	6979      	ldr	r1, [r7, #20]
 801835c:	68f8      	ldr	r0, [r7, #12]
 801835e:	f7ff fba1 	bl	8017aa4 <clust2sect>
 8018362:	4602      	mov	r2, r0
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	635a      	str	r2, [r3, #52]	; 0x34
 8018368:	e012      	b.n	8018390 <dir_next+0x152>
						fs->wflag = 1;
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	2201      	movs	r2, #1
 801836e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	f7ff fab5 	bl	80178e0 <sync_window>
 8018376:	4603      	mov	r3, r0
 8018378:	2b00      	cmp	r3, #0
 801837a:	d001      	beq.n	8018380 <dir_next+0x142>
 801837c:	2301      	movs	r3, #1
 801837e:	e030      	b.n	80183e2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	3301      	adds	r3, #1
 8018384:	613b      	str	r3, [r7, #16]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801838a:	1c5a      	adds	r2, r3, #1
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	635a      	str	r2, [r3, #52]	; 0x34
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	895b      	ldrh	r3, [r3, #10]
 8018394:	461a      	mov	r2, r3
 8018396:	693b      	ldr	r3, [r7, #16]
 8018398:	4293      	cmp	r3, r2
 801839a:	d3e6      	bcc.n	801836a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	1ad2      	subs	r2, r2, r3
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	697a      	ldr	r2, [r7, #20]
 80183ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80183ae:	6979      	ldr	r1, [r7, #20]
 80183b0:	68f8      	ldr	r0, [r7, #12]
 80183b2:	f7ff fb77 	bl	8017aa4 <clust2sect>
 80183b6:	4602      	mov	r2, r0
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	68ba      	ldr	r2, [r7, #8]
 80183c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	899b      	ldrh	r3, [r3, #12]
 80183cc:	461a      	mov	r2, r3
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80183d4:	fb00 f202 	mul.w	r2, r0, r2
 80183d8:	1a9b      	subs	r3, r3, r2
 80183da:	18ca      	adds	r2, r1, r3
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80183e0:	2300      	movs	r3, #0
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	3718      	adds	r7, #24
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}

080183ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80183ea:	b580      	push	{r7, lr}
 80183ec:	b086      	sub	sp, #24
 80183ee:	af00      	add	r7, sp, #0
 80183f0:	6078      	str	r0, [r7, #4]
 80183f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80183fa:	2100      	movs	r1, #0
 80183fc:	6878      	ldr	r0, [r7, #4]
 80183fe:	f7ff fe95 	bl	801812c <dir_sdi>
 8018402:	4603      	mov	r3, r0
 8018404:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018406:	7dfb      	ldrb	r3, [r7, #23]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d12b      	bne.n	8018464 <dir_alloc+0x7a>
		n = 0;
 801840c:	2300      	movs	r3, #0
 801840e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	69db      	ldr	r3, [r3, #28]
 8018414:	4619      	mov	r1, r3
 8018416:	68f8      	ldr	r0, [r7, #12]
 8018418:	f7ff faa6 	bl	8017968 <move_window>
 801841c:	4603      	mov	r3, r0
 801841e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018420:	7dfb      	ldrb	r3, [r7, #23]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d11d      	bne.n	8018462 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	6a1b      	ldr	r3, [r3, #32]
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	2be5      	cmp	r3, #229	; 0xe5
 801842e:	d004      	beq.n	801843a <dir_alloc+0x50>
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6a1b      	ldr	r3, [r3, #32]
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d107      	bne.n	801844a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	3301      	adds	r3, #1
 801843e:	613b      	str	r3, [r7, #16]
 8018440:	693a      	ldr	r2, [r7, #16]
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	429a      	cmp	r2, r3
 8018446:	d102      	bne.n	801844e <dir_alloc+0x64>
 8018448:	e00c      	b.n	8018464 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801844a:	2300      	movs	r3, #0
 801844c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801844e:	2101      	movs	r1, #1
 8018450:	6878      	ldr	r0, [r7, #4]
 8018452:	f7ff fef4 	bl	801823e <dir_next>
 8018456:	4603      	mov	r3, r0
 8018458:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801845a:	7dfb      	ldrb	r3, [r7, #23]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d0d7      	beq.n	8018410 <dir_alloc+0x26>
 8018460:	e000      	b.n	8018464 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018462:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018464:	7dfb      	ldrb	r3, [r7, #23]
 8018466:	2b04      	cmp	r3, #4
 8018468:	d101      	bne.n	801846e <dir_alloc+0x84>
 801846a:	2307      	movs	r3, #7
 801846c:	75fb      	strb	r3, [r7, #23]
	return res;
 801846e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018470:	4618      	mov	r0, r3
 8018472:	3718      	adds	r7, #24
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	331a      	adds	r3, #26
 8018486:	4618      	mov	r0, r3
 8018488:	f7fe ffbe 	bl	8017408 <ld_word>
 801848c:	4603      	mov	r3, r0
 801848e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	781b      	ldrb	r3, [r3, #0]
 8018494:	2b03      	cmp	r3, #3
 8018496:	d109      	bne.n	80184ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	3314      	adds	r3, #20
 801849c:	4618      	mov	r0, r3
 801849e:	f7fe ffb3 	bl	8017408 <ld_word>
 80184a2:	4603      	mov	r3, r0
 80184a4:	041b      	lsls	r3, r3, #16
 80184a6:	68fa      	ldr	r2, [r7, #12]
 80184a8:	4313      	orrs	r3, r2
 80184aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80184ac:	68fb      	ldr	r3, [r7, #12]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3710      	adds	r7, #16
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80184b6:	b580      	push	{r7, lr}
 80184b8:	b084      	sub	sp, #16
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	60f8      	str	r0, [r7, #12]
 80184be:	60b9      	str	r1, [r7, #8]
 80184c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	331a      	adds	r3, #26
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	b292      	uxth	r2, r2
 80184ca:	4611      	mov	r1, r2
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7fe ffd6 	bl	801747e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	2b03      	cmp	r3, #3
 80184d8:	d109      	bne.n	80184ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	f103 0214 	add.w	r2, r3, #20
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	0c1b      	lsrs	r3, r3, #16
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	4619      	mov	r1, r3
 80184e8:	4610      	mov	r0, r2
 80184ea:	f7fe ffc8 	bl	801747e <st_word>
	}
}
 80184ee:	bf00      	nop
 80184f0:	3710      	adds	r7, #16
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
	...

080184f8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80184f8:	b590      	push	{r4, r7, lr}
 80184fa:	b087      	sub	sp, #28
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
 8018500:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	331a      	adds	r3, #26
 8018506:	4618      	mov	r0, r3
 8018508:	f7fe ff7e 	bl	8017408 <ld_word>
 801850c:	4603      	mov	r3, r0
 801850e:	2b00      	cmp	r3, #0
 8018510:	d001      	beq.n	8018516 <cmp_lfn+0x1e>
 8018512:	2300      	movs	r3, #0
 8018514:	e059      	b.n	80185ca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801851e:	1e5a      	subs	r2, r3, #1
 8018520:	4613      	mov	r3, r2
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	4413      	add	r3, r2
 8018526:	009b      	lsls	r3, r3, #2
 8018528:	4413      	add	r3, r2
 801852a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801852c:	2301      	movs	r3, #1
 801852e:	81fb      	strh	r3, [r7, #14]
 8018530:	2300      	movs	r3, #0
 8018532:	613b      	str	r3, [r7, #16]
 8018534:	e033      	b.n	801859e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018536:	4a27      	ldr	r2, [pc, #156]	; (80185d4 <cmp_lfn+0xdc>)
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	4413      	add	r3, r2
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	461a      	mov	r2, r3
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	4413      	add	r3, r2
 8018544:	4618      	mov	r0, r3
 8018546:	f7fe ff5f 	bl	8017408 <ld_word>
 801854a:	4603      	mov	r3, r0
 801854c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801854e:	89fb      	ldrh	r3, [r7, #14]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d01a      	beq.n	801858a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	2bfe      	cmp	r3, #254	; 0xfe
 8018558:	d812      	bhi.n	8018580 <cmp_lfn+0x88>
 801855a:	89bb      	ldrh	r3, [r7, #12]
 801855c:	4618      	mov	r0, r3
 801855e:	f001 fe11 	bl	801a184 <ff_wtoupper>
 8018562:	4603      	mov	r3, r0
 8018564:	461c      	mov	r4, r3
 8018566:	697b      	ldr	r3, [r7, #20]
 8018568:	1c5a      	adds	r2, r3, #1
 801856a:	617a      	str	r2, [r7, #20]
 801856c:	005b      	lsls	r3, r3, #1
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	4413      	add	r3, r2
 8018572:	881b      	ldrh	r3, [r3, #0]
 8018574:	4618      	mov	r0, r3
 8018576:	f001 fe05 	bl	801a184 <ff_wtoupper>
 801857a:	4603      	mov	r3, r0
 801857c:	429c      	cmp	r4, r3
 801857e:	d001      	beq.n	8018584 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018580:	2300      	movs	r3, #0
 8018582:	e022      	b.n	80185ca <cmp_lfn+0xd2>
			}
			wc = uc;
 8018584:	89bb      	ldrh	r3, [r7, #12]
 8018586:	81fb      	strh	r3, [r7, #14]
 8018588:	e006      	b.n	8018598 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801858a:	89bb      	ldrh	r3, [r7, #12]
 801858c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018590:	4293      	cmp	r3, r2
 8018592:	d001      	beq.n	8018598 <cmp_lfn+0xa0>
 8018594:	2300      	movs	r3, #0
 8018596:	e018      	b.n	80185ca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	3301      	adds	r3, #1
 801859c:	613b      	str	r3, [r7, #16]
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	2b0c      	cmp	r3, #12
 80185a2:	d9c8      	bls.n	8018536 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d00b      	beq.n	80185c8 <cmp_lfn+0xd0>
 80185b0:	89fb      	ldrh	r3, [r7, #14]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d008      	beq.n	80185c8 <cmp_lfn+0xd0>
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	005b      	lsls	r3, r3, #1
 80185ba:	687a      	ldr	r2, [r7, #4]
 80185bc:	4413      	add	r3, r2
 80185be:	881b      	ldrh	r3, [r3, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d001      	beq.n	80185c8 <cmp_lfn+0xd0>
 80185c4:	2300      	movs	r3, #0
 80185c6:	e000      	b.n	80185ca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80185c8:	2301      	movs	r3, #1
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	371c      	adds	r7, #28
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd90      	pop	{r4, r7, pc}
 80185d2:	bf00      	nop
 80185d4:	0801f7b8 	.word	0x0801f7b8

080185d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b088      	sub	sp, #32
 80185dc:	af00      	add	r7, sp, #0
 80185de:	60f8      	str	r0, [r7, #12]
 80185e0:	60b9      	str	r1, [r7, #8]
 80185e2:	4611      	mov	r1, r2
 80185e4:	461a      	mov	r2, r3
 80185e6:	460b      	mov	r3, r1
 80185e8:	71fb      	strb	r3, [r7, #7]
 80185ea:	4613      	mov	r3, r2
 80185ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	330d      	adds	r3, #13
 80185f2:	79ba      	ldrb	r2, [r7, #6]
 80185f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80185f6:	68bb      	ldr	r3, [r7, #8]
 80185f8:	330b      	adds	r3, #11
 80185fa:	220f      	movs	r2, #15
 80185fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	330c      	adds	r3, #12
 8018602:	2200      	movs	r2, #0
 8018604:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	331a      	adds	r3, #26
 801860a:	2100      	movs	r1, #0
 801860c:	4618      	mov	r0, r3
 801860e:	f7fe ff36 	bl	801747e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018612:	79fb      	ldrb	r3, [r7, #7]
 8018614:	1e5a      	subs	r2, r3, #1
 8018616:	4613      	mov	r3, r2
 8018618:	005b      	lsls	r3, r3, #1
 801861a:	4413      	add	r3, r2
 801861c:	009b      	lsls	r3, r3, #2
 801861e:	4413      	add	r3, r2
 8018620:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018622:	2300      	movs	r3, #0
 8018624:	82fb      	strh	r3, [r7, #22]
 8018626:	2300      	movs	r3, #0
 8018628:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801862a:	8afb      	ldrh	r3, [r7, #22]
 801862c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018630:	4293      	cmp	r3, r2
 8018632:	d007      	beq.n	8018644 <put_lfn+0x6c>
 8018634:	69fb      	ldr	r3, [r7, #28]
 8018636:	1c5a      	adds	r2, r3, #1
 8018638:	61fa      	str	r2, [r7, #28]
 801863a:	005b      	lsls	r3, r3, #1
 801863c:	68fa      	ldr	r2, [r7, #12]
 801863e:	4413      	add	r3, r2
 8018640:	881b      	ldrh	r3, [r3, #0]
 8018642:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018644:	4a17      	ldr	r2, [pc, #92]	; (80186a4 <put_lfn+0xcc>)
 8018646:	69bb      	ldr	r3, [r7, #24]
 8018648:	4413      	add	r3, r2
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	461a      	mov	r2, r3
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	4413      	add	r3, r2
 8018652:	8afa      	ldrh	r2, [r7, #22]
 8018654:	4611      	mov	r1, r2
 8018656:	4618      	mov	r0, r3
 8018658:	f7fe ff11 	bl	801747e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801865c:	8afb      	ldrh	r3, [r7, #22]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d102      	bne.n	8018668 <put_lfn+0x90>
 8018662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018666:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018668:	69bb      	ldr	r3, [r7, #24]
 801866a:	3301      	adds	r3, #1
 801866c:	61bb      	str	r3, [r7, #24]
 801866e:	69bb      	ldr	r3, [r7, #24]
 8018670:	2b0c      	cmp	r3, #12
 8018672:	d9da      	bls.n	801862a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018674:	8afb      	ldrh	r3, [r7, #22]
 8018676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801867a:	4293      	cmp	r3, r2
 801867c:	d006      	beq.n	801868c <put_lfn+0xb4>
 801867e:	69fb      	ldr	r3, [r7, #28]
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	68fa      	ldr	r2, [r7, #12]
 8018684:	4413      	add	r3, r2
 8018686:	881b      	ldrh	r3, [r3, #0]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d103      	bne.n	8018694 <put_lfn+0xbc>
 801868c:	79fb      	ldrb	r3, [r7, #7]
 801868e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018692:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	79fa      	ldrb	r2, [r7, #7]
 8018698:	701a      	strb	r2, [r3, #0]
}
 801869a:	bf00      	nop
 801869c:	3720      	adds	r7, #32
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}
 80186a2:	bf00      	nop
 80186a4:	0801f7b8 	.word	0x0801f7b8

080186a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b08c      	sub	sp, #48	; 0x30
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	60f8      	str	r0, [r7, #12]
 80186b0:	60b9      	str	r1, [r7, #8]
 80186b2:	607a      	str	r2, [r7, #4]
 80186b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80186b6:	220b      	movs	r2, #11
 80186b8:	68b9      	ldr	r1, [r7, #8]
 80186ba:	68f8      	ldr	r0, [r7, #12]
 80186bc:	f7fe ff26 	bl	801750c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	2b05      	cmp	r3, #5
 80186c4:	d929      	bls.n	801871a <gen_numname+0x72>
		sr = seq;
 80186c6:	683b      	ldr	r3, [r7, #0]
 80186c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80186ca:	e020      	b.n	801870e <gen_numname+0x66>
			wc = *lfn++;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	1c9a      	adds	r2, r3, #2
 80186d0:	607a      	str	r2, [r7, #4]
 80186d2:	881b      	ldrh	r3, [r3, #0]
 80186d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80186d6:	2300      	movs	r3, #0
 80186d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80186da:	e015      	b.n	8018708 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80186dc:	69fb      	ldr	r3, [r7, #28]
 80186de:	005a      	lsls	r2, r3, #1
 80186e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186e2:	f003 0301 	and.w	r3, r3, #1
 80186e6:	4413      	add	r3, r2
 80186e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80186ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186ec:	085b      	lsrs	r3, r3, #1
 80186ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d003      	beq.n	8018702 <gen_numname+0x5a>
 80186fa:	69fa      	ldr	r2, [r7, #28]
 80186fc:	4b30      	ldr	r3, [pc, #192]	; (80187c0 <gen_numname+0x118>)
 80186fe:	4053      	eors	r3, r2
 8018700:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018704:	3301      	adds	r3, #1
 8018706:	62bb      	str	r3, [r7, #40]	; 0x28
 8018708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870a:	2b0f      	cmp	r3, #15
 801870c:	d9e6      	bls.n	80186dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	881b      	ldrh	r3, [r3, #0]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d1da      	bne.n	80186cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018716:	69fb      	ldr	r3, [r7, #28]
 8018718:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801871a:	2307      	movs	r3, #7
 801871c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	b2db      	uxtb	r3, r3
 8018722:	f003 030f 	and.w	r3, r3, #15
 8018726:	b2db      	uxtb	r3, r3
 8018728:	3330      	adds	r3, #48	; 0x30
 801872a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801872e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018732:	2b39      	cmp	r3, #57	; 0x39
 8018734:	d904      	bls.n	8018740 <gen_numname+0x98>
 8018736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801873a:	3307      	adds	r3, #7
 801873c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018742:	1e5a      	subs	r2, r3, #1
 8018744:	62ba      	str	r2, [r7, #40]	; 0x28
 8018746:	3330      	adds	r3, #48	; 0x30
 8018748:	443b      	add	r3, r7
 801874a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801874e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	091b      	lsrs	r3, r3, #4
 8018756:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d1df      	bne.n	801871e <gen_numname+0x76>
	ns[i] = '~';
 801875e:	f107 0214 	add.w	r2, r7, #20
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	4413      	add	r3, r2
 8018766:	227e      	movs	r2, #126	; 0x7e
 8018768:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801876a:	2300      	movs	r3, #0
 801876c:	627b      	str	r3, [r7, #36]	; 0x24
 801876e:	e002      	b.n	8018776 <gen_numname+0xce>
 8018770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018772:	3301      	adds	r3, #1
 8018774:	627b      	str	r3, [r7, #36]	; 0x24
 8018776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801877a:	429a      	cmp	r2, r3
 801877c:	d205      	bcs.n	801878a <gen_numname+0xe2>
 801877e:	68fa      	ldr	r2, [r7, #12]
 8018780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018782:	4413      	add	r3, r2
 8018784:	781b      	ldrb	r3, [r3, #0]
 8018786:	2b20      	cmp	r3, #32
 8018788:	d1f2      	bne.n	8018770 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801878c:	2b07      	cmp	r3, #7
 801878e:	d807      	bhi.n	80187a0 <gen_numname+0xf8>
 8018790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018792:	1c5a      	adds	r2, r3, #1
 8018794:	62ba      	str	r2, [r7, #40]	; 0x28
 8018796:	3330      	adds	r3, #48	; 0x30
 8018798:	443b      	add	r3, r7
 801879a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801879e:	e000      	b.n	80187a2 <gen_numname+0xfa>
 80187a0:	2120      	movs	r1, #32
 80187a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a4:	1c5a      	adds	r2, r3, #1
 80187a6:	627a      	str	r2, [r7, #36]	; 0x24
 80187a8:	68fa      	ldr	r2, [r7, #12]
 80187aa:	4413      	add	r3, r2
 80187ac:	460a      	mov	r2, r1
 80187ae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80187b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b2:	2b07      	cmp	r3, #7
 80187b4:	d9e9      	bls.n	801878a <gen_numname+0xe2>
}
 80187b6:	bf00      	nop
 80187b8:	bf00      	nop
 80187ba:	3730      	adds	r7, #48	; 0x30
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	00011021 	.word	0x00011021

080187c4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80187c4:	b480      	push	{r7}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80187cc:	2300      	movs	r3, #0
 80187ce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80187d0:	230b      	movs	r3, #11
 80187d2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80187d4:	7bfb      	ldrb	r3, [r7, #15]
 80187d6:	b2da      	uxtb	r2, r3
 80187d8:	0852      	lsrs	r2, r2, #1
 80187da:	01db      	lsls	r3, r3, #7
 80187dc:	4313      	orrs	r3, r2
 80187de:	b2da      	uxtb	r2, r3
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	1c59      	adds	r1, r3, #1
 80187e4:	6079      	str	r1, [r7, #4]
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	4413      	add	r3, r2
 80187ea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	3b01      	subs	r3, #1
 80187f0:	60bb      	str	r3, [r7, #8]
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d1ed      	bne.n	80187d4 <sum_sfn+0x10>
	return sum;
 80187f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3714      	adds	r7, #20
 80187fe:	46bd      	mov	sp, r7
 8018800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018804:	4770      	bx	lr

08018806 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018806:	b580      	push	{r7, lr}
 8018808:	b086      	sub	sp, #24
 801880a:	af00      	add	r7, sp, #0
 801880c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018814:	2100      	movs	r1, #0
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	f7ff fc88 	bl	801812c <dir_sdi>
 801881c:	4603      	mov	r3, r0
 801881e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018820:	7dfb      	ldrb	r3, [r7, #23]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d001      	beq.n	801882a <dir_find+0x24>
 8018826:	7dfb      	ldrb	r3, [r7, #23]
 8018828:	e0a9      	b.n	801897e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801882a:	23ff      	movs	r3, #255	; 0xff
 801882c:	753b      	strb	r3, [r7, #20]
 801882e:	7d3b      	ldrb	r3, [r7, #20]
 8018830:	757b      	strb	r3, [r7, #21]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	f04f 32ff 	mov.w	r2, #4294967295
 8018838:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	69db      	ldr	r3, [r3, #28]
 801883e:	4619      	mov	r1, r3
 8018840:	6938      	ldr	r0, [r7, #16]
 8018842:	f7ff f891 	bl	8017968 <move_window>
 8018846:	4603      	mov	r3, r0
 8018848:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801884a:	7dfb      	ldrb	r3, [r7, #23]
 801884c:	2b00      	cmp	r3, #0
 801884e:	f040 8090 	bne.w	8018972 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	6a1b      	ldr	r3, [r3, #32]
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801885a:	7dbb      	ldrb	r3, [r7, #22]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d102      	bne.n	8018866 <dir_find+0x60>
 8018860:	2304      	movs	r3, #4
 8018862:	75fb      	strb	r3, [r7, #23]
 8018864:	e08a      	b.n	801897c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	6a1b      	ldr	r3, [r3, #32]
 801886a:	330b      	adds	r3, #11
 801886c:	781b      	ldrb	r3, [r3, #0]
 801886e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018872:	73fb      	strb	r3, [r7, #15]
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	7bfa      	ldrb	r2, [r7, #15]
 8018878:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801887a:	7dbb      	ldrb	r3, [r7, #22]
 801887c:	2be5      	cmp	r3, #229	; 0xe5
 801887e:	d007      	beq.n	8018890 <dir_find+0x8a>
 8018880:	7bfb      	ldrb	r3, [r7, #15]
 8018882:	f003 0308 	and.w	r3, r3, #8
 8018886:	2b00      	cmp	r3, #0
 8018888:	d009      	beq.n	801889e <dir_find+0x98>
 801888a:	7bfb      	ldrb	r3, [r7, #15]
 801888c:	2b0f      	cmp	r3, #15
 801888e:	d006      	beq.n	801889e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018890:	23ff      	movs	r3, #255	; 0xff
 8018892:	757b      	strb	r3, [r7, #21]
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	f04f 32ff 	mov.w	r2, #4294967295
 801889a:	631a      	str	r2, [r3, #48]	; 0x30
 801889c:	e05e      	b.n	801895c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801889e:	7bfb      	ldrb	r3, [r7, #15]
 80188a0:	2b0f      	cmp	r3, #15
 80188a2:	d136      	bne.n	8018912 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80188aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d154      	bne.n	801895c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80188b2:	7dbb      	ldrb	r3, [r7, #22]
 80188b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d00d      	beq.n	80188d8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	6a1b      	ldr	r3, [r3, #32]
 80188c0:	7b5b      	ldrb	r3, [r3, #13]
 80188c2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80188c4:	7dbb      	ldrb	r3, [r7, #22]
 80188c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80188ca:	75bb      	strb	r3, [r7, #22]
 80188cc:	7dbb      	ldrb	r3, [r7, #22]
 80188ce:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	695a      	ldr	r2, [r3, #20]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80188d8:	7dba      	ldrb	r2, [r7, #22]
 80188da:	7d7b      	ldrb	r3, [r7, #21]
 80188dc:	429a      	cmp	r2, r3
 80188de:	d115      	bne.n	801890c <dir_find+0x106>
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	6a1b      	ldr	r3, [r3, #32]
 80188e4:	330d      	adds	r3, #13
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	7d3a      	ldrb	r2, [r7, #20]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d10e      	bne.n	801890c <dir_find+0x106>
 80188ee:	693b      	ldr	r3, [r7, #16]
 80188f0:	691a      	ldr	r2, [r3, #16]
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6a1b      	ldr	r3, [r3, #32]
 80188f6:	4619      	mov	r1, r3
 80188f8:	4610      	mov	r0, r2
 80188fa:	f7ff fdfd 	bl	80184f8 <cmp_lfn>
 80188fe:	4603      	mov	r3, r0
 8018900:	2b00      	cmp	r3, #0
 8018902:	d003      	beq.n	801890c <dir_find+0x106>
 8018904:	7d7b      	ldrb	r3, [r7, #21]
 8018906:	3b01      	subs	r3, #1
 8018908:	b2db      	uxtb	r3, r3
 801890a:	e000      	b.n	801890e <dir_find+0x108>
 801890c:	23ff      	movs	r3, #255	; 0xff
 801890e:	757b      	strb	r3, [r7, #21]
 8018910:	e024      	b.n	801895c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018912:	7d7b      	ldrb	r3, [r7, #21]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d109      	bne.n	801892c <dir_find+0x126>
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6a1b      	ldr	r3, [r3, #32]
 801891c:	4618      	mov	r0, r3
 801891e:	f7ff ff51 	bl	80187c4 <sum_sfn>
 8018922:	4603      	mov	r3, r0
 8018924:	461a      	mov	r2, r3
 8018926:	7d3b      	ldrb	r3, [r7, #20]
 8018928:	4293      	cmp	r3, r2
 801892a:	d024      	beq.n	8018976 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018932:	f003 0301 	and.w	r3, r3, #1
 8018936:	2b00      	cmp	r3, #0
 8018938:	d10a      	bne.n	8018950 <dir_find+0x14a>
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	6a18      	ldr	r0, [r3, #32]
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	3324      	adds	r3, #36	; 0x24
 8018942:	220b      	movs	r2, #11
 8018944:	4619      	mov	r1, r3
 8018946:	f7fe fe1d 	bl	8017584 <mem_cmp>
 801894a:	4603      	mov	r3, r0
 801894c:	2b00      	cmp	r3, #0
 801894e:	d014      	beq.n	801897a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018950:	23ff      	movs	r3, #255	; 0xff
 8018952:	757b      	strb	r3, [r7, #21]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	f04f 32ff 	mov.w	r2, #4294967295
 801895a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801895c:	2100      	movs	r1, #0
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f7ff fc6d 	bl	801823e <dir_next>
 8018964:	4603      	mov	r3, r0
 8018966:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018968:	7dfb      	ldrb	r3, [r7, #23]
 801896a:	2b00      	cmp	r3, #0
 801896c:	f43f af65 	beq.w	801883a <dir_find+0x34>
 8018970:	e004      	b.n	801897c <dir_find+0x176>
		if (res != FR_OK) break;
 8018972:	bf00      	nop
 8018974:	e002      	b.n	801897c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018976:	bf00      	nop
 8018978:	e000      	b.n	801897c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801897a:	bf00      	nop

	return res;
 801897c:	7dfb      	ldrb	r3, [r7, #23]
}
 801897e:	4618      	mov	r0, r3
 8018980:	3718      	adds	r7, #24
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
	...

08018988 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b08c      	sub	sp, #48	; 0x30
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801899c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d001      	beq.n	80189a8 <dir_register+0x20>
 80189a4:	2306      	movs	r3, #6
 80189a6:	e0e0      	b.n	8018b6a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80189a8:	2300      	movs	r3, #0
 80189aa:	627b      	str	r3, [r7, #36]	; 0x24
 80189ac:	e002      	b.n	80189b4 <dir_register+0x2c>
 80189ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189b0:	3301      	adds	r3, #1
 80189b2:	627b      	str	r3, [r7, #36]	; 0x24
 80189b4:	69fb      	ldr	r3, [r7, #28]
 80189b6:	691a      	ldr	r2, [r3, #16]
 80189b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ba:	005b      	lsls	r3, r3, #1
 80189bc:	4413      	add	r3, r2
 80189be:	881b      	ldrh	r3, [r3, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d1f4      	bne.n	80189ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80189ca:	f107 030c 	add.w	r3, r7, #12
 80189ce:	220c      	movs	r2, #12
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7fe fd9b 	bl	801750c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80189d6:	7dfb      	ldrb	r3, [r7, #23]
 80189d8:	f003 0301 	and.w	r3, r3, #1
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d032      	beq.n	8018a46 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	2240      	movs	r2, #64	; 0x40
 80189e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80189e8:	2301      	movs	r3, #1
 80189ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80189ec:	e016      	b.n	8018a1c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80189f4:	69fb      	ldr	r3, [r7, #28]
 80189f6:	691a      	ldr	r2, [r3, #16]
 80189f8:	f107 010c 	add.w	r1, r7, #12
 80189fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fe:	f7ff fe53 	bl	80186a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018a02:	6878      	ldr	r0, [r7, #4]
 8018a04:	f7ff feff 	bl	8018806 <dir_find>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d106      	bne.n	8018a24 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a18:	3301      	adds	r3, #1
 8018a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a1e:	2b63      	cmp	r3, #99	; 0x63
 8018a20:	d9e5      	bls.n	80189ee <dir_register+0x66>
 8018a22:	e000      	b.n	8018a26 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018a24:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a28:	2b64      	cmp	r3, #100	; 0x64
 8018a2a:	d101      	bne.n	8018a30 <dir_register+0xa8>
 8018a2c:	2307      	movs	r3, #7
 8018a2e:	e09c      	b.n	8018b6a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a34:	2b04      	cmp	r3, #4
 8018a36:	d002      	beq.n	8018a3e <dir_register+0xb6>
 8018a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a3c:	e095      	b.n	8018b6a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018a3e:	7dfa      	ldrb	r2, [r7, #23]
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018a46:	7dfb      	ldrb	r3, [r7, #23]
 8018a48:	f003 0302 	and.w	r3, r3, #2
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d007      	beq.n	8018a60 <dir_register+0xd8>
 8018a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a52:	330c      	adds	r3, #12
 8018a54:	4a47      	ldr	r2, [pc, #284]	; (8018b74 <dir_register+0x1ec>)
 8018a56:	fba2 2303 	umull	r2, r3, r2, r3
 8018a5a:	089b      	lsrs	r3, r3, #2
 8018a5c:	3301      	adds	r3, #1
 8018a5e:	e000      	b.n	8018a62 <dir_register+0xda>
 8018a60:	2301      	movs	r3, #1
 8018a62:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018a64:	6a39      	ldr	r1, [r7, #32]
 8018a66:	6878      	ldr	r0, [r7, #4]
 8018a68:	f7ff fcbf 	bl	80183ea <dir_alloc>
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d148      	bne.n	8018b0c <dir_register+0x184>
 8018a7a:	6a3b      	ldr	r3, [r7, #32]
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	623b      	str	r3, [r7, #32]
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d042      	beq.n	8018b0c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	695a      	ldr	r2, [r3, #20]
 8018a8a:	6a3b      	ldr	r3, [r7, #32]
 8018a8c:	015b      	lsls	r3, r3, #5
 8018a8e:	1ad3      	subs	r3, r2, r3
 8018a90:	4619      	mov	r1, r3
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f7ff fb4a 	bl	801812c <dir_sdi>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d132      	bne.n	8018b0c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	3324      	adds	r3, #36	; 0x24
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7ff fe8a 	bl	80187c4 <sum_sfn>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	69db      	ldr	r3, [r3, #28]
 8018ab8:	4619      	mov	r1, r3
 8018aba:	69f8      	ldr	r0, [r7, #28]
 8018abc:	f7fe ff54 	bl	8017968 <move_window>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d11d      	bne.n	8018b0a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018ace:	69fb      	ldr	r3, [r7, #28]
 8018ad0:	6918      	ldr	r0, [r3, #16]
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6a19      	ldr	r1, [r3, #32]
 8018ad6:	6a3b      	ldr	r3, [r7, #32]
 8018ad8:	b2da      	uxtb	r2, r3
 8018ada:	7efb      	ldrb	r3, [r7, #27]
 8018adc:	f7ff fd7c 	bl	80185d8 <put_lfn>
				fs->wflag = 1;
 8018ae0:	69fb      	ldr	r3, [r7, #28]
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018ae6:	2100      	movs	r1, #0
 8018ae8:	6878      	ldr	r0, [r7, #4]
 8018aea:	f7ff fba8 	bl	801823e <dir_next>
 8018aee:	4603      	mov	r3, r0
 8018af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d107      	bne.n	8018b0c <dir_register+0x184>
 8018afc:	6a3b      	ldr	r3, [r7, #32]
 8018afe:	3b01      	subs	r3, #1
 8018b00:	623b      	str	r3, [r7, #32]
 8018b02:	6a3b      	ldr	r3, [r7, #32]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d1d5      	bne.n	8018ab4 <dir_register+0x12c>
 8018b08:	e000      	b.n	8018b0c <dir_register+0x184>
				if (res != FR_OK) break;
 8018b0a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d128      	bne.n	8018b66 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	69db      	ldr	r3, [r3, #28]
 8018b18:	4619      	mov	r1, r3
 8018b1a:	69f8      	ldr	r0, [r7, #28]
 8018b1c:	f7fe ff24 	bl	8017968 <move_window>
 8018b20:	4603      	mov	r3, r0
 8018b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d11b      	bne.n	8018b66 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6a1b      	ldr	r3, [r3, #32]
 8018b32:	2220      	movs	r2, #32
 8018b34:	2100      	movs	r1, #0
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7fe fd09 	bl	801754e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a18      	ldr	r0, [r3, #32]
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	3324      	adds	r3, #36	; 0x24
 8018b44:	220b      	movs	r2, #11
 8018b46:	4619      	mov	r1, r3
 8018b48:	f7fe fce0 	bl	801750c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	6a1b      	ldr	r3, [r3, #32]
 8018b56:	330c      	adds	r3, #12
 8018b58:	f002 0218 	and.w	r2, r2, #24
 8018b5c:	b2d2      	uxtb	r2, r2
 8018b5e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018b60:	69fb      	ldr	r3, [r7, #28]
 8018b62:	2201      	movs	r2, #1
 8018b64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	3730      	adds	r7, #48	; 0x30
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}
 8018b72:	bf00      	nop
 8018b74:	4ec4ec4f 	.word	0x4ec4ec4f

08018b78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b08a      	sub	sp, #40	; 0x28
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
 8018b80:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	613b      	str	r3, [r7, #16]
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	691b      	ldr	r3, [r3, #16]
 8018b8e:	60fb      	str	r3, [r7, #12]
 8018b90:	2300      	movs	r3, #0
 8018b92:	617b      	str	r3, [r7, #20]
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018b98:	69bb      	ldr	r3, [r7, #24]
 8018b9a:	1c5a      	adds	r2, r3, #1
 8018b9c:	61ba      	str	r2, [r7, #24]
 8018b9e:	693a      	ldr	r2, [r7, #16]
 8018ba0:	4413      	add	r3, r2
 8018ba2:	781b      	ldrb	r3, [r3, #0]
 8018ba4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ba8:	2b1f      	cmp	r3, #31
 8018baa:	d940      	bls.n	8018c2e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bae:	2b2f      	cmp	r3, #47	; 0x2f
 8018bb0:	d006      	beq.n	8018bc0 <create_name+0x48>
 8018bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8018bb6:	d110      	bne.n	8018bda <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018bb8:	e002      	b.n	8018bc0 <create_name+0x48>
 8018bba:	69bb      	ldr	r3, [r7, #24]
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	61bb      	str	r3, [r7, #24]
 8018bc0:	693a      	ldr	r2, [r7, #16]
 8018bc2:	69bb      	ldr	r3, [r7, #24]
 8018bc4:	4413      	add	r3, r2
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	2b2f      	cmp	r3, #47	; 0x2f
 8018bca:	d0f6      	beq.n	8018bba <create_name+0x42>
 8018bcc:	693a      	ldr	r2, [r7, #16]
 8018bce:	69bb      	ldr	r3, [r7, #24]
 8018bd0:	4413      	add	r3, r2
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	2b5c      	cmp	r3, #92	; 0x5c
 8018bd6:	d0f0      	beq.n	8018bba <create_name+0x42>
			break;
 8018bd8:	e02a      	b.n	8018c30 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	2bfe      	cmp	r3, #254	; 0xfe
 8018bde:	d901      	bls.n	8018be4 <create_name+0x6c>
 8018be0:	2306      	movs	r3, #6
 8018be2:	e17d      	b.n	8018ee0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018be6:	b2db      	uxtb	r3, r3
 8018be8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bec:	2101      	movs	r1, #1
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f001 fa8c 	bl	801a10c <ff_convert>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d101      	bne.n	8018c02 <create_name+0x8a>
 8018bfe:	2306      	movs	r3, #6
 8018c00:	e16e      	b.n	8018ee0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c04:	2b7f      	cmp	r3, #127	; 0x7f
 8018c06:	d809      	bhi.n	8018c1c <create_name+0xa4>
 8018c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c0a:	4619      	mov	r1, r3
 8018c0c:	488d      	ldr	r0, [pc, #564]	; (8018e44 <create_name+0x2cc>)
 8018c0e:	f7fe fce0 	bl	80175d2 <chk_chr>
 8018c12:	4603      	mov	r3, r0
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d001      	beq.n	8018c1c <create_name+0xa4>
 8018c18:	2306      	movs	r3, #6
 8018c1a:	e161      	b.n	8018ee0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018c1c:	697b      	ldr	r3, [r7, #20]
 8018c1e:	1c5a      	adds	r2, r3, #1
 8018c20:	617a      	str	r2, [r7, #20]
 8018c22:	005b      	lsls	r3, r3, #1
 8018c24:	68fa      	ldr	r2, [r7, #12]
 8018c26:	4413      	add	r3, r2
 8018c28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c2a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018c2c:	e7b4      	b.n	8018b98 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018c2e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018c30:	693a      	ldr	r2, [r7, #16]
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	441a      	add	r2, r3
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c3c:	2b1f      	cmp	r3, #31
 8018c3e:	d801      	bhi.n	8018c44 <create_name+0xcc>
 8018c40:	2304      	movs	r3, #4
 8018c42:	e000      	b.n	8018c46 <create_name+0xce>
 8018c44:	2300      	movs	r3, #0
 8018c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018c4a:	e011      	b.n	8018c70 <create_name+0xf8>
		w = lfn[di - 1];
 8018c4c:	697a      	ldr	r2, [r7, #20]
 8018c4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c52:	4413      	add	r3, r2
 8018c54:	005b      	lsls	r3, r3, #1
 8018c56:	68fa      	ldr	r2, [r7, #12]
 8018c58:	4413      	add	r3, r2
 8018c5a:	881b      	ldrh	r3, [r3, #0]
 8018c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c60:	2b20      	cmp	r3, #32
 8018c62:	d002      	beq.n	8018c6a <create_name+0xf2>
 8018c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c66:	2b2e      	cmp	r3, #46	; 0x2e
 8018c68:	d106      	bne.n	8018c78 <create_name+0x100>
		di--;
 8018c6a:	697b      	ldr	r3, [r7, #20]
 8018c6c:	3b01      	subs	r3, #1
 8018c6e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018c70:	697b      	ldr	r3, [r7, #20]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d1ea      	bne.n	8018c4c <create_name+0xd4>
 8018c76:	e000      	b.n	8018c7a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018c78:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	68fa      	ldr	r2, [r7, #12]
 8018c80:	4413      	add	r3, r2
 8018c82:	2200      	movs	r2, #0
 8018c84:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018c86:	697b      	ldr	r3, [r7, #20]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d101      	bne.n	8018c90 <create_name+0x118>
 8018c8c:	2306      	movs	r3, #6
 8018c8e:	e127      	b.n	8018ee0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	3324      	adds	r3, #36	; 0x24
 8018c94:	220b      	movs	r2, #11
 8018c96:	2120      	movs	r1, #32
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f7fe fc58 	bl	801754e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	61bb      	str	r3, [r7, #24]
 8018ca2:	e002      	b.n	8018caa <create_name+0x132>
 8018ca4:	69bb      	ldr	r3, [r7, #24]
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	61bb      	str	r3, [r7, #24]
 8018caa:	69bb      	ldr	r3, [r7, #24]
 8018cac:	005b      	lsls	r3, r3, #1
 8018cae:	68fa      	ldr	r2, [r7, #12]
 8018cb0:	4413      	add	r3, r2
 8018cb2:	881b      	ldrh	r3, [r3, #0]
 8018cb4:	2b20      	cmp	r3, #32
 8018cb6:	d0f5      	beq.n	8018ca4 <create_name+0x12c>
 8018cb8:	69bb      	ldr	r3, [r7, #24]
 8018cba:	005b      	lsls	r3, r3, #1
 8018cbc:	68fa      	ldr	r2, [r7, #12]
 8018cbe:	4413      	add	r3, r2
 8018cc0:	881b      	ldrh	r3, [r3, #0]
 8018cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8018cc4:	d0ee      	beq.n	8018ca4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018cc6:	69bb      	ldr	r3, [r7, #24]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d009      	beq.n	8018ce0 <create_name+0x168>
 8018ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018cd0:	f043 0303 	orr.w	r3, r3, #3
 8018cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018cd8:	e002      	b.n	8018ce0 <create_name+0x168>
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	3b01      	subs	r3, #1
 8018cde:	617b      	str	r3, [r7, #20]
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d009      	beq.n	8018cfa <create_name+0x182>
 8018ce6:	697a      	ldr	r2, [r7, #20]
 8018ce8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018cec:	4413      	add	r3, r2
 8018cee:	005b      	lsls	r3, r3, #1
 8018cf0:	68fa      	ldr	r2, [r7, #12]
 8018cf2:	4413      	add	r3, r2
 8018cf4:	881b      	ldrh	r3, [r3, #0]
 8018cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8018cf8:	d1ef      	bne.n	8018cda <create_name+0x162>

	i = b = 0; ni = 8;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018d00:	2300      	movs	r3, #0
 8018d02:	623b      	str	r3, [r7, #32]
 8018d04:	2308      	movs	r3, #8
 8018d06:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018d08:	69bb      	ldr	r3, [r7, #24]
 8018d0a:	1c5a      	adds	r2, r3, #1
 8018d0c:	61ba      	str	r2, [r7, #24]
 8018d0e:	005b      	lsls	r3, r3, #1
 8018d10:	68fa      	ldr	r2, [r7, #12]
 8018d12:	4413      	add	r3, r2
 8018d14:	881b      	ldrh	r3, [r3, #0]
 8018d16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	f000 8090 	beq.w	8018e40 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d22:	2b20      	cmp	r3, #32
 8018d24:	d006      	beq.n	8018d34 <create_name+0x1bc>
 8018d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d28:	2b2e      	cmp	r3, #46	; 0x2e
 8018d2a:	d10a      	bne.n	8018d42 <create_name+0x1ca>
 8018d2c:	69ba      	ldr	r2, [r7, #24]
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	429a      	cmp	r2, r3
 8018d32:	d006      	beq.n	8018d42 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d38:	f043 0303 	orr.w	r3, r3, #3
 8018d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d40:	e07d      	b.n	8018e3e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018d42:	6a3a      	ldr	r2, [r7, #32]
 8018d44:	69fb      	ldr	r3, [r7, #28]
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d203      	bcs.n	8018d52 <create_name+0x1da>
 8018d4a:	69ba      	ldr	r2, [r7, #24]
 8018d4c:	697b      	ldr	r3, [r7, #20]
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d123      	bne.n	8018d9a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	2b0b      	cmp	r3, #11
 8018d56:	d106      	bne.n	8018d66 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d5c:	f043 0303 	orr.w	r3, r3, #3
 8018d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d64:	e075      	b.n	8018e52 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018d66:	69ba      	ldr	r2, [r7, #24]
 8018d68:	697b      	ldr	r3, [r7, #20]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d005      	beq.n	8018d7a <create_name+0x202>
 8018d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d72:	f043 0303 	orr.w	r3, r3, #3
 8018d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018d7a:	69ba      	ldr	r2, [r7, #24]
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d866      	bhi.n	8018e50 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018d82:	697b      	ldr	r3, [r7, #20]
 8018d84:	61bb      	str	r3, [r7, #24]
 8018d86:	2308      	movs	r3, #8
 8018d88:	623b      	str	r3, [r7, #32]
 8018d8a:	230b      	movs	r3, #11
 8018d8c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018d92:	009b      	lsls	r3, r3, #2
 8018d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018d98:	e051      	b.n	8018e3e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8018d9e:	d914      	bls.n	8018dca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018da2:	2100      	movs	r1, #0
 8018da4:	4618      	mov	r0, r3
 8018da6:	f001 f9b1 	bl	801a10c <ff_convert>
 8018daa:	4603      	mov	r3, r0
 8018dac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d004      	beq.n	8018dbe <create_name+0x246>
 8018db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018db6:	3b80      	subs	r3, #128	; 0x80
 8018db8:	4a23      	ldr	r2, [pc, #140]	; (8018e48 <create_name+0x2d0>)
 8018dba:	5cd3      	ldrb	r3, [r2, r3]
 8018dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dc2:	f043 0302 	orr.w	r3, r3, #2
 8018dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d007      	beq.n	8018de0 <create_name+0x268>
 8018dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	481d      	ldr	r0, [pc, #116]	; (8018e4c <create_name+0x2d4>)
 8018dd6:	f7fe fbfc 	bl	80175d2 <chk_chr>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d008      	beq.n	8018df2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018de0:	235f      	movs	r3, #95	; 0x5f
 8018de2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018de8:	f043 0303 	orr.w	r3, r3, #3
 8018dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018df0:	e01b      	b.n	8018e2a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018df4:	2b40      	cmp	r3, #64	; 0x40
 8018df6:	d909      	bls.n	8018e0c <create_name+0x294>
 8018df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dfa:	2b5a      	cmp	r3, #90	; 0x5a
 8018dfc:	d806      	bhi.n	8018e0c <create_name+0x294>
					b |= 2;
 8018dfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e02:	f043 0302 	orr.w	r3, r3, #2
 8018e06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e0a:	e00e      	b.n	8018e2a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e0e:	2b60      	cmp	r3, #96	; 0x60
 8018e10:	d90b      	bls.n	8018e2a <create_name+0x2b2>
 8018e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e14:	2b7a      	cmp	r3, #122	; 0x7a
 8018e16:	d808      	bhi.n	8018e2a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e1c:	f043 0301 	orr.w	r3, r3, #1
 8018e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e26:	3b20      	subs	r3, #32
 8018e28:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018e2a:	6a3b      	ldr	r3, [r7, #32]
 8018e2c:	1c5a      	adds	r2, r3, #1
 8018e2e:	623a      	str	r2, [r7, #32]
 8018e30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e32:	b2d1      	uxtb	r1, r2
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	4413      	add	r3, r2
 8018e38:	460a      	mov	r2, r1
 8018e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018e3e:	e763      	b.n	8018d08 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018e40:	bf00      	nop
 8018e42:	e006      	b.n	8018e52 <create_name+0x2da>
 8018e44:	0801f5f0 	.word	0x0801f5f0
 8018e48:	0801f738 	.word	0x0801f738
 8018e4c:	0801f5fc 	.word	0x0801f5fc
			if (si > di) break;			/* No extension */
 8018e50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018e58:	2be5      	cmp	r3, #229	; 0xe5
 8018e5a:	d103      	bne.n	8018e64 <create_name+0x2ec>
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	2205      	movs	r2, #5
 8018e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018e64:	69fb      	ldr	r3, [r7, #28]
 8018e66:	2b08      	cmp	r3, #8
 8018e68:	d104      	bne.n	8018e74 <create_name+0x2fc>
 8018e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e6e:	009b      	lsls	r3, r3, #2
 8018e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e78:	f003 030c 	and.w	r3, r3, #12
 8018e7c:	2b0c      	cmp	r3, #12
 8018e7e:	d005      	beq.n	8018e8c <create_name+0x314>
 8018e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e84:	f003 0303 	and.w	r3, r3, #3
 8018e88:	2b03      	cmp	r3, #3
 8018e8a:	d105      	bne.n	8018e98 <create_name+0x320>
 8018e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e90:	f043 0302 	orr.w	r3, r3, #2
 8018e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e9c:	f003 0302 	and.w	r3, r3, #2
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d117      	bne.n	8018ed4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ea8:	f003 0303 	and.w	r3, r3, #3
 8018eac:	2b01      	cmp	r3, #1
 8018eae:	d105      	bne.n	8018ebc <create_name+0x344>
 8018eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018eb4:	f043 0310 	orr.w	r3, r3, #16
 8018eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ec0:	f003 030c 	and.w	r3, r3, #12
 8018ec4:	2b04      	cmp	r3, #4
 8018ec6:	d105      	bne.n	8018ed4 <create_name+0x35c>
 8018ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ecc:	f043 0308 	orr.w	r3, r3, #8
 8018ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018eda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018ede:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3728      	adds	r7, #40	; 0x28
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b086      	sub	sp, #24
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018efc:	e002      	b.n	8018f04 <follow_path+0x1c>
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	3301      	adds	r3, #1
 8018f02:	603b      	str	r3, [r7, #0]
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	781b      	ldrb	r3, [r3, #0]
 8018f08:	2b2f      	cmp	r3, #47	; 0x2f
 8018f0a:	d0f8      	beq.n	8018efe <follow_path+0x16>
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	781b      	ldrb	r3, [r3, #0]
 8018f10:	2b5c      	cmp	r3, #92	; 0x5c
 8018f12:	d0f4      	beq.n	8018efe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	2200      	movs	r2, #0
 8018f18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	2b1f      	cmp	r3, #31
 8018f20:	d80a      	bhi.n	8018f38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2280      	movs	r2, #128	; 0x80
 8018f26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018f2a:	2100      	movs	r1, #0
 8018f2c:	6878      	ldr	r0, [r7, #4]
 8018f2e:	f7ff f8fd 	bl	801812c <dir_sdi>
 8018f32:	4603      	mov	r3, r0
 8018f34:	75fb      	strb	r3, [r7, #23]
 8018f36:	e048      	b.n	8018fca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018f38:	463b      	mov	r3, r7
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	6878      	ldr	r0, [r7, #4]
 8018f3e:	f7ff fe1b 	bl	8018b78 <create_name>
 8018f42:	4603      	mov	r3, r0
 8018f44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018f46:	7dfb      	ldrb	r3, [r7, #23]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d139      	bne.n	8018fc0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f7ff fc5a 	bl	8018806 <dir_find>
 8018f52:	4603      	mov	r3, r0
 8018f54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018f5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018f5e:	7dfb      	ldrb	r3, [r7, #23]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d00a      	beq.n	8018f7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018f64:	7dfb      	ldrb	r3, [r7, #23]
 8018f66:	2b04      	cmp	r3, #4
 8018f68:	d12c      	bne.n	8018fc4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018f6a:	7afb      	ldrb	r3, [r7, #11]
 8018f6c:	f003 0304 	and.w	r3, r3, #4
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d127      	bne.n	8018fc4 <follow_path+0xdc>
 8018f74:	2305      	movs	r3, #5
 8018f76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018f78:	e024      	b.n	8018fc4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018f7a:	7afb      	ldrb	r3, [r7, #11]
 8018f7c:	f003 0304 	and.w	r3, r3, #4
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d121      	bne.n	8018fc8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018f84:	693b      	ldr	r3, [r7, #16]
 8018f86:	799b      	ldrb	r3, [r3, #6]
 8018f88:	f003 0310 	and.w	r3, r3, #16
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d102      	bne.n	8018f96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018f90:	2305      	movs	r3, #5
 8018f92:	75fb      	strb	r3, [r7, #23]
 8018f94:	e019      	b.n	8018fca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	695b      	ldr	r3, [r3, #20]
 8018fa0:	68fa      	ldr	r2, [r7, #12]
 8018fa2:	8992      	ldrh	r2, [r2, #12]
 8018fa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8018fa8:	fb00 f202 	mul.w	r2, r0, r2
 8018fac:	1a9b      	subs	r3, r3, r2
 8018fae:	440b      	add	r3, r1
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	68f8      	ldr	r0, [r7, #12]
 8018fb4:	f7ff fa60 	bl	8018478 <ld_clust>
 8018fb8:	4602      	mov	r2, r0
 8018fba:	693b      	ldr	r3, [r7, #16]
 8018fbc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018fbe:	e7bb      	b.n	8018f38 <follow_path+0x50>
			if (res != FR_OK) break;
 8018fc0:	bf00      	nop
 8018fc2:	e002      	b.n	8018fca <follow_path+0xe2>
				break;
 8018fc4:	bf00      	nop
 8018fc6:	e000      	b.n	8018fca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018fc8:	bf00      	nop
			}
		}
	}

	return res;
 8018fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3718      	adds	r7, #24
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}

08018fd4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018fd4:	b480      	push	{r7}
 8018fd6:	b087      	sub	sp, #28
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8018fe0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d031      	beq.n	801904e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	617b      	str	r3, [r7, #20]
 8018ff0:	e002      	b.n	8018ff8 <get_ldnumber+0x24>
 8018ff2:	697b      	ldr	r3, [r7, #20]
 8018ff4:	3301      	adds	r3, #1
 8018ff6:	617b      	str	r3, [r7, #20]
 8018ff8:	697b      	ldr	r3, [r7, #20]
 8018ffa:	781b      	ldrb	r3, [r3, #0]
 8018ffc:	2b1f      	cmp	r3, #31
 8018ffe:	d903      	bls.n	8019008 <get_ldnumber+0x34>
 8019000:	697b      	ldr	r3, [r7, #20]
 8019002:	781b      	ldrb	r3, [r3, #0]
 8019004:	2b3a      	cmp	r3, #58	; 0x3a
 8019006:	d1f4      	bne.n	8018ff2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	781b      	ldrb	r3, [r3, #0]
 801900c:	2b3a      	cmp	r3, #58	; 0x3a
 801900e:	d11c      	bne.n	801904a <get_ldnumber+0x76>
			tp = *path;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	1c5a      	adds	r2, r3, #1
 801901a:	60fa      	str	r2, [r7, #12]
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	3b30      	subs	r3, #48	; 0x30
 8019020:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	2b09      	cmp	r3, #9
 8019026:	d80e      	bhi.n	8019046 <get_ldnumber+0x72>
 8019028:	68fa      	ldr	r2, [r7, #12]
 801902a:	697b      	ldr	r3, [r7, #20]
 801902c:	429a      	cmp	r2, r3
 801902e:	d10a      	bne.n	8019046 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019030:	68bb      	ldr	r3, [r7, #8]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d107      	bne.n	8019046 <get_ldnumber+0x72>
					vol = (int)i;
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801903a:	697b      	ldr	r3, [r7, #20]
 801903c:	3301      	adds	r3, #1
 801903e:	617b      	str	r3, [r7, #20]
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	697a      	ldr	r2, [r7, #20]
 8019044:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019046:	693b      	ldr	r3, [r7, #16]
 8019048:	e002      	b.n	8019050 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801904a:	2300      	movs	r3, #0
 801904c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801904e:	693b      	ldr	r3, [r7, #16]
}
 8019050:	4618      	mov	r0, r3
 8019052:	371c      	adds	r7, #28
 8019054:	46bd      	mov	sp, r7
 8019056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905a:	4770      	bx	lr

0801905c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b082      	sub	sp, #8
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2200      	movs	r2, #0
 801906a:	70da      	strb	r2, [r3, #3]
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	f04f 32ff 	mov.w	r2, #4294967295
 8019072:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019074:	6839      	ldr	r1, [r7, #0]
 8019076:	6878      	ldr	r0, [r7, #4]
 8019078:	f7fe fc76 	bl	8017968 <move_window>
 801907c:	4603      	mov	r3, r0
 801907e:	2b00      	cmp	r3, #0
 8019080:	d001      	beq.n	8019086 <check_fs+0x2a>
 8019082:	2304      	movs	r3, #4
 8019084:	e038      	b.n	80190f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	3338      	adds	r3, #56	; 0x38
 801908a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801908e:	4618      	mov	r0, r3
 8019090:	f7fe f9ba 	bl	8017408 <ld_word>
 8019094:	4603      	mov	r3, r0
 8019096:	461a      	mov	r2, r3
 8019098:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801909c:	429a      	cmp	r2, r3
 801909e:	d001      	beq.n	80190a4 <check_fs+0x48>
 80190a0:	2303      	movs	r3, #3
 80190a2:	e029      	b.n	80190f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80190aa:	2be9      	cmp	r3, #233	; 0xe9
 80190ac:	d009      	beq.n	80190c2 <check_fs+0x66>
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80190b4:	2beb      	cmp	r3, #235	; 0xeb
 80190b6:	d11e      	bne.n	80190f6 <check_fs+0x9a>
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80190be:	2b90      	cmp	r3, #144	; 0x90
 80190c0:	d119      	bne.n	80190f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	3338      	adds	r3, #56	; 0x38
 80190c6:	3336      	adds	r3, #54	; 0x36
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7fe f9b5 	bl	8017438 <ld_dword>
 80190ce:	4603      	mov	r3, r0
 80190d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80190d4:	4a0a      	ldr	r2, [pc, #40]	; (8019100 <check_fs+0xa4>)
 80190d6:	4293      	cmp	r3, r2
 80190d8:	d101      	bne.n	80190de <check_fs+0x82>
 80190da:	2300      	movs	r3, #0
 80190dc:	e00c      	b.n	80190f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	3338      	adds	r3, #56	; 0x38
 80190e2:	3352      	adds	r3, #82	; 0x52
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7fe f9a7 	bl	8017438 <ld_dword>
 80190ea:	4603      	mov	r3, r0
 80190ec:	4a05      	ldr	r2, [pc, #20]	; (8019104 <check_fs+0xa8>)
 80190ee:	4293      	cmp	r3, r2
 80190f0:	d101      	bne.n	80190f6 <check_fs+0x9a>
 80190f2:	2300      	movs	r3, #0
 80190f4:	e000      	b.n	80190f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80190f6:	2302      	movs	r3, #2
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3708      	adds	r7, #8
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}
 8019100:	00544146 	.word	0x00544146
 8019104:	33544146 	.word	0x33544146

08019108 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b096      	sub	sp, #88	; 0x58
 801910c:	af00      	add	r7, sp, #0
 801910e:	60f8      	str	r0, [r7, #12]
 8019110:	60b9      	str	r1, [r7, #8]
 8019112:	4613      	mov	r3, r2
 8019114:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	2200      	movs	r2, #0
 801911a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f7ff ff59 	bl	8018fd4 <get_ldnumber>
 8019122:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019126:	2b00      	cmp	r3, #0
 8019128:	da01      	bge.n	801912e <find_volume+0x26>
 801912a:	230b      	movs	r3, #11
 801912c:	e265      	b.n	80195fa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801912e:	4a9f      	ldr	r2, [pc, #636]	; (80193ac <find_volume+0x2a4>)
 8019130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019136:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801913a:	2b00      	cmp	r3, #0
 801913c:	d101      	bne.n	8019142 <find_volume+0x3a>
 801913e:	230c      	movs	r3, #12
 8019140:	e25b      	b.n	80195fa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019146:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019148:	79fb      	ldrb	r3, [r7, #7]
 801914a:	f023 0301 	bic.w	r3, r3, #1
 801914e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019152:	781b      	ldrb	r3, [r3, #0]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d01a      	beq.n	801918e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801915a:	785b      	ldrb	r3, [r3, #1]
 801915c:	4618      	mov	r0, r3
 801915e:	f7fe f8b5 	bl	80172cc <disk_status>
 8019162:	4603      	mov	r3, r0
 8019164:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019168:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801916c:	f003 0301 	and.w	r3, r3, #1
 8019170:	2b00      	cmp	r3, #0
 8019172:	d10c      	bne.n	801918e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019174:	79fb      	ldrb	r3, [r7, #7]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d007      	beq.n	801918a <find_volume+0x82>
 801917a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801917e:	f003 0304 	and.w	r3, r3, #4
 8019182:	2b00      	cmp	r3, #0
 8019184:	d001      	beq.n	801918a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019186:	230a      	movs	r3, #10
 8019188:	e237      	b.n	80195fa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801918a:	2300      	movs	r3, #0
 801918c:	e235      	b.n	80195fa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019190:	2200      	movs	r2, #0
 8019192:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019196:	b2da      	uxtb	r2, r3
 8019198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919e:	785b      	ldrb	r3, [r3, #1]
 80191a0:	4618      	mov	r0, r3
 80191a2:	f7fe f8ad 	bl	8017300 <disk_initialize>
 80191a6:	4603      	mov	r3, r0
 80191a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80191ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80191b0:	f003 0301 	and.w	r3, r3, #1
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d001      	beq.n	80191bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80191b8:	2303      	movs	r3, #3
 80191ba:	e21e      	b.n	80195fa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80191bc:	79fb      	ldrb	r3, [r7, #7]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d007      	beq.n	80191d2 <find_volume+0xca>
 80191c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80191c6:	f003 0304 	and.w	r3, r3, #4
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d001      	beq.n	80191d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80191ce:	230a      	movs	r3, #10
 80191d0:	e213      	b.n	80195fa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80191d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d4:	7858      	ldrb	r0, [r3, #1]
 80191d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d8:	330c      	adds	r3, #12
 80191da:	461a      	mov	r2, r3
 80191dc:	2102      	movs	r1, #2
 80191de:	f7fe f8f5 	bl	80173cc <disk_ioctl>
 80191e2:	4603      	mov	r3, r0
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d001      	beq.n	80191ec <find_volume+0xe4>
 80191e8:	2301      	movs	r3, #1
 80191ea:	e206      	b.n	80195fa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80191ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ee:	899b      	ldrh	r3, [r3, #12]
 80191f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80191f4:	d80d      	bhi.n	8019212 <find_volume+0x10a>
 80191f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f8:	899b      	ldrh	r3, [r3, #12]
 80191fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80191fe:	d308      	bcc.n	8019212 <find_volume+0x10a>
 8019200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019202:	899b      	ldrh	r3, [r3, #12]
 8019204:	461a      	mov	r2, r3
 8019206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019208:	899b      	ldrh	r3, [r3, #12]
 801920a:	3b01      	subs	r3, #1
 801920c:	4013      	ands	r3, r2
 801920e:	2b00      	cmp	r3, #0
 8019210:	d001      	beq.n	8019216 <find_volume+0x10e>
 8019212:	2301      	movs	r3, #1
 8019214:	e1f1      	b.n	80195fa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019216:	2300      	movs	r3, #0
 8019218:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801921a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801921c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801921e:	f7ff ff1d 	bl	801905c <check_fs>
 8019222:	4603      	mov	r3, r0
 8019224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801922c:	2b02      	cmp	r3, #2
 801922e:	d149      	bne.n	80192c4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019230:	2300      	movs	r3, #0
 8019232:	643b      	str	r3, [r7, #64]	; 0x40
 8019234:	e01e      	b.n	8019274 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019238:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801923c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801923e:	011b      	lsls	r3, r3, #4
 8019240:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019244:	4413      	add	r3, r2
 8019246:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801924a:	3304      	adds	r3, #4
 801924c:	781b      	ldrb	r3, [r3, #0]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d006      	beq.n	8019260 <find_volume+0x158>
 8019252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019254:	3308      	adds	r3, #8
 8019256:	4618      	mov	r0, r3
 8019258:	f7fe f8ee 	bl	8017438 <ld_dword>
 801925c:	4602      	mov	r2, r0
 801925e:	e000      	b.n	8019262 <find_volume+0x15a>
 8019260:	2200      	movs	r2, #0
 8019262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019264:	009b      	lsls	r3, r3, #2
 8019266:	3358      	adds	r3, #88	; 0x58
 8019268:	443b      	add	r3, r7
 801926a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801926e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019270:	3301      	adds	r3, #1
 8019272:	643b      	str	r3, [r7, #64]	; 0x40
 8019274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019276:	2b03      	cmp	r3, #3
 8019278:	d9dd      	bls.n	8019236 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801927a:	2300      	movs	r3, #0
 801927c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801927e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019280:	2b00      	cmp	r3, #0
 8019282:	d002      	beq.n	801928a <find_volume+0x182>
 8019284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019286:	3b01      	subs	r3, #1
 8019288:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801928a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801928c:	009b      	lsls	r3, r3, #2
 801928e:	3358      	adds	r3, #88	; 0x58
 8019290:	443b      	add	r3, r7
 8019292:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019296:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801929a:	2b00      	cmp	r3, #0
 801929c:	d005      	beq.n	80192aa <find_volume+0x1a2>
 801929e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80192a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192a2:	f7ff fedb 	bl	801905c <check_fs>
 80192a6:	4603      	mov	r3, r0
 80192a8:	e000      	b.n	80192ac <find_volume+0x1a4>
 80192aa:	2303      	movs	r3, #3
 80192ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80192b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d905      	bls.n	80192c4 <find_volume+0x1bc>
 80192b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192ba:	3301      	adds	r3, #1
 80192bc:	643b      	str	r3, [r7, #64]	; 0x40
 80192be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192c0:	2b03      	cmp	r3, #3
 80192c2:	d9e2      	bls.n	801928a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80192c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80192c8:	2b04      	cmp	r3, #4
 80192ca:	d101      	bne.n	80192d0 <find_volume+0x1c8>
 80192cc:	2301      	movs	r3, #1
 80192ce:	e194      	b.n	80195fa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80192d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80192d4:	2b01      	cmp	r3, #1
 80192d6:	d901      	bls.n	80192dc <find_volume+0x1d4>
 80192d8:	230d      	movs	r3, #13
 80192da:	e18e      	b.n	80195fa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80192dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192de:	3338      	adds	r3, #56	; 0x38
 80192e0:	330b      	adds	r3, #11
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7fe f890 	bl	8017408 <ld_word>
 80192e8:	4603      	mov	r3, r0
 80192ea:	461a      	mov	r2, r3
 80192ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ee:	899b      	ldrh	r3, [r3, #12]
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d001      	beq.n	80192f8 <find_volume+0x1f0>
 80192f4:	230d      	movs	r3, #13
 80192f6:	e180      	b.n	80195fa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80192f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192fa:	3338      	adds	r3, #56	; 0x38
 80192fc:	3316      	adds	r3, #22
 80192fe:	4618      	mov	r0, r3
 8019300:	f7fe f882 	bl	8017408 <ld_word>
 8019304:	4603      	mov	r3, r0
 8019306:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801930a:	2b00      	cmp	r3, #0
 801930c:	d106      	bne.n	801931c <find_volume+0x214>
 801930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019310:	3338      	adds	r3, #56	; 0x38
 8019312:	3324      	adds	r3, #36	; 0x24
 8019314:	4618      	mov	r0, r3
 8019316:	f7fe f88f 	bl	8017438 <ld_dword>
 801931a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801931e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019320:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019324:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801932a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801932e:	789b      	ldrb	r3, [r3, #2]
 8019330:	2b01      	cmp	r3, #1
 8019332:	d005      	beq.n	8019340 <find_volume+0x238>
 8019334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019336:	789b      	ldrb	r3, [r3, #2]
 8019338:	2b02      	cmp	r3, #2
 801933a:	d001      	beq.n	8019340 <find_volume+0x238>
 801933c:	230d      	movs	r3, #13
 801933e:	e15c      	b.n	80195fa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019342:	789b      	ldrb	r3, [r3, #2]
 8019344:	461a      	mov	r2, r3
 8019346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019348:	fb02 f303 	mul.w	r3, r2, r3
 801934c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019354:	b29a      	uxth	r2, r3
 8019356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019358:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801935c:	895b      	ldrh	r3, [r3, #10]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d008      	beq.n	8019374 <find_volume+0x26c>
 8019362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019364:	895b      	ldrh	r3, [r3, #10]
 8019366:	461a      	mov	r2, r3
 8019368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801936a:	895b      	ldrh	r3, [r3, #10]
 801936c:	3b01      	subs	r3, #1
 801936e:	4013      	ands	r3, r2
 8019370:	2b00      	cmp	r3, #0
 8019372:	d001      	beq.n	8019378 <find_volume+0x270>
 8019374:	230d      	movs	r3, #13
 8019376:	e140      	b.n	80195fa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801937a:	3338      	adds	r3, #56	; 0x38
 801937c:	3311      	adds	r3, #17
 801937e:	4618      	mov	r0, r3
 8019380:	f7fe f842 	bl	8017408 <ld_word>
 8019384:	4603      	mov	r3, r0
 8019386:	461a      	mov	r2, r3
 8019388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938e:	891b      	ldrh	r3, [r3, #8]
 8019390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019392:	8992      	ldrh	r2, [r2, #12]
 8019394:	0952      	lsrs	r2, r2, #5
 8019396:	b292      	uxth	r2, r2
 8019398:	fbb3 f1f2 	udiv	r1, r3, r2
 801939c:	fb01 f202 	mul.w	r2, r1, r2
 80193a0:	1a9b      	subs	r3, r3, r2
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d003      	beq.n	80193b0 <find_volume+0x2a8>
 80193a8:	230d      	movs	r3, #13
 80193aa:	e126      	b.n	80195fa <find_volume+0x4f2>
 80193ac:	240016b4 	.word	0x240016b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80193b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b2:	3338      	adds	r3, #56	; 0x38
 80193b4:	3313      	adds	r3, #19
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7fe f826 	bl	8017408 <ld_word>
 80193bc:	4603      	mov	r3, r0
 80193be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80193c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d106      	bne.n	80193d4 <find_volume+0x2cc>
 80193c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193c8:	3338      	adds	r3, #56	; 0x38
 80193ca:	3320      	adds	r3, #32
 80193cc:	4618      	mov	r0, r3
 80193ce:	f7fe f833 	bl	8017438 <ld_dword>
 80193d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80193d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193d6:	3338      	adds	r3, #56	; 0x38
 80193d8:	330e      	adds	r3, #14
 80193da:	4618      	mov	r0, r3
 80193dc:	f7fe f814 	bl	8017408 <ld_word>
 80193e0:	4603      	mov	r3, r0
 80193e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80193e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d101      	bne.n	80193ee <find_volume+0x2e6>
 80193ea:	230d      	movs	r3, #13
 80193ec:	e105      	b.n	80195fa <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80193ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80193f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193f2:	4413      	add	r3, r2
 80193f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80193f6:	8911      	ldrh	r1, [r2, #8]
 80193f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80193fa:	8992      	ldrh	r2, [r2, #12]
 80193fc:	0952      	lsrs	r2, r2, #5
 80193fe:	b292      	uxth	r2, r2
 8019400:	fbb1 f2f2 	udiv	r2, r1, r2
 8019404:	b292      	uxth	r2, r2
 8019406:	4413      	add	r3, r2
 8019408:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801940a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801940e:	429a      	cmp	r2, r3
 8019410:	d201      	bcs.n	8019416 <find_volume+0x30e>
 8019412:	230d      	movs	r3, #13
 8019414:	e0f1      	b.n	80195fa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941a:	1ad3      	subs	r3, r2, r3
 801941c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801941e:	8952      	ldrh	r2, [r2, #10]
 8019420:	fbb3 f3f2 	udiv	r3, r3, r2
 8019424:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019428:	2b00      	cmp	r3, #0
 801942a:	d101      	bne.n	8019430 <find_volume+0x328>
 801942c:	230d      	movs	r3, #13
 801942e:	e0e4      	b.n	80195fa <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019430:	2303      	movs	r3, #3
 8019432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019438:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801943c:	4293      	cmp	r3, r2
 801943e:	d802      	bhi.n	8019446 <find_volume+0x33e>
 8019440:	2302      	movs	r3, #2
 8019442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019448:	f640 72f5 	movw	r2, #4085	; 0xff5
 801944c:	4293      	cmp	r3, r2
 801944e:	d802      	bhi.n	8019456 <find_volume+0x34e>
 8019450:	2301      	movs	r3, #1
 8019452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019458:	1c9a      	adds	r2, r3, #2
 801945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801945c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019462:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019464:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019468:	441a      	add	r2, r3
 801946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801946c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801946e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019472:	441a      	add	r2, r3
 8019474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019476:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801947c:	2b03      	cmp	r3, #3
 801947e:	d11e      	bne.n	80194be <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019482:	3338      	adds	r3, #56	; 0x38
 8019484:	332a      	adds	r3, #42	; 0x2a
 8019486:	4618      	mov	r0, r3
 8019488:	f7fd ffbe 	bl	8017408 <ld_word>
 801948c:	4603      	mov	r3, r0
 801948e:	2b00      	cmp	r3, #0
 8019490:	d001      	beq.n	8019496 <find_volume+0x38e>
 8019492:	230d      	movs	r3, #13
 8019494:	e0b1      	b.n	80195fa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019498:	891b      	ldrh	r3, [r3, #8]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d001      	beq.n	80194a2 <find_volume+0x39a>
 801949e:	230d      	movs	r3, #13
 80194a0:	e0ab      	b.n	80195fa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80194a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194a4:	3338      	adds	r3, #56	; 0x38
 80194a6:	332c      	adds	r3, #44	; 0x2c
 80194a8:	4618      	mov	r0, r3
 80194aa:	f7fd ffc5 	bl	8017438 <ld_dword>
 80194ae:	4602      	mov	r2, r0
 80194b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194b2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80194b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194b6:	69db      	ldr	r3, [r3, #28]
 80194b8:	009b      	lsls	r3, r3, #2
 80194ba:	647b      	str	r3, [r7, #68]	; 0x44
 80194bc:	e01f      	b.n	80194fe <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80194be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c0:	891b      	ldrh	r3, [r3, #8]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d101      	bne.n	80194ca <find_volume+0x3c2>
 80194c6:	230d      	movs	r3, #13
 80194c8:	e097      	b.n	80195fa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80194ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80194ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194d0:	441a      	add	r2, r3
 80194d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80194d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80194da:	2b02      	cmp	r3, #2
 80194dc:	d103      	bne.n	80194e6 <find_volume+0x3de>
 80194de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e0:	69db      	ldr	r3, [r3, #28]
 80194e2:	005b      	lsls	r3, r3, #1
 80194e4:	e00a      	b.n	80194fc <find_volume+0x3f4>
 80194e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e8:	69da      	ldr	r2, [r3, #28]
 80194ea:	4613      	mov	r3, r2
 80194ec:	005b      	lsls	r3, r3, #1
 80194ee:	4413      	add	r3, r2
 80194f0:	085a      	lsrs	r2, r3, #1
 80194f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194f4:	69db      	ldr	r3, [r3, #28]
 80194f6:	f003 0301 	and.w	r3, r3, #1
 80194fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80194fc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80194fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019500:	6a1a      	ldr	r2, [r3, #32]
 8019502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019504:	899b      	ldrh	r3, [r3, #12]
 8019506:	4619      	mov	r1, r3
 8019508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801950a:	440b      	add	r3, r1
 801950c:	3b01      	subs	r3, #1
 801950e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019510:	8989      	ldrh	r1, [r1, #12]
 8019512:	fbb3 f3f1 	udiv	r3, r3, r1
 8019516:	429a      	cmp	r2, r3
 8019518:	d201      	bcs.n	801951e <find_volume+0x416>
 801951a:	230d      	movs	r3, #13
 801951c:	e06d      	b.n	80195fa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019520:	f04f 32ff 	mov.w	r2, #4294967295
 8019524:	619a      	str	r2, [r3, #24]
 8019526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019528:	699a      	ldr	r2, [r3, #24]
 801952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019530:	2280      	movs	r2, #128	; 0x80
 8019532:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019538:	2b03      	cmp	r3, #3
 801953a:	d149      	bne.n	80195d0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953e:	3338      	adds	r3, #56	; 0x38
 8019540:	3330      	adds	r3, #48	; 0x30
 8019542:	4618      	mov	r0, r3
 8019544:	f7fd ff60 	bl	8017408 <ld_word>
 8019548:	4603      	mov	r3, r0
 801954a:	2b01      	cmp	r3, #1
 801954c:	d140      	bne.n	80195d0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801954e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019550:	3301      	adds	r3, #1
 8019552:	4619      	mov	r1, r3
 8019554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019556:	f7fe fa07 	bl	8017968 <move_window>
 801955a:	4603      	mov	r3, r0
 801955c:	2b00      	cmp	r3, #0
 801955e:	d137      	bne.n	80195d0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019562:	2200      	movs	r2, #0
 8019564:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019568:	3338      	adds	r3, #56	; 0x38
 801956a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801956e:	4618      	mov	r0, r3
 8019570:	f7fd ff4a 	bl	8017408 <ld_word>
 8019574:	4603      	mov	r3, r0
 8019576:	461a      	mov	r2, r3
 8019578:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801957c:	429a      	cmp	r2, r3
 801957e:	d127      	bne.n	80195d0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019582:	3338      	adds	r3, #56	; 0x38
 8019584:	4618      	mov	r0, r3
 8019586:	f7fd ff57 	bl	8017438 <ld_dword>
 801958a:	4603      	mov	r3, r0
 801958c:	4a1d      	ldr	r2, [pc, #116]	; (8019604 <find_volume+0x4fc>)
 801958e:	4293      	cmp	r3, r2
 8019590:	d11e      	bne.n	80195d0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019594:	3338      	adds	r3, #56	; 0x38
 8019596:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801959a:	4618      	mov	r0, r3
 801959c:	f7fd ff4c 	bl	8017438 <ld_dword>
 80195a0:	4603      	mov	r3, r0
 80195a2:	4a19      	ldr	r2, [pc, #100]	; (8019608 <find_volume+0x500>)
 80195a4:	4293      	cmp	r3, r2
 80195a6:	d113      	bne.n	80195d0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80195a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195aa:	3338      	adds	r3, #56	; 0x38
 80195ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7fd ff41 	bl	8017438 <ld_dword>
 80195b6:	4602      	mov	r2, r0
 80195b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ba:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80195bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195be:	3338      	adds	r3, #56	; 0x38
 80195c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80195c4:	4618      	mov	r0, r3
 80195c6:	f7fd ff37 	bl	8017438 <ld_dword>
 80195ca:	4602      	mov	r2, r0
 80195cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ce:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80195d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80195d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80195d8:	4b0c      	ldr	r3, [pc, #48]	; (801960c <find_volume+0x504>)
 80195da:	881b      	ldrh	r3, [r3, #0]
 80195dc:	3301      	adds	r3, #1
 80195de:	b29a      	uxth	r2, r3
 80195e0:	4b0a      	ldr	r3, [pc, #40]	; (801960c <find_volume+0x504>)
 80195e2:	801a      	strh	r2, [r3, #0]
 80195e4:	4b09      	ldr	r3, [pc, #36]	; (801960c <find_volume+0x504>)
 80195e6:	881a      	ldrh	r2, [r3, #0]
 80195e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ea:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80195ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ee:	4a08      	ldr	r2, [pc, #32]	; (8019610 <find_volume+0x508>)
 80195f0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80195f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80195f4:	f7fe f950 	bl	8017898 <clear_lock>
#endif
	return FR_OK;
 80195f8:	2300      	movs	r3, #0
}
 80195fa:	4618      	mov	r0, r3
 80195fc:	3758      	adds	r7, #88	; 0x58
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	41615252 	.word	0x41615252
 8019608:	61417272 	.word	0x61417272
 801960c:	240016b8 	.word	0x240016b8
 8019610:	240016dc 	.word	0x240016dc

08019614 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019614:	b580      	push	{r7, lr}
 8019616:	b084      	sub	sp, #16
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801961e:	2309      	movs	r3, #9
 8019620:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d01c      	beq.n	8019662 <validate+0x4e>
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d018      	beq.n	8019662 <validate+0x4e>
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	781b      	ldrb	r3, [r3, #0]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d013      	beq.n	8019662 <validate+0x4e>
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	889a      	ldrh	r2, [r3, #4]
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	88db      	ldrh	r3, [r3, #6]
 8019644:	429a      	cmp	r2, r3
 8019646:	d10c      	bne.n	8019662 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	785b      	ldrb	r3, [r3, #1]
 801964e:	4618      	mov	r0, r3
 8019650:	f7fd fe3c 	bl	80172cc <disk_status>
 8019654:	4603      	mov	r3, r0
 8019656:	f003 0301 	and.w	r3, r3, #1
 801965a:	2b00      	cmp	r3, #0
 801965c:	d101      	bne.n	8019662 <validate+0x4e>
			res = FR_OK;
 801965e:	2300      	movs	r3, #0
 8019660:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019662:	7bfb      	ldrb	r3, [r7, #15]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d102      	bne.n	801966e <validate+0x5a>
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	e000      	b.n	8019670 <validate+0x5c>
 801966e:	2300      	movs	r3, #0
 8019670:	683a      	ldr	r2, [r7, #0]
 8019672:	6013      	str	r3, [r2, #0]
	return res;
 8019674:	7bfb      	ldrb	r3, [r7, #15]
}
 8019676:	4618      	mov	r0, r3
 8019678:	3710      	adds	r7, #16
 801967a:	46bd      	mov	sp, r7
 801967c:	bd80      	pop	{r7, pc}
	...

08019680 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b088      	sub	sp, #32
 8019684:	af00      	add	r7, sp, #0
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	60b9      	str	r1, [r7, #8]
 801968a:	4613      	mov	r3, r2
 801968c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019692:	f107 0310 	add.w	r3, r7, #16
 8019696:	4618      	mov	r0, r3
 8019698:	f7ff fc9c 	bl	8018fd4 <get_ldnumber>
 801969c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801969e:	69fb      	ldr	r3, [r7, #28]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	da01      	bge.n	80196a8 <f_mount+0x28>
 80196a4:	230b      	movs	r3, #11
 80196a6:	e02b      	b.n	8019700 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80196a8:	4a17      	ldr	r2, [pc, #92]	; (8019708 <f_mount+0x88>)
 80196aa:	69fb      	ldr	r3, [r7, #28]
 80196ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80196b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d005      	beq.n	80196c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80196b8:	69b8      	ldr	r0, [r7, #24]
 80196ba:	f7fe f8ed 	bl	8017898 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80196be:	69bb      	ldr	r3, [r7, #24]
 80196c0:	2200      	movs	r2, #0
 80196c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d002      	beq.n	80196d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	2200      	movs	r2, #0
 80196ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80196d0:	68fa      	ldr	r2, [r7, #12]
 80196d2:	490d      	ldr	r1, [pc, #52]	; (8019708 <f_mount+0x88>)
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d002      	beq.n	80196e6 <f_mount+0x66>
 80196e0:	79fb      	ldrb	r3, [r7, #7]
 80196e2:	2b01      	cmp	r3, #1
 80196e4:	d001      	beq.n	80196ea <f_mount+0x6a>
 80196e6:	2300      	movs	r3, #0
 80196e8:	e00a      	b.n	8019700 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80196ea:	f107 010c 	add.w	r1, r7, #12
 80196ee:	f107 0308 	add.w	r3, r7, #8
 80196f2:	2200      	movs	r2, #0
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7ff fd07 	bl	8019108 <find_volume>
 80196fa:	4603      	mov	r3, r0
 80196fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80196fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8019700:	4618      	mov	r0, r3
 8019702:	3720      	adds	r7, #32
 8019704:	46bd      	mov	sp, r7
 8019706:	bd80      	pop	{r7, pc}
 8019708:	240016b4 	.word	0x240016b4

0801970c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b09a      	sub	sp, #104	; 0x68
 8019710:	af00      	add	r7, sp, #0
 8019712:	60f8      	str	r0, [r7, #12]
 8019714:	60b9      	str	r1, [r7, #8]
 8019716:	4613      	mov	r3, r2
 8019718:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d101      	bne.n	8019724 <f_open+0x18>
 8019720:	2309      	movs	r3, #9
 8019722:	e1bb      	b.n	8019a9c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019724:	79fb      	ldrb	r3, [r7, #7]
 8019726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801972a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801972c:	79fa      	ldrb	r2, [r7, #7]
 801972e:	f107 0114 	add.w	r1, r7, #20
 8019732:	f107 0308 	add.w	r3, r7, #8
 8019736:	4618      	mov	r0, r3
 8019738:	f7ff fce6 	bl	8019108 <find_volume>
 801973c:	4603      	mov	r3, r0
 801973e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019746:	2b00      	cmp	r3, #0
 8019748:	f040 819f 	bne.w	8019a8a <f_open+0x37e>
		dj.obj.fs = fs;
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019750:	68ba      	ldr	r2, [r7, #8]
 8019752:	f107 0318 	add.w	r3, r7, #24
 8019756:	4611      	mov	r1, r2
 8019758:	4618      	mov	r0, r3
 801975a:	f7ff fbc5 	bl	8018ee8 <follow_path>
 801975e:	4603      	mov	r3, r0
 8019760:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019768:	2b00      	cmp	r3, #0
 801976a:	d11a      	bne.n	80197a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801976c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019770:	b25b      	sxtb	r3, r3
 8019772:	2b00      	cmp	r3, #0
 8019774:	da03      	bge.n	801977e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019776:	2306      	movs	r3, #6
 8019778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801977c:	e011      	b.n	80197a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801977e:	79fb      	ldrb	r3, [r7, #7]
 8019780:	f023 0301 	bic.w	r3, r3, #1
 8019784:	2b00      	cmp	r3, #0
 8019786:	bf14      	ite	ne
 8019788:	2301      	movne	r3, #1
 801978a:	2300      	moveq	r3, #0
 801978c:	b2db      	uxtb	r3, r3
 801978e:	461a      	mov	r2, r3
 8019790:	f107 0318 	add.w	r3, r7, #24
 8019794:	4611      	mov	r1, r2
 8019796:	4618      	mov	r0, r3
 8019798:	f7fd ff36 	bl	8017608 <chk_lock>
 801979c:	4603      	mov	r3, r0
 801979e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80197a2:	79fb      	ldrb	r3, [r7, #7]
 80197a4:	f003 031c 	and.w	r3, r3, #28
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d07f      	beq.n	80198ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80197ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d017      	beq.n	80197e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80197b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80197b8:	2b04      	cmp	r3, #4
 80197ba:	d10e      	bne.n	80197da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80197bc:	f7fd ff80 	bl	80176c0 <enq_lock>
 80197c0:	4603      	mov	r3, r0
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d006      	beq.n	80197d4 <f_open+0xc8>
 80197c6:	f107 0318 	add.w	r3, r7, #24
 80197ca:	4618      	mov	r0, r3
 80197cc:	f7ff f8dc 	bl	8018988 <dir_register>
 80197d0:	4603      	mov	r3, r0
 80197d2:	e000      	b.n	80197d6 <f_open+0xca>
 80197d4:	2312      	movs	r3, #18
 80197d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80197da:	79fb      	ldrb	r3, [r7, #7]
 80197dc:	f043 0308 	orr.w	r3, r3, #8
 80197e0:	71fb      	strb	r3, [r7, #7]
 80197e2:	e010      	b.n	8019806 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80197e4:	7fbb      	ldrb	r3, [r7, #30]
 80197e6:	f003 0311 	and.w	r3, r3, #17
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d003      	beq.n	80197f6 <f_open+0xea>
					res = FR_DENIED;
 80197ee:	2307      	movs	r3, #7
 80197f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80197f4:	e007      	b.n	8019806 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80197f6:	79fb      	ldrb	r3, [r7, #7]
 80197f8:	f003 0304 	and.w	r3, r3, #4
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d002      	beq.n	8019806 <f_open+0xfa>
 8019800:	2308      	movs	r3, #8
 8019802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801980a:	2b00      	cmp	r3, #0
 801980c:	d168      	bne.n	80198e0 <f_open+0x1d4>
 801980e:	79fb      	ldrb	r3, [r7, #7]
 8019810:	f003 0308 	and.w	r3, r3, #8
 8019814:	2b00      	cmp	r3, #0
 8019816:	d063      	beq.n	80198e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019818:	f7fb fb6e 	bl	8014ef8 <get_fattime>
 801981c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019820:	330e      	adds	r3, #14
 8019822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019824:	4618      	mov	r0, r3
 8019826:	f7fd fe45 	bl	80174b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801982c:	3316      	adds	r3, #22
 801982e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019830:	4618      	mov	r0, r3
 8019832:	f7fd fe3f 	bl	80174b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019838:	330b      	adds	r3, #11
 801983a:	2220      	movs	r2, #32
 801983c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019842:	4611      	mov	r1, r2
 8019844:	4618      	mov	r0, r3
 8019846:	f7fe fe17 	bl	8018478 <ld_clust>
 801984a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019850:	2200      	movs	r2, #0
 8019852:	4618      	mov	r0, r3
 8019854:	f7fe fe2f 	bl	80184b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801985a:	331c      	adds	r3, #28
 801985c:	2100      	movs	r1, #0
 801985e:	4618      	mov	r0, r3
 8019860:	f7fd fe28 	bl	80174b4 <st_dword>
					fs->wflag = 1;
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	2201      	movs	r2, #1
 8019868:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801986a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801986c:	2b00      	cmp	r3, #0
 801986e:	d037      	beq.n	80198e0 <f_open+0x1d4>
						dw = fs->winsect;
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019874:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019876:	f107 0318 	add.w	r3, r7, #24
 801987a:	2200      	movs	r2, #0
 801987c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801987e:	4618      	mov	r0, r3
 8019880:	f7fe fb1f 	bl	8017ec2 <remove_chain>
 8019884:	4603      	mov	r3, r0
 8019886:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801988a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801988e:	2b00      	cmp	r3, #0
 8019890:	d126      	bne.n	80198e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019892:	697b      	ldr	r3, [r7, #20]
 8019894:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019896:	4618      	mov	r0, r3
 8019898:	f7fe f866 	bl	8017968 <move_window>
 801989c:	4603      	mov	r3, r0
 801989e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80198a2:	697b      	ldr	r3, [r7, #20]
 80198a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80198a6:	3a01      	subs	r2, #1
 80198a8:	615a      	str	r2, [r3, #20]
 80198aa:	e019      	b.n	80198e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80198ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d115      	bne.n	80198e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80198b4:	7fbb      	ldrb	r3, [r7, #30]
 80198b6:	f003 0310 	and.w	r3, r3, #16
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d003      	beq.n	80198c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80198be:	2304      	movs	r3, #4
 80198c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80198c4:	e00c      	b.n	80198e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80198c6:	79fb      	ldrb	r3, [r7, #7]
 80198c8:	f003 0302 	and.w	r3, r3, #2
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d007      	beq.n	80198e0 <f_open+0x1d4>
 80198d0:	7fbb      	ldrb	r3, [r7, #30]
 80198d2:	f003 0301 	and.w	r3, r3, #1
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d002      	beq.n	80198e0 <f_open+0x1d4>
						res = FR_DENIED;
 80198da:	2307      	movs	r3, #7
 80198dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80198e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d128      	bne.n	801993a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80198e8:	79fb      	ldrb	r3, [r7, #7]
 80198ea:	f003 0308 	and.w	r3, r3, #8
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d003      	beq.n	80198fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80198f2:	79fb      	ldrb	r3, [r7, #7]
 80198f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019908:	79fb      	ldrb	r3, [r7, #7]
 801990a:	f023 0301 	bic.w	r3, r3, #1
 801990e:	2b00      	cmp	r3, #0
 8019910:	bf14      	ite	ne
 8019912:	2301      	movne	r3, #1
 8019914:	2300      	moveq	r3, #0
 8019916:	b2db      	uxtb	r3, r3
 8019918:	461a      	mov	r2, r3
 801991a:	f107 0318 	add.w	r3, r7, #24
 801991e:	4611      	mov	r1, r2
 8019920:	4618      	mov	r0, r3
 8019922:	f7fd feef 	bl	8017704 <inc_lock>
 8019926:	4602      	mov	r2, r0
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	691b      	ldr	r3, [r3, #16]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d102      	bne.n	801993a <f_open+0x22e>
 8019934:	2302      	movs	r3, #2
 8019936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801993a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801993e:	2b00      	cmp	r3, #0
 8019940:	f040 80a3 	bne.w	8019a8a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019948:	4611      	mov	r1, r2
 801994a:	4618      	mov	r0, r3
 801994c:	f7fe fd94 	bl	8018478 <ld_clust>
 8019950:	4602      	mov	r2, r0
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019958:	331c      	adds	r3, #28
 801995a:	4618      	mov	r0, r3
 801995c:	f7fd fd6c 	bl	8017438 <ld_dword>
 8019960:	4602      	mov	r2, r0
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	2200      	movs	r2, #0
 801996a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801996c:	697a      	ldr	r2, [r7, #20]
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	88da      	ldrh	r2, [r3, #6]
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	79fa      	ldrb	r2, [r7, #7]
 801997e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	2200      	movs	r2, #0
 8019984:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	2200      	movs	r2, #0
 801998a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	2200      	movs	r2, #0
 8019990:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	3330      	adds	r3, #48	; 0x30
 8019996:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801999a:	2100      	movs	r1, #0
 801999c:	4618      	mov	r0, r3
 801999e:	f7fd fdd6 	bl	801754e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80199a2:	79fb      	ldrb	r3, [r7, #7]
 80199a4:	f003 0320 	and.w	r3, r3, #32
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d06e      	beq.n	8019a8a <f_open+0x37e>
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	68db      	ldr	r3, [r3, #12]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d06a      	beq.n	8019a8a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	68da      	ldr	r2, [r3, #12]
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80199bc:	697b      	ldr	r3, [r7, #20]
 80199be:	895b      	ldrh	r3, [r3, #10]
 80199c0:	461a      	mov	r2, r3
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	899b      	ldrh	r3, [r3, #12]
 80199c6:	fb02 f303 	mul.w	r3, r2, r3
 80199ca:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	689b      	ldr	r3, [r3, #8]
 80199d0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	68db      	ldr	r3, [r3, #12]
 80199d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80199d8:	e016      	b.n	8019a08 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80199de:	4618      	mov	r0, r3
 80199e0:	f7fe f87f 	bl	8017ae2 <get_fat>
 80199e4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80199e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d802      	bhi.n	80199f2 <f_open+0x2e6>
 80199ec:	2302      	movs	r3, #2
 80199ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80199f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80199f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199f8:	d102      	bne.n	8019a00 <f_open+0x2f4>
 80199fa:	2301      	movs	r3, #1
 80199fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a04:	1ad3      	subs	r3, r2, r3
 8019a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019a08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d103      	bne.n	8019a18 <f_open+0x30c>
 8019a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d8e0      	bhi.n	80199da <f_open+0x2ce>
				}
				fp->clust = clst;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019a1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019a1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d131      	bne.n	8019a8a <f_open+0x37e>
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	899b      	ldrh	r3, [r3, #12]
 8019a2a:	461a      	mov	r2, r3
 8019a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a32:	fb01 f202 	mul.w	r2, r1, r2
 8019a36:	1a9b      	subs	r3, r3, r2
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d026      	beq.n	8019a8a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019a3c:	697b      	ldr	r3, [r7, #20]
 8019a3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019a40:	4618      	mov	r0, r3
 8019a42:	f7fe f82f 	bl	8017aa4 <clust2sect>
 8019a46:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d103      	bne.n	8019a56 <f_open+0x34a>
						res = FR_INT_ERR;
 8019a4e:	2302      	movs	r3, #2
 8019a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019a54:	e019      	b.n	8019a8a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	899b      	ldrh	r3, [r3, #12]
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8019a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a64:	441a      	add	r2, r3
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	7858      	ldrb	r0, [r3, #1]
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	6a1a      	ldr	r2, [r3, #32]
 8019a78:	2301      	movs	r3, #1
 8019a7a:	f7fd fc67 	bl	801734c <disk_read>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d002      	beq.n	8019a8a <f_open+0x37e>
 8019a84:	2301      	movs	r3, #1
 8019a86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019a8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d002      	beq.n	8019a98 <f_open+0x38c>
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	2200      	movs	r2, #0
 8019a96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019a98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3768      	adds	r7, #104	; 0x68
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}

08019aa4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b08c      	sub	sp, #48	; 0x30
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	60f8      	str	r0, [r7, #12]
 8019aac:	60b9      	str	r1, [r7, #8]
 8019aae:	607a      	str	r2, [r7, #4]
 8019ab0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019ab2:	68bb      	ldr	r3, [r7, #8]
 8019ab4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	2200      	movs	r2, #0
 8019aba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	f107 0210 	add.w	r2, r7, #16
 8019ac2:	4611      	mov	r1, r2
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7ff fda5 	bl	8019614 <validate>
 8019aca:	4603      	mov	r3, r0
 8019acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d107      	bne.n	8019ae8 <f_write+0x44>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	7d5b      	ldrb	r3, [r3, #21]
 8019adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d002      	beq.n	8019aee <f_write+0x4a>
 8019ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019aec:	e16a      	b.n	8019dc4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	7d1b      	ldrb	r3, [r3, #20]
 8019af2:	f003 0302 	and.w	r3, r3, #2
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d101      	bne.n	8019afe <f_write+0x5a>
 8019afa:	2307      	movs	r3, #7
 8019afc:	e162      	b.n	8019dc4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	699a      	ldr	r2, [r3, #24]
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	441a      	add	r2, r3
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	699b      	ldr	r3, [r3, #24]
 8019b0a:	429a      	cmp	r2, r3
 8019b0c:	f080 814c 	bcs.w	8019da8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	699b      	ldr	r3, [r3, #24]
 8019b14:	43db      	mvns	r3, r3
 8019b16:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019b18:	e146      	b.n	8019da8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	699b      	ldr	r3, [r3, #24]
 8019b1e:	693a      	ldr	r2, [r7, #16]
 8019b20:	8992      	ldrh	r2, [r2, #12]
 8019b22:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b26:	fb01 f202 	mul.w	r2, r1, r2
 8019b2a:	1a9b      	subs	r3, r3, r2
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	f040 80f1 	bne.w	8019d14 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	699b      	ldr	r3, [r3, #24]
 8019b36:	693a      	ldr	r2, [r7, #16]
 8019b38:	8992      	ldrh	r2, [r2, #12]
 8019b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b3e:	693a      	ldr	r2, [r7, #16]
 8019b40:	8952      	ldrh	r2, [r2, #10]
 8019b42:	3a01      	subs	r2, #1
 8019b44:	4013      	ands	r3, r2
 8019b46:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019b48:	69bb      	ldr	r3, [r7, #24]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d143      	bne.n	8019bd6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	699b      	ldr	r3, [r3, #24]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d10c      	bne.n	8019b70 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	689b      	ldr	r3, [r3, #8]
 8019b5a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d11a      	bne.n	8019b98 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	2100      	movs	r1, #0
 8019b66:	4618      	mov	r0, r3
 8019b68:	f7fe fa10 	bl	8017f8c <create_chain>
 8019b6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8019b6e:	e013      	b.n	8019b98 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d007      	beq.n	8019b88 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	699b      	ldr	r3, [r3, #24]
 8019b7c:	4619      	mov	r1, r3
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	f7fe fa9c 	bl	80180bc <clmt_clust>
 8019b84:	62b8      	str	r0, [r7, #40]	; 0x28
 8019b86:	e007      	b.n	8019b98 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019b88:	68fa      	ldr	r2, [r7, #12]
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	69db      	ldr	r3, [r3, #28]
 8019b8e:	4619      	mov	r1, r3
 8019b90:	4610      	mov	r0, r2
 8019b92:	f7fe f9fb 	bl	8017f8c <create_chain>
 8019b96:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	f000 8109 	beq.w	8019db2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d104      	bne.n	8019bb0 <f_write+0x10c>
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	2202      	movs	r2, #2
 8019baa:	755a      	strb	r2, [r3, #21]
 8019bac:	2302      	movs	r3, #2
 8019bae:	e109      	b.n	8019dc4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bb6:	d104      	bne.n	8019bc2 <f_write+0x11e>
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	2201      	movs	r2, #1
 8019bbc:	755a      	strb	r2, [r3, #21]
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	e100      	b.n	8019dc4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bc6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	689b      	ldr	r3, [r3, #8]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d102      	bne.n	8019bd6 <f_write+0x132>
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bd4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	7d1b      	ldrb	r3, [r3, #20]
 8019bda:	b25b      	sxtb	r3, r3
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	da18      	bge.n	8019c12 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019be0:	693b      	ldr	r3, [r7, #16]
 8019be2:	7858      	ldrb	r0, [r3, #1]
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	6a1a      	ldr	r2, [r3, #32]
 8019bee:	2301      	movs	r3, #1
 8019bf0:	f7fd fbcc 	bl	801738c <disk_write>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d004      	beq.n	8019c04 <f_write+0x160>
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	2201      	movs	r2, #1
 8019bfe:	755a      	strb	r2, [r3, #21]
 8019c00:	2301      	movs	r3, #1
 8019c02:	e0df      	b.n	8019dc4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	7d1b      	ldrb	r3, [r3, #20]
 8019c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c0c:	b2da      	uxtb	r2, r3
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019c12:	693a      	ldr	r2, [r7, #16]
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	69db      	ldr	r3, [r3, #28]
 8019c18:	4619      	mov	r1, r3
 8019c1a:	4610      	mov	r0, r2
 8019c1c:	f7fd ff42 	bl	8017aa4 <clust2sect>
 8019c20:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d104      	bne.n	8019c32 <f_write+0x18e>
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	2202      	movs	r2, #2
 8019c2c:	755a      	strb	r2, [r3, #21]
 8019c2e:	2302      	movs	r3, #2
 8019c30:	e0c8      	b.n	8019dc4 <f_write+0x320>
			sect += csect;
 8019c32:	697a      	ldr	r2, [r7, #20]
 8019c34:	69bb      	ldr	r3, [r7, #24]
 8019c36:	4413      	add	r3, r2
 8019c38:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019c3a:	693b      	ldr	r3, [r7, #16]
 8019c3c:	899b      	ldrh	r3, [r3, #12]
 8019c3e:	461a      	mov	r2, r3
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8019c46:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019c48:	6a3b      	ldr	r3, [r7, #32]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d043      	beq.n	8019cd6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019c4e:	69ba      	ldr	r2, [r7, #24]
 8019c50:	6a3b      	ldr	r3, [r7, #32]
 8019c52:	4413      	add	r3, r2
 8019c54:	693a      	ldr	r2, [r7, #16]
 8019c56:	8952      	ldrh	r2, [r2, #10]
 8019c58:	4293      	cmp	r3, r2
 8019c5a:	d905      	bls.n	8019c68 <f_write+0x1c4>
					cc = fs->csize - csect;
 8019c5c:	693b      	ldr	r3, [r7, #16]
 8019c5e:	895b      	ldrh	r3, [r3, #10]
 8019c60:	461a      	mov	r2, r3
 8019c62:	69bb      	ldr	r3, [r7, #24]
 8019c64:	1ad3      	subs	r3, r2, r3
 8019c66:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	7858      	ldrb	r0, [r3, #1]
 8019c6c:	6a3b      	ldr	r3, [r7, #32]
 8019c6e:	697a      	ldr	r2, [r7, #20]
 8019c70:	69f9      	ldr	r1, [r7, #28]
 8019c72:	f7fd fb8b 	bl	801738c <disk_write>
 8019c76:	4603      	mov	r3, r0
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d004      	beq.n	8019c86 <f_write+0x1e2>
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	2201      	movs	r2, #1
 8019c80:	755a      	strb	r2, [r3, #21]
 8019c82:	2301      	movs	r3, #1
 8019c84:	e09e      	b.n	8019dc4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	6a1a      	ldr	r2, [r3, #32]
 8019c8a:	697b      	ldr	r3, [r7, #20]
 8019c8c:	1ad3      	subs	r3, r2, r3
 8019c8e:	6a3a      	ldr	r2, [r7, #32]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d918      	bls.n	8019cc6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	6a1a      	ldr	r2, [r3, #32]
 8019c9e:	697b      	ldr	r3, [r7, #20]
 8019ca0:	1ad3      	subs	r3, r2, r3
 8019ca2:	693a      	ldr	r2, [r7, #16]
 8019ca4:	8992      	ldrh	r2, [r2, #12]
 8019ca6:	fb02 f303 	mul.w	r3, r2, r3
 8019caa:	69fa      	ldr	r2, [r7, #28]
 8019cac:	18d1      	adds	r1, r2, r3
 8019cae:	693b      	ldr	r3, [r7, #16]
 8019cb0:	899b      	ldrh	r3, [r3, #12]
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	f7fd fc2a 	bl	801750c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	7d1b      	ldrb	r3, [r3, #20]
 8019cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cc0:	b2da      	uxtb	r2, r3
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019cc6:	693b      	ldr	r3, [r7, #16]
 8019cc8:	899b      	ldrh	r3, [r3, #12]
 8019cca:	461a      	mov	r2, r3
 8019ccc:	6a3b      	ldr	r3, [r7, #32]
 8019cce:	fb02 f303 	mul.w	r3, r2, r3
 8019cd2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019cd4:	e04b      	b.n	8019d6e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	6a1b      	ldr	r3, [r3, #32]
 8019cda:	697a      	ldr	r2, [r7, #20]
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d016      	beq.n	8019d0e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	699a      	ldr	r2, [r3, #24]
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019ce8:	429a      	cmp	r2, r3
 8019cea:	d210      	bcs.n	8019d0e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019cec:	693b      	ldr	r3, [r7, #16]
 8019cee:	7858      	ldrb	r0, [r3, #1]
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019cf6:	2301      	movs	r3, #1
 8019cf8:	697a      	ldr	r2, [r7, #20]
 8019cfa:	f7fd fb27 	bl	801734c <disk_read>
 8019cfe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d004      	beq.n	8019d0e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	2201      	movs	r2, #1
 8019d08:	755a      	strb	r2, [r3, #21]
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	e05a      	b.n	8019dc4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	697a      	ldr	r2, [r7, #20]
 8019d12:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019d14:	693b      	ldr	r3, [r7, #16]
 8019d16:	899b      	ldrh	r3, [r3, #12]
 8019d18:	4618      	mov	r0, r3
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	699b      	ldr	r3, [r3, #24]
 8019d1e:	693a      	ldr	r2, [r7, #16]
 8019d20:	8992      	ldrh	r2, [r2, #12]
 8019d22:	fbb3 f1f2 	udiv	r1, r3, r2
 8019d26:	fb01 f202 	mul.w	r2, r1, r2
 8019d2a:	1a9b      	subs	r3, r3, r2
 8019d2c:	1ac3      	subs	r3, r0, r3
 8019d2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	429a      	cmp	r2, r3
 8019d36:	d901      	bls.n	8019d3c <f_write+0x298>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	699b      	ldr	r3, [r3, #24]
 8019d46:	693a      	ldr	r2, [r7, #16]
 8019d48:	8992      	ldrh	r2, [r2, #12]
 8019d4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8019d4e:	fb00 f202 	mul.w	r2, r0, r2
 8019d52:	1a9b      	subs	r3, r3, r2
 8019d54:	440b      	add	r3, r1
 8019d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d58:	69f9      	ldr	r1, [r7, #28]
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	f7fd fbd6 	bl	801750c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	7d1b      	ldrb	r3, [r3, #20]
 8019d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019d68:	b2da      	uxtb	r2, r3
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019d6e:	69fa      	ldr	r2, [r7, #28]
 8019d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d72:	4413      	add	r3, r2
 8019d74:	61fb      	str	r3, [r7, #28]
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	699a      	ldr	r2, [r3, #24]
 8019d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d7c:	441a      	add	r2, r3
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	619a      	str	r2, [r3, #24]
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	68da      	ldr	r2, [r3, #12]
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	699b      	ldr	r3, [r3, #24]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	bf38      	it	cc
 8019d8e:	461a      	movcc	r2, r3
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	60da      	str	r2, [r3, #12]
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	681a      	ldr	r2, [r3, #0]
 8019d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9a:	441a      	add	r2, r3
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	601a      	str	r2, [r3, #0]
 8019da0:	687a      	ldr	r2, [r7, #4]
 8019da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019da4:	1ad3      	subs	r3, r2, r3
 8019da6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	f47f aeb5 	bne.w	8019b1a <f_write+0x76>
 8019db0:	e000      	b.n	8019db4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019db2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	7d1b      	ldrb	r3, [r3, #20]
 8019db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dbc:	b2da      	uxtb	r2, r3
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019dc2:	2300      	movs	r3, #0
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	3730      	adds	r7, #48	; 0x30
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}

08019dcc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b086      	sub	sp, #24
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	f107 0208 	add.w	r2, r7, #8
 8019dda:	4611      	mov	r1, r2
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7ff fc19 	bl	8019614 <validate>
 8019de2:	4603      	mov	r3, r0
 8019de4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019de6:	7dfb      	ldrb	r3, [r7, #23]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d168      	bne.n	8019ebe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	7d1b      	ldrb	r3, [r3, #20]
 8019df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d062      	beq.n	8019ebe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	7d1b      	ldrb	r3, [r3, #20]
 8019dfc:	b25b      	sxtb	r3, r3
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	da15      	bge.n	8019e2e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019e02:	68bb      	ldr	r3, [r7, #8]
 8019e04:	7858      	ldrb	r0, [r3, #1]
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	6a1a      	ldr	r2, [r3, #32]
 8019e10:	2301      	movs	r3, #1
 8019e12:	f7fd fabb 	bl	801738c <disk_write>
 8019e16:	4603      	mov	r3, r0
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d001      	beq.n	8019e20 <f_sync+0x54>
 8019e1c:	2301      	movs	r3, #1
 8019e1e:	e04f      	b.n	8019ec0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	7d1b      	ldrb	r3, [r3, #20]
 8019e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e28:	b2da      	uxtb	r2, r3
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019e2e:	f7fb f863 	bl	8014ef8 <get_fattime>
 8019e32:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019e34:	68ba      	ldr	r2, [r7, #8]
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e3a:	4619      	mov	r1, r3
 8019e3c:	4610      	mov	r0, r2
 8019e3e:	f7fd fd93 	bl	8017968 <move_window>
 8019e42:	4603      	mov	r3, r0
 8019e44:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019e46:	7dfb      	ldrb	r3, [r7, #23]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d138      	bne.n	8019ebe <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e50:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	330b      	adds	r3, #11
 8019e56:	781a      	ldrb	r2, [r3, #0]
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	330b      	adds	r3, #11
 8019e5c:	f042 0220 	orr.w	r2, r2, #32
 8019e60:	b2d2      	uxtb	r2, r2
 8019e62:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	6818      	ldr	r0, [r3, #0]
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	689b      	ldr	r3, [r3, #8]
 8019e6c:	461a      	mov	r2, r3
 8019e6e:	68f9      	ldr	r1, [r7, #12]
 8019e70:	f7fe fb21 	bl	80184b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	f103 021c 	add.w	r2, r3, #28
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	68db      	ldr	r3, [r3, #12]
 8019e7e:	4619      	mov	r1, r3
 8019e80:	4610      	mov	r0, r2
 8019e82:	f7fd fb17 	bl	80174b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	3316      	adds	r3, #22
 8019e8a:	6939      	ldr	r1, [r7, #16]
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f7fd fb11 	bl	80174b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	3312      	adds	r3, #18
 8019e96:	2100      	movs	r1, #0
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7fd faf0 	bl	801747e <st_word>
					fs->wflag = 1;
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	2201      	movs	r2, #1
 8019ea2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f7fd fd8c 	bl	80179c4 <sync_fs>
 8019eac:	4603      	mov	r3, r0
 8019eae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	7d1b      	ldrb	r3, [r3, #20]
 8019eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019eb8:	b2da      	uxtb	r2, r3
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	3718      	adds	r7, #24
 8019ec4:	46bd      	mov	sp, r7
 8019ec6:	bd80      	pop	{r7, pc}

08019ec8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b084      	sub	sp, #16
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019ed0:	6878      	ldr	r0, [r7, #4]
 8019ed2:	f7ff ff7b 	bl	8019dcc <f_sync>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019eda:	7bfb      	ldrb	r3, [r7, #15]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d118      	bne.n	8019f12 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	f107 0208 	add.w	r2, r7, #8
 8019ee6:	4611      	mov	r1, r2
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7ff fb93 	bl	8019614 <validate>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019ef2:	7bfb      	ldrb	r3, [r7, #15]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d10c      	bne.n	8019f12 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	691b      	ldr	r3, [r3, #16]
 8019efc:	4618      	mov	r0, r3
 8019efe:	f7fd fc8f 	bl	8017820 <dec_lock>
 8019f02:	4603      	mov	r3, r0
 8019f04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019f06:	7bfb      	ldrb	r3, [r7, #15]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d102      	bne.n	8019f12 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	2200      	movs	r2, #0
 8019f10:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	3710      	adds	r7, #16
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bd80      	pop	{r7, pc}

08019f1c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b084      	sub	sp, #16
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
 8019f24:	460b      	mov	r3, r1
 8019f26:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8019f28:	78fb      	ldrb	r3, [r7, #3]
 8019f2a:	2b0a      	cmp	r3, #10
 8019f2c:	d103      	bne.n	8019f36 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8019f2e:	210d      	movs	r1, #13
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f7ff fff3 	bl	8019f1c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	db25      	blt.n	8019f8e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	1c5a      	adds	r2, r3, #1
 8019f46:	60fa      	str	r2, [r7, #12]
 8019f48:	687a      	ldr	r2, [r7, #4]
 8019f4a:	4413      	add	r3, r2
 8019f4c:	78fa      	ldrb	r2, [r7, #3]
 8019f4e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	2b3c      	cmp	r3, #60	; 0x3c
 8019f54:	dd12      	ble.n	8019f7c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	6818      	ldr	r0, [r3, #0]
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	f103 010c 	add.w	r1, r3, #12
 8019f60:	68fa      	ldr	r2, [r7, #12]
 8019f62:	f107 0308 	add.w	r3, r7, #8
 8019f66:	f7ff fd9d 	bl	8019aa4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019f6a:	68ba      	ldr	r2, [r7, #8]
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	429a      	cmp	r2, r3
 8019f70:	d101      	bne.n	8019f76 <putc_bfd+0x5a>
 8019f72:	2300      	movs	r3, #0
 8019f74:	e001      	b.n	8019f7a <putc_bfd+0x5e>
 8019f76:	f04f 33ff 	mov.w	r3, #4294967295
 8019f7a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	68fa      	ldr	r2, [r7, #12]
 8019f80:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	689b      	ldr	r3, [r3, #8]
 8019f86:	1c5a      	adds	r2, r3, #1
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	609a      	str	r2, [r3, #8]
 8019f8c:	e000      	b.n	8019f90 <putc_bfd+0x74>
	if (i < 0) return;
 8019f8e:	bf00      	nop
}
 8019f90:	3710      	adds	r7, #16
 8019f92:	46bd      	mov	sp, r7
 8019f94:	bd80      	pop	{r7, pc}

08019f96 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8019f96:	b580      	push	{r7, lr}
 8019f98:	b084      	sub	sp, #16
 8019f9a:	af00      	add	r7, sp, #0
 8019f9c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	685b      	ldr	r3, [r3, #4]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	db16      	blt.n	8019fd4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	6818      	ldr	r0, [r3, #0]
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	f103 010c 	add.w	r1, r3, #12
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	461a      	mov	r2, r3
 8019fb6:	f107 030c 	add.w	r3, r7, #12
 8019fba:	f7ff fd73 	bl	8019aa4 <f_write>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d107      	bne.n	8019fd4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	685b      	ldr	r3, [r3, #4]
 8019fc8:	68fa      	ldr	r2, [r7, #12]
 8019fca:	4293      	cmp	r3, r2
 8019fcc:	d102      	bne.n	8019fd4 <putc_flush+0x3e>
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	689b      	ldr	r3, [r3, #8]
 8019fd2:	e001      	b.n	8019fd8 <putc_flush+0x42>
	return EOF;
 8019fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019fd8:	4618      	mov	r0, r3
 8019fda:	3710      	adds	r7, #16
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	bd80      	pop	{r7, pc}

08019fe0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8019fe0:	b480      	push	{r7}
 8019fe2:	b083      	sub	sp, #12
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
 8019fe8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	683a      	ldr	r2, [r7, #0]
 8019fee:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	605a      	str	r2, [r3, #4]
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	685a      	ldr	r2, [r3, #4]
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	609a      	str	r2, [r3, #8]
}
 8019ffe:	bf00      	nop
 801a000:	370c      	adds	r7, #12
 801a002:	46bd      	mov	sp, r7
 801a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a008:	4770      	bx	lr

0801a00a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a00a:	b580      	push	{r7, lr}
 801a00c:	b096      	sub	sp, #88	; 0x58
 801a00e:	af00      	add	r7, sp, #0
 801a010:	6078      	str	r0, [r7, #4]
 801a012:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a014:	f107 030c 	add.w	r3, r7, #12
 801a018:	6839      	ldr	r1, [r7, #0]
 801a01a:	4618      	mov	r0, r3
 801a01c:	f7ff ffe0 	bl	8019fe0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a020:	e009      	b.n	801a036 <f_puts+0x2c>
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	1c5a      	adds	r2, r3, #1
 801a026:	607a      	str	r2, [r7, #4]
 801a028:	781a      	ldrb	r2, [r3, #0]
 801a02a:	f107 030c 	add.w	r3, r7, #12
 801a02e:	4611      	mov	r1, r2
 801a030:	4618      	mov	r0, r3
 801a032:	f7ff ff73 	bl	8019f1c <putc_bfd>
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	781b      	ldrb	r3, [r3, #0]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d1f1      	bne.n	801a022 <f_puts+0x18>
	return putc_flush(&pb);
 801a03e:	f107 030c 	add.w	r3, r7, #12
 801a042:	4618      	mov	r0, r3
 801a044:	f7ff ffa7 	bl	8019f96 <putc_flush>
 801a048:	4603      	mov	r3, r0
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	3758      	adds	r7, #88	; 0x58
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd80      	pop	{r7, pc}
	...

0801a054 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a054:	b480      	push	{r7}
 801a056:	b087      	sub	sp, #28
 801a058:	af00      	add	r7, sp, #0
 801a05a:	60f8      	str	r0, [r7, #12]
 801a05c:	60b9      	str	r1, [r7, #8]
 801a05e:	4613      	mov	r3, r2
 801a060:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a062:	2301      	movs	r3, #1
 801a064:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a066:	2300      	movs	r3, #0
 801a068:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a06a:	4b1f      	ldr	r3, [pc, #124]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a06c:	7a5b      	ldrb	r3, [r3, #9]
 801a06e:	b2db      	uxtb	r3, r3
 801a070:	2b00      	cmp	r3, #0
 801a072:	d131      	bne.n	801a0d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a074:	4b1c      	ldr	r3, [pc, #112]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a076:	7a5b      	ldrb	r3, [r3, #9]
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	461a      	mov	r2, r3
 801a07c:	4b1a      	ldr	r3, [pc, #104]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a07e:	2100      	movs	r1, #0
 801a080:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a082:	4b19      	ldr	r3, [pc, #100]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a084:	7a5b      	ldrb	r3, [r3, #9]
 801a086:	b2db      	uxtb	r3, r3
 801a088:	4a17      	ldr	r2, [pc, #92]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a08a:	009b      	lsls	r3, r3, #2
 801a08c:	4413      	add	r3, r2
 801a08e:	68fa      	ldr	r2, [r7, #12]
 801a090:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a092:	4b15      	ldr	r3, [pc, #84]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a094:	7a5b      	ldrb	r3, [r3, #9]
 801a096:	b2db      	uxtb	r3, r3
 801a098:	461a      	mov	r2, r3
 801a09a:	4b13      	ldr	r3, [pc, #76]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a09c:	4413      	add	r3, r2
 801a09e:	79fa      	ldrb	r2, [r7, #7]
 801a0a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a0a2:	4b11      	ldr	r3, [pc, #68]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a0a4:	7a5b      	ldrb	r3, [r3, #9]
 801a0a6:	b2db      	uxtb	r3, r3
 801a0a8:	1c5a      	adds	r2, r3, #1
 801a0aa:	b2d1      	uxtb	r1, r2
 801a0ac:	4a0e      	ldr	r2, [pc, #56]	; (801a0e8 <FATFS_LinkDriverEx+0x94>)
 801a0ae:	7251      	strb	r1, [r2, #9]
 801a0b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a0b2:	7dbb      	ldrb	r3, [r7, #22]
 801a0b4:	3330      	adds	r3, #48	; 0x30
 801a0b6:	b2da      	uxtb	r2, r3
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	3301      	adds	r3, #1
 801a0c0:	223a      	movs	r2, #58	; 0x3a
 801a0c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a0c4:	68bb      	ldr	r3, [r7, #8]
 801a0c6:	3302      	adds	r3, #2
 801a0c8:	222f      	movs	r2, #47	; 0x2f
 801a0ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	3303      	adds	r3, #3
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0da:	4618      	mov	r0, r3
 801a0dc:	371c      	adds	r7, #28
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e4:	4770      	bx	lr
 801a0e6:	bf00      	nop
 801a0e8:	240018dc 	.word	0x240018dc

0801a0ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a0ec:	b580      	push	{r7, lr}
 801a0ee:	b082      	sub	sp, #8
 801a0f0:	af00      	add	r7, sp, #0
 801a0f2:	6078      	str	r0, [r7, #4]
 801a0f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	6839      	ldr	r1, [r7, #0]
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f7ff ffaa 	bl	801a054 <FATFS_LinkDriverEx>
 801a100:	4603      	mov	r3, r0
}
 801a102:	4618      	mov	r0, r3
 801a104:	3708      	adds	r7, #8
 801a106:	46bd      	mov	sp, r7
 801a108:	bd80      	pop	{r7, pc}
	...

0801a10c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a10c:	b480      	push	{r7}
 801a10e:	b085      	sub	sp, #20
 801a110:	af00      	add	r7, sp, #0
 801a112:	4603      	mov	r3, r0
 801a114:	6039      	str	r1, [r7, #0]
 801a116:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a118:	88fb      	ldrh	r3, [r7, #6]
 801a11a:	2b7f      	cmp	r3, #127	; 0x7f
 801a11c:	d802      	bhi.n	801a124 <ff_convert+0x18>
		c = chr;
 801a11e:	88fb      	ldrh	r3, [r7, #6]
 801a120:	81fb      	strh	r3, [r7, #14]
 801a122:	e025      	b.n	801a170 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a124:	683b      	ldr	r3, [r7, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d00b      	beq.n	801a142 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a12a:	88fb      	ldrh	r3, [r7, #6]
 801a12c:	2bff      	cmp	r3, #255	; 0xff
 801a12e:	d805      	bhi.n	801a13c <ff_convert+0x30>
 801a130:	88fb      	ldrh	r3, [r7, #6]
 801a132:	3b80      	subs	r3, #128	; 0x80
 801a134:	4a12      	ldr	r2, [pc, #72]	; (801a180 <ff_convert+0x74>)
 801a136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a13a:	e000      	b.n	801a13e <ff_convert+0x32>
 801a13c:	2300      	movs	r3, #0
 801a13e:	81fb      	strh	r3, [r7, #14]
 801a140:	e016      	b.n	801a170 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a142:	2300      	movs	r3, #0
 801a144:	81fb      	strh	r3, [r7, #14]
 801a146:	e009      	b.n	801a15c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a148:	89fb      	ldrh	r3, [r7, #14]
 801a14a:	4a0d      	ldr	r2, [pc, #52]	; (801a180 <ff_convert+0x74>)
 801a14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a150:	88fa      	ldrh	r2, [r7, #6]
 801a152:	429a      	cmp	r2, r3
 801a154:	d006      	beq.n	801a164 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a156:	89fb      	ldrh	r3, [r7, #14]
 801a158:	3301      	adds	r3, #1
 801a15a:	81fb      	strh	r3, [r7, #14]
 801a15c:	89fb      	ldrh	r3, [r7, #14]
 801a15e:	2b7f      	cmp	r3, #127	; 0x7f
 801a160:	d9f2      	bls.n	801a148 <ff_convert+0x3c>
 801a162:	e000      	b.n	801a166 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a164:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a166:	89fb      	ldrh	r3, [r7, #14]
 801a168:	3380      	adds	r3, #128	; 0x80
 801a16a:	b29b      	uxth	r3, r3
 801a16c:	b2db      	uxtb	r3, r3
 801a16e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a170:	89fb      	ldrh	r3, [r7, #14]
}
 801a172:	4618      	mov	r0, r3
 801a174:	3714      	adds	r7, #20
 801a176:	46bd      	mov	sp, r7
 801a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17c:	4770      	bx	lr
 801a17e:	bf00      	nop
 801a180:	0801f7c8 	.word	0x0801f7c8

0801a184 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a184:	b480      	push	{r7}
 801a186:	b087      	sub	sp, #28
 801a188:	af00      	add	r7, sp, #0
 801a18a:	4603      	mov	r3, r0
 801a18c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a18e:	88fb      	ldrh	r3, [r7, #6]
 801a190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a194:	d201      	bcs.n	801a19a <ff_wtoupper+0x16>
 801a196:	4b3e      	ldr	r3, [pc, #248]	; (801a290 <ff_wtoupper+0x10c>)
 801a198:	e000      	b.n	801a19c <ff_wtoupper+0x18>
 801a19a:	4b3e      	ldr	r3, [pc, #248]	; (801a294 <ff_wtoupper+0x110>)
 801a19c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	1c9a      	adds	r2, r3, #2
 801a1a2:	617a      	str	r2, [r7, #20]
 801a1a4:	881b      	ldrh	r3, [r3, #0]
 801a1a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a1a8:	8a7b      	ldrh	r3, [r7, #18]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d068      	beq.n	801a280 <ff_wtoupper+0xfc>
 801a1ae:	88fa      	ldrh	r2, [r7, #6]
 801a1b0:	8a7b      	ldrh	r3, [r7, #18]
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	d364      	bcc.n	801a280 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a1b6:	697b      	ldr	r3, [r7, #20]
 801a1b8:	1c9a      	adds	r2, r3, #2
 801a1ba:	617a      	str	r2, [r7, #20]
 801a1bc:	881b      	ldrh	r3, [r3, #0]
 801a1be:	823b      	strh	r3, [r7, #16]
 801a1c0:	8a3b      	ldrh	r3, [r7, #16]
 801a1c2:	0a1b      	lsrs	r3, r3, #8
 801a1c4:	81fb      	strh	r3, [r7, #14]
 801a1c6:	8a3b      	ldrh	r3, [r7, #16]
 801a1c8:	b2db      	uxtb	r3, r3
 801a1ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a1cc:	88fa      	ldrh	r2, [r7, #6]
 801a1ce:	8a79      	ldrh	r1, [r7, #18]
 801a1d0:	8a3b      	ldrh	r3, [r7, #16]
 801a1d2:	440b      	add	r3, r1
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	da49      	bge.n	801a26c <ff_wtoupper+0xe8>
			switch (cmd) {
 801a1d8:	89fb      	ldrh	r3, [r7, #14]
 801a1da:	2b08      	cmp	r3, #8
 801a1dc:	d84f      	bhi.n	801a27e <ff_wtoupper+0xfa>
 801a1de:	a201      	add	r2, pc, #4	; (adr r2, 801a1e4 <ff_wtoupper+0x60>)
 801a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1e4:	0801a209 	.word	0x0801a209
 801a1e8:	0801a21b 	.word	0x0801a21b
 801a1ec:	0801a231 	.word	0x0801a231
 801a1f0:	0801a239 	.word	0x0801a239
 801a1f4:	0801a241 	.word	0x0801a241
 801a1f8:	0801a249 	.word	0x0801a249
 801a1fc:	0801a251 	.word	0x0801a251
 801a200:	0801a259 	.word	0x0801a259
 801a204:	0801a261 	.word	0x0801a261
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a208:	88fa      	ldrh	r2, [r7, #6]
 801a20a:	8a7b      	ldrh	r3, [r7, #18]
 801a20c:	1ad3      	subs	r3, r2, r3
 801a20e:	005b      	lsls	r3, r3, #1
 801a210:	697a      	ldr	r2, [r7, #20]
 801a212:	4413      	add	r3, r2
 801a214:	881b      	ldrh	r3, [r3, #0]
 801a216:	80fb      	strh	r3, [r7, #6]
 801a218:	e027      	b.n	801a26a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a21a:	88fa      	ldrh	r2, [r7, #6]
 801a21c:	8a7b      	ldrh	r3, [r7, #18]
 801a21e:	1ad3      	subs	r3, r2, r3
 801a220:	b29b      	uxth	r3, r3
 801a222:	f003 0301 	and.w	r3, r3, #1
 801a226:	b29b      	uxth	r3, r3
 801a228:	88fa      	ldrh	r2, [r7, #6]
 801a22a:	1ad3      	subs	r3, r2, r3
 801a22c:	80fb      	strh	r3, [r7, #6]
 801a22e:	e01c      	b.n	801a26a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a230:	88fb      	ldrh	r3, [r7, #6]
 801a232:	3b10      	subs	r3, #16
 801a234:	80fb      	strh	r3, [r7, #6]
 801a236:	e018      	b.n	801a26a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a238:	88fb      	ldrh	r3, [r7, #6]
 801a23a:	3b20      	subs	r3, #32
 801a23c:	80fb      	strh	r3, [r7, #6]
 801a23e:	e014      	b.n	801a26a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a240:	88fb      	ldrh	r3, [r7, #6]
 801a242:	3b30      	subs	r3, #48	; 0x30
 801a244:	80fb      	strh	r3, [r7, #6]
 801a246:	e010      	b.n	801a26a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a248:	88fb      	ldrh	r3, [r7, #6]
 801a24a:	3b1a      	subs	r3, #26
 801a24c:	80fb      	strh	r3, [r7, #6]
 801a24e:	e00c      	b.n	801a26a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a250:	88fb      	ldrh	r3, [r7, #6]
 801a252:	3308      	adds	r3, #8
 801a254:	80fb      	strh	r3, [r7, #6]
 801a256:	e008      	b.n	801a26a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a258:	88fb      	ldrh	r3, [r7, #6]
 801a25a:	3b50      	subs	r3, #80	; 0x50
 801a25c:	80fb      	strh	r3, [r7, #6]
 801a25e:	e004      	b.n	801a26a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a260:	88fb      	ldrh	r3, [r7, #6]
 801a262:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a266:	80fb      	strh	r3, [r7, #6]
 801a268:	bf00      	nop
			}
			break;
 801a26a:	e008      	b.n	801a27e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a26c:	89fb      	ldrh	r3, [r7, #14]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d195      	bne.n	801a19e <ff_wtoupper+0x1a>
 801a272:	8a3b      	ldrh	r3, [r7, #16]
 801a274:	005b      	lsls	r3, r3, #1
 801a276:	697a      	ldr	r2, [r7, #20]
 801a278:	4413      	add	r3, r2
 801a27a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a27c:	e78f      	b.n	801a19e <ff_wtoupper+0x1a>
			break;
 801a27e:	bf00      	nop
	}

	return chr;
 801a280:	88fb      	ldrh	r3, [r7, #6]
}
 801a282:	4618      	mov	r0, r3
 801a284:	371c      	adds	r7, #28
 801a286:	46bd      	mov	sp, r7
 801a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28c:	4770      	bx	lr
 801a28e:	bf00      	nop
 801a290:	0801f8c8 	.word	0x0801f8c8
 801a294:	0801fabc 	.word	0x0801fabc

0801a298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a29c:	2201      	movs	r2, #1
 801a29e:	4913      	ldr	r1, [pc, #76]	; (801a2ec <MX_USB_DEVICE_Init+0x54>)
 801a2a0:	4813      	ldr	r0, [pc, #76]	; (801a2f0 <MX_USB_DEVICE_Init+0x58>)
 801a2a2:	f7fb fd1b 	bl	8015cdc <USBD_Init>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d001      	beq.n	801a2b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a2ac:	f7e8 fd1a 	bl	8002ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a2b0:	4910      	ldr	r1, [pc, #64]	; (801a2f4 <MX_USB_DEVICE_Init+0x5c>)
 801a2b2:	480f      	ldr	r0, [pc, #60]	; (801a2f0 <MX_USB_DEVICE_Init+0x58>)
 801a2b4:	f7fb fd42 	bl	8015d3c <USBD_RegisterClass>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d001      	beq.n	801a2c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a2be:	f7e8 fd11 	bl	8002ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a2c2:	490d      	ldr	r1, [pc, #52]	; (801a2f8 <MX_USB_DEVICE_Init+0x60>)
 801a2c4:	480a      	ldr	r0, [pc, #40]	; (801a2f0 <MX_USB_DEVICE_Init+0x58>)
 801a2c6:	f7fb fc39 	bl	8015b3c <USBD_CDC_RegisterInterface>
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d001      	beq.n	801a2d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a2d0:	f7e8 fd08 	bl	8002ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a2d4:	4806      	ldr	r0, [pc, #24]	; (801a2f0 <MX_USB_DEVICE_Init+0x58>)
 801a2d6:	f7fb fd67 	bl	8015da8 <USBD_Start>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d001      	beq.n	801a2e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a2e0:	f7e8 fd00 	bl	8002ce4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a2e4:	f7f0 f992 	bl	800a60c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a2e8:	bf00      	nop
 801a2ea:	bd80      	pop	{r7, pc}
 801a2ec:	240000b0 	.word	0x240000b0
 801a2f0:	240018e8 	.word	0x240018e8
 801a2f4:	2400001c 	.word	0x2400001c
 801a2f8:	2400009c 	.word	0x2400009c

0801a2fc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a300:	2200      	movs	r2, #0
 801a302:	4905      	ldr	r1, [pc, #20]	; (801a318 <CDC_Init_HS+0x1c>)
 801a304:	4805      	ldr	r0, [pc, #20]	; (801a31c <CDC_Init_HS+0x20>)
 801a306:	f7fb fc33 	bl	8015b70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a30a:	4905      	ldr	r1, [pc, #20]	; (801a320 <CDC_Init_HS+0x24>)
 801a30c:	4803      	ldr	r0, [pc, #12]	; (801a31c <CDC_Init_HS+0x20>)
 801a30e:	f7fb fc51 	bl	8015bb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a312:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a314:	4618      	mov	r0, r3
 801a316:	bd80      	pop	{r7, pc}
 801a318:	240023c4 	.word	0x240023c4
 801a31c:	240018e8 	.word	0x240018e8
 801a320:	24001bc4 	.word	0x24001bc4

0801a324 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a324:	b480      	push	{r7}
 801a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a328:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a32a:	4618      	mov	r0, r3
 801a32c:	46bd      	mov	sp, r7
 801a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a332:	4770      	bx	lr

0801a334 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a334:	b480      	push	{r7}
 801a336:	b083      	sub	sp, #12
 801a338:	af00      	add	r7, sp, #0
 801a33a:	4603      	mov	r3, r0
 801a33c:	6039      	str	r1, [r7, #0]
 801a33e:	71fb      	strb	r3, [r7, #7]
 801a340:	4613      	mov	r3, r2
 801a342:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a344:	79fb      	ldrb	r3, [r7, #7]
 801a346:	2b23      	cmp	r3, #35	; 0x23
 801a348:	d84a      	bhi.n	801a3e0 <CDC_Control_HS+0xac>
 801a34a:	a201      	add	r2, pc, #4	; (adr r2, 801a350 <CDC_Control_HS+0x1c>)
 801a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a350:	0801a3e1 	.word	0x0801a3e1
 801a354:	0801a3e1 	.word	0x0801a3e1
 801a358:	0801a3e1 	.word	0x0801a3e1
 801a35c:	0801a3e1 	.word	0x0801a3e1
 801a360:	0801a3e1 	.word	0x0801a3e1
 801a364:	0801a3e1 	.word	0x0801a3e1
 801a368:	0801a3e1 	.word	0x0801a3e1
 801a36c:	0801a3e1 	.word	0x0801a3e1
 801a370:	0801a3e1 	.word	0x0801a3e1
 801a374:	0801a3e1 	.word	0x0801a3e1
 801a378:	0801a3e1 	.word	0x0801a3e1
 801a37c:	0801a3e1 	.word	0x0801a3e1
 801a380:	0801a3e1 	.word	0x0801a3e1
 801a384:	0801a3e1 	.word	0x0801a3e1
 801a388:	0801a3e1 	.word	0x0801a3e1
 801a38c:	0801a3e1 	.word	0x0801a3e1
 801a390:	0801a3e1 	.word	0x0801a3e1
 801a394:	0801a3e1 	.word	0x0801a3e1
 801a398:	0801a3e1 	.word	0x0801a3e1
 801a39c:	0801a3e1 	.word	0x0801a3e1
 801a3a0:	0801a3e1 	.word	0x0801a3e1
 801a3a4:	0801a3e1 	.word	0x0801a3e1
 801a3a8:	0801a3e1 	.word	0x0801a3e1
 801a3ac:	0801a3e1 	.word	0x0801a3e1
 801a3b0:	0801a3e1 	.word	0x0801a3e1
 801a3b4:	0801a3e1 	.word	0x0801a3e1
 801a3b8:	0801a3e1 	.word	0x0801a3e1
 801a3bc:	0801a3e1 	.word	0x0801a3e1
 801a3c0:	0801a3e1 	.word	0x0801a3e1
 801a3c4:	0801a3e1 	.word	0x0801a3e1
 801a3c8:	0801a3e1 	.word	0x0801a3e1
 801a3cc:	0801a3e1 	.word	0x0801a3e1
 801a3d0:	0801a3e1 	.word	0x0801a3e1
 801a3d4:	0801a3e1 	.word	0x0801a3e1
 801a3d8:	0801a3e1 	.word	0x0801a3e1
 801a3dc:	0801a3e1 	.word	0x0801a3e1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a3e0:	bf00      	nop
  }

  return (USBD_OK);
 801a3e2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	370c      	adds	r7, #12
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ee:	4770      	bx	lr

0801a3f0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b082      	sub	sp, #8
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a3fa:	6879      	ldr	r1, [r7, #4]
 801a3fc:	4805      	ldr	r0, [pc, #20]	; (801a414 <CDC_Receive_HS+0x24>)
 801a3fe:	f7fb fbd9 	bl	8015bb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a402:	4804      	ldr	r0, [pc, #16]	; (801a414 <CDC_Receive_HS+0x24>)
 801a404:	f7fb fc34 	bl	8015c70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a408:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a40a:	4618      	mov	r0, r3
 801a40c:	3708      	adds	r7, #8
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd80      	pop	{r7, pc}
 801a412:	bf00      	nop
 801a414:	240018e8 	.word	0x240018e8

0801a418 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b084      	sub	sp, #16
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
 801a420:	460b      	mov	r3, r1
 801a422:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a424:	2300      	movs	r3, #0
 801a426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a428:	4b0d      	ldr	r3, [pc, #52]	; (801a460 <CDC_Transmit_HS+0x48>)
 801a42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a42e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a436:	2b00      	cmp	r3, #0
 801a438:	d001      	beq.n	801a43e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a43a:	2301      	movs	r3, #1
 801a43c:	e00b      	b.n	801a456 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a43e:	887b      	ldrh	r3, [r7, #2]
 801a440:	461a      	mov	r2, r3
 801a442:	6879      	ldr	r1, [r7, #4]
 801a444:	4806      	ldr	r0, [pc, #24]	; (801a460 <CDC_Transmit_HS+0x48>)
 801a446:	f7fb fb93 	bl	8015b70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a44a:	4805      	ldr	r0, [pc, #20]	; (801a460 <CDC_Transmit_HS+0x48>)
 801a44c:	f7fb fbd0 	bl	8015bf0 <USBD_CDC_TransmitPacket>
 801a450:	4603      	mov	r3, r0
 801a452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a454:	7bfb      	ldrb	r3, [r7, #15]
}
 801a456:	4618      	mov	r0, r3
 801a458:	3710      	adds	r7, #16
 801a45a:	46bd      	mov	sp, r7
 801a45c:	bd80      	pop	{r7, pc}
 801a45e:	bf00      	nop
 801a460:	240018e8 	.word	0x240018e8

0801a464 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a464:	b480      	push	{r7}
 801a466:	b087      	sub	sp, #28
 801a468:	af00      	add	r7, sp, #0
 801a46a:	60f8      	str	r0, [r7, #12]
 801a46c:	60b9      	str	r1, [r7, #8]
 801a46e:	4613      	mov	r3, r2
 801a470:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a472:	2300      	movs	r3, #0
 801a474:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a47a:	4618      	mov	r0, r3
 801a47c:	371c      	adds	r7, #28
 801a47e:	46bd      	mov	sp, r7
 801a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a484:	4770      	bx	lr
	...

0801a488 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a488:	b480      	push	{r7}
 801a48a:	b083      	sub	sp, #12
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	4603      	mov	r3, r0
 801a490:	6039      	str	r1, [r7, #0]
 801a492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	2212      	movs	r2, #18
 801a498:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a49a:	4b03      	ldr	r3, [pc, #12]	; (801a4a8 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a49c:	4618      	mov	r0, r3
 801a49e:	370c      	adds	r7, #12
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a6:	4770      	bx	lr
 801a4a8:	240000cc 	.word	0x240000cc

0801a4ac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4ac:	b480      	push	{r7}
 801a4ae:	b083      	sub	sp, #12
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	6039      	str	r1, [r7, #0]
 801a4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	2204      	movs	r2, #4
 801a4bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a4be:	4b03      	ldr	r3, [pc, #12]	; (801a4cc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	370c      	adds	r7, #12
 801a4c4:	46bd      	mov	sp, r7
 801a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ca:	4770      	bx	lr
 801a4cc:	240000e0 	.word	0x240000e0

0801a4d0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	6039      	str	r1, [r7, #0]
 801a4da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a4dc:	79fb      	ldrb	r3, [r7, #7]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d105      	bne.n	801a4ee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a4e2:	683a      	ldr	r2, [r7, #0]
 801a4e4:	4907      	ldr	r1, [pc, #28]	; (801a504 <USBD_HS_ProductStrDescriptor+0x34>)
 801a4e6:	4808      	ldr	r0, [pc, #32]	; (801a508 <USBD_HS_ProductStrDescriptor+0x38>)
 801a4e8:	f7fc fe10 	bl	801710c <USBD_GetString>
 801a4ec:	e004      	b.n	801a4f8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a4ee:	683a      	ldr	r2, [r7, #0]
 801a4f0:	4904      	ldr	r1, [pc, #16]	; (801a504 <USBD_HS_ProductStrDescriptor+0x34>)
 801a4f2:	4805      	ldr	r0, [pc, #20]	; (801a508 <USBD_HS_ProductStrDescriptor+0x38>)
 801a4f4:	f7fc fe0a 	bl	801710c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4f8:	4b02      	ldr	r3, [pc, #8]	; (801a504 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	3708      	adds	r7, #8
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
 801a502:	bf00      	nop
 801a504:	24002bc4 	.word	0x24002bc4
 801a508:	0801f638 	.word	0x0801f638

0801a50c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	4603      	mov	r3, r0
 801a514:	6039      	str	r1, [r7, #0]
 801a516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a518:	683a      	ldr	r2, [r7, #0]
 801a51a:	4904      	ldr	r1, [pc, #16]	; (801a52c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a51c:	4804      	ldr	r0, [pc, #16]	; (801a530 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a51e:	f7fc fdf5 	bl	801710c <USBD_GetString>
  return USBD_StrDesc;
 801a522:	4b02      	ldr	r3, [pc, #8]	; (801a52c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a524:	4618      	mov	r0, r3
 801a526:	3708      	adds	r7, #8
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	24002bc4 	.word	0x24002bc4
 801a530:	0801f654 	.word	0x0801f654

0801a534 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b082      	sub	sp, #8
 801a538:	af00      	add	r7, sp, #0
 801a53a:	4603      	mov	r3, r0
 801a53c:	6039      	str	r1, [r7, #0]
 801a53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a540:	683b      	ldr	r3, [r7, #0]
 801a542:	221a      	movs	r2, #26
 801a544:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a546:	f000 f843 	bl	801a5d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a54a:	4b02      	ldr	r3, [pc, #8]	; (801a554 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a54c:	4618      	mov	r0, r3
 801a54e:	3708      	adds	r7, #8
 801a550:	46bd      	mov	sp, r7
 801a552:	bd80      	pop	{r7, pc}
 801a554:	240000e4 	.word	0x240000e4

0801a558 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a558:	b580      	push	{r7, lr}
 801a55a:	b082      	sub	sp, #8
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	4603      	mov	r3, r0
 801a560:	6039      	str	r1, [r7, #0]
 801a562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a564:	79fb      	ldrb	r3, [r7, #7]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d105      	bne.n	801a576 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a56a:	683a      	ldr	r2, [r7, #0]
 801a56c:	4907      	ldr	r1, [pc, #28]	; (801a58c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a56e:	4808      	ldr	r0, [pc, #32]	; (801a590 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a570:	f7fc fdcc 	bl	801710c <USBD_GetString>
 801a574:	e004      	b.n	801a580 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a576:	683a      	ldr	r2, [r7, #0]
 801a578:	4904      	ldr	r1, [pc, #16]	; (801a58c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a57a:	4805      	ldr	r0, [pc, #20]	; (801a590 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a57c:	f7fc fdc6 	bl	801710c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a580:	4b02      	ldr	r3, [pc, #8]	; (801a58c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a582:	4618      	mov	r0, r3
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	24002bc4 	.word	0x24002bc4
 801a590:	0801f658 	.word	0x0801f658

0801a594 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	4603      	mov	r3, r0
 801a59c:	6039      	str	r1, [r7, #0]
 801a59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a5a0:	79fb      	ldrb	r3, [r7, #7]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d105      	bne.n	801a5b2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a5a6:	683a      	ldr	r2, [r7, #0]
 801a5a8:	4907      	ldr	r1, [pc, #28]	; (801a5c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a5aa:	4808      	ldr	r0, [pc, #32]	; (801a5cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a5ac:	f7fc fdae 	bl	801710c <USBD_GetString>
 801a5b0:	e004      	b.n	801a5bc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a5b2:	683a      	ldr	r2, [r7, #0]
 801a5b4:	4904      	ldr	r1, [pc, #16]	; (801a5c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a5b6:	4805      	ldr	r0, [pc, #20]	; (801a5cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a5b8:	f7fc fda8 	bl	801710c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5bc:	4b02      	ldr	r3, [pc, #8]	; (801a5c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3708      	adds	r7, #8
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	24002bc4 	.word	0x24002bc4
 801a5cc:	0801f664 	.word	0x0801f664

0801a5d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b084      	sub	sp, #16
 801a5d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a5d6:	4b0f      	ldr	r3, [pc, #60]	; (801a614 <Get_SerialNum+0x44>)
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a5dc:	4b0e      	ldr	r3, [pc, #56]	; (801a618 <Get_SerialNum+0x48>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a5e2:	4b0e      	ldr	r3, [pc, #56]	; (801a61c <Get_SerialNum+0x4c>)
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a5e8:	68fa      	ldr	r2, [r7, #12]
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	4413      	add	r3, r2
 801a5ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d009      	beq.n	801a60a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a5f6:	2208      	movs	r2, #8
 801a5f8:	4909      	ldr	r1, [pc, #36]	; (801a620 <Get_SerialNum+0x50>)
 801a5fa:	68f8      	ldr	r0, [r7, #12]
 801a5fc:	f000 f814 	bl	801a628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a600:	2204      	movs	r2, #4
 801a602:	4908      	ldr	r1, [pc, #32]	; (801a624 <Get_SerialNum+0x54>)
 801a604:	68b8      	ldr	r0, [r7, #8]
 801a606:	f000 f80f 	bl	801a628 <IntToUnicode>
  }
}
 801a60a:	bf00      	nop
 801a60c:	3710      	adds	r7, #16
 801a60e:	46bd      	mov	sp, r7
 801a610:	bd80      	pop	{r7, pc}
 801a612:	bf00      	nop
 801a614:	1ff1e800 	.word	0x1ff1e800
 801a618:	1ff1e804 	.word	0x1ff1e804
 801a61c:	1ff1e808 	.word	0x1ff1e808
 801a620:	240000e6 	.word	0x240000e6
 801a624:	240000f6 	.word	0x240000f6

0801a628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a628:	b480      	push	{r7}
 801a62a:	b087      	sub	sp, #28
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	60b9      	str	r1, [r7, #8]
 801a632:	4613      	mov	r3, r2
 801a634:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a636:	2300      	movs	r3, #0
 801a638:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a63a:	2300      	movs	r3, #0
 801a63c:	75fb      	strb	r3, [r7, #23]
 801a63e:	e027      	b.n	801a690 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	0f1b      	lsrs	r3, r3, #28
 801a644:	2b09      	cmp	r3, #9
 801a646:	d80b      	bhi.n	801a660 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	0f1b      	lsrs	r3, r3, #28
 801a64c:	b2da      	uxtb	r2, r3
 801a64e:	7dfb      	ldrb	r3, [r7, #23]
 801a650:	005b      	lsls	r3, r3, #1
 801a652:	4619      	mov	r1, r3
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	440b      	add	r3, r1
 801a658:	3230      	adds	r2, #48	; 0x30
 801a65a:	b2d2      	uxtb	r2, r2
 801a65c:	701a      	strb	r2, [r3, #0]
 801a65e:	e00a      	b.n	801a676 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	0f1b      	lsrs	r3, r3, #28
 801a664:	b2da      	uxtb	r2, r3
 801a666:	7dfb      	ldrb	r3, [r7, #23]
 801a668:	005b      	lsls	r3, r3, #1
 801a66a:	4619      	mov	r1, r3
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	440b      	add	r3, r1
 801a670:	3237      	adds	r2, #55	; 0x37
 801a672:	b2d2      	uxtb	r2, r2
 801a674:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	011b      	lsls	r3, r3, #4
 801a67a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a67c:	7dfb      	ldrb	r3, [r7, #23]
 801a67e:	005b      	lsls	r3, r3, #1
 801a680:	3301      	adds	r3, #1
 801a682:	68ba      	ldr	r2, [r7, #8]
 801a684:	4413      	add	r3, r2
 801a686:	2200      	movs	r2, #0
 801a688:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a68a:	7dfb      	ldrb	r3, [r7, #23]
 801a68c:	3301      	adds	r3, #1
 801a68e:	75fb      	strb	r3, [r7, #23]
 801a690:	7dfa      	ldrb	r2, [r7, #23]
 801a692:	79fb      	ldrb	r3, [r7, #7]
 801a694:	429a      	cmp	r2, r3
 801a696:	d3d3      	bcc.n	801a640 <IntToUnicode+0x18>
  }
}
 801a698:	bf00      	nop
 801a69a:	bf00      	nop
 801a69c:	371c      	adds	r7, #28
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a4:	4770      	bx	lr
	...

0801a6a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b0b2      	sub	sp, #200	; 0xc8
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a6b0:	f107 0310 	add.w	r3, r7, #16
 801a6b4:	22b8      	movs	r2, #184	; 0xb8
 801a6b6:	2100      	movs	r1, #0
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f000 fb39 	bl	801ad30 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	4a1a      	ldr	r2, [pc, #104]	; (801a72c <HAL_PCD_MspInit+0x84>)
 801a6c4:	4293      	cmp	r3, r2
 801a6c6:	d12c      	bne.n	801a722 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a6c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a6cc:	f04f 0300 	mov.w	r3, #0
 801a6d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a6d4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a6d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a6dc:	f107 0310 	add.w	r3, r7, #16
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f7f0 ff73 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d001      	beq.n	801a6f0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a6ec:	f7e8 fafa 	bl	8002ce4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a6f0:	f7ef ff8c 	bl	800a60c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a6f4:	4b0e      	ldr	r3, [pc, #56]	; (801a730 <HAL_PCD_MspInit+0x88>)
 801a6f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a6fa:	4a0d      	ldr	r2, [pc, #52]	; (801a730 <HAL_PCD_MspInit+0x88>)
 801a6fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a700:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a704:	4b0a      	ldr	r3, [pc, #40]	; (801a730 <HAL_PCD_MspInit+0x88>)
 801a706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a70e:	60fb      	str	r3, [r7, #12]
 801a710:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a712:	2200      	movs	r2, #0
 801a714:	2100      	movs	r1, #0
 801a716:	204d      	movs	r0, #77	; 0x4d
 801a718:	f7eb fcfb 	bl	8006112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a71c:	204d      	movs	r0, #77	; 0x4d
 801a71e:	f7eb fd12 	bl	8006146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a722:	bf00      	nop
 801a724:	37c8      	adds	r7, #200	; 0xc8
 801a726:	46bd      	mov	sp, r7
 801a728:	bd80      	pop	{r7, pc}
 801a72a:	bf00      	nop
 801a72c:	40040000 	.word	0x40040000
 801a730:	58024400 	.word	0x58024400

0801a734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b082      	sub	sp, #8
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a748:	4619      	mov	r1, r3
 801a74a:	4610      	mov	r0, r2
 801a74c:	f7fb fb79 	bl	8015e42 <USBD_LL_SetupStage>
}
 801a750:	bf00      	nop
 801a752:	3708      	adds	r7, #8
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}

0801a758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b082      	sub	sp, #8
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	460b      	mov	r3, r1
 801a762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a76a:	78fa      	ldrb	r2, [r7, #3]
 801a76c:	6879      	ldr	r1, [r7, #4]
 801a76e:	4613      	mov	r3, r2
 801a770:	00db      	lsls	r3, r3, #3
 801a772:	4413      	add	r3, r2
 801a774:	009b      	lsls	r3, r3, #2
 801a776:	440b      	add	r3, r1
 801a778:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a77c:	681a      	ldr	r2, [r3, #0]
 801a77e:	78fb      	ldrb	r3, [r7, #3]
 801a780:	4619      	mov	r1, r3
 801a782:	f7fb fbb3 	bl	8015eec <USBD_LL_DataOutStage>
}
 801a786:	bf00      	nop
 801a788:	3708      	adds	r7, #8
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}

0801a78e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a78e:	b580      	push	{r7, lr}
 801a790:	b082      	sub	sp, #8
 801a792:	af00      	add	r7, sp, #0
 801a794:	6078      	str	r0, [r7, #4]
 801a796:	460b      	mov	r3, r1
 801a798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a7a0:	78fa      	ldrb	r2, [r7, #3]
 801a7a2:	6879      	ldr	r1, [r7, #4]
 801a7a4:	4613      	mov	r3, r2
 801a7a6:	00db      	lsls	r3, r3, #3
 801a7a8:	4413      	add	r3, r2
 801a7aa:	009b      	lsls	r3, r3, #2
 801a7ac:	440b      	add	r3, r1
 801a7ae:	3348      	adds	r3, #72	; 0x48
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	78fb      	ldrb	r3, [r7, #3]
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	f7fb fc4c 	bl	8016052 <USBD_LL_DataInStage>
}
 801a7ba:	bf00      	nop
 801a7bc:	3708      	adds	r7, #8
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	bd80      	pop	{r7, pc}

0801a7c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7c2:	b580      	push	{r7, lr}
 801a7c4:	b082      	sub	sp, #8
 801a7c6:	af00      	add	r7, sp, #0
 801a7c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f7fb fd86 	bl	80162e2 <USBD_LL_SOF>
}
 801a7d6:	bf00      	nop
 801a7d8:	3708      	adds	r7, #8
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}

0801a7de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7de:	b580      	push	{r7, lr}
 801a7e0:	b084      	sub	sp, #16
 801a7e2:	af00      	add	r7, sp, #0
 801a7e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	691b      	ldr	r3, [r3, #16]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d102      	bne.n	801a7f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	73fb      	strb	r3, [r7, #15]
 801a7f6:	e008      	b.n	801a80a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	691b      	ldr	r3, [r3, #16]
 801a7fc:	2b02      	cmp	r3, #2
 801a7fe:	d102      	bne.n	801a806 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a800:	2301      	movs	r3, #1
 801a802:	73fb      	strb	r3, [r7, #15]
 801a804:	e001      	b.n	801a80a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a806:	f7e8 fa6d 	bl	8002ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a810:	7bfa      	ldrb	r2, [r7, #15]
 801a812:	4611      	mov	r1, r2
 801a814:	4618      	mov	r0, r3
 801a816:	f7fb fd20 	bl	801625a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a820:	4618      	mov	r0, r3
 801a822:	f7fb fcc8 	bl	80161b6 <USBD_LL_Reset>
}
 801a826:	bf00      	nop
 801a828:	3710      	adds	r7, #16
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd80      	pop	{r7, pc}
	...

0801a830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b082      	sub	sp, #8
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a83e:	4618      	mov	r0, r3
 801a840:	f7fb fd1b 	bl	801627a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	6812      	ldr	r2, [r2, #0]
 801a852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a856:	f043 0301 	orr.w	r3, r3, #1
 801a85a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	6a1b      	ldr	r3, [r3, #32]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d005      	beq.n	801a870 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a864:	4b04      	ldr	r3, [pc, #16]	; (801a878 <HAL_PCD_SuspendCallback+0x48>)
 801a866:	691b      	ldr	r3, [r3, #16]
 801a868:	4a03      	ldr	r2, [pc, #12]	; (801a878 <HAL_PCD_SuspendCallback+0x48>)
 801a86a:	f043 0306 	orr.w	r3, r3, #6
 801a86e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a870:	bf00      	nop
 801a872:	3708      	adds	r7, #8
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}
 801a878:	e000ed00 	.word	0xe000ed00

0801a87c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b082      	sub	sp, #8
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a88a:	4618      	mov	r0, r3
 801a88c:	f7fb fd11 	bl	80162b2 <USBD_LL_Resume>
}
 801a890:	bf00      	nop
 801a892:	3708      	adds	r7, #8
 801a894:	46bd      	mov	sp, r7
 801a896:	bd80      	pop	{r7, pc}

0801a898 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b082      	sub	sp, #8
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	6078      	str	r0, [r7, #4]
 801a8a0:	460b      	mov	r3, r1
 801a8a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8aa:	78fa      	ldrb	r2, [r7, #3]
 801a8ac:	4611      	mov	r1, r2
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7fb fd69 	bl	8016386 <USBD_LL_IsoOUTIncomplete>
}
 801a8b4:	bf00      	nop
 801a8b6:	3708      	adds	r7, #8
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}

0801a8bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b082      	sub	sp, #8
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
 801a8c4:	460b      	mov	r3, r1
 801a8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8ce:	78fa      	ldrb	r2, [r7, #3]
 801a8d0:	4611      	mov	r1, r2
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7fb fd25 	bl	8016322 <USBD_LL_IsoINIncomplete>
}
 801a8d8:	bf00      	nop
 801a8da:	3708      	adds	r7, #8
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}

0801a8e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b082      	sub	sp, #8
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f7fb fd7b 	bl	80163ea <USBD_LL_DevConnected>
}
 801a8f4:	bf00      	nop
 801a8f6:	3708      	adds	r7, #8
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd80      	pop	{r7, pc}

0801a8fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b082      	sub	sp, #8
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a90a:	4618      	mov	r0, r3
 801a90c:	f7fb fd78 	bl	8016400 <USBD_LL_DevDisconnected>
}
 801a910:	bf00      	nop
 801a912:	3708      	adds	r7, #8
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}

0801a918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b082      	sub	sp, #8
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	781b      	ldrb	r3, [r3, #0]
 801a924:	2b01      	cmp	r3, #1
 801a926:	d140      	bne.n	801a9aa <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801a928:	4a22      	ldr	r2, [pc, #136]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	4a20      	ldr	r2, [pc, #128]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a934:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801a938:	4b1e      	ldr	r3, [pc, #120]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a93a:	4a1f      	ldr	r2, [pc, #124]	; (801a9b8 <USBD_LL_Init+0xa0>)
 801a93c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801a93e:	4b1d      	ldr	r3, [pc, #116]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a940:	2209      	movs	r2, #9
 801a942:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801a944:	4b1b      	ldr	r3, [pc, #108]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a946:	2202      	movs	r2, #2
 801a948:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801a94a:	4b1a      	ldr	r3, [pc, #104]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a94c:	2200      	movs	r2, #0
 801a94e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801a950:	4b18      	ldr	r3, [pc, #96]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a952:	2202      	movs	r2, #2
 801a954:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801a956:	4b17      	ldr	r3, [pc, #92]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a958:	2200      	movs	r2, #0
 801a95a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801a95c:	4b15      	ldr	r3, [pc, #84]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a95e:	2200      	movs	r2, #0
 801a960:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801a962:	4b14      	ldr	r3, [pc, #80]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a964:	2200      	movs	r2, #0
 801a966:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801a968:	4b12      	ldr	r3, [pc, #72]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a96a:	2200      	movs	r2, #0
 801a96c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801a96e:	4b11      	ldr	r3, [pc, #68]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a970:	2200      	movs	r2, #0
 801a972:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801a974:	4b0f      	ldr	r3, [pc, #60]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a976:	2200      	movs	r2, #0
 801a978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801a97a:	480e      	ldr	r0, [pc, #56]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a97c:	f7ee fb53 	bl	8009026 <HAL_PCD_Init>
 801a980:	4603      	mov	r3, r0
 801a982:	2b00      	cmp	r3, #0
 801a984:	d001      	beq.n	801a98a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a986:	f7e8 f9ad 	bl	8002ce4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801a98a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a98e:	4809      	ldr	r0, [pc, #36]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a990:	f7ef fdc1 	bl	800a516 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801a994:	2280      	movs	r2, #128	; 0x80
 801a996:	2100      	movs	r1, #0
 801a998:	4806      	ldr	r0, [pc, #24]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a99a:	f7ef fd75 	bl	800a488 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801a99e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801a9a2:	2101      	movs	r1, #1
 801a9a4:	4803      	ldr	r0, [pc, #12]	; (801a9b4 <USBD_LL_Init+0x9c>)
 801a9a6:	f7ef fd6f 	bl	800a488 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801a9aa:	2300      	movs	r3, #0
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	3708      	adds	r7, #8
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	24002dc4 	.word	0x24002dc4
 801a9b8:	40040000 	.word	0x40040000

0801a9bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b084      	sub	sp, #16
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f7ee fc4b 	bl	800926e <HAL_PCD_Start>
 801a9d8:	4603      	mov	r3, r0
 801a9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a9dc:	7bfb      	ldrb	r3, [r7, #15]
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f000 f942 	bl	801ac68 <USBD_Get_USB_Status>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	3710      	adds	r7, #16
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}

0801a9f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a9f2:	b580      	push	{r7, lr}
 801a9f4:	b084      	sub	sp, #16
 801a9f6:	af00      	add	r7, sp, #0
 801a9f8:	6078      	str	r0, [r7, #4]
 801a9fa:	4608      	mov	r0, r1
 801a9fc:	4611      	mov	r1, r2
 801a9fe:	461a      	mov	r2, r3
 801aa00:	4603      	mov	r3, r0
 801aa02:	70fb      	strb	r3, [r7, #3]
 801aa04:	460b      	mov	r3, r1
 801aa06:	70bb      	strb	r3, [r7, #2]
 801aa08:	4613      	mov	r3, r2
 801aa0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa10:	2300      	movs	r3, #0
 801aa12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aa1a:	78bb      	ldrb	r3, [r7, #2]
 801aa1c:	883a      	ldrh	r2, [r7, #0]
 801aa1e:	78f9      	ldrb	r1, [r7, #3]
 801aa20:	f7ef f94b 	bl	8009cba <HAL_PCD_EP_Open>
 801aa24:	4603      	mov	r3, r0
 801aa26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa28:	7bfb      	ldrb	r3, [r7, #15]
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	f000 f91c 	bl	801ac68 <USBD_Get_USB_Status>
 801aa30:	4603      	mov	r3, r0
 801aa32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa34:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa36:	4618      	mov	r0, r3
 801aa38:	3710      	adds	r7, #16
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}

0801aa3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa3e:	b580      	push	{r7, lr}
 801aa40:	b084      	sub	sp, #16
 801aa42:	af00      	add	r7, sp, #0
 801aa44:	6078      	str	r0, [r7, #4]
 801aa46:	460b      	mov	r3, r1
 801aa48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa4e:	2300      	movs	r3, #0
 801aa50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aa58:	78fa      	ldrb	r2, [r7, #3]
 801aa5a:	4611      	mov	r1, r2
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f7ef f994 	bl	8009d8a <HAL_PCD_EP_Close>
 801aa62:	4603      	mov	r3, r0
 801aa64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa66:	7bfb      	ldrb	r3, [r7, #15]
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f000 f8fd 	bl	801ac68 <USBD_Get_USB_Status>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa72:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	3710      	adds	r7, #16
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}

0801aa7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b084      	sub	sp, #16
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	460b      	mov	r3, r1
 801aa86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa88:	2300      	movs	r3, #0
 801aa8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aa96:	78fa      	ldrb	r2, [r7, #3]
 801aa98:	4611      	mov	r1, r2
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f7ef fa4e 	bl	8009f3c <HAL_PCD_EP_SetStall>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aaa4:	7bfb      	ldrb	r3, [r7, #15]
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f000 f8de 	bl	801ac68 <USBD_Get_USB_Status>
 801aaac:	4603      	mov	r3, r0
 801aaae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aab0:	7bbb      	ldrb	r3, [r7, #14]
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3710      	adds	r7, #16
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}

0801aaba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aaba:	b580      	push	{r7, lr}
 801aabc:	b084      	sub	sp, #16
 801aabe:	af00      	add	r7, sp, #0
 801aac0:	6078      	str	r0, [r7, #4]
 801aac2:	460b      	mov	r3, r1
 801aac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aac6:	2300      	movs	r3, #0
 801aac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaca:	2300      	movs	r3, #0
 801aacc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aad4:	78fa      	ldrb	r2, [r7, #3]
 801aad6:	4611      	mov	r1, r2
 801aad8:	4618      	mov	r0, r3
 801aada:	f7ef fa93 	bl	800a004 <HAL_PCD_EP_ClrStall>
 801aade:	4603      	mov	r3, r0
 801aae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aae2:	7bfb      	ldrb	r3, [r7, #15]
 801aae4:	4618      	mov	r0, r3
 801aae6:	f000 f8bf 	bl	801ac68 <USBD_Get_USB_Status>
 801aaea:	4603      	mov	r3, r0
 801aaec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aaee:	7bbb      	ldrb	r3, [r7, #14]
}
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	3710      	adds	r7, #16
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bd80      	pop	{r7, pc}

0801aaf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aaf8:	b480      	push	{r7}
 801aafa:	b085      	sub	sp, #20
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	460b      	mov	r3, r1
 801ab02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ab0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	da0b      	bge.n	801ab2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ab14:	78fb      	ldrb	r3, [r7, #3]
 801ab16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ab1a:	68f9      	ldr	r1, [r7, #12]
 801ab1c:	4613      	mov	r3, r2
 801ab1e:	00db      	lsls	r3, r3, #3
 801ab20:	4413      	add	r3, r2
 801ab22:	009b      	lsls	r3, r3, #2
 801ab24:	440b      	add	r3, r1
 801ab26:	333e      	adds	r3, #62	; 0x3e
 801ab28:	781b      	ldrb	r3, [r3, #0]
 801ab2a:	e00b      	b.n	801ab44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ab2c:	78fb      	ldrb	r3, [r7, #3]
 801ab2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ab32:	68f9      	ldr	r1, [r7, #12]
 801ab34:	4613      	mov	r3, r2
 801ab36:	00db      	lsls	r3, r3, #3
 801ab38:	4413      	add	r3, r2
 801ab3a:	009b      	lsls	r3, r3, #2
 801ab3c:	440b      	add	r3, r1
 801ab3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ab42:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	3714      	adds	r7, #20
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4e:	4770      	bx	lr

0801ab50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b084      	sub	sp, #16
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
 801ab58:	460b      	mov	r3, r1
 801ab5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab60:	2300      	movs	r3, #0
 801ab62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab6a:	78fa      	ldrb	r2, [r7, #3]
 801ab6c:	4611      	mov	r1, r2
 801ab6e:	4618      	mov	r0, r3
 801ab70:	f7ef f87e 	bl	8009c70 <HAL_PCD_SetAddress>
 801ab74:	4603      	mov	r3, r0
 801ab76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab78:	7bfb      	ldrb	r3, [r7, #15]
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f000 f874 	bl	801ac68 <USBD_Get_USB_Status>
 801ab80:	4603      	mov	r3, r0
 801ab82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab84:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab86:	4618      	mov	r0, r3
 801ab88:	3710      	adds	r7, #16
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bd80      	pop	{r7, pc}

0801ab8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ab8e:	b580      	push	{r7, lr}
 801ab90:	b086      	sub	sp, #24
 801ab92:	af00      	add	r7, sp, #0
 801ab94:	60f8      	str	r0, [r7, #12]
 801ab96:	607a      	str	r2, [r7, #4]
 801ab98:	603b      	str	r3, [r7, #0]
 801ab9a:	460b      	mov	r3, r1
 801ab9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aba2:	2300      	movs	r3, #0
 801aba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801abac:	7af9      	ldrb	r1, [r7, #11]
 801abae:	683b      	ldr	r3, [r7, #0]
 801abb0:	687a      	ldr	r2, [r7, #4]
 801abb2:	f7ef f988 	bl	8009ec6 <HAL_PCD_EP_Transmit>
 801abb6:	4603      	mov	r3, r0
 801abb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abba:	7dfb      	ldrb	r3, [r7, #23]
 801abbc:	4618      	mov	r0, r3
 801abbe:	f000 f853 	bl	801ac68 <USBD_Get_USB_Status>
 801abc2:	4603      	mov	r3, r0
 801abc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801abc6:	7dbb      	ldrb	r3, [r7, #22]
}
 801abc8:	4618      	mov	r0, r3
 801abca:	3718      	adds	r7, #24
 801abcc:	46bd      	mov	sp, r7
 801abce:	bd80      	pop	{r7, pc}

0801abd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b086      	sub	sp, #24
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	60f8      	str	r0, [r7, #12]
 801abd8:	607a      	str	r2, [r7, #4]
 801abda:	603b      	str	r3, [r7, #0]
 801abdc:	460b      	mov	r3, r1
 801abde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abe0:	2300      	movs	r3, #0
 801abe2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abe4:	2300      	movs	r3, #0
 801abe6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801abee:	7af9      	ldrb	r1, [r7, #11]
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	687a      	ldr	r2, [r7, #4]
 801abf4:	f7ef f913 	bl	8009e1e <HAL_PCD_EP_Receive>
 801abf8:	4603      	mov	r3, r0
 801abfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abfc:	7dfb      	ldrb	r3, [r7, #23]
 801abfe:	4618      	mov	r0, r3
 801ac00:	f000 f832 	bl	801ac68 <USBD_Get_USB_Status>
 801ac04:	4603      	mov	r3, r0
 801ac06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ac08:	7dbb      	ldrb	r3, [r7, #22]
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3718      	adds	r7, #24
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}

0801ac12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac12:	b580      	push	{r7, lr}
 801ac14:	b082      	sub	sp, #8
 801ac16:	af00      	add	r7, sp, #0
 801ac18:	6078      	str	r0, [r7, #4]
 801ac1a:	460b      	mov	r3, r1
 801ac1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac24:	78fa      	ldrb	r2, [r7, #3]
 801ac26:	4611      	mov	r1, r2
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f7ef f934 	bl	8009e96 <HAL_PCD_EP_GetRxCount>
 801ac2e:	4603      	mov	r3, r0
}
 801ac30:	4618      	mov	r0, r3
 801ac32:	3708      	adds	r7, #8
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd80      	pop	{r7, pc}

0801ac38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ac38:	b480      	push	{r7}
 801ac3a:	b083      	sub	sp, #12
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ac40:	4b03      	ldr	r3, [pc, #12]	; (801ac50 <USBD_static_malloc+0x18>)
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	370c      	adds	r7, #12
 801ac46:	46bd      	mov	sp, r7
 801ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	240032d0 	.word	0x240032d0

0801ac54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ac54:	b480      	push	{r7}
 801ac56:	b083      	sub	sp, #12
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ac5c:	bf00      	nop
 801ac5e:	370c      	adds	r7, #12
 801ac60:	46bd      	mov	sp, r7
 801ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac66:	4770      	bx	lr

0801ac68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ac68:	b480      	push	{r7}
 801ac6a:	b085      	sub	sp, #20
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	4603      	mov	r3, r0
 801ac70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac72:	2300      	movs	r3, #0
 801ac74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ac76:	79fb      	ldrb	r3, [r7, #7]
 801ac78:	2b03      	cmp	r3, #3
 801ac7a:	d817      	bhi.n	801acac <USBD_Get_USB_Status+0x44>
 801ac7c:	a201      	add	r2, pc, #4	; (adr r2, 801ac84 <USBD_Get_USB_Status+0x1c>)
 801ac7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac82:	bf00      	nop
 801ac84:	0801ac95 	.word	0x0801ac95
 801ac88:	0801ac9b 	.word	0x0801ac9b
 801ac8c:	0801aca1 	.word	0x0801aca1
 801ac90:	0801aca7 	.word	0x0801aca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ac94:	2300      	movs	r3, #0
 801ac96:	73fb      	strb	r3, [r7, #15]
    break;
 801ac98:	e00b      	b.n	801acb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ac9a:	2303      	movs	r3, #3
 801ac9c:	73fb      	strb	r3, [r7, #15]
    break;
 801ac9e:	e008      	b.n	801acb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801aca0:	2301      	movs	r3, #1
 801aca2:	73fb      	strb	r3, [r7, #15]
    break;
 801aca4:	e005      	b.n	801acb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801aca6:	2303      	movs	r3, #3
 801aca8:	73fb      	strb	r3, [r7, #15]
    break;
 801acaa:	e002      	b.n	801acb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801acac:	2303      	movs	r3, #3
 801acae:	73fb      	strb	r3, [r7, #15]
    break;
 801acb0:	bf00      	nop
  }
  return usb_status;
 801acb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801acb4:	4618      	mov	r0, r3
 801acb6:	3714      	adds	r7, #20
 801acb8:	46bd      	mov	sp, r7
 801acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acbe:	4770      	bx	lr

0801acc0 <__errno>:
 801acc0:	4b01      	ldr	r3, [pc, #4]	; (801acc8 <__errno+0x8>)
 801acc2:	6818      	ldr	r0, [r3, #0]
 801acc4:	4770      	bx	lr
 801acc6:	bf00      	nop
 801acc8:	24000100 	.word	0x24000100

0801accc <__libc_init_array>:
 801accc:	b570      	push	{r4, r5, r6, lr}
 801acce:	4d0d      	ldr	r5, [pc, #52]	; (801ad04 <__libc_init_array+0x38>)
 801acd0:	4c0d      	ldr	r4, [pc, #52]	; (801ad08 <__libc_init_array+0x3c>)
 801acd2:	1b64      	subs	r4, r4, r5
 801acd4:	10a4      	asrs	r4, r4, #2
 801acd6:	2600      	movs	r6, #0
 801acd8:	42a6      	cmp	r6, r4
 801acda:	d109      	bne.n	801acf0 <__libc_init_array+0x24>
 801acdc:	4d0b      	ldr	r5, [pc, #44]	; (801ad0c <__libc_init_array+0x40>)
 801acde:	4c0c      	ldr	r4, [pc, #48]	; (801ad10 <__libc_init_array+0x44>)
 801ace0:	f004 fb8e 	bl	801f400 <_init>
 801ace4:	1b64      	subs	r4, r4, r5
 801ace6:	10a4      	asrs	r4, r4, #2
 801ace8:	2600      	movs	r6, #0
 801acea:	42a6      	cmp	r6, r4
 801acec:	d105      	bne.n	801acfa <__libc_init_array+0x2e>
 801acee:	bd70      	pop	{r4, r5, r6, pc}
 801acf0:	f855 3b04 	ldr.w	r3, [r5], #4
 801acf4:	4798      	blx	r3
 801acf6:	3601      	adds	r6, #1
 801acf8:	e7ee      	b.n	801acd8 <__libc_init_array+0xc>
 801acfa:	f855 3b04 	ldr.w	r3, [r5], #4
 801acfe:	4798      	blx	r3
 801ad00:	3601      	adds	r6, #1
 801ad02:	e7f2      	b.n	801acea <__libc_init_array+0x1e>
 801ad04:	08020024 	.word	0x08020024
 801ad08:	08020024 	.word	0x08020024
 801ad0c:	08020024 	.word	0x08020024
 801ad10:	08020028 	.word	0x08020028

0801ad14 <memcpy>:
 801ad14:	440a      	add	r2, r1
 801ad16:	4291      	cmp	r1, r2
 801ad18:	f100 33ff 	add.w	r3, r0, #4294967295
 801ad1c:	d100      	bne.n	801ad20 <memcpy+0xc>
 801ad1e:	4770      	bx	lr
 801ad20:	b510      	push	{r4, lr}
 801ad22:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad26:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ad2a:	4291      	cmp	r1, r2
 801ad2c:	d1f9      	bne.n	801ad22 <memcpy+0xe>
 801ad2e:	bd10      	pop	{r4, pc}

0801ad30 <memset>:
 801ad30:	4402      	add	r2, r0
 801ad32:	4603      	mov	r3, r0
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d100      	bne.n	801ad3a <memset+0xa>
 801ad38:	4770      	bx	lr
 801ad3a:	f803 1b01 	strb.w	r1, [r3], #1
 801ad3e:	e7f9      	b.n	801ad34 <memset+0x4>

0801ad40 <__cvt>:
 801ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad42:	ed2d 8b02 	vpush	{d8}
 801ad46:	eeb0 8b40 	vmov.f64	d8, d0
 801ad4a:	b085      	sub	sp, #20
 801ad4c:	4617      	mov	r7, r2
 801ad4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ad50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ad52:	ee18 2a90 	vmov	r2, s17
 801ad56:	f025 0520 	bic.w	r5, r5, #32
 801ad5a:	2a00      	cmp	r2, #0
 801ad5c:	bfb6      	itet	lt
 801ad5e:	222d      	movlt	r2, #45	; 0x2d
 801ad60:	2200      	movge	r2, #0
 801ad62:	eeb1 8b40 	vneglt.f64	d8, d0
 801ad66:	2d46      	cmp	r5, #70	; 0x46
 801ad68:	460c      	mov	r4, r1
 801ad6a:	701a      	strb	r2, [r3, #0]
 801ad6c:	d004      	beq.n	801ad78 <__cvt+0x38>
 801ad6e:	2d45      	cmp	r5, #69	; 0x45
 801ad70:	d100      	bne.n	801ad74 <__cvt+0x34>
 801ad72:	3401      	adds	r4, #1
 801ad74:	2102      	movs	r1, #2
 801ad76:	e000      	b.n	801ad7a <__cvt+0x3a>
 801ad78:	2103      	movs	r1, #3
 801ad7a:	ab03      	add	r3, sp, #12
 801ad7c:	9301      	str	r3, [sp, #4]
 801ad7e:	ab02      	add	r3, sp, #8
 801ad80:	9300      	str	r3, [sp, #0]
 801ad82:	4622      	mov	r2, r4
 801ad84:	4633      	mov	r3, r6
 801ad86:	eeb0 0b48 	vmov.f64	d0, d8
 801ad8a:	f001 fd9d 	bl	801c8c8 <_dtoa_r>
 801ad8e:	2d47      	cmp	r5, #71	; 0x47
 801ad90:	d101      	bne.n	801ad96 <__cvt+0x56>
 801ad92:	07fb      	lsls	r3, r7, #31
 801ad94:	d51a      	bpl.n	801adcc <__cvt+0x8c>
 801ad96:	2d46      	cmp	r5, #70	; 0x46
 801ad98:	eb00 0204 	add.w	r2, r0, r4
 801ad9c:	d10c      	bne.n	801adb8 <__cvt+0x78>
 801ad9e:	7803      	ldrb	r3, [r0, #0]
 801ada0:	2b30      	cmp	r3, #48	; 0x30
 801ada2:	d107      	bne.n	801adb4 <__cvt+0x74>
 801ada4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adac:	bf1c      	itt	ne
 801adae:	f1c4 0401 	rsbne	r4, r4, #1
 801adb2:	6034      	strne	r4, [r6, #0]
 801adb4:	6833      	ldr	r3, [r6, #0]
 801adb6:	441a      	add	r2, r3
 801adb8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc0:	bf08      	it	eq
 801adc2:	9203      	streq	r2, [sp, #12]
 801adc4:	2130      	movs	r1, #48	; 0x30
 801adc6:	9b03      	ldr	r3, [sp, #12]
 801adc8:	4293      	cmp	r3, r2
 801adca:	d307      	bcc.n	801addc <__cvt+0x9c>
 801adcc:	9b03      	ldr	r3, [sp, #12]
 801adce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801add0:	1a1b      	subs	r3, r3, r0
 801add2:	6013      	str	r3, [r2, #0]
 801add4:	b005      	add	sp, #20
 801add6:	ecbd 8b02 	vpop	{d8}
 801adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801addc:	1c5c      	adds	r4, r3, #1
 801adde:	9403      	str	r4, [sp, #12]
 801ade0:	7019      	strb	r1, [r3, #0]
 801ade2:	e7f0      	b.n	801adc6 <__cvt+0x86>

0801ade4 <__exponent>:
 801ade4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ade6:	4603      	mov	r3, r0
 801ade8:	2900      	cmp	r1, #0
 801adea:	bfb8      	it	lt
 801adec:	4249      	neglt	r1, r1
 801adee:	f803 2b02 	strb.w	r2, [r3], #2
 801adf2:	bfb4      	ite	lt
 801adf4:	222d      	movlt	r2, #45	; 0x2d
 801adf6:	222b      	movge	r2, #43	; 0x2b
 801adf8:	2909      	cmp	r1, #9
 801adfa:	7042      	strb	r2, [r0, #1]
 801adfc:	dd2a      	ble.n	801ae54 <__exponent+0x70>
 801adfe:	f10d 0407 	add.w	r4, sp, #7
 801ae02:	46a4      	mov	ip, r4
 801ae04:	270a      	movs	r7, #10
 801ae06:	46a6      	mov	lr, r4
 801ae08:	460a      	mov	r2, r1
 801ae0a:	fb91 f6f7 	sdiv	r6, r1, r7
 801ae0e:	fb07 1516 	mls	r5, r7, r6, r1
 801ae12:	3530      	adds	r5, #48	; 0x30
 801ae14:	2a63      	cmp	r2, #99	; 0x63
 801ae16:	f104 34ff 	add.w	r4, r4, #4294967295
 801ae1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ae1e:	4631      	mov	r1, r6
 801ae20:	dcf1      	bgt.n	801ae06 <__exponent+0x22>
 801ae22:	3130      	adds	r1, #48	; 0x30
 801ae24:	f1ae 0502 	sub.w	r5, lr, #2
 801ae28:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ae2c:	1c44      	adds	r4, r0, #1
 801ae2e:	4629      	mov	r1, r5
 801ae30:	4561      	cmp	r1, ip
 801ae32:	d30a      	bcc.n	801ae4a <__exponent+0x66>
 801ae34:	f10d 0209 	add.w	r2, sp, #9
 801ae38:	eba2 020e 	sub.w	r2, r2, lr
 801ae3c:	4565      	cmp	r5, ip
 801ae3e:	bf88      	it	hi
 801ae40:	2200      	movhi	r2, #0
 801ae42:	4413      	add	r3, r2
 801ae44:	1a18      	subs	r0, r3, r0
 801ae46:	b003      	add	sp, #12
 801ae48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ae52:	e7ed      	b.n	801ae30 <__exponent+0x4c>
 801ae54:	2330      	movs	r3, #48	; 0x30
 801ae56:	3130      	adds	r1, #48	; 0x30
 801ae58:	7083      	strb	r3, [r0, #2]
 801ae5a:	70c1      	strb	r1, [r0, #3]
 801ae5c:	1d03      	adds	r3, r0, #4
 801ae5e:	e7f1      	b.n	801ae44 <__exponent+0x60>

0801ae60 <_printf_float>:
 801ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae64:	b08b      	sub	sp, #44	; 0x2c
 801ae66:	460c      	mov	r4, r1
 801ae68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801ae6c:	4616      	mov	r6, r2
 801ae6e:	461f      	mov	r7, r3
 801ae70:	4605      	mov	r5, r0
 801ae72:	f002 fe07 	bl	801da84 <_localeconv_r>
 801ae76:	f8d0 b000 	ldr.w	fp, [r0]
 801ae7a:	4658      	mov	r0, fp
 801ae7c:	f7e5 fa52 	bl	8000324 <strlen>
 801ae80:	2300      	movs	r3, #0
 801ae82:	9308      	str	r3, [sp, #32]
 801ae84:	f8d8 3000 	ldr.w	r3, [r8]
 801ae88:	f894 9018 	ldrb.w	r9, [r4, #24]
 801ae8c:	6822      	ldr	r2, [r4, #0]
 801ae8e:	3307      	adds	r3, #7
 801ae90:	f023 0307 	bic.w	r3, r3, #7
 801ae94:	f103 0108 	add.w	r1, r3, #8
 801ae98:	f8c8 1000 	str.w	r1, [r8]
 801ae9c:	4682      	mov	sl, r0
 801ae9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aea2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801aea6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b108 <_printf_float+0x2a8>
 801aeaa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801aeae:	eeb0 6bc0 	vabs.f64	d6, d0
 801aeb2:	eeb4 6b47 	vcmp.f64	d6, d7
 801aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeba:	dd24      	ble.n	801af06 <_printf_float+0xa6>
 801aebc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aec4:	d502      	bpl.n	801aecc <_printf_float+0x6c>
 801aec6:	232d      	movs	r3, #45	; 0x2d
 801aec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aecc:	4b90      	ldr	r3, [pc, #576]	; (801b110 <_printf_float+0x2b0>)
 801aece:	4891      	ldr	r0, [pc, #580]	; (801b114 <_printf_float+0x2b4>)
 801aed0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801aed4:	bf94      	ite	ls
 801aed6:	4698      	movls	r8, r3
 801aed8:	4680      	movhi	r8, r0
 801aeda:	2303      	movs	r3, #3
 801aedc:	6123      	str	r3, [r4, #16]
 801aede:	f022 0204 	bic.w	r2, r2, #4
 801aee2:	2300      	movs	r3, #0
 801aee4:	6022      	str	r2, [r4, #0]
 801aee6:	9304      	str	r3, [sp, #16]
 801aee8:	9700      	str	r7, [sp, #0]
 801aeea:	4633      	mov	r3, r6
 801aeec:	aa09      	add	r2, sp, #36	; 0x24
 801aeee:	4621      	mov	r1, r4
 801aef0:	4628      	mov	r0, r5
 801aef2:	f000 f9d3 	bl	801b29c <_printf_common>
 801aef6:	3001      	adds	r0, #1
 801aef8:	f040 808a 	bne.w	801b010 <_printf_float+0x1b0>
 801aefc:	f04f 30ff 	mov.w	r0, #4294967295
 801af00:	b00b      	add	sp, #44	; 0x2c
 801af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af06:	eeb4 0b40 	vcmp.f64	d0, d0
 801af0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af0e:	d709      	bvc.n	801af24 <_printf_float+0xc4>
 801af10:	ee10 3a90 	vmov	r3, s1
 801af14:	2b00      	cmp	r3, #0
 801af16:	bfbc      	itt	lt
 801af18:	232d      	movlt	r3, #45	; 0x2d
 801af1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801af1e:	487e      	ldr	r0, [pc, #504]	; (801b118 <_printf_float+0x2b8>)
 801af20:	4b7e      	ldr	r3, [pc, #504]	; (801b11c <_printf_float+0x2bc>)
 801af22:	e7d5      	b.n	801aed0 <_printf_float+0x70>
 801af24:	6863      	ldr	r3, [r4, #4]
 801af26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801af2a:	9104      	str	r1, [sp, #16]
 801af2c:	1c59      	adds	r1, r3, #1
 801af2e:	d13c      	bne.n	801afaa <_printf_float+0x14a>
 801af30:	2306      	movs	r3, #6
 801af32:	6063      	str	r3, [r4, #4]
 801af34:	2300      	movs	r3, #0
 801af36:	9303      	str	r3, [sp, #12]
 801af38:	ab08      	add	r3, sp, #32
 801af3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801af3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801af42:	ab07      	add	r3, sp, #28
 801af44:	6861      	ldr	r1, [r4, #4]
 801af46:	9300      	str	r3, [sp, #0]
 801af48:	6022      	str	r2, [r4, #0]
 801af4a:	f10d 031b 	add.w	r3, sp, #27
 801af4e:	4628      	mov	r0, r5
 801af50:	f7ff fef6 	bl	801ad40 <__cvt>
 801af54:	9b04      	ldr	r3, [sp, #16]
 801af56:	9907      	ldr	r1, [sp, #28]
 801af58:	2b47      	cmp	r3, #71	; 0x47
 801af5a:	4680      	mov	r8, r0
 801af5c:	d108      	bne.n	801af70 <_printf_float+0x110>
 801af5e:	1cc8      	adds	r0, r1, #3
 801af60:	db02      	blt.n	801af68 <_printf_float+0x108>
 801af62:	6863      	ldr	r3, [r4, #4]
 801af64:	4299      	cmp	r1, r3
 801af66:	dd41      	ble.n	801afec <_printf_float+0x18c>
 801af68:	f1a9 0902 	sub.w	r9, r9, #2
 801af6c:	fa5f f989 	uxtb.w	r9, r9
 801af70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801af74:	d820      	bhi.n	801afb8 <_printf_float+0x158>
 801af76:	3901      	subs	r1, #1
 801af78:	464a      	mov	r2, r9
 801af7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801af7e:	9107      	str	r1, [sp, #28]
 801af80:	f7ff ff30 	bl	801ade4 <__exponent>
 801af84:	9a08      	ldr	r2, [sp, #32]
 801af86:	9004      	str	r0, [sp, #16]
 801af88:	1813      	adds	r3, r2, r0
 801af8a:	2a01      	cmp	r2, #1
 801af8c:	6123      	str	r3, [r4, #16]
 801af8e:	dc02      	bgt.n	801af96 <_printf_float+0x136>
 801af90:	6822      	ldr	r2, [r4, #0]
 801af92:	07d2      	lsls	r2, r2, #31
 801af94:	d501      	bpl.n	801af9a <_printf_float+0x13a>
 801af96:	3301      	adds	r3, #1
 801af98:	6123      	str	r3, [r4, #16]
 801af9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d0a2      	beq.n	801aee8 <_printf_float+0x88>
 801afa2:	232d      	movs	r3, #45	; 0x2d
 801afa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afa8:	e79e      	b.n	801aee8 <_printf_float+0x88>
 801afaa:	9904      	ldr	r1, [sp, #16]
 801afac:	2947      	cmp	r1, #71	; 0x47
 801afae:	d1c1      	bne.n	801af34 <_printf_float+0xd4>
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d1bf      	bne.n	801af34 <_printf_float+0xd4>
 801afb4:	2301      	movs	r3, #1
 801afb6:	e7bc      	b.n	801af32 <_printf_float+0xd2>
 801afb8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801afbc:	d118      	bne.n	801aff0 <_printf_float+0x190>
 801afbe:	2900      	cmp	r1, #0
 801afc0:	6863      	ldr	r3, [r4, #4]
 801afc2:	dd0b      	ble.n	801afdc <_printf_float+0x17c>
 801afc4:	6121      	str	r1, [r4, #16]
 801afc6:	b913      	cbnz	r3, 801afce <_printf_float+0x16e>
 801afc8:	6822      	ldr	r2, [r4, #0]
 801afca:	07d0      	lsls	r0, r2, #31
 801afcc:	d502      	bpl.n	801afd4 <_printf_float+0x174>
 801afce:	3301      	adds	r3, #1
 801afd0:	440b      	add	r3, r1
 801afd2:	6123      	str	r3, [r4, #16]
 801afd4:	2300      	movs	r3, #0
 801afd6:	65a1      	str	r1, [r4, #88]	; 0x58
 801afd8:	9304      	str	r3, [sp, #16]
 801afda:	e7de      	b.n	801af9a <_printf_float+0x13a>
 801afdc:	b913      	cbnz	r3, 801afe4 <_printf_float+0x184>
 801afde:	6822      	ldr	r2, [r4, #0]
 801afe0:	07d2      	lsls	r2, r2, #31
 801afe2:	d501      	bpl.n	801afe8 <_printf_float+0x188>
 801afe4:	3302      	adds	r3, #2
 801afe6:	e7f4      	b.n	801afd2 <_printf_float+0x172>
 801afe8:	2301      	movs	r3, #1
 801afea:	e7f2      	b.n	801afd2 <_printf_float+0x172>
 801afec:	f04f 0967 	mov.w	r9, #103	; 0x67
 801aff0:	9b08      	ldr	r3, [sp, #32]
 801aff2:	4299      	cmp	r1, r3
 801aff4:	db05      	blt.n	801b002 <_printf_float+0x1a2>
 801aff6:	6823      	ldr	r3, [r4, #0]
 801aff8:	6121      	str	r1, [r4, #16]
 801affa:	07d8      	lsls	r0, r3, #31
 801affc:	d5ea      	bpl.n	801afd4 <_printf_float+0x174>
 801affe:	1c4b      	adds	r3, r1, #1
 801b000:	e7e7      	b.n	801afd2 <_printf_float+0x172>
 801b002:	2900      	cmp	r1, #0
 801b004:	bfd4      	ite	le
 801b006:	f1c1 0202 	rsble	r2, r1, #2
 801b00a:	2201      	movgt	r2, #1
 801b00c:	4413      	add	r3, r2
 801b00e:	e7e0      	b.n	801afd2 <_printf_float+0x172>
 801b010:	6823      	ldr	r3, [r4, #0]
 801b012:	055a      	lsls	r2, r3, #21
 801b014:	d407      	bmi.n	801b026 <_printf_float+0x1c6>
 801b016:	6923      	ldr	r3, [r4, #16]
 801b018:	4642      	mov	r2, r8
 801b01a:	4631      	mov	r1, r6
 801b01c:	4628      	mov	r0, r5
 801b01e:	47b8      	blx	r7
 801b020:	3001      	adds	r0, #1
 801b022:	d12a      	bne.n	801b07a <_printf_float+0x21a>
 801b024:	e76a      	b.n	801aefc <_printf_float+0x9c>
 801b026:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b02a:	f240 80e2 	bls.w	801b1f2 <_printf_float+0x392>
 801b02e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b032:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b03a:	d133      	bne.n	801b0a4 <_printf_float+0x244>
 801b03c:	4a38      	ldr	r2, [pc, #224]	; (801b120 <_printf_float+0x2c0>)
 801b03e:	2301      	movs	r3, #1
 801b040:	4631      	mov	r1, r6
 801b042:	4628      	mov	r0, r5
 801b044:	47b8      	blx	r7
 801b046:	3001      	adds	r0, #1
 801b048:	f43f af58 	beq.w	801aefc <_printf_float+0x9c>
 801b04c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b050:	429a      	cmp	r2, r3
 801b052:	db02      	blt.n	801b05a <_printf_float+0x1fa>
 801b054:	6823      	ldr	r3, [r4, #0]
 801b056:	07d8      	lsls	r0, r3, #31
 801b058:	d50f      	bpl.n	801b07a <_printf_float+0x21a>
 801b05a:	4653      	mov	r3, sl
 801b05c:	465a      	mov	r2, fp
 801b05e:	4631      	mov	r1, r6
 801b060:	4628      	mov	r0, r5
 801b062:	47b8      	blx	r7
 801b064:	3001      	adds	r0, #1
 801b066:	f43f af49 	beq.w	801aefc <_printf_float+0x9c>
 801b06a:	f04f 0800 	mov.w	r8, #0
 801b06e:	f104 091a 	add.w	r9, r4, #26
 801b072:	9b08      	ldr	r3, [sp, #32]
 801b074:	3b01      	subs	r3, #1
 801b076:	4543      	cmp	r3, r8
 801b078:	dc09      	bgt.n	801b08e <_printf_float+0x22e>
 801b07a:	6823      	ldr	r3, [r4, #0]
 801b07c:	079b      	lsls	r3, r3, #30
 801b07e:	f100 8108 	bmi.w	801b292 <_printf_float+0x432>
 801b082:	68e0      	ldr	r0, [r4, #12]
 801b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b086:	4298      	cmp	r0, r3
 801b088:	bfb8      	it	lt
 801b08a:	4618      	movlt	r0, r3
 801b08c:	e738      	b.n	801af00 <_printf_float+0xa0>
 801b08e:	2301      	movs	r3, #1
 801b090:	464a      	mov	r2, r9
 801b092:	4631      	mov	r1, r6
 801b094:	4628      	mov	r0, r5
 801b096:	47b8      	blx	r7
 801b098:	3001      	adds	r0, #1
 801b09a:	f43f af2f 	beq.w	801aefc <_printf_float+0x9c>
 801b09e:	f108 0801 	add.w	r8, r8, #1
 801b0a2:	e7e6      	b.n	801b072 <_printf_float+0x212>
 801b0a4:	9b07      	ldr	r3, [sp, #28]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	dc3c      	bgt.n	801b124 <_printf_float+0x2c4>
 801b0aa:	4a1d      	ldr	r2, [pc, #116]	; (801b120 <_printf_float+0x2c0>)
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	4631      	mov	r1, r6
 801b0b0:	4628      	mov	r0, r5
 801b0b2:	47b8      	blx	r7
 801b0b4:	3001      	adds	r0, #1
 801b0b6:	f43f af21 	beq.w	801aefc <_printf_float+0x9c>
 801b0ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b0be:	4313      	orrs	r3, r2
 801b0c0:	d102      	bne.n	801b0c8 <_printf_float+0x268>
 801b0c2:	6823      	ldr	r3, [r4, #0]
 801b0c4:	07d9      	lsls	r1, r3, #31
 801b0c6:	d5d8      	bpl.n	801b07a <_printf_float+0x21a>
 801b0c8:	4653      	mov	r3, sl
 801b0ca:	465a      	mov	r2, fp
 801b0cc:	4631      	mov	r1, r6
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	47b8      	blx	r7
 801b0d2:	3001      	adds	r0, #1
 801b0d4:	f43f af12 	beq.w	801aefc <_printf_float+0x9c>
 801b0d8:	f04f 0900 	mov.w	r9, #0
 801b0dc:	f104 0a1a 	add.w	sl, r4, #26
 801b0e0:	9b07      	ldr	r3, [sp, #28]
 801b0e2:	425b      	negs	r3, r3
 801b0e4:	454b      	cmp	r3, r9
 801b0e6:	dc01      	bgt.n	801b0ec <_printf_float+0x28c>
 801b0e8:	9b08      	ldr	r3, [sp, #32]
 801b0ea:	e795      	b.n	801b018 <_printf_float+0x1b8>
 801b0ec:	2301      	movs	r3, #1
 801b0ee:	4652      	mov	r2, sl
 801b0f0:	4631      	mov	r1, r6
 801b0f2:	4628      	mov	r0, r5
 801b0f4:	47b8      	blx	r7
 801b0f6:	3001      	adds	r0, #1
 801b0f8:	f43f af00 	beq.w	801aefc <_printf_float+0x9c>
 801b0fc:	f109 0901 	add.w	r9, r9, #1
 801b100:	e7ee      	b.n	801b0e0 <_printf_float+0x280>
 801b102:	bf00      	nop
 801b104:	f3af 8000 	nop.w
 801b108:	ffffffff 	.word	0xffffffff
 801b10c:	7fefffff 	.word	0x7fefffff
 801b110:	0801fb7c 	.word	0x0801fb7c
 801b114:	0801fb80 	.word	0x0801fb80
 801b118:	0801fb88 	.word	0x0801fb88
 801b11c:	0801fb84 	.word	0x0801fb84
 801b120:	0801fb8c 	.word	0x0801fb8c
 801b124:	9a08      	ldr	r2, [sp, #32]
 801b126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b128:	429a      	cmp	r2, r3
 801b12a:	bfa8      	it	ge
 801b12c:	461a      	movge	r2, r3
 801b12e:	2a00      	cmp	r2, #0
 801b130:	4691      	mov	r9, r2
 801b132:	dc38      	bgt.n	801b1a6 <_printf_float+0x346>
 801b134:	2300      	movs	r3, #0
 801b136:	9305      	str	r3, [sp, #20]
 801b138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b13c:	f104 021a 	add.w	r2, r4, #26
 801b140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b142:	9905      	ldr	r1, [sp, #20]
 801b144:	9304      	str	r3, [sp, #16]
 801b146:	eba3 0309 	sub.w	r3, r3, r9
 801b14a:	428b      	cmp	r3, r1
 801b14c:	dc33      	bgt.n	801b1b6 <_printf_float+0x356>
 801b14e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b152:	429a      	cmp	r2, r3
 801b154:	db3c      	blt.n	801b1d0 <_printf_float+0x370>
 801b156:	6823      	ldr	r3, [r4, #0]
 801b158:	07da      	lsls	r2, r3, #31
 801b15a:	d439      	bmi.n	801b1d0 <_printf_float+0x370>
 801b15c:	9b08      	ldr	r3, [sp, #32]
 801b15e:	9a04      	ldr	r2, [sp, #16]
 801b160:	9907      	ldr	r1, [sp, #28]
 801b162:	1a9a      	subs	r2, r3, r2
 801b164:	eba3 0901 	sub.w	r9, r3, r1
 801b168:	4591      	cmp	r9, r2
 801b16a:	bfa8      	it	ge
 801b16c:	4691      	movge	r9, r2
 801b16e:	f1b9 0f00 	cmp.w	r9, #0
 801b172:	dc35      	bgt.n	801b1e0 <_printf_float+0x380>
 801b174:	f04f 0800 	mov.w	r8, #0
 801b178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b17c:	f104 0a1a 	add.w	sl, r4, #26
 801b180:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b184:	1a9b      	subs	r3, r3, r2
 801b186:	eba3 0309 	sub.w	r3, r3, r9
 801b18a:	4543      	cmp	r3, r8
 801b18c:	f77f af75 	ble.w	801b07a <_printf_float+0x21a>
 801b190:	2301      	movs	r3, #1
 801b192:	4652      	mov	r2, sl
 801b194:	4631      	mov	r1, r6
 801b196:	4628      	mov	r0, r5
 801b198:	47b8      	blx	r7
 801b19a:	3001      	adds	r0, #1
 801b19c:	f43f aeae 	beq.w	801aefc <_printf_float+0x9c>
 801b1a0:	f108 0801 	add.w	r8, r8, #1
 801b1a4:	e7ec      	b.n	801b180 <_printf_float+0x320>
 801b1a6:	4613      	mov	r3, r2
 801b1a8:	4631      	mov	r1, r6
 801b1aa:	4642      	mov	r2, r8
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	47b8      	blx	r7
 801b1b0:	3001      	adds	r0, #1
 801b1b2:	d1bf      	bne.n	801b134 <_printf_float+0x2d4>
 801b1b4:	e6a2      	b.n	801aefc <_printf_float+0x9c>
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	4631      	mov	r1, r6
 801b1ba:	4628      	mov	r0, r5
 801b1bc:	9204      	str	r2, [sp, #16]
 801b1be:	47b8      	blx	r7
 801b1c0:	3001      	adds	r0, #1
 801b1c2:	f43f ae9b 	beq.w	801aefc <_printf_float+0x9c>
 801b1c6:	9b05      	ldr	r3, [sp, #20]
 801b1c8:	9a04      	ldr	r2, [sp, #16]
 801b1ca:	3301      	adds	r3, #1
 801b1cc:	9305      	str	r3, [sp, #20]
 801b1ce:	e7b7      	b.n	801b140 <_printf_float+0x2e0>
 801b1d0:	4653      	mov	r3, sl
 801b1d2:	465a      	mov	r2, fp
 801b1d4:	4631      	mov	r1, r6
 801b1d6:	4628      	mov	r0, r5
 801b1d8:	47b8      	blx	r7
 801b1da:	3001      	adds	r0, #1
 801b1dc:	d1be      	bne.n	801b15c <_printf_float+0x2fc>
 801b1de:	e68d      	b.n	801aefc <_printf_float+0x9c>
 801b1e0:	9a04      	ldr	r2, [sp, #16]
 801b1e2:	464b      	mov	r3, r9
 801b1e4:	4442      	add	r2, r8
 801b1e6:	4631      	mov	r1, r6
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	47b8      	blx	r7
 801b1ec:	3001      	adds	r0, #1
 801b1ee:	d1c1      	bne.n	801b174 <_printf_float+0x314>
 801b1f0:	e684      	b.n	801aefc <_printf_float+0x9c>
 801b1f2:	9a08      	ldr	r2, [sp, #32]
 801b1f4:	2a01      	cmp	r2, #1
 801b1f6:	dc01      	bgt.n	801b1fc <_printf_float+0x39c>
 801b1f8:	07db      	lsls	r3, r3, #31
 801b1fa:	d537      	bpl.n	801b26c <_printf_float+0x40c>
 801b1fc:	2301      	movs	r3, #1
 801b1fe:	4642      	mov	r2, r8
 801b200:	4631      	mov	r1, r6
 801b202:	4628      	mov	r0, r5
 801b204:	47b8      	blx	r7
 801b206:	3001      	adds	r0, #1
 801b208:	f43f ae78 	beq.w	801aefc <_printf_float+0x9c>
 801b20c:	4653      	mov	r3, sl
 801b20e:	465a      	mov	r2, fp
 801b210:	4631      	mov	r1, r6
 801b212:	4628      	mov	r0, r5
 801b214:	47b8      	blx	r7
 801b216:	3001      	adds	r0, #1
 801b218:	f43f ae70 	beq.w	801aefc <_printf_float+0x9c>
 801b21c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b220:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b228:	d01b      	beq.n	801b262 <_printf_float+0x402>
 801b22a:	9b08      	ldr	r3, [sp, #32]
 801b22c:	f108 0201 	add.w	r2, r8, #1
 801b230:	3b01      	subs	r3, #1
 801b232:	4631      	mov	r1, r6
 801b234:	4628      	mov	r0, r5
 801b236:	47b8      	blx	r7
 801b238:	3001      	adds	r0, #1
 801b23a:	d10e      	bne.n	801b25a <_printf_float+0x3fa>
 801b23c:	e65e      	b.n	801aefc <_printf_float+0x9c>
 801b23e:	2301      	movs	r3, #1
 801b240:	464a      	mov	r2, r9
 801b242:	4631      	mov	r1, r6
 801b244:	4628      	mov	r0, r5
 801b246:	47b8      	blx	r7
 801b248:	3001      	adds	r0, #1
 801b24a:	f43f ae57 	beq.w	801aefc <_printf_float+0x9c>
 801b24e:	f108 0801 	add.w	r8, r8, #1
 801b252:	9b08      	ldr	r3, [sp, #32]
 801b254:	3b01      	subs	r3, #1
 801b256:	4543      	cmp	r3, r8
 801b258:	dcf1      	bgt.n	801b23e <_printf_float+0x3de>
 801b25a:	9b04      	ldr	r3, [sp, #16]
 801b25c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b260:	e6db      	b.n	801b01a <_printf_float+0x1ba>
 801b262:	f04f 0800 	mov.w	r8, #0
 801b266:	f104 091a 	add.w	r9, r4, #26
 801b26a:	e7f2      	b.n	801b252 <_printf_float+0x3f2>
 801b26c:	2301      	movs	r3, #1
 801b26e:	4642      	mov	r2, r8
 801b270:	e7df      	b.n	801b232 <_printf_float+0x3d2>
 801b272:	2301      	movs	r3, #1
 801b274:	464a      	mov	r2, r9
 801b276:	4631      	mov	r1, r6
 801b278:	4628      	mov	r0, r5
 801b27a:	47b8      	blx	r7
 801b27c:	3001      	adds	r0, #1
 801b27e:	f43f ae3d 	beq.w	801aefc <_printf_float+0x9c>
 801b282:	f108 0801 	add.w	r8, r8, #1
 801b286:	68e3      	ldr	r3, [r4, #12]
 801b288:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b28a:	1a5b      	subs	r3, r3, r1
 801b28c:	4543      	cmp	r3, r8
 801b28e:	dcf0      	bgt.n	801b272 <_printf_float+0x412>
 801b290:	e6f7      	b.n	801b082 <_printf_float+0x222>
 801b292:	f04f 0800 	mov.w	r8, #0
 801b296:	f104 0919 	add.w	r9, r4, #25
 801b29a:	e7f4      	b.n	801b286 <_printf_float+0x426>

0801b29c <_printf_common>:
 801b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2a0:	4616      	mov	r6, r2
 801b2a2:	4699      	mov	r9, r3
 801b2a4:	688a      	ldr	r2, [r1, #8]
 801b2a6:	690b      	ldr	r3, [r1, #16]
 801b2a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b2ac:	4293      	cmp	r3, r2
 801b2ae:	bfb8      	it	lt
 801b2b0:	4613      	movlt	r3, r2
 801b2b2:	6033      	str	r3, [r6, #0]
 801b2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b2b8:	4607      	mov	r7, r0
 801b2ba:	460c      	mov	r4, r1
 801b2bc:	b10a      	cbz	r2, 801b2c2 <_printf_common+0x26>
 801b2be:	3301      	adds	r3, #1
 801b2c0:	6033      	str	r3, [r6, #0]
 801b2c2:	6823      	ldr	r3, [r4, #0]
 801b2c4:	0699      	lsls	r1, r3, #26
 801b2c6:	bf42      	ittt	mi
 801b2c8:	6833      	ldrmi	r3, [r6, #0]
 801b2ca:	3302      	addmi	r3, #2
 801b2cc:	6033      	strmi	r3, [r6, #0]
 801b2ce:	6825      	ldr	r5, [r4, #0]
 801b2d0:	f015 0506 	ands.w	r5, r5, #6
 801b2d4:	d106      	bne.n	801b2e4 <_printf_common+0x48>
 801b2d6:	f104 0a19 	add.w	sl, r4, #25
 801b2da:	68e3      	ldr	r3, [r4, #12]
 801b2dc:	6832      	ldr	r2, [r6, #0]
 801b2de:	1a9b      	subs	r3, r3, r2
 801b2e0:	42ab      	cmp	r3, r5
 801b2e2:	dc26      	bgt.n	801b332 <_printf_common+0x96>
 801b2e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b2e8:	1e13      	subs	r3, r2, #0
 801b2ea:	6822      	ldr	r2, [r4, #0]
 801b2ec:	bf18      	it	ne
 801b2ee:	2301      	movne	r3, #1
 801b2f0:	0692      	lsls	r2, r2, #26
 801b2f2:	d42b      	bmi.n	801b34c <_printf_common+0xb0>
 801b2f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b2f8:	4649      	mov	r1, r9
 801b2fa:	4638      	mov	r0, r7
 801b2fc:	47c0      	blx	r8
 801b2fe:	3001      	adds	r0, #1
 801b300:	d01e      	beq.n	801b340 <_printf_common+0xa4>
 801b302:	6823      	ldr	r3, [r4, #0]
 801b304:	68e5      	ldr	r5, [r4, #12]
 801b306:	6832      	ldr	r2, [r6, #0]
 801b308:	f003 0306 	and.w	r3, r3, #6
 801b30c:	2b04      	cmp	r3, #4
 801b30e:	bf08      	it	eq
 801b310:	1aad      	subeq	r5, r5, r2
 801b312:	68a3      	ldr	r3, [r4, #8]
 801b314:	6922      	ldr	r2, [r4, #16]
 801b316:	bf0c      	ite	eq
 801b318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b31c:	2500      	movne	r5, #0
 801b31e:	4293      	cmp	r3, r2
 801b320:	bfc4      	itt	gt
 801b322:	1a9b      	subgt	r3, r3, r2
 801b324:	18ed      	addgt	r5, r5, r3
 801b326:	2600      	movs	r6, #0
 801b328:	341a      	adds	r4, #26
 801b32a:	42b5      	cmp	r5, r6
 801b32c:	d11a      	bne.n	801b364 <_printf_common+0xc8>
 801b32e:	2000      	movs	r0, #0
 801b330:	e008      	b.n	801b344 <_printf_common+0xa8>
 801b332:	2301      	movs	r3, #1
 801b334:	4652      	mov	r2, sl
 801b336:	4649      	mov	r1, r9
 801b338:	4638      	mov	r0, r7
 801b33a:	47c0      	blx	r8
 801b33c:	3001      	adds	r0, #1
 801b33e:	d103      	bne.n	801b348 <_printf_common+0xac>
 801b340:	f04f 30ff 	mov.w	r0, #4294967295
 801b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b348:	3501      	adds	r5, #1
 801b34a:	e7c6      	b.n	801b2da <_printf_common+0x3e>
 801b34c:	18e1      	adds	r1, r4, r3
 801b34e:	1c5a      	adds	r2, r3, #1
 801b350:	2030      	movs	r0, #48	; 0x30
 801b352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b356:	4422      	add	r2, r4
 801b358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b35c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b360:	3302      	adds	r3, #2
 801b362:	e7c7      	b.n	801b2f4 <_printf_common+0x58>
 801b364:	2301      	movs	r3, #1
 801b366:	4622      	mov	r2, r4
 801b368:	4649      	mov	r1, r9
 801b36a:	4638      	mov	r0, r7
 801b36c:	47c0      	blx	r8
 801b36e:	3001      	adds	r0, #1
 801b370:	d0e6      	beq.n	801b340 <_printf_common+0xa4>
 801b372:	3601      	adds	r6, #1
 801b374:	e7d9      	b.n	801b32a <_printf_common+0x8e>
	...

0801b378 <_printf_i>:
 801b378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b37c:	7e0f      	ldrb	r7, [r1, #24]
 801b37e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b380:	2f78      	cmp	r7, #120	; 0x78
 801b382:	4691      	mov	r9, r2
 801b384:	4680      	mov	r8, r0
 801b386:	460c      	mov	r4, r1
 801b388:	469a      	mov	sl, r3
 801b38a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b38e:	d807      	bhi.n	801b3a0 <_printf_i+0x28>
 801b390:	2f62      	cmp	r7, #98	; 0x62
 801b392:	d80a      	bhi.n	801b3aa <_printf_i+0x32>
 801b394:	2f00      	cmp	r7, #0
 801b396:	f000 80d8 	beq.w	801b54a <_printf_i+0x1d2>
 801b39a:	2f58      	cmp	r7, #88	; 0x58
 801b39c:	f000 80a3 	beq.w	801b4e6 <_printf_i+0x16e>
 801b3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b3a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b3a8:	e03a      	b.n	801b420 <_printf_i+0xa8>
 801b3aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b3ae:	2b15      	cmp	r3, #21
 801b3b0:	d8f6      	bhi.n	801b3a0 <_printf_i+0x28>
 801b3b2:	a101      	add	r1, pc, #4	; (adr r1, 801b3b8 <_printf_i+0x40>)
 801b3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b3b8:	0801b411 	.word	0x0801b411
 801b3bc:	0801b425 	.word	0x0801b425
 801b3c0:	0801b3a1 	.word	0x0801b3a1
 801b3c4:	0801b3a1 	.word	0x0801b3a1
 801b3c8:	0801b3a1 	.word	0x0801b3a1
 801b3cc:	0801b3a1 	.word	0x0801b3a1
 801b3d0:	0801b425 	.word	0x0801b425
 801b3d4:	0801b3a1 	.word	0x0801b3a1
 801b3d8:	0801b3a1 	.word	0x0801b3a1
 801b3dc:	0801b3a1 	.word	0x0801b3a1
 801b3e0:	0801b3a1 	.word	0x0801b3a1
 801b3e4:	0801b531 	.word	0x0801b531
 801b3e8:	0801b455 	.word	0x0801b455
 801b3ec:	0801b513 	.word	0x0801b513
 801b3f0:	0801b3a1 	.word	0x0801b3a1
 801b3f4:	0801b3a1 	.word	0x0801b3a1
 801b3f8:	0801b553 	.word	0x0801b553
 801b3fc:	0801b3a1 	.word	0x0801b3a1
 801b400:	0801b455 	.word	0x0801b455
 801b404:	0801b3a1 	.word	0x0801b3a1
 801b408:	0801b3a1 	.word	0x0801b3a1
 801b40c:	0801b51b 	.word	0x0801b51b
 801b410:	682b      	ldr	r3, [r5, #0]
 801b412:	1d1a      	adds	r2, r3, #4
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	602a      	str	r2, [r5, #0]
 801b418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b41c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b420:	2301      	movs	r3, #1
 801b422:	e0a3      	b.n	801b56c <_printf_i+0x1f4>
 801b424:	6820      	ldr	r0, [r4, #0]
 801b426:	6829      	ldr	r1, [r5, #0]
 801b428:	0606      	lsls	r6, r0, #24
 801b42a:	f101 0304 	add.w	r3, r1, #4
 801b42e:	d50a      	bpl.n	801b446 <_printf_i+0xce>
 801b430:	680e      	ldr	r6, [r1, #0]
 801b432:	602b      	str	r3, [r5, #0]
 801b434:	2e00      	cmp	r6, #0
 801b436:	da03      	bge.n	801b440 <_printf_i+0xc8>
 801b438:	232d      	movs	r3, #45	; 0x2d
 801b43a:	4276      	negs	r6, r6
 801b43c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b440:	485e      	ldr	r0, [pc, #376]	; (801b5bc <_printf_i+0x244>)
 801b442:	230a      	movs	r3, #10
 801b444:	e019      	b.n	801b47a <_printf_i+0x102>
 801b446:	680e      	ldr	r6, [r1, #0]
 801b448:	602b      	str	r3, [r5, #0]
 801b44a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b44e:	bf18      	it	ne
 801b450:	b236      	sxthne	r6, r6
 801b452:	e7ef      	b.n	801b434 <_printf_i+0xbc>
 801b454:	682b      	ldr	r3, [r5, #0]
 801b456:	6820      	ldr	r0, [r4, #0]
 801b458:	1d19      	adds	r1, r3, #4
 801b45a:	6029      	str	r1, [r5, #0]
 801b45c:	0601      	lsls	r1, r0, #24
 801b45e:	d501      	bpl.n	801b464 <_printf_i+0xec>
 801b460:	681e      	ldr	r6, [r3, #0]
 801b462:	e002      	b.n	801b46a <_printf_i+0xf2>
 801b464:	0646      	lsls	r6, r0, #25
 801b466:	d5fb      	bpl.n	801b460 <_printf_i+0xe8>
 801b468:	881e      	ldrh	r6, [r3, #0]
 801b46a:	4854      	ldr	r0, [pc, #336]	; (801b5bc <_printf_i+0x244>)
 801b46c:	2f6f      	cmp	r7, #111	; 0x6f
 801b46e:	bf0c      	ite	eq
 801b470:	2308      	moveq	r3, #8
 801b472:	230a      	movne	r3, #10
 801b474:	2100      	movs	r1, #0
 801b476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b47a:	6865      	ldr	r5, [r4, #4]
 801b47c:	60a5      	str	r5, [r4, #8]
 801b47e:	2d00      	cmp	r5, #0
 801b480:	bfa2      	ittt	ge
 801b482:	6821      	ldrge	r1, [r4, #0]
 801b484:	f021 0104 	bicge.w	r1, r1, #4
 801b488:	6021      	strge	r1, [r4, #0]
 801b48a:	b90e      	cbnz	r6, 801b490 <_printf_i+0x118>
 801b48c:	2d00      	cmp	r5, #0
 801b48e:	d04d      	beq.n	801b52c <_printf_i+0x1b4>
 801b490:	4615      	mov	r5, r2
 801b492:	fbb6 f1f3 	udiv	r1, r6, r3
 801b496:	fb03 6711 	mls	r7, r3, r1, r6
 801b49a:	5dc7      	ldrb	r7, [r0, r7]
 801b49c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b4a0:	4637      	mov	r7, r6
 801b4a2:	42bb      	cmp	r3, r7
 801b4a4:	460e      	mov	r6, r1
 801b4a6:	d9f4      	bls.n	801b492 <_printf_i+0x11a>
 801b4a8:	2b08      	cmp	r3, #8
 801b4aa:	d10b      	bne.n	801b4c4 <_printf_i+0x14c>
 801b4ac:	6823      	ldr	r3, [r4, #0]
 801b4ae:	07de      	lsls	r6, r3, #31
 801b4b0:	d508      	bpl.n	801b4c4 <_printf_i+0x14c>
 801b4b2:	6923      	ldr	r3, [r4, #16]
 801b4b4:	6861      	ldr	r1, [r4, #4]
 801b4b6:	4299      	cmp	r1, r3
 801b4b8:	bfde      	ittt	le
 801b4ba:	2330      	movle	r3, #48	; 0x30
 801b4bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b4c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b4c4:	1b52      	subs	r2, r2, r5
 801b4c6:	6122      	str	r2, [r4, #16]
 801b4c8:	f8cd a000 	str.w	sl, [sp]
 801b4cc:	464b      	mov	r3, r9
 801b4ce:	aa03      	add	r2, sp, #12
 801b4d0:	4621      	mov	r1, r4
 801b4d2:	4640      	mov	r0, r8
 801b4d4:	f7ff fee2 	bl	801b29c <_printf_common>
 801b4d8:	3001      	adds	r0, #1
 801b4da:	d14c      	bne.n	801b576 <_printf_i+0x1fe>
 801b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b4e0:	b004      	add	sp, #16
 801b4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4e6:	4835      	ldr	r0, [pc, #212]	; (801b5bc <_printf_i+0x244>)
 801b4e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b4ec:	6829      	ldr	r1, [r5, #0]
 801b4ee:	6823      	ldr	r3, [r4, #0]
 801b4f0:	f851 6b04 	ldr.w	r6, [r1], #4
 801b4f4:	6029      	str	r1, [r5, #0]
 801b4f6:	061d      	lsls	r5, r3, #24
 801b4f8:	d514      	bpl.n	801b524 <_printf_i+0x1ac>
 801b4fa:	07df      	lsls	r7, r3, #31
 801b4fc:	bf44      	itt	mi
 801b4fe:	f043 0320 	orrmi.w	r3, r3, #32
 801b502:	6023      	strmi	r3, [r4, #0]
 801b504:	b91e      	cbnz	r6, 801b50e <_printf_i+0x196>
 801b506:	6823      	ldr	r3, [r4, #0]
 801b508:	f023 0320 	bic.w	r3, r3, #32
 801b50c:	6023      	str	r3, [r4, #0]
 801b50e:	2310      	movs	r3, #16
 801b510:	e7b0      	b.n	801b474 <_printf_i+0xfc>
 801b512:	6823      	ldr	r3, [r4, #0]
 801b514:	f043 0320 	orr.w	r3, r3, #32
 801b518:	6023      	str	r3, [r4, #0]
 801b51a:	2378      	movs	r3, #120	; 0x78
 801b51c:	4828      	ldr	r0, [pc, #160]	; (801b5c0 <_printf_i+0x248>)
 801b51e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b522:	e7e3      	b.n	801b4ec <_printf_i+0x174>
 801b524:	0659      	lsls	r1, r3, #25
 801b526:	bf48      	it	mi
 801b528:	b2b6      	uxthmi	r6, r6
 801b52a:	e7e6      	b.n	801b4fa <_printf_i+0x182>
 801b52c:	4615      	mov	r5, r2
 801b52e:	e7bb      	b.n	801b4a8 <_printf_i+0x130>
 801b530:	682b      	ldr	r3, [r5, #0]
 801b532:	6826      	ldr	r6, [r4, #0]
 801b534:	6961      	ldr	r1, [r4, #20]
 801b536:	1d18      	adds	r0, r3, #4
 801b538:	6028      	str	r0, [r5, #0]
 801b53a:	0635      	lsls	r5, r6, #24
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	d501      	bpl.n	801b544 <_printf_i+0x1cc>
 801b540:	6019      	str	r1, [r3, #0]
 801b542:	e002      	b.n	801b54a <_printf_i+0x1d2>
 801b544:	0670      	lsls	r0, r6, #25
 801b546:	d5fb      	bpl.n	801b540 <_printf_i+0x1c8>
 801b548:	8019      	strh	r1, [r3, #0]
 801b54a:	2300      	movs	r3, #0
 801b54c:	6123      	str	r3, [r4, #16]
 801b54e:	4615      	mov	r5, r2
 801b550:	e7ba      	b.n	801b4c8 <_printf_i+0x150>
 801b552:	682b      	ldr	r3, [r5, #0]
 801b554:	1d1a      	adds	r2, r3, #4
 801b556:	602a      	str	r2, [r5, #0]
 801b558:	681d      	ldr	r5, [r3, #0]
 801b55a:	6862      	ldr	r2, [r4, #4]
 801b55c:	2100      	movs	r1, #0
 801b55e:	4628      	mov	r0, r5
 801b560:	f7e4 feee 	bl	8000340 <memchr>
 801b564:	b108      	cbz	r0, 801b56a <_printf_i+0x1f2>
 801b566:	1b40      	subs	r0, r0, r5
 801b568:	6060      	str	r0, [r4, #4]
 801b56a:	6863      	ldr	r3, [r4, #4]
 801b56c:	6123      	str	r3, [r4, #16]
 801b56e:	2300      	movs	r3, #0
 801b570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b574:	e7a8      	b.n	801b4c8 <_printf_i+0x150>
 801b576:	6923      	ldr	r3, [r4, #16]
 801b578:	462a      	mov	r2, r5
 801b57a:	4649      	mov	r1, r9
 801b57c:	4640      	mov	r0, r8
 801b57e:	47d0      	blx	sl
 801b580:	3001      	adds	r0, #1
 801b582:	d0ab      	beq.n	801b4dc <_printf_i+0x164>
 801b584:	6823      	ldr	r3, [r4, #0]
 801b586:	079b      	lsls	r3, r3, #30
 801b588:	d413      	bmi.n	801b5b2 <_printf_i+0x23a>
 801b58a:	68e0      	ldr	r0, [r4, #12]
 801b58c:	9b03      	ldr	r3, [sp, #12]
 801b58e:	4298      	cmp	r0, r3
 801b590:	bfb8      	it	lt
 801b592:	4618      	movlt	r0, r3
 801b594:	e7a4      	b.n	801b4e0 <_printf_i+0x168>
 801b596:	2301      	movs	r3, #1
 801b598:	4632      	mov	r2, r6
 801b59a:	4649      	mov	r1, r9
 801b59c:	4640      	mov	r0, r8
 801b59e:	47d0      	blx	sl
 801b5a0:	3001      	adds	r0, #1
 801b5a2:	d09b      	beq.n	801b4dc <_printf_i+0x164>
 801b5a4:	3501      	adds	r5, #1
 801b5a6:	68e3      	ldr	r3, [r4, #12]
 801b5a8:	9903      	ldr	r1, [sp, #12]
 801b5aa:	1a5b      	subs	r3, r3, r1
 801b5ac:	42ab      	cmp	r3, r5
 801b5ae:	dcf2      	bgt.n	801b596 <_printf_i+0x21e>
 801b5b0:	e7eb      	b.n	801b58a <_printf_i+0x212>
 801b5b2:	2500      	movs	r5, #0
 801b5b4:	f104 0619 	add.w	r6, r4, #25
 801b5b8:	e7f5      	b.n	801b5a6 <_printf_i+0x22e>
 801b5ba:	bf00      	nop
 801b5bc:	0801fb8e 	.word	0x0801fb8e
 801b5c0:	0801fb9f 	.word	0x0801fb9f

0801b5c4 <_scanf_float>:
 801b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5c8:	b087      	sub	sp, #28
 801b5ca:	4617      	mov	r7, r2
 801b5cc:	9303      	str	r3, [sp, #12]
 801b5ce:	688b      	ldr	r3, [r1, #8]
 801b5d0:	1e5a      	subs	r2, r3, #1
 801b5d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b5d6:	bf83      	ittte	hi
 801b5d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b5dc:	195b      	addhi	r3, r3, r5
 801b5de:	9302      	strhi	r3, [sp, #8]
 801b5e0:	2300      	movls	r3, #0
 801b5e2:	bf86      	itte	hi
 801b5e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b5e8:	608b      	strhi	r3, [r1, #8]
 801b5ea:	9302      	strls	r3, [sp, #8]
 801b5ec:	680b      	ldr	r3, [r1, #0]
 801b5ee:	468b      	mov	fp, r1
 801b5f0:	2500      	movs	r5, #0
 801b5f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b5f6:	f84b 3b1c 	str.w	r3, [fp], #28
 801b5fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b5fe:	4680      	mov	r8, r0
 801b600:	460c      	mov	r4, r1
 801b602:	465e      	mov	r6, fp
 801b604:	46aa      	mov	sl, r5
 801b606:	46a9      	mov	r9, r5
 801b608:	9501      	str	r5, [sp, #4]
 801b60a:	68a2      	ldr	r2, [r4, #8]
 801b60c:	b152      	cbz	r2, 801b624 <_scanf_float+0x60>
 801b60e:	683b      	ldr	r3, [r7, #0]
 801b610:	781b      	ldrb	r3, [r3, #0]
 801b612:	2b4e      	cmp	r3, #78	; 0x4e
 801b614:	d864      	bhi.n	801b6e0 <_scanf_float+0x11c>
 801b616:	2b40      	cmp	r3, #64	; 0x40
 801b618:	d83c      	bhi.n	801b694 <_scanf_float+0xd0>
 801b61a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b61e:	b2c8      	uxtb	r0, r1
 801b620:	280e      	cmp	r0, #14
 801b622:	d93a      	bls.n	801b69a <_scanf_float+0xd6>
 801b624:	f1b9 0f00 	cmp.w	r9, #0
 801b628:	d003      	beq.n	801b632 <_scanf_float+0x6e>
 801b62a:	6823      	ldr	r3, [r4, #0]
 801b62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b630:	6023      	str	r3, [r4, #0]
 801b632:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b636:	f1ba 0f01 	cmp.w	sl, #1
 801b63a:	f200 8113 	bhi.w	801b864 <_scanf_float+0x2a0>
 801b63e:	455e      	cmp	r6, fp
 801b640:	f200 8105 	bhi.w	801b84e <_scanf_float+0x28a>
 801b644:	2501      	movs	r5, #1
 801b646:	4628      	mov	r0, r5
 801b648:	b007      	add	sp, #28
 801b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b64e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b652:	2a0d      	cmp	r2, #13
 801b654:	d8e6      	bhi.n	801b624 <_scanf_float+0x60>
 801b656:	a101      	add	r1, pc, #4	; (adr r1, 801b65c <_scanf_float+0x98>)
 801b658:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b65c:	0801b79b 	.word	0x0801b79b
 801b660:	0801b625 	.word	0x0801b625
 801b664:	0801b625 	.word	0x0801b625
 801b668:	0801b625 	.word	0x0801b625
 801b66c:	0801b7fb 	.word	0x0801b7fb
 801b670:	0801b7d3 	.word	0x0801b7d3
 801b674:	0801b625 	.word	0x0801b625
 801b678:	0801b625 	.word	0x0801b625
 801b67c:	0801b7a9 	.word	0x0801b7a9
 801b680:	0801b625 	.word	0x0801b625
 801b684:	0801b625 	.word	0x0801b625
 801b688:	0801b625 	.word	0x0801b625
 801b68c:	0801b625 	.word	0x0801b625
 801b690:	0801b761 	.word	0x0801b761
 801b694:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b698:	e7db      	b.n	801b652 <_scanf_float+0x8e>
 801b69a:	290e      	cmp	r1, #14
 801b69c:	d8c2      	bhi.n	801b624 <_scanf_float+0x60>
 801b69e:	a001      	add	r0, pc, #4	; (adr r0, 801b6a4 <_scanf_float+0xe0>)
 801b6a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b6a4:	0801b753 	.word	0x0801b753
 801b6a8:	0801b625 	.word	0x0801b625
 801b6ac:	0801b753 	.word	0x0801b753
 801b6b0:	0801b7e7 	.word	0x0801b7e7
 801b6b4:	0801b625 	.word	0x0801b625
 801b6b8:	0801b701 	.word	0x0801b701
 801b6bc:	0801b73d 	.word	0x0801b73d
 801b6c0:	0801b73d 	.word	0x0801b73d
 801b6c4:	0801b73d 	.word	0x0801b73d
 801b6c8:	0801b73d 	.word	0x0801b73d
 801b6cc:	0801b73d 	.word	0x0801b73d
 801b6d0:	0801b73d 	.word	0x0801b73d
 801b6d4:	0801b73d 	.word	0x0801b73d
 801b6d8:	0801b73d 	.word	0x0801b73d
 801b6dc:	0801b73d 	.word	0x0801b73d
 801b6e0:	2b6e      	cmp	r3, #110	; 0x6e
 801b6e2:	d809      	bhi.n	801b6f8 <_scanf_float+0x134>
 801b6e4:	2b60      	cmp	r3, #96	; 0x60
 801b6e6:	d8b2      	bhi.n	801b64e <_scanf_float+0x8a>
 801b6e8:	2b54      	cmp	r3, #84	; 0x54
 801b6ea:	d077      	beq.n	801b7dc <_scanf_float+0x218>
 801b6ec:	2b59      	cmp	r3, #89	; 0x59
 801b6ee:	d199      	bne.n	801b624 <_scanf_float+0x60>
 801b6f0:	2d07      	cmp	r5, #7
 801b6f2:	d197      	bne.n	801b624 <_scanf_float+0x60>
 801b6f4:	2508      	movs	r5, #8
 801b6f6:	e029      	b.n	801b74c <_scanf_float+0x188>
 801b6f8:	2b74      	cmp	r3, #116	; 0x74
 801b6fa:	d06f      	beq.n	801b7dc <_scanf_float+0x218>
 801b6fc:	2b79      	cmp	r3, #121	; 0x79
 801b6fe:	e7f6      	b.n	801b6ee <_scanf_float+0x12a>
 801b700:	6821      	ldr	r1, [r4, #0]
 801b702:	05c8      	lsls	r0, r1, #23
 801b704:	d51a      	bpl.n	801b73c <_scanf_float+0x178>
 801b706:	9b02      	ldr	r3, [sp, #8]
 801b708:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b70c:	6021      	str	r1, [r4, #0]
 801b70e:	f109 0901 	add.w	r9, r9, #1
 801b712:	b11b      	cbz	r3, 801b71c <_scanf_float+0x158>
 801b714:	3b01      	subs	r3, #1
 801b716:	3201      	adds	r2, #1
 801b718:	9302      	str	r3, [sp, #8]
 801b71a:	60a2      	str	r2, [r4, #8]
 801b71c:	68a3      	ldr	r3, [r4, #8]
 801b71e:	3b01      	subs	r3, #1
 801b720:	60a3      	str	r3, [r4, #8]
 801b722:	6923      	ldr	r3, [r4, #16]
 801b724:	3301      	adds	r3, #1
 801b726:	6123      	str	r3, [r4, #16]
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	3b01      	subs	r3, #1
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	607b      	str	r3, [r7, #4]
 801b730:	f340 8084 	ble.w	801b83c <_scanf_float+0x278>
 801b734:	683b      	ldr	r3, [r7, #0]
 801b736:	3301      	adds	r3, #1
 801b738:	603b      	str	r3, [r7, #0]
 801b73a:	e766      	b.n	801b60a <_scanf_float+0x46>
 801b73c:	eb1a 0f05 	cmn.w	sl, r5
 801b740:	f47f af70 	bne.w	801b624 <_scanf_float+0x60>
 801b744:	6822      	ldr	r2, [r4, #0]
 801b746:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b74a:	6022      	str	r2, [r4, #0]
 801b74c:	f806 3b01 	strb.w	r3, [r6], #1
 801b750:	e7e4      	b.n	801b71c <_scanf_float+0x158>
 801b752:	6822      	ldr	r2, [r4, #0]
 801b754:	0610      	lsls	r0, r2, #24
 801b756:	f57f af65 	bpl.w	801b624 <_scanf_float+0x60>
 801b75a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b75e:	e7f4      	b.n	801b74a <_scanf_float+0x186>
 801b760:	f1ba 0f00 	cmp.w	sl, #0
 801b764:	d10e      	bne.n	801b784 <_scanf_float+0x1c0>
 801b766:	f1b9 0f00 	cmp.w	r9, #0
 801b76a:	d10e      	bne.n	801b78a <_scanf_float+0x1c6>
 801b76c:	6822      	ldr	r2, [r4, #0]
 801b76e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b772:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b776:	d108      	bne.n	801b78a <_scanf_float+0x1c6>
 801b778:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b77c:	6022      	str	r2, [r4, #0]
 801b77e:	f04f 0a01 	mov.w	sl, #1
 801b782:	e7e3      	b.n	801b74c <_scanf_float+0x188>
 801b784:	f1ba 0f02 	cmp.w	sl, #2
 801b788:	d055      	beq.n	801b836 <_scanf_float+0x272>
 801b78a:	2d01      	cmp	r5, #1
 801b78c:	d002      	beq.n	801b794 <_scanf_float+0x1d0>
 801b78e:	2d04      	cmp	r5, #4
 801b790:	f47f af48 	bne.w	801b624 <_scanf_float+0x60>
 801b794:	3501      	adds	r5, #1
 801b796:	b2ed      	uxtb	r5, r5
 801b798:	e7d8      	b.n	801b74c <_scanf_float+0x188>
 801b79a:	f1ba 0f01 	cmp.w	sl, #1
 801b79e:	f47f af41 	bne.w	801b624 <_scanf_float+0x60>
 801b7a2:	f04f 0a02 	mov.w	sl, #2
 801b7a6:	e7d1      	b.n	801b74c <_scanf_float+0x188>
 801b7a8:	b97d      	cbnz	r5, 801b7ca <_scanf_float+0x206>
 801b7aa:	f1b9 0f00 	cmp.w	r9, #0
 801b7ae:	f47f af3c 	bne.w	801b62a <_scanf_float+0x66>
 801b7b2:	6822      	ldr	r2, [r4, #0]
 801b7b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b7b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b7bc:	f47f af39 	bne.w	801b632 <_scanf_float+0x6e>
 801b7c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b7c4:	6022      	str	r2, [r4, #0]
 801b7c6:	2501      	movs	r5, #1
 801b7c8:	e7c0      	b.n	801b74c <_scanf_float+0x188>
 801b7ca:	2d03      	cmp	r5, #3
 801b7cc:	d0e2      	beq.n	801b794 <_scanf_float+0x1d0>
 801b7ce:	2d05      	cmp	r5, #5
 801b7d0:	e7de      	b.n	801b790 <_scanf_float+0x1cc>
 801b7d2:	2d02      	cmp	r5, #2
 801b7d4:	f47f af26 	bne.w	801b624 <_scanf_float+0x60>
 801b7d8:	2503      	movs	r5, #3
 801b7da:	e7b7      	b.n	801b74c <_scanf_float+0x188>
 801b7dc:	2d06      	cmp	r5, #6
 801b7de:	f47f af21 	bne.w	801b624 <_scanf_float+0x60>
 801b7e2:	2507      	movs	r5, #7
 801b7e4:	e7b2      	b.n	801b74c <_scanf_float+0x188>
 801b7e6:	6822      	ldr	r2, [r4, #0]
 801b7e8:	0591      	lsls	r1, r2, #22
 801b7ea:	f57f af1b 	bpl.w	801b624 <_scanf_float+0x60>
 801b7ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b7f2:	6022      	str	r2, [r4, #0]
 801b7f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b7f8:	e7a8      	b.n	801b74c <_scanf_float+0x188>
 801b7fa:	6822      	ldr	r2, [r4, #0]
 801b7fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b800:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b804:	d006      	beq.n	801b814 <_scanf_float+0x250>
 801b806:	0550      	lsls	r0, r2, #21
 801b808:	f57f af0c 	bpl.w	801b624 <_scanf_float+0x60>
 801b80c:	f1b9 0f00 	cmp.w	r9, #0
 801b810:	f43f af0f 	beq.w	801b632 <_scanf_float+0x6e>
 801b814:	0591      	lsls	r1, r2, #22
 801b816:	bf58      	it	pl
 801b818:	9901      	ldrpl	r1, [sp, #4]
 801b81a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b81e:	bf58      	it	pl
 801b820:	eba9 0101 	subpl.w	r1, r9, r1
 801b824:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b828:	bf58      	it	pl
 801b82a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b82e:	6022      	str	r2, [r4, #0]
 801b830:	f04f 0900 	mov.w	r9, #0
 801b834:	e78a      	b.n	801b74c <_scanf_float+0x188>
 801b836:	f04f 0a03 	mov.w	sl, #3
 801b83a:	e787      	b.n	801b74c <_scanf_float+0x188>
 801b83c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b840:	4639      	mov	r1, r7
 801b842:	4640      	mov	r0, r8
 801b844:	4798      	blx	r3
 801b846:	2800      	cmp	r0, #0
 801b848:	f43f aedf 	beq.w	801b60a <_scanf_float+0x46>
 801b84c:	e6ea      	b.n	801b624 <_scanf_float+0x60>
 801b84e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b856:	463a      	mov	r2, r7
 801b858:	4640      	mov	r0, r8
 801b85a:	4798      	blx	r3
 801b85c:	6923      	ldr	r3, [r4, #16]
 801b85e:	3b01      	subs	r3, #1
 801b860:	6123      	str	r3, [r4, #16]
 801b862:	e6ec      	b.n	801b63e <_scanf_float+0x7a>
 801b864:	1e6b      	subs	r3, r5, #1
 801b866:	2b06      	cmp	r3, #6
 801b868:	d825      	bhi.n	801b8b6 <_scanf_float+0x2f2>
 801b86a:	2d02      	cmp	r5, #2
 801b86c:	d836      	bhi.n	801b8dc <_scanf_float+0x318>
 801b86e:	455e      	cmp	r6, fp
 801b870:	f67f aee8 	bls.w	801b644 <_scanf_float+0x80>
 801b874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b878:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b87c:	463a      	mov	r2, r7
 801b87e:	4640      	mov	r0, r8
 801b880:	4798      	blx	r3
 801b882:	6923      	ldr	r3, [r4, #16]
 801b884:	3b01      	subs	r3, #1
 801b886:	6123      	str	r3, [r4, #16]
 801b888:	e7f1      	b.n	801b86e <_scanf_float+0x2aa>
 801b88a:	9802      	ldr	r0, [sp, #8]
 801b88c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b890:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b894:	9002      	str	r0, [sp, #8]
 801b896:	463a      	mov	r2, r7
 801b898:	4640      	mov	r0, r8
 801b89a:	4798      	blx	r3
 801b89c:	6923      	ldr	r3, [r4, #16]
 801b89e:	3b01      	subs	r3, #1
 801b8a0:	6123      	str	r3, [r4, #16]
 801b8a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b8a6:	fa5f fa8a 	uxtb.w	sl, sl
 801b8aa:	f1ba 0f02 	cmp.w	sl, #2
 801b8ae:	d1ec      	bne.n	801b88a <_scanf_float+0x2c6>
 801b8b0:	3d03      	subs	r5, #3
 801b8b2:	b2ed      	uxtb	r5, r5
 801b8b4:	1b76      	subs	r6, r6, r5
 801b8b6:	6823      	ldr	r3, [r4, #0]
 801b8b8:	05da      	lsls	r2, r3, #23
 801b8ba:	d52f      	bpl.n	801b91c <_scanf_float+0x358>
 801b8bc:	055b      	lsls	r3, r3, #21
 801b8be:	d510      	bpl.n	801b8e2 <_scanf_float+0x31e>
 801b8c0:	455e      	cmp	r6, fp
 801b8c2:	f67f aebf 	bls.w	801b644 <_scanf_float+0x80>
 801b8c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8ce:	463a      	mov	r2, r7
 801b8d0:	4640      	mov	r0, r8
 801b8d2:	4798      	blx	r3
 801b8d4:	6923      	ldr	r3, [r4, #16]
 801b8d6:	3b01      	subs	r3, #1
 801b8d8:	6123      	str	r3, [r4, #16]
 801b8da:	e7f1      	b.n	801b8c0 <_scanf_float+0x2fc>
 801b8dc:	46aa      	mov	sl, r5
 801b8de:	9602      	str	r6, [sp, #8]
 801b8e0:	e7df      	b.n	801b8a2 <_scanf_float+0x2de>
 801b8e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b8e6:	6923      	ldr	r3, [r4, #16]
 801b8e8:	2965      	cmp	r1, #101	; 0x65
 801b8ea:	f103 33ff 	add.w	r3, r3, #4294967295
 801b8ee:	f106 35ff 	add.w	r5, r6, #4294967295
 801b8f2:	6123      	str	r3, [r4, #16]
 801b8f4:	d00c      	beq.n	801b910 <_scanf_float+0x34c>
 801b8f6:	2945      	cmp	r1, #69	; 0x45
 801b8f8:	d00a      	beq.n	801b910 <_scanf_float+0x34c>
 801b8fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8fe:	463a      	mov	r2, r7
 801b900:	4640      	mov	r0, r8
 801b902:	4798      	blx	r3
 801b904:	6923      	ldr	r3, [r4, #16]
 801b906:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b90a:	3b01      	subs	r3, #1
 801b90c:	1eb5      	subs	r5, r6, #2
 801b90e:	6123      	str	r3, [r4, #16]
 801b910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b914:	463a      	mov	r2, r7
 801b916:	4640      	mov	r0, r8
 801b918:	4798      	blx	r3
 801b91a:	462e      	mov	r6, r5
 801b91c:	6825      	ldr	r5, [r4, #0]
 801b91e:	f015 0510 	ands.w	r5, r5, #16
 801b922:	d14e      	bne.n	801b9c2 <_scanf_float+0x3fe>
 801b924:	7035      	strb	r5, [r6, #0]
 801b926:	6823      	ldr	r3, [r4, #0]
 801b928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b92c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b930:	d119      	bne.n	801b966 <_scanf_float+0x3a2>
 801b932:	9b01      	ldr	r3, [sp, #4]
 801b934:	454b      	cmp	r3, r9
 801b936:	eba3 0209 	sub.w	r2, r3, r9
 801b93a:	d121      	bne.n	801b980 <_scanf_float+0x3bc>
 801b93c:	2200      	movs	r2, #0
 801b93e:	4659      	mov	r1, fp
 801b940:	4640      	mov	r0, r8
 801b942:	f000 fe87 	bl	801c654 <_strtod_r>
 801b946:	6822      	ldr	r2, [r4, #0]
 801b948:	9b03      	ldr	r3, [sp, #12]
 801b94a:	f012 0f02 	tst.w	r2, #2
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	d021      	beq.n	801b996 <_scanf_float+0x3d2>
 801b952:	9903      	ldr	r1, [sp, #12]
 801b954:	1d1a      	adds	r2, r3, #4
 801b956:	600a      	str	r2, [r1, #0]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	ed83 0b00 	vstr	d0, [r3]
 801b95e:	68e3      	ldr	r3, [r4, #12]
 801b960:	3301      	adds	r3, #1
 801b962:	60e3      	str	r3, [r4, #12]
 801b964:	e66f      	b.n	801b646 <_scanf_float+0x82>
 801b966:	9b04      	ldr	r3, [sp, #16]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d0e7      	beq.n	801b93c <_scanf_float+0x378>
 801b96c:	9905      	ldr	r1, [sp, #20]
 801b96e:	230a      	movs	r3, #10
 801b970:	462a      	mov	r2, r5
 801b972:	3101      	adds	r1, #1
 801b974:	4640      	mov	r0, r8
 801b976:	f000 fef5 	bl	801c764 <_strtol_r>
 801b97a:	9b04      	ldr	r3, [sp, #16]
 801b97c:	9e05      	ldr	r6, [sp, #20]
 801b97e:	1ac2      	subs	r2, r0, r3
 801b980:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b984:	429e      	cmp	r6, r3
 801b986:	bf28      	it	cs
 801b988:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b98c:	490e      	ldr	r1, [pc, #56]	; (801b9c8 <_scanf_float+0x404>)
 801b98e:	4630      	mov	r0, r6
 801b990:	f000 f824 	bl	801b9dc <siprintf>
 801b994:	e7d2      	b.n	801b93c <_scanf_float+0x378>
 801b996:	9903      	ldr	r1, [sp, #12]
 801b998:	f012 0f04 	tst.w	r2, #4
 801b99c:	f103 0204 	add.w	r2, r3, #4
 801b9a0:	600a      	str	r2, [r1, #0]
 801b9a2:	d1d9      	bne.n	801b958 <_scanf_float+0x394>
 801b9a4:	eeb4 0b40 	vcmp.f64	d0, d0
 801b9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ac:	681e      	ldr	r6, [r3, #0]
 801b9ae:	d705      	bvc.n	801b9bc <_scanf_float+0x3f8>
 801b9b0:	4806      	ldr	r0, [pc, #24]	; (801b9cc <_scanf_float+0x408>)
 801b9b2:	f000 f80d 	bl	801b9d0 <nanf>
 801b9b6:	ed86 0a00 	vstr	s0, [r6]
 801b9ba:	e7d0      	b.n	801b95e <_scanf_float+0x39a>
 801b9bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b9c0:	e7f9      	b.n	801b9b6 <_scanf_float+0x3f2>
 801b9c2:	2500      	movs	r5, #0
 801b9c4:	e63f      	b.n	801b646 <_scanf_float+0x82>
 801b9c6:	bf00      	nop
 801b9c8:	0801fbb0 	.word	0x0801fbb0
 801b9cc:	0801ffb8 	.word	0x0801ffb8

0801b9d0 <nanf>:
 801b9d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b9d8 <nanf+0x8>
 801b9d4:	4770      	bx	lr
 801b9d6:	bf00      	nop
 801b9d8:	7fc00000 	.word	0x7fc00000

0801b9dc <siprintf>:
 801b9dc:	b40e      	push	{r1, r2, r3}
 801b9de:	b500      	push	{lr}
 801b9e0:	b09c      	sub	sp, #112	; 0x70
 801b9e2:	ab1d      	add	r3, sp, #116	; 0x74
 801b9e4:	9002      	str	r0, [sp, #8]
 801b9e6:	9006      	str	r0, [sp, #24]
 801b9e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b9ec:	4809      	ldr	r0, [pc, #36]	; (801ba14 <siprintf+0x38>)
 801b9ee:	9107      	str	r1, [sp, #28]
 801b9f0:	9104      	str	r1, [sp, #16]
 801b9f2:	4909      	ldr	r1, [pc, #36]	; (801ba18 <siprintf+0x3c>)
 801b9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9f8:	9105      	str	r1, [sp, #20]
 801b9fa:	6800      	ldr	r0, [r0, #0]
 801b9fc:	9301      	str	r3, [sp, #4]
 801b9fe:	a902      	add	r1, sp, #8
 801ba00:	f002 fe80 	bl	801e704 <_svfiprintf_r>
 801ba04:	9b02      	ldr	r3, [sp, #8]
 801ba06:	2200      	movs	r2, #0
 801ba08:	701a      	strb	r2, [r3, #0]
 801ba0a:	b01c      	add	sp, #112	; 0x70
 801ba0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba10:	b003      	add	sp, #12
 801ba12:	4770      	bx	lr
 801ba14:	24000100 	.word	0x24000100
 801ba18:	ffff0208 	.word	0xffff0208

0801ba1c <__sread>:
 801ba1c:	b510      	push	{r4, lr}
 801ba1e:	460c      	mov	r4, r1
 801ba20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba24:	f002 ff6e 	bl	801e904 <_read_r>
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	bfab      	itete	ge
 801ba2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ba2e:	89a3      	ldrhlt	r3, [r4, #12]
 801ba30:	181b      	addge	r3, r3, r0
 801ba32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ba36:	bfac      	ite	ge
 801ba38:	6563      	strge	r3, [r4, #84]	; 0x54
 801ba3a:	81a3      	strhlt	r3, [r4, #12]
 801ba3c:	bd10      	pop	{r4, pc}

0801ba3e <__swrite>:
 801ba3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba42:	461f      	mov	r7, r3
 801ba44:	898b      	ldrh	r3, [r1, #12]
 801ba46:	05db      	lsls	r3, r3, #23
 801ba48:	4605      	mov	r5, r0
 801ba4a:	460c      	mov	r4, r1
 801ba4c:	4616      	mov	r6, r2
 801ba4e:	d505      	bpl.n	801ba5c <__swrite+0x1e>
 801ba50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba54:	2302      	movs	r3, #2
 801ba56:	2200      	movs	r2, #0
 801ba58:	f002 f818 	bl	801da8c <_lseek_r>
 801ba5c:	89a3      	ldrh	r3, [r4, #12]
 801ba5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ba66:	81a3      	strh	r3, [r4, #12]
 801ba68:	4632      	mov	r2, r6
 801ba6a:	463b      	mov	r3, r7
 801ba6c:	4628      	mov	r0, r5
 801ba6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba72:	f000 be79 	b.w	801c768 <_write_r>

0801ba76 <__sseek>:
 801ba76:	b510      	push	{r4, lr}
 801ba78:	460c      	mov	r4, r1
 801ba7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba7e:	f002 f805 	bl	801da8c <_lseek_r>
 801ba82:	1c43      	adds	r3, r0, #1
 801ba84:	89a3      	ldrh	r3, [r4, #12]
 801ba86:	bf15      	itete	ne
 801ba88:	6560      	strne	r0, [r4, #84]	; 0x54
 801ba8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ba8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ba92:	81a3      	strheq	r3, [r4, #12]
 801ba94:	bf18      	it	ne
 801ba96:	81a3      	strhne	r3, [r4, #12]
 801ba98:	bd10      	pop	{r4, pc}

0801ba9a <__sclose>:
 801ba9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba9e:	f000 be75 	b.w	801c78c <_close_r>

0801baa2 <strcpy>:
 801baa2:	4603      	mov	r3, r0
 801baa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801baa8:	f803 2b01 	strb.w	r2, [r3], #1
 801baac:	2a00      	cmp	r2, #0
 801baae:	d1f9      	bne.n	801baa4 <strcpy+0x2>
 801bab0:	4770      	bx	lr

0801bab2 <sulp>:
 801bab2:	b570      	push	{r4, r5, r6, lr}
 801bab4:	4604      	mov	r4, r0
 801bab6:	460d      	mov	r5, r1
 801bab8:	4616      	mov	r6, r2
 801baba:	ec45 4b10 	vmov	d0, r4, r5
 801babe:	f002 fb83 	bl	801e1c8 <__ulp>
 801bac2:	b17e      	cbz	r6, 801bae4 <sulp+0x32>
 801bac4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bac8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bacc:	2b00      	cmp	r3, #0
 801bace:	dd09      	ble.n	801bae4 <sulp+0x32>
 801bad0:	051b      	lsls	r3, r3, #20
 801bad2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801bad6:	2000      	movs	r0, #0
 801bad8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801badc:	ec41 0b17 	vmov	d7, r0, r1
 801bae0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bae4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bae8 <_strtod_l>:
 801bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baec:	ed2d 8b0e 	vpush	{d8-d14}
 801baf0:	b097      	sub	sp, #92	; 0x5c
 801baf2:	461f      	mov	r7, r3
 801baf4:	2300      	movs	r3, #0
 801baf6:	9312      	str	r3, [sp, #72]	; 0x48
 801baf8:	4ba1      	ldr	r3, [pc, #644]	; (801bd80 <_strtod_l+0x298>)
 801bafa:	920d      	str	r2, [sp, #52]	; 0x34
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	9307      	str	r3, [sp, #28]
 801bb00:	4604      	mov	r4, r0
 801bb02:	4618      	mov	r0, r3
 801bb04:	468b      	mov	fp, r1
 801bb06:	f7e4 fc0d 	bl	8000324 <strlen>
 801bb0a:	f04f 0800 	mov.w	r8, #0
 801bb0e:	4605      	mov	r5, r0
 801bb10:	f04f 0900 	mov.w	r9, #0
 801bb14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bb18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb1a:	7813      	ldrb	r3, [r2, #0]
 801bb1c:	2b2b      	cmp	r3, #43	; 0x2b
 801bb1e:	d04d      	beq.n	801bbbc <_strtod_l+0xd4>
 801bb20:	d83a      	bhi.n	801bb98 <_strtod_l+0xb0>
 801bb22:	2b0d      	cmp	r3, #13
 801bb24:	d833      	bhi.n	801bb8e <_strtod_l+0xa6>
 801bb26:	2b08      	cmp	r3, #8
 801bb28:	d833      	bhi.n	801bb92 <_strtod_l+0xaa>
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d03d      	beq.n	801bbaa <_strtod_l+0xc2>
 801bb2e:	2300      	movs	r3, #0
 801bb30:	9308      	str	r3, [sp, #32]
 801bb32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bb34:	7833      	ldrb	r3, [r6, #0]
 801bb36:	2b30      	cmp	r3, #48	; 0x30
 801bb38:	f040 80b0 	bne.w	801bc9c <_strtod_l+0x1b4>
 801bb3c:	7873      	ldrb	r3, [r6, #1]
 801bb3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bb42:	2b58      	cmp	r3, #88	; 0x58
 801bb44:	d167      	bne.n	801bc16 <_strtod_l+0x12e>
 801bb46:	9b08      	ldr	r3, [sp, #32]
 801bb48:	9301      	str	r3, [sp, #4]
 801bb4a:	ab12      	add	r3, sp, #72	; 0x48
 801bb4c:	9702      	str	r7, [sp, #8]
 801bb4e:	9300      	str	r3, [sp, #0]
 801bb50:	4a8c      	ldr	r2, [pc, #560]	; (801bd84 <_strtod_l+0x29c>)
 801bb52:	ab13      	add	r3, sp, #76	; 0x4c
 801bb54:	a911      	add	r1, sp, #68	; 0x44
 801bb56:	4620      	mov	r0, r4
 801bb58:	f001 fc8c 	bl	801d474 <__gethex>
 801bb5c:	f010 0507 	ands.w	r5, r0, #7
 801bb60:	4607      	mov	r7, r0
 801bb62:	d005      	beq.n	801bb70 <_strtod_l+0x88>
 801bb64:	2d06      	cmp	r5, #6
 801bb66:	d12b      	bne.n	801bbc0 <_strtod_l+0xd8>
 801bb68:	3601      	adds	r6, #1
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	9611      	str	r6, [sp, #68]	; 0x44
 801bb6e:	9308      	str	r3, [sp, #32]
 801bb70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	f040 854e 	bne.w	801c614 <_strtod_l+0xb2c>
 801bb78:	9b08      	ldr	r3, [sp, #32]
 801bb7a:	b1e3      	cbz	r3, 801bbb6 <_strtod_l+0xce>
 801bb7c:	ec49 8b17 	vmov	d7, r8, r9
 801bb80:	eeb1 0b47 	vneg.f64	d0, d7
 801bb84:	b017      	add	sp, #92	; 0x5c
 801bb86:	ecbd 8b0e 	vpop	{d8-d14}
 801bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb8e:	2b20      	cmp	r3, #32
 801bb90:	d1cd      	bne.n	801bb2e <_strtod_l+0x46>
 801bb92:	3201      	adds	r2, #1
 801bb94:	9211      	str	r2, [sp, #68]	; 0x44
 801bb96:	e7bf      	b.n	801bb18 <_strtod_l+0x30>
 801bb98:	2b2d      	cmp	r3, #45	; 0x2d
 801bb9a:	d1c8      	bne.n	801bb2e <_strtod_l+0x46>
 801bb9c:	2301      	movs	r3, #1
 801bb9e:	9308      	str	r3, [sp, #32]
 801bba0:	1c53      	adds	r3, r2, #1
 801bba2:	9311      	str	r3, [sp, #68]	; 0x44
 801bba4:	7853      	ldrb	r3, [r2, #1]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d1c3      	bne.n	801bb32 <_strtod_l+0x4a>
 801bbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	f040 852d 	bne.w	801c610 <_strtod_l+0xb28>
 801bbb6:	ec49 8b10 	vmov	d0, r8, r9
 801bbba:	e7e3      	b.n	801bb84 <_strtod_l+0x9c>
 801bbbc:	2300      	movs	r3, #0
 801bbbe:	e7ee      	b.n	801bb9e <_strtod_l+0xb6>
 801bbc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bbc2:	b13a      	cbz	r2, 801bbd4 <_strtod_l+0xec>
 801bbc4:	2135      	movs	r1, #53	; 0x35
 801bbc6:	a814      	add	r0, sp, #80	; 0x50
 801bbc8:	f002 fc06 	bl	801e3d8 <__copybits>
 801bbcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f001 ffc8 	bl	801db64 <_Bfree>
 801bbd4:	3d01      	subs	r5, #1
 801bbd6:	2d04      	cmp	r5, #4
 801bbd8:	d806      	bhi.n	801bbe8 <_strtod_l+0x100>
 801bbda:	e8df f005 	tbb	[pc, r5]
 801bbde:	030a      	.short	0x030a
 801bbe0:	1714      	.short	0x1714
 801bbe2:	0a          	.byte	0x0a
 801bbe3:	00          	.byte	0x00
 801bbe4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801bbe8:	073f      	lsls	r7, r7, #28
 801bbea:	d5c1      	bpl.n	801bb70 <_strtod_l+0x88>
 801bbec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801bbf0:	e7be      	b.n	801bb70 <_strtod_l+0x88>
 801bbf2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801bbf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bbfc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bc00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801bc04:	e7f0      	b.n	801bbe8 <_strtod_l+0x100>
 801bc06:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801bd88 <_strtod_l+0x2a0>
 801bc0a:	e7ed      	b.n	801bbe8 <_strtod_l+0x100>
 801bc0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801bc10:	f04f 38ff 	mov.w	r8, #4294967295
 801bc14:	e7e8      	b.n	801bbe8 <_strtod_l+0x100>
 801bc16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc18:	1c5a      	adds	r2, r3, #1
 801bc1a:	9211      	str	r2, [sp, #68]	; 0x44
 801bc1c:	785b      	ldrb	r3, [r3, #1]
 801bc1e:	2b30      	cmp	r3, #48	; 0x30
 801bc20:	d0f9      	beq.n	801bc16 <_strtod_l+0x12e>
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d0a4      	beq.n	801bb70 <_strtod_l+0x88>
 801bc26:	2301      	movs	r3, #1
 801bc28:	f04f 0a00 	mov.w	sl, #0
 801bc2c:	9304      	str	r3, [sp, #16]
 801bc2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc30:	930a      	str	r3, [sp, #40]	; 0x28
 801bc32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801bc36:	f8cd a018 	str.w	sl, [sp, #24]
 801bc3a:	220a      	movs	r2, #10
 801bc3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bc3e:	7807      	ldrb	r7, [r0, #0]
 801bc40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801bc44:	b2d9      	uxtb	r1, r3
 801bc46:	2909      	cmp	r1, #9
 801bc48:	d92a      	bls.n	801bca0 <_strtod_l+0x1b8>
 801bc4a:	9907      	ldr	r1, [sp, #28]
 801bc4c:	462a      	mov	r2, r5
 801bc4e:	f002 fe83 	bl	801e958 <strncmp>
 801bc52:	2800      	cmp	r0, #0
 801bc54:	d033      	beq.n	801bcbe <_strtod_l+0x1d6>
 801bc56:	2000      	movs	r0, #0
 801bc58:	9b06      	ldr	r3, [sp, #24]
 801bc5a:	463a      	mov	r2, r7
 801bc5c:	4601      	mov	r1, r0
 801bc5e:	4607      	mov	r7, r0
 801bc60:	2a65      	cmp	r2, #101	; 0x65
 801bc62:	d001      	beq.n	801bc68 <_strtod_l+0x180>
 801bc64:	2a45      	cmp	r2, #69	; 0x45
 801bc66:	d117      	bne.n	801bc98 <_strtod_l+0x1b0>
 801bc68:	b91b      	cbnz	r3, 801bc72 <_strtod_l+0x18a>
 801bc6a:	9b04      	ldr	r3, [sp, #16]
 801bc6c:	4303      	orrs	r3, r0
 801bc6e:	d09c      	beq.n	801bbaa <_strtod_l+0xc2>
 801bc70:	2300      	movs	r3, #0
 801bc72:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801bc76:	f10b 0201 	add.w	r2, fp, #1
 801bc7a:	9211      	str	r2, [sp, #68]	; 0x44
 801bc7c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801bc80:	2a2b      	cmp	r2, #43	; 0x2b
 801bc82:	d071      	beq.n	801bd68 <_strtod_l+0x280>
 801bc84:	2a2d      	cmp	r2, #45	; 0x2d
 801bc86:	d077      	beq.n	801bd78 <_strtod_l+0x290>
 801bc88:	f04f 0e00 	mov.w	lr, #0
 801bc8c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801bc90:	2d09      	cmp	r5, #9
 801bc92:	d97f      	bls.n	801bd94 <_strtod_l+0x2ac>
 801bc94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bc98:	2500      	movs	r5, #0
 801bc9a:	e09b      	b.n	801bdd4 <_strtod_l+0x2ec>
 801bc9c:	2300      	movs	r3, #0
 801bc9e:	e7c3      	b.n	801bc28 <_strtod_l+0x140>
 801bca0:	9906      	ldr	r1, [sp, #24]
 801bca2:	2908      	cmp	r1, #8
 801bca4:	bfdd      	ittte	le
 801bca6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bca8:	fb02 3301 	mlale	r3, r2, r1, r3
 801bcac:	9309      	strle	r3, [sp, #36]	; 0x24
 801bcae:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801bcb2:	9b06      	ldr	r3, [sp, #24]
 801bcb4:	3001      	adds	r0, #1
 801bcb6:	3301      	adds	r3, #1
 801bcb8:	9306      	str	r3, [sp, #24]
 801bcba:	9011      	str	r0, [sp, #68]	; 0x44
 801bcbc:	e7be      	b.n	801bc3c <_strtod_l+0x154>
 801bcbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcc0:	195a      	adds	r2, r3, r5
 801bcc2:	9211      	str	r2, [sp, #68]	; 0x44
 801bcc4:	5d5a      	ldrb	r2, [r3, r5]
 801bcc6:	9b06      	ldr	r3, [sp, #24]
 801bcc8:	b3a3      	cbz	r3, 801bd34 <_strtod_l+0x24c>
 801bcca:	4607      	mov	r7, r0
 801bccc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bcd0:	2909      	cmp	r1, #9
 801bcd2:	d912      	bls.n	801bcfa <_strtod_l+0x212>
 801bcd4:	2101      	movs	r1, #1
 801bcd6:	e7c3      	b.n	801bc60 <_strtod_l+0x178>
 801bcd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcda:	1c5a      	adds	r2, r3, #1
 801bcdc:	9211      	str	r2, [sp, #68]	; 0x44
 801bcde:	785a      	ldrb	r2, [r3, #1]
 801bce0:	3001      	adds	r0, #1
 801bce2:	2a30      	cmp	r2, #48	; 0x30
 801bce4:	d0f8      	beq.n	801bcd8 <_strtod_l+0x1f0>
 801bce6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bcea:	2b08      	cmp	r3, #8
 801bcec:	f200 8497 	bhi.w	801c61e <_strtod_l+0xb36>
 801bcf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcf2:	930a      	str	r3, [sp, #40]	; 0x28
 801bcf4:	4607      	mov	r7, r0
 801bcf6:	2000      	movs	r0, #0
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	3a30      	subs	r2, #48	; 0x30
 801bcfc:	f100 0101 	add.w	r1, r0, #1
 801bd00:	d012      	beq.n	801bd28 <_strtod_l+0x240>
 801bd02:	440f      	add	r7, r1
 801bd04:	eb00 0c03 	add.w	ip, r0, r3
 801bd08:	4619      	mov	r1, r3
 801bd0a:	250a      	movs	r5, #10
 801bd0c:	4561      	cmp	r1, ip
 801bd0e:	d113      	bne.n	801bd38 <_strtod_l+0x250>
 801bd10:	1819      	adds	r1, r3, r0
 801bd12:	2908      	cmp	r1, #8
 801bd14:	f103 0301 	add.w	r3, r3, #1
 801bd18:	4403      	add	r3, r0
 801bd1a:	dc1c      	bgt.n	801bd56 <_strtod_l+0x26e>
 801bd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd1e:	210a      	movs	r1, #10
 801bd20:	fb01 2200 	mla	r2, r1, r0, r2
 801bd24:	9209      	str	r2, [sp, #36]	; 0x24
 801bd26:	2100      	movs	r1, #0
 801bd28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd2a:	1c50      	adds	r0, r2, #1
 801bd2c:	9011      	str	r0, [sp, #68]	; 0x44
 801bd2e:	7852      	ldrb	r2, [r2, #1]
 801bd30:	4608      	mov	r0, r1
 801bd32:	e7cb      	b.n	801bccc <_strtod_l+0x1e4>
 801bd34:	9806      	ldr	r0, [sp, #24]
 801bd36:	e7d4      	b.n	801bce2 <_strtod_l+0x1fa>
 801bd38:	2908      	cmp	r1, #8
 801bd3a:	dc04      	bgt.n	801bd46 <_strtod_l+0x25e>
 801bd3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bd3e:	436e      	muls	r6, r5
 801bd40:	9609      	str	r6, [sp, #36]	; 0x24
 801bd42:	3101      	adds	r1, #1
 801bd44:	e7e2      	b.n	801bd0c <_strtod_l+0x224>
 801bd46:	f101 0e01 	add.w	lr, r1, #1
 801bd4a:	f1be 0f10 	cmp.w	lr, #16
 801bd4e:	bfd8      	it	le
 801bd50:	fb05 fa0a 	mulle.w	sl, r5, sl
 801bd54:	e7f5      	b.n	801bd42 <_strtod_l+0x25a>
 801bd56:	2b10      	cmp	r3, #16
 801bd58:	bfdc      	itt	le
 801bd5a:	210a      	movle	r1, #10
 801bd5c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 801bd60:	e7e1      	b.n	801bd26 <_strtod_l+0x23e>
 801bd62:	2700      	movs	r7, #0
 801bd64:	2101      	movs	r1, #1
 801bd66:	e780      	b.n	801bc6a <_strtod_l+0x182>
 801bd68:	f04f 0e00 	mov.w	lr, #0
 801bd6c:	f10b 0202 	add.w	r2, fp, #2
 801bd70:	9211      	str	r2, [sp, #68]	; 0x44
 801bd72:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801bd76:	e789      	b.n	801bc8c <_strtod_l+0x1a4>
 801bd78:	f04f 0e01 	mov.w	lr, #1
 801bd7c:	e7f6      	b.n	801bd6c <_strtod_l+0x284>
 801bd7e:	bf00      	nop
 801bd80:	0801fe00 	.word	0x0801fe00
 801bd84:	0801fbb8 	.word	0x0801fbb8
 801bd88:	7ff00000 	.word	0x7ff00000
 801bd8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd8e:	1c55      	adds	r5, r2, #1
 801bd90:	9511      	str	r5, [sp, #68]	; 0x44
 801bd92:	7852      	ldrb	r2, [r2, #1]
 801bd94:	2a30      	cmp	r2, #48	; 0x30
 801bd96:	d0f9      	beq.n	801bd8c <_strtod_l+0x2a4>
 801bd98:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801bd9c:	2d08      	cmp	r5, #8
 801bd9e:	f63f af7b 	bhi.w	801bc98 <_strtod_l+0x1b0>
 801bda2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801bda6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bda8:	9207      	str	r2, [sp, #28]
 801bdaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bdac:	1c55      	adds	r5, r2, #1
 801bdae:	9511      	str	r5, [sp, #68]	; 0x44
 801bdb0:	7852      	ldrb	r2, [r2, #1]
 801bdb2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801bdb6:	2e09      	cmp	r6, #9
 801bdb8:	d937      	bls.n	801be2a <_strtod_l+0x342>
 801bdba:	9e07      	ldr	r6, [sp, #28]
 801bdbc:	1bad      	subs	r5, r5, r6
 801bdbe:	2d08      	cmp	r5, #8
 801bdc0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801bdc4:	dc02      	bgt.n	801bdcc <_strtod_l+0x2e4>
 801bdc6:	4565      	cmp	r5, ip
 801bdc8:	bfa8      	it	ge
 801bdca:	4665      	movge	r5, ip
 801bdcc:	f1be 0f00 	cmp.w	lr, #0
 801bdd0:	d000      	beq.n	801bdd4 <_strtod_l+0x2ec>
 801bdd2:	426d      	negs	r5, r5
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d14d      	bne.n	801be74 <_strtod_l+0x38c>
 801bdd8:	9b04      	ldr	r3, [sp, #16]
 801bdda:	4303      	orrs	r3, r0
 801bddc:	f47f aec8 	bne.w	801bb70 <_strtod_l+0x88>
 801bde0:	2900      	cmp	r1, #0
 801bde2:	f47f aee2 	bne.w	801bbaa <_strtod_l+0xc2>
 801bde6:	2a69      	cmp	r2, #105	; 0x69
 801bde8:	d027      	beq.n	801be3a <_strtod_l+0x352>
 801bdea:	dc24      	bgt.n	801be36 <_strtod_l+0x34e>
 801bdec:	2a49      	cmp	r2, #73	; 0x49
 801bdee:	d024      	beq.n	801be3a <_strtod_l+0x352>
 801bdf0:	2a4e      	cmp	r2, #78	; 0x4e
 801bdf2:	f47f aeda 	bne.w	801bbaa <_strtod_l+0xc2>
 801bdf6:	4996      	ldr	r1, [pc, #600]	; (801c050 <_strtod_l+0x568>)
 801bdf8:	a811      	add	r0, sp, #68	; 0x44
 801bdfa:	f001 fd93 	bl	801d924 <__match>
 801bdfe:	2800      	cmp	r0, #0
 801be00:	f43f aed3 	beq.w	801bbaa <_strtod_l+0xc2>
 801be04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be06:	781b      	ldrb	r3, [r3, #0]
 801be08:	2b28      	cmp	r3, #40	; 0x28
 801be0a:	d12d      	bne.n	801be68 <_strtod_l+0x380>
 801be0c:	4991      	ldr	r1, [pc, #580]	; (801c054 <_strtod_l+0x56c>)
 801be0e:	aa14      	add	r2, sp, #80	; 0x50
 801be10:	a811      	add	r0, sp, #68	; 0x44
 801be12:	f001 fd9b 	bl	801d94c <__hexnan>
 801be16:	2805      	cmp	r0, #5
 801be18:	d126      	bne.n	801be68 <_strtod_l+0x380>
 801be1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801be1c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801be20:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801be24:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801be28:	e6a2      	b.n	801bb70 <_strtod_l+0x88>
 801be2a:	250a      	movs	r5, #10
 801be2c:	fb05 250c 	mla	r5, r5, ip, r2
 801be30:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801be34:	e7b9      	b.n	801bdaa <_strtod_l+0x2c2>
 801be36:	2a6e      	cmp	r2, #110	; 0x6e
 801be38:	e7db      	b.n	801bdf2 <_strtod_l+0x30a>
 801be3a:	4987      	ldr	r1, [pc, #540]	; (801c058 <_strtod_l+0x570>)
 801be3c:	a811      	add	r0, sp, #68	; 0x44
 801be3e:	f001 fd71 	bl	801d924 <__match>
 801be42:	2800      	cmp	r0, #0
 801be44:	f43f aeb1 	beq.w	801bbaa <_strtod_l+0xc2>
 801be48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be4a:	4984      	ldr	r1, [pc, #528]	; (801c05c <_strtod_l+0x574>)
 801be4c:	3b01      	subs	r3, #1
 801be4e:	a811      	add	r0, sp, #68	; 0x44
 801be50:	9311      	str	r3, [sp, #68]	; 0x44
 801be52:	f001 fd67 	bl	801d924 <__match>
 801be56:	b910      	cbnz	r0, 801be5e <_strtod_l+0x376>
 801be58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be5a:	3301      	adds	r3, #1
 801be5c:	9311      	str	r3, [sp, #68]	; 0x44
 801be5e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801c070 <_strtod_l+0x588>
 801be62:	f04f 0800 	mov.w	r8, #0
 801be66:	e683      	b.n	801bb70 <_strtod_l+0x88>
 801be68:	487d      	ldr	r0, [pc, #500]	; (801c060 <_strtod_l+0x578>)
 801be6a:	f002 fd5d 	bl	801e928 <nan>
 801be6e:	ec59 8b10 	vmov	r8, r9, d0
 801be72:	e67d      	b.n	801bb70 <_strtod_l+0x88>
 801be74:	1bea      	subs	r2, r5, r7
 801be76:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801be7a:	9207      	str	r2, [sp, #28]
 801be7c:	9a06      	ldr	r2, [sp, #24]
 801be7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801be82:	2a00      	cmp	r2, #0
 801be84:	bf08      	it	eq
 801be86:	461a      	moveq	r2, r3
 801be88:	2b10      	cmp	r3, #16
 801be8a:	9206      	str	r2, [sp, #24]
 801be8c:	461a      	mov	r2, r3
 801be8e:	bfa8      	it	ge
 801be90:	2210      	movge	r2, #16
 801be92:	2b09      	cmp	r3, #9
 801be94:	ec59 8b17 	vmov	r8, r9, d7
 801be98:	dd0c      	ble.n	801beb4 <_strtod_l+0x3cc>
 801be9a:	4972      	ldr	r1, [pc, #456]	; (801c064 <_strtod_l+0x57c>)
 801be9c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801bea0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801bea4:	ee06 aa90 	vmov	s13, sl
 801bea8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801beac:	eea7 6b05 	vfma.f64	d6, d7, d5
 801beb0:	ec59 8b16 	vmov	r8, r9, d6
 801beb4:	2b0f      	cmp	r3, #15
 801beb6:	dc36      	bgt.n	801bf26 <_strtod_l+0x43e>
 801beb8:	9907      	ldr	r1, [sp, #28]
 801beba:	2900      	cmp	r1, #0
 801bebc:	f43f ae58 	beq.w	801bb70 <_strtod_l+0x88>
 801bec0:	dd23      	ble.n	801bf0a <_strtod_l+0x422>
 801bec2:	2916      	cmp	r1, #22
 801bec4:	dc0b      	bgt.n	801bede <_strtod_l+0x3f6>
 801bec6:	4b67      	ldr	r3, [pc, #412]	; (801c064 <_strtod_l+0x57c>)
 801bec8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801becc:	ed93 7b00 	vldr	d7, [r3]
 801bed0:	ec49 8b16 	vmov	d6, r8, r9
 801bed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bed8:	ec59 8b17 	vmov	r8, r9, d7
 801bedc:	e648      	b.n	801bb70 <_strtod_l+0x88>
 801bede:	9807      	ldr	r0, [sp, #28]
 801bee0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801bee4:	4281      	cmp	r1, r0
 801bee6:	db1e      	blt.n	801bf26 <_strtod_l+0x43e>
 801bee8:	4a5e      	ldr	r2, [pc, #376]	; (801c064 <_strtod_l+0x57c>)
 801beea:	f1c3 030f 	rsb	r3, r3, #15
 801beee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801bef2:	ed91 7b00 	vldr	d7, [r1]
 801bef6:	ec49 8b16 	vmov	d6, r8, r9
 801befa:	1ac3      	subs	r3, r0, r3
 801befc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801bf00:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf04:	ed92 6b00 	vldr	d6, [r2]
 801bf08:	e7e4      	b.n	801bed4 <_strtod_l+0x3ec>
 801bf0a:	9907      	ldr	r1, [sp, #28]
 801bf0c:	3116      	adds	r1, #22
 801bf0e:	db0a      	blt.n	801bf26 <_strtod_l+0x43e>
 801bf10:	4b54      	ldr	r3, [pc, #336]	; (801c064 <_strtod_l+0x57c>)
 801bf12:	1b7d      	subs	r5, r7, r5
 801bf14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801bf18:	ed95 7b00 	vldr	d7, [r5]
 801bf1c:	ec49 8b16 	vmov	d6, r8, r9
 801bf20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bf24:	e7d8      	b.n	801bed8 <_strtod_l+0x3f0>
 801bf26:	9907      	ldr	r1, [sp, #28]
 801bf28:	1a9a      	subs	r2, r3, r2
 801bf2a:	440a      	add	r2, r1
 801bf2c:	2a00      	cmp	r2, #0
 801bf2e:	dd6f      	ble.n	801c010 <_strtod_l+0x528>
 801bf30:	f012 000f 	ands.w	r0, r2, #15
 801bf34:	d00a      	beq.n	801bf4c <_strtod_l+0x464>
 801bf36:	494b      	ldr	r1, [pc, #300]	; (801c064 <_strtod_l+0x57c>)
 801bf38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bf3c:	ed91 7b00 	vldr	d7, [r1]
 801bf40:	ec49 8b16 	vmov	d6, r8, r9
 801bf44:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf48:	ec59 8b17 	vmov	r8, r9, d7
 801bf4c:	f032 020f 	bics.w	r2, r2, #15
 801bf50:	d04f      	beq.n	801bff2 <_strtod_l+0x50a>
 801bf52:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801bf56:	dd22      	ble.n	801bf9e <_strtod_l+0x4b6>
 801bf58:	2500      	movs	r5, #0
 801bf5a:	462e      	mov	r6, r5
 801bf5c:	9506      	str	r5, [sp, #24]
 801bf5e:	462f      	mov	r7, r5
 801bf60:	2322      	movs	r3, #34	; 0x22
 801bf62:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801c070 <_strtod_l+0x588>
 801bf66:	6023      	str	r3, [r4, #0]
 801bf68:	f04f 0800 	mov.w	r8, #0
 801bf6c:	9b06      	ldr	r3, [sp, #24]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	f43f adfe 	beq.w	801bb70 <_strtod_l+0x88>
 801bf74:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf76:	4620      	mov	r0, r4
 801bf78:	f001 fdf4 	bl	801db64 <_Bfree>
 801bf7c:	4639      	mov	r1, r7
 801bf7e:	4620      	mov	r0, r4
 801bf80:	f001 fdf0 	bl	801db64 <_Bfree>
 801bf84:	4631      	mov	r1, r6
 801bf86:	4620      	mov	r0, r4
 801bf88:	f001 fdec 	bl	801db64 <_Bfree>
 801bf8c:	9906      	ldr	r1, [sp, #24]
 801bf8e:	4620      	mov	r0, r4
 801bf90:	f001 fde8 	bl	801db64 <_Bfree>
 801bf94:	4629      	mov	r1, r5
 801bf96:	4620      	mov	r0, r4
 801bf98:	f001 fde4 	bl	801db64 <_Bfree>
 801bf9c:	e5e8      	b.n	801bb70 <_strtod_l+0x88>
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	ec49 8b17 	vmov	d7, r8, r9
 801bfa4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801c068 <_strtod_l+0x580>
 801bfa8:	1112      	asrs	r2, r2, #4
 801bfaa:	4601      	mov	r1, r0
 801bfac:	2a01      	cmp	r2, #1
 801bfae:	dc23      	bgt.n	801bff8 <_strtod_l+0x510>
 801bfb0:	b108      	cbz	r0, 801bfb6 <_strtod_l+0x4ce>
 801bfb2:	ec59 8b17 	vmov	r8, r9, d7
 801bfb6:	4a2c      	ldr	r2, [pc, #176]	; (801c068 <_strtod_l+0x580>)
 801bfb8:	482c      	ldr	r0, [pc, #176]	; (801c06c <_strtod_l+0x584>)
 801bfba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801bfbe:	ed92 7b00 	vldr	d7, [r2]
 801bfc2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801bfc6:	ec49 8b16 	vmov	d6, r8, r9
 801bfca:	4a29      	ldr	r2, [pc, #164]	; (801c070 <_strtod_l+0x588>)
 801bfcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bfd0:	ee17 1a90 	vmov	r1, s15
 801bfd4:	400a      	ands	r2, r1
 801bfd6:	4282      	cmp	r2, r0
 801bfd8:	ec59 8b17 	vmov	r8, r9, d7
 801bfdc:	d8bc      	bhi.n	801bf58 <_strtod_l+0x470>
 801bfde:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801bfe2:	4282      	cmp	r2, r0
 801bfe4:	bf86      	itte	hi
 801bfe6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801c074 <_strtod_l+0x58c>
 801bfea:	f04f 38ff 	movhi.w	r8, #4294967295
 801bfee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801bff2:	2200      	movs	r2, #0
 801bff4:	9204      	str	r2, [sp, #16]
 801bff6:	e078      	b.n	801c0ea <_strtod_l+0x602>
 801bff8:	07d6      	lsls	r6, r2, #31
 801bffa:	d504      	bpl.n	801c006 <_strtod_l+0x51e>
 801bffc:	ed9c 6b00 	vldr	d6, [ip]
 801c000:	2001      	movs	r0, #1
 801c002:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c006:	3101      	adds	r1, #1
 801c008:	1052      	asrs	r2, r2, #1
 801c00a:	f10c 0c08 	add.w	ip, ip, #8
 801c00e:	e7cd      	b.n	801bfac <_strtod_l+0x4c4>
 801c010:	d0ef      	beq.n	801bff2 <_strtod_l+0x50a>
 801c012:	4252      	negs	r2, r2
 801c014:	f012 000f 	ands.w	r0, r2, #15
 801c018:	d00a      	beq.n	801c030 <_strtod_l+0x548>
 801c01a:	4912      	ldr	r1, [pc, #72]	; (801c064 <_strtod_l+0x57c>)
 801c01c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c020:	ed91 7b00 	vldr	d7, [r1]
 801c024:	ec49 8b16 	vmov	d6, r8, r9
 801c028:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c02c:	ec59 8b17 	vmov	r8, r9, d7
 801c030:	1112      	asrs	r2, r2, #4
 801c032:	d0de      	beq.n	801bff2 <_strtod_l+0x50a>
 801c034:	2a1f      	cmp	r2, #31
 801c036:	dd1f      	ble.n	801c078 <_strtod_l+0x590>
 801c038:	2500      	movs	r5, #0
 801c03a:	462e      	mov	r6, r5
 801c03c:	9506      	str	r5, [sp, #24]
 801c03e:	462f      	mov	r7, r5
 801c040:	2322      	movs	r3, #34	; 0x22
 801c042:	f04f 0800 	mov.w	r8, #0
 801c046:	f04f 0900 	mov.w	r9, #0
 801c04a:	6023      	str	r3, [r4, #0]
 801c04c:	e78e      	b.n	801bf6c <_strtod_l+0x484>
 801c04e:	bf00      	nop
 801c050:	0801fb89 	.word	0x0801fb89
 801c054:	0801fbcc 	.word	0x0801fbcc
 801c058:	0801fb81 	.word	0x0801fb81
 801c05c:	0801fd0c 	.word	0x0801fd0c
 801c060:	0801ffb8 	.word	0x0801ffb8
 801c064:	0801fe98 	.word	0x0801fe98
 801c068:	0801fe70 	.word	0x0801fe70
 801c06c:	7ca00000 	.word	0x7ca00000
 801c070:	7ff00000 	.word	0x7ff00000
 801c074:	7fefffff 	.word	0x7fefffff
 801c078:	f012 0110 	ands.w	r1, r2, #16
 801c07c:	bf18      	it	ne
 801c07e:	216a      	movne	r1, #106	; 0x6a
 801c080:	9104      	str	r1, [sp, #16]
 801c082:	ec49 8b17 	vmov	d7, r8, r9
 801c086:	49be      	ldr	r1, [pc, #760]	; (801c380 <_strtod_l+0x898>)
 801c088:	2000      	movs	r0, #0
 801c08a:	07d6      	lsls	r6, r2, #31
 801c08c:	d504      	bpl.n	801c098 <_strtod_l+0x5b0>
 801c08e:	ed91 6b00 	vldr	d6, [r1]
 801c092:	2001      	movs	r0, #1
 801c094:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c098:	1052      	asrs	r2, r2, #1
 801c09a:	f101 0108 	add.w	r1, r1, #8
 801c09e:	d1f4      	bne.n	801c08a <_strtod_l+0x5a2>
 801c0a0:	b108      	cbz	r0, 801c0a6 <_strtod_l+0x5be>
 801c0a2:	ec59 8b17 	vmov	r8, r9, d7
 801c0a6:	9a04      	ldr	r2, [sp, #16]
 801c0a8:	b1c2      	cbz	r2, 801c0dc <_strtod_l+0x5f4>
 801c0aa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801c0ae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801c0b2:	2a00      	cmp	r2, #0
 801c0b4:	4648      	mov	r0, r9
 801c0b6:	dd11      	ble.n	801c0dc <_strtod_l+0x5f4>
 801c0b8:	2a1f      	cmp	r2, #31
 801c0ba:	f340 812e 	ble.w	801c31a <_strtod_l+0x832>
 801c0be:	2a34      	cmp	r2, #52	; 0x34
 801c0c0:	bfde      	ittt	le
 801c0c2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801c0c6:	f04f 32ff 	movle.w	r2, #4294967295
 801c0ca:	fa02 f101 	lslle.w	r1, r2, r1
 801c0ce:	f04f 0800 	mov.w	r8, #0
 801c0d2:	bfcc      	ite	gt
 801c0d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c0d8:	ea01 0900 	andle.w	r9, r1, r0
 801c0dc:	ec49 8b17 	vmov	d7, r8, r9
 801c0e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0e8:	d0a6      	beq.n	801c038 <_strtod_l+0x550>
 801c0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0ec:	9200      	str	r2, [sp, #0]
 801c0ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c0f0:	9a06      	ldr	r2, [sp, #24]
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	f001 fd9e 	bl	801dc34 <__s2b>
 801c0f8:	9006      	str	r0, [sp, #24]
 801c0fa:	2800      	cmp	r0, #0
 801c0fc:	f43f af2c 	beq.w	801bf58 <_strtod_l+0x470>
 801c100:	9b07      	ldr	r3, [sp, #28]
 801c102:	1b7d      	subs	r5, r7, r5
 801c104:	2b00      	cmp	r3, #0
 801c106:	bfb4      	ite	lt
 801c108:	462b      	movlt	r3, r5
 801c10a:	2300      	movge	r3, #0
 801c10c:	9309      	str	r3, [sp, #36]	; 0x24
 801c10e:	9b07      	ldr	r3, [sp, #28]
 801c110:	ed9f 9b93 	vldr	d9, [pc, #588]	; 801c360 <_strtod_l+0x878>
 801c114:	ed9f ab94 	vldr	d10, [pc, #592]	; 801c368 <_strtod_l+0x880>
 801c118:	ed9f bb95 	vldr	d11, [pc, #596]	; 801c370 <_strtod_l+0x888>
 801c11c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c120:	2500      	movs	r5, #0
 801c122:	930c      	str	r3, [sp, #48]	; 0x30
 801c124:	462e      	mov	r6, r5
 801c126:	9b06      	ldr	r3, [sp, #24]
 801c128:	4620      	mov	r0, r4
 801c12a:	6859      	ldr	r1, [r3, #4]
 801c12c:	f001 fcda 	bl	801dae4 <_Balloc>
 801c130:	4607      	mov	r7, r0
 801c132:	2800      	cmp	r0, #0
 801c134:	f43f af14 	beq.w	801bf60 <_strtod_l+0x478>
 801c138:	9b06      	ldr	r3, [sp, #24]
 801c13a:	691a      	ldr	r2, [r3, #16]
 801c13c:	3202      	adds	r2, #2
 801c13e:	f103 010c 	add.w	r1, r3, #12
 801c142:	0092      	lsls	r2, r2, #2
 801c144:	300c      	adds	r0, #12
 801c146:	f7fe fde5 	bl	801ad14 <memcpy>
 801c14a:	ec49 8b10 	vmov	d0, r8, r9
 801c14e:	aa14      	add	r2, sp, #80	; 0x50
 801c150:	a913      	add	r1, sp, #76	; 0x4c
 801c152:	4620      	mov	r0, r4
 801c154:	f002 f8b4 	bl	801e2c0 <__d2b>
 801c158:	ec49 8b18 	vmov	d8, r8, r9
 801c15c:	9012      	str	r0, [sp, #72]	; 0x48
 801c15e:	2800      	cmp	r0, #0
 801c160:	f43f aefe 	beq.w	801bf60 <_strtod_l+0x478>
 801c164:	2101      	movs	r1, #1
 801c166:	4620      	mov	r0, r4
 801c168:	f001 fdfe 	bl	801dd68 <__i2b>
 801c16c:	4606      	mov	r6, r0
 801c16e:	2800      	cmp	r0, #0
 801c170:	f43f aef6 	beq.w	801bf60 <_strtod_l+0x478>
 801c174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c176:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c178:	2b00      	cmp	r3, #0
 801c17a:	bfab      	itete	ge
 801c17c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801c17e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801c180:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801c184:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801c188:	bfac      	ite	ge
 801c18a:	eb03 0b02 	addge.w	fp, r3, r2
 801c18e:	eba2 0a03 	sublt.w	sl, r2, r3
 801c192:	9a04      	ldr	r2, [sp, #16]
 801c194:	1a9b      	subs	r3, r3, r2
 801c196:	440b      	add	r3, r1
 801c198:	4a7a      	ldr	r2, [pc, #488]	; (801c384 <_strtod_l+0x89c>)
 801c19a:	3b01      	subs	r3, #1
 801c19c:	4293      	cmp	r3, r2
 801c19e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c1a2:	f280 80cd 	bge.w	801c340 <_strtod_l+0x858>
 801c1a6:	1ad2      	subs	r2, r2, r3
 801c1a8:	2a1f      	cmp	r2, #31
 801c1aa:	eba1 0102 	sub.w	r1, r1, r2
 801c1ae:	f04f 0001 	mov.w	r0, #1
 801c1b2:	f300 80b9 	bgt.w	801c328 <_strtod_l+0x840>
 801c1b6:	fa00 f302 	lsl.w	r3, r0, r2
 801c1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801c1bc:	2300      	movs	r3, #0
 801c1be:	930a      	str	r3, [sp, #40]	; 0x28
 801c1c0:	eb0b 0301 	add.w	r3, fp, r1
 801c1c4:	9a04      	ldr	r2, [sp, #16]
 801c1c6:	459b      	cmp	fp, r3
 801c1c8:	448a      	add	sl, r1
 801c1ca:	4492      	add	sl, r2
 801c1cc:	465a      	mov	r2, fp
 801c1ce:	bfa8      	it	ge
 801c1d0:	461a      	movge	r2, r3
 801c1d2:	4552      	cmp	r2, sl
 801c1d4:	bfa8      	it	ge
 801c1d6:	4652      	movge	r2, sl
 801c1d8:	2a00      	cmp	r2, #0
 801c1da:	bfc2      	ittt	gt
 801c1dc:	1a9b      	subgt	r3, r3, r2
 801c1de:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c1e2:	ebab 0b02 	subgt.w	fp, fp, r2
 801c1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1e8:	2a00      	cmp	r2, #0
 801c1ea:	dd18      	ble.n	801c21e <_strtod_l+0x736>
 801c1ec:	4631      	mov	r1, r6
 801c1ee:	4620      	mov	r0, r4
 801c1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1f2:	f001 fe79 	bl	801dee8 <__pow5mult>
 801c1f6:	4606      	mov	r6, r0
 801c1f8:	2800      	cmp	r0, #0
 801c1fa:	f43f aeb1 	beq.w	801bf60 <_strtod_l+0x478>
 801c1fe:	4601      	mov	r1, r0
 801c200:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c202:	4620      	mov	r0, r4
 801c204:	f001 fdc6 	bl	801dd94 <__multiply>
 801c208:	900e      	str	r0, [sp, #56]	; 0x38
 801c20a:	2800      	cmp	r0, #0
 801c20c:	f43f aea8 	beq.w	801bf60 <_strtod_l+0x478>
 801c210:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c212:	4620      	mov	r0, r4
 801c214:	f001 fca6 	bl	801db64 <_Bfree>
 801c218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c21c:	9212      	str	r2, [sp, #72]	; 0x48
 801c21e:	2b00      	cmp	r3, #0
 801c220:	f300 8093 	bgt.w	801c34a <_strtod_l+0x862>
 801c224:	9b07      	ldr	r3, [sp, #28]
 801c226:	2b00      	cmp	r3, #0
 801c228:	dd08      	ble.n	801c23c <_strtod_l+0x754>
 801c22a:	4639      	mov	r1, r7
 801c22c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c22e:	4620      	mov	r0, r4
 801c230:	f001 fe5a 	bl	801dee8 <__pow5mult>
 801c234:	4607      	mov	r7, r0
 801c236:	2800      	cmp	r0, #0
 801c238:	f43f ae92 	beq.w	801bf60 <_strtod_l+0x478>
 801c23c:	f1ba 0f00 	cmp.w	sl, #0
 801c240:	dd08      	ble.n	801c254 <_strtod_l+0x76c>
 801c242:	4639      	mov	r1, r7
 801c244:	4652      	mov	r2, sl
 801c246:	4620      	mov	r0, r4
 801c248:	f001 fea8 	bl	801df9c <__lshift>
 801c24c:	4607      	mov	r7, r0
 801c24e:	2800      	cmp	r0, #0
 801c250:	f43f ae86 	beq.w	801bf60 <_strtod_l+0x478>
 801c254:	f1bb 0f00 	cmp.w	fp, #0
 801c258:	dd08      	ble.n	801c26c <_strtod_l+0x784>
 801c25a:	4631      	mov	r1, r6
 801c25c:	465a      	mov	r2, fp
 801c25e:	4620      	mov	r0, r4
 801c260:	f001 fe9c 	bl	801df9c <__lshift>
 801c264:	4606      	mov	r6, r0
 801c266:	2800      	cmp	r0, #0
 801c268:	f43f ae7a 	beq.w	801bf60 <_strtod_l+0x478>
 801c26c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c26e:	463a      	mov	r2, r7
 801c270:	4620      	mov	r0, r4
 801c272:	f001 ff1f 	bl	801e0b4 <__mdiff>
 801c276:	4605      	mov	r5, r0
 801c278:	2800      	cmp	r0, #0
 801c27a:	f43f ae71 	beq.w	801bf60 <_strtod_l+0x478>
 801c27e:	2300      	movs	r3, #0
 801c280:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c284:	60c3      	str	r3, [r0, #12]
 801c286:	4631      	mov	r1, r6
 801c288:	f001 fef8 	bl	801e07c <__mcmp>
 801c28c:	2800      	cmp	r0, #0
 801c28e:	da7d      	bge.n	801c38c <_strtod_l+0x8a4>
 801c290:	ea5a 0308 	orrs.w	r3, sl, r8
 801c294:	f040 80a3 	bne.w	801c3de <_strtod_l+0x8f6>
 801c298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	f040 809e 	bne.w	801c3de <_strtod_l+0x8f6>
 801c2a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c2a6:	0d1b      	lsrs	r3, r3, #20
 801c2a8:	051b      	lsls	r3, r3, #20
 801c2aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c2ae:	f240 8096 	bls.w	801c3de <_strtod_l+0x8f6>
 801c2b2:	696b      	ldr	r3, [r5, #20]
 801c2b4:	b91b      	cbnz	r3, 801c2be <_strtod_l+0x7d6>
 801c2b6:	692b      	ldr	r3, [r5, #16]
 801c2b8:	2b01      	cmp	r3, #1
 801c2ba:	f340 8090 	ble.w	801c3de <_strtod_l+0x8f6>
 801c2be:	4629      	mov	r1, r5
 801c2c0:	2201      	movs	r2, #1
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	f001 fe6a 	bl	801df9c <__lshift>
 801c2c8:	4631      	mov	r1, r6
 801c2ca:	4605      	mov	r5, r0
 801c2cc:	f001 fed6 	bl	801e07c <__mcmp>
 801c2d0:	2800      	cmp	r0, #0
 801c2d2:	f340 8084 	ble.w	801c3de <_strtod_l+0x8f6>
 801c2d6:	9904      	ldr	r1, [sp, #16]
 801c2d8:	4a2b      	ldr	r2, [pc, #172]	; (801c388 <_strtod_l+0x8a0>)
 801c2da:	464b      	mov	r3, r9
 801c2dc:	2900      	cmp	r1, #0
 801c2de:	f000 809d 	beq.w	801c41c <_strtod_l+0x934>
 801c2e2:	ea02 0109 	and.w	r1, r2, r9
 801c2e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c2ea:	f300 8097 	bgt.w	801c41c <_strtod_l+0x934>
 801c2ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c2f2:	f77f aea5 	ble.w	801c040 <_strtod_l+0x558>
 801c2f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801c378 <_strtod_l+0x890>
 801c2fa:	ec49 8b16 	vmov	d6, r8, r9
 801c2fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c302:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c306:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c30a:	4313      	orrs	r3, r2
 801c30c:	bf08      	it	eq
 801c30e:	2322      	moveq	r3, #34	; 0x22
 801c310:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c314:	bf08      	it	eq
 801c316:	6023      	streq	r3, [r4, #0]
 801c318:	e62c      	b.n	801bf74 <_strtod_l+0x48c>
 801c31a:	f04f 31ff 	mov.w	r1, #4294967295
 801c31e:	fa01 f202 	lsl.w	r2, r1, r2
 801c322:	ea02 0808 	and.w	r8, r2, r8
 801c326:	e6d9      	b.n	801c0dc <_strtod_l+0x5f4>
 801c328:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c32c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c330:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c334:	33e2      	adds	r3, #226	; 0xe2
 801c336:	fa00 f303 	lsl.w	r3, r0, r3
 801c33a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801c33e:	e73f      	b.n	801c1c0 <_strtod_l+0x6d8>
 801c340:	2200      	movs	r2, #0
 801c342:	2301      	movs	r3, #1
 801c344:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c348:	e73a      	b.n	801c1c0 <_strtod_l+0x6d8>
 801c34a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c34c:	461a      	mov	r2, r3
 801c34e:	4620      	mov	r0, r4
 801c350:	f001 fe24 	bl	801df9c <__lshift>
 801c354:	9012      	str	r0, [sp, #72]	; 0x48
 801c356:	2800      	cmp	r0, #0
 801c358:	f47f af64 	bne.w	801c224 <_strtod_l+0x73c>
 801c35c:	e600      	b.n	801bf60 <_strtod_l+0x478>
 801c35e:	bf00      	nop
 801c360:	94a03595 	.word	0x94a03595
 801c364:	3fcfffff 	.word	0x3fcfffff
 801c368:	94a03595 	.word	0x94a03595
 801c36c:	3fdfffff 	.word	0x3fdfffff
 801c370:	35afe535 	.word	0x35afe535
 801c374:	3fe00000 	.word	0x3fe00000
 801c378:	00000000 	.word	0x00000000
 801c37c:	39500000 	.word	0x39500000
 801c380:	0801fbe0 	.word	0x0801fbe0
 801c384:	fffffc02 	.word	0xfffffc02
 801c388:	7ff00000 	.word	0x7ff00000
 801c38c:	46cb      	mov	fp, r9
 801c38e:	d15f      	bne.n	801c450 <_strtod_l+0x968>
 801c390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c394:	f1ba 0f00 	cmp.w	sl, #0
 801c398:	d02a      	beq.n	801c3f0 <_strtod_l+0x908>
 801c39a:	4aa7      	ldr	r2, [pc, #668]	; (801c638 <_strtod_l+0xb50>)
 801c39c:	4293      	cmp	r3, r2
 801c39e:	d12b      	bne.n	801c3f8 <_strtod_l+0x910>
 801c3a0:	9b04      	ldr	r3, [sp, #16]
 801c3a2:	4642      	mov	r2, r8
 801c3a4:	b1fb      	cbz	r3, 801c3e6 <_strtod_l+0x8fe>
 801c3a6:	4ba5      	ldr	r3, [pc, #660]	; (801c63c <_strtod_l+0xb54>)
 801c3a8:	ea09 0303 	and.w	r3, r9, r3
 801c3ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c3b0:	f04f 31ff 	mov.w	r1, #4294967295
 801c3b4:	d81a      	bhi.n	801c3ec <_strtod_l+0x904>
 801c3b6:	0d1b      	lsrs	r3, r3, #20
 801c3b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c3bc:	fa01 f303 	lsl.w	r3, r1, r3
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	d119      	bne.n	801c3f8 <_strtod_l+0x910>
 801c3c4:	4b9e      	ldr	r3, [pc, #632]	; (801c640 <_strtod_l+0xb58>)
 801c3c6:	459b      	cmp	fp, r3
 801c3c8:	d102      	bne.n	801c3d0 <_strtod_l+0x8e8>
 801c3ca:	3201      	adds	r2, #1
 801c3cc:	f43f adc8 	beq.w	801bf60 <_strtod_l+0x478>
 801c3d0:	4b9a      	ldr	r3, [pc, #616]	; (801c63c <_strtod_l+0xb54>)
 801c3d2:	ea0b 0303 	and.w	r3, fp, r3
 801c3d6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c3da:	f04f 0800 	mov.w	r8, #0
 801c3de:	9b04      	ldr	r3, [sp, #16]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d188      	bne.n	801c2f6 <_strtod_l+0x80e>
 801c3e4:	e5c6      	b.n	801bf74 <_strtod_l+0x48c>
 801c3e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c3ea:	e7e9      	b.n	801c3c0 <_strtod_l+0x8d8>
 801c3ec:	460b      	mov	r3, r1
 801c3ee:	e7e7      	b.n	801c3c0 <_strtod_l+0x8d8>
 801c3f0:	ea53 0308 	orrs.w	r3, r3, r8
 801c3f4:	f43f af6f 	beq.w	801c2d6 <_strtod_l+0x7ee>
 801c3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3fa:	b1cb      	cbz	r3, 801c430 <_strtod_l+0x948>
 801c3fc:	ea13 0f0b 	tst.w	r3, fp
 801c400:	d0ed      	beq.n	801c3de <_strtod_l+0x8f6>
 801c402:	9a04      	ldr	r2, [sp, #16]
 801c404:	4640      	mov	r0, r8
 801c406:	4649      	mov	r1, r9
 801c408:	f1ba 0f00 	cmp.w	sl, #0
 801c40c:	d014      	beq.n	801c438 <_strtod_l+0x950>
 801c40e:	f7ff fb50 	bl	801bab2 <sulp>
 801c412:	ee38 7b00 	vadd.f64	d7, d8, d0
 801c416:	ec59 8b17 	vmov	r8, r9, d7
 801c41a:	e7e0      	b.n	801c3de <_strtod_l+0x8f6>
 801c41c:	4013      	ands	r3, r2
 801c41e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c422:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c426:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c42a:	f04f 38ff 	mov.w	r8, #4294967295
 801c42e:	e7d6      	b.n	801c3de <_strtod_l+0x8f6>
 801c430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c432:	ea13 0f08 	tst.w	r3, r8
 801c436:	e7e3      	b.n	801c400 <_strtod_l+0x918>
 801c438:	f7ff fb3b 	bl	801bab2 <sulp>
 801c43c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801c440:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801c444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c448:	ec59 8b10 	vmov	r8, r9, d0
 801c44c:	d1c7      	bne.n	801c3de <_strtod_l+0x8f6>
 801c44e:	e5f7      	b.n	801c040 <_strtod_l+0x558>
 801c450:	4631      	mov	r1, r6
 801c452:	4628      	mov	r0, r5
 801c454:	f001 ff90 	bl	801e378 <__ratio>
 801c458:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801c45c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c464:	d865      	bhi.n	801c532 <_strtod_l+0xa4a>
 801c466:	f1ba 0f00 	cmp.w	sl, #0
 801c46a:	d042      	beq.n	801c4f2 <_strtod_l+0xa0a>
 801c46c:	4b75      	ldr	r3, [pc, #468]	; (801c644 <_strtod_l+0xb5c>)
 801c46e:	2200      	movs	r2, #0
 801c470:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801c474:	4871      	ldr	r0, [pc, #452]	; (801c63c <_strtod_l+0xb54>)
 801c476:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801c650 <_strtod_l+0xb68>
 801c47a:	ea0b 0100 	and.w	r1, fp, r0
 801c47e:	4561      	cmp	r1, ip
 801c480:	f040 808e 	bne.w	801c5a0 <_strtod_l+0xab8>
 801c484:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801c488:	ec49 8b10 	vmov	d0, r8, r9
 801c48c:	ec43 2b1c 	vmov	d12, r2, r3
 801c490:	910a      	str	r1, [sp, #40]	; 0x28
 801c492:	f001 fe99 	bl	801e1c8 <__ulp>
 801c496:	ec49 8b1e 	vmov	d14, r8, r9
 801c49a:	4868      	ldr	r0, [pc, #416]	; (801c63c <_strtod_l+0xb54>)
 801c49c:	eeac eb00 	vfma.f64	d14, d12, d0
 801c4a0:	ee1e 3a90 	vmov	r3, s29
 801c4a4:	4a68      	ldr	r2, [pc, #416]	; (801c648 <_strtod_l+0xb60>)
 801c4a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c4a8:	4018      	ands	r0, r3
 801c4aa:	4290      	cmp	r0, r2
 801c4ac:	ec59 8b1e 	vmov	r8, r9, d14
 801c4b0:	d94e      	bls.n	801c550 <_strtod_l+0xa68>
 801c4b2:	ee18 3a90 	vmov	r3, s17
 801c4b6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c4ba:	4293      	cmp	r3, r2
 801c4bc:	d104      	bne.n	801c4c8 <_strtod_l+0x9e0>
 801c4be:	ee18 3a10 	vmov	r3, s16
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	f43f ad4c 	beq.w	801bf60 <_strtod_l+0x478>
 801c4c8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801c640 <_strtod_l+0xb58>
 801c4cc:	f04f 38ff 	mov.w	r8, #4294967295
 801c4d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f001 fb46 	bl	801db64 <_Bfree>
 801c4d8:	4639      	mov	r1, r7
 801c4da:	4620      	mov	r0, r4
 801c4dc:	f001 fb42 	bl	801db64 <_Bfree>
 801c4e0:	4631      	mov	r1, r6
 801c4e2:	4620      	mov	r0, r4
 801c4e4:	f001 fb3e 	bl	801db64 <_Bfree>
 801c4e8:	4629      	mov	r1, r5
 801c4ea:	4620      	mov	r0, r4
 801c4ec:	f001 fb3a 	bl	801db64 <_Bfree>
 801c4f0:	e619      	b.n	801c126 <_strtod_l+0x63e>
 801c4f2:	f1b8 0f00 	cmp.w	r8, #0
 801c4f6:	d112      	bne.n	801c51e <_strtod_l+0xa36>
 801c4f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c4fc:	b9b3      	cbnz	r3, 801c52c <_strtod_l+0xa44>
 801c4fe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801c502:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c50a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c50e:	bf58      	it	pl
 801c510:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801c514:	eeb1 7b4d 	vneg.f64	d7, d13
 801c518:	ec53 2b17 	vmov	r2, r3, d7
 801c51c:	e7aa      	b.n	801c474 <_strtod_l+0x98c>
 801c51e:	f1b8 0f01 	cmp.w	r8, #1
 801c522:	d103      	bne.n	801c52c <_strtod_l+0xa44>
 801c524:	f1b9 0f00 	cmp.w	r9, #0
 801c528:	f43f ad8a 	beq.w	801c040 <_strtod_l+0x558>
 801c52c:	4b47      	ldr	r3, [pc, #284]	; (801c64c <_strtod_l+0xb64>)
 801c52e:	2200      	movs	r2, #0
 801c530:	e79e      	b.n	801c470 <_strtod_l+0x988>
 801c532:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c536:	ee20 db0d 	vmul.f64	d13, d0, d13
 801c53a:	f1ba 0f00 	cmp.w	sl, #0
 801c53e:	d104      	bne.n	801c54a <_strtod_l+0xa62>
 801c540:	eeb1 7b4d 	vneg.f64	d7, d13
 801c544:	ec53 2b17 	vmov	r2, r3, d7
 801c548:	e794      	b.n	801c474 <_strtod_l+0x98c>
 801c54a:	eeb0 7b4d 	vmov.f64	d7, d13
 801c54e:	e7f9      	b.n	801c544 <_strtod_l+0xa5c>
 801c550:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801c554:	9b04      	ldr	r3, [sp, #16]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d1ba      	bne.n	801c4d0 <_strtod_l+0x9e8>
 801c55a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c55e:	0d1b      	lsrs	r3, r3, #20
 801c560:	051b      	lsls	r3, r3, #20
 801c562:	4299      	cmp	r1, r3
 801c564:	d1b4      	bne.n	801c4d0 <_strtod_l+0x9e8>
 801c566:	ec51 0b1d 	vmov	r0, r1, d13
 801c56a:	f7e4 f90d 	bl	8000788 <__aeabi_d2lz>
 801c56e:	f7e4 f8c5 	bl	80006fc <__aeabi_l2d>
 801c572:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c576:	ec41 0b17 	vmov	d7, r0, r1
 801c57a:	ea43 0308 	orr.w	r3, r3, r8
 801c57e:	ea53 030a 	orrs.w	r3, r3, sl
 801c582:	ee3d db47 	vsub.f64	d13, d13, d7
 801c586:	d03c      	beq.n	801c602 <_strtod_l+0xb1a>
 801c588:	eeb4 dbca 	vcmpe.f64	d13, d10
 801c58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c590:	f53f acf0 	bmi.w	801bf74 <_strtod_l+0x48c>
 801c594:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801c598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c59c:	dd98      	ble.n	801c4d0 <_strtod_l+0x9e8>
 801c59e:	e4e9      	b.n	801bf74 <_strtod_l+0x48c>
 801c5a0:	9804      	ldr	r0, [sp, #16]
 801c5a2:	b1f0      	cbz	r0, 801c5e2 <_strtod_l+0xafa>
 801c5a4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801c5a8:	d81b      	bhi.n	801c5e2 <_strtod_l+0xafa>
 801c5aa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801c630 <_strtod_l+0xb48>
 801c5ae:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801c5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5b6:	d811      	bhi.n	801c5dc <_strtod_l+0xaf4>
 801c5b8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801c5bc:	ee1d 3a10 	vmov	r3, s26
 801c5c0:	2b01      	cmp	r3, #1
 801c5c2:	bf38      	it	cc
 801c5c4:	2301      	movcc	r3, #1
 801c5c6:	ee0d 3a10 	vmov	s26, r3
 801c5ca:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801c5ce:	f1ba 0f00 	cmp.w	sl, #0
 801c5d2:	d113      	bne.n	801c5fc <_strtod_l+0xb14>
 801c5d4:	eeb1 7b4d 	vneg.f64	d7, d13
 801c5d8:	ec53 2b17 	vmov	r2, r3, d7
 801c5dc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801c5e0:	1a43      	subs	r3, r0, r1
 801c5e2:	eeb0 0b48 	vmov.f64	d0, d8
 801c5e6:	ec43 2b1c 	vmov	d12, r2, r3
 801c5ea:	910a      	str	r1, [sp, #40]	; 0x28
 801c5ec:	f001 fdec 	bl	801e1c8 <__ulp>
 801c5f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c5f2:	eeac 8b00 	vfma.f64	d8, d12, d0
 801c5f6:	ec59 8b18 	vmov	r8, r9, d8
 801c5fa:	e7ab      	b.n	801c554 <_strtod_l+0xa6c>
 801c5fc:	eeb0 7b4d 	vmov.f64	d7, d13
 801c600:	e7ea      	b.n	801c5d8 <_strtod_l+0xaf0>
 801c602:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c60a:	f57f af61 	bpl.w	801c4d0 <_strtod_l+0x9e8>
 801c60e:	e4b1      	b.n	801bf74 <_strtod_l+0x48c>
 801c610:	2300      	movs	r3, #0
 801c612:	9308      	str	r3, [sp, #32]
 801c614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c618:	6013      	str	r3, [r2, #0]
 801c61a:	f7ff baad 	b.w	801bb78 <_strtod_l+0x90>
 801c61e:	2a65      	cmp	r2, #101	; 0x65
 801c620:	f43f ab9f 	beq.w	801bd62 <_strtod_l+0x27a>
 801c624:	2a45      	cmp	r2, #69	; 0x45
 801c626:	f43f ab9c 	beq.w	801bd62 <_strtod_l+0x27a>
 801c62a:	2101      	movs	r1, #1
 801c62c:	f7ff bbd4 	b.w	801bdd8 <_strtod_l+0x2f0>
 801c630:	ffc00000 	.word	0xffc00000
 801c634:	41dfffff 	.word	0x41dfffff
 801c638:	000fffff 	.word	0x000fffff
 801c63c:	7ff00000 	.word	0x7ff00000
 801c640:	7fefffff 	.word	0x7fefffff
 801c644:	3ff00000 	.word	0x3ff00000
 801c648:	7c9fffff 	.word	0x7c9fffff
 801c64c:	bff00000 	.word	0xbff00000
 801c650:	7fe00000 	.word	0x7fe00000

0801c654 <_strtod_r>:
 801c654:	4b01      	ldr	r3, [pc, #4]	; (801c65c <_strtod_r+0x8>)
 801c656:	f7ff ba47 	b.w	801bae8 <_strtod_l>
 801c65a:	bf00      	nop
 801c65c:	24000168 	.word	0x24000168

0801c660 <_strtol_l.constprop.0>:
 801c660:	2b01      	cmp	r3, #1
 801c662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c666:	d001      	beq.n	801c66c <_strtol_l.constprop.0+0xc>
 801c668:	2b24      	cmp	r3, #36	; 0x24
 801c66a:	d906      	bls.n	801c67a <_strtol_l.constprop.0+0x1a>
 801c66c:	f7fe fb28 	bl	801acc0 <__errno>
 801c670:	2316      	movs	r3, #22
 801c672:	6003      	str	r3, [r0, #0]
 801c674:	2000      	movs	r0, #0
 801c676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c67a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801c760 <_strtol_l.constprop.0+0x100>
 801c67e:	460d      	mov	r5, r1
 801c680:	462e      	mov	r6, r5
 801c682:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c686:	f814 700c 	ldrb.w	r7, [r4, ip]
 801c68a:	f017 0708 	ands.w	r7, r7, #8
 801c68e:	d1f7      	bne.n	801c680 <_strtol_l.constprop.0+0x20>
 801c690:	2c2d      	cmp	r4, #45	; 0x2d
 801c692:	d132      	bne.n	801c6fa <_strtol_l.constprop.0+0x9a>
 801c694:	782c      	ldrb	r4, [r5, #0]
 801c696:	2701      	movs	r7, #1
 801c698:	1cb5      	adds	r5, r6, #2
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d05b      	beq.n	801c756 <_strtol_l.constprop.0+0xf6>
 801c69e:	2b10      	cmp	r3, #16
 801c6a0:	d109      	bne.n	801c6b6 <_strtol_l.constprop.0+0x56>
 801c6a2:	2c30      	cmp	r4, #48	; 0x30
 801c6a4:	d107      	bne.n	801c6b6 <_strtol_l.constprop.0+0x56>
 801c6a6:	782c      	ldrb	r4, [r5, #0]
 801c6a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c6ac:	2c58      	cmp	r4, #88	; 0x58
 801c6ae:	d14d      	bne.n	801c74c <_strtol_l.constprop.0+0xec>
 801c6b0:	786c      	ldrb	r4, [r5, #1]
 801c6b2:	2310      	movs	r3, #16
 801c6b4:	3502      	adds	r5, #2
 801c6b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c6ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6be:	f04f 0c00 	mov.w	ip, #0
 801c6c2:	fbb8 f9f3 	udiv	r9, r8, r3
 801c6c6:	4666      	mov	r6, ip
 801c6c8:	fb03 8a19 	mls	sl, r3, r9, r8
 801c6cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801c6d0:	f1be 0f09 	cmp.w	lr, #9
 801c6d4:	d816      	bhi.n	801c704 <_strtol_l.constprop.0+0xa4>
 801c6d6:	4674      	mov	r4, lr
 801c6d8:	42a3      	cmp	r3, r4
 801c6da:	dd24      	ble.n	801c726 <_strtol_l.constprop.0+0xc6>
 801c6dc:	f1bc 0f00 	cmp.w	ip, #0
 801c6e0:	db1e      	blt.n	801c720 <_strtol_l.constprop.0+0xc0>
 801c6e2:	45b1      	cmp	r9, r6
 801c6e4:	d31c      	bcc.n	801c720 <_strtol_l.constprop.0+0xc0>
 801c6e6:	d101      	bne.n	801c6ec <_strtol_l.constprop.0+0x8c>
 801c6e8:	45a2      	cmp	sl, r4
 801c6ea:	db19      	blt.n	801c720 <_strtol_l.constprop.0+0xc0>
 801c6ec:	fb06 4603 	mla	r6, r6, r3, r4
 801c6f0:	f04f 0c01 	mov.w	ip, #1
 801c6f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c6f8:	e7e8      	b.n	801c6cc <_strtol_l.constprop.0+0x6c>
 801c6fa:	2c2b      	cmp	r4, #43	; 0x2b
 801c6fc:	bf04      	itt	eq
 801c6fe:	782c      	ldrbeq	r4, [r5, #0]
 801c700:	1cb5      	addeq	r5, r6, #2
 801c702:	e7ca      	b.n	801c69a <_strtol_l.constprop.0+0x3a>
 801c704:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801c708:	f1be 0f19 	cmp.w	lr, #25
 801c70c:	d801      	bhi.n	801c712 <_strtol_l.constprop.0+0xb2>
 801c70e:	3c37      	subs	r4, #55	; 0x37
 801c710:	e7e2      	b.n	801c6d8 <_strtol_l.constprop.0+0x78>
 801c712:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801c716:	f1be 0f19 	cmp.w	lr, #25
 801c71a:	d804      	bhi.n	801c726 <_strtol_l.constprop.0+0xc6>
 801c71c:	3c57      	subs	r4, #87	; 0x57
 801c71e:	e7db      	b.n	801c6d8 <_strtol_l.constprop.0+0x78>
 801c720:	f04f 3cff 	mov.w	ip, #4294967295
 801c724:	e7e6      	b.n	801c6f4 <_strtol_l.constprop.0+0x94>
 801c726:	f1bc 0f00 	cmp.w	ip, #0
 801c72a:	da05      	bge.n	801c738 <_strtol_l.constprop.0+0xd8>
 801c72c:	2322      	movs	r3, #34	; 0x22
 801c72e:	6003      	str	r3, [r0, #0]
 801c730:	4646      	mov	r6, r8
 801c732:	b942      	cbnz	r2, 801c746 <_strtol_l.constprop.0+0xe6>
 801c734:	4630      	mov	r0, r6
 801c736:	e79e      	b.n	801c676 <_strtol_l.constprop.0+0x16>
 801c738:	b107      	cbz	r7, 801c73c <_strtol_l.constprop.0+0xdc>
 801c73a:	4276      	negs	r6, r6
 801c73c:	2a00      	cmp	r2, #0
 801c73e:	d0f9      	beq.n	801c734 <_strtol_l.constprop.0+0xd4>
 801c740:	f1bc 0f00 	cmp.w	ip, #0
 801c744:	d000      	beq.n	801c748 <_strtol_l.constprop.0+0xe8>
 801c746:	1e69      	subs	r1, r5, #1
 801c748:	6011      	str	r1, [r2, #0]
 801c74a:	e7f3      	b.n	801c734 <_strtol_l.constprop.0+0xd4>
 801c74c:	2430      	movs	r4, #48	; 0x30
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d1b1      	bne.n	801c6b6 <_strtol_l.constprop.0+0x56>
 801c752:	2308      	movs	r3, #8
 801c754:	e7af      	b.n	801c6b6 <_strtol_l.constprop.0+0x56>
 801c756:	2c30      	cmp	r4, #48	; 0x30
 801c758:	d0a5      	beq.n	801c6a6 <_strtol_l.constprop.0+0x46>
 801c75a:	230a      	movs	r3, #10
 801c75c:	e7ab      	b.n	801c6b6 <_strtol_l.constprop.0+0x56>
 801c75e:	bf00      	nop
 801c760:	0801fc09 	.word	0x0801fc09

0801c764 <_strtol_r>:
 801c764:	f7ff bf7c 	b.w	801c660 <_strtol_l.constprop.0>

0801c768 <_write_r>:
 801c768:	b538      	push	{r3, r4, r5, lr}
 801c76a:	4d07      	ldr	r5, [pc, #28]	; (801c788 <_write_r+0x20>)
 801c76c:	4604      	mov	r4, r0
 801c76e:	4608      	mov	r0, r1
 801c770:	4611      	mov	r1, r2
 801c772:	2200      	movs	r2, #0
 801c774:	602a      	str	r2, [r5, #0]
 801c776:	461a      	mov	r2, r3
 801c778:	f7e7 fa3f 	bl	8003bfa <_write>
 801c77c:	1c43      	adds	r3, r0, #1
 801c77e:	d102      	bne.n	801c786 <_write_r+0x1e>
 801c780:	682b      	ldr	r3, [r5, #0]
 801c782:	b103      	cbz	r3, 801c786 <_write_r+0x1e>
 801c784:	6023      	str	r3, [r4, #0]
 801c786:	bd38      	pop	{r3, r4, r5, pc}
 801c788:	240034f8 	.word	0x240034f8

0801c78c <_close_r>:
 801c78c:	b538      	push	{r3, r4, r5, lr}
 801c78e:	4d06      	ldr	r5, [pc, #24]	; (801c7a8 <_close_r+0x1c>)
 801c790:	2300      	movs	r3, #0
 801c792:	4604      	mov	r4, r0
 801c794:	4608      	mov	r0, r1
 801c796:	602b      	str	r3, [r5, #0]
 801c798:	f7e7 fa4b 	bl	8003c32 <_close>
 801c79c:	1c43      	adds	r3, r0, #1
 801c79e:	d102      	bne.n	801c7a6 <_close_r+0x1a>
 801c7a0:	682b      	ldr	r3, [r5, #0]
 801c7a2:	b103      	cbz	r3, 801c7a6 <_close_r+0x1a>
 801c7a4:	6023      	str	r3, [r4, #0]
 801c7a6:	bd38      	pop	{r3, r4, r5, pc}
 801c7a8:	240034f8 	.word	0x240034f8

0801c7ac <quorem>:
 801c7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b0:	6903      	ldr	r3, [r0, #16]
 801c7b2:	690c      	ldr	r4, [r1, #16]
 801c7b4:	42a3      	cmp	r3, r4
 801c7b6:	4607      	mov	r7, r0
 801c7b8:	f2c0 8081 	blt.w	801c8be <quorem+0x112>
 801c7bc:	3c01      	subs	r4, #1
 801c7be:	f101 0814 	add.w	r8, r1, #20
 801c7c2:	f100 0514 	add.w	r5, r0, #20
 801c7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c7ca:	9301      	str	r3, [sp, #4]
 801c7cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c7d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c7dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c7e0:	fbb2 f6f3 	udiv	r6, r2, r3
 801c7e4:	d331      	bcc.n	801c84a <quorem+0x9e>
 801c7e6:	f04f 0e00 	mov.w	lr, #0
 801c7ea:	4640      	mov	r0, r8
 801c7ec:	46ac      	mov	ip, r5
 801c7ee:	46f2      	mov	sl, lr
 801c7f0:	f850 2b04 	ldr.w	r2, [r0], #4
 801c7f4:	b293      	uxth	r3, r2
 801c7f6:	fb06 e303 	mla	r3, r6, r3, lr
 801c7fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c7fe:	b29b      	uxth	r3, r3
 801c800:	ebaa 0303 	sub.w	r3, sl, r3
 801c804:	f8dc a000 	ldr.w	sl, [ip]
 801c808:	0c12      	lsrs	r2, r2, #16
 801c80a:	fa13 f38a 	uxtah	r3, r3, sl
 801c80e:	fb06 e202 	mla	r2, r6, r2, lr
 801c812:	9300      	str	r3, [sp, #0]
 801c814:	9b00      	ldr	r3, [sp, #0]
 801c816:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c81a:	b292      	uxth	r2, r2
 801c81c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c824:	f8bd 3000 	ldrh.w	r3, [sp]
 801c828:	4581      	cmp	r9, r0
 801c82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c82e:	f84c 3b04 	str.w	r3, [ip], #4
 801c832:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c836:	d2db      	bcs.n	801c7f0 <quorem+0x44>
 801c838:	f855 300b 	ldr.w	r3, [r5, fp]
 801c83c:	b92b      	cbnz	r3, 801c84a <quorem+0x9e>
 801c83e:	9b01      	ldr	r3, [sp, #4]
 801c840:	3b04      	subs	r3, #4
 801c842:	429d      	cmp	r5, r3
 801c844:	461a      	mov	r2, r3
 801c846:	d32e      	bcc.n	801c8a6 <quorem+0xfa>
 801c848:	613c      	str	r4, [r7, #16]
 801c84a:	4638      	mov	r0, r7
 801c84c:	f001 fc16 	bl	801e07c <__mcmp>
 801c850:	2800      	cmp	r0, #0
 801c852:	db24      	blt.n	801c89e <quorem+0xf2>
 801c854:	3601      	adds	r6, #1
 801c856:	4628      	mov	r0, r5
 801c858:	f04f 0c00 	mov.w	ip, #0
 801c85c:	f858 2b04 	ldr.w	r2, [r8], #4
 801c860:	f8d0 e000 	ldr.w	lr, [r0]
 801c864:	b293      	uxth	r3, r2
 801c866:	ebac 0303 	sub.w	r3, ip, r3
 801c86a:	0c12      	lsrs	r2, r2, #16
 801c86c:	fa13 f38e 	uxtah	r3, r3, lr
 801c870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c878:	b29b      	uxth	r3, r3
 801c87a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c87e:	45c1      	cmp	r9, r8
 801c880:	f840 3b04 	str.w	r3, [r0], #4
 801c884:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c888:	d2e8      	bcs.n	801c85c <quorem+0xb0>
 801c88a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c88e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c892:	b922      	cbnz	r2, 801c89e <quorem+0xf2>
 801c894:	3b04      	subs	r3, #4
 801c896:	429d      	cmp	r5, r3
 801c898:	461a      	mov	r2, r3
 801c89a:	d30a      	bcc.n	801c8b2 <quorem+0x106>
 801c89c:	613c      	str	r4, [r7, #16]
 801c89e:	4630      	mov	r0, r6
 801c8a0:	b003      	add	sp, #12
 801c8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a6:	6812      	ldr	r2, [r2, #0]
 801c8a8:	3b04      	subs	r3, #4
 801c8aa:	2a00      	cmp	r2, #0
 801c8ac:	d1cc      	bne.n	801c848 <quorem+0x9c>
 801c8ae:	3c01      	subs	r4, #1
 801c8b0:	e7c7      	b.n	801c842 <quorem+0x96>
 801c8b2:	6812      	ldr	r2, [r2, #0]
 801c8b4:	3b04      	subs	r3, #4
 801c8b6:	2a00      	cmp	r2, #0
 801c8b8:	d1f0      	bne.n	801c89c <quorem+0xf0>
 801c8ba:	3c01      	subs	r4, #1
 801c8bc:	e7eb      	b.n	801c896 <quorem+0xea>
 801c8be:	2000      	movs	r0, #0
 801c8c0:	e7ee      	b.n	801c8a0 <quorem+0xf4>
 801c8c2:	0000      	movs	r0, r0
 801c8c4:	0000      	movs	r0, r0
	...

0801c8c8 <_dtoa_r>:
 801c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8cc:	ed2d 8b02 	vpush	{d8}
 801c8d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c8d2:	b091      	sub	sp, #68	; 0x44
 801c8d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c8d8:	ec59 8b10 	vmov	r8, r9, d0
 801c8dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c8de:	9106      	str	r1, [sp, #24]
 801c8e0:	4606      	mov	r6, r0
 801c8e2:	9208      	str	r2, [sp, #32]
 801c8e4:	930c      	str	r3, [sp, #48]	; 0x30
 801c8e6:	b975      	cbnz	r5, 801c906 <_dtoa_r+0x3e>
 801c8e8:	2010      	movs	r0, #16
 801c8ea:	f001 f8e1 	bl	801dab0 <malloc>
 801c8ee:	4602      	mov	r2, r0
 801c8f0:	6270      	str	r0, [r6, #36]	; 0x24
 801c8f2:	b920      	cbnz	r0, 801c8fe <_dtoa_r+0x36>
 801c8f4:	4baa      	ldr	r3, [pc, #680]	; (801cba0 <_dtoa_r+0x2d8>)
 801c8f6:	21ea      	movs	r1, #234	; 0xea
 801c8f8:	48aa      	ldr	r0, [pc, #680]	; (801cba4 <_dtoa_r+0x2dc>)
 801c8fa:	f002 f84f 	bl	801e99c <__assert_func>
 801c8fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c902:	6005      	str	r5, [r0, #0]
 801c904:	60c5      	str	r5, [r0, #12]
 801c906:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c908:	6819      	ldr	r1, [r3, #0]
 801c90a:	b151      	cbz	r1, 801c922 <_dtoa_r+0x5a>
 801c90c:	685a      	ldr	r2, [r3, #4]
 801c90e:	604a      	str	r2, [r1, #4]
 801c910:	2301      	movs	r3, #1
 801c912:	4093      	lsls	r3, r2
 801c914:	608b      	str	r3, [r1, #8]
 801c916:	4630      	mov	r0, r6
 801c918:	f001 f924 	bl	801db64 <_Bfree>
 801c91c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c91e:	2200      	movs	r2, #0
 801c920:	601a      	str	r2, [r3, #0]
 801c922:	f1b9 0300 	subs.w	r3, r9, #0
 801c926:	bfbb      	ittet	lt
 801c928:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c92c:	9303      	strlt	r3, [sp, #12]
 801c92e:	2300      	movge	r3, #0
 801c930:	2201      	movlt	r2, #1
 801c932:	bfac      	ite	ge
 801c934:	6023      	strge	r3, [r4, #0]
 801c936:	6022      	strlt	r2, [r4, #0]
 801c938:	4b9b      	ldr	r3, [pc, #620]	; (801cba8 <_dtoa_r+0x2e0>)
 801c93a:	9c03      	ldr	r4, [sp, #12]
 801c93c:	43a3      	bics	r3, r4
 801c93e:	d11c      	bne.n	801c97a <_dtoa_r+0xb2>
 801c940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c942:	f242 730f 	movw	r3, #9999	; 0x270f
 801c946:	6013      	str	r3, [r2, #0]
 801c948:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c94c:	ea53 0308 	orrs.w	r3, r3, r8
 801c950:	f000 84fd 	beq.w	801d34e <_dtoa_r+0xa86>
 801c954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c956:	b963      	cbnz	r3, 801c972 <_dtoa_r+0xaa>
 801c958:	4b94      	ldr	r3, [pc, #592]	; (801cbac <_dtoa_r+0x2e4>)
 801c95a:	e01f      	b.n	801c99c <_dtoa_r+0xd4>
 801c95c:	4b94      	ldr	r3, [pc, #592]	; (801cbb0 <_dtoa_r+0x2e8>)
 801c95e:	9301      	str	r3, [sp, #4]
 801c960:	3308      	adds	r3, #8
 801c962:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c964:	6013      	str	r3, [r2, #0]
 801c966:	9801      	ldr	r0, [sp, #4]
 801c968:	b011      	add	sp, #68	; 0x44
 801c96a:	ecbd 8b02 	vpop	{d8}
 801c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c972:	4b8e      	ldr	r3, [pc, #568]	; (801cbac <_dtoa_r+0x2e4>)
 801c974:	9301      	str	r3, [sp, #4]
 801c976:	3303      	adds	r3, #3
 801c978:	e7f3      	b.n	801c962 <_dtoa_r+0x9a>
 801c97a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c97e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c986:	d10b      	bne.n	801c9a0 <_dtoa_r+0xd8>
 801c988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c98a:	2301      	movs	r3, #1
 801c98c:	6013      	str	r3, [r2, #0]
 801c98e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c990:	2b00      	cmp	r3, #0
 801c992:	f000 84d9 	beq.w	801d348 <_dtoa_r+0xa80>
 801c996:	4887      	ldr	r0, [pc, #540]	; (801cbb4 <_dtoa_r+0x2ec>)
 801c998:	6018      	str	r0, [r3, #0]
 801c99a:	1e43      	subs	r3, r0, #1
 801c99c:	9301      	str	r3, [sp, #4]
 801c99e:	e7e2      	b.n	801c966 <_dtoa_r+0x9e>
 801c9a0:	a90f      	add	r1, sp, #60	; 0x3c
 801c9a2:	aa0e      	add	r2, sp, #56	; 0x38
 801c9a4:	4630      	mov	r0, r6
 801c9a6:	eeb0 0b48 	vmov.f64	d0, d8
 801c9aa:	f001 fc89 	bl	801e2c0 <__d2b>
 801c9ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801c9b2:	4605      	mov	r5, r0
 801c9b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c9b6:	2900      	cmp	r1, #0
 801c9b8:	d046      	beq.n	801ca48 <_dtoa_r+0x180>
 801c9ba:	ee18 4a90 	vmov	r4, s17
 801c9be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c9c2:	ec53 2b18 	vmov	r2, r3, d8
 801c9c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801c9ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c9ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c9d2:	2400      	movs	r4, #0
 801c9d4:	ec43 2b16 	vmov	d6, r2, r3
 801c9d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c9dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cb88 <_dtoa_r+0x2c0>
 801c9e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c9e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801cb90 <_dtoa_r+0x2c8>
 801c9e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c9ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cb98 <_dtoa_r+0x2d0>
 801c9f0:	ee07 1a90 	vmov	s15, r1
 801c9f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c9f8:	eeb0 7b46 	vmov.f64	d7, d6
 801c9fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ca00:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ca04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ca08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca0c:	ee16 ba90 	vmov	fp, s13
 801ca10:	940a      	str	r4, [sp, #40]	; 0x28
 801ca12:	d508      	bpl.n	801ca26 <_dtoa_r+0x15e>
 801ca14:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ca18:	eeb4 6b47 	vcmp.f64	d6, d7
 801ca1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca20:	bf18      	it	ne
 801ca22:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801ca26:	f1bb 0f16 	cmp.w	fp, #22
 801ca2a:	d82f      	bhi.n	801ca8c <_dtoa_r+0x1c4>
 801ca2c:	4b62      	ldr	r3, [pc, #392]	; (801cbb8 <_dtoa_r+0x2f0>)
 801ca2e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ca32:	ed93 7b00 	vldr	d7, [r3]
 801ca36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ca3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca3e:	d501      	bpl.n	801ca44 <_dtoa_r+0x17c>
 801ca40:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca44:	2300      	movs	r3, #0
 801ca46:	e022      	b.n	801ca8e <_dtoa_r+0x1c6>
 801ca48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ca4a:	4401      	add	r1, r0
 801ca4c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801ca50:	2b20      	cmp	r3, #32
 801ca52:	bfc1      	itttt	gt
 801ca54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ca58:	fa04 f303 	lslgt.w	r3, r4, r3
 801ca5c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801ca60:	fa28 f804 	lsrgt.w	r8, r8, r4
 801ca64:	bfd6      	itet	le
 801ca66:	f1c3 0320 	rsble	r3, r3, #32
 801ca6a:	ea43 0808 	orrgt.w	r8, r3, r8
 801ca6e:	fa08 f803 	lslle.w	r8, r8, r3
 801ca72:	ee07 8a90 	vmov	s15, r8
 801ca76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ca7a:	3901      	subs	r1, #1
 801ca7c:	ee17 4a90 	vmov	r4, s15
 801ca80:	ec53 2b17 	vmov	r2, r3, d7
 801ca84:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801ca88:	2401      	movs	r4, #1
 801ca8a:	e7a3      	b.n	801c9d4 <_dtoa_r+0x10c>
 801ca8c:	2301      	movs	r3, #1
 801ca8e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca90:	1a43      	subs	r3, r0, r1
 801ca92:	1e5a      	subs	r2, r3, #1
 801ca94:	bf45      	ittet	mi
 801ca96:	f1c3 0301 	rsbmi	r3, r3, #1
 801ca9a:	9304      	strmi	r3, [sp, #16]
 801ca9c:	2300      	movpl	r3, #0
 801ca9e:	2300      	movmi	r3, #0
 801caa0:	9205      	str	r2, [sp, #20]
 801caa2:	bf54      	ite	pl
 801caa4:	9304      	strpl	r3, [sp, #16]
 801caa6:	9305      	strmi	r3, [sp, #20]
 801caa8:	f1bb 0f00 	cmp.w	fp, #0
 801caac:	db18      	blt.n	801cae0 <_dtoa_r+0x218>
 801caae:	9b05      	ldr	r3, [sp, #20]
 801cab0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cab4:	445b      	add	r3, fp
 801cab6:	9305      	str	r3, [sp, #20]
 801cab8:	2300      	movs	r3, #0
 801caba:	9a06      	ldr	r2, [sp, #24]
 801cabc:	2a09      	cmp	r2, #9
 801cabe:	d849      	bhi.n	801cb54 <_dtoa_r+0x28c>
 801cac0:	2a05      	cmp	r2, #5
 801cac2:	bfc4      	itt	gt
 801cac4:	3a04      	subgt	r2, #4
 801cac6:	9206      	strgt	r2, [sp, #24]
 801cac8:	9a06      	ldr	r2, [sp, #24]
 801caca:	f1a2 0202 	sub.w	r2, r2, #2
 801cace:	bfcc      	ite	gt
 801cad0:	2400      	movgt	r4, #0
 801cad2:	2401      	movle	r4, #1
 801cad4:	2a03      	cmp	r2, #3
 801cad6:	d848      	bhi.n	801cb6a <_dtoa_r+0x2a2>
 801cad8:	e8df f002 	tbb	[pc, r2]
 801cadc:	3a2c2e0b 	.word	0x3a2c2e0b
 801cae0:	9b04      	ldr	r3, [sp, #16]
 801cae2:	2200      	movs	r2, #0
 801cae4:	eba3 030b 	sub.w	r3, r3, fp
 801cae8:	9304      	str	r3, [sp, #16]
 801caea:	9209      	str	r2, [sp, #36]	; 0x24
 801caec:	f1cb 0300 	rsb	r3, fp, #0
 801caf0:	e7e3      	b.n	801caba <_dtoa_r+0x1f2>
 801caf2:	2200      	movs	r2, #0
 801caf4:	9207      	str	r2, [sp, #28]
 801caf6:	9a08      	ldr	r2, [sp, #32]
 801caf8:	2a00      	cmp	r2, #0
 801cafa:	dc39      	bgt.n	801cb70 <_dtoa_r+0x2a8>
 801cafc:	f04f 0a01 	mov.w	sl, #1
 801cb00:	46d1      	mov	r9, sl
 801cb02:	4652      	mov	r2, sl
 801cb04:	f8cd a020 	str.w	sl, [sp, #32]
 801cb08:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801cb0a:	2100      	movs	r1, #0
 801cb0c:	6079      	str	r1, [r7, #4]
 801cb0e:	2004      	movs	r0, #4
 801cb10:	f100 0c14 	add.w	ip, r0, #20
 801cb14:	4594      	cmp	ip, r2
 801cb16:	6879      	ldr	r1, [r7, #4]
 801cb18:	d92f      	bls.n	801cb7a <_dtoa_r+0x2b2>
 801cb1a:	4630      	mov	r0, r6
 801cb1c:	930d      	str	r3, [sp, #52]	; 0x34
 801cb1e:	f000 ffe1 	bl	801dae4 <_Balloc>
 801cb22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb24:	9001      	str	r0, [sp, #4]
 801cb26:	4602      	mov	r2, r0
 801cb28:	2800      	cmp	r0, #0
 801cb2a:	d149      	bne.n	801cbc0 <_dtoa_r+0x2f8>
 801cb2c:	4b23      	ldr	r3, [pc, #140]	; (801cbbc <_dtoa_r+0x2f4>)
 801cb2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cb32:	e6e1      	b.n	801c8f8 <_dtoa_r+0x30>
 801cb34:	2201      	movs	r2, #1
 801cb36:	e7dd      	b.n	801caf4 <_dtoa_r+0x22c>
 801cb38:	2200      	movs	r2, #0
 801cb3a:	9207      	str	r2, [sp, #28]
 801cb3c:	9a08      	ldr	r2, [sp, #32]
 801cb3e:	eb0b 0a02 	add.w	sl, fp, r2
 801cb42:	f10a 0901 	add.w	r9, sl, #1
 801cb46:	464a      	mov	r2, r9
 801cb48:	2a01      	cmp	r2, #1
 801cb4a:	bfb8      	it	lt
 801cb4c:	2201      	movlt	r2, #1
 801cb4e:	e7db      	b.n	801cb08 <_dtoa_r+0x240>
 801cb50:	2201      	movs	r2, #1
 801cb52:	e7f2      	b.n	801cb3a <_dtoa_r+0x272>
 801cb54:	2401      	movs	r4, #1
 801cb56:	2200      	movs	r2, #0
 801cb58:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801cb5c:	f04f 3aff 	mov.w	sl, #4294967295
 801cb60:	2100      	movs	r1, #0
 801cb62:	46d1      	mov	r9, sl
 801cb64:	2212      	movs	r2, #18
 801cb66:	9108      	str	r1, [sp, #32]
 801cb68:	e7ce      	b.n	801cb08 <_dtoa_r+0x240>
 801cb6a:	2201      	movs	r2, #1
 801cb6c:	9207      	str	r2, [sp, #28]
 801cb6e:	e7f5      	b.n	801cb5c <_dtoa_r+0x294>
 801cb70:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cb74:	46d1      	mov	r9, sl
 801cb76:	4652      	mov	r2, sl
 801cb78:	e7c6      	b.n	801cb08 <_dtoa_r+0x240>
 801cb7a:	3101      	adds	r1, #1
 801cb7c:	6079      	str	r1, [r7, #4]
 801cb7e:	0040      	lsls	r0, r0, #1
 801cb80:	e7c6      	b.n	801cb10 <_dtoa_r+0x248>
 801cb82:	bf00      	nop
 801cb84:	f3af 8000 	nop.w
 801cb88:	636f4361 	.word	0x636f4361
 801cb8c:	3fd287a7 	.word	0x3fd287a7
 801cb90:	8b60c8b3 	.word	0x8b60c8b3
 801cb94:	3fc68a28 	.word	0x3fc68a28
 801cb98:	509f79fb 	.word	0x509f79fb
 801cb9c:	3fd34413 	.word	0x3fd34413
 801cba0:	0801fd16 	.word	0x0801fd16
 801cba4:	0801fd2d 	.word	0x0801fd2d
 801cba8:	7ff00000 	.word	0x7ff00000
 801cbac:	0801fd12 	.word	0x0801fd12
 801cbb0:	0801fd09 	.word	0x0801fd09
 801cbb4:	0801fb8d 	.word	0x0801fb8d
 801cbb8:	0801fe98 	.word	0x0801fe98
 801cbbc:	0801fd88 	.word	0x0801fd88
 801cbc0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cbc2:	9901      	ldr	r1, [sp, #4]
 801cbc4:	6011      	str	r1, [r2, #0]
 801cbc6:	f1b9 0f0e 	cmp.w	r9, #14
 801cbca:	d86c      	bhi.n	801cca6 <_dtoa_r+0x3de>
 801cbcc:	2c00      	cmp	r4, #0
 801cbce:	d06a      	beq.n	801cca6 <_dtoa_r+0x3de>
 801cbd0:	f1bb 0f00 	cmp.w	fp, #0
 801cbd4:	f340 80a0 	ble.w	801cd18 <_dtoa_r+0x450>
 801cbd8:	49c1      	ldr	r1, [pc, #772]	; (801cee0 <_dtoa_r+0x618>)
 801cbda:	f00b 020f 	and.w	r2, fp, #15
 801cbde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cbe2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cbe6:	ed92 7b00 	vldr	d7, [r2]
 801cbea:	ea4f 112b 	mov.w	r1, fp, asr #4
 801cbee:	f000 8087 	beq.w	801cd00 <_dtoa_r+0x438>
 801cbf2:	4abc      	ldr	r2, [pc, #752]	; (801cee4 <_dtoa_r+0x61c>)
 801cbf4:	ed92 6b08 	vldr	d6, [r2, #32]
 801cbf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801cbfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801cc00:	f001 010f 	and.w	r1, r1, #15
 801cc04:	2203      	movs	r2, #3
 801cc06:	48b7      	ldr	r0, [pc, #732]	; (801cee4 <_dtoa_r+0x61c>)
 801cc08:	2900      	cmp	r1, #0
 801cc0a:	d17b      	bne.n	801cd04 <_dtoa_r+0x43c>
 801cc0c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cc10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cc14:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cc18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cc1a:	2900      	cmp	r1, #0
 801cc1c:	f000 80a2 	beq.w	801cd64 <_dtoa_r+0x49c>
 801cc20:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cc24:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cc28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc30:	f140 8098 	bpl.w	801cd64 <_dtoa_r+0x49c>
 801cc34:	f1b9 0f00 	cmp.w	r9, #0
 801cc38:	f000 8094 	beq.w	801cd64 <_dtoa_r+0x49c>
 801cc3c:	f1ba 0f00 	cmp.w	sl, #0
 801cc40:	dd2f      	ble.n	801cca2 <_dtoa_r+0x3da>
 801cc42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801cc46:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cc4e:	f10b 37ff 	add.w	r7, fp, #4294967295
 801cc52:	3201      	adds	r2, #1
 801cc54:	4650      	mov	r0, sl
 801cc56:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cc5a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801cc5e:	ee07 2a90 	vmov	s15, r2
 801cc62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cc66:	eea7 5b06 	vfma.f64	d5, d7, d6
 801cc6a:	ee15 4a90 	vmov	r4, s11
 801cc6e:	ec52 1b15 	vmov	r1, r2, d5
 801cc72:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801cc76:	2800      	cmp	r0, #0
 801cc78:	d177      	bne.n	801cd6a <_dtoa_r+0x4a2>
 801cc7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cc7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cc82:	ec42 1b17 	vmov	d7, r1, r2
 801cc86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8e:	f300 8263 	bgt.w	801d158 <_dtoa_r+0x890>
 801cc92:	eeb1 7b47 	vneg.f64	d7, d7
 801cc96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc9e:	f100 8258 	bmi.w	801d152 <_dtoa_r+0x88a>
 801cca2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801cca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cca8:	2a00      	cmp	r2, #0
 801ccaa:	f2c0 811d 	blt.w	801cee8 <_dtoa_r+0x620>
 801ccae:	f1bb 0f0e 	cmp.w	fp, #14
 801ccb2:	f300 8119 	bgt.w	801cee8 <_dtoa_r+0x620>
 801ccb6:	4b8a      	ldr	r3, [pc, #552]	; (801cee0 <_dtoa_r+0x618>)
 801ccb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ccbc:	ed93 6b00 	vldr	d6, [r3]
 801ccc0:	9b08      	ldr	r3, [sp, #32]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	f280 80b7 	bge.w	801ce36 <_dtoa_r+0x56e>
 801ccc8:	f1b9 0f00 	cmp.w	r9, #0
 801cccc:	f300 80b3 	bgt.w	801ce36 <_dtoa_r+0x56e>
 801ccd0:	f040 823f 	bne.w	801d152 <_dtoa_r+0x88a>
 801ccd4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ccd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ccdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cce0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cce8:	464c      	mov	r4, r9
 801ccea:	464f      	mov	r7, r9
 801ccec:	f280 8215 	bge.w	801d11a <_dtoa_r+0x852>
 801ccf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ccf4:	2331      	movs	r3, #49	; 0x31
 801ccf6:	f808 3b01 	strb.w	r3, [r8], #1
 801ccfa:	f10b 0b01 	add.w	fp, fp, #1
 801ccfe:	e211      	b.n	801d124 <_dtoa_r+0x85c>
 801cd00:	2202      	movs	r2, #2
 801cd02:	e780      	b.n	801cc06 <_dtoa_r+0x33e>
 801cd04:	07cc      	lsls	r4, r1, #31
 801cd06:	d504      	bpl.n	801cd12 <_dtoa_r+0x44a>
 801cd08:	ed90 6b00 	vldr	d6, [r0]
 801cd0c:	3201      	adds	r2, #1
 801cd0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd12:	1049      	asrs	r1, r1, #1
 801cd14:	3008      	adds	r0, #8
 801cd16:	e777      	b.n	801cc08 <_dtoa_r+0x340>
 801cd18:	d022      	beq.n	801cd60 <_dtoa_r+0x498>
 801cd1a:	f1cb 0100 	rsb	r1, fp, #0
 801cd1e:	4a70      	ldr	r2, [pc, #448]	; (801cee0 <_dtoa_r+0x618>)
 801cd20:	f001 000f 	and.w	r0, r1, #15
 801cd24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cd28:	ed92 7b00 	vldr	d7, [r2]
 801cd2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801cd30:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd34:	486b      	ldr	r0, [pc, #428]	; (801cee4 <_dtoa_r+0x61c>)
 801cd36:	1109      	asrs	r1, r1, #4
 801cd38:	2400      	movs	r4, #0
 801cd3a:	2202      	movs	r2, #2
 801cd3c:	b929      	cbnz	r1, 801cd4a <_dtoa_r+0x482>
 801cd3e:	2c00      	cmp	r4, #0
 801cd40:	f43f af6a 	beq.w	801cc18 <_dtoa_r+0x350>
 801cd44:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd48:	e766      	b.n	801cc18 <_dtoa_r+0x350>
 801cd4a:	07cf      	lsls	r7, r1, #31
 801cd4c:	d505      	bpl.n	801cd5a <_dtoa_r+0x492>
 801cd4e:	ed90 6b00 	vldr	d6, [r0]
 801cd52:	3201      	adds	r2, #1
 801cd54:	2401      	movs	r4, #1
 801cd56:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd5a:	1049      	asrs	r1, r1, #1
 801cd5c:	3008      	adds	r0, #8
 801cd5e:	e7ed      	b.n	801cd3c <_dtoa_r+0x474>
 801cd60:	2202      	movs	r2, #2
 801cd62:	e759      	b.n	801cc18 <_dtoa_r+0x350>
 801cd64:	465f      	mov	r7, fp
 801cd66:	4648      	mov	r0, r9
 801cd68:	e775      	b.n	801cc56 <_dtoa_r+0x38e>
 801cd6a:	ec42 1b17 	vmov	d7, r1, r2
 801cd6e:	4a5c      	ldr	r2, [pc, #368]	; (801cee0 <_dtoa_r+0x618>)
 801cd70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cd74:	ed12 4b02 	vldr	d4, [r2, #-8]
 801cd78:	9a01      	ldr	r2, [sp, #4]
 801cd7a:	1814      	adds	r4, r2, r0
 801cd7c:	9a07      	ldr	r2, [sp, #28]
 801cd7e:	b352      	cbz	r2, 801cdd6 <_dtoa_r+0x50e>
 801cd80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801cd84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801cd88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cd8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801cd90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cd94:	ee35 7b47 	vsub.f64	d7, d5, d7
 801cd98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cd9c:	ee14 2a90 	vmov	r2, s9
 801cda0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cda4:	3230      	adds	r2, #48	; 0x30
 801cda6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cdaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdb2:	f808 2b01 	strb.w	r2, [r8], #1
 801cdb6:	d439      	bmi.n	801ce2c <_dtoa_r+0x564>
 801cdb8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801cdbc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdc4:	d472      	bmi.n	801ceac <_dtoa_r+0x5e4>
 801cdc6:	45a0      	cmp	r8, r4
 801cdc8:	f43f af6b 	beq.w	801cca2 <_dtoa_r+0x3da>
 801cdcc:	ee27 7b03 	vmul.f64	d7, d7, d3
 801cdd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cdd4:	e7e0      	b.n	801cd98 <_dtoa_r+0x4d0>
 801cdd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cdda:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cdde:	4621      	mov	r1, r4
 801cde0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cde4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cde8:	ee14 2a90 	vmov	r2, s9
 801cdec:	3230      	adds	r2, #48	; 0x30
 801cdee:	f808 2b01 	strb.w	r2, [r8], #1
 801cdf2:	45a0      	cmp	r8, r4
 801cdf4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cdf8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cdfc:	d118      	bne.n	801ce30 <_dtoa_r+0x568>
 801cdfe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ce02:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ce06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ce0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce0e:	dc4d      	bgt.n	801ceac <_dtoa_r+0x5e4>
 801ce10:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ce14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce1c:	f57f af41 	bpl.w	801cca2 <_dtoa_r+0x3da>
 801ce20:	4688      	mov	r8, r1
 801ce22:	3901      	subs	r1, #1
 801ce24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ce28:	2b30      	cmp	r3, #48	; 0x30
 801ce2a:	d0f9      	beq.n	801ce20 <_dtoa_r+0x558>
 801ce2c:	46bb      	mov	fp, r7
 801ce2e:	e02a      	b.n	801ce86 <_dtoa_r+0x5be>
 801ce30:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ce34:	e7d6      	b.n	801cde4 <_dtoa_r+0x51c>
 801ce36:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801ce3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801ce46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801ce4a:	ee15 3a10 	vmov	r3, s10
 801ce4e:	3330      	adds	r3, #48	; 0x30
 801ce50:	f808 3b01 	strb.w	r3, [r8], #1
 801ce54:	9b01      	ldr	r3, [sp, #4]
 801ce56:	eba8 0303 	sub.w	r3, r8, r3
 801ce5a:	4599      	cmp	r9, r3
 801ce5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801ce60:	eea3 7b46 	vfms.f64	d7, d3, d6
 801ce64:	d133      	bne.n	801cece <_dtoa_r+0x606>
 801ce66:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ce6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce72:	dc1a      	bgt.n	801ceaa <_dtoa_r+0x5e2>
 801ce74:	eeb4 7b46 	vcmp.f64	d7, d6
 801ce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce7c:	d103      	bne.n	801ce86 <_dtoa_r+0x5be>
 801ce7e:	ee15 3a10 	vmov	r3, s10
 801ce82:	07d9      	lsls	r1, r3, #31
 801ce84:	d411      	bmi.n	801ceaa <_dtoa_r+0x5e2>
 801ce86:	4629      	mov	r1, r5
 801ce88:	4630      	mov	r0, r6
 801ce8a:	f000 fe6b 	bl	801db64 <_Bfree>
 801ce8e:	2300      	movs	r3, #0
 801ce90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce92:	f888 3000 	strb.w	r3, [r8]
 801ce96:	f10b 0301 	add.w	r3, fp, #1
 801ce9a:	6013      	str	r3, [r2, #0]
 801ce9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	f43f ad61 	beq.w	801c966 <_dtoa_r+0x9e>
 801cea4:	f8c3 8000 	str.w	r8, [r3]
 801cea8:	e55d      	b.n	801c966 <_dtoa_r+0x9e>
 801ceaa:	465f      	mov	r7, fp
 801ceac:	4643      	mov	r3, r8
 801ceae:	4698      	mov	r8, r3
 801ceb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ceb4:	2a39      	cmp	r2, #57	; 0x39
 801ceb6:	d106      	bne.n	801cec6 <_dtoa_r+0x5fe>
 801ceb8:	9a01      	ldr	r2, [sp, #4]
 801ceba:	429a      	cmp	r2, r3
 801cebc:	d1f7      	bne.n	801ceae <_dtoa_r+0x5e6>
 801cebe:	9901      	ldr	r1, [sp, #4]
 801cec0:	2230      	movs	r2, #48	; 0x30
 801cec2:	3701      	adds	r7, #1
 801cec4:	700a      	strb	r2, [r1, #0]
 801cec6:	781a      	ldrb	r2, [r3, #0]
 801cec8:	3201      	adds	r2, #1
 801ceca:	701a      	strb	r2, [r3, #0]
 801cecc:	e7ae      	b.n	801ce2c <_dtoa_r+0x564>
 801cece:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ced2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ced6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceda:	d1b2      	bne.n	801ce42 <_dtoa_r+0x57a>
 801cedc:	e7d3      	b.n	801ce86 <_dtoa_r+0x5be>
 801cede:	bf00      	nop
 801cee0:	0801fe98 	.word	0x0801fe98
 801cee4:	0801fe70 	.word	0x0801fe70
 801cee8:	9907      	ldr	r1, [sp, #28]
 801ceea:	2900      	cmp	r1, #0
 801ceec:	f000 80d0 	beq.w	801d090 <_dtoa_r+0x7c8>
 801cef0:	9906      	ldr	r1, [sp, #24]
 801cef2:	2901      	cmp	r1, #1
 801cef4:	f300 80b4 	bgt.w	801d060 <_dtoa_r+0x798>
 801cef8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cefa:	2900      	cmp	r1, #0
 801cefc:	f000 80ac 	beq.w	801d058 <_dtoa_r+0x790>
 801cf00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cf04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cf08:	461c      	mov	r4, r3
 801cf0a:	930a      	str	r3, [sp, #40]	; 0x28
 801cf0c:	9b04      	ldr	r3, [sp, #16]
 801cf0e:	4413      	add	r3, r2
 801cf10:	9304      	str	r3, [sp, #16]
 801cf12:	9b05      	ldr	r3, [sp, #20]
 801cf14:	2101      	movs	r1, #1
 801cf16:	4413      	add	r3, r2
 801cf18:	4630      	mov	r0, r6
 801cf1a:	9305      	str	r3, [sp, #20]
 801cf1c:	f000 ff24 	bl	801dd68 <__i2b>
 801cf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf22:	4607      	mov	r7, r0
 801cf24:	f1b8 0f00 	cmp.w	r8, #0
 801cf28:	dd0d      	ble.n	801cf46 <_dtoa_r+0x67e>
 801cf2a:	9a05      	ldr	r2, [sp, #20]
 801cf2c:	2a00      	cmp	r2, #0
 801cf2e:	dd0a      	ble.n	801cf46 <_dtoa_r+0x67e>
 801cf30:	4542      	cmp	r2, r8
 801cf32:	9904      	ldr	r1, [sp, #16]
 801cf34:	bfa8      	it	ge
 801cf36:	4642      	movge	r2, r8
 801cf38:	1a89      	subs	r1, r1, r2
 801cf3a:	9104      	str	r1, [sp, #16]
 801cf3c:	9905      	ldr	r1, [sp, #20]
 801cf3e:	eba8 0802 	sub.w	r8, r8, r2
 801cf42:	1a8a      	subs	r2, r1, r2
 801cf44:	9205      	str	r2, [sp, #20]
 801cf46:	b303      	cbz	r3, 801cf8a <_dtoa_r+0x6c2>
 801cf48:	9a07      	ldr	r2, [sp, #28]
 801cf4a:	2a00      	cmp	r2, #0
 801cf4c:	f000 80a5 	beq.w	801d09a <_dtoa_r+0x7d2>
 801cf50:	2c00      	cmp	r4, #0
 801cf52:	dd13      	ble.n	801cf7c <_dtoa_r+0x6b4>
 801cf54:	4639      	mov	r1, r7
 801cf56:	4622      	mov	r2, r4
 801cf58:	4630      	mov	r0, r6
 801cf5a:	930d      	str	r3, [sp, #52]	; 0x34
 801cf5c:	f000 ffc4 	bl	801dee8 <__pow5mult>
 801cf60:	462a      	mov	r2, r5
 801cf62:	4601      	mov	r1, r0
 801cf64:	4607      	mov	r7, r0
 801cf66:	4630      	mov	r0, r6
 801cf68:	f000 ff14 	bl	801dd94 <__multiply>
 801cf6c:	4629      	mov	r1, r5
 801cf6e:	900a      	str	r0, [sp, #40]	; 0x28
 801cf70:	4630      	mov	r0, r6
 801cf72:	f000 fdf7 	bl	801db64 <_Bfree>
 801cf76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf7a:	4615      	mov	r5, r2
 801cf7c:	1b1a      	subs	r2, r3, r4
 801cf7e:	d004      	beq.n	801cf8a <_dtoa_r+0x6c2>
 801cf80:	4629      	mov	r1, r5
 801cf82:	4630      	mov	r0, r6
 801cf84:	f000 ffb0 	bl	801dee8 <__pow5mult>
 801cf88:	4605      	mov	r5, r0
 801cf8a:	2101      	movs	r1, #1
 801cf8c:	4630      	mov	r0, r6
 801cf8e:	f000 feeb 	bl	801dd68 <__i2b>
 801cf92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	4604      	mov	r4, r0
 801cf98:	f340 8081 	ble.w	801d09e <_dtoa_r+0x7d6>
 801cf9c:	461a      	mov	r2, r3
 801cf9e:	4601      	mov	r1, r0
 801cfa0:	4630      	mov	r0, r6
 801cfa2:	f000 ffa1 	bl	801dee8 <__pow5mult>
 801cfa6:	9b06      	ldr	r3, [sp, #24]
 801cfa8:	2b01      	cmp	r3, #1
 801cfaa:	4604      	mov	r4, r0
 801cfac:	dd7a      	ble.n	801d0a4 <_dtoa_r+0x7dc>
 801cfae:	2300      	movs	r3, #0
 801cfb0:	930a      	str	r3, [sp, #40]	; 0x28
 801cfb2:	6922      	ldr	r2, [r4, #16]
 801cfb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cfb8:	6910      	ldr	r0, [r2, #16]
 801cfba:	f000 fe85 	bl	801dcc8 <__hi0bits>
 801cfbe:	f1c0 0020 	rsb	r0, r0, #32
 801cfc2:	9b05      	ldr	r3, [sp, #20]
 801cfc4:	4418      	add	r0, r3
 801cfc6:	f010 001f 	ands.w	r0, r0, #31
 801cfca:	f000 808c 	beq.w	801d0e6 <_dtoa_r+0x81e>
 801cfce:	f1c0 0220 	rsb	r2, r0, #32
 801cfd2:	2a04      	cmp	r2, #4
 801cfd4:	f340 8085 	ble.w	801d0e2 <_dtoa_r+0x81a>
 801cfd8:	f1c0 001c 	rsb	r0, r0, #28
 801cfdc:	9b04      	ldr	r3, [sp, #16]
 801cfde:	4403      	add	r3, r0
 801cfe0:	9304      	str	r3, [sp, #16]
 801cfe2:	9b05      	ldr	r3, [sp, #20]
 801cfe4:	4403      	add	r3, r0
 801cfe6:	4480      	add	r8, r0
 801cfe8:	9305      	str	r3, [sp, #20]
 801cfea:	9b04      	ldr	r3, [sp, #16]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	dd05      	ble.n	801cffc <_dtoa_r+0x734>
 801cff0:	4629      	mov	r1, r5
 801cff2:	461a      	mov	r2, r3
 801cff4:	4630      	mov	r0, r6
 801cff6:	f000 ffd1 	bl	801df9c <__lshift>
 801cffa:	4605      	mov	r5, r0
 801cffc:	9b05      	ldr	r3, [sp, #20]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	dd05      	ble.n	801d00e <_dtoa_r+0x746>
 801d002:	4621      	mov	r1, r4
 801d004:	461a      	mov	r2, r3
 801d006:	4630      	mov	r0, r6
 801d008:	f000 ffc8 	bl	801df9c <__lshift>
 801d00c:	4604      	mov	r4, r0
 801d00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d010:	2b00      	cmp	r3, #0
 801d012:	d06a      	beq.n	801d0ea <_dtoa_r+0x822>
 801d014:	4621      	mov	r1, r4
 801d016:	4628      	mov	r0, r5
 801d018:	f001 f830 	bl	801e07c <__mcmp>
 801d01c:	2800      	cmp	r0, #0
 801d01e:	da64      	bge.n	801d0ea <_dtoa_r+0x822>
 801d020:	2300      	movs	r3, #0
 801d022:	4629      	mov	r1, r5
 801d024:	220a      	movs	r2, #10
 801d026:	4630      	mov	r0, r6
 801d028:	f000 fdbe 	bl	801dba8 <__multadd>
 801d02c:	9b07      	ldr	r3, [sp, #28]
 801d02e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d032:	4605      	mov	r5, r0
 801d034:	2b00      	cmp	r3, #0
 801d036:	f000 8191 	beq.w	801d35c <_dtoa_r+0xa94>
 801d03a:	4639      	mov	r1, r7
 801d03c:	2300      	movs	r3, #0
 801d03e:	220a      	movs	r2, #10
 801d040:	4630      	mov	r0, r6
 801d042:	f000 fdb1 	bl	801dba8 <__multadd>
 801d046:	f1ba 0f00 	cmp.w	sl, #0
 801d04a:	4607      	mov	r7, r0
 801d04c:	f300 808d 	bgt.w	801d16a <_dtoa_r+0x8a2>
 801d050:	9b06      	ldr	r3, [sp, #24]
 801d052:	2b02      	cmp	r3, #2
 801d054:	dc50      	bgt.n	801d0f8 <_dtoa_r+0x830>
 801d056:	e088      	b.n	801d16a <_dtoa_r+0x8a2>
 801d058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d05a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d05e:	e751      	b.n	801cf04 <_dtoa_r+0x63c>
 801d060:	f109 34ff 	add.w	r4, r9, #4294967295
 801d064:	42a3      	cmp	r3, r4
 801d066:	bfbf      	itttt	lt
 801d068:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801d06a:	1ae3      	sublt	r3, r4, r3
 801d06c:	18d2      	addlt	r2, r2, r3
 801d06e:	9209      	strlt	r2, [sp, #36]	; 0x24
 801d070:	bfb6      	itet	lt
 801d072:	4623      	movlt	r3, r4
 801d074:	1b1c      	subge	r4, r3, r4
 801d076:	2400      	movlt	r4, #0
 801d078:	f1b9 0f00 	cmp.w	r9, #0
 801d07c:	bfb5      	itete	lt
 801d07e:	9a04      	ldrlt	r2, [sp, #16]
 801d080:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801d084:	eba2 0809 	sublt.w	r8, r2, r9
 801d088:	464a      	movge	r2, r9
 801d08a:	bfb8      	it	lt
 801d08c:	2200      	movlt	r2, #0
 801d08e:	e73c      	b.n	801cf0a <_dtoa_r+0x642>
 801d090:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d094:	9f07      	ldr	r7, [sp, #28]
 801d096:	461c      	mov	r4, r3
 801d098:	e744      	b.n	801cf24 <_dtoa_r+0x65c>
 801d09a:	461a      	mov	r2, r3
 801d09c:	e770      	b.n	801cf80 <_dtoa_r+0x6b8>
 801d09e:	9b06      	ldr	r3, [sp, #24]
 801d0a0:	2b01      	cmp	r3, #1
 801d0a2:	dc18      	bgt.n	801d0d6 <_dtoa_r+0x80e>
 801d0a4:	9b02      	ldr	r3, [sp, #8]
 801d0a6:	b9b3      	cbnz	r3, 801d0d6 <_dtoa_r+0x80e>
 801d0a8:	9b03      	ldr	r3, [sp, #12]
 801d0aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d0ae:	b9a2      	cbnz	r2, 801d0da <_dtoa_r+0x812>
 801d0b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d0b4:	0d12      	lsrs	r2, r2, #20
 801d0b6:	0512      	lsls	r2, r2, #20
 801d0b8:	b18a      	cbz	r2, 801d0de <_dtoa_r+0x816>
 801d0ba:	9b04      	ldr	r3, [sp, #16]
 801d0bc:	3301      	adds	r3, #1
 801d0be:	9304      	str	r3, [sp, #16]
 801d0c0:	9b05      	ldr	r3, [sp, #20]
 801d0c2:	3301      	adds	r3, #1
 801d0c4:	9305      	str	r3, [sp, #20]
 801d0c6:	2301      	movs	r3, #1
 801d0c8:	930a      	str	r3, [sp, #40]	; 0x28
 801d0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	f47f af70 	bne.w	801cfb2 <_dtoa_r+0x6ea>
 801d0d2:	2001      	movs	r0, #1
 801d0d4:	e775      	b.n	801cfc2 <_dtoa_r+0x6fa>
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	e7f6      	b.n	801d0c8 <_dtoa_r+0x800>
 801d0da:	9b02      	ldr	r3, [sp, #8]
 801d0dc:	e7f4      	b.n	801d0c8 <_dtoa_r+0x800>
 801d0de:	920a      	str	r2, [sp, #40]	; 0x28
 801d0e0:	e7f3      	b.n	801d0ca <_dtoa_r+0x802>
 801d0e2:	d082      	beq.n	801cfea <_dtoa_r+0x722>
 801d0e4:	4610      	mov	r0, r2
 801d0e6:	301c      	adds	r0, #28
 801d0e8:	e778      	b.n	801cfdc <_dtoa_r+0x714>
 801d0ea:	f1b9 0f00 	cmp.w	r9, #0
 801d0ee:	dc37      	bgt.n	801d160 <_dtoa_r+0x898>
 801d0f0:	9b06      	ldr	r3, [sp, #24]
 801d0f2:	2b02      	cmp	r3, #2
 801d0f4:	dd34      	ble.n	801d160 <_dtoa_r+0x898>
 801d0f6:	46ca      	mov	sl, r9
 801d0f8:	f1ba 0f00 	cmp.w	sl, #0
 801d0fc:	d10d      	bne.n	801d11a <_dtoa_r+0x852>
 801d0fe:	4621      	mov	r1, r4
 801d100:	4653      	mov	r3, sl
 801d102:	2205      	movs	r2, #5
 801d104:	4630      	mov	r0, r6
 801d106:	f000 fd4f 	bl	801dba8 <__multadd>
 801d10a:	4601      	mov	r1, r0
 801d10c:	4604      	mov	r4, r0
 801d10e:	4628      	mov	r0, r5
 801d110:	f000 ffb4 	bl	801e07c <__mcmp>
 801d114:	2800      	cmp	r0, #0
 801d116:	f73f adeb 	bgt.w	801ccf0 <_dtoa_r+0x428>
 801d11a:	9b08      	ldr	r3, [sp, #32]
 801d11c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d120:	ea6f 0b03 	mvn.w	fp, r3
 801d124:	f04f 0900 	mov.w	r9, #0
 801d128:	4621      	mov	r1, r4
 801d12a:	4630      	mov	r0, r6
 801d12c:	f000 fd1a 	bl	801db64 <_Bfree>
 801d130:	2f00      	cmp	r7, #0
 801d132:	f43f aea8 	beq.w	801ce86 <_dtoa_r+0x5be>
 801d136:	f1b9 0f00 	cmp.w	r9, #0
 801d13a:	d005      	beq.n	801d148 <_dtoa_r+0x880>
 801d13c:	45b9      	cmp	r9, r7
 801d13e:	d003      	beq.n	801d148 <_dtoa_r+0x880>
 801d140:	4649      	mov	r1, r9
 801d142:	4630      	mov	r0, r6
 801d144:	f000 fd0e 	bl	801db64 <_Bfree>
 801d148:	4639      	mov	r1, r7
 801d14a:	4630      	mov	r0, r6
 801d14c:	f000 fd0a 	bl	801db64 <_Bfree>
 801d150:	e699      	b.n	801ce86 <_dtoa_r+0x5be>
 801d152:	2400      	movs	r4, #0
 801d154:	4627      	mov	r7, r4
 801d156:	e7e0      	b.n	801d11a <_dtoa_r+0x852>
 801d158:	46bb      	mov	fp, r7
 801d15a:	4604      	mov	r4, r0
 801d15c:	4607      	mov	r7, r0
 801d15e:	e5c7      	b.n	801ccf0 <_dtoa_r+0x428>
 801d160:	9b07      	ldr	r3, [sp, #28]
 801d162:	46ca      	mov	sl, r9
 801d164:	2b00      	cmp	r3, #0
 801d166:	f000 8100 	beq.w	801d36a <_dtoa_r+0xaa2>
 801d16a:	f1b8 0f00 	cmp.w	r8, #0
 801d16e:	dd05      	ble.n	801d17c <_dtoa_r+0x8b4>
 801d170:	4639      	mov	r1, r7
 801d172:	4642      	mov	r2, r8
 801d174:	4630      	mov	r0, r6
 801d176:	f000 ff11 	bl	801df9c <__lshift>
 801d17a:	4607      	mov	r7, r0
 801d17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d05d      	beq.n	801d23e <_dtoa_r+0x976>
 801d182:	6879      	ldr	r1, [r7, #4]
 801d184:	4630      	mov	r0, r6
 801d186:	f000 fcad 	bl	801dae4 <_Balloc>
 801d18a:	4680      	mov	r8, r0
 801d18c:	b928      	cbnz	r0, 801d19a <_dtoa_r+0x8d2>
 801d18e:	4b82      	ldr	r3, [pc, #520]	; (801d398 <_dtoa_r+0xad0>)
 801d190:	4602      	mov	r2, r0
 801d192:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d196:	f7ff bbaf 	b.w	801c8f8 <_dtoa_r+0x30>
 801d19a:	693a      	ldr	r2, [r7, #16]
 801d19c:	3202      	adds	r2, #2
 801d19e:	0092      	lsls	r2, r2, #2
 801d1a0:	f107 010c 	add.w	r1, r7, #12
 801d1a4:	300c      	adds	r0, #12
 801d1a6:	f7fd fdb5 	bl	801ad14 <memcpy>
 801d1aa:	2201      	movs	r2, #1
 801d1ac:	4641      	mov	r1, r8
 801d1ae:	4630      	mov	r0, r6
 801d1b0:	f000 fef4 	bl	801df9c <__lshift>
 801d1b4:	9b01      	ldr	r3, [sp, #4]
 801d1b6:	3301      	adds	r3, #1
 801d1b8:	9304      	str	r3, [sp, #16]
 801d1ba:	9b01      	ldr	r3, [sp, #4]
 801d1bc:	4453      	add	r3, sl
 801d1be:	9308      	str	r3, [sp, #32]
 801d1c0:	9b02      	ldr	r3, [sp, #8]
 801d1c2:	f003 0301 	and.w	r3, r3, #1
 801d1c6:	46b9      	mov	r9, r7
 801d1c8:	9307      	str	r3, [sp, #28]
 801d1ca:	4607      	mov	r7, r0
 801d1cc:	9b04      	ldr	r3, [sp, #16]
 801d1ce:	4621      	mov	r1, r4
 801d1d0:	3b01      	subs	r3, #1
 801d1d2:	4628      	mov	r0, r5
 801d1d4:	9302      	str	r3, [sp, #8]
 801d1d6:	f7ff fae9 	bl	801c7ac <quorem>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	3330      	adds	r3, #48	; 0x30
 801d1de:	9005      	str	r0, [sp, #20]
 801d1e0:	4649      	mov	r1, r9
 801d1e2:	4628      	mov	r0, r5
 801d1e4:	9309      	str	r3, [sp, #36]	; 0x24
 801d1e6:	f000 ff49 	bl	801e07c <__mcmp>
 801d1ea:	463a      	mov	r2, r7
 801d1ec:	4682      	mov	sl, r0
 801d1ee:	4621      	mov	r1, r4
 801d1f0:	4630      	mov	r0, r6
 801d1f2:	f000 ff5f 	bl	801e0b4 <__mdiff>
 801d1f6:	68c2      	ldr	r2, [r0, #12]
 801d1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1fa:	4680      	mov	r8, r0
 801d1fc:	bb0a      	cbnz	r2, 801d242 <_dtoa_r+0x97a>
 801d1fe:	4601      	mov	r1, r0
 801d200:	4628      	mov	r0, r5
 801d202:	f000 ff3b 	bl	801e07c <__mcmp>
 801d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d208:	4602      	mov	r2, r0
 801d20a:	4641      	mov	r1, r8
 801d20c:	4630      	mov	r0, r6
 801d20e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801d212:	f000 fca7 	bl	801db64 <_Bfree>
 801d216:	9b06      	ldr	r3, [sp, #24]
 801d218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d21a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d21e:	ea43 0102 	orr.w	r1, r3, r2
 801d222:	9b07      	ldr	r3, [sp, #28]
 801d224:	430b      	orrs	r3, r1
 801d226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d228:	d10d      	bne.n	801d246 <_dtoa_r+0x97e>
 801d22a:	2b39      	cmp	r3, #57	; 0x39
 801d22c:	d029      	beq.n	801d282 <_dtoa_r+0x9ba>
 801d22e:	f1ba 0f00 	cmp.w	sl, #0
 801d232:	dd01      	ble.n	801d238 <_dtoa_r+0x970>
 801d234:	9b05      	ldr	r3, [sp, #20]
 801d236:	3331      	adds	r3, #49	; 0x31
 801d238:	9a02      	ldr	r2, [sp, #8]
 801d23a:	7013      	strb	r3, [r2, #0]
 801d23c:	e774      	b.n	801d128 <_dtoa_r+0x860>
 801d23e:	4638      	mov	r0, r7
 801d240:	e7b8      	b.n	801d1b4 <_dtoa_r+0x8ec>
 801d242:	2201      	movs	r2, #1
 801d244:	e7e1      	b.n	801d20a <_dtoa_r+0x942>
 801d246:	f1ba 0f00 	cmp.w	sl, #0
 801d24a:	db06      	blt.n	801d25a <_dtoa_r+0x992>
 801d24c:	9906      	ldr	r1, [sp, #24]
 801d24e:	ea41 0a0a 	orr.w	sl, r1, sl
 801d252:	9907      	ldr	r1, [sp, #28]
 801d254:	ea5a 0101 	orrs.w	r1, sl, r1
 801d258:	d120      	bne.n	801d29c <_dtoa_r+0x9d4>
 801d25a:	2a00      	cmp	r2, #0
 801d25c:	ddec      	ble.n	801d238 <_dtoa_r+0x970>
 801d25e:	4629      	mov	r1, r5
 801d260:	2201      	movs	r2, #1
 801d262:	4630      	mov	r0, r6
 801d264:	9304      	str	r3, [sp, #16]
 801d266:	f000 fe99 	bl	801df9c <__lshift>
 801d26a:	4621      	mov	r1, r4
 801d26c:	4605      	mov	r5, r0
 801d26e:	f000 ff05 	bl	801e07c <__mcmp>
 801d272:	2800      	cmp	r0, #0
 801d274:	9b04      	ldr	r3, [sp, #16]
 801d276:	dc02      	bgt.n	801d27e <_dtoa_r+0x9b6>
 801d278:	d1de      	bne.n	801d238 <_dtoa_r+0x970>
 801d27a:	07da      	lsls	r2, r3, #31
 801d27c:	d5dc      	bpl.n	801d238 <_dtoa_r+0x970>
 801d27e:	2b39      	cmp	r3, #57	; 0x39
 801d280:	d1d8      	bne.n	801d234 <_dtoa_r+0x96c>
 801d282:	9a02      	ldr	r2, [sp, #8]
 801d284:	2339      	movs	r3, #57	; 0x39
 801d286:	7013      	strb	r3, [r2, #0]
 801d288:	4643      	mov	r3, r8
 801d28a:	4698      	mov	r8, r3
 801d28c:	3b01      	subs	r3, #1
 801d28e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d292:	2a39      	cmp	r2, #57	; 0x39
 801d294:	d051      	beq.n	801d33a <_dtoa_r+0xa72>
 801d296:	3201      	adds	r2, #1
 801d298:	701a      	strb	r2, [r3, #0]
 801d29a:	e745      	b.n	801d128 <_dtoa_r+0x860>
 801d29c:	2a00      	cmp	r2, #0
 801d29e:	dd03      	ble.n	801d2a8 <_dtoa_r+0x9e0>
 801d2a0:	2b39      	cmp	r3, #57	; 0x39
 801d2a2:	d0ee      	beq.n	801d282 <_dtoa_r+0x9ba>
 801d2a4:	3301      	adds	r3, #1
 801d2a6:	e7c7      	b.n	801d238 <_dtoa_r+0x970>
 801d2a8:	9a04      	ldr	r2, [sp, #16]
 801d2aa:	9908      	ldr	r1, [sp, #32]
 801d2ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d2b0:	428a      	cmp	r2, r1
 801d2b2:	d02b      	beq.n	801d30c <_dtoa_r+0xa44>
 801d2b4:	4629      	mov	r1, r5
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	220a      	movs	r2, #10
 801d2ba:	4630      	mov	r0, r6
 801d2bc:	f000 fc74 	bl	801dba8 <__multadd>
 801d2c0:	45b9      	cmp	r9, r7
 801d2c2:	4605      	mov	r5, r0
 801d2c4:	f04f 0300 	mov.w	r3, #0
 801d2c8:	f04f 020a 	mov.w	r2, #10
 801d2cc:	4649      	mov	r1, r9
 801d2ce:	4630      	mov	r0, r6
 801d2d0:	d107      	bne.n	801d2e2 <_dtoa_r+0xa1a>
 801d2d2:	f000 fc69 	bl	801dba8 <__multadd>
 801d2d6:	4681      	mov	r9, r0
 801d2d8:	4607      	mov	r7, r0
 801d2da:	9b04      	ldr	r3, [sp, #16]
 801d2dc:	3301      	adds	r3, #1
 801d2de:	9304      	str	r3, [sp, #16]
 801d2e0:	e774      	b.n	801d1cc <_dtoa_r+0x904>
 801d2e2:	f000 fc61 	bl	801dba8 <__multadd>
 801d2e6:	4639      	mov	r1, r7
 801d2e8:	4681      	mov	r9, r0
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	220a      	movs	r2, #10
 801d2ee:	4630      	mov	r0, r6
 801d2f0:	f000 fc5a 	bl	801dba8 <__multadd>
 801d2f4:	4607      	mov	r7, r0
 801d2f6:	e7f0      	b.n	801d2da <_dtoa_r+0xa12>
 801d2f8:	f1ba 0f00 	cmp.w	sl, #0
 801d2fc:	9a01      	ldr	r2, [sp, #4]
 801d2fe:	bfcc      	ite	gt
 801d300:	46d0      	movgt	r8, sl
 801d302:	f04f 0801 	movle.w	r8, #1
 801d306:	4490      	add	r8, r2
 801d308:	f04f 0900 	mov.w	r9, #0
 801d30c:	4629      	mov	r1, r5
 801d30e:	2201      	movs	r2, #1
 801d310:	4630      	mov	r0, r6
 801d312:	9302      	str	r3, [sp, #8]
 801d314:	f000 fe42 	bl	801df9c <__lshift>
 801d318:	4621      	mov	r1, r4
 801d31a:	4605      	mov	r5, r0
 801d31c:	f000 feae 	bl	801e07c <__mcmp>
 801d320:	2800      	cmp	r0, #0
 801d322:	dcb1      	bgt.n	801d288 <_dtoa_r+0x9c0>
 801d324:	d102      	bne.n	801d32c <_dtoa_r+0xa64>
 801d326:	9b02      	ldr	r3, [sp, #8]
 801d328:	07db      	lsls	r3, r3, #31
 801d32a:	d4ad      	bmi.n	801d288 <_dtoa_r+0x9c0>
 801d32c:	4643      	mov	r3, r8
 801d32e:	4698      	mov	r8, r3
 801d330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d334:	2a30      	cmp	r2, #48	; 0x30
 801d336:	d0fa      	beq.n	801d32e <_dtoa_r+0xa66>
 801d338:	e6f6      	b.n	801d128 <_dtoa_r+0x860>
 801d33a:	9a01      	ldr	r2, [sp, #4]
 801d33c:	429a      	cmp	r2, r3
 801d33e:	d1a4      	bne.n	801d28a <_dtoa_r+0x9c2>
 801d340:	f10b 0b01 	add.w	fp, fp, #1
 801d344:	2331      	movs	r3, #49	; 0x31
 801d346:	e778      	b.n	801d23a <_dtoa_r+0x972>
 801d348:	4b14      	ldr	r3, [pc, #80]	; (801d39c <_dtoa_r+0xad4>)
 801d34a:	f7ff bb27 	b.w	801c99c <_dtoa_r+0xd4>
 801d34e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d350:	2b00      	cmp	r3, #0
 801d352:	f47f ab03 	bne.w	801c95c <_dtoa_r+0x94>
 801d356:	4b12      	ldr	r3, [pc, #72]	; (801d3a0 <_dtoa_r+0xad8>)
 801d358:	f7ff bb20 	b.w	801c99c <_dtoa_r+0xd4>
 801d35c:	f1ba 0f00 	cmp.w	sl, #0
 801d360:	dc03      	bgt.n	801d36a <_dtoa_r+0xaa2>
 801d362:	9b06      	ldr	r3, [sp, #24]
 801d364:	2b02      	cmp	r3, #2
 801d366:	f73f aec7 	bgt.w	801d0f8 <_dtoa_r+0x830>
 801d36a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d36e:	4621      	mov	r1, r4
 801d370:	4628      	mov	r0, r5
 801d372:	f7ff fa1b 	bl	801c7ac <quorem>
 801d376:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d37a:	f808 3b01 	strb.w	r3, [r8], #1
 801d37e:	9a01      	ldr	r2, [sp, #4]
 801d380:	eba8 0202 	sub.w	r2, r8, r2
 801d384:	4592      	cmp	sl, r2
 801d386:	ddb7      	ble.n	801d2f8 <_dtoa_r+0xa30>
 801d388:	4629      	mov	r1, r5
 801d38a:	2300      	movs	r3, #0
 801d38c:	220a      	movs	r2, #10
 801d38e:	4630      	mov	r0, r6
 801d390:	f000 fc0a 	bl	801dba8 <__multadd>
 801d394:	4605      	mov	r5, r0
 801d396:	e7ea      	b.n	801d36e <_dtoa_r+0xaa6>
 801d398:	0801fd88 	.word	0x0801fd88
 801d39c:	0801fb8c 	.word	0x0801fb8c
 801d3a0:	0801fd09 	.word	0x0801fd09

0801d3a4 <rshift>:
 801d3a4:	6903      	ldr	r3, [r0, #16]
 801d3a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d3aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d3ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d3b2:	f100 0414 	add.w	r4, r0, #20
 801d3b6:	dd45      	ble.n	801d444 <rshift+0xa0>
 801d3b8:	f011 011f 	ands.w	r1, r1, #31
 801d3bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d3c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d3c4:	d10c      	bne.n	801d3e0 <rshift+0x3c>
 801d3c6:	f100 0710 	add.w	r7, r0, #16
 801d3ca:	4629      	mov	r1, r5
 801d3cc:	42b1      	cmp	r1, r6
 801d3ce:	d334      	bcc.n	801d43a <rshift+0x96>
 801d3d0:	1a9b      	subs	r3, r3, r2
 801d3d2:	009b      	lsls	r3, r3, #2
 801d3d4:	1eea      	subs	r2, r5, #3
 801d3d6:	4296      	cmp	r6, r2
 801d3d8:	bf38      	it	cc
 801d3da:	2300      	movcc	r3, #0
 801d3dc:	4423      	add	r3, r4
 801d3de:	e015      	b.n	801d40c <rshift+0x68>
 801d3e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d3e4:	f1c1 0820 	rsb	r8, r1, #32
 801d3e8:	40cf      	lsrs	r7, r1
 801d3ea:	f105 0e04 	add.w	lr, r5, #4
 801d3ee:	46a1      	mov	r9, r4
 801d3f0:	4576      	cmp	r6, lr
 801d3f2:	46f4      	mov	ip, lr
 801d3f4:	d815      	bhi.n	801d422 <rshift+0x7e>
 801d3f6:	1a9a      	subs	r2, r3, r2
 801d3f8:	0092      	lsls	r2, r2, #2
 801d3fa:	3a04      	subs	r2, #4
 801d3fc:	3501      	adds	r5, #1
 801d3fe:	42ae      	cmp	r6, r5
 801d400:	bf38      	it	cc
 801d402:	2200      	movcc	r2, #0
 801d404:	18a3      	adds	r3, r4, r2
 801d406:	50a7      	str	r7, [r4, r2]
 801d408:	b107      	cbz	r7, 801d40c <rshift+0x68>
 801d40a:	3304      	adds	r3, #4
 801d40c:	1b1a      	subs	r2, r3, r4
 801d40e:	42a3      	cmp	r3, r4
 801d410:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d414:	bf08      	it	eq
 801d416:	2300      	moveq	r3, #0
 801d418:	6102      	str	r2, [r0, #16]
 801d41a:	bf08      	it	eq
 801d41c:	6143      	streq	r3, [r0, #20]
 801d41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d422:	f8dc c000 	ldr.w	ip, [ip]
 801d426:	fa0c fc08 	lsl.w	ip, ip, r8
 801d42a:	ea4c 0707 	orr.w	r7, ip, r7
 801d42e:	f849 7b04 	str.w	r7, [r9], #4
 801d432:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d436:	40cf      	lsrs	r7, r1
 801d438:	e7da      	b.n	801d3f0 <rshift+0x4c>
 801d43a:	f851 cb04 	ldr.w	ip, [r1], #4
 801d43e:	f847 cf04 	str.w	ip, [r7, #4]!
 801d442:	e7c3      	b.n	801d3cc <rshift+0x28>
 801d444:	4623      	mov	r3, r4
 801d446:	e7e1      	b.n	801d40c <rshift+0x68>

0801d448 <__hexdig_fun>:
 801d448:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d44c:	2b09      	cmp	r3, #9
 801d44e:	d802      	bhi.n	801d456 <__hexdig_fun+0xe>
 801d450:	3820      	subs	r0, #32
 801d452:	b2c0      	uxtb	r0, r0
 801d454:	4770      	bx	lr
 801d456:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d45a:	2b05      	cmp	r3, #5
 801d45c:	d801      	bhi.n	801d462 <__hexdig_fun+0x1a>
 801d45e:	3847      	subs	r0, #71	; 0x47
 801d460:	e7f7      	b.n	801d452 <__hexdig_fun+0xa>
 801d462:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d466:	2b05      	cmp	r3, #5
 801d468:	d801      	bhi.n	801d46e <__hexdig_fun+0x26>
 801d46a:	3827      	subs	r0, #39	; 0x27
 801d46c:	e7f1      	b.n	801d452 <__hexdig_fun+0xa>
 801d46e:	2000      	movs	r0, #0
 801d470:	4770      	bx	lr
	...

0801d474 <__gethex>:
 801d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d478:	ed2d 8b02 	vpush	{d8}
 801d47c:	b089      	sub	sp, #36	; 0x24
 801d47e:	ee08 0a10 	vmov	s16, r0
 801d482:	9304      	str	r3, [sp, #16]
 801d484:	4bb4      	ldr	r3, [pc, #720]	; (801d758 <__gethex+0x2e4>)
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	9301      	str	r3, [sp, #4]
 801d48a:	4618      	mov	r0, r3
 801d48c:	468b      	mov	fp, r1
 801d48e:	4690      	mov	r8, r2
 801d490:	f7e2 ff48 	bl	8000324 <strlen>
 801d494:	9b01      	ldr	r3, [sp, #4]
 801d496:	f8db 2000 	ldr.w	r2, [fp]
 801d49a:	4403      	add	r3, r0
 801d49c:	4682      	mov	sl, r0
 801d49e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d4a2:	9305      	str	r3, [sp, #20]
 801d4a4:	1c93      	adds	r3, r2, #2
 801d4a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d4aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d4ae:	32fe      	adds	r2, #254	; 0xfe
 801d4b0:	18d1      	adds	r1, r2, r3
 801d4b2:	461f      	mov	r7, r3
 801d4b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d4b8:	9100      	str	r1, [sp, #0]
 801d4ba:	2830      	cmp	r0, #48	; 0x30
 801d4bc:	d0f8      	beq.n	801d4b0 <__gethex+0x3c>
 801d4be:	f7ff ffc3 	bl	801d448 <__hexdig_fun>
 801d4c2:	4604      	mov	r4, r0
 801d4c4:	2800      	cmp	r0, #0
 801d4c6:	d13a      	bne.n	801d53e <__gethex+0xca>
 801d4c8:	9901      	ldr	r1, [sp, #4]
 801d4ca:	4652      	mov	r2, sl
 801d4cc:	4638      	mov	r0, r7
 801d4ce:	f001 fa43 	bl	801e958 <strncmp>
 801d4d2:	4605      	mov	r5, r0
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	d168      	bne.n	801d5aa <__gethex+0x136>
 801d4d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d4dc:	eb07 060a 	add.w	r6, r7, sl
 801d4e0:	f7ff ffb2 	bl	801d448 <__hexdig_fun>
 801d4e4:	2800      	cmp	r0, #0
 801d4e6:	d062      	beq.n	801d5ae <__gethex+0x13a>
 801d4e8:	4633      	mov	r3, r6
 801d4ea:	7818      	ldrb	r0, [r3, #0]
 801d4ec:	2830      	cmp	r0, #48	; 0x30
 801d4ee:	461f      	mov	r7, r3
 801d4f0:	f103 0301 	add.w	r3, r3, #1
 801d4f4:	d0f9      	beq.n	801d4ea <__gethex+0x76>
 801d4f6:	f7ff ffa7 	bl	801d448 <__hexdig_fun>
 801d4fa:	2301      	movs	r3, #1
 801d4fc:	fab0 f480 	clz	r4, r0
 801d500:	0964      	lsrs	r4, r4, #5
 801d502:	4635      	mov	r5, r6
 801d504:	9300      	str	r3, [sp, #0]
 801d506:	463a      	mov	r2, r7
 801d508:	4616      	mov	r6, r2
 801d50a:	3201      	adds	r2, #1
 801d50c:	7830      	ldrb	r0, [r6, #0]
 801d50e:	f7ff ff9b 	bl	801d448 <__hexdig_fun>
 801d512:	2800      	cmp	r0, #0
 801d514:	d1f8      	bne.n	801d508 <__gethex+0x94>
 801d516:	9901      	ldr	r1, [sp, #4]
 801d518:	4652      	mov	r2, sl
 801d51a:	4630      	mov	r0, r6
 801d51c:	f001 fa1c 	bl	801e958 <strncmp>
 801d520:	b980      	cbnz	r0, 801d544 <__gethex+0xd0>
 801d522:	b94d      	cbnz	r5, 801d538 <__gethex+0xc4>
 801d524:	eb06 050a 	add.w	r5, r6, sl
 801d528:	462a      	mov	r2, r5
 801d52a:	4616      	mov	r6, r2
 801d52c:	3201      	adds	r2, #1
 801d52e:	7830      	ldrb	r0, [r6, #0]
 801d530:	f7ff ff8a 	bl	801d448 <__hexdig_fun>
 801d534:	2800      	cmp	r0, #0
 801d536:	d1f8      	bne.n	801d52a <__gethex+0xb6>
 801d538:	1bad      	subs	r5, r5, r6
 801d53a:	00ad      	lsls	r5, r5, #2
 801d53c:	e004      	b.n	801d548 <__gethex+0xd4>
 801d53e:	2400      	movs	r4, #0
 801d540:	4625      	mov	r5, r4
 801d542:	e7e0      	b.n	801d506 <__gethex+0x92>
 801d544:	2d00      	cmp	r5, #0
 801d546:	d1f7      	bne.n	801d538 <__gethex+0xc4>
 801d548:	7833      	ldrb	r3, [r6, #0]
 801d54a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d54e:	2b50      	cmp	r3, #80	; 0x50
 801d550:	d13b      	bne.n	801d5ca <__gethex+0x156>
 801d552:	7873      	ldrb	r3, [r6, #1]
 801d554:	2b2b      	cmp	r3, #43	; 0x2b
 801d556:	d02c      	beq.n	801d5b2 <__gethex+0x13e>
 801d558:	2b2d      	cmp	r3, #45	; 0x2d
 801d55a:	d02e      	beq.n	801d5ba <__gethex+0x146>
 801d55c:	1c71      	adds	r1, r6, #1
 801d55e:	f04f 0900 	mov.w	r9, #0
 801d562:	7808      	ldrb	r0, [r1, #0]
 801d564:	f7ff ff70 	bl	801d448 <__hexdig_fun>
 801d568:	1e43      	subs	r3, r0, #1
 801d56a:	b2db      	uxtb	r3, r3
 801d56c:	2b18      	cmp	r3, #24
 801d56e:	d82c      	bhi.n	801d5ca <__gethex+0x156>
 801d570:	f1a0 0210 	sub.w	r2, r0, #16
 801d574:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d578:	f7ff ff66 	bl	801d448 <__hexdig_fun>
 801d57c:	1e43      	subs	r3, r0, #1
 801d57e:	b2db      	uxtb	r3, r3
 801d580:	2b18      	cmp	r3, #24
 801d582:	d91d      	bls.n	801d5c0 <__gethex+0x14c>
 801d584:	f1b9 0f00 	cmp.w	r9, #0
 801d588:	d000      	beq.n	801d58c <__gethex+0x118>
 801d58a:	4252      	negs	r2, r2
 801d58c:	4415      	add	r5, r2
 801d58e:	f8cb 1000 	str.w	r1, [fp]
 801d592:	b1e4      	cbz	r4, 801d5ce <__gethex+0x15a>
 801d594:	9b00      	ldr	r3, [sp, #0]
 801d596:	2b00      	cmp	r3, #0
 801d598:	bf14      	ite	ne
 801d59a:	2700      	movne	r7, #0
 801d59c:	2706      	moveq	r7, #6
 801d59e:	4638      	mov	r0, r7
 801d5a0:	b009      	add	sp, #36	; 0x24
 801d5a2:	ecbd 8b02 	vpop	{d8}
 801d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5aa:	463e      	mov	r6, r7
 801d5ac:	4625      	mov	r5, r4
 801d5ae:	2401      	movs	r4, #1
 801d5b0:	e7ca      	b.n	801d548 <__gethex+0xd4>
 801d5b2:	f04f 0900 	mov.w	r9, #0
 801d5b6:	1cb1      	adds	r1, r6, #2
 801d5b8:	e7d3      	b.n	801d562 <__gethex+0xee>
 801d5ba:	f04f 0901 	mov.w	r9, #1
 801d5be:	e7fa      	b.n	801d5b6 <__gethex+0x142>
 801d5c0:	230a      	movs	r3, #10
 801d5c2:	fb03 0202 	mla	r2, r3, r2, r0
 801d5c6:	3a10      	subs	r2, #16
 801d5c8:	e7d4      	b.n	801d574 <__gethex+0x100>
 801d5ca:	4631      	mov	r1, r6
 801d5cc:	e7df      	b.n	801d58e <__gethex+0x11a>
 801d5ce:	1bf3      	subs	r3, r6, r7
 801d5d0:	3b01      	subs	r3, #1
 801d5d2:	4621      	mov	r1, r4
 801d5d4:	2b07      	cmp	r3, #7
 801d5d6:	dc0b      	bgt.n	801d5f0 <__gethex+0x17c>
 801d5d8:	ee18 0a10 	vmov	r0, s16
 801d5dc:	f000 fa82 	bl	801dae4 <_Balloc>
 801d5e0:	4604      	mov	r4, r0
 801d5e2:	b940      	cbnz	r0, 801d5f6 <__gethex+0x182>
 801d5e4:	4b5d      	ldr	r3, [pc, #372]	; (801d75c <__gethex+0x2e8>)
 801d5e6:	4602      	mov	r2, r0
 801d5e8:	21de      	movs	r1, #222	; 0xde
 801d5ea:	485d      	ldr	r0, [pc, #372]	; (801d760 <__gethex+0x2ec>)
 801d5ec:	f001 f9d6 	bl	801e99c <__assert_func>
 801d5f0:	3101      	adds	r1, #1
 801d5f2:	105b      	asrs	r3, r3, #1
 801d5f4:	e7ee      	b.n	801d5d4 <__gethex+0x160>
 801d5f6:	f100 0914 	add.w	r9, r0, #20
 801d5fa:	f04f 0b00 	mov.w	fp, #0
 801d5fe:	f1ca 0301 	rsb	r3, sl, #1
 801d602:	f8cd 9008 	str.w	r9, [sp, #8]
 801d606:	f8cd b000 	str.w	fp, [sp]
 801d60a:	9306      	str	r3, [sp, #24]
 801d60c:	42b7      	cmp	r7, r6
 801d60e:	d340      	bcc.n	801d692 <__gethex+0x21e>
 801d610:	9802      	ldr	r0, [sp, #8]
 801d612:	9b00      	ldr	r3, [sp, #0]
 801d614:	f840 3b04 	str.w	r3, [r0], #4
 801d618:	eba0 0009 	sub.w	r0, r0, r9
 801d61c:	1080      	asrs	r0, r0, #2
 801d61e:	0146      	lsls	r6, r0, #5
 801d620:	6120      	str	r0, [r4, #16]
 801d622:	4618      	mov	r0, r3
 801d624:	f000 fb50 	bl	801dcc8 <__hi0bits>
 801d628:	1a30      	subs	r0, r6, r0
 801d62a:	f8d8 6000 	ldr.w	r6, [r8]
 801d62e:	42b0      	cmp	r0, r6
 801d630:	dd63      	ble.n	801d6fa <__gethex+0x286>
 801d632:	1b87      	subs	r7, r0, r6
 801d634:	4639      	mov	r1, r7
 801d636:	4620      	mov	r0, r4
 801d638:	f000 fef1 	bl	801e41e <__any_on>
 801d63c:	4682      	mov	sl, r0
 801d63e:	b1a8      	cbz	r0, 801d66c <__gethex+0x1f8>
 801d640:	1e7b      	subs	r3, r7, #1
 801d642:	1159      	asrs	r1, r3, #5
 801d644:	f003 021f 	and.w	r2, r3, #31
 801d648:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d64c:	f04f 0a01 	mov.w	sl, #1
 801d650:	fa0a f202 	lsl.w	r2, sl, r2
 801d654:	420a      	tst	r2, r1
 801d656:	d009      	beq.n	801d66c <__gethex+0x1f8>
 801d658:	4553      	cmp	r3, sl
 801d65a:	dd05      	ble.n	801d668 <__gethex+0x1f4>
 801d65c:	1eb9      	subs	r1, r7, #2
 801d65e:	4620      	mov	r0, r4
 801d660:	f000 fedd 	bl	801e41e <__any_on>
 801d664:	2800      	cmp	r0, #0
 801d666:	d145      	bne.n	801d6f4 <__gethex+0x280>
 801d668:	f04f 0a02 	mov.w	sl, #2
 801d66c:	4639      	mov	r1, r7
 801d66e:	4620      	mov	r0, r4
 801d670:	f7ff fe98 	bl	801d3a4 <rshift>
 801d674:	443d      	add	r5, r7
 801d676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d67a:	42ab      	cmp	r3, r5
 801d67c:	da4c      	bge.n	801d718 <__gethex+0x2a4>
 801d67e:	ee18 0a10 	vmov	r0, s16
 801d682:	4621      	mov	r1, r4
 801d684:	f000 fa6e 	bl	801db64 <_Bfree>
 801d688:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d68a:	2300      	movs	r3, #0
 801d68c:	6013      	str	r3, [r2, #0]
 801d68e:	27a3      	movs	r7, #163	; 0xa3
 801d690:	e785      	b.n	801d59e <__gethex+0x12a>
 801d692:	1e73      	subs	r3, r6, #1
 801d694:	9a05      	ldr	r2, [sp, #20]
 801d696:	9303      	str	r3, [sp, #12]
 801d698:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d69c:	4293      	cmp	r3, r2
 801d69e:	d019      	beq.n	801d6d4 <__gethex+0x260>
 801d6a0:	f1bb 0f20 	cmp.w	fp, #32
 801d6a4:	d107      	bne.n	801d6b6 <__gethex+0x242>
 801d6a6:	9b02      	ldr	r3, [sp, #8]
 801d6a8:	9a00      	ldr	r2, [sp, #0]
 801d6aa:	f843 2b04 	str.w	r2, [r3], #4
 801d6ae:	9302      	str	r3, [sp, #8]
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	9300      	str	r3, [sp, #0]
 801d6b4:	469b      	mov	fp, r3
 801d6b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d6ba:	f7ff fec5 	bl	801d448 <__hexdig_fun>
 801d6be:	9b00      	ldr	r3, [sp, #0]
 801d6c0:	f000 000f 	and.w	r0, r0, #15
 801d6c4:	fa00 f00b 	lsl.w	r0, r0, fp
 801d6c8:	4303      	orrs	r3, r0
 801d6ca:	9300      	str	r3, [sp, #0]
 801d6cc:	f10b 0b04 	add.w	fp, fp, #4
 801d6d0:	9b03      	ldr	r3, [sp, #12]
 801d6d2:	e00d      	b.n	801d6f0 <__gethex+0x27c>
 801d6d4:	9b03      	ldr	r3, [sp, #12]
 801d6d6:	9a06      	ldr	r2, [sp, #24]
 801d6d8:	4413      	add	r3, r2
 801d6da:	42bb      	cmp	r3, r7
 801d6dc:	d3e0      	bcc.n	801d6a0 <__gethex+0x22c>
 801d6de:	4618      	mov	r0, r3
 801d6e0:	9901      	ldr	r1, [sp, #4]
 801d6e2:	9307      	str	r3, [sp, #28]
 801d6e4:	4652      	mov	r2, sl
 801d6e6:	f001 f937 	bl	801e958 <strncmp>
 801d6ea:	9b07      	ldr	r3, [sp, #28]
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	d1d7      	bne.n	801d6a0 <__gethex+0x22c>
 801d6f0:	461e      	mov	r6, r3
 801d6f2:	e78b      	b.n	801d60c <__gethex+0x198>
 801d6f4:	f04f 0a03 	mov.w	sl, #3
 801d6f8:	e7b8      	b.n	801d66c <__gethex+0x1f8>
 801d6fa:	da0a      	bge.n	801d712 <__gethex+0x29e>
 801d6fc:	1a37      	subs	r7, r6, r0
 801d6fe:	4621      	mov	r1, r4
 801d700:	ee18 0a10 	vmov	r0, s16
 801d704:	463a      	mov	r2, r7
 801d706:	f000 fc49 	bl	801df9c <__lshift>
 801d70a:	1bed      	subs	r5, r5, r7
 801d70c:	4604      	mov	r4, r0
 801d70e:	f100 0914 	add.w	r9, r0, #20
 801d712:	f04f 0a00 	mov.w	sl, #0
 801d716:	e7ae      	b.n	801d676 <__gethex+0x202>
 801d718:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d71c:	42a8      	cmp	r0, r5
 801d71e:	dd72      	ble.n	801d806 <__gethex+0x392>
 801d720:	1b45      	subs	r5, r0, r5
 801d722:	42ae      	cmp	r6, r5
 801d724:	dc36      	bgt.n	801d794 <__gethex+0x320>
 801d726:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d72a:	2b02      	cmp	r3, #2
 801d72c:	d02a      	beq.n	801d784 <__gethex+0x310>
 801d72e:	2b03      	cmp	r3, #3
 801d730:	d02c      	beq.n	801d78c <__gethex+0x318>
 801d732:	2b01      	cmp	r3, #1
 801d734:	d11c      	bne.n	801d770 <__gethex+0x2fc>
 801d736:	42ae      	cmp	r6, r5
 801d738:	d11a      	bne.n	801d770 <__gethex+0x2fc>
 801d73a:	2e01      	cmp	r6, #1
 801d73c:	d112      	bne.n	801d764 <__gethex+0x2f0>
 801d73e:	9a04      	ldr	r2, [sp, #16]
 801d740:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d744:	6013      	str	r3, [r2, #0]
 801d746:	2301      	movs	r3, #1
 801d748:	6123      	str	r3, [r4, #16]
 801d74a:	f8c9 3000 	str.w	r3, [r9]
 801d74e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d750:	2762      	movs	r7, #98	; 0x62
 801d752:	601c      	str	r4, [r3, #0]
 801d754:	e723      	b.n	801d59e <__gethex+0x12a>
 801d756:	bf00      	nop
 801d758:	0801fe00 	.word	0x0801fe00
 801d75c:	0801fd88 	.word	0x0801fd88
 801d760:	0801fd99 	.word	0x0801fd99
 801d764:	1e71      	subs	r1, r6, #1
 801d766:	4620      	mov	r0, r4
 801d768:	f000 fe59 	bl	801e41e <__any_on>
 801d76c:	2800      	cmp	r0, #0
 801d76e:	d1e6      	bne.n	801d73e <__gethex+0x2ca>
 801d770:	ee18 0a10 	vmov	r0, s16
 801d774:	4621      	mov	r1, r4
 801d776:	f000 f9f5 	bl	801db64 <_Bfree>
 801d77a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d77c:	2300      	movs	r3, #0
 801d77e:	6013      	str	r3, [r2, #0]
 801d780:	2750      	movs	r7, #80	; 0x50
 801d782:	e70c      	b.n	801d59e <__gethex+0x12a>
 801d784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d786:	2b00      	cmp	r3, #0
 801d788:	d1f2      	bne.n	801d770 <__gethex+0x2fc>
 801d78a:	e7d8      	b.n	801d73e <__gethex+0x2ca>
 801d78c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d1d5      	bne.n	801d73e <__gethex+0x2ca>
 801d792:	e7ed      	b.n	801d770 <__gethex+0x2fc>
 801d794:	1e6f      	subs	r7, r5, #1
 801d796:	f1ba 0f00 	cmp.w	sl, #0
 801d79a:	d131      	bne.n	801d800 <__gethex+0x38c>
 801d79c:	b127      	cbz	r7, 801d7a8 <__gethex+0x334>
 801d79e:	4639      	mov	r1, r7
 801d7a0:	4620      	mov	r0, r4
 801d7a2:	f000 fe3c 	bl	801e41e <__any_on>
 801d7a6:	4682      	mov	sl, r0
 801d7a8:	117b      	asrs	r3, r7, #5
 801d7aa:	2101      	movs	r1, #1
 801d7ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d7b0:	f007 071f 	and.w	r7, r7, #31
 801d7b4:	fa01 f707 	lsl.w	r7, r1, r7
 801d7b8:	421f      	tst	r7, r3
 801d7ba:	4629      	mov	r1, r5
 801d7bc:	4620      	mov	r0, r4
 801d7be:	bf18      	it	ne
 801d7c0:	f04a 0a02 	orrne.w	sl, sl, #2
 801d7c4:	1b76      	subs	r6, r6, r5
 801d7c6:	f7ff fded 	bl	801d3a4 <rshift>
 801d7ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d7ce:	2702      	movs	r7, #2
 801d7d0:	f1ba 0f00 	cmp.w	sl, #0
 801d7d4:	d048      	beq.n	801d868 <__gethex+0x3f4>
 801d7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d7da:	2b02      	cmp	r3, #2
 801d7dc:	d015      	beq.n	801d80a <__gethex+0x396>
 801d7de:	2b03      	cmp	r3, #3
 801d7e0:	d017      	beq.n	801d812 <__gethex+0x39e>
 801d7e2:	2b01      	cmp	r3, #1
 801d7e4:	d109      	bne.n	801d7fa <__gethex+0x386>
 801d7e6:	f01a 0f02 	tst.w	sl, #2
 801d7ea:	d006      	beq.n	801d7fa <__gethex+0x386>
 801d7ec:	f8d9 0000 	ldr.w	r0, [r9]
 801d7f0:	ea4a 0a00 	orr.w	sl, sl, r0
 801d7f4:	f01a 0f01 	tst.w	sl, #1
 801d7f8:	d10e      	bne.n	801d818 <__gethex+0x3a4>
 801d7fa:	f047 0710 	orr.w	r7, r7, #16
 801d7fe:	e033      	b.n	801d868 <__gethex+0x3f4>
 801d800:	f04f 0a01 	mov.w	sl, #1
 801d804:	e7d0      	b.n	801d7a8 <__gethex+0x334>
 801d806:	2701      	movs	r7, #1
 801d808:	e7e2      	b.n	801d7d0 <__gethex+0x35c>
 801d80a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d80c:	f1c3 0301 	rsb	r3, r3, #1
 801d810:	9315      	str	r3, [sp, #84]	; 0x54
 801d812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d814:	2b00      	cmp	r3, #0
 801d816:	d0f0      	beq.n	801d7fa <__gethex+0x386>
 801d818:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d81c:	f104 0314 	add.w	r3, r4, #20
 801d820:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d824:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d828:	f04f 0c00 	mov.w	ip, #0
 801d82c:	4618      	mov	r0, r3
 801d82e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d832:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d836:	d01c      	beq.n	801d872 <__gethex+0x3fe>
 801d838:	3201      	adds	r2, #1
 801d83a:	6002      	str	r2, [r0, #0]
 801d83c:	2f02      	cmp	r7, #2
 801d83e:	f104 0314 	add.w	r3, r4, #20
 801d842:	d13f      	bne.n	801d8c4 <__gethex+0x450>
 801d844:	f8d8 2000 	ldr.w	r2, [r8]
 801d848:	3a01      	subs	r2, #1
 801d84a:	42b2      	cmp	r2, r6
 801d84c:	d10a      	bne.n	801d864 <__gethex+0x3f0>
 801d84e:	1171      	asrs	r1, r6, #5
 801d850:	2201      	movs	r2, #1
 801d852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d856:	f006 061f 	and.w	r6, r6, #31
 801d85a:	fa02 f606 	lsl.w	r6, r2, r6
 801d85e:	421e      	tst	r6, r3
 801d860:	bf18      	it	ne
 801d862:	4617      	movne	r7, r2
 801d864:	f047 0720 	orr.w	r7, r7, #32
 801d868:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d86a:	601c      	str	r4, [r3, #0]
 801d86c:	9b04      	ldr	r3, [sp, #16]
 801d86e:	601d      	str	r5, [r3, #0]
 801d870:	e695      	b.n	801d59e <__gethex+0x12a>
 801d872:	4299      	cmp	r1, r3
 801d874:	f843 cc04 	str.w	ip, [r3, #-4]
 801d878:	d8d8      	bhi.n	801d82c <__gethex+0x3b8>
 801d87a:	68a3      	ldr	r3, [r4, #8]
 801d87c:	459b      	cmp	fp, r3
 801d87e:	db19      	blt.n	801d8b4 <__gethex+0x440>
 801d880:	6861      	ldr	r1, [r4, #4]
 801d882:	ee18 0a10 	vmov	r0, s16
 801d886:	3101      	adds	r1, #1
 801d888:	f000 f92c 	bl	801dae4 <_Balloc>
 801d88c:	4681      	mov	r9, r0
 801d88e:	b918      	cbnz	r0, 801d898 <__gethex+0x424>
 801d890:	4b1a      	ldr	r3, [pc, #104]	; (801d8fc <__gethex+0x488>)
 801d892:	4602      	mov	r2, r0
 801d894:	2184      	movs	r1, #132	; 0x84
 801d896:	e6a8      	b.n	801d5ea <__gethex+0x176>
 801d898:	6922      	ldr	r2, [r4, #16]
 801d89a:	3202      	adds	r2, #2
 801d89c:	f104 010c 	add.w	r1, r4, #12
 801d8a0:	0092      	lsls	r2, r2, #2
 801d8a2:	300c      	adds	r0, #12
 801d8a4:	f7fd fa36 	bl	801ad14 <memcpy>
 801d8a8:	4621      	mov	r1, r4
 801d8aa:	ee18 0a10 	vmov	r0, s16
 801d8ae:	f000 f959 	bl	801db64 <_Bfree>
 801d8b2:	464c      	mov	r4, r9
 801d8b4:	6923      	ldr	r3, [r4, #16]
 801d8b6:	1c5a      	adds	r2, r3, #1
 801d8b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d8bc:	6122      	str	r2, [r4, #16]
 801d8be:	2201      	movs	r2, #1
 801d8c0:	615a      	str	r2, [r3, #20]
 801d8c2:	e7bb      	b.n	801d83c <__gethex+0x3c8>
 801d8c4:	6922      	ldr	r2, [r4, #16]
 801d8c6:	455a      	cmp	r2, fp
 801d8c8:	dd0b      	ble.n	801d8e2 <__gethex+0x46e>
 801d8ca:	2101      	movs	r1, #1
 801d8cc:	4620      	mov	r0, r4
 801d8ce:	f7ff fd69 	bl	801d3a4 <rshift>
 801d8d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d8d6:	3501      	adds	r5, #1
 801d8d8:	42ab      	cmp	r3, r5
 801d8da:	f6ff aed0 	blt.w	801d67e <__gethex+0x20a>
 801d8de:	2701      	movs	r7, #1
 801d8e0:	e7c0      	b.n	801d864 <__gethex+0x3f0>
 801d8e2:	f016 061f 	ands.w	r6, r6, #31
 801d8e6:	d0fa      	beq.n	801d8de <__gethex+0x46a>
 801d8e8:	4453      	add	r3, sl
 801d8ea:	f1c6 0620 	rsb	r6, r6, #32
 801d8ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d8f2:	f000 f9e9 	bl	801dcc8 <__hi0bits>
 801d8f6:	42b0      	cmp	r0, r6
 801d8f8:	dbe7      	blt.n	801d8ca <__gethex+0x456>
 801d8fa:	e7f0      	b.n	801d8de <__gethex+0x46a>
 801d8fc:	0801fd88 	.word	0x0801fd88

0801d900 <L_shift>:
 801d900:	f1c2 0208 	rsb	r2, r2, #8
 801d904:	0092      	lsls	r2, r2, #2
 801d906:	b570      	push	{r4, r5, r6, lr}
 801d908:	f1c2 0620 	rsb	r6, r2, #32
 801d90c:	6843      	ldr	r3, [r0, #4]
 801d90e:	6804      	ldr	r4, [r0, #0]
 801d910:	fa03 f506 	lsl.w	r5, r3, r6
 801d914:	432c      	orrs	r4, r5
 801d916:	40d3      	lsrs	r3, r2
 801d918:	6004      	str	r4, [r0, #0]
 801d91a:	f840 3f04 	str.w	r3, [r0, #4]!
 801d91e:	4288      	cmp	r0, r1
 801d920:	d3f4      	bcc.n	801d90c <L_shift+0xc>
 801d922:	bd70      	pop	{r4, r5, r6, pc}

0801d924 <__match>:
 801d924:	b530      	push	{r4, r5, lr}
 801d926:	6803      	ldr	r3, [r0, #0]
 801d928:	3301      	adds	r3, #1
 801d92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d92e:	b914      	cbnz	r4, 801d936 <__match+0x12>
 801d930:	6003      	str	r3, [r0, #0]
 801d932:	2001      	movs	r0, #1
 801d934:	bd30      	pop	{r4, r5, pc}
 801d936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d93a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d93e:	2d19      	cmp	r5, #25
 801d940:	bf98      	it	ls
 801d942:	3220      	addls	r2, #32
 801d944:	42a2      	cmp	r2, r4
 801d946:	d0f0      	beq.n	801d92a <__match+0x6>
 801d948:	2000      	movs	r0, #0
 801d94a:	e7f3      	b.n	801d934 <__match+0x10>

0801d94c <__hexnan>:
 801d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d950:	680b      	ldr	r3, [r1, #0]
 801d952:	115e      	asrs	r6, r3, #5
 801d954:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d958:	f013 031f 	ands.w	r3, r3, #31
 801d95c:	b087      	sub	sp, #28
 801d95e:	bf18      	it	ne
 801d960:	3604      	addne	r6, #4
 801d962:	2500      	movs	r5, #0
 801d964:	1f37      	subs	r7, r6, #4
 801d966:	4690      	mov	r8, r2
 801d968:	6802      	ldr	r2, [r0, #0]
 801d96a:	9301      	str	r3, [sp, #4]
 801d96c:	4682      	mov	sl, r0
 801d96e:	f846 5c04 	str.w	r5, [r6, #-4]
 801d972:	46b9      	mov	r9, r7
 801d974:	463c      	mov	r4, r7
 801d976:	9502      	str	r5, [sp, #8]
 801d978:	46ab      	mov	fp, r5
 801d97a:	7851      	ldrb	r1, [r2, #1]
 801d97c:	1c53      	adds	r3, r2, #1
 801d97e:	9303      	str	r3, [sp, #12]
 801d980:	b341      	cbz	r1, 801d9d4 <__hexnan+0x88>
 801d982:	4608      	mov	r0, r1
 801d984:	9205      	str	r2, [sp, #20]
 801d986:	9104      	str	r1, [sp, #16]
 801d988:	f7ff fd5e 	bl	801d448 <__hexdig_fun>
 801d98c:	2800      	cmp	r0, #0
 801d98e:	d14f      	bne.n	801da30 <__hexnan+0xe4>
 801d990:	9904      	ldr	r1, [sp, #16]
 801d992:	9a05      	ldr	r2, [sp, #20]
 801d994:	2920      	cmp	r1, #32
 801d996:	d818      	bhi.n	801d9ca <__hexnan+0x7e>
 801d998:	9b02      	ldr	r3, [sp, #8]
 801d99a:	459b      	cmp	fp, r3
 801d99c:	dd13      	ble.n	801d9c6 <__hexnan+0x7a>
 801d99e:	454c      	cmp	r4, r9
 801d9a0:	d206      	bcs.n	801d9b0 <__hexnan+0x64>
 801d9a2:	2d07      	cmp	r5, #7
 801d9a4:	dc04      	bgt.n	801d9b0 <__hexnan+0x64>
 801d9a6:	462a      	mov	r2, r5
 801d9a8:	4649      	mov	r1, r9
 801d9aa:	4620      	mov	r0, r4
 801d9ac:	f7ff ffa8 	bl	801d900 <L_shift>
 801d9b0:	4544      	cmp	r4, r8
 801d9b2:	d950      	bls.n	801da56 <__hexnan+0x10a>
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	f1a4 0904 	sub.w	r9, r4, #4
 801d9ba:	f844 3c04 	str.w	r3, [r4, #-4]
 801d9be:	f8cd b008 	str.w	fp, [sp, #8]
 801d9c2:	464c      	mov	r4, r9
 801d9c4:	461d      	mov	r5, r3
 801d9c6:	9a03      	ldr	r2, [sp, #12]
 801d9c8:	e7d7      	b.n	801d97a <__hexnan+0x2e>
 801d9ca:	2929      	cmp	r1, #41	; 0x29
 801d9cc:	d156      	bne.n	801da7c <__hexnan+0x130>
 801d9ce:	3202      	adds	r2, #2
 801d9d0:	f8ca 2000 	str.w	r2, [sl]
 801d9d4:	f1bb 0f00 	cmp.w	fp, #0
 801d9d8:	d050      	beq.n	801da7c <__hexnan+0x130>
 801d9da:	454c      	cmp	r4, r9
 801d9dc:	d206      	bcs.n	801d9ec <__hexnan+0xa0>
 801d9de:	2d07      	cmp	r5, #7
 801d9e0:	dc04      	bgt.n	801d9ec <__hexnan+0xa0>
 801d9e2:	462a      	mov	r2, r5
 801d9e4:	4649      	mov	r1, r9
 801d9e6:	4620      	mov	r0, r4
 801d9e8:	f7ff ff8a 	bl	801d900 <L_shift>
 801d9ec:	4544      	cmp	r4, r8
 801d9ee:	d934      	bls.n	801da5a <__hexnan+0x10e>
 801d9f0:	f1a8 0204 	sub.w	r2, r8, #4
 801d9f4:	4623      	mov	r3, r4
 801d9f6:	f853 1b04 	ldr.w	r1, [r3], #4
 801d9fa:	f842 1f04 	str.w	r1, [r2, #4]!
 801d9fe:	429f      	cmp	r7, r3
 801da00:	d2f9      	bcs.n	801d9f6 <__hexnan+0xaa>
 801da02:	1b3b      	subs	r3, r7, r4
 801da04:	f023 0303 	bic.w	r3, r3, #3
 801da08:	3304      	adds	r3, #4
 801da0a:	3401      	adds	r4, #1
 801da0c:	3e03      	subs	r6, #3
 801da0e:	42b4      	cmp	r4, r6
 801da10:	bf88      	it	hi
 801da12:	2304      	movhi	r3, #4
 801da14:	4443      	add	r3, r8
 801da16:	2200      	movs	r2, #0
 801da18:	f843 2b04 	str.w	r2, [r3], #4
 801da1c:	429f      	cmp	r7, r3
 801da1e:	d2fb      	bcs.n	801da18 <__hexnan+0xcc>
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	b91b      	cbnz	r3, 801da2c <__hexnan+0xe0>
 801da24:	4547      	cmp	r7, r8
 801da26:	d127      	bne.n	801da78 <__hexnan+0x12c>
 801da28:	2301      	movs	r3, #1
 801da2a:	603b      	str	r3, [r7, #0]
 801da2c:	2005      	movs	r0, #5
 801da2e:	e026      	b.n	801da7e <__hexnan+0x132>
 801da30:	3501      	adds	r5, #1
 801da32:	2d08      	cmp	r5, #8
 801da34:	f10b 0b01 	add.w	fp, fp, #1
 801da38:	dd06      	ble.n	801da48 <__hexnan+0xfc>
 801da3a:	4544      	cmp	r4, r8
 801da3c:	d9c3      	bls.n	801d9c6 <__hexnan+0x7a>
 801da3e:	2300      	movs	r3, #0
 801da40:	f844 3c04 	str.w	r3, [r4, #-4]
 801da44:	2501      	movs	r5, #1
 801da46:	3c04      	subs	r4, #4
 801da48:	6822      	ldr	r2, [r4, #0]
 801da4a:	f000 000f 	and.w	r0, r0, #15
 801da4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801da52:	6022      	str	r2, [r4, #0]
 801da54:	e7b7      	b.n	801d9c6 <__hexnan+0x7a>
 801da56:	2508      	movs	r5, #8
 801da58:	e7b5      	b.n	801d9c6 <__hexnan+0x7a>
 801da5a:	9b01      	ldr	r3, [sp, #4]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d0df      	beq.n	801da20 <__hexnan+0xd4>
 801da60:	f04f 32ff 	mov.w	r2, #4294967295
 801da64:	f1c3 0320 	rsb	r3, r3, #32
 801da68:	fa22 f303 	lsr.w	r3, r2, r3
 801da6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801da70:	401a      	ands	r2, r3
 801da72:	f846 2c04 	str.w	r2, [r6, #-4]
 801da76:	e7d3      	b.n	801da20 <__hexnan+0xd4>
 801da78:	3f04      	subs	r7, #4
 801da7a:	e7d1      	b.n	801da20 <__hexnan+0xd4>
 801da7c:	2004      	movs	r0, #4
 801da7e:	b007      	add	sp, #28
 801da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da84 <_localeconv_r>:
 801da84:	4800      	ldr	r0, [pc, #0]	; (801da88 <_localeconv_r+0x4>)
 801da86:	4770      	bx	lr
 801da88:	24000258 	.word	0x24000258

0801da8c <_lseek_r>:
 801da8c:	b538      	push	{r3, r4, r5, lr}
 801da8e:	4d07      	ldr	r5, [pc, #28]	; (801daac <_lseek_r+0x20>)
 801da90:	4604      	mov	r4, r0
 801da92:	4608      	mov	r0, r1
 801da94:	4611      	mov	r1, r2
 801da96:	2200      	movs	r2, #0
 801da98:	602a      	str	r2, [r5, #0]
 801da9a:	461a      	mov	r2, r3
 801da9c:	f7e6 f8f0 	bl	8003c80 <_lseek>
 801daa0:	1c43      	adds	r3, r0, #1
 801daa2:	d102      	bne.n	801daaa <_lseek_r+0x1e>
 801daa4:	682b      	ldr	r3, [r5, #0]
 801daa6:	b103      	cbz	r3, 801daaa <_lseek_r+0x1e>
 801daa8:	6023      	str	r3, [r4, #0]
 801daaa:	bd38      	pop	{r3, r4, r5, pc}
 801daac:	240034f8 	.word	0x240034f8

0801dab0 <malloc>:
 801dab0:	4b02      	ldr	r3, [pc, #8]	; (801dabc <malloc+0xc>)
 801dab2:	4601      	mov	r1, r0
 801dab4:	6818      	ldr	r0, [r3, #0]
 801dab6:	f000 bd55 	b.w	801e564 <_malloc_r>
 801daba:	bf00      	nop
 801dabc:	24000100 	.word	0x24000100

0801dac0 <__ascii_mbtowc>:
 801dac0:	b082      	sub	sp, #8
 801dac2:	b901      	cbnz	r1, 801dac6 <__ascii_mbtowc+0x6>
 801dac4:	a901      	add	r1, sp, #4
 801dac6:	b142      	cbz	r2, 801dada <__ascii_mbtowc+0x1a>
 801dac8:	b14b      	cbz	r3, 801dade <__ascii_mbtowc+0x1e>
 801daca:	7813      	ldrb	r3, [r2, #0]
 801dacc:	600b      	str	r3, [r1, #0]
 801dace:	7812      	ldrb	r2, [r2, #0]
 801dad0:	1e10      	subs	r0, r2, #0
 801dad2:	bf18      	it	ne
 801dad4:	2001      	movne	r0, #1
 801dad6:	b002      	add	sp, #8
 801dad8:	4770      	bx	lr
 801dada:	4610      	mov	r0, r2
 801dadc:	e7fb      	b.n	801dad6 <__ascii_mbtowc+0x16>
 801dade:	f06f 0001 	mvn.w	r0, #1
 801dae2:	e7f8      	b.n	801dad6 <__ascii_mbtowc+0x16>

0801dae4 <_Balloc>:
 801dae4:	b570      	push	{r4, r5, r6, lr}
 801dae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dae8:	4604      	mov	r4, r0
 801daea:	460d      	mov	r5, r1
 801daec:	b976      	cbnz	r6, 801db0c <_Balloc+0x28>
 801daee:	2010      	movs	r0, #16
 801daf0:	f7ff ffde 	bl	801dab0 <malloc>
 801daf4:	4602      	mov	r2, r0
 801daf6:	6260      	str	r0, [r4, #36]	; 0x24
 801daf8:	b920      	cbnz	r0, 801db04 <_Balloc+0x20>
 801dafa:	4b18      	ldr	r3, [pc, #96]	; (801db5c <_Balloc+0x78>)
 801dafc:	4818      	ldr	r0, [pc, #96]	; (801db60 <_Balloc+0x7c>)
 801dafe:	2166      	movs	r1, #102	; 0x66
 801db00:	f000 ff4c 	bl	801e99c <__assert_func>
 801db04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801db08:	6006      	str	r6, [r0, #0]
 801db0a:	60c6      	str	r6, [r0, #12]
 801db0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801db0e:	68f3      	ldr	r3, [r6, #12]
 801db10:	b183      	cbz	r3, 801db34 <_Balloc+0x50>
 801db12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801db14:	68db      	ldr	r3, [r3, #12]
 801db16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801db1a:	b9b8      	cbnz	r0, 801db4c <_Balloc+0x68>
 801db1c:	2101      	movs	r1, #1
 801db1e:	fa01 f605 	lsl.w	r6, r1, r5
 801db22:	1d72      	adds	r2, r6, #5
 801db24:	0092      	lsls	r2, r2, #2
 801db26:	4620      	mov	r0, r4
 801db28:	f000 fc9a 	bl	801e460 <_calloc_r>
 801db2c:	b160      	cbz	r0, 801db48 <_Balloc+0x64>
 801db2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801db32:	e00e      	b.n	801db52 <_Balloc+0x6e>
 801db34:	2221      	movs	r2, #33	; 0x21
 801db36:	2104      	movs	r1, #4
 801db38:	4620      	mov	r0, r4
 801db3a:	f000 fc91 	bl	801e460 <_calloc_r>
 801db3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801db40:	60f0      	str	r0, [r6, #12]
 801db42:	68db      	ldr	r3, [r3, #12]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d1e4      	bne.n	801db12 <_Balloc+0x2e>
 801db48:	2000      	movs	r0, #0
 801db4a:	bd70      	pop	{r4, r5, r6, pc}
 801db4c:	6802      	ldr	r2, [r0, #0]
 801db4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801db52:	2300      	movs	r3, #0
 801db54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801db58:	e7f7      	b.n	801db4a <_Balloc+0x66>
 801db5a:	bf00      	nop
 801db5c:	0801fd16 	.word	0x0801fd16
 801db60:	0801fe14 	.word	0x0801fe14

0801db64 <_Bfree>:
 801db64:	b570      	push	{r4, r5, r6, lr}
 801db66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801db68:	4605      	mov	r5, r0
 801db6a:	460c      	mov	r4, r1
 801db6c:	b976      	cbnz	r6, 801db8c <_Bfree+0x28>
 801db6e:	2010      	movs	r0, #16
 801db70:	f7ff ff9e 	bl	801dab0 <malloc>
 801db74:	4602      	mov	r2, r0
 801db76:	6268      	str	r0, [r5, #36]	; 0x24
 801db78:	b920      	cbnz	r0, 801db84 <_Bfree+0x20>
 801db7a:	4b09      	ldr	r3, [pc, #36]	; (801dba0 <_Bfree+0x3c>)
 801db7c:	4809      	ldr	r0, [pc, #36]	; (801dba4 <_Bfree+0x40>)
 801db7e:	218a      	movs	r1, #138	; 0x8a
 801db80:	f000 ff0c 	bl	801e99c <__assert_func>
 801db84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801db88:	6006      	str	r6, [r0, #0]
 801db8a:	60c6      	str	r6, [r0, #12]
 801db8c:	b13c      	cbz	r4, 801db9e <_Bfree+0x3a>
 801db8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801db90:	6862      	ldr	r2, [r4, #4]
 801db92:	68db      	ldr	r3, [r3, #12]
 801db94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801db98:	6021      	str	r1, [r4, #0]
 801db9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801db9e:	bd70      	pop	{r4, r5, r6, pc}
 801dba0:	0801fd16 	.word	0x0801fd16
 801dba4:	0801fe14 	.word	0x0801fe14

0801dba8 <__multadd>:
 801dba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbac:	690d      	ldr	r5, [r1, #16]
 801dbae:	4607      	mov	r7, r0
 801dbb0:	460c      	mov	r4, r1
 801dbb2:	461e      	mov	r6, r3
 801dbb4:	f101 0c14 	add.w	ip, r1, #20
 801dbb8:	2000      	movs	r0, #0
 801dbba:	f8dc 3000 	ldr.w	r3, [ip]
 801dbbe:	b299      	uxth	r1, r3
 801dbc0:	fb02 6101 	mla	r1, r2, r1, r6
 801dbc4:	0c1e      	lsrs	r6, r3, #16
 801dbc6:	0c0b      	lsrs	r3, r1, #16
 801dbc8:	fb02 3306 	mla	r3, r2, r6, r3
 801dbcc:	b289      	uxth	r1, r1
 801dbce:	3001      	adds	r0, #1
 801dbd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dbd4:	4285      	cmp	r5, r0
 801dbd6:	f84c 1b04 	str.w	r1, [ip], #4
 801dbda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dbde:	dcec      	bgt.n	801dbba <__multadd+0x12>
 801dbe0:	b30e      	cbz	r6, 801dc26 <__multadd+0x7e>
 801dbe2:	68a3      	ldr	r3, [r4, #8]
 801dbe4:	42ab      	cmp	r3, r5
 801dbe6:	dc19      	bgt.n	801dc1c <__multadd+0x74>
 801dbe8:	6861      	ldr	r1, [r4, #4]
 801dbea:	4638      	mov	r0, r7
 801dbec:	3101      	adds	r1, #1
 801dbee:	f7ff ff79 	bl	801dae4 <_Balloc>
 801dbf2:	4680      	mov	r8, r0
 801dbf4:	b928      	cbnz	r0, 801dc02 <__multadd+0x5a>
 801dbf6:	4602      	mov	r2, r0
 801dbf8:	4b0c      	ldr	r3, [pc, #48]	; (801dc2c <__multadd+0x84>)
 801dbfa:	480d      	ldr	r0, [pc, #52]	; (801dc30 <__multadd+0x88>)
 801dbfc:	21b5      	movs	r1, #181	; 0xb5
 801dbfe:	f000 fecd 	bl	801e99c <__assert_func>
 801dc02:	6922      	ldr	r2, [r4, #16]
 801dc04:	3202      	adds	r2, #2
 801dc06:	f104 010c 	add.w	r1, r4, #12
 801dc0a:	0092      	lsls	r2, r2, #2
 801dc0c:	300c      	adds	r0, #12
 801dc0e:	f7fd f881 	bl	801ad14 <memcpy>
 801dc12:	4621      	mov	r1, r4
 801dc14:	4638      	mov	r0, r7
 801dc16:	f7ff ffa5 	bl	801db64 <_Bfree>
 801dc1a:	4644      	mov	r4, r8
 801dc1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dc20:	3501      	adds	r5, #1
 801dc22:	615e      	str	r6, [r3, #20]
 801dc24:	6125      	str	r5, [r4, #16]
 801dc26:	4620      	mov	r0, r4
 801dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc2c:	0801fd88 	.word	0x0801fd88
 801dc30:	0801fe14 	.word	0x0801fe14

0801dc34 <__s2b>:
 801dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc38:	460c      	mov	r4, r1
 801dc3a:	4615      	mov	r5, r2
 801dc3c:	461f      	mov	r7, r3
 801dc3e:	2209      	movs	r2, #9
 801dc40:	3308      	adds	r3, #8
 801dc42:	4606      	mov	r6, r0
 801dc44:	fb93 f3f2 	sdiv	r3, r3, r2
 801dc48:	2100      	movs	r1, #0
 801dc4a:	2201      	movs	r2, #1
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	db09      	blt.n	801dc64 <__s2b+0x30>
 801dc50:	4630      	mov	r0, r6
 801dc52:	f7ff ff47 	bl	801dae4 <_Balloc>
 801dc56:	b940      	cbnz	r0, 801dc6a <__s2b+0x36>
 801dc58:	4602      	mov	r2, r0
 801dc5a:	4b19      	ldr	r3, [pc, #100]	; (801dcc0 <__s2b+0x8c>)
 801dc5c:	4819      	ldr	r0, [pc, #100]	; (801dcc4 <__s2b+0x90>)
 801dc5e:	21ce      	movs	r1, #206	; 0xce
 801dc60:	f000 fe9c 	bl	801e99c <__assert_func>
 801dc64:	0052      	lsls	r2, r2, #1
 801dc66:	3101      	adds	r1, #1
 801dc68:	e7f0      	b.n	801dc4c <__s2b+0x18>
 801dc6a:	9b08      	ldr	r3, [sp, #32]
 801dc6c:	6143      	str	r3, [r0, #20]
 801dc6e:	2d09      	cmp	r5, #9
 801dc70:	f04f 0301 	mov.w	r3, #1
 801dc74:	6103      	str	r3, [r0, #16]
 801dc76:	dd16      	ble.n	801dca6 <__s2b+0x72>
 801dc78:	f104 0909 	add.w	r9, r4, #9
 801dc7c:	46c8      	mov	r8, r9
 801dc7e:	442c      	add	r4, r5
 801dc80:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dc84:	4601      	mov	r1, r0
 801dc86:	3b30      	subs	r3, #48	; 0x30
 801dc88:	220a      	movs	r2, #10
 801dc8a:	4630      	mov	r0, r6
 801dc8c:	f7ff ff8c 	bl	801dba8 <__multadd>
 801dc90:	45a0      	cmp	r8, r4
 801dc92:	d1f5      	bne.n	801dc80 <__s2b+0x4c>
 801dc94:	f1a5 0408 	sub.w	r4, r5, #8
 801dc98:	444c      	add	r4, r9
 801dc9a:	1b2d      	subs	r5, r5, r4
 801dc9c:	1963      	adds	r3, r4, r5
 801dc9e:	42bb      	cmp	r3, r7
 801dca0:	db04      	blt.n	801dcac <__s2b+0x78>
 801dca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dca6:	340a      	adds	r4, #10
 801dca8:	2509      	movs	r5, #9
 801dcaa:	e7f6      	b.n	801dc9a <__s2b+0x66>
 801dcac:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dcb0:	4601      	mov	r1, r0
 801dcb2:	3b30      	subs	r3, #48	; 0x30
 801dcb4:	220a      	movs	r2, #10
 801dcb6:	4630      	mov	r0, r6
 801dcb8:	f7ff ff76 	bl	801dba8 <__multadd>
 801dcbc:	e7ee      	b.n	801dc9c <__s2b+0x68>
 801dcbe:	bf00      	nop
 801dcc0:	0801fd88 	.word	0x0801fd88
 801dcc4:	0801fe14 	.word	0x0801fe14

0801dcc8 <__hi0bits>:
 801dcc8:	0c03      	lsrs	r3, r0, #16
 801dcca:	041b      	lsls	r3, r3, #16
 801dccc:	b9d3      	cbnz	r3, 801dd04 <__hi0bits+0x3c>
 801dcce:	0400      	lsls	r0, r0, #16
 801dcd0:	2310      	movs	r3, #16
 801dcd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dcd6:	bf04      	itt	eq
 801dcd8:	0200      	lsleq	r0, r0, #8
 801dcda:	3308      	addeq	r3, #8
 801dcdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dce0:	bf04      	itt	eq
 801dce2:	0100      	lsleq	r0, r0, #4
 801dce4:	3304      	addeq	r3, #4
 801dce6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dcea:	bf04      	itt	eq
 801dcec:	0080      	lsleq	r0, r0, #2
 801dcee:	3302      	addeq	r3, #2
 801dcf0:	2800      	cmp	r0, #0
 801dcf2:	db05      	blt.n	801dd00 <__hi0bits+0x38>
 801dcf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dcf8:	f103 0301 	add.w	r3, r3, #1
 801dcfc:	bf08      	it	eq
 801dcfe:	2320      	moveq	r3, #32
 801dd00:	4618      	mov	r0, r3
 801dd02:	4770      	bx	lr
 801dd04:	2300      	movs	r3, #0
 801dd06:	e7e4      	b.n	801dcd2 <__hi0bits+0xa>

0801dd08 <__lo0bits>:
 801dd08:	6803      	ldr	r3, [r0, #0]
 801dd0a:	f013 0207 	ands.w	r2, r3, #7
 801dd0e:	4601      	mov	r1, r0
 801dd10:	d00b      	beq.n	801dd2a <__lo0bits+0x22>
 801dd12:	07da      	lsls	r2, r3, #31
 801dd14:	d423      	bmi.n	801dd5e <__lo0bits+0x56>
 801dd16:	0798      	lsls	r0, r3, #30
 801dd18:	bf49      	itett	mi
 801dd1a:	085b      	lsrmi	r3, r3, #1
 801dd1c:	089b      	lsrpl	r3, r3, #2
 801dd1e:	2001      	movmi	r0, #1
 801dd20:	600b      	strmi	r3, [r1, #0]
 801dd22:	bf5c      	itt	pl
 801dd24:	600b      	strpl	r3, [r1, #0]
 801dd26:	2002      	movpl	r0, #2
 801dd28:	4770      	bx	lr
 801dd2a:	b298      	uxth	r0, r3
 801dd2c:	b9a8      	cbnz	r0, 801dd5a <__lo0bits+0x52>
 801dd2e:	0c1b      	lsrs	r3, r3, #16
 801dd30:	2010      	movs	r0, #16
 801dd32:	b2da      	uxtb	r2, r3
 801dd34:	b90a      	cbnz	r2, 801dd3a <__lo0bits+0x32>
 801dd36:	3008      	adds	r0, #8
 801dd38:	0a1b      	lsrs	r3, r3, #8
 801dd3a:	071a      	lsls	r2, r3, #28
 801dd3c:	bf04      	itt	eq
 801dd3e:	091b      	lsreq	r3, r3, #4
 801dd40:	3004      	addeq	r0, #4
 801dd42:	079a      	lsls	r2, r3, #30
 801dd44:	bf04      	itt	eq
 801dd46:	089b      	lsreq	r3, r3, #2
 801dd48:	3002      	addeq	r0, #2
 801dd4a:	07da      	lsls	r2, r3, #31
 801dd4c:	d403      	bmi.n	801dd56 <__lo0bits+0x4e>
 801dd4e:	085b      	lsrs	r3, r3, #1
 801dd50:	f100 0001 	add.w	r0, r0, #1
 801dd54:	d005      	beq.n	801dd62 <__lo0bits+0x5a>
 801dd56:	600b      	str	r3, [r1, #0]
 801dd58:	4770      	bx	lr
 801dd5a:	4610      	mov	r0, r2
 801dd5c:	e7e9      	b.n	801dd32 <__lo0bits+0x2a>
 801dd5e:	2000      	movs	r0, #0
 801dd60:	4770      	bx	lr
 801dd62:	2020      	movs	r0, #32
 801dd64:	4770      	bx	lr
	...

0801dd68 <__i2b>:
 801dd68:	b510      	push	{r4, lr}
 801dd6a:	460c      	mov	r4, r1
 801dd6c:	2101      	movs	r1, #1
 801dd6e:	f7ff feb9 	bl	801dae4 <_Balloc>
 801dd72:	4602      	mov	r2, r0
 801dd74:	b928      	cbnz	r0, 801dd82 <__i2b+0x1a>
 801dd76:	4b05      	ldr	r3, [pc, #20]	; (801dd8c <__i2b+0x24>)
 801dd78:	4805      	ldr	r0, [pc, #20]	; (801dd90 <__i2b+0x28>)
 801dd7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dd7e:	f000 fe0d 	bl	801e99c <__assert_func>
 801dd82:	2301      	movs	r3, #1
 801dd84:	6144      	str	r4, [r0, #20]
 801dd86:	6103      	str	r3, [r0, #16]
 801dd88:	bd10      	pop	{r4, pc}
 801dd8a:	bf00      	nop
 801dd8c:	0801fd88 	.word	0x0801fd88
 801dd90:	0801fe14 	.word	0x0801fe14

0801dd94 <__multiply>:
 801dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd98:	4691      	mov	r9, r2
 801dd9a:	690a      	ldr	r2, [r1, #16]
 801dd9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dda0:	429a      	cmp	r2, r3
 801dda2:	bfb8      	it	lt
 801dda4:	460b      	movlt	r3, r1
 801dda6:	460c      	mov	r4, r1
 801dda8:	bfbc      	itt	lt
 801ddaa:	464c      	movlt	r4, r9
 801ddac:	4699      	movlt	r9, r3
 801ddae:	6927      	ldr	r7, [r4, #16]
 801ddb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ddb4:	68a3      	ldr	r3, [r4, #8]
 801ddb6:	6861      	ldr	r1, [r4, #4]
 801ddb8:	eb07 060a 	add.w	r6, r7, sl
 801ddbc:	42b3      	cmp	r3, r6
 801ddbe:	b085      	sub	sp, #20
 801ddc0:	bfb8      	it	lt
 801ddc2:	3101      	addlt	r1, #1
 801ddc4:	f7ff fe8e 	bl	801dae4 <_Balloc>
 801ddc8:	b930      	cbnz	r0, 801ddd8 <__multiply+0x44>
 801ddca:	4602      	mov	r2, r0
 801ddcc:	4b44      	ldr	r3, [pc, #272]	; (801dee0 <__multiply+0x14c>)
 801ddce:	4845      	ldr	r0, [pc, #276]	; (801dee4 <__multiply+0x150>)
 801ddd0:	f240 115d 	movw	r1, #349	; 0x15d
 801ddd4:	f000 fde2 	bl	801e99c <__assert_func>
 801ddd8:	f100 0514 	add.w	r5, r0, #20
 801dddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dde0:	462b      	mov	r3, r5
 801dde2:	2200      	movs	r2, #0
 801dde4:	4543      	cmp	r3, r8
 801dde6:	d321      	bcc.n	801de2c <__multiply+0x98>
 801dde8:	f104 0314 	add.w	r3, r4, #20
 801ddec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ddf0:	f109 0314 	add.w	r3, r9, #20
 801ddf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ddf8:	9202      	str	r2, [sp, #8]
 801ddfa:	1b3a      	subs	r2, r7, r4
 801ddfc:	3a15      	subs	r2, #21
 801ddfe:	f022 0203 	bic.w	r2, r2, #3
 801de02:	3204      	adds	r2, #4
 801de04:	f104 0115 	add.w	r1, r4, #21
 801de08:	428f      	cmp	r7, r1
 801de0a:	bf38      	it	cc
 801de0c:	2204      	movcc	r2, #4
 801de0e:	9201      	str	r2, [sp, #4]
 801de10:	9a02      	ldr	r2, [sp, #8]
 801de12:	9303      	str	r3, [sp, #12]
 801de14:	429a      	cmp	r2, r3
 801de16:	d80c      	bhi.n	801de32 <__multiply+0x9e>
 801de18:	2e00      	cmp	r6, #0
 801de1a:	dd03      	ble.n	801de24 <__multiply+0x90>
 801de1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801de20:	2b00      	cmp	r3, #0
 801de22:	d05a      	beq.n	801deda <__multiply+0x146>
 801de24:	6106      	str	r6, [r0, #16]
 801de26:	b005      	add	sp, #20
 801de28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de2c:	f843 2b04 	str.w	r2, [r3], #4
 801de30:	e7d8      	b.n	801dde4 <__multiply+0x50>
 801de32:	f8b3 a000 	ldrh.w	sl, [r3]
 801de36:	f1ba 0f00 	cmp.w	sl, #0
 801de3a:	d024      	beq.n	801de86 <__multiply+0xf2>
 801de3c:	f104 0e14 	add.w	lr, r4, #20
 801de40:	46a9      	mov	r9, r5
 801de42:	f04f 0c00 	mov.w	ip, #0
 801de46:	f85e 2b04 	ldr.w	r2, [lr], #4
 801de4a:	f8d9 1000 	ldr.w	r1, [r9]
 801de4e:	fa1f fb82 	uxth.w	fp, r2
 801de52:	b289      	uxth	r1, r1
 801de54:	fb0a 110b 	mla	r1, sl, fp, r1
 801de58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801de5c:	f8d9 2000 	ldr.w	r2, [r9]
 801de60:	4461      	add	r1, ip
 801de62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801de66:	fb0a c20b 	mla	r2, sl, fp, ip
 801de6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801de6e:	b289      	uxth	r1, r1
 801de70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801de74:	4577      	cmp	r7, lr
 801de76:	f849 1b04 	str.w	r1, [r9], #4
 801de7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801de7e:	d8e2      	bhi.n	801de46 <__multiply+0xb2>
 801de80:	9a01      	ldr	r2, [sp, #4]
 801de82:	f845 c002 	str.w	ip, [r5, r2]
 801de86:	9a03      	ldr	r2, [sp, #12]
 801de88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801de8c:	3304      	adds	r3, #4
 801de8e:	f1b9 0f00 	cmp.w	r9, #0
 801de92:	d020      	beq.n	801ded6 <__multiply+0x142>
 801de94:	6829      	ldr	r1, [r5, #0]
 801de96:	f104 0c14 	add.w	ip, r4, #20
 801de9a:	46ae      	mov	lr, r5
 801de9c:	f04f 0a00 	mov.w	sl, #0
 801dea0:	f8bc b000 	ldrh.w	fp, [ip]
 801dea4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801dea8:	fb09 220b 	mla	r2, r9, fp, r2
 801deac:	4492      	add	sl, r2
 801deae:	b289      	uxth	r1, r1
 801deb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801deb4:	f84e 1b04 	str.w	r1, [lr], #4
 801deb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801debc:	f8be 1000 	ldrh.w	r1, [lr]
 801dec0:	0c12      	lsrs	r2, r2, #16
 801dec2:	fb09 1102 	mla	r1, r9, r2, r1
 801dec6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801deca:	4567      	cmp	r7, ip
 801decc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ded0:	d8e6      	bhi.n	801dea0 <__multiply+0x10c>
 801ded2:	9a01      	ldr	r2, [sp, #4]
 801ded4:	50a9      	str	r1, [r5, r2]
 801ded6:	3504      	adds	r5, #4
 801ded8:	e79a      	b.n	801de10 <__multiply+0x7c>
 801deda:	3e01      	subs	r6, #1
 801dedc:	e79c      	b.n	801de18 <__multiply+0x84>
 801dede:	bf00      	nop
 801dee0:	0801fd88 	.word	0x0801fd88
 801dee4:	0801fe14 	.word	0x0801fe14

0801dee8 <__pow5mult>:
 801dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801deec:	4615      	mov	r5, r2
 801deee:	f012 0203 	ands.w	r2, r2, #3
 801def2:	4606      	mov	r6, r0
 801def4:	460f      	mov	r7, r1
 801def6:	d007      	beq.n	801df08 <__pow5mult+0x20>
 801def8:	4c25      	ldr	r4, [pc, #148]	; (801df90 <__pow5mult+0xa8>)
 801defa:	3a01      	subs	r2, #1
 801defc:	2300      	movs	r3, #0
 801defe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801df02:	f7ff fe51 	bl	801dba8 <__multadd>
 801df06:	4607      	mov	r7, r0
 801df08:	10ad      	asrs	r5, r5, #2
 801df0a:	d03d      	beq.n	801df88 <__pow5mult+0xa0>
 801df0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801df0e:	b97c      	cbnz	r4, 801df30 <__pow5mult+0x48>
 801df10:	2010      	movs	r0, #16
 801df12:	f7ff fdcd 	bl	801dab0 <malloc>
 801df16:	4602      	mov	r2, r0
 801df18:	6270      	str	r0, [r6, #36]	; 0x24
 801df1a:	b928      	cbnz	r0, 801df28 <__pow5mult+0x40>
 801df1c:	4b1d      	ldr	r3, [pc, #116]	; (801df94 <__pow5mult+0xac>)
 801df1e:	481e      	ldr	r0, [pc, #120]	; (801df98 <__pow5mult+0xb0>)
 801df20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801df24:	f000 fd3a 	bl	801e99c <__assert_func>
 801df28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801df2c:	6004      	str	r4, [r0, #0]
 801df2e:	60c4      	str	r4, [r0, #12]
 801df30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801df34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801df38:	b94c      	cbnz	r4, 801df4e <__pow5mult+0x66>
 801df3a:	f240 2171 	movw	r1, #625	; 0x271
 801df3e:	4630      	mov	r0, r6
 801df40:	f7ff ff12 	bl	801dd68 <__i2b>
 801df44:	2300      	movs	r3, #0
 801df46:	f8c8 0008 	str.w	r0, [r8, #8]
 801df4a:	4604      	mov	r4, r0
 801df4c:	6003      	str	r3, [r0, #0]
 801df4e:	f04f 0900 	mov.w	r9, #0
 801df52:	07eb      	lsls	r3, r5, #31
 801df54:	d50a      	bpl.n	801df6c <__pow5mult+0x84>
 801df56:	4639      	mov	r1, r7
 801df58:	4622      	mov	r2, r4
 801df5a:	4630      	mov	r0, r6
 801df5c:	f7ff ff1a 	bl	801dd94 <__multiply>
 801df60:	4639      	mov	r1, r7
 801df62:	4680      	mov	r8, r0
 801df64:	4630      	mov	r0, r6
 801df66:	f7ff fdfd 	bl	801db64 <_Bfree>
 801df6a:	4647      	mov	r7, r8
 801df6c:	106d      	asrs	r5, r5, #1
 801df6e:	d00b      	beq.n	801df88 <__pow5mult+0xa0>
 801df70:	6820      	ldr	r0, [r4, #0]
 801df72:	b938      	cbnz	r0, 801df84 <__pow5mult+0x9c>
 801df74:	4622      	mov	r2, r4
 801df76:	4621      	mov	r1, r4
 801df78:	4630      	mov	r0, r6
 801df7a:	f7ff ff0b 	bl	801dd94 <__multiply>
 801df7e:	6020      	str	r0, [r4, #0]
 801df80:	f8c0 9000 	str.w	r9, [r0]
 801df84:	4604      	mov	r4, r0
 801df86:	e7e4      	b.n	801df52 <__pow5mult+0x6a>
 801df88:	4638      	mov	r0, r7
 801df8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df8e:	bf00      	nop
 801df90:	0801ff60 	.word	0x0801ff60
 801df94:	0801fd16 	.word	0x0801fd16
 801df98:	0801fe14 	.word	0x0801fe14

0801df9c <__lshift>:
 801df9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfa0:	460c      	mov	r4, r1
 801dfa2:	6849      	ldr	r1, [r1, #4]
 801dfa4:	6923      	ldr	r3, [r4, #16]
 801dfa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dfaa:	68a3      	ldr	r3, [r4, #8]
 801dfac:	4607      	mov	r7, r0
 801dfae:	4691      	mov	r9, r2
 801dfb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dfb4:	f108 0601 	add.w	r6, r8, #1
 801dfb8:	42b3      	cmp	r3, r6
 801dfba:	db0b      	blt.n	801dfd4 <__lshift+0x38>
 801dfbc:	4638      	mov	r0, r7
 801dfbe:	f7ff fd91 	bl	801dae4 <_Balloc>
 801dfc2:	4605      	mov	r5, r0
 801dfc4:	b948      	cbnz	r0, 801dfda <__lshift+0x3e>
 801dfc6:	4602      	mov	r2, r0
 801dfc8:	4b2a      	ldr	r3, [pc, #168]	; (801e074 <__lshift+0xd8>)
 801dfca:	482b      	ldr	r0, [pc, #172]	; (801e078 <__lshift+0xdc>)
 801dfcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dfd0:	f000 fce4 	bl	801e99c <__assert_func>
 801dfd4:	3101      	adds	r1, #1
 801dfd6:	005b      	lsls	r3, r3, #1
 801dfd8:	e7ee      	b.n	801dfb8 <__lshift+0x1c>
 801dfda:	2300      	movs	r3, #0
 801dfdc:	f100 0114 	add.w	r1, r0, #20
 801dfe0:	f100 0210 	add.w	r2, r0, #16
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	4553      	cmp	r3, sl
 801dfe8:	db37      	blt.n	801e05a <__lshift+0xbe>
 801dfea:	6920      	ldr	r0, [r4, #16]
 801dfec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dff0:	f104 0314 	add.w	r3, r4, #20
 801dff4:	f019 091f 	ands.w	r9, r9, #31
 801dff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e000:	d02f      	beq.n	801e062 <__lshift+0xc6>
 801e002:	f1c9 0e20 	rsb	lr, r9, #32
 801e006:	468a      	mov	sl, r1
 801e008:	f04f 0c00 	mov.w	ip, #0
 801e00c:	681a      	ldr	r2, [r3, #0]
 801e00e:	fa02 f209 	lsl.w	r2, r2, r9
 801e012:	ea42 020c 	orr.w	r2, r2, ip
 801e016:	f84a 2b04 	str.w	r2, [sl], #4
 801e01a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e01e:	4298      	cmp	r0, r3
 801e020:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e024:	d8f2      	bhi.n	801e00c <__lshift+0x70>
 801e026:	1b03      	subs	r3, r0, r4
 801e028:	3b15      	subs	r3, #21
 801e02a:	f023 0303 	bic.w	r3, r3, #3
 801e02e:	3304      	adds	r3, #4
 801e030:	f104 0215 	add.w	r2, r4, #21
 801e034:	4290      	cmp	r0, r2
 801e036:	bf38      	it	cc
 801e038:	2304      	movcc	r3, #4
 801e03a:	f841 c003 	str.w	ip, [r1, r3]
 801e03e:	f1bc 0f00 	cmp.w	ip, #0
 801e042:	d001      	beq.n	801e048 <__lshift+0xac>
 801e044:	f108 0602 	add.w	r6, r8, #2
 801e048:	3e01      	subs	r6, #1
 801e04a:	4638      	mov	r0, r7
 801e04c:	612e      	str	r6, [r5, #16]
 801e04e:	4621      	mov	r1, r4
 801e050:	f7ff fd88 	bl	801db64 <_Bfree>
 801e054:	4628      	mov	r0, r5
 801e056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e05a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e05e:	3301      	adds	r3, #1
 801e060:	e7c1      	b.n	801dfe6 <__lshift+0x4a>
 801e062:	3904      	subs	r1, #4
 801e064:	f853 2b04 	ldr.w	r2, [r3], #4
 801e068:	f841 2f04 	str.w	r2, [r1, #4]!
 801e06c:	4298      	cmp	r0, r3
 801e06e:	d8f9      	bhi.n	801e064 <__lshift+0xc8>
 801e070:	e7ea      	b.n	801e048 <__lshift+0xac>
 801e072:	bf00      	nop
 801e074:	0801fd88 	.word	0x0801fd88
 801e078:	0801fe14 	.word	0x0801fe14

0801e07c <__mcmp>:
 801e07c:	b530      	push	{r4, r5, lr}
 801e07e:	6902      	ldr	r2, [r0, #16]
 801e080:	690c      	ldr	r4, [r1, #16]
 801e082:	1b12      	subs	r2, r2, r4
 801e084:	d10e      	bne.n	801e0a4 <__mcmp+0x28>
 801e086:	f100 0314 	add.w	r3, r0, #20
 801e08a:	3114      	adds	r1, #20
 801e08c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e090:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e094:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e098:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e09c:	42a5      	cmp	r5, r4
 801e09e:	d003      	beq.n	801e0a8 <__mcmp+0x2c>
 801e0a0:	d305      	bcc.n	801e0ae <__mcmp+0x32>
 801e0a2:	2201      	movs	r2, #1
 801e0a4:	4610      	mov	r0, r2
 801e0a6:	bd30      	pop	{r4, r5, pc}
 801e0a8:	4283      	cmp	r3, r0
 801e0aa:	d3f3      	bcc.n	801e094 <__mcmp+0x18>
 801e0ac:	e7fa      	b.n	801e0a4 <__mcmp+0x28>
 801e0ae:	f04f 32ff 	mov.w	r2, #4294967295
 801e0b2:	e7f7      	b.n	801e0a4 <__mcmp+0x28>

0801e0b4 <__mdiff>:
 801e0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0b8:	460c      	mov	r4, r1
 801e0ba:	4606      	mov	r6, r0
 801e0bc:	4611      	mov	r1, r2
 801e0be:	4620      	mov	r0, r4
 801e0c0:	4690      	mov	r8, r2
 801e0c2:	f7ff ffdb 	bl	801e07c <__mcmp>
 801e0c6:	1e05      	subs	r5, r0, #0
 801e0c8:	d110      	bne.n	801e0ec <__mdiff+0x38>
 801e0ca:	4629      	mov	r1, r5
 801e0cc:	4630      	mov	r0, r6
 801e0ce:	f7ff fd09 	bl	801dae4 <_Balloc>
 801e0d2:	b930      	cbnz	r0, 801e0e2 <__mdiff+0x2e>
 801e0d4:	4b3a      	ldr	r3, [pc, #232]	; (801e1c0 <__mdiff+0x10c>)
 801e0d6:	4602      	mov	r2, r0
 801e0d8:	f240 2132 	movw	r1, #562	; 0x232
 801e0dc:	4839      	ldr	r0, [pc, #228]	; (801e1c4 <__mdiff+0x110>)
 801e0de:	f000 fc5d 	bl	801e99c <__assert_func>
 801e0e2:	2301      	movs	r3, #1
 801e0e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0ec:	bfa4      	itt	ge
 801e0ee:	4643      	movge	r3, r8
 801e0f0:	46a0      	movge	r8, r4
 801e0f2:	4630      	mov	r0, r6
 801e0f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e0f8:	bfa6      	itte	ge
 801e0fa:	461c      	movge	r4, r3
 801e0fc:	2500      	movge	r5, #0
 801e0fe:	2501      	movlt	r5, #1
 801e100:	f7ff fcf0 	bl	801dae4 <_Balloc>
 801e104:	b920      	cbnz	r0, 801e110 <__mdiff+0x5c>
 801e106:	4b2e      	ldr	r3, [pc, #184]	; (801e1c0 <__mdiff+0x10c>)
 801e108:	4602      	mov	r2, r0
 801e10a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e10e:	e7e5      	b.n	801e0dc <__mdiff+0x28>
 801e110:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e114:	6926      	ldr	r6, [r4, #16]
 801e116:	60c5      	str	r5, [r0, #12]
 801e118:	f104 0914 	add.w	r9, r4, #20
 801e11c:	f108 0514 	add.w	r5, r8, #20
 801e120:	f100 0e14 	add.w	lr, r0, #20
 801e124:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e128:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e12c:	f108 0210 	add.w	r2, r8, #16
 801e130:	46f2      	mov	sl, lr
 801e132:	2100      	movs	r1, #0
 801e134:	f859 3b04 	ldr.w	r3, [r9], #4
 801e138:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e13c:	fa1f f883 	uxth.w	r8, r3
 801e140:	fa11 f18b 	uxtah	r1, r1, fp
 801e144:	0c1b      	lsrs	r3, r3, #16
 801e146:	eba1 0808 	sub.w	r8, r1, r8
 801e14a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e14e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e152:	fa1f f888 	uxth.w	r8, r8
 801e156:	1419      	asrs	r1, r3, #16
 801e158:	454e      	cmp	r6, r9
 801e15a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e15e:	f84a 3b04 	str.w	r3, [sl], #4
 801e162:	d8e7      	bhi.n	801e134 <__mdiff+0x80>
 801e164:	1b33      	subs	r3, r6, r4
 801e166:	3b15      	subs	r3, #21
 801e168:	f023 0303 	bic.w	r3, r3, #3
 801e16c:	3304      	adds	r3, #4
 801e16e:	3415      	adds	r4, #21
 801e170:	42a6      	cmp	r6, r4
 801e172:	bf38      	it	cc
 801e174:	2304      	movcc	r3, #4
 801e176:	441d      	add	r5, r3
 801e178:	4473      	add	r3, lr
 801e17a:	469e      	mov	lr, r3
 801e17c:	462e      	mov	r6, r5
 801e17e:	4566      	cmp	r6, ip
 801e180:	d30e      	bcc.n	801e1a0 <__mdiff+0xec>
 801e182:	f10c 0203 	add.w	r2, ip, #3
 801e186:	1b52      	subs	r2, r2, r5
 801e188:	f022 0203 	bic.w	r2, r2, #3
 801e18c:	3d03      	subs	r5, #3
 801e18e:	45ac      	cmp	ip, r5
 801e190:	bf38      	it	cc
 801e192:	2200      	movcc	r2, #0
 801e194:	441a      	add	r2, r3
 801e196:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e19a:	b17b      	cbz	r3, 801e1bc <__mdiff+0x108>
 801e19c:	6107      	str	r7, [r0, #16]
 801e19e:	e7a3      	b.n	801e0e8 <__mdiff+0x34>
 801e1a0:	f856 8b04 	ldr.w	r8, [r6], #4
 801e1a4:	fa11 f288 	uxtah	r2, r1, r8
 801e1a8:	1414      	asrs	r4, r2, #16
 801e1aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e1ae:	b292      	uxth	r2, r2
 801e1b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e1b4:	f84e 2b04 	str.w	r2, [lr], #4
 801e1b8:	1421      	asrs	r1, r4, #16
 801e1ba:	e7e0      	b.n	801e17e <__mdiff+0xca>
 801e1bc:	3f01      	subs	r7, #1
 801e1be:	e7ea      	b.n	801e196 <__mdiff+0xe2>
 801e1c0:	0801fd88 	.word	0x0801fd88
 801e1c4:	0801fe14 	.word	0x0801fe14

0801e1c8 <__ulp>:
 801e1c8:	b082      	sub	sp, #8
 801e1ca:	ed8d 0b00 	vstr	d0, [sp]
 801e1ce:	9b01      	ldr	r3, [sp, #4]
 801e1d0:	4912      	ldr	r1, [pc, #72]	; (801e21c <__ulp+0x54>)
 801e1d2:	4019      	ands	r1, r3
 801e1d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e1d8:	2900      	cmp	r1, #0
 801e1da:	dd05      	ble.n	801e1e8 <__ulp+0x20>
 801e1dc:	2200      	movs	r2, #0
 801e1de:	460b      	mov	r3, r1
 801e1e0:	ec43 2b10 	vmov	d0, r2, r3
 801e1e4:	b002      	add	sp, #8
 801e1e6:	4770      	bx	lr
 801e1e8:	4249      	negs	r1, r1
 801e1ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e1ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e1f2:	f04f 0200 	mov.w	r2, #0
 801e1f6:	f04f 0300 	mov.w	r3, #0
 801e1fa:	da04      	bge.n	801e206 <__ulp+0x3e>
 801e1fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e200:	fa41 f300 	asr.w	r3, r1, r0
 801e204:	e7ec      	b.n	801e1e0 <__ulp+0x18>
 801e206:	f1a0 0114 	sub.w	r1, r0, #20
 801e20a:	291e      	cmp	r1, #30
 801e20c:	bfda      	itte	le
 801e20e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e212:	fa20 f101 	lsrle.w	r1, r0, r1
 801e216:	2101      	movgt	r1, #1
 801e218:	460a      	mov	r2, r1
 801e21a:	e7e1      	b.n	801e1e0 <__ulp+0x18>
 801e21c:	7ff00000 	.word	0x7ff00000

0801e220 <__b2d>:
 801e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e222:	6905      	ldr	r5, [r0, #16]
 801e224:	f100 0714 	add.w	r7, r0, #20
 801e228:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e22c:	1f2e      	subs	r6, r5, #4
 801e22e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e232:	4620      	mov	r0, r4
 801e234:	f7ff fd48 	bl	801dcc8 <__hi0bits>
 801e238:	f1c0 0320 	rsb	r3, r0, #32
 801e23c:	280a      	cmp	r0, #10
 801e23e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e2bc <__b2d+0x9c>
 801e242:	600b      	str	r3, [r1, #0]
 801e244:	dc14      	bgt.n	801e270 <__b2d+0x50>
 801e246:	f1c0 0e0b 	rsb	lr, r0, #11
 801e24a:	fa24 f10e 	lsr.w	r1, r4, lr
 801e24e:	42b7      	cmp	r7, r6
 801e250:	ea41 030c 	orr.w	r3, r1, ip
 801e254:	bf34      	ite	cc
 801e256:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e25a:	2100      	movcs	r1, #0
 801e25c:	3015      	adds	r0, #21
 801e25e:	fa04 f000 	lsl.w	r0, r4, r0
 801e262:	fa21 f10e 	lsr.w	r1, r1, lr
 801e266:	ea40 0201 	orr.w	r2, r0, r1
 801e26a:	ec43 2b10 	vmov	d0, r2, r3
 801e26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e270:	42b7      	cmp	r7, r6
 801e272:	bf3a      	itte	cc
 801e274:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e278:	f1a5 0608 	subcc.w	r6, r5, #8
 801e27c:	2100      	movcs	r1, #0
 801e27e:	380b      	subs	r0, #11
 801e280:	d017      	beq.n	801e2b2 <__b2d+0x92>
 801e282:	f1c0 0c20 	rsb	ip, r0, #32
 801e286:	fa04 f500 	lsl.w	r5, r4, r0
 801e28a:	42be      	cmp	r6, r7
 801e28c:	fa21 f40c 	lsr.w	r4, r1, ip
 801e290:	ea45 0504 	orr.w	r5, r5, r4
 801e294:	bf8c      	ite	hi
 801e296:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e29a:	2400      	movls	r4, #0
 801e29c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e2a0:	fa01 f000 	lsl.w	r0, r1, r0
 801e2a4:	fa24 f40c 	lsr.w	r4, r4, ip
 801e2a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e2ac:	ea40 0204 	orr.w	r2, r0, r4
 801e2b0:	e7db      	b.n	801e26a <__b2d+0x4a>
 801e2b2:	ea44 030c 	orr.w	r3, r4, ip
 801e2b6:	460a      	mov	r2, r1
 801e2b8:	e7d7      	b.n	801e26a <__b2d+0x4a>
 801e2ba:	bf00      	nop
 801e2bc:	3ff00000 	.word	0x3ff00000

0801e2c0 <__d2b>:
 801e2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e2c4:	4689      	mov	r9, r1
 801e2c6:	2101      	movs	r1, #1
 801e2c8:	ec57 6b10 	vmov	r6, r7, d0
 801e2cc:	4690      	mov	r8, r2
 801e2ce:	f7ff fc09 	bl	801dae4 <_Balloc>
 801e2d2:	4604      	mov	r4, r0
 801e2d4:	b930      	cbnz	r0, 801e2e4 <__d2b+0x24>
 801e2d6:	4602      	mov	r2, r0
 801e2d8:	4b25      	ldr	r3, [pc, #148]	; (801e370 <__d2b+0xb0>)
 801e2da:	4826      	ldr	r0, [pc, #152]	; (801e374 <__d2b+0xb4>)
 801e2dc:	f240 310a 	movw	r1, #778	; 0x30a
 801e2e0:	f000 fb5c 	bl	801e99c <__assert_func>
 801e2e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e2e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e2ec:	bb35      	cbnz	r5, 801e33c <__d2b+0x7c>
 801e2ee:	2e00      	cmp	r6, #0
 801e2f0:	9301      	str	r3, [sp, #4]
 801e2f2:	d028      	beq.n	801e346 <__d2b+0x86>
 801e2f4:	4668      	mov	r0, sp
 801e2f6:	9600      	str	r6, [sp, #0]
 801e2f8:	f7ff fd06 	bl	801dd08 <__lo0bits>
 801e2fc:	9900      	ldr	r1, [sp, #0]
 801e2fe:	b300      	cbz	r0, 801e342 <__d2b+0x82>
 801e300:	9a01      	ldr	r2, [sp, #4]
 801e302:	f1c0 0320 	rsb	r3, r0, #32
 801e306:	fa02 f303 	lsl.w	r3, r2, r3
 801e30a:	430b      	orrs	r3, r1
 801e30c:	40c2      	lsrs	r2, r0
 801e30e:	6163      	str	r3, [r4, #20]
 801e310:	9201      	str	r2, [sp, #4]
 801e312:	9b01      	ldr	r3, [sp, #4]
 801e314:	61a3      	str	r3, [r4, #24]
 801e316:	2b00      	cmp	r3, #0
 801e318:	bf14      	ite	ne
 801e31a:	2202      	movne	r2, #2
 801e31c:	2201      	moveq	r2, #1
 801e31e:	6122      	str	r2, [r4, #16]
 801e320:	b1d5      	cbz	r5, 801e358 <__d2b+0x98>
 801e322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e326:	4405      	add	r5, r0
 801e328:	f8c9 5000 	str.w	r5, [r9]
 801e32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e330:	f8c8 0000 	str.w	r0, [r8]
 801e334:	4620      	mov	r0, r4
 801e336:	b003      	add	sp, #12
 801e338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e340:	e7d5      	b.n	801e2ee <__d2b+0x2e>
 801e342:	6161      	str	r1, [r4, #20]
 801e344:	e7e5      	b.n	801e312 <__d2b+0x52>
 801e346:	a801      	add	r0, sp, #4
 801e348:	f7ff fcde 	bl	801dd08 <__lo0bits>
 801e34c:	9b01      	ldr	r3, [sp, #4]
 801e34e:	6163      	str	r3, [r4, #20]
 801e350:	2201      	movs	r2, #1
 801e352:	6122      	str	r2, [r4, #16]
 801e354:	3020      	adds	r0, #32
 801e356:	e7e3      	b.n	801e320 <__d2b+0x60>
 801e358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e35c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e360:	f8c9 0000 	str.w	r0, [r9]
 801e364:	6918      	ldr	r0, [r3, #16]
 801e366:	f7ff fcaf 	bl	801dcc8 <__hi0bits>
 801e36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e36e:	e7df      	b.n	801e330 <__d2b+0x70>
 801e370:	0801fd88 	.word	0x0801fd88
 801e374:	0801fe14 	.word	0x0801fe14

0801e378 <__ratio>:
 801e378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e37c:	4688      	mov	r8, r1
 801e37e:	4669      	mov	r1, sp
 801e380:	4681      	mov	r9, r0
 801e382:	f7ff ff4d 	bl	801e220 <__b2d>
 801e386:	a901      	add	r1, sp, #4
 801e388:	4640      	mov	r0, r8
 801e38a:	ec55 4b10 	vmov	r4, r5, d0
 801e38e:	ee10 aa10 	vmov	sl, s0
 801e392:	f7ff ff45 	bl	801e220 <__b2d>
 801e396:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e39a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e39e:	1a59      	subs	r1, r3, r1
 801e3a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3a4:	1ad3      	subs	r3, r2, r3
 801e3a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e3aa:	ec57 6b10 	vmov	r6, r7, d0
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	bfd6      	itet	le
 801e3b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e3b6:	462a      	movgt	r2, r5
 801e3b8:	463a      	movle	r2, r7
 801e3ba:	46ab      	mov	fp, r5
 801e3bc:	bfd6      	itet	le
 801e3be:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801e3c2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801e3c6:	ee00 3a90 	vmovle	s1, r3
 801e3ca:	ec4b ab17 	vmov	d7, sl, fp
 801e3ce:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801e3d2:	b003      	add	sp, #12
 801e3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3d8 <__copybits>:
 801e3d8:	3901      	subs	r1, #1
 801e3da:	b570      	push	{r4, r5, r6, lr}
 801e3dc:	1149      	asrs	r1, r1, #5
 801e3de:	6914      	ldr	r4, [r2, #16]
 801e3e0:	3101      	adds	r1, #1
 801e3e2:	f102 0314 	add.w	r3, r2, #20
 801e3e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e3ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e3ee:	1f05      	subs	r5, r0, #4
 801e3f0:	42a3      	cmp	r3, r4
 801e3f2:	d30c      	bcc.n	801e40e <__copybits+0x36>
 801e3f4:	1aa3      	subs	r3, r4, r2
 801e3f6:	3b11      	subs	r3, #17
 801e3f8:	f023 0303 	bic.w	r3, r3, #3
 801e3fc:	3211      	adds	r2, #17
 801e3fe:	42a2      	cmp	r2, r4
 801e400:	bf88      	it	hi
 801e402:	2300      	movhi	r3, #0
 801e404:	4418      	add	r0, r3
 801e406:	2300      	movs	r3, #0
 801e408:	4288      	cmp	r0, r1
 801e40a:	d305      	bcc.n	801e418 <__copybits+0x40>
 801e40c:	bd70      	pop	{r4, r5, r6, pc}
 801e40e:	f853 6b04 	ldr.w	r6, [r3], #4
 801e412:	f845 6f04 	str.w	r6, [r5, #4]!
 801e416:	e7eb      	b.n	801e3f0 <__copybits+0x18>
 801e418:	f840 3b04 	str.w	r3, [r0], #4
 801e41c:	e7f4      	b.n	801e408 <__copybits+0x30>

0801e41e <__any_on>:
 801e41e:	f100 0214 	add.w	r2, r0, #20
 801e422:	6900      	ldr	r0, [r0, #16]
 801e424:	114b      	asrs	r3, r1, #5
 801e426:	4298      	cmp	r0, r3
 801e428:	b510      	push	{r4, lr}
 801e42a:	db11      	blt.n	801e450 <__any_on+0x32>
 801e42c:	dd0a      	ble.n	801e444 <__any_on+0x26>
 801e42e:	f011 011f 	ands.w	r1, r1, #31
 801e432:	d007      	beq.n	801e444 <__any_on+0x26>
 801e434:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e438:	fa24 f001 	lsr.w	r0, r4, r1
 801e43c:	fa00 f101 	lsl.w	r1, r0, r1
 801e440:	428c      	cmp	r4, r1
 801e442:	d10b      	bne.n	801e45c <__any_on+0x3e>
 801e444:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e448:	4293      	cmp	r3, r2
 801e44a:	d803      	bhi.n	801e454 <__any_on+0x36>
 801e44c:	2000      	movs	r0, #0
 801e44e:	bd10      	pop	{r4, pc}
 801e450:	4603      	mov	r3, r0
 801e452:	e7f7      	b.n	801e444 <__any_on+0x26>
 801e454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e458:	2900      	cmp	r1, #0
 801e45a:	d0f5      	beq.n	801e448 <__any_on+0x2a>
 801e45c:	2001      	movs	r0, #1
 801e45e:	e7f6      	b.n	801e44e <__any_on+0x30>

0801e460 <_calloc_r>:
 801e460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e462:	fba1 2402 	umull	r2, r4, r1, r2
 801e466:	b94c      	cbnz	r4, 801e47c <_calloc_r+0x1c>
 801e468:	4611      	mov	r1, r2
 801e46a:	9201      	str	r2, [sp, #4]
 801e46c:	f000 f87a 	bl	801e564 <_malloc_r>
 801e470:	9a01      	ldr	r2, [sp, #4]
 801e472:	4605      	mov	r5, r0
 801e474:	b930      	cbnz	r0, 801e484 <_calloc_r+0x24>
 801e476:	4628      	mov	r0, r5
 801e478:	b003      	add	sp, #12
 801e47a:	bd30      	pop	{r4, r5, pc}
 801e47c:	220c      	movs	r2, #12
 801e47e:	6002      	str	r2, [r0, #0]
 801e480:	2500      	movs	r5, #0
 801e482:	e7f8      	b.n	801e476 <_calloc_r+0x16>
 801e484:	4621      	mov	r1, r4
 801e486:	f7fc fc53 	bl	801ad30 <memset>
 801e48a:	e7f4      	b.n	801e476 <_calloc_r+0x16>

0801e48c <_free_r>:
 801e48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e48e:	2900      	cmp	r1, #0
 801e490:	d044      	beq.n	801e51c <_free_r+0x90>
 801e492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e496:	9001      	str	r0, [sp, #4]
 801e498:	2b00      	cmp	r3, #0
 801e49a:	f1a1 0404 	sub.w	r4, r1, #4
 801e49e:	bfb8      	it	lt
 801e4a0:	18e4      	addlt	r4, r4, r3
 801e4a2:	f000 fc7f 	bl	801eda4 <__malloc_lock>
 801e4a6:	4a1e      	ldr	r2, [pc, #120]	; (801e520 <_free_r+0x94>)
 801e4a8:	9801      	ldr	r0, [sp, #4]
 801e4aa:	6813      	ldr	r3, [r2, #0]
 801e4ac:	b933      	cbnz	r3, 801e4bc <_free_r+0x30>
 801e4ae:	6063      	str	r3, [r4, #4]
 801e4b0:	6014      	str	r4, [r2, #0]
 801e4b2:	b003      	add	sp, #12
 801e4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e4b8:	f000 bc7a 	b.w	801edb0 <__malloc_unlock>
 801e4bc:	42a3      	cmp	r3, r4
 801e4be:	d908      	bls.n	801e4d2 <_free_r+0x46>
 801e4c0:	6825      	ldr	r5, [r4, #0]
 801e4c2:	1961      	adds	r1, r4, r5
 801e4c4:	428b      	cmp	r3, r1
 801e4c6:	bf01      	itttt	eq
 801e4c8:	6819      	ldreq	r1, [r3, #0]
 801e4ca:	685b      	ldreq	r3, [r3, #4]
 801e4cc:	1949      	addeq	r1, r1, r5
 801e4ce:	6021      	streq	r1, [r4, #0]
 801e4d0:	e7ed      	b.n	801e4ae <_free_r+0x22>
 801e4d2:	461a      	mov	r2, r3
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	b10b      	cbz	r3, 801e4dc <_free_r+0x50>
 801e4d8:	42a3      	cmp	r3, r4
 801e4da:	d9fa      	bls.n	801e4d2 <_free_r+0x46>
 801e4dc:	6811      	ldr	r1, [r2, #0]
 801e4de:	1855      	adds	r5, r2, r1
 801e4e0:	42a5      	cmp	r5, r4
 801e4e2:	d10b      	bne.n	801e4fc <_free_r+0x70>
 801e4e4:	6824      	ldr	r4, [r4, #0]
 801e4e6:	4421      	add	r1, r4
 801e4e8:	1854      	adds	r4, r2, r1
 801e4ea:	42a3      	cmp	r3, r4
 801e4ec:	6011      	str	r1, [r2, #0]
 801e4ee:	d1e0      	bne.n	801e4b2 <_free_r+0x26>
 801e4f0:	681c      	ldr	r4, [r3, #0]
 801e4f2:	685b      	ldr	r3, [r3, #4]
 801e4f4:	6053      	str	r3, [r2, #4]
 801e4f6:	4421      	add	r1, r4
 801e4f8:	6011      	str	r1, [r2, #0]
 801e4fa:	e7da      	b.n	801e4b2 <_free_r+0x26>
 801e4fc:	d902      	bls.n	801e504 <_free_r+0x78>
 801e4fe:	230c      	movs	r3, #12
 801e500:	6003      	str	r3, [r0, #0]
 801e502:	e7d6      	b.n	801e4b2 <_free_r+0x26>
 801e504:	6825      	ldr	r5, [r4, #0]
 801e506:	1961      	adds	r1, r4, r5
 801e508:	428b      	cmp	r3, r1
 801e50a:	bf04      	itt	eq
 801e50c:	6819      	ldreq	r1, [r3, #0]
 801e50e:	685b      	ldreq	r3, [r3, #4]
 801e510:	6063      	str	r3, [r4, #4]
 801e512:	bf04      	itt	eq
 801e514:	1949      	addeq	r1, r1, r5
 801e516:	6021      	streq	r1, [r4, #0]
 801e518:	6054      	str	r4, [r2, #4]
 801e51a:	e7ca      	b.n	801e4b2 <_free_r+0x26>
 801e51c:	b003      	add	sp, #12
 801e51e:	bd30      	pop	{r4, r5, pc}
 801e520:	240034f0 	.word	0x240034f0

0801e524 <sbrk_aligned>:
 801e524:	b570      	push	{r4, r5, r6, lr}
 801e526:	4e0e      	ldr	r6, [pc, #56]	; (801e560 <sbrk_aligned+0x3c>)
 801e528:	460c      	mov	r4, r1
 801e52a:	6831      	ldr	r1, [r6, #0]
 801e52c:	4605      	mov	r5, r0
 801e52e:	b911      	cbnz	r1, 801e536 <sbrk_aligned+0x12>
 801e530:	f000 fa02 	bl	801e938 <_sbrk_r>
 801e534:	6030      	str	r0, [r6, #0]
 801e536:	4621      	mov	r1, r4
 801e538:	4628      	mov	r0, r5
 801e53a:	f000 f9fd 	bl	801e938 <_sbrk_r>
 801e53e:	1c43      	adds	r3, r0, #1
 801e540:	d00a      	beq.n	801e558 <sbrk_aligned+0x34>
 801e542:	1cc4      	adds	r4, r0, #3
 801e544:	f024 0403 	bic.w	r4, r4, #3
 801e548:	42a0      	cmp	r0, r4
 801e54a:	d007      	beq.n	801e55c <sbrk_aligned+0x38>
 801e54c:	1a21      	subs	r1, r4, r0
 801e54e:	4628      	mov	r0, r5
 801e550:	f000 f9f2 	bl	801e938 <_sbrk_r>
 801e554:	3001      	adds	r0, #1
 801e556:	d101      	bne.n	801e55c <sbrk_aligned+0x38>
 801e558:	f04f 34ff 	mov.w	r4, #4294967295
 801e55c:	4620      	mov	r0, r4
 801e55e:	bd70      	pop	{r4, r5, r6, pc}
 801e560:	240034f4 	.word	0x240034f4

0801e564 <_malloc_r>:
 801e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e568:	1ccd      	adds	r5, r1, #3
 801e56a:	f025 0503 	bic.w	r5, r5, #3
 801e56e:	3508      	adds	r5, #8
 801e570:	2d0c      	cmp	r5, #12
 801e572:	bf38      	it	cc
 801e574:	250c      	movcc	r5, #12
 801e576:	2d00      	cmp	r5, #0
 801e578:	4607      	mov	r7, r0
 801e57a:	db01      	blt.n	801e580 <_malloc_r+0x1c>
 801e57c:	42a9      	cmp	r1, r5
 801e57e:	d905      	bls.n	801e58c <_malloc_r+0x28>
 801e580:	230c      	movs	r3, #12
 801e582:	603b      	str	r3, [r7, #0]
 801e584:	2600      	movs	r6, #0
 801e586:	4630      	mov	r0, r6
 801e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e58c:	4e2e      	ldr	r6, [pc, #184]	; (801e648 <_malloc_r+0xe4>)
 801e58e:	f000 fc09 	bl	801eda4 <__malloc_lock>
 801e592:	6833      	ldr	r3, [r6, #0]
 801e594:	461c      	mov	r4, r3
 801e596:	bb34      	cbnz	r4, 801e5e6 <_malloc_r+0x82>
 801e598:	4629      	mov	r1, r5
 801e59a:	4638      	mov	r0, r7
 801e59c:	f7ff ffc2 	bl	801e524 <sbrk_aligned>
 801e5a0:	1c43      	adds	r3, r0, #1
 801e5a2:	4604      	mov	r4, r0
 801e5a4:	d14d      	bne.n	801e642 <_malloc_r+0xde>
 801e5a6:	6834      	ldr	r4, [r6, #0]
 801e5a8:	4626      	mov	r6, r4
 801e5aa:	2e00      	cmp	r6, #0
 801e5ac:	d140      	bne.n	801e630 <_malloc_r+0xcc>
 801e5ae:	6823      	ldr	r3, [r4, #0]
 801e5b0:	4631      	mov	r1, r6
 801e5b2:	4638      	mov	r0, r7
 801e5b4:	eb04 0803 	add.w	r8, r4, r3
 801e5b8:	f000 f9be 	bl	801e938 <_sbrk_r>
 801e5bc:	4580      	cmp	r8, r0
 801e5be:	d13a      	bne.n	801e636 <_malloc_r+0xd2>
 801e5c0:	6821      	ldr	r1, [r4, #0]
 801e5c2:	3503      	adds	r5, #3
 801e5c4:	1a6d      	subs	r5, r5, r1
 801e5c6:	f025 0503 	bic.w	r5, r5, #3
 801e5ca:	3508      	adds	r5, #8
 801e5cc:	2d0c      	cmp	r5, #12
 801e5ce:	bf38      	it	cc
 801e5d0:	250c      	movcc	r5, #12
 801e5d2:	4629      	mov	r1, r5
 801e5d4:	4638      	mov	r0, r7
 801e5d6:	f7ff ffa5 	bl	801e524 <sbrk_aligned>
 801e5da:	3001      	adds	r0, #1
 801e5dc:	d02b      	beq.n	801e636 <_malloc_r+0xd2>
 801e5de:	6823      	ldr	r3, [r4, #0]
 801e5e0:	442b      	add	r3, r5
 801e5e2:	6023      	str	r3, [r4, #0]
 801e5e4:	e00e      	b.n	801e604 <_malloc_r+0xa0>
 801e5e6:	6822      	ldr	r2, [r4, #0]
 801e5e8:	1b52      	subs	r2, r2, r5
 801e5ea:	d41e      	bmi.n	801e62a <_malloc_r+0xc6>
 801e5ec:	2a0b      	cmp	r2, #11
 801e5ee:	d916      	bls.n	801e61e <_malloc_r+0xba>
 801e5f0:	1961      	adds	r1, r4, r5
 801e5f2:	42a3      	cmp	r3, r4
 801e5f4:	6025      	str	r5, [r4, #0]
 801e5f6:	bf18      	it	ne
 801e5f8:	6059      	strne	r1, [r3, #4]
 801e5fa:	6863      	ldr	r3, [r4, #4]
 801e5fc:	bf08      	it	eq
 801e5fe:	6031      	streq	r1, [r6, #0]
 801e600:	5162      	str	r2, [r4, r5]
 801e602:	604b      	str	r3, [r1, #4]
 801e604:	4638      	mov	r0, r7
 801e606:	f104 060b 	add.w	r6, r4, #11
 801e60a:	f000 fbd1 	bl	801edb0 <__malloc_unlock>
 801e60e:	f026 0607 	bic.w	r6, r6, #7
 801e612:	1d23      	adds	r3, r4, #4
 801e614:	1af2      	subs	r2, r6, r3
 801e616:	d0b6      	beq.n	801e586 <_malloc_r+0x22>
 801e618:	1b9b      	subs	r3, r3, r6
 801e61a:	50a3      	str	r3, [r4, r2]
 801e61c:	e7b3      	b.n	801e586 <_malloc_r+0x22>
 801e61e:	6862      	ldr	r2, [r4, #4]
 801e620:	42a3      	cmp	r3, r4
 801e622:	bf0c      	ite	eq
 801e624:	6032      	streq	r2, [r6, #0]
 801e626:	605a      	strne	r2, [r3, #4]
 801e628:	e7ec      	b.n	801e604 <_malloc_r+0xa0>
 801e62a:	4623      	mov	r3, r4
 801e62c:	6864      	ldr	r4, [r4, #4]
 801e62e:	e7b2      	b.n	801e596 <_malloc_r+0x32>
 801e630:	4634      	mov	r4, r6
 801e632:	6876      	ldr	r6, [r6, #4]
 801e634:	e7b9      	b.n	801e5aa <_malloc_r+0x46>
 801e636:	230c      	movs	r3, #12
 801e638:	603b      	str	r3, [r7, #0]
 801e63a:	4638      	mov	r0, r7
 801e63c:	f000 fbb8 	bl	801edb0 <__malloc_unlock>
 801e640:	e7a1      	b.n	801e586 <_malloc_r+0x22>
 801e642:	6025      	str	r5, [r4, #0]
 801e644:	e7de      	b.n	801e604 <_malloc_r+0xa0>
 801e646:	bf00      	nop
 801e648:	240034f0 	.word	0x240034f0

0801e64c <__ssputs_r>:
 801e64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e650:	688e      	ldr	r6, [r1, #8]
 801e652:	429e      	cmp	r6, r3
 801e654:	4682      	mov	sl, r0
 801e656:	460c      	mov	r4, r1
 801e658:	4690      	mov	r8, r2
 801e65a:	461f      	mov	r7, r3
 801e65c:	d838      	bhi.n	801e6d0 <__ssputs_r+0x84>
 801e65e:	898a      	ldrh	r2, [r1, #12]
 801e660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e664:	d032      	beq.n	801e6cc <__ssputs_r+0x80>
 801e666:	6825      	ldr	r5, [r4, #0]
 801e668:	6909      	ldr	r1, [r1, #16]
 801e66a:	eba5 0901 	sub.w	r9, r5, r1
 801e66e:	6965      	ldr	r5, [r4, #20]
 801e670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e678:	3301      	adds	r3, #1
 801e67a:	444b      	add	r3, r9
 801e67c:	106d      	asrs	r5, r5, #1
 801e67e:	429d      	cmp	r5, r3
 801e680:	bf38      	it	cc
 801e682:	461d      	movcc	r5, r3
 801e684:	0553      	lsls	r3, r2, #21
 801e686:	d531      	bpl.n	801e6ec <__ssputs_r+0xa0>
 801e688:	4629      	mov	r1, r5
 801e68a:	f7ff ff6b 	bl	801e564 <_malloc_r>
 801e68e:	4606      	mov	r6, r0
 801e690:	b950      	cbnz	r0, 801e6a8 <__ssputs_r+0x5c>
 801e692:	230c      	movs	r3, #12
 801e694:	f8ca 3000 	str.w	r3, [sl]
 801e698:	89a3      	ldrh	r3, [r4, #12]
 801e69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e69e:	81a3      	strh	r3, [r4, #12]
 801e6a0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6a8:	6921      	ldr	r1, [r4, #16]
 801e6aa:	464a      	mov	r2, r9
 801e6ac:	f7fc fb32 	bl	801ad14 <memcpy>
 801e6b0:	89a3      	ldrh	r3, [r4, #12]
 801e6b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6ba:	81a3      	strh	r3, [r4, #12]
 801e6bc:	6126      	str	r6, [r4, #16]
 801e6be:	6165      	str	r5, [r4, #20]
 801e6c0:	444e      	add	r6, r9
 801e6c2:	eba5 0509 	sub.w	r5, r5, r9
 801e6c6:	6026      	str	r6, [r4, #0]
 801e6c8:	60a5      	str	r5, [r4, #8]
 801e6ca:	463e      	mov	r6, r7
 801e6cc:	42be      	cmp	r6, r7
 801e6ce:	d900      	bls.n	801e6d2 <__ssputs_r+0x86>
 801e6d0:	463e      	mov	r6, r7
 801e6d2:	6820      	ldr	r0, [r4, #0]
 801e6d4:	4632      	mov	r2, r6
 801e6d6:	4641      	mov	r1, r8
 801e6d8:	f000 fb4a 	bl	801ed70 <memmove>
 801e6dc:	68a3      	ldr	r3, [r4, #8]
 801e6de:	1b9b      	subs	r3, r3, r6
 801e6e0:	60a3      	str	r3, [r4, #8]
 801e6e2:	6823      	ldr	r3, [r4, #0]
 801e6e4:	4433      	add	r3, r6
 801e6e6:	6023      	str	r3, [r4, #0]
 801e6e8:	2000      	movs	r0, #0
 801e6ea:	e7db      	b.n	801e6a4 <__ssputs_r+0x58>
 801e6ec:	462a      	mov	r2, r5
 801e6ee:	f000 fb65 	bl	801edbc <_realloc_r>
 801e6f2:	4606      	mov	r6, r0
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	d1e1      	bne.n	801e6bc <__ssputs_r+0x70>
 801e6f8:	6921      	ldr	r1, [r4, #16]
 801e6fa:	4650      	mov	r0, sl
 801e6fc:	f7ff fec6 	bl	801e48c <_free_r>
 801e700:	e7c7      	b.n	801e692 <__ssputs_r+0x46>
	...

0801e704 <_svfiprintf_r>:
 801e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e708:	4698      	mov	r8, r3
 801e70a:	898b      	ldrh	r3, [r1, #12]
 801e70c:	061b      	lsls	r3, r3, #24
 801e70e:	b09d      	sub	sp, #116	; 0x74
 801e710:	4607      	mov	r7, r0
 801e712:	460d      	mov	r5, r1
 801e714:	4614      	mov	r4, r2
 801e716:	d50e      	bpl.n	801e736 <_svfiprintf_r+0x32>
 801e718:	690b      	ldr	r3, [r1, #16]
 801e71a:	b963      	cbnz	r3, 801e736 <_svfiprintf_r+0x32>
 801e71c:	2140      	movs	r1, #64	; 0x40
 801e71e:	f7ff ff21 	bl	801e564 <_malloc_r>
 801e722:	6028      	str	r0, [r5, #0]
 801e724:	6128      	str	r0, [r5, #16]
 801e726:	b920      	cbnz	r0, 801e732 <_svfiprintf_r+0x2e>
 801e728:	230c      	movs	r3, #12
 801e72a:	603b      	str	r3, [r7, #0]
 801e72c:	f04f 30ff 	mov.w	r0, #4294967295
 801e730:	e0d1      	b.n	801e8d6 <_svfiprintf_r+0x1d2>
 801e732:	2340      	movs	r3, #64	; 0x40
 801e734:	616b      	str	r3, [r5, #20]
 801e736:	2300      	movs	r3, #0
 801e738:	9309      	str	r3, [sp, #36]	; 0x24
 801e73a:	2320      	movs	r3, #32
 801e73c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e740:	f8cd 800c 	str.w	r8, [sp, #12]
 801e744:	2330      	movs	r3, #48	; 0x30
 801e746:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e8f0 <_svfiprintf_r+0x1ec>
 801e74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e74e:	f04f 0901 	mov.w	r9, #1
 801e752:	4623      	mov	r3, r4
 801e754:	469a      	mov	sl, r3
 801e756:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e75a:	b10a      	cbz	r2, 801e760 <_svfiprintf_r+0x5c>
 801e75c:	2a25      	cmp	r2, #37	; 0x25
 801e75e:	d1f9      	bne.n	801e754 <_svfiprintf_r+0x50>
 801e760:	ebba 0b04 	subs.w	fp, sl, r4
 801e764:	d00b      	beq.n	801e77e <_svfiprintf_r+0x7a>
 801e766:	465b      	mov	r3, fp
 801e768:	4622      	mov	r2, r4
 801e76a:	4629      	mov	r1, r5
 801e76c:	4638      	mov	r0, r7
 801e76e:	f7ff ff6d 	bl	801e64c <__ssputs_r>
 801e772:	3001      	adds	r0, #1
 801e774:	f000 80aa 	beq.w	801e8cc <_svfiprintf_r+0x1c8>
 801e778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e77a:	445a      	add	r2, fp
 801e77c:	9209      	str	r2, [sp, #36]	; 0x24
 801e77e:	f89a 3000 	ldrb.w	r3, [sl]
 801e782:	2b00      	cmp	r3, #0
 801e784:	f000 80a2 	beq.w	801e8cc <_svfiprintf_r+0x1c8>
 801e788:	2300      	movs	r3, #0
 801e78a:	f04f 32ff 	mov.w	r2, #4294967295
 801e78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e792:	f10a 0a01 	add.w	sl, sl, #1
 801e796:	9304      	str	r3, [sp, #16]
 801e798:	9307      	str	r3, [sp, #28]
 801e79a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e79e:	931a      	str	r3, [sp, #104]	; 0x68
 801e7a0:	4654      	mov	r4, sl
 801e7a2:	2205      	movs	r2, #5
 801e7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7a8:	4851      	ldr	r0, [pc, #324]	; (801e8f0 <_svfiprintf_r+0x1ec>)
 801e7aa:	f7e1 fdc9 	bl	8000340 <memchr>
 801e7ae:	9a04      	ldr	r2, [sp, #16]
 801e7b0:	b9d8      	cbnz	r0, 801e7ea <_svfiprintf_r+0xe6>
 801e7b2:	06d0      	lsls	r0, r2, #27
 801e7b4:	bf44      	itt	mi
 801e7b6:	2320      	movmi	r3, #32
 801e7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7bc:	0711      	lsls	r1, r2, #28
 801e7be:	bf44      	itt	mi
 801e7c0:	232b      	movmi	r3, #43	; 0x2b
 801e7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7c6:	f89a 3000 	ldrb.w	r3, [sl]
 801e7ca:	2b2a      	cmp	r3, #42	; 0x2a
 801e7cc:	d015      	beq.n	801e7fa <_svfiprintf_r+0xf6>
 801e7ce:	9a07      	ldr	r2, [sp, #28]
 801e7d0:	4654      	mov	r4, sl
 801e7d2:	2000      	movs	r0, #0
 801e7d4:	f04f 0c0a 	mov.w	ip, #10
 801e7d8:	4621      	mov	r1, r4
 801e7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7de:	3b30      	subs	r3, #48	; 0x30
 801e7e0:	2b09      	cmp	r3, #9
 801e7e2:	d94e      	bls.n	801e882 <_svfiprintf_r+0x17e>
 801e7e4:	b1b0      	cbz	r0, 801e814 <_svfiprintf_r+0x110>
 801e7e6:	9207      	str	r2, [sp, #28]
 801e7e8:	e014      	b.n	801e814 <_svfiprintf_r+0x110>
 801e7ea:	eba0 0308 	sub.w	r3, r0, r8
 801e7ee:	fa09 f303 	lsl.w	r3, r9, r3
 801e7f2:	4313      	orrs	r3, r2
 801e7f4:	9304      	str	r3, [sp, #16]
 801e7f6:	46a2      	mov	sl, r4
 801e7f8:	e7d2      	b.n	801e7a0 <_svfiprintf_r+0x9c>
 801e7fa:	9b03      	ldr	r3, [sp, #12]
 801e7fc:	1d19      	adds	r1, r3, #4
 801e7fe:	681b      	ldr	r3, [r3, #0]
 801e800:	9103      	str	r1, [sp, #12]
 801e802:	2b00      	cmp	r3, #0
 801e804:	bfbb      	ittet	lt
 801e806:	425b      	neglt	r3, r3
 801e808:	f042 0202 	orrlt.w	r2, r2, #2
 801e80c:	9307      	strge	r3, [sp, #28]
 801e80e:	9307      	strlt	r3, [sp, #28]
 801e810:	bfb8      	it	lt
 801e812:	9204      	strlt	r2, [sp, #16]
 801e814:	7823      	ldrb	r3, [r4, #0]
 801e816:	2b2e      	cmp	r3, #46	; 0x2e
 801e818:	d10c      	bne.n	801e834 <_svfiprintf_r+0x130>
 801e81a:	7863      	ldrb	r3, [r4, #1]
 801e81c:	2b2a      	cmp	r3, #42	; 0x2a
 801e81e:	d135      	bne.n	801e88c <_svfiprintf_r+0x188>
 801e820:	9b03      	ldr	r3, [sp, #12]
 801e822:	1d1a      	adds	r2, r3, #4
 801e824:	681b      	ldr	r3, [r3, #0]
 801e826:	9203      	str	r2, [sp, #12]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	bfb8      	it	lt
 801e82c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e830:	3402      	adds	r4, #2
 801e832:	9305      	str	r3, [sp, #20]
 801e834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e900 <_svfiprintf_r+0x1fc>
 801e838:	7821      	ldrb	r1, [r4, #0]
 801e83a:	2203      	movs	r2, #3
 801e83c:	4650      	mov	r0, sl
 801e83e:	f7e1 fd7f 	bl	8000340 <memchr>
 801e842:	b140      	cbz	r0, 801e856 <_svfiprintf_r+0x152>
 801e844:	2340      	movs	r3, #64	; 0x40
 801e846:	eba0 000a 	sub.w	r0, r0, sl
 801e84a:	fa03 f000 	lsl.w	r0, r3, r0
 801e84e:	9b04      	ldr	r3, [sp, #16]
 801e850:	4303      	orrs	r3, r0
 801e852:	3401      	adds	r4, #1
 801e854:	9304      	str	r3, [sp, #16]
 801e856:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e85a:	4826      	ldr	r0, [pc, #152]	; (801e8f4 <_svfiprintf_r+0x1f0>)
 801e85c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e860:	2206      	movs	r2, #6
 801e862:	f7e1 fd6d 	bl	8000340 <memchr>
 801e866:	2800      	cmp	r0, #0
 801e868:	d038      	beq.n	801e8dc <_svfiprintf_r+0x1d8>
 801e86a:	4b23      	ldr	r3, [pc, #140]	; (801e8f8 <_svfiprintf_r+0x1f4>)
 801e86c:	bb1b      	cbnz	r3, 801e8b6 <_svfiprintf_r+0x1b2>
 801e86e:	9b03      	ldr	r3, [sp, #12]
 801e870:	3307      	adds	r3, #7
 801e872:	f023 0307 	bic.w	r3, r3, #7
 801e876:	3308      	adds	r3, #8
 801e878:	9303      	str	r3, [sp, #12]
 801e87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e87c:	4433      	add	r3, r6
 801e87e:	9309      	str	r3, [sp, #36]	; 0x24
 801e880:	e767      	b.n	801e752 <_svfiprintf_r+0x4e>
 801e882:	fb0c 3202 	mla	r2, ip, r2, r3
 801e886:	460c      	mov	r4, r1
 801e888:	2001      	movs	r0, #1
 801e88a:	e7a5      	b.n	801e7d8 <_svfiprintf_r+0xd4>
 801e88c:	2300      	movs	r3, #0
 801e88e:	3401      	adds	r4, #1
 801e890:	9305      	str	r3, [sp, #20]
 801e892:	4619      	mov	r1, r3
 801e894:	f04f 0c0a 	mov.w	ip, #10
 801e898:	4620      	mov	r0, r4
 801e89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e89e:	3a30      	subs	r2, #48	; 0x30
 801e8a0:	2a09      	cmp	r2, #9
 801e8a2:	d903      	bls.n	801e8ac <_svfiprintf_r+0x1a8>
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d0c5      	beq.n	801e834 <_svfiprintf_r+0x130>
 801e8a8:	9105      	str	r1, [sp, #20]
 801e8aa:	e7c3      	b.n	801e834 <_svfiprintf_r+0x130>
 801e8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801e8b0:	4604      	mov	r4, r0
 801e8b2:	2301      	movs	r3, #1
 801e8b4:	e7f0      	b.n	801e898 <_svfiprintf_r+0x194>
 801e8b6:	ab03      	add	r3, sp, #12
 801e8b8:	9300      	str	r3, [sp, #0]
 801e8ba:	462a      	mov	r2, r5
 801e8bc:	4b0f      	ldr	r3, [pc, #60]	; (801e8fc <_svfiprintf_r+0x1f8>)
 801e8be:	a904      	add	r1, sp, #16
 801e8c0:	4638      	mov	r0, r7
 801e8c2:	f7fc facd 	bl	801ae60 <_printf_float>
 801e8c6:	1c42      	adds	r2, r0, #1
 801e8c8:	4606      	mov	r6, r0
 801e8ca:	d1d6      	bne.n	801e87a <_svfiprintf_r+0x176>
 801e8cc:	89ab      	ldrh	r3, [r5, #12]
 801e8ce:	065b      	lsls	r3, r3, #25
 801e8d0:	f53f af2c 	bmi.w	801e72c <_svfiprintf_r+0x28>
 801e8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8d6:	b01d      	add	sp, #116	; 0x74
 801e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8dc:	ab03      	add	r3, sp, #12
 801e8de:	9300      	str	r3, [sp, #0]
 801e8e0:	462a      	mov	r2, r5
 801e8e2:	4b06      	ldr	r3, [pc, #24]	; (801e8fc <_svfiprintf_r+0x1f8>)
 801e8e4:	a904      	add	r1, sp, #16
 801e8e6:	4638      	mov	r0, r7
 801e8e8:	f7fc fd46 	bl	801b378 <_printf_i>
 801e8ec:	e7eb      	b.n	801e8c6 <_svfiprintf_r+0x1c2>
 801e8ee:	bf00      	nop
 801e8f0:	0801ff6c 	.word	0x0801ff6c
 801e8f4:	0801ff76 	.word	0x0801ff76
 801e8f8:	0801ae61 	.word	0x0801ae61
 801e8fc:	0801e64d 	.word	0x0801e64d
 801e900:	0801ff72 	.word	0x0801ff72

0801e904 <_read_r>:
 801e904:	b538      	push	{r3, r4, r5, lr}
 801e906:	4d07      	ldr	r5, [pc, #28]	; (801e924 <_read_r+0x20>)
 801e908:	4604      	mov	r4, r0
 801e90a:	4608      	mov	r0, r1
 801e90c:	4611      	mov	r1, r2
 801e90e:	2200      	movs	r2, #0
 801e910:	602a      	str	r2, [r5, #0]
 801e912:	461a      	mov	r2, r3
 801e914:	f7e5 f954 	bl	8003bc0 <_read>
 801e918:	1c43      	adds	r3, r0, #1
 801e91a:	d102      	bne.n	801e922 <_read_r+0x1e>
 801e91c:	682b      	ldr	r3, [r5, #0]
 801e91e:	b103      	cbz	r3, 801e922 <_read_r+0x1e>
 801e920:	6023      	str	r3, [r4, #0]
 801e922:	bd38      	pop	{r3, r4, r5, pc}
 801e924:	240034f8 	.word	0x240034f8

0801e928 <nan>:
 801e928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e930 <nan+0x8>
 801e92c:	4770      	bx	lr
 801e92e:	bf00      	nop
 801e930:	00000000 	.word	0x00000000
 801e934:	7ff80000 	.word	0x7ff80000

0801e938 <_sbrk_r>:
 801e938:	b538      	push	{r3, r4, r5, lr}
 801e93a:	4d06      	ldr	r5, [pc, #24]	; (801e954 <_sbrk_r+0x1c>)
 801e93c:	2300      	movs	r3, #0
 801e93e:	4604      	mov	r4, r0
 801e940:	4608      	mov	r0, r1
 801e942:	602b      	str	r3, [r5, #0]
 801e944:	f7e5 f9aa 	bl	8003c9c <_sbrk>
 801e948:	1c43      	adds	r3, r0, #1
 801e94a:	d102      	bne.n	801e952 <_sbrk_r+0x1a>
 801e94c:	682b      	ldr	r3, [r5, #0]
 801e94e:	b103      	cbz	r3, 801e952 <_sbrk_r+0x1a>
 801e950:	6023      	str	r3, [r4, #0]
 801e952:	bd38      	pop	{r3, r4, r5, pc}
 801e954:	240034f8 	.word	0x240034f8

0801e958 <strncmp>:
 801e958:	b510      	push	{r4, lr}
 801e95a:	b17a      	cbz	r2, 801e97c <strncmp+0x24>
 801e95c:	4603      	mov	r3, r0
 801e95e:	3901      	subs	r1, #1
 801e960:	1884      	adds	r4, r0, r2
 801e962:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e966:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e96a:	4290      	cmp	r0, r2
 801e96c:	d101      	bne.n	801e972 <strncmp+0x1a>
 801e96e:	42a3      	cmp	r3, r4
 801e970:	d101      	bne.n	801e976 <strncmp+0x1e>
 801e972:	1a80      	subs	r0, r0, r2
 801e974:	bd10      	pop	{r4, pc}
 801e976:	2800      	cmp	r0, #0
 801e978:	d1f3      	bne.n	801e962 <strncmp+0xa>
 801e97a:	e7fa      	b.n	801e972 <strncmp+0x1a>
 801e97c:	4610      	mov	r0, r2
 801e97e:	e7f9      	b.n	801e974 <strncmp+0x1c>

0801e980 <__ascii_wctomb>:
 801e980:	b149      	cbz	r1, 801e996 <__ascii_wctomb+0x16>
 801e982:	2aff      	cmp	r2, #255	; 0xff
 801e984:	bf85      	ittet	hi
 801e986:	238a      	movhi	r3, #138	; 0x8a
 801e988:	6003      	strhi	r3, [r0, #0]
 801e98a:	700a      	strbls	r2, [r1, #0]
 801e98c:	f04f 30ff 	movhi.w	r0, #4294967295
 801e990:	bf98      	it	ls
 801e992:	2001      	movls	r0, #1
 801e994:	4770      	bx	lr
 801e996:	4608      	mov	r0, r1
 801e998:	4770      	bx	lr
	...

0801e99c <__assert_func>:
 801e99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e99e:	4614      	mov	r4, r2
 801e9a0:	461a      	mov	r2, r3
 801e9a2:	4b09      	ldr	r3, [pc, #36]	; (801e9c8 <__assert_func+0x2c>)
 801e9a4:	681b      	ldr	r3, [r3, #0]
 801e9a6:	4605      	mov	r5, r0
 801e9a8:	68d8      	ldr	r0, [r3, #12]
 801e9aa:	b14c      	cbz	r4, 801e9c0 <__assert_func+0x24>
 801e9ac:	4b07      	ldr	r3, [pc, #28]	; (801e9cc <__assert_func+0x30>)
 801e9ae:	9100      	str	r1, [sp, #0]
 801e9b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e9b4:	4906      	ldr	r1, [pc, #24]	; (801e9d0 <__assert_func+0x34>)
 801e9b6:	462b      	mov	r3, r5
 801e9b8:	f000 f9a6 	bl	801ed08 <fiprintf>
 801e9bc:	f000 fc46 	bl	801f24c <abort>
 801e9c0:	4b04      	ldr	r3, [pc, #16]	; (801e9d4 <__assert_func+0x38>)
 801e9c2:	461c      	mov	r4, r3
 801e9c4:	e7f3      	b.n	801e9ae <__assert_func+0x12>
 801e9c6:	bf00      	nop
 801e9c8:	24000100 	.word	0x24000100
 801e9cc:	0801ff7d 	.word	0x0801ff7d
 801e9d0:	0801ff8a 	.word	0x0801ff8a
 801e9d4:	0801ffb8 	.word	0x0801ffb8

0801e9d8 <__sflush_r>:
 801e9d8:	898a      	ldrh	r2, [r1, #12]
 801e9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9de:	4605      	mov	r5, r0
 801e9e0:	0710      	lsls	r0, r2, #28
 801e9e2:	460c      	mov	r4, r1
 801e9e4:	d458      	bmi.n	801ea98 <__sflush_r+0xc0>
 801e9e6:	684b      	ldr	r3, [r1, #4]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	dc05      	bgt.n	801e9f8 <__sflush_r+0x20>
 801e9ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	dc02      	bgt.n	801e9f8 <__sflush_r+0x20>
 801e9f2:	2000      	movs	r0, #0
 801e9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e9fa:	2e00      	cmp	r6, #0
 801e9fc:	d0f9      	beq.n	801e9f2 <__sflush_r+0x1a>
 801e9fe:	2300      	movs	r3, #0
 801ea00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ea04:	682f      	ldr	r7, [r5, #0]
 801ea06:	602b      	str	r3, [r5, #0]
 801ea08:	d032      	beq.n	801ea70 <__sflush_r+0x98>
 801ea0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ea0c:	89a3      	ldrh	r3, [r4, #12]
 801ea0e:	075a      	lsls	r2, r3, #29
 801ea10:	d505      	bpl.n	801ea1e <__sflush_r+0x46>
 801ea12:	6863      	ldr	r3, [r4, #4]
 801ea14:	1ac0      	subs	r0, r0, r3
 801ea16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ea18:	b10b      	cbz	r3, 801ea1e <__sflush_r+0x46>
 801ea1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea1c:	1ac0      	subs	r0, r0, r3
 801ea1e:	2300      	movs	r3, #0
 801ea20:	4602      	mov	r2, r0
 801ea22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea24:	6a21      	ldr	r1, [r4, #32]
 801ea26:	4628      	mov	r0, r5
 801ea28:	47b0      	blx	r6
 801ea2a:	1c43      	adds	r3, r0, #1
 801ea2c:	89a3      	ldrh	r3, [r4, #12]
 801ea2e:	d106      	bne.n	801ea3e <__sflush_r+0x66>
 801ea30:	6829      	ldr	r1, [r5, #0]
 801ea32:	291d      	cmp	r1, #29
 801ea34:	d82c      	bhi.n	801ea90 <__sflush_r+0xb8>
 801ea36:	4a2a      	ldr	r2, [pc, #168]	; (801eae0 <__sflush_r+0x108>)
 801ea38:	40ca      	lsrs	r2, r1
 801ea3a:	07d6      	lsls	r6, r2, #31
 801ea3c:	d528      	bpl.n	801ea90 <__sflush_r+0xb8>
 801ea3e:	2200      	movs	r2, #0
 801ea40:	6062      	str	r2, [r4, #4]
 801ea42:	04d9      	lsls	r1, r3, #19
 801ea44:	6922      	ldr	r2, [r4, #16]
 801ea46:	6022      	str	r2, [r4, #0]
 801ea48:	d504      	bpl.n	801ea54 <__sflush_r+0x7c>
 801ea4a:	1c42      	adds	r2, r0, #1
 801ea4c:	d101      	bne.n	801ea52 <__sflush_r+0x7a>
 801ea4e:	682b      	ldr	r3, [r5, #0]
 801ea50:	b903      	cbnz	r3, 801ea54 <__sflush_r+0x7c>
 801ea52:	6560      	str	r0, [r4, #84]	; 0x54
 801ea54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ea56:	602f      	str	r7, [r5, #0]
 801ea58:	2900      	cmp	r1, #0
 801ea5a:	d0ca      	beq.n	801e9f2 <__sflush_r+0x1a>
 801ea5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea60:	4299      	cmp	r1, r3
 801ea62:	d002      	beq.n	801ea6a <__sflush_r+0x92>
 801ea64:	4628      	mov	r0, r5
 801ea66:	f7ff fd11 	bl	801e48c <_free_r>
 801ea6a:	2000      	movs	r0, #0
 801ea6c:	6360      	str	r0, [r4, #52]	; 0x34
 801ea6e:	e7c1      	b.n	801e9f4 <__sflush_r+0x1c>
 801ea70:	6a21      	ldr	r1, [r4, #32]
 801ea72:	2301      	movs	r3, #1
 801ea74:	4628      	mov	r0, r5
 801ea76:	47b0      	blx	r6
 801ea78:	1c41      	adds	r1, r0, #1
 801ea7a:	d1c7      	bne.n	801ea0c <__sflush_r+0x34>
 801ea7c:	682b      	ldr	r3, [r5, #0]
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d0c4      	beq.n	801ea0c <__sflush_r+0x34>
 801ea82:	2b1d      	cmp	r3, #29
 801ea84:	d001      	beq.n	801ea8a <__sflush_r+0xb2>
 801ea86:	2b16      	cmp	r3, #22
 801ea88:	d101      	bne.n	801ea8e <__sflush_r+0xb6>
 801ea8a:	602f      	str	r7, [r5, #0]
 801ea8c:	e7b1      	b.n	801e9f2 <__sflush_r+0x1a>
 801ea8e:	89a3      	ldrh	r3, [r4, #12]
 801ea90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ea94:	81a3      	strh	r3, [r4, #12]
 801ea96:	e7ad      	b.n	801e9f4 <__sflush_r+0x1c>
 801ea98:	690f      	ldr	r7, [r1, #16]
 801ea9a:	2f00      	cmp	r7, #0
 801ea9c:	d0a9      	beq.n	801e9f2 <__sflush_r+0x1a>
 801ea9e:	0793      	lsls	r3, r2, #30
 801eaa0:	680e      	ldr	r6, [r1, #0]
 801eaa2:	bf08      	it	eq
 801eaa4:	694b      	ldreq	r3, [r1, #20]
 801eaa6:	600f      	str	r7, [r1, #0]
 801eaa8:	bf18      	it	ne
 801eaaa:	2300      	movne	r3, #0
 801eaac:	eba6 0807 	sub.w	r8, r6, r7
 801eab0:	608b      	str	r3, [r1, #8]
 801eab2:	f1b8 0f00 	cmp.w	r8, #0
 801eab6:	dd9c      	ble.n	801e9f2 <__sflush_r+0x1a>
 801eab8:	6a21      	ldr	r1, [r4, #32]
 801eaba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eabc:	4643      	mov	r3, r8
 801eabe:	463a      	mov	r2, r7
 801eac0:	4628      	mov	r0, r5
 801eac2:	47b0      	blx	r6
 801eac4:	2800      	cmp	r0, #0
 801eac6:	dc06      	bgt.n	801ead6 <__sflush_r+0xfe>
 801eac8:	89a3      	ldrh	r3, [r4, #12]
 801eaca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eace:	81a3      	strh	r3, [r4, #12]
 801ead0:	f04f 30ff 	mov.w	r0, #4294967295
 801ead4:	e78e      	b.n	801e9f4 <__sflush_r+0x1c>
 801ead6:	4407      	add	r7, r0
 801ead8:	eba8 0800 	sub.w	r8, r8, r0
 801eadc:	e7e9      	b.n	801eab2 <__sflush_r+0xda>
 801eade:	bf00      	nop
 801eae0:	20400001 	.word	0x20400001

0801eae4 <_fflush_r>:
 801eae4:	b538      	push	{r3, r4, r5, lr}
 801eae6:	690b      	ldr	r3, [r1, #16]
 801eae8:	4605      	mov	r5, r0
 801eaea:	460c      	mov	r4, r1
 801eaec:	b913      	cbnz	r3, 801eaf4 <_fflush_r+0x10>
 801eaee:	2500      	movs	r5, #0
 801eaf0:	4628      	mov	r0, r5
 801eaf2:	bd38      	pop	{r3, r4, r5, pc}
 801eaf4:	b118      	cbz	r0, 801eafe <_fflush_r+0x1a>
 801eaf6:	6983      	ldr	r3, [r0, #24]
 801eaf8:	b90b      	cbnz	r3, 801eafe <_fflush_r+0x1a>
 801eafa:	f000 f887 	bl	801ec0c <__sinit>
 801eafe:	4b14      	ldr	r3, [pc, #80]	; (801eb50 <_fflush_r+0x6c>)
 801eb00:	429c      	cmp	r4, r3
 801eb02:	d11b      	bne.n	801eb3c <_fflush_r+0x58>
 801eb04:	686c      	ldr	r4, [r5, #4]
 801eb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	d0ef      	beq.n	801eaee <_fflush_r+0xa>
 801eb0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eb10:	07d0      	lsls	r0, r2, #31
 801eb12:	d404      	bmi.n	801eb1e <_fflush_r+0x3a>
 801eb14:	0599      	lsls	r1, r3, #22
 801eb16:	d402      	bmi.n	801eb1e <_fflush_r+0x3a>
 801eb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb1a:	f000 f927 	bl	801ed6c <__retarget_lock_acquire_recursive>
 801eb1e:	4628      	mov	r0, r5
 801eb20:	4621      	mov	r1, r4
 801eb22:	f7ff ff59 	bl	801e9d8 <__sflush_r>
 801eb26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb28:	07da      	lsls	r2, r3, #31
 801eb2a:	4605      	mov	r5, r0
 801eb2c:	d4e0      	bmi.n	801eaf0 <_fflush_r+0xc>
 801eb2e:	89a3      	ldrh	r3, [r4, #12]
 801eb30:	059b      	lsls	r3, r3, #22
 801eb32:	d4dd      	bmi.n	801eaf0 <_fflush_r+0xc>
 801eb34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb36:	f000 f91a 	bl	801ed6e <__retarget_lock_release_recursive>
 801eb3a:	e7d9      	b.n	801eaf0 <_fflush_r+0xc>
 801eb3c:	4b05      	ldr	r3, [pc, #20]	; (801eb54 <_fflush_r+0x70>)
 801eb3e:	429c      	cmp	r4, r3
 801eb40:	d101      	bne.n	801eb46 <_fflush_r+0x62>
 801eb42:	68ac      	ldr	r4, [r5, #8]
 801eb44:	e7df      	b.n	801eb06 <_fflush_r+0x22>
 801eb46:	4b04      	ldr	r3, [pc, #16]	; (801eb58 <_fflush_r+0x74>)
 801eb48:	429c      	cmp	r4, r3
 801eb4a:	bf08      	it	eq
 801eb4c:	68ec      	ldreq	r4, [r5, #12]
 801eb4e:	e7da      	b.n	801eb06 <_fflush_r+0x22>
 801eb50:	0801ffdc 	.word	0x0801ffdc
 801eb54:	0801fffc 	.word	0x0801fffc
 801eb58:	0801ffbc 	.word	0x0801ffbc

0801eb5c <std>:
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	b510      	push	{r4, lr}
 801eb60:	4604      	mov	r4, r0
 801eb62:	e9c0 3300 	strd	r3, r3, [r0]
 801eb66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eb6a:	6083      	str	r3, [r0, #8]
 801eb6c:	8181      	strh	r1, [r0, #12]
 801eb6e:	6643      	str	r3, [r0, #100]	; 0x64
 801eb70:	81c2      	strh	r2, [r0, #14]
 801eb72:	6183      	str	r3, [r0, #24]
 801eb74:	4619      	mov	r1, r3
 801eb76:	2208      	movs	r2, #8
 801eb78:	305c      	adds	r0, #92	; 0x5c
 801eb7a:	f7fc f8d9 	bl	801ad30 <memset>
 801eb7e:	4b05      	ldr	r3, [pc, #20]	; (801eb94 <std+0x38>)
 801eb80:	6263      	str	r3, [r4, #36]	; 0x24
 801eb82:	4b05      	ldr	r3, [pc, #20]	; (801eb98 <std+0x3c>)
 801eb84:	62a3      	str	r3, [r4, #40]	; 0x28
 801eb86:	4b05      	ldr	r3, [pc, #20]	; (801eb9c <std+0x40>)
 801eb88:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eb8a:	4b05      	ldr	r3, [pc, #20]	; (801eba0 <std+0x44>)
 801eb8c:	6224      	str	r4, [r4, #32]
 801eb8e:	6323      	str	r3, [r4, #48]	; 0x30
 801eb90:	bd10      	pop	{r4, pc}
 801eb92:	bf00      	nop
 801eb94:	0801ba1d 	.word	0x0801ba1d
 801eb98:	0801ba3f 	.word	0x0801ba3f
 801eb9c:	0801ba77 	.word	0x0801ba77
 801eba0:	0801ba9b 	.word	0x0801ba9b

0801eba4 <_cleanup_r>:
 801eba4:	4901      	ldr	r1, [pc, #4]	; (801ebac <_cleanup_r+0x8>)
 801eba6:	f000 b8c1 	b.w	801ed2c <_fwalk_reent>
 801ebaa:	bf00      	nop
 801ebac:	0801eae5 	.word	0x0801eae5

0801ebb0 <__sfmoreglue>:
 801ebb0:	b570      	push	{r4, r5, r6, lr}
 801ebb2:	2268      	movs	r2, #104	; 0x68
 801ebb4:	1e4d      	subs	r5, r1, #1
 801ebb6:	4355      	muls	r5, r2
 801ebb8:	460e      	mov	r6, r1
 801ebba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ebbe:	f7ff fcd1 	bl	801e564 <_malloc_r>
 801ebc2:	4604      	mov	r4, r0
 801ebc4:	b140      	cbz	r0, 801ebd8 <__sfmoreglue+0x28>
 801ebc6:	2100      	movs	r1, #0
 801ebc8:	e9c0 1600 	strd	r1, r6, [r0]
 801ebcc:	300c      	adds	r0, #12
 801ebce:	60a0      	str	r0, [r4, #8]
 801ebd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ebd4:	f7fc f8ac 	bl	801ad30 <memset>
 801ebd8:	4620      	mov	r0, r4
 801ebda:	bd70      	pop	{r4, r5, r6, pc}

0801ebdc <__sfp_lock_acquire>:
 801ebdc:	4801      	ldr	r0, [pc, #4]	; (801ebe4 <__sfp_lock_acquire+0x8>)
 801ebde:	f000 b8c5 	b.w	801ed6c <__retarget_lock_acquire_recursive>
 801ebe2:	bf00      	nop
 801ebe4:	240034fd 	.word	0x240034fd

0801ebe8 <__sfp_lock_release>:
 801ebe8:	4801      	ldr	r0, [pc, #4]	; (801ebf0 <__sfp_lock_release+0x8>)
 801ebea:	f000 b8c0 	b.w	801ed6e <__retarget_lock_release_recursive>
 801ebee:	bf00      	nop
 801ebf0:	240034fd 	.word	0x240034fd

0801ebf4 <__sinit_lock_acquire>:
 801ebf4:	4801      	ldr	r0, [pc, #4]	; (801ebfc <__sinit_lock_acquire+0x8>)
 801ebf6:	f000 b8b9 	b.w	801ed6c <__retarget_lock_acquire_recursive>
 801ebfa:	bf00      	nop
 801ebfc:	240034fe 	.word	0x240034fe

0801ec00 <__sinit_lock_release>:
 801ec00:	4801      	ldr	r0, [pc, #4]	; (801ec08 <__sinit_lock_release+0x8>)
 801ec02:	f000 b8b4 	b.w	801ed6e <__retarget_lock_release_recursive>
 801ec06:	bf00      	nop
 801ec08:	240034fe 	.word	0x240034fe

0801ec0c <__sinit>:
 801ec0c:	b510      	push	{r4, lr}
 801ec0e:	4604      	mov	r4, r0
 801ec10:	f7ff fff0 	bl	801ebf4 <__sinit_lock_acquire>
 801ec14:	69a3      	ldr	r3, [r4, #24]
 801ec16:	b11b      	cbz	r3, 801ec20 <__sinit+0x14>
 801ec18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec1c:	f7ff bff0 	b.w	801ec00 <__sinit_lock_release>
 801ec20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ec24:	6523      	str	r3, [r4, #80]	; 0x50
 801ec26:	4b13      	ldr	r3, [pc, #76]	; (801ec74 <__sinit+0x68>)
 801ec28:	4a13      	ldr	r2, [pc, #76]	; (801ec78 <__sinit+0x6c>)
 801ec2a:	681b      	ldr	r3, [r3, #0]
 801ec2c:	62a2      	str	r2, [r4, #40]	; 0x28
 801ec2e:	42a3      	cmp	r3, r4
 801ec30:	bf04      	itt	eq
 801ec32:	2301      	moveq	r3, #1
 801ec34:	61a3      	streq	r3, [r4, #24]
 801ec36:	4620      	mov	r0, r4
 801ec38:	f000 f820 	bl	801ec7c <__sfp>
 801ec3c:	6060      	str	r0, [r4, #4]
 801ec3e:	4620      	mov	r0, r4
 801ec40:	f000 f81c 	bl	801ec7c <__sfp>
 801ec44:	60a0      	str	r0, [r4, #8]
 801ec46:	4620      	mov	r0, r4
 801ec48:	f000 f818 	bl	801ec7c <__sfp>
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	60e0      	str	r0, [r4, #12]
 801ec50:	2104      	movs	r1, #4
 801ec52:	6860      	ldr	r0, [r4, #4]
 801ec54:	f7ff ff82 	bl	801eb5c <std>
 801ec58:	68a0      	ldr	r0, [r4, #8]
 801ec5a:	2201      	movs	r2, #1
 801ec5c:	2109      	movs	r1, #9
 801ec5e:	f7ff ff7d 	bl	801eb5c <std>
 801ec62:	68e0      	ldr	r0, [r4, #12]
 801ec64:	2202      	movs	r2, #2
 801ec66:	2112      	movs	r1, #18
 801ec68:	f7ff ff78 	bl	801eb5c <std>
 801ec6c:	2301      	movs	r3, #1
 801ec6e:	61a3      	str	r3, [r4, #24]
 801ec70:	e7d2      	b.n	801ec18 <__sinit+0xc>
 801ec72:	bf00      	nop
 801ec74:	0801fb78 	.word	0x0801fb78
 801ec78:	0801eba5 	.word	0x0801eba5

0801ec7c <__sfp>:
 801ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec7e:	4607      	mov	r7, r0
 801ec80:	f7ff ffac 	bl	801ebdc <__sfp_lock_acquire>
 801ec84:	4b1e      	ldr	r3, [pc, #120]	; (801ed00 <__sfp+0x84>)
 801ec86:	681e      	ldr	r6, [r3, #0]
 801ec88:	69b3      	ldr	r3, [r6, #24]
 801ec8a:	b913      	cbnz	r3, 801ec92 <__sfp+0x16>
 801ec8c:	4630      	mov	r0, r6
 801ec8e:	f7ff ffbd 	bl	801ec0c <__sinit>
 801ec92:	3648      	adds	r6, #72	; 0x48
 801ec94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ec98:	3b01      	subs	r3, #1
 801ec9a:	d503      	bpl.n	801eca4 <__sfp+0x28>
 801ec9c:	6833      	ldr	r3, [r6, #0]
 801ec9e:	b30b      	cbz	r3, 801ece4 <__sfp+0x68>
 801eca0:	6836      	ldr	r6, [r6, #0]
 801eca2:	e7f7      	b.n	801ec94 <__sfp+0x18>
 801eca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801eca8:	b9d5      	cbnz	r5, 801ece0 <__sfp+0x64>
 801ecaa:	4b16      	ldr	r3, [pc, #88]	; (801ed04 <__sfp+0x88>)
 801ecac:	60e3      	str	r3, [r4, #12]
 801ecae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ecb2:	6665      	str	r5, [r4, #100]	; 0x64
 801ecb4:	f000 f859 	bl	801ed6a <__retarget_lock_init_recursive>
 801ecb8:	f7ff ff96 	bl	801ebe8 <__sfp_lock_release>
 801ecbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ecc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ecc4:	6025      	str	r5, [r4, #0]
 801ecc6:	61a5      	str	r5, [r4, #24]
 801ecc8:	2208      	movs	r2, #8
 801ecca:	4629      	mov	r1, r5
 801eccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ecd0:	f7fc f82e 	bl	801ad30 <memset>
 801ecd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ecd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ecdc:	4620      	mov	r0, r4
 801ecde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ece0:	3468      	adds	r4, #104	; 0x68
 801ece2:	e7d9      	b.n	801ec98 <__sfp+0x1c>
 801ece4:	2104      	movs	r1, #4
 801ece6:	4638      	mov	r0, r7
 801ece8:	f7ff ff62 	bl	801ebb0 <__sfmoreglue>
 801ecec:	4604      	mov	r4, r0
 801ecee:	6030      	str	r0, [r6, #0]
 801ecf0:	2800      	cmp	r0, #0
 801ecf2:	d1d5      	bne.n	801eca0 <__sfp+0x24>
 801ecf4:	f7ff ff78 	bl	801ebe8 <__sfp_lock_release>
 801ecf8:	230c      	movs	r3, #12
 801ecfa:	603b      	str	r3, [r7, #0]
 801ecfc:	e7ee      	b.n	801ecdc <__sfp+0x60>
 801ecfe:	bf00      	nop
 801ed00:	0801fb78 	.word	0x0801fb78
 801ed04:	ffff0001 	.word	0xffff0001

0801ed08 <fiprintf>:
 801ed08:	b40e      	push	{r1, r2, r3}
 801ed0a:	b503      	push	{r0, r1, lr}
 801ed0c:	4601      	mov	r1, r0
 801ed0e:	ab03      	add	r3, sp, #12
 801ed10:	4805      	ldr	r0, [pc, #20]	; (801ed28 <fiprintf+0x20>)
 801ed12:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed16:	6800      	ldr	r0, [r0, #0]
 801ed18:	9301      	str	r3, [sp, #4]
 801ed1a:	f000 f8a7 	bl	801ee6c <_vfiprintf_r>
 801ed1e:	b002      	add	sp, #8
 801ed20:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed24:	b003      	add	sp, #12
 801ed26:	4770      	bx	lr
 801ed28:	24000100 	.word	0x24000100

0801ed2c <_fwalk_reent>:
 801ed2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed30:	4606      	mov	r6, r0
 801ed32:	4688      	mov	r8, r1
 801ed34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ed38:	2700      	movs	r7, #0
 801ed3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ed3e:	f1b9 0901 	subs.w	r9, r9, #1
 801ed42:	d505      	bpl.n	801ed50 <_fwalk_reent+0x24>
 801ed44:	6824      	ldr	r4, [r4, #0]
 801ed46:	2c00      	cmp	r4, #0
 801ed48:	d1f7      	bne.n	801ed3a <_fwalk_reent+0xe>
 801ed4a:	4638      	mov	r0, r7
 801ed4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed50:	89ab      	ldrh	r3, [r5, #12]
 801ed52:	2b01      	cmp	r3, #1
 801ed54:	d907      	bls.n	801ed66 <_fwalk_reent+0x3a>
 801ed56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ed5a:	3301      	adds	r3, #1
 801ed5c:	d003      	beq.n	801ed66 <_fwalk_reent+0x3a>
 801ed5e:	4629      	mov	r1, r5
 801ed60:	4630      	mov	r0, r6
 801ed62:	47c0      	blx	r8
 801ed64:	4307      	orrs	r7, r0
 801ed66:	3568      	adds	r5, #104	; 0x68
 801ed68:	e7e9      	b.n	801ed3e <_fwalk_reent+0x12>

0801ed6a <__retarget_lock_init_recursive>:
 801ed6a:	4770      	bx	lr

0801ed6c <__retarget_lock_acquire_recursive>:
 801ed6c:	4770      	bx	lr

0801ed6e <__retarget_lock_release_recursive>:
 801ed6e:	4770      	bx	lr

0801ed70 <memmove>:
 801ed70:	4288      	cmp	r0, r1
 801ed72:	b510      	push	{r4, lr}
 801ed74:	eb01 0402 	add.w	r4, r1, r2
 801ed78:	d902      	bls.n	801ed80 <memmove+0x10>
 801ed7a:	4284      	cmp	r4, r0
 801ed7c:	4623      	mov	r3, r4
 801ed7e:	d807      	bhi.n	801ed90 <memmove+0x20>
 801ed80:	1e43      	subs	r3, r0, #1
 801ed82:	42a1      	cmp	r1, r4
 801ed84:	d008      	beq.n	801ed98 <memmove+0x28>
 801ed86:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ed8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ed8e:	e7f8      	b.n	801ed82 <memmove+0x12>
 801ed90:	4402      	add	r2, r0
 801ed92:	4601      	mov	r1, r0
 801ed94:	428a      	cmp	r2, r1
 801ed96:	d100      	bne.n	801ed9a <memmove+0x2a>
 801ed98:	bd10      	pop	{r4, pc}
 801ed9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ed9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801eda2:	e7f7      	b.n	801ed94 <memmove+0x24>

0801eda4 <__malloc_lock>:
 801eda4:	4801      	ldr	r0, [pc, #4]	; (801edac <__malloc_lock+0x8>)
 801eda6:	f7ff bfe1 	b.w	801ed6c <__retarget_lock_acquire_recursive>
 801edaa:	bf00      	nop
 801edac:	240034fc 	.word	0x240034fc

0801edb0 <__malloc_unlock>:
 801edb0:	4801      	ldr	r0, [pc, #4]	; (801edb8 <__malloc_unlock+0x8>)
 801edb2:	f7ff bfdc 	b.w	801ed6e <__retarget_lock_release_recursive>
 801edb6:	bf00      	nop
 801edb8:	240034fc 	.word	0x240034fc

0801edbc <_realloc_r>:
 801edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edc0:	4680      	mov	r8, r0
 801edc2:	4614      	mov	r4, r2
 801edc4:	460e      	mov	r6, r1
 801edc6:	b921      	cbnz	r1, 801edd2 <_realloc_r+0x16>
 801edc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801edcc:	4611      	mov	r1, r2
 801edce:	f7ff bbc9 	b.w	801e564 <_malloc_r>
 801edd2:	b92a      	cbnz	r2, 801ede0 <_realloc_r+0x24>
 801edd4:	f7ff fb5a 	bl	801e48c <_free_r>
 801edd8:	4625      	mov	r5, r4
 801edda:	4628      	mov	r0, r5
 801eddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ede0:	f000 faa0 	bl	801f324 <_malloc_usable_size_r>
 801ede4:	4284      	cmp	r4, r0
 801ede6:	4607      	mov	r7, r0
 801ede8:	d802      	bhi.n	801edf0 <_realloc_r+0x34>
 801edea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801edee:	d812      	bhi.n	801ee16 <_realloc_r+0x5a>
 801edf0:	4621      	mov	r1, r4
 801edf2:	4640      	mov	r0, r8
 801edf4:	f7ff fbb6 	bl	801e564 <_malloc_r>
 801edf8:	4605      	mov	r5, r0
 801edfa:	2800      	cmp	r0, #0
 801edfc:	d0ed      	beq.n	801edda <_realloc_r+0x1e>
 801edfe:	42bc      	cmp	r4, r7
 801ee00:	4622      	mov	r2, r4
 801ee02:	4631      	mov	r1, r6
 801ee04:	bf28      	it	cs
 801ee06:	463a      	movcs	r2, r7
 801ee08:	f7fb ff84 	bl	801ad14 <memcpy>
 801ee0c:	4631      	mov	r1, r6
 801ee0e:	4640      	mov	r0, r8
 801ee10:	f7ff fb3c 	bl	801e48c <_free_r>
 801ee14:	e7e1      	b.n	801edda <_realloc_r+0x1e>
 801ee16:	4635      	mov	r5, r6
 801ee18:	e7df      	b.n	801edda <_realloc_r+0x1e>

0801ee1a <__sfputc_r>:
 801ee1a:	6893      	ldr	r3, [r2, #8]
 801ee1c:	3b01      	subs	r3, #1
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	b410      	push	{r4}
 801ee22:	6093      	str	r3, [r2, #8]
 801ee24:	da08      	bge.n	801ee38 <__sfputc_r+0x1e>
 801ee26:	6994      	ldr	r4, [r2, #24]
 801ee28:	42a3      	cmp	r3, r4
 801ee2a:	db01      	blt.n	801ee30 <__sfputc_r+0x16>
 801ee2c:	290a      	cmp	r1, #10
 801ee2e:	d103      	bne.n	801ee38 <__sfputc_r+0x1e>
 801ee30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee34:	f000 b94a 	b.w	801f0cc <__swbuf_r>
 801ee38:	6813      	ldr	r3, [r2, #0]
 801ee3a:	1c58      	adds	r0, r3, #1
 801ee3c:	6010      	str	r0, [r2, #0]
 801ee3e:	7019      	strb	r1, [r3, #0]
 801ee40:	4608      	mov	r0, r1
 801ee42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee46:	4770      	bx	lr

0801ee48 <__sfputs_r>:
 801ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee4a:	4606      	mov	r6, r0
 801ee4c:	460f      	mov	r7, r1
 801ee4e:	4614      	mov	r4, r2
 801ee50:	18d5      	adds	r5, r2, r3
 801ee52:	42ac      	cmp	r4, r5
 801ee54:	d101      	bne.n	801ee5a <__sfputs_r+0x12>
 801ee56:	2000      	movs	r0, #0
 801ee58:	e007      	b.n	801ee6a <__sfputs_r+0x22>
 801ee5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee5e:	463a      	mov	r2, r7
 801ee60:	4630      	mov	r0, r6
 801ee62:	f7ff ffda 	bl	801ee1a <__sfputc_r>
 801ee66:	1c43      	adds	r3, r0, #1
 801ee68:	d1f3      	bne.n	801ee52 <__sfputs_r+0xa>
 801ee6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ee6c <_vfiprintf_r>:
 801ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee70:	460d      	mov	r5, r1
 801ee72:	b09d      	sub	sp, #116	; 0x74
 801ee74:	4614      	mov	r4, r2
 801ee76:	4698      	mov	r8, r3
 801ee78:	4606      	mov	r6, r0
 801ee7a:	b118      	cbz	r0, 801ee84 <_vfiprintf_r+0x18>
 801ee7c:	6983      	ldr	r3, [r0, #24]
 801ee7e:	b90b      	cbnz	r3, 801ee84 <_vfiprintf_r+0x18>
 801ee80:	f7ff fec4 	bl	801ec0c <__sinit>
 801ee84:	4b89      	ldr	r3, [pc, #548]	; (801f0ac <_vfiprintf_r+0x240>)
 801ee86:	429d      	cmp	r5, r3
 801ee88:	d11b      	bne.n	801eec2 <_vfiprintf_r+0x56>
 801ee8a:	6875      	ldr	r5, [r6, #4]
 801ee8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ee8e:	07d9      	lsls	r1, r3, #31
 801ee90:	d405      	bmi.n	801ee9e <_vfiprintf_r+0x32>
 801ee92:	89ab      	ldrh	r3, [r5, #12]
 801ee94:	059a      	lsls	r2, r3, #22
 801ee96:	d402      	bmi.n	801ee9e <_vfiprintf_r+0x32>
 801ee98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ee9a:	f7ff ff67 	bl	801ed6c <__retarget_lock_acquire_recursive>
 801ee9e:	89ab      	ldrh	r3, [r5, #12]
 801eea0:	071b      	lsls	r3, r3, #28
 801eea2:	d501      	bpl.n	801eea8 <_vfiprintf_r+0x3c>
 801eea4:	692b      	ldr	r3, [r5, #16]
 801eea6:	b9eb      	cbnz	r3, 801eee4 <_vfiprintf_r+0x78>
 801eea8:	4629      	mov	r1, r5
 801eeaa:	4630      	mov	r0, r6
 801eeac:	f000 f960 	bl	801f170 <__swsetup_r>
 801eeb0:	b1c0      	cbz	r0, 801eee4 <_vfiprintf_r+0x78>
 801eeb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eeb4:	07dc      	lsls	r4, r3, #31
 801eeb6:	d50e      	bpl.n	801eed6 <_vfiprintf_r+0x6a>
 801eeb8:	f04f 30ff 	mov.w	r0, #4294967295
 801eebc:	b01d      	add	sp, #116	; 0x74
 801eebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eec2:	4b7b      	ldr	r3, [pc, #492]	; (801f0b0 <_vfiprintf_r+0x244>)
 801eec4:	429d      	cmp	r5, r3
 801eec6:	d101      	bne.n	801eecc <_vfiprintf_r+0x60>
 801eec8:	68b5      	ldr	r5, [r6, #8]
 801eeca:	e7df      	b.n	801ee8c <_vfiprintf_r+0x20>
 801eecc:	4b79      	ldr	r3, [pc, #484]	; (801f0b4 <_vfiprintf_r+0x248>)
 801eece:	429d      	cmp	r5, r3
 801eed0:	bf08      	it	eq
 801eed2:	68f5      	ldreq	r5, [r6, #12]
 801eed4:	e7da      	b.n	801ee8c <_vfiprintf_r+0x20>
 801eed6:	89ab      	ldrh	r3, [r5, #12]
 801eed8:	0598      	lsls	r0, r3, #22
 801eeda:	d4ed      	bmi.n	801eeb8 <_vfiprintf_r+0x4c>
 801eedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eede:	f7ff ff46 	bl	801ed6e <__retarget_lock_release_recursive>
 801eee2:	e7e9      	b.n	801eeb8 <_vfiprintf_r+0x4c>
 801eee4:	2300      	movs	r3, #0
 801eee6:	9309      	str	r3, [sp, #36]	; 0x24
 801eee8:	2320      	movs	r3, #32
 801eeea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eeee:	f8cd 800c 	str.w	r8, [sp, #12]
 801eef2:	2330      	movs	r3, #48	; 0x30
 801eef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f0b8 <_vfiprintf_r+0x24c>
 801eef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eefc:	f04f 0901 	mov.w	r9, #1
 801ef00:	4623      	mov	r3, r4
 801ef02:	469a      	mov	sl, r3
 801ef04:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef08:	b10a      	cbz	r2, 801ef0e <_vfiprintf_r+0xa2>
 801ef0a:	2a25      	cmp	r2, #37	; 0x25
 801ef0c:	d1f9      	bne.n	801ef02 <_vfiprintf_r+0x96>
 801ef0e:	ebba 0b04 	subs.w	fp, sl, r4
 801ef12:	d00b      	beq.n	801ef2c <_vfiprintf_r+0xc0>
 801ef14:	465b      	mov	r3, fp
 801ef16:	4622      	mov	r2, r4
 801ef18:	4629      	mov	r1, r5
 801ef1a:	4630      	mov	r0, r6
 801ef1c:	f7ff ff94 	bl	801ee48 <__sfputs_r>
 801ef20:	3001      	adds	r0, #1
 801ef22:	f000 80aa 	beq.w	801f07a <_vfiprintf_r+0x20e>
 801ef26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef28:	445a      	add	r2, fp
 801ef2a:	9209      	str	r2, [sp, #36]	; 0x24
 801ef2c:	f89a 3000 	ldrb.w	r3, [sl]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	f000 80a2 	beq.w	801f07a <_vfiprintf_r+0x20e>
 801ef36:	2300      	movs	r3, #0
 801ef38:	f04f 32ff 	mov.w	r2, #4294967295
 801ef3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef40:	f10a 0a01 	add.w	sl, sl, #1
 801ef44:	9304      	str	r3, [sp, #16]
 801ef46:	9307      	str	r3, [sp, #28]
 801ef48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ef4c:	931a      	str	r3, [sp, #104]	; 0x68
 801ef4e:	4654      	mov	r4, sl
 801ef50:	2205      	movs	r2, #5
 801ef52:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef56:	4858      	ldr	r0, [pc, #352]	; (801f0b8 <_vfiprintf_r+0x24c>)
 801ef58:	f7e1 f9f2 	bl	8000340 <memchr>
 801ef5c:	9a04      	ldr	r2, [sp, #16]
 801ef5e:	b9d8      	cbnz	r0, 801ef98 <_vfiprintf_r+0x12c>
 801ef60:	06d1      	lsls	r1, r2, #27
 801ef62:	bf44      	itt	mi
 801ef64:	2320      	movmi	r3, #32
 801ef66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef6a:	0713      	lsls	r3, r2, #28
 801ef6c:	bf44      	itt	mi
 801ef6e:	232b      	movmi	r3, #43	; 0x2b
 801ef70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef74:	f89a 3000 	ldrb.w	r3, [sl]
 801ef78:	2b2a      	cmp	r3, #42	; 0x2a
 801ef7a:	d015      	beq.n	801efa8 <_vfiprintf_r+0x13c>
 801ef7c:	9a07      	ldr	r2, [sp, #28]
 801ef7e:	4654      	mov	r4, sl
 801ef80:	2000      	movs	r0, #0
 801ef82:	f04f 0c0a 	mov.w	ip, #10
 801ef86:	4621      	mov	r1, r4
 801ef88:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef8c:	3b30      	subs	r3, #48	; 0x30
 801ef8e:	2b09      	cmp	r3, #9
 801ef90:	d94e      	bls.n	801f030 <_vfiprintf_r+0x1c4>
 801ef92:	b1b0      	cbz	r0, 801efc2 <_vfiprintf_r+0x156>
 801ef94:	9207      	str	r2, [sp, #28]
 801ef96:	e014      	b.n	801efc2 <_vfiprintf_r+0x156>
 801ef98:	eba0 0308 	sub.w	r3, r0, r8
 801ef9c:	fa09 f303 	lsl.w	r3, r9, r3
 801efa0:	4313      	orrs	r3, r2
 801efa2:	9304      	str	r3, [sp, #16]
 801efa4:	46a2      	mov	sl, r4
 801efa6:	e7d2      	b.n	801ef4e <_vfiprintf_r+0xe2>
 801efa8:	9b03      	ldr	r3, [sp, #12]
 801efaa:	1d19      	adds	r1, r3, #4
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	9103      	str	r1, [sp, #12]
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	bfbb      	ittet	lt
 801efb4:	425b      	neglt	r3, r3
 801efb6:	f042 0202 	orrlt.w	r2, r2, #2
 801efba:	9307      	strge	r3, [sp, #28]
 801efbc:	9307      	strlt	r3, [sp, #28]
 801efbe:	bfb8      	it	lt
 801efc0:	9204      	strlt	r2, [sp, #16]
 801efc2:	7823      	ldrb	r3, [r4, #0]
 801efc4:	2b2e      	cmp	r3, #46	; 0x2e
 801efc6:	d10c      	bne.n	801efe2 <_vfiprintf_r+0x176>
 801efc8:	7863      	ldrb	r3, [r4, #1]
 801efca:	2b2a      	cmp	r3, #42	; 0x2a
 801efcc:	d135      	bne.n	801f03a <_vfiprintf_r+0x1ce>
 801efce:	9b03      	ldr	r3, [sp, #12]
 801efd0:	1d1a      	adds	r2, r3, #4
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	9203      	str	r2, [sp, #12]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	bfb8      	it	lt
 801efda:	f04f 33ff 	movlt.w	r3, #4294967295
 801efde:	3402      	adds	r4, #2
 801efe0:	9305      	str	r3, [sp, #20]
 801efe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f0c8 <_vfiprintf_r+0x25c>
 801efe6:	7821      	ldrb	r1, [r4, #0]
 801efe8:	2203      	movs	r2, #3
 801efea:	4650      	mov	r0, sl
 801efec:	f7e1 f9a8 	bl	8000340 <memchr>
 801eff0:	b140      	cbz	r0, 801f004 <_vfiprintf_r+0x198>
 801eff2:	2340      	movs	r3, #64	; 0x40
 801eff4:	eba0 000a 	sub.w	r0, r0, sl
 801eff8:	fa03 f000 	lsl.w	r0, r3, r0
 801effc:	9b04      	ldr	r3, [sp, #16]
 801effe:	4303      	orrs	r3, r0
 801f000:	3401      	adds	r4, #1
 801f002:	9304      	str	r3, [sp, #16]
 801f004:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f008:	482c      	ldr	r0, [pc, #176]	; (801f0bc <_vfiprintf_r+0x250>)
 801f00a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f00e:	2206      	movs	r2, #6
 801f010:	f7e1 f996 	bl	8000340 <memchr>
 801f014:	2800      	cmp	r0, #0
 801f016:	d03f      	beq.n	801f098 <_vfiprintf_r+0x22c>
 801f018:	4b29      	ldr	r3, [pc, #164]	; (801f0c0 <_vfiprintf_r+0x254>)
 801f01a:	bb1b      	cbnz	r3, 801f064 <_vfiprintf_r+0x1f8>
 801f01c:	9b03      	ldr	r3, [sp, #12]
 801f01e:	3307      	adds	r3, #7
 801f020:	f023 0307 	bic.w	r3, r3, #7
 801f024:	3308      	adds	r3, #8
 801f026:	9303      	str	r3, [sp, #12]
 801f028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f02a:	443b      	add	r3, r7
 801f02c:	9309      	str	r3, [sp, #36]	; 0x24
 801f02e:	e767      	b.n	801ef00 <_vfiprintf_r+0x94>
 801f030:	fb0c 3202 	mla	r2, ip, r2, r3
 801f034:	460c      	mov	r4, r1
 801f036:	2001      	movs	r0, #1
 801f038:	e7a5      	b.n	801ef86 <_vfiprintf_r+0x11a>
 801f03a:	2300      	movs	r3, #0
 801f03c:	3401      	adds	r4, #1
 801f03e:	9305      	str	r3, [sp, #20]
 801f040:	4619      	mov	r1, r3
 801f042:	f04f 0c0a 	mov.w	ip, #10
 801f046:	4620      	mov	r0, r4
 801f048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f04c:	3a30      	subs	r2, #48	; 0x30
 801f04e:	2a09      	cmp	r2, #9
 801f050:	d903      	bls.n	801f05a <_vfiprintf_r+0x1ee>
 801f052:	2b00      	cmp	r3, #0
 801f054:	d0c5      	beq.n	801efe2 <_vfiprintf_r+0x176>
 801f056:	9105      	str	r1, [sp, #20]
 801f058:	e7c3      	b.n	801efe2 <_vfiprintf_r+0x176>
 801f05a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f05e:	4604      	mov	r4, r0
 801f060:	2301      	movs	r3, #1
 801f062:	e7f0      	b.n	801f046 <_vfiprintf_r+0x1da>
 801f064:	ab03      	add	r3, sp, #12
 801f066:	9300      	str	r3, [sp, #0]
 801f068:	462a      	mov	r2, r5
 801f06a:	4b16      	ldr	r3, [pc, #88]	; (801f0c4 <_vfiprintf_r+0x258>)
 801f06c:	a904      	add	r1, sp, #16
 801f06e:	4630      	mov	r0, r6
 801f070:	f7fb fef6 	bl	801ae60 <_printf_float>
 801f074:	4607      	mov	r7, r0
 801f076:	1c78      	adds	r0, r7, #1
 801f078:	d1d6      	bne.n	801f028 <_vfiprintf_r+0x1bc>
 801f07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f07c:	07d9      	lsls	r1, r3, #31
 801f07e:	d405      	bmi.n	801f08c <_vfiprintf_r+0x220>
 801f080:	89ab      	ldrh	r3, [r5, #12]
 801f082:	059a      	lsls	r2, r3, #22
 801f084:	d402      	bmi.n	801f08c <_vfiprintf_r+0x220>
 801f086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f088:	f7ff fe71 	bl	801ed6e <__retarget_lock_release_recursive>
 801f08c:	89ab      	ldrh	r3, [r5, #12]
 801f08e:	065b      	lsls	r3, r3, #25
 801f090:	f53f af12 	bmi.w	801eeb8 <_vfiprintf_r+0x4c>
 801f094:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f096:	e711      	b.n	801eebc <_vfiprintf_r+0x50>
 801f098:	ab03      	add	r3, sp, #12
 801f09a:	9300      	str	r3, [sp, #0]
 801f09c:	462a      	mov	r2, r5
 801f09e:	4b09      	ldr	r3, [pc, #36]	; (801f0c4 <_vfiprintf_r+0x258>)
 801f0a0:	a904      	add	r1, sp, #16
 801f0a2:	4630      	mov	r0, r6
 801f0a4:	f7fc f968 	bl	801b378 <_printf_i>
 801f0a8:	e7e4      	b.n	801f074 <_vfiprintf_r+0x208>
 801f0aa:	bf00      	nop
 801f0ac:	0801ffdc 	.word	0x0801ffdc
 801f0b0:	0801fffc 	.word	0x0801fffc
 801f0b4:	0801ffbc 	.word	0x0801ffbc
 801f0b8:	0801ff6c 	.word	0x0801ff6c
 801f0bc:	0801ff76 	.word	0x0801ff76
 801f0c0:	0801ae61 	.word	0x0801ae61
 801f0c4:	0801ee49 	.word	0x0801ee49
 801f0c8:	0801ff72 	.word	0x0801ff72

0801f0cc <__swbuf_r>:
 801f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0ce:	460e      	mov	r6, r1
 801f0d0:	4614      	mov	r4, r2
 801f0d2:	4605      	mov	r5, r0
 801f0d4:	b118      	cbz	r0, 801f0de <__swbuf_r+0x12>
 801f0d6:	6983      	ldr	r3, [r0, #24]
 801f0d8:	b90b      	cbnz	r3, 801f0de <__swbuf_r+0x12>
 801f0da:	f7ff fd97 	bl	801ec0c <__sinit>
 801f0de:	4b21      	ldr	r3, [pc, #132]	; (801f164 <__swbuf_r+0x98>)
 801f0e0:	429c      	cmp	r4, r3
 801f0e2:	d12b      	bne.n	801f13c <__swbuf_r+0x70>
 801f0e4:	686c      	ldr	r4, [r5, #4]
 801f0e6:	69a3      	ldr	r3, [r4, #24]
 801f0e8:	60a3      	str	r3, [r4, #8]
 801f0ea:	89a3      	ldrh	r3, [r4, #12]
 801f0ec:	071a      	lsls	r2, r3, #28
 801f0ee:	d52f      	bpl.n	801f150 <__swbuf_r+0x84>
 801f0f0:	6923      	ldr	r3, [r4, #16]
 801f0f2:	b36b      	cbz	r3, 801f150 <__swbuf_r+0x84>
 801f0f4:	6923      	ldr	r3, [r4, #16]
 801f0f6:	6820      	ldr	r0, [r4, #0]
 801f0f8:	1ac0      	subs	r0, r0, r3
 801f0fa:	6963      	ldr	r3, [r4, #20]
 801f0fc:	b2f6      	uxtb	r6, r6
 801f0fe:	4283      	cmp	r3, r0
 801f100:	4637      	mov	r7, r6
 801f102:	dc04      	bgt.n	801f10e <__swbuf_r+0x42>
 801f104:	4621      	mov	r1, r4
 801f106:	4628      	mov	r0, r5
 801f108:	f7ff fcec 	bl	801eae4 <_fflush_r>
 801f10c:	bb30      	cbnz	r0, 801f15c <__swbuf_r+0x90>
 801f10e:	68a3      	ldr	r3, [r4, #8]
 801f110:	3b01      	subs	r3, #1
 801f112:	60a3      	str	r3, [r4, #8]
 801f114:	6823      	ldr	r3, [r4, #0]
 801f116:	1c5a      	adds	r2, r3, #1
 801f118:	6022      	str	r2, [r4, #0]
 801f11a:	701e      	strb	r6, [r3, #0]
 801f11c:	6963      	ldr	r3, [r4, #20]
 801f11e:	3001      	adds	r0, #1
 801f120:	4283      	cmp	r3, r0
 801f122:	d004      	beq.n	801f12e <__swbuf_r+0x62>
 801f124:	89a3      	ldrh	r3, [r4, #12]
 801f126:	07db      	lsls	r3, r3, #31
 801f128:	d506      	bpl.n	801f138 <__swbuf_r+0x6c>
 801f12a:	2e0a      	cmp	r6, #10
 801f12c:	d104      	bne.n	801f138 <__swbuf_r+0x6c>
 801f12e:	4621      	mov	r1, r4
 801f130:	4628      	mov	r0, r5
 801f132:	f7ff fcd7 	bl	801eae4 <_fflush_r>
 801f136:	b988      	cbnz	r0, 801f15c <__swbuf_r+0x90>
 801f138:	4638      	mov	r0, r7
 801f13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f13c:	4b0a      	ldr	r3, [pc, #40]	; (801f168 <__swbuf_r+0x9c>)
 801f13e:	429c      	cmp	r4, r3
 801f140:	d101      	bne.n	801f146 <__swbuf_r+0x7a>
 801f142:	68ac      	ldr	r4, [r5, #8]
 801f144:	e7cf      	b.n	801f0e6 <__swbuf_r+0x1a>
 801f146:	4b09      	ldr	r3, [pc, #36]	; (801f16c <__swbuf_r+0xa0>)
 801f148:	429c      	cmp	r4, r3
 801f14a:	bf08      	it	eq
 801f14c:	68ec      	ldreq	r4, [r5, #12]
 801f14e:	e7ca      	b.n	801f0e6 <__swbuf_r+0x1a>
 801f150:	4621      	mov	r1, r4
 801f152:	4628      	mov	r0, r5
 801f154:	f000 f80c 	bl	801f170 <__swsetup_r>
 801f158:	2800      	cmp	r0, #0
 801f15a:	d0cb      	beq.n	801f0f4 <__swbuf_r+0x28>
 801f15c:	f04f 37ff 	mov.w	r7, #4294967295
 801f160:	e7ea      	b.n	801f138 <__swbuf_r+0x6c>
 801f162:	bf00      	nop
 801f164:	0801ffdc 	.word	0x0801ffdc
 801f168:	0801fffc 	.word	0x0801fffc
 801f16c:	0801ffbc 	.word	0x0801ffbc

0801f170 <__swsetup_r>:
 801f170:	4b32      	ldr	r3, [pc, #200]	; (801f23c <__swsetup_r+0xcc>)
 801f172:	b570      	push	{r4, r5, r6, lr}
 801f174:	681d      	ldr	r5, [r3, #0]
 801f176:	4606      	mov	r6, r0
 801f178:	460c      	mov	r4, r1
 801f17a:	b125      	cbz	r5, 801f186 <__swsetup_r+0x16>
 801f17c:	69ab      	ldr	r3, [r5, #24]
 801f17e:	b913      	cbnz	r3, 801f186 <__swsetup_r+0x16>
 801f180:	4628      	mov	r0, r5
 801f182:	f7ff fd43 	bl	801ec0c <__sinit>
 801f186:	4b2e      	ldr	r3, [pc, #184]	; (801f240 <__swsetup_r+0xd0>)
 801f188:	429c      	cmp	r4, r3
 801f18a:	d10f      	bne.n	801f1ac <__swsetup_r+0x3c>
 801f18c:	686c      	ldr	r4, [r5, #4]
 801f18e:	89a3      	ldrh	r3, [r4, #12]
 801f190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f194:	0719      	lsls	r1, r3, #28
 801f196:	d42c      	bmi.n	801f1f2 <__swsetup_r+0x82>
 801f198:	06dd      	lsls	r5, r3, #27
 801f19a:	d411      	bmi.n	801f1c0 <__swsetup_r+0x50>
 801f19c:	2309      	movs	r3, #9
 801f19e:	6033      	str	r3, [r6, #0]
 801f1a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f1a4:	81a3      	strh	r3, [r4, #12]
 801f1a6:	f04f 30ff 	mov.w	r0, #4294967295
 801f1aa:	e03e      	b.n	801f22a <__swsetup_r+0xba>
 801f1ac:	4b25      	ldr	r3, [pc, #148]	; (801f244 <__swsetup_r+0xd4>)
 801f1ae:	429c      	cmp	r4, r3
 801f1b0:	d101      	bne.n	801f1b6 <__swsetup_r+0x46>
 801f1b2:	68ac      	ldr	r4, [r5, #8]
 801f1b4:	e7eb      	b.n	801f18e <__swsetup_r+0x1e>
 801f1b6:	4b24      	ldr	r3, [pc, #144]	; (801f248 <__swsetup_r+0xd8>)
 801f1b8:	429c      	cmp	r4, r3
 801f1ba:	bf08      	it	eq
 801f1bc:	68ec      	ldreq	r4, [r5, #12]
 801f1be:	e7e6      	b.n	801f18e <__swsetup_r+0x1e>
 801f1c0:	0758      	lsls	r0, r3, #29
 801f1c2:	d512      	bpl.n	801f1ea <__swsetup_r+0x7a>
 801f1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f1c6:	b141      	cbz	r1, 801f1da <__swsetup_r+0x6a>
 801f1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f1cc:	4299      	cmp	r1, r3
 801f1ce:	d002      	beq.n	801f1d6 <__swsetup_r+0x66>
 801f1d0:	4630      	mov	r0, r6
 801f1d2:	f7ff f95b 	bl	801e48c <_free_r>
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	6363      	str	r3, [r4, #52]	; 0x34
 801f1da:	89a3      	ldrh	r3, [r4, #12]
 801f1dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f1e0:	81a3      	strh	r3, [r4, #12]
 801f1e2:	2300      	movs	r3, #0
 801f1e4:	6063      	str	r3, [r4, #4]
 801f1e6:	6923      	ldr	r3, [r4, #16]
 801f1e8:	6023      	str	r3, [r4, #0]
 801f1ea:	89a3      	ldrh	r3, [r4, #12]
 801f1ec:	f043 0308 	orr.w	r3, r3, #8
 801f1f0:	81a3      	strh	r3, [r4, #12]
 801f1f2:	6923      	ldr	r3, [r4, #16]
 801f1f4:	b94b      	cbnz	r3, 801f20a <__swsetup_r+0x9a>
 801f1f6:	89a3      	ldrh	r3, [r4, #12]
 801f1f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f200:	d003      	beq.n	801f20a <__swsetup_r+0x9a>
 801f202:	4621      	mov	r1, r4
 801f204:	4630      	mov	r0, r6
 801f206:	f000 f84d 	bl	801f2a4 <__smakebuf_r>
 801f20a:	89a0      	ldrh	r0, [r4, #12]
 801f20c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f210:	f010 0301 	ands.w	r3, r0, #1
 801f214:	d00a      	beq.n	801f22c <__swsetup_r+0xbc>
 801f216:	2300      	movs	r3, #0
 801f218:	60a3      	str	r3, [r4, #8]
 801f21a:	6963      	ldr	r3, [r4, #20]
 801f21c:	425b      	negs	r3, r3
 801f21e:	61a3      	str	r3, [r4, #24]
 801f220:	6923      	ldr	r3, [r4, #16]
 801f222:	b943      	cbnz	r3, 801f236 <__swsetup_r+0xc6>
 801f224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f228:	d1ba      	bne.n	801f1a0 <__swsetup_r+0x30>
 801f22a:	bd70      	pop	{r4, r5, r6, pc}
 801f22c:	0781      	lsls	r1, r0, #30
 801f22e:	bf58      	it	pl
 801f230:	6963      	ldrpl	r3, [r4, #20]
 801f232:	60a3      	str	r3, [r4, #8]
 801f234:	e7f4      	b.n	801f220 <__swsetup_r+0xb0>
 801f236:	2000      	movs	r0, #0
 801f238:	e7f7      	b.n	801f22a <__swsetup_r+0xba>
 801f23a:	bf00      	nop
 801f23c:	24000100 	.word	0x24000100
 801f240:	0801ffdc 	.word	0x0801ffdc
 801f244:	0801fffc 	.word	0x0801fffc
 801f248:	0801ffbc 	.word	0x0801ffbc

0801f24c <abort>:
 801f24c:	b508      	push	{r3, lr}
 801f24e:	2006      	movs	r0, #6
 801f250:	f000 f898 	bl	801f384 <raise>
 801f254:	2001      	movs	r0, #1
 801f256:	f7e4 fca9 	bl	8003bac <_exit>

0801f25a <__swhatbuf_r>:
 801f25a:	b570      	push	{r4, r5, r6, lr}
 801f25c:	460e      	mov	r6, r1
 801f25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f262:	2900      	cmp	r1, #0
 801f264:	b096      	sub	sp, #88	; 0x58
 801f266:	4614      	mov	r4, r2
 801f268:	461d      	mov	r5, r3
 801f26a:	da08      	bge.n	801f27e <__swhatbuf_r+0x24>
 801f26c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f270:	2200      	movs	r2, #0
 801f272:	602a      	str	r2, [r5, #0]
 801f274:	061a      	lsls	r2, r3, #24
 801f276:	d410      	bmi.n	801f29a <__swhatbuf_r+0x40>
 801f278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f27c:	e00e      	b.n	801f29c <__swhatbuf_r+0x42>
 801f27e:	466a      	mov	r2, sp
 801f280:	f000 f89c 	bl	801f3bc <_fstat_r>
 801f284:	2800      	cmp	r0, #0
 801f286:	dbf1      	blt.n	801f26c <__swhatbuf_r+0x12>
 801f288:	9a01      	ldr	r2, [sp, #4]
 801f28a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f28e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f292:	425a      	negs	r2, r3
 801f294:	415a      	adcs	r2, r3
 801f296:	602a      	str	r2, [r5, #0]
 801f298:	e7ee      	b.n	801f278 <__swhatbuf_r+0x1e>
 801f29a:	2340      	movs	r3, #64	; 0x40
 801f29c:	2000      	movs	r0, #0
 801f29e:	6023      	str	r3, [r4, #0]
 801f2a0:	b016      	add	sp, #88	; 0x58
 801f2a2:	bd70      	pop	{r4, r5, r6, pc}

0801f2a4 <__smakebuf_r>:
 801f2a4:	898b      	ldrh	r3, [r1, #12]
 801f2a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f2a8:	079d      	lsls	r5, r3, #30
 801f2aa:	4606      	mov	r6, r0
 801f2ac:	460c      	mov	r4, r1
 801f2ae:	d507      	bpl.n	801f2c0 <__smakebuf_r+0x1c>
 801f2b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f2b4:	6023      	str	r3, [r4, #0]
 801f2b6:	6123      	str	r3, [r4, #16]
 801f2b8:	2301      	movs	r3, #1
 801f2ba:	6163      	str	r3, [r4, #20]
 801f2bc:	b002      	add	sp, #8
 801f2be:	bd70      	pop	{r4, r5, r6, pc}
 801f2c0:	ab01      	add	r3, sp, #4
 801f2c2:	466a      	mov	r2, sp
 801f2c4:	f7ff ffc9 	bl	801f25a <__swhatbuf_r>
 801f2c8:	9900      	ldr	r1, [sp, #0]
 801f2ca:	4605      	mov	r5, r0
 801f2cc:	4630      	mov	r0, r6
 801f2ce:	f7ff f949 	bl	801e564 <_malloc_r>
 801f2d2:	b948      	cbnz	r0, 801f2e8 <__smakebuf_r+0x44>
 801f2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2d8:	059a      	lsls	r2, r3, #22
 801f2da:	d4ef      	bmi.n	801f2bc <__smakebuf_r+0x18>
 801f2dc:	f023 0303 	bic.w	r3, r3, #3
 801f2e0:	f043 0302 	orr.w	r3, r3, #2
 801f2e4:	81a3      	strh	r3, [r4, #12]
 801f2e6:	e7e3      	b.n	801f2b0 <__smakebuf_r+0xc>
 801f2e8:	4b0d      	ldr	r3, [pc, #52]	; (801f320 <__smakebuf_r+0x7c>)
 801f2ea:	62b3      	str	r3, [r6, #40]	; 0x28
 801f2ec:	89a3      	ldrh	r3, [r4, #12]
 801f2ee:	6020      	str	r0, [r4, #0]
 801f2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f2f4:	81a3      	strh	r3, [r4, #12]
 801f2f6:	9b00      	ldr	r3, [sp, #0]
 801f2f8:	6163      	str	r3, [r4, #20]
 801f2fa:	9b01      	ldr	r3, [sp, #4]
 801f2fc:	6120      	str	r0, [r4, #16]
 801f2fe:	b15b      	cbz	r3, 801f318 <__smakebuf_r+0x74>
 801f300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f304:	4630      	mov	r0, r6
 801f306:	f000 f86b 	bl	801f3e0 <_isatty_r>
 801f30a:	b128      	cbz	r0, 801f318 <__smakebuf_r+0x74>
 801f30c:	89a3      	ldrh	r3, [r4, #12]
 801f30e:	f023 0303 	bic.w	r3, r3, #3
 801f312:	f043 0301 	orr.w	r3, r3, #1
 801f316:	81a3      	strh	r3, [r4, #12]
 801f318:	89a0      	ldrh	r0, [r4, #12]
 801f31a:	4305      	orrs	r5, r0
 801f31c:	81a5      	strh	r5, [r4, #12]
 801f31e:	e7cd      	b.n	801f2bc <__smakebuf_r+0x18>
 801f320:	0801eba5 	.word	0x0801eba5

0801f324 <_malloc_usable_size_r>:
 801f324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f328:	1f18      	subs	r0, r3, #4
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	bfbc      	itt	lt
 801f32e:	580b      	ldrlt	r3, [r1, r0]
 801f330:	18c0      	addlt	r0, r0, r3
 801f332:	4770      	bx	lr

0801f334 <_raise_r>:
 801f334:	291f      	cmp	r1, #31
 801f336:	b538      	push	{r3, r4, r5, lr}
 801f338:	4604      	mov	r4, r0
 801f33a:	460d      	mov	r5, r1
 801f33c:	d904      	bls.n	801f348 <_raise_r+0x14>
 801f33e:	2316      	movs	r3, #22
 801f340:	6003      	str	r3, [r0, #0]
 801f342:	f04f 30ff 	mov.w	r0, #4294967295
 801f346:	bd38      	pop	{r3, r4, r5, pc}
 801f348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f34a:	b112      	cbz	r2, 801f352 <_raise_r+0x1e>
 801f34c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f350:	b94b      	cbnz	r3, 801f366 <_raise_r+0x32>
 801f352:	4620      	mov	r0, r4
 801f354:	f000 f830 	bl	801f3b8 <_getpid_r>
 801f358:	462a      	mov	r2, r5
 801f35a:	4601      	mov	r1, r0
 801f35c:	4620      	mov	r0, r4
 801f35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f362:	f000 b817 	b.w	801f394 <_kill_r>
 801f366:	2b01      	cmp	r3, #1
 801f368:	d00a      	beq.n	801f380 <_raise_r+0x4c>
 801f36a:	1c59      	adds	r1, r3, #1
 801f36c:	d103      	bne.n	801f376 <_raise_r+0x42>
 801f36e:	2316      	movs	r3, #22
 801f370:	6003      	str	r3, [r0, #0]
 801f372:	2001      	movs	r0, #1
 801f374:	e7e7      	b.n	801f346 <_raise_r+0x12>
 801f376:	2400      	movs	r4, #0
 801f378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f37c:	4628      	mov	r0, r5
 801f37e:	4798      	blx	r3
 801f380:	2000      	movs	r0, #0
 801f382:	e7e0      	b.n	801f346 <_raise_r+0x12>

0801f384 <raise>:
 801f384:	4b02      	ldr	r3, [pc, #8]	; (801f390 <raise+0xc>)
 801f386:	4601      	mov	r1, r0
 801f388:	6818      	ldr	r0, [r3, #0]
 801f38a:	f7ff bfd3 	b.w	801f334 <_raise_r>
 801f38e:	bf00      	nop
 801f390:	24000100 	.word	0x24000100

0801f394 <_kill_r>:
 801f394:	b538      	push	{r3, r4, r5, lr}
 801f396:	4d07      	ldr	r5, [pc, #28]	; (801f3b4 <_kill_r+0x20>)
 801f398:	2300      	movs	r3, #0
 801f39a:	4604      	mov	r4, r0
 801f39c:	4608      	mov	r0, r1
 801f39e:	4611      	mov	r1, r2
 801f3a0:	602b      	str	r3, [r5, #0]
 801f3a2:	f7e4 fbf3 	bl	8003b8c <_kill>
 801f3a6:	1c43      	adds	r3, r0, #1
 801f3a8:	d102      	bne.n	801f3b0 <_kill_r+0x1c>
 801f3aa:	682b      	ldr	r3, [r5, #0]
 801f3ac:	b103      	cbz	r3, 801f3b0 <_kill_r+0x1c>
 801f3ae:	6023      	str	r3, [r4, #0]
 801f3b0:	bd38      	pop	{r3, r4, r5, pc}
 801f3b2:	bf00      	nop
 801f3b4:	240034f8 	.word	0x240034f8

0801f3b8 <_getpid_r>:
 801f3b8:	f7e4 bbe0 	b.w	8003b7c <_getpid>

0801f3bc <_fstat_r>:
 801f3bc:	b538      	push	{r3, r4, r5, lr}
 801f3be:	4d07      	ldr	r5, [pc, #28]	; (801f3dc <_fstat_r+0x20>)
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	4604      	mov	r4, r0
 801f3c4:	4608      	mov	r0, r1
 801f3c6:	4611      	mov	r1, r2
 801f3c8:	602b      	str	r3, [r5, #0]
 801f3ca:	f7e4 fc3e 	bl	8003c4a <_fstat>
 801f3ce:	1c43      	adds	r3, r0, #1
 801f3d0:	d102      	bne.n	801f3d8 <_fstat_r+0x1c>
 801f3d2:	682b      	ldr	r3, [r5, #0]
 801f3d4:	b103      	cbz	r3, 801f3d8 <_fstat_r+0x1c>
 801f3d6:	6023      	str	r3, [r4, #0]
 801f3d8:	bd38      	pop	{r3, r4, r5, pc}
 801f3da:	bf00      	nop
 801f3dc:	240034f8 	.word	0x240034f8

0801f3e0 <_isatty_r>:
 801f3e0:	b538      	push	{r3, r4, r5, lr}
 801f3e2:	4d06      	ldr	r5, [pc, #24]	; (801f3fc <_isatty_r+0x1c>)
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	4604      	mov	r4, r0
 801f3e8:	4608      	mov	r0, r1
 801f3ea:	602b      	str	r3, [r5, #0]
 801f3ec:	f7e4 fc3d 	bl	8003c6a <_isatty>
 801f3f0:	1c43      	adds	r3, r0, #1
 801f3f2:	d102      	bne.n	801f3fa <_isatty_r+0x1a>
 801f3f4:	682b      	ldr	r3, [r5, #0]
 801f3f6:	b103      	cbz	r3, 801f3fa <_isatty_r+0x1a>
 801f3f8:	6023      	str	r3, [r4, #0]
 801f3fa:	bd38      	pop	{r3, r4, r5, pc}
 801f3fc:	240034f8 	.word	0x240034f8

0801f400 <_init>:
 801f400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f402:	bf00      	nop
 801f404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f406:	bc08      	pop	{r3}
 801f408:	469e      	mov	lr, r3
 801f40a:	4770      	bx	lr

0801f40c <_fini>:
 801f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f40e:	bf00      	nop
 801f410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f412:	bc08      	pop	{r3}
 801f414:	469e      	mov	lr, r3
 801f416:	4770      	bx	lr
