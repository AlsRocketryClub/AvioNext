
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180a4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08018374  08018374  00028374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801871c  0801871c  0002871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018724  08018724  00028724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018728  08018728  00028728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  0801872c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  0801887c  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  0801887c  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000357a8  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  00065969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214c  00000000  00000000  0006e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a8f9  00000000  00000000  000ae621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42f  00000000  00000000  000e8f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c4  00000000  00000000  0026634c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00272610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801835c 	.word	0x0801835c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	0801835c 	.word	0x0801835c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc84 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa1a 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fa14 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc72 	bl	8008000 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc5a 	bl	8008000 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f9f0 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fbe5 	bl	800ef30 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc47 	bl	8008000 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc30 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f9c6 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9c0 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc1e 	bl	8008000 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018508 	.word	0x08018508
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd7e 	bl	800f7b8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd78 	bl	800f7b8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd72 	bl	800f7b8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd6c 	bl	800f7b8 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018508 	.word	0x08018508
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f971 	bl	8008000 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d ff07 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f8fc 	bl	800ef30 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f95e 	bl	8008000 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f941 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fed7 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fed1 	bl	800eb38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f92f 	bl	8008000 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e4a:	231b      	movs	r3, #27
 8000e4c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b78      	cmp	r3, #120	; 0x78
 8000e52:	d809      	bhi.n	8000e68 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3b2d      	subs	r3, #45	; 0x2d
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <LoRA_setOCP+0x60>)
 8000e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5e:	1052      	asrs	r2, r2, #1
 8000e60:	17db      	asrs	r3, r3, #31
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e00b      	b.n	8000e80 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e6c:	d808      	bhi.n	8000e80 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	331e      	adds	r3, #30
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoRA_setOCP+0x60>)
 8000e74:	fb82 1203 	smull	r1, r2, r2, r3
 8000e78:	1092      	asrs	r2, r2, #2
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	200b      	movs	r0, #11
 8000e92:	f7ff ff61 	bl	8000d58 <LoRA_Write_Register>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	66666667 	.word	0x66666667

08000ea4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b11      	cmp	r3, #17
 8000eb0:	dd0f      	ble.n	8000ed2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b14      	cmp	r3, #20
 8000eb6:	dd01      	ble.n	8000ebc <LoRA_setTxPower+0x18>
        level = 20;
 8000eb8:	2314      	movs	r3, #20
 8000eba:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b03      	subs	r3, #3
 8000ec0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ec2:	2187      	movs	r1, #135	; 0x87
 8000ec4:	204d      	movs	r0, #77	; 0x4d
 8000ec6:	f7ff ff47 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eca:	208c      	movs	r0, #140	; 0x8c
 8000ecc:	f7ff ffb8 	bl	8000e40 <LoRA_setOCP>
 8000ed0:	e00b      	b.n	8000eea <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	dc01      	bgt.n	8000edc <LoRA_setTxPower+0x38>
        level = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000edc:	2184      	movs	r1, #132	; 0x84
 8000ede:	204d      	movs	r0, #77	; 0x4d
 8000ee0:	f7ff ff3a 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ee4:	2064      	movs	r0, #100	; 0x64
 8000ee6:	f7ff ffab 	bl	8000e40 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4619      	mov	r1, r3
 8000efe:	2009      	movs	r0, #9
 8000f00:	f7ff ff2a 	bl	8000d58 <LoRA_Write_Register>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f10:	201d      	movs	r0, #29
 8000f12:	f7ff fef9 	bl	8000d08 <LoRA_Read_Register>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff ff19 	bl	8000d58 <LoRA_Write_Register>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09c      	sub	sp, #112	; 0x70
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2101      	movs	r1, #1
 8000f38:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <LoRA_begin+0x98>)
 8000f3a:	f007 f861 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f44:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <LoRA_begin+0x9c>)
 8000f46:	f007 f85b 	bl	8008000 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f4a:	2042      	movs	r0, #66	; 0x42
 8000f4c:	f7ff fedc 	bl	8000d08 <LoRA_Read_Register>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f56:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	491b      	ldr	r1, [pc, #108]	; (8000fcc <LoRA_begin+0xa0>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f016 f895 	bl	8017090 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f9da 	bl	8000324 <strlen>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f015 fc35 	bl	80167e8 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f7e:	f7ff ff19 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f82:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <LoRA_begin+0xa4>)
 8000f84:	f7ff ff1e 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f7ff fee4 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	200e      	movs	r0, #14
 8000f94:	f7ff fee0 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000f98:	200c      	movs	r0, #12
 8000f9a:	f7ff feb5 	bl	8000d08 <LoRA_Read_Register>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f043 0303 	orr.w	r3, r3, #3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fed5 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	2026      	movs	r0, #38	; 0x26
 8000fb2:	f7ff fed1 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fb6:	2011      	movs	r0, #17
 8000fb8:	f7ff ff74 	bl	8000ea4 <LoRA_setTxPower>

}
 8000fbc:	bf00      	nop
 8000fbe:	3770      	adds	r7, #112	; 0x70
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58020c00 	.word	0x58020c00
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	08018374 	.word	0x08018374
 8000fd0:	33bca100 	.word	0x33bca100

08000fd4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fd8:	f7ff ff98 	bl	8000f0c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff feba 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2022      	movs	r0, #34	; 0x22
 8000fe8:	f7ff feb6 	bl	8000d58 <LoRA_Write_Register>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000ff4:	2183      	movs	r1, #131	; 0x83
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000ffc:	bf00      	nop
 8000ffe:	2012      	movs	r0, #18
 8001000:	f7ff fe82 	bl	8000d08 <LoRA_Read_Register>
 8001004:	4603      	mov	r3, r0
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f7      	beq.n	8000ffe <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800100e:	2185      	movs	r1, #133	; 0x85
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fea1 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001016:	2108      	movs	r1, #8
 8001018:	2012      	movs	r0, #18
 800101a:	f7ff fe9d 	bl	8000d58 <LoRA_Write_Register>

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800102c:	2012      	movs	r0, #18
 800102e:	f7ff fe6b 	bl	8000d08 <LoRA_Read_Register>
 8001032:	4603      	mov	r3, r0
 8001034:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001036:	f7ff ff69 	bl	8000f0c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	2012      	movs	r0, #18
 8001042:	f7ff fe89 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104c:	2b00      	cmp	r3, #0
 800104e:	d016      	beq.n	800107e <LoRA_parsePacket+0x5c>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	2b00      	cmp	r3, #0
 8001058:	d111      	bne.n	800107e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800105a:	2013      	movs	r0, #19
 800105c:	f7ff fe54 	bl	8000d08 <LoRA_Read_Register>
 8001060:	4603      	mov	r3, r0
 8001062:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001064:	2010      	movs	r0, #16
 8001066:	f7ff fe4f 	bl	8000d08 <LoRA_Read_Register>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	200d      	movs	r0, #13
 8001070:	f7ff fe72 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001074:	2185      	movs	r1, #133	; 0x85
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fe6e 	bl	8000d58 <LoRA_Write_Register>
 800107c:	e00d      	b.n	800109a <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fe42 	bl	8000d08 <LoRA_Read_Register>
 8001084:	4603      	mov	r3, r0
 8001086:	2b85      	cmp	r3, #133	; 0x85
 8001088:	d007      	beq.n	800109a <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	200d      	movs	r0, #13
 800108e:	f7ff fe63 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001092:	2185      	movs	r1, #133	; 0x85
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fe5f 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 800109a:	687b      	ldr	r3, [r7, #4]

}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ce      	sub	sp, #312	; 0x138
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010b2:	6018      	str	r0, [r3, #0]
	char sent[300];
	sprintf(sent, "sent: %s\n", data);
 80010b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010bc:	f107 0008 	add.w	r0, r7, #8
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4925      	ldr	r1, [pc, #148]	; (8001158 <LoRA_sendPacket+0xb4>)
 80010c4:	f015 ffe4 	bl	8017090 <siprintf>
	HAL_Delay(100);
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f002 fce7 	bl	8003a9c <HAL_Delay>
	CDC_Transmit_HS(sent, strlen(sent));
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f926 	bl	8000324 <strlen>
 80010d8:	4602      	mov	r2, r0
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f015 fb81 	bl	80167e8 <CDC_Transmit_HS>
    LoRA_beginPacket();
 80010e6:	f7ff ff75 	bl	8000fd4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80010f0:	e011      	b.n	8001116 <LoRA_sendPacket+0x72>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 80010f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80010fa:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fe26 	bl	8000d58 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 800110c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001110:	3301      	adds	r3, #1
 8001112:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001116:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800111a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	f7ff f900 	bl	8000324 <strlen>
 8001124:	4602      	mov	r2, r0
 8001126:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800112a:	429a      	cmp	r2, r3
 800112c:	d8e1      	bhi.n	80010f2 <LoRA_sendPacket+0x4e>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800112e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001132:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f7ff f8f4 	bl	8000324 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	2022      	movs	r0, #34	; 0x22
 8001144:	f7ff fe08 	bl	8000d58 <LoRA_Write_Register>
    LoRA_endPacket();
 8001148:	f7ff ff52 	bl	8000ff0 <LoRA_endPacket>
}
 800114c:	bf00      	nop
 800114e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	08018378 	.word	0x08018378

0800115c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2102      	movs	r1, #2
 8001168:	4827      	ldr	r0, [pc, #156]	; (8001208 <disarm+0xac>)
 800116a:	f006 ff49 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2104      	movs	r1, #4
 8001172:	4825      	ldr	r0, [pc, #148]	; (8001208 <disarm+0xac>)
 8001174:	f006 ff44 	bl	8008000 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	4823      	ldr	r0, [pc, #140]	; (800120c <disarm+0xb0>)
 800117e:	f006 ff3f 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4821      	ldr	r0, [pc, #132]	; (8001210 <disarm+0xb4>)
 800118a:	f006 ff39 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001194:	481e      	ldr	r0, [pc, #120]	; (8001210 <disarm+0xb4>)
 8001196:	f006 ff33 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <disarm+0xb4>)
 80011a2:	f006 ff2d 	bl	8008000 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	481a      	ldr	r0, [pc, #104]	; (8001214 <disarm+0xb8>)
 80011ac:	f006 ff28 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <disarm+0xbc>)
 80011b8:	f006 ff22 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c2:	4815      	ldr	r0, [pc, #84]	; (8001218 <disarm+0xbc>)
 80011c4:	f006 ff1c 	bl	8008000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <disarm+0xbc>)
 80011d0:	f006 ff16 	bl	8008000 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <disarm+0xc0>)
 80011d6:	22ff      	movs	r2, #255	; 0xff
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <disarm+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <disarm+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011e6:	f7ff fbd7 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <disarm+0xc4>)
 80011ee:	461a      	mov	r2, r3
 80011f0:	460b      	mov	r3, r1
 80011f2:	cb03      	ldmia	r3!, {r0, r1}
 80011f4:	6010      	str	r0, [r2, #0]
 80011f6:	6051      	str	r1, [r2, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	7213      	strb	r3, [r2, #8]
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	58020000 	.word	0x58020000
 800120c:	58020400 	.word	0x58020400
 8001210:	58021400 	.word	0x58021400
 8001214:	58021800 	.word	0x58021800
 8001218:	58021000 	.word	0x58021000
 800121c:	24000b50 	.word	0x24000b50
 8001220:	08018384 	.word	0x08018384

08001224 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b0d1      	sub	sp, #324	; 0x144
 8001228:	af00      	add	r7, sp, #0
 800122a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800122e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001232:	6018      	str	r0, [r3, #0]
 8001234:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001238:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800123c:	6019      	str	r1, [r3, #0]
  int packet_length = LoRA_parsePacket();
 800123e:	f7ff fef0 	bl	8001022 <LoRA_parsePacket>
 8001242:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001246:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800124a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001254:	429a      	cmp	r2, r3
 8001256:	dc01      	bgt.n	800125c <recv_packet+0x38>
  {
    return 0;
 8001258:	2300      	movs	r3, #0
 800125a:	e043      	b.n	80012e4 <recv_packet+0xc0>
  }
  if(packet_length){
 800125c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001260:	2b00      	cmp	r3, #0
 8001262:	d03e      	beq.n	80012e2 <recv_packet+0xbe>
    for(int i = 0; i < packet_length; i++){
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800126a:	e011      	b.n	8001290 <recv_packet+0x6c>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800126c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001270:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001274:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	18d4      	adds	r4, r2, r3
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fd43 	bl	8000d08 <LoRA_Read_Register>
 8001282:	4603      	mov	r3, r0
 8001284:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8001286:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800128a:	3301      	adds	r3, #1
 800128c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001290:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001294:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001298:	429a      	cmp	r2, r3
 800129a:	dbe7      	blt.n	800126c <recv_packet+0x48>
    }
    LoRA_data[packet_length] = '\0';
 800129c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012a0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012a4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]

    char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
 80012b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012b8:	f107 000c 	add.w	r0, r7, #12
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	490c      	ldr	r1, [pc, #48]	; (80012f0 <recv_packet+0xcc>)
 80012c0:	f015 fee6 	bl	8017090 <siprintf>
    CDC_Transmit_HS(rec, strlen(rec));
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f82b 	bl	8000324 <strlen>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f015 fa86 	bl	80167e8 <CDC_Transmit_HS>
    return packet_length;
 80012dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012e0:	e000      	b.n	80012e4 <recv_packet+0xc0>
  }
  else{
    return 0;
 80012e2:	2300      	movs	r3, #0
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08018398 	.word	0x08018398

080012f4 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80012f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012f8:	b087      	sub	sp, #28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	466b      	mov	r3, sp
 8001300:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff f80e 	bl	8000324 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	b29b      	uxth	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 8001310:	8a79      	ldrh	r1, [r7, #18]
 8001312:	460b      	mov	r3, r1
 8001314:	3b01      	subs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	b28b      	uxth	r3, r1
 800131a:	2200      	movs	r2, #0
 800131c:	4698      	mov	r8, r3
 800131e:	4691      	mov	r9, r2
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800132c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001330:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001334:	b28b      	uxth	r3, r1
 8001336:	2200      	movs	r2, #0
 8001338:	461c      	mov	r4, r3
 800133a:	4615      	mov	r5, r2
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	00eb      	lsls	r3, r5, #3
 8001346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800134a:	00e2      	lsls	r2, r4, #3
 800134c:	460b      	mov	r3, r1
 800134e:	3307      	adds	r3, #7
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	ebad 0d03 	sub.w	sp, sp, r3
 8001358:	466b      	mov	r3, sp
 800135a:	3300      	adds	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 800135e:	f002 fb91 	bl	8003a84 <HAL_GetTick>
 8001362:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fe9d 	bl	80010a4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 800136a:	8a7b      	ldrh	r3, [r7, #18]
 800136c:	4619      	mov	r1, r3
 800136e:	68b8      	ldr	r0, [r7, #8]
 8001370:	f7ff ff58 	bl	8001224 <recv_packet>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	68b8      	ldr	r0, [r7, #8]
 800137e:	f7fe ffc7 	bl	8000310 <strcmp>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d011      	beq.n	80013ac <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fe8b 	bl	80010a4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 800138e:	f002 fb79 	bl	8003a84 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139c:	d9e5      	bls.n	800136a <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe80 	bl	80010a4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 80013a4:	f002 fb6e 	bl	8003a84 <HAL_GetTick>
 80013a8:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80013aa:	e7de      	b.n	800136a <reliable_send_packet+0x76>
				break;
 80013ac:	bf00      	nop
 80013ae:	46b5      	mov	sp, r6
		}
	}
}
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080013bc <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <usbReceiveHandle+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
	if(usbBytesReady > 0){
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <usbReceiveHandle+0x40>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00f      	beq.n	80013f2 <usbReceiveHandle+0x36>
		if(usbBytesReady > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, usbBytesReady);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <usbReceiveHandle+0x40>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4909      	ldr	r1, [pc, #36]	; (8001400 <usbReceiveHandle+0x44>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f015 fee2 	bl	80171a4 <memcpy>
		output[usbBytesReady] = '\0';
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <usbReceiveHandle+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <usbReceiveHandle+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
	}
	return temp;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2400026c 	.word	0x2400026c
 8001400:	2400016c 	.word	0x2400016c
 8001404:	00000000 	.word	0x00000000

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001410:	4bd7      	ldr	r3, [pc, #860]	; (8001770 <main+0x368>)
 8001412:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 8001416:	461d      	mov	r5, r3
 8001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001420:	c403      	stmia	r4!, {r0, r1}
 8001422:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f002 faa8 	bl	8003978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001428:	f000 fb2e 	bl	8001a88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800142c:	f000 fba4 	bl	8001b78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f001 f92c 	bl	800268c <MX_GPIO_Init>
  MX_DMA_Init();
 8001434:	f001 f8ca 	bl	80025cc <MX_DMA_Init>
  MX_SPI3_Init();
 8001438:	f000 fe24 	bl	8002084 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800143c:	f000 fcb4 	bl	8001da8 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001440:	f001 f878 	bl	8002534 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001444:	f000 fbca 	bl	8001bdc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001448:	f000 ff2e 	bl	80022a8 <MX_TIM4_Init>
  MX_ADC3_Init();
 800144c:	f000 fc3e 	bl	8001ccc <MX_ADC3_Init>
  MX_SPI2_Init();
 8001450:	f000 fdc2 	bl	8001fd8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001454:	f000 fd0c 	bl	8001e70 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001458:	f000 fe6a 	bl	8002130 <MX_TIM2_Init>
  MX_TIM5_Init();
 800145c:	f000 ffa0 	bl	80023a0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001460:	f000 febe 	bl	80021e0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001464:	f015 f8ea 	bl	801663c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001468:	f000 fd60 	bl	8001f2c <MX_SPI1_Init>
  MX_UART4_Init();
 800146c:	f001 f816 	bl	800249c <MX_UART4_Init>
  MX_FATFS_Init();
 8001470:	f012 fe78 	bl	8014164 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001474:	f000 fd3c 	bl	8001ef0 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001478:	f000 ffec 	bl	8002454 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 800147c:	2332      	movs	r3, #50	; 0x32
 800147e:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 8001482:	a3b9      	add	r3, pc, #740	; (adr r3, 8001768 <main+0x360>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 800148c:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 800149c:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4bb3      	ldr	r3, [pc, #716]	; (8001774 <main+0x36c>)
 80014a6:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 80014aa:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b6:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80014be:	213c      	movs	r1, #60	; 0x3c
 80014c0:	2010      	movs	r0, #16
 80014c2:	f7ff f95f 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80014c6:	2130      	movs	r1, #48	; 0x30
 80014c8:	2011      	movs	r0, #17
 80014ca:	f7ff f95b 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80014ce:	2104      	movs	r1, #4
 80014d0:	2013      	movs	r0, #19
 80014d2:	f7ff f957 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 80014d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014da:	f002 fadf 	bl	8003a9c <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80014de:	21bf      	movs	r1, #191	; 0xbf
 80014e0:	201c      	movs	r0, #28
 80014e2:	f7ff f8fb 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f002 fad8 	bl	8003a9c <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80014ec:	2158      	movs	r1, #88	; 0x58
 80014ee:	201b      	movs	r0, #27
 80014f0:	f7ff f8f4 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80014f4:	21d8      	movs	r1, #216	; 0xd8
 80014f6:	201b      	movs	r0, #27
 80014f8:	f7ff f8f0 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8001504:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001514:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800151e:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001528:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001530:	e02e      	b.n	8001590 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 8001532:	f7ff f94f 	bl	80007d4 <LG2_Get_Gyro_X>
 8001536:	eeb0 7a40 	vmov.f32	s14, s0
 800153a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001546:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800154a:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 800154e:	f7ff f971 	bl	8000834 <LG2_Get_Gyro_Y>
 8001552:	eeb0 7a40 	vmov.f32	s14, s0
 8001556:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001562:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001566:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 800156a:	f7ff f995 	bl	8000898 <LG2_Get_Gyro_Z>
 800156e:	eeb0 7a40 	vmov.f32	s14, s0
 8001572:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800157e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001582:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001586:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001590:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001598:	dbcb      	blt.n	8001532 <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800159a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001778 <main+0x370>
 80015a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015aa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80015ae:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80015b2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001778 <main+0x370>
 80015be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015c6:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80015ca:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001778 <main+0x370>
 80015d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015da:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015de:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2101      	movs	r1, #1
 80015e6:	4865      	ldr	r0, [pc, #404]	; (800177c <main+0x374>)
 80015e8:	f006 fd0a 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015ec:	20c8      	movs	r0, #200	; 0xc8
 80015ee:	f002 fa55 	bl	8003a9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	4861      	ldr	r0, [pc, #388]	; (800177c <main+0x374>)
 80015f8:	f006 fd02 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015fc:	20c8      	movs	r0, #200	; 0xc8
 80015fe:	f002 fa4d 	bl	8003a9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001602:	2201      	movs	r2, #1
 8001604:	2101      	movs	r1, #1
 8001606:	485d      	ldr	r0, [pc, #372]	; (800177c <main+0x374>)
 8001608:	f006 fcfa 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800160c:	20c8      	movs	r0, #200	; 0xc8
 800160e:	f002 fa45 	bl	8003a9c <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	2104      	movs	r1, #4
 8001616:	485a      	ldr	r0, [pc, #360]	; (8001780 <main+0x378>)
 8001618:	f006 fcf2 	bl	8008000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	2108      	movs	r1, #8
 8001620:	4857      	ldr	r0, [pc, #348]	; (8001780 <main+0x378>)
 8001622:	f006 fced 	bl	8008000 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001626:	2100      	movs	r1, #0
 8001628:	4856      	ldr	r0, [pc, #344]	; (8001784 <main+0x37c>)
 800162a:	f00d ffa9 	bl	800f580 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800162e:	2104      	movs	r1, #4
 8001630:	4854      	ldr	r0, [pc, #336]	; (8001784 <main+0x37c>)
 8001632:	f00d ffa5 	bl	800f580 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001636:	2108      	movs	r1, #8
 8001638:	4852      	ldr	r0, [pc, #328]	; (8001784 <main+0x37c>)
 800163a:	f00d ffa1 	bl	800f580 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800163e:	210c      	movs	r1, #12
 8001640:	4850      	ldr	r0, [pc, #320]	; (8001784 <main+0x37c>)
 8001642:	f00d ff9d 	bl	800f580 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001646:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001788 <main+0x380>
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff f95c 	bl	8000908 <setServo>
    setServo(2, 180);
 8001650:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800178c <main+0x384>
 8001654:	2002      	movs	r0, #2
 8001656:	f7ff f957 	bl	8000908 <setServo>
    setServo(3, 0);
 800165a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001790 <main+0x388>
 800165e:	2003      	movs	r0, #3
 8001660:	f7ff f952 	bl	8000908 <setServo>
    setServo(4, 45);
 8001664:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001794 <main+0x38c>
 8001668:	2004      	movs	r0, #4
 800166a:	f7ff f94d 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 800166e:	484a      	ldr	r0, [pc, #296]	; (8001798 <main+0x390>)
 8001670:	f7ff fc5c 	bl	8000f2c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 8001686:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800168a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 8001698:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800169c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	3304      	adds	r3, #4
 80016a6:	22f6      	movs	r2, #246	; 0xf6
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f015 fd3e 	bl	801712c <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 80016b6:	2332      	movs	r3, #50	; 0x32
 80016b8:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80016c2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016c6:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <main+0x394>)
 80016cc:	4634      	mov	r4, r6
 80016ce:	461d      	mov	r5, r3
 80016d0:	6828      	ldr	r0, [r5, #0]
 80016d2:	6869      	ldr	r1, [r5, #4]
 80016d4:	68aa      	ldr	r2, [r5, #8]
 80016d6:	68eb      	ldr	r3, [r5, #12]
 80016d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016da:	7c2b      	ldrb	r3, [r5, #16]
 80016dc:	7023      	strb	r3, [r4, #0]
 80016de:	f106 0311 	add.w	r3, r6, #17
 80016e2:	2221      	movs	r2, #33	; 0x21
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f015 fd20 	bl	801712c <memset>
  uint32_t previousTime = HAL_GetTick();
 80016ec:	f002 f9ca 	bl	8003a84 <HAL_GetTick>
 80016f0:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 80016f4:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd2f 	bl	800115c <disarm>
  LoRA_begin(868000000);
 80016fe:	4826      	ldr	r0, [pc, #152]	; (8001798 <main+0x390>)
 8001700:	f7ff fc14 	bl	8000f2c <LoRA_begin>
		  CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
	  }
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001704:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001708:	4925      	ldr	r1, [pc, #148]	; (80017a0 <main+0x398>)
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fe00 	bl	8000310 <strcmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 809c 	bne.w	8001850 <main+0x448>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001718:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800171c:	21fa      	movs	r1, #250	; 0xfa
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd80 	bl	8001224 <recv_packet>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8080 	beq.w	800182c <main+0x424>
      {
    	  have_recieved_anything = 1;
 800172c:	2301      	movs	r3, #1
 800172e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 8001732:	f002 f9a7 	bl	8003a84 <HAL_GetTick>
 8001736:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 800173a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800173e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001742:	4918      	ldr	r1, [pc, #96]	; (80017a4 <main+0x39c>)
 8001744:	4618      	mov	r0, r3
 8001746:	f015 fcc3 	bl	80170d0 <siscanf>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d12b      	bne.n	80017a8 <main+0x3a0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001750:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <main+0x394>)
 8001756:	461c      	mov	r4, r3
 8001758:	4615      	mov	r5, r2
 800175a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175e:	682b      	ldr	r3, [r5, #0]
 8001760:	7023      	strb	r3, [r4, #0]
 8001762:	e166      	b.n	8001a32 <main+0x62a>
 8001764:	f3af 8000 	nop.w
 8001768:	d2f1a9fc 	.word	0xd2f1a9fc
 800176c:	3f50624d 	.word	0x3f50624d
 8001770:	08018454 	.word	0x08018454
 8001774:	3ff00000 	.word	0x3ff00000
 8001778:	43fa0000 	.word	0x43fa0000
 800177c:	58020c00 	.word	0x58020c00
 8001780:	58021800 	.word	0x58021800
 8001784:	24001168 	.word	0x24001168
 8001788:	42b40000 	.word	0x42b40000
 800178c:	43340000 	.word	0x43340000
 8001790:	00000000 	.word	0x00000000
 8001794:	42340000 	.word	0x42340000
 8001798:	33bca100 	.word	0x33bca100
 800179c:	080183fc 	.word	0x080183fc
 80017a0:	080183e0 	.word	0x080183e0
 80017a4:	080183f4 	.word	0x080183f4
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 80017a8:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80017ac:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017b0:	49ab      	ldr	r1, [pc, #684]	; (8001a60 <main+0x658>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f015 fc8c 	bl	80170d0 <siscanf>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10b      	bne.n	80017d6 <main+0x3ce>
        {
          strcpy(communication_state,"SENDING STREAM");
 80017be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017c2:	4aa8      	ldr	r2, [pc, #672]	; (8001a64 <main+0x65c>)
 80017c4:	461c      	mov	r4, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ca:	c407      	stmia	r4!, {r0, r1, r2}
 80017cc:	8023      	strh	r3, [r4, #0]
 80017ce:	3402      	adds	r4, #2
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	7023      	strb	r3, [r4, #0]
 80017d4:	e12d      	b.n	8001a32 <main+0x62a>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 80017d6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80017da:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd95 	bl	8000310 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <main+0x3f0>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 80017ec:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc57 	bl	80010a4 <LoRA_sendPacket>
 80017f6:	e11c      	b.n	8001a32 <main+0x62a>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 80017f8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80017fc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f015 fcc6 	bl	8017194 <strcpy>
          LoRA_sendPacket(recieved_packet);
 8001808:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc49 	bl	80010a4 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001812:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd84 	bl	8000324 <strlen>
 800181c:	4602      	mov	r2, r0
 800181e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f014 ffdf 	bl	80167e8 <CDC_Transmit_HS>
 800182a:	e102      	b.n	8001a32 <main+0x62a>
        }
      } else if (HAL_GetTick()-previousTime > 1000)
 800182c:	f002 f92a 	bl	8003a84 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800183c:	f240 80f9 	bls.w	8001a32 <main+0x62a>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 8001840:	f002 f920 	bl	8003a84 <HAL_GetTick>
 8001844:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        LoRA_sendPacket("$");
 8001848:	4887      	ldr	r0, [pc, #540]	; (8001a68 <main+0x660>)
 800184a:	f7ff fc2b 	bl	80010a4 <LoRA_sendPacket>
 800184e:	e0f0      	b.n	8001a32 <main+0x62a>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001850:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001854:	4985      	ldr	r1, [pc, #532]	; (8001a6c <main+0x664>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fd5a 	bl	8000310 <strcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d14a      	bne.n	80018f8 <main+0x4f0>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001862:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001866:	21fa      	movs	r1, #250	; 0xfa
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fcdb 	bl	8001224 <recv_packet>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d025      	beq.n	80018c0 <main+0x4b8>
      {
        previousTime = HAL_GetTick();
 8001874:	f002 f906 	bl	8003a84 <HAL_GetTick>
 8001878:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 800187c:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001880:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001884:	497a      	ldr	r1, [pc, #488]	; (8001a70 <main+0x668>)
 8001886:	4618      	mov	r0, r3
 8001888:	f015 fc22 	bl	80170d0 <siscanf>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d109      	bne.n	80018a6 <main+0x49e>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001892:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001896:	4a77      	ldr	r2, [pc, #476]	; (8001a74 <main+0x66c>)
 8001898:	461c      	mov	r4, r3
 800189a:	4615      	mov	r5, r2
 800189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	7023      	strb	r3, [r4, #0]
 80018a4:	e0c5      	b.n	8001a32 <main+0x62a>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80018a6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fd3a 	bl	8000324 <strlen>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f014 ff95 	bl	80167e8 <CDC_Transmit_HS>
 80018be:	e0b8      	b.n	8001a32 <main+0x62a>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 80018c0:	f002 f8e0 	bl	8003a84 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d0:	f240 80af 	bls.w	8001a32 <main+0x62a>
      {
        previousTime = HAL_GetTick();
 80018d4:	f002 f8d6 	bl	8003a84 <HAL_GetTick>
 80018d8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 80018dc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018e0:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80018e4:	495e      	ldr	r1, [pc, #376]	; (8001a60 <main+0x658>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f015 fbd2 	bl	8017090 <siprintf>
        LoRA_sendPacket(sendMessage);
 80018ec:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fbd7 	bl	80010a4 <LoRA_sendPacket>
 80018f6:	e09c      	b.n	8001a32 <main+0x62a>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 80018f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018fc:	4959      	ldr	r1, [pc, #356]	; (8001a64 <main+0x65c>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd06 	bl	8000310 <strcmp>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d126      	bne.n	8001958 <main+0x550>
    {
      if(max_packet_count == 0)
 800190a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800190e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d113      	bne.n	8001940 <main+0x538>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001918:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800191c:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <main+0x670>)
 800191e:	461c      	mov	r4, r3
 8001920:	4615      	mov	r5, r2
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	8022      	strh	r2, [r4, #0]
 800192c:	3402      	adds	r4, #2
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001938:	484b      	ldr	r0, [pc, #300]	; (8001a68 <main+0x660>)
 800193a:	f7ff fbb3 	bl	80010a4 <LoRA_sendPacket>
 800193e:	e078      	b.n	8001a32 <main+0x62a>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001940:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001944:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001950:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e06c      	b.n	8001a32 <main+0x62a>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001958:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800195c:	4945      	ldr	r1, [pc, #276]	; (8001a74 <main+0x66c>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fcd6 	bl	8000310 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d163      	bne.n	8001a32 <main+0x62a>
    {
	  	 CDC_Transmit_HS(state, strlen(state));
 800196a:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fcd8 	bl	8000324 <strlen>
 8001974:	4602      	mov	r2, r0
 8001976:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f014 ff33 	bl	80167e8 <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	usbReceiveHandle(input);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fd19 	bl	80013bc <usbReceiveHandle>

    	while(!usbReceiveHandle(input))
 800198a:	bf00      	nop
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd14 	bl	80013bc <usbReceiveHandle>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f8      	beq.n	800198c <main+0x584>
    	{}

      reliable_send_packet(input);
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fca9 	bl	80012f4 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "Debug: %s\n", input);
 80019a2:	1d3a      	adds	r2, r7, #4
 80019a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019a8:	4934      	ldr	r1, [pc, #208]	; (8001a7c <main+0x674>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f015 fb70 	bl	8017090 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 80019b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fcb5 	bl	8000324 <strlen>
 80019ba:	4602      	mov	r2, r0
 80019bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f014 ff10 	bl	80167e8 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	492d      	ldr	r1, [pc, #180]	; (8001a80 <main+0x678>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fc9f 	bl	8000310 <strcmp>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d116      	bne.n	8001a06 <main+0x5fe>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 80019d8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <main+0x664>)
 80019de:	461c      	mov	r4, r3
 80019e0:	4615      	mov	r5, r2
 80019e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 80019ea:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019ee:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80019f2:	491b      	ldr	r1, [pc, #108]	; (8001a60 <main+0x658>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f015 fb4b 	bl	8017090 <siprintf>
        LoRA_sendPacket(sendMessage);
 80019fa:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fb50 	bl	80010a4 <LoRA_sendPacket>
 8001a04:	e015      	b.n	8001a32 <main+0x62a>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001a06:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <main+0x670>)
 8001a0c:	461c      	mov	r4, r3
 8001a0e:	4615      	mov	r5, r2
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	8022      	strh	r2, [r4, #0]
 8001a1a:	3402      	adds	r4, #2
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 8001a26:	2064      	movs	r0, #100	; 0x64
 8001a28:	f002 f838 	bl	8003a9c <HAL_Delay>
        LoRA_sendPacket("$");
 8001a2c:	480e      	ldr	r0, [pc, #56]	; (8001a68 <main+0x660>)
 8001a2e:	f7ff fb39 	bl	80010a4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001a32:	f002 f827 	bl	8003a84 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a46:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a84 <main+0x67c>
 8001a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001a52:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001a56:	f002 f815 	bl	8003a84 <HAL_GetTick>
 8001a5a:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001a5e:	e651      	b.n	8001704 <main+0x2fc>
 8001a60:	08018410 	.word	0x08018410
 8001a64:	08018418 	.word	0x08018418
 8001a68:	08018428 	.word	0x08018428
 8001a6c:	0801842c 	.word	0x0801842c
 8001a70:	080183f4 	.word	0x080183f4
 8001a74:	080183fc 	.word	0x080183fc
 8001a78:	080183e0 	.word	0x080183e0
 8001a7c:	08018440 	.word	0x08018440
 8001a80:	0801844c 	.word	0x0801844c
 8001a84:	447a0000 	.word	0x447a0000

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09c      	sub	sp, #112	; 0x70
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	224c      	movs	r2, #76	; 0x4c
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f015 fb48 	bl	801712c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f015 fb42 	bl	801712c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f007 febd 	bl	8009828 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <SystemClock_Config+0xec>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <SystemClock_Config+0xec>)
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <SystemClock_Config+0xec>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ace:	bf00      	nop
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <SystemClock_Config+0xec>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001adc:	d1f8      	bne.n	8001ad0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001ade:	2322      	movs	r3, #34	; 0x22
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001aea:	2301      	movs	r3, #1
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001af6:	2304      	movs	r3, #4
 8001af8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001afa:	230c      	movs	r3, #12
 8001afc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001b02:	230c      	movs	r3, #12
 8001b04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f007 fece 	bl	80098bc <HAL_RCC_OscConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b26:	f000 ff1b 	bl	8002960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2a:	233f      	movs	r3, #63	; 0x3f
 8001b2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b36:	2308      	movs	r3, #8
 8001b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b3a:	2340      	movs	r3, #64	; 0x40
 8001b3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b3e:	2340      	movs	r3, #64	; 0x40
 8001b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b48:	2340      	movs	r3, #64	; 0x40
 8001b4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f008 fa8d 	bl	800a070 <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b5c:	f000 ff00 	bl	8002960 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b64:	2100      	movs	r1, #0
 8001b66:	2000      	movs	r0, #0
 8001b68:	f008 fc38 	bl	800a3dc <HAL_RCC_MCOConfig>
}
 8001b6c:	bf00      	nop
 8001b6e:	3770      	adds	r7, #112	; 0x70
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58024800 	.word	0x58024800

08001b78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ae      	sub	sp, #184	; 0xb8
 8001b7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7e:	463b      	mov	r3, r7
 8001b80:	22b8      	movs	r2, #184	; 0xb8
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f015 fad1 	bl	801712c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b8a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b96:	2304      	movs	r3, #4
 8001b98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001baa:	23c0      	movs	r3, #192	; 0xc0
 8001bac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f008 fe49 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001bd0:	f000 fec6 	bl	8002960 <Error_Handler>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	37b8      	adds	r7, #184	; 0xb8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2224      	movs	r2, #36	; 0x24
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f015 fa99 	bl	801712c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001bfc:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <MX_ADC1_Init+0xe8>)
 8001bfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c02:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c5a:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c5c:	f002 f99e 	bl	8003f9c <HAL_ADC_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c66:	f000 fe7b 	bl	8002960 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	4812      	ldr	r0, [pc, #72]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001c76:	f003 f9d9 	bl	800502c <HAL_ADCEx_MultiModeConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c80:	f000 fe6e 	bl	8002960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_ADC1_Init+0xec>)
 8001c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c88:	2306      	movs	r3, #6
 8001c8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c90:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c96:	2304      	movs	r3, #4
 8001c98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_ADC1_Init+0xe4>)
 8001caa:	f002 fb7f 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001cb4:	f000 fe54 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3730      	adds	r7, #48	; 0x30
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	24000bf8 	.word	0x24000bf8
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	2a000400 	.word	0x2a000400

08001ccc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2224      	movs	r2, #36	; 0x24
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f015 fa27 	bl	801712c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001ce0:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <MX_ADC3_Init+0xd4>)
 8001ce2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001ce6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001cee:	2208      	movs	r2, #8
 8001cf0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d00:	2204      	movs	r2, #4
 8001d02:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d52:	4812      	ldr	r0, [pc, #72]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d54:	f002 f922 	bl	8003f9c <HAL_ADC_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d5e:	f000 fdff 	bl	8002960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_ADC3_Init+0xd8>)
 8001d64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d66:	2306      	movs	r3, #6
 8001d68:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d6e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d74:	2304      	movs	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_ADC3_Init+0xd0>)
 8001d86:	f002 fb11 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d90:	f000 fde6 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	24000c68 	.word	0x24000c68
 8001da0:	58026000 	.word	0x58026000
 8001da4:	04300002 	.word	0x04300002

08001da8 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dae:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <MX_FDCAN3_Init+0xc4>)
 8001db0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001dca:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dde:	2202      	movs	r2, #2
 8001de0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001de4:	2202      	movs	r2, #2
 8001de6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e32:	2204      	movs	r2, #4
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e50:	2204      	movs	r2, #4
 8001e52:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_FDCAN3_Init+0xc0>)
 8001e56:	f005 fbaf 	bl	80075b8 <HAL_FDCAN_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e60:	f000 fd7e 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24000dc8 	.word	0x24000dc8
 8001e6c:	4000d400 	.word	0x4000d400

08001e70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e76:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <MX_I2C2_Init+0x78>)
 8001e78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <MX_I2C2_Init+0x7c>)
 8001e7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eaa:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001eac:	f006 f8c2 	bl	8008034 <HAL_I2C_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001eb6:	f000 fd53 	bl	8002960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001ebe:	f006 f963 	bl	8008188 <HAL_I2CEx_ConfigAnalogFilter>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ec8:	f000 fd4a 	bl	8002960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_I2C2_Init+0x74>)
 8001ed0:	f006 f9a5 	bl	800821e <HAL_I2CEx_ConfigDigitalFilter>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001eda:	f000 fd41 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	24000e68 	.word	0x24000e68
 8001ee8:	40005800 	.word	0x40005800
 8001eec:	20303e5d 	.word	0x20303e5d

08001ef0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_SDMMC2_SD_Init+0x34>)
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <MX_SDMMC2_SD_Init+0x38>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_SDMMC2_SD_Init+0x34>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_SDMMC2_SD_Init+0x34>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_SDMMC2_SD_Init+0x34>)
 8001f08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0c:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <MX_SDMMC2_SD_Init+0x34>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <MX_SDMMC2_SD_Init+0x34>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	24000ebc 	.word	0x24000ebc
 8001f28:	48022400 	.word	0x48022400

08001f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f32:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <MX_SPI1_Init+0xa8>)
 8001f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f46:	2207      	movs	r2, #7
 8001f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f60:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <MX_SPI1_Init+0xa4>)
 8001fbe:	f00c fc97 	bl	800e8f0 <HAL_SPI_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001fc8:	f000 fcca 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	24000f38 	.word	0x24000f38
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <MX_SPI2_Init+0xa4>)
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <MX_SPI2_Init+0xa8>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <MX_SPI2_Init+0xa4>)
 8001fe4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fe8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <MX_SPI2_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <MX_SPI2_Init+0xa4>)
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <MX_SPI2_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <MX_SPI2_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <MX_SPI2_Init+0xa4>)
 8002004:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002008:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <MX_SPI2_Init+0xa4>)
 800200c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002010:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_SPI2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_SPI2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <MX_SPI2_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_SPI2_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_SPI2_Init+0xa4>)
 800202c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_SPI2_Init+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_SPI2_Init+0xa4>)
 800203a:	2200      	movs	r2, #0
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_SPI2_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <MX_SPI2_Init+0xa4>)
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_SPI2_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <MX_SPI2_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_SPI2_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <MX_SPI2_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_SPI2_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_SPI2_Init+0xa4>)
 800206a:	f00c fc41 	bl	800e8f0 <HAL_SPI_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002074:	f000 fc74 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	24000fc0 	.word	0x24000fc0
 8002080:	40003800 	.word	0x40003800

08002084 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <MX_SPI3_Init+0xa4>)
 800208a:	4a28      	ldr	r2, [pc, #160]	; (800212c <MX_SPI3_Init+0xa8>)
 800208c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <MX_SPI3_Init+0xa4>)
 8002090:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002094:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <MX_SPI3_Init+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <MX_SPI3_Init+0xa4>)
 800209e:	2207      	movs	r2, #7
 80020a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020b8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <MX_SPI3_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_SPI3_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <MX_SPI3_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_SPI3_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <MX_SPI3_Init+0xa4>)
 8002116:	f00c fbeb 	bl	800e8f0 <HAL_SPI_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002120:	f000 fc1e 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	24001048 	.word	0x24001048
 800212c:	40003c00 	.word	0x40003c00

08002130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002142:	463b      	mov	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
 8002150:	615a      	str	r2, [r3, #20]
 8002152:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_TIM2_Init+0xac>)
 8002156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800215a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <MX_TIM2_Init+0xac>)
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <MX_TIM2_Init+0xac>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <MX_TIM2_Init+0xac>)
 800216a:	225a      	movs	r2, #90	; 0x5a
 800216c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_TIM2_Init+0xac>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <MX_TIM2_Init+0xac>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800217a:	4818      	ldr	r0, [pc, #96]	; (80021dc <MX_TIM2_Init+0xac>)
 800217c:	f00d f9a8 	bl	800f4d0 <HAL_TIM_PWM_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002186:	f000 fbeb 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4810      	ldr	r0, [pc, #64]	; (80021dc <MX_TIM2_Init+0xac>)
 800219a:	f00e fc2f 	bl	80109fc <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80021a4:	f000 fbdc 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a8:	2360      	movs	r3, #96	; 0x60
 80021aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	2208      	movs	r2, #8
 80021bc:	4619      	mov	r1, r3
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM2_Init+0xac>)
 80021c0:	f00d fe4e 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021ca:	f000 fbc9 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM2_Init+0xac>)
 80021d0:	f001 f8e4 	bl	800339c <HAL_TIM_MspPostInit>

}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	240010d0 	.word	0x240010d0

080021e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
 8002200:	615a      	str	r2, [r3, #20]
 8002202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002206:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <MX_TIM3_Init+0xc4>)
 8002208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <MX_TIM3_Init+0xc0>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002218:	225a      	movs	r2, #90	; 0x5a
 800221a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <MX_TIM3_Init+0xc0>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002228:	481d      	ldr	r0, [pc, #116]	; (80022a0 <MX_TIM3_Init+0xc0>)
 800222a:	f00d f951 	bl	800f4d0 <HAL_TIM_PWM_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002234:	f000 fb94 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4816      	ldr	r0, [pc, #88]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002248:	f00e fbd8 	bl	80109fc <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002252:	f000 fb85 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002256:	2360      	movs	r3, #96	; 0x60
 8002258:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <MX_TIM3_Init+0xc0>)
 800226e:	f00d fdf7 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002278:	f000 fb72 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800227c:	463b      	mov	r3, r7
 800227e:	2204      	movs	r2, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4807      	ldr	r0, [pc, #28]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002284:	f00d fdec 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800228e:	f000 fb67 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002292:	4803      	ldr	r0, [pc, #12]	; (80022a0 <MX_TIM3_Init+0xc0>)
 8002294:	f001 f882 	bl	800339c <HAL_TIM_MspPostInit>

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2400111c 	.word	0x2400111c
 80022a4:	40000400 	.word	0x40000400

080022a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022ce:	4a33      	ldr	r2, [pc, #204]	; (800239c <MX_TIM4_Init+0xf4>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022d4:	221c      	movs	r2, #28
 80022d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80022e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e6:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022f2:	4829      	ldr	r0, [pc, #164]	; (8002398 <MX_TIM4_Init+0xf0>)
 80022f4:	f00d f8ec 	bl	800f4d0 <HAL_TIM_PWM_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022fe:	f000 fb2f 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	4821      	ldr	r0, [pc, #132]	; (8002398 <MX_TIM4_Init+0xf0>)
 8002312:	f00e fb73 	bl	80109fc <HAL_TIMEx_MasterConfigSynchronization>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800231c:	f000 fb20 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002320:	2360      	movs	r3, #96	; 0x60
 8002322:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	2200      	movs	r2, #0
 8002334:	4619      	mov	r1, r3
 8002336:	4818      	ldr	r0, [pc, #96]	; (8002398 <MX_TIM4_Init+0xf0>)
 8002338:	f00d fd92 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002342:	f000 fb0d 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	2204      	movs	r2, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4812      	ldr	r0, [pc, #72]	; (8002398 <MX_TIM4_Init+0xf0>)
 800234e:	f00d fd87 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002358:	f000 fb02 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	2208      	movs	r2, #8
 8002360:	4619      	mov	r1, r3
 8002362:	480d      	ldr	r0, [pc, #52]	; (8002398 <MX_TIM4_Init+0xf0>)
 8002364:	f00d fd7c 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800236e:	f000 faf7 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002372:	463b      	mov	r3, r7
 8002374:	220c      	movs	r2, #12
 8002376:	4619      	mov	r1, r3
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <MX_TIM4_Init+0xf0>)
 800237a:	f00d fd71 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002384:	f000 faec 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <MX_TIM4_Init+0xf0>)
 800238a:	f001 f807 	bl	800339c <HAL_TIM_MspPostInit>

}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	24001168 	.word	0x24001168
 800239c:	40000800 	.word	0x40000800

080023a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b2:	463b      	mov	r3, r7
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <MX_TIM5_Init+0xac>)
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <MX_TIM5_Init+0xb0>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <MX_TIM5_Init+0xac>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	; (800244c <MX_TIM5_Init+0xac>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_TIM5_Init+0xac>)
 80023d8:	225a      	movs	r2, #90	; 0x5a
 80023da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <MX_TIM5_Init+0xac>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_TIM5_Init+0xac>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023e8:	4818      	ldr	r0, [pc, #96]	; (800244c <MX_TIM5_Init+0xac>)
 80023ea:	f00d f871 	bl	800f4d0 <HAL_TIM_PWM_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023f4:	f000 fab4 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	4811      	ldr	r0, [pc, #68]	; (800244c <MX_TIM5_Init+0xac>)
 8002408:	f00e faf8 	bl	80109fc <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002412:	f000 faa5 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002416:	2360      	movs	r3, #96	; 0x60
 8002418:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002426:	463b      	mov	r3, r7
 8002428:	220c      	movs	r2, #12
 800242a:	4619      	mov	r1, r3
 800242c:	4807      	ldr	r0, [pc, #28]	; (800244c <MX_TIM5_Init+0xac>)
 800242e:	f00d fd17 	bl	800fe60 <HAL_TIM_PWM_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002438:	f000 fa92 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <MX_TIM5_Init+0xac>)
 800243e:	f000 ffad 	bl	800339c <HAL_TIM_MspPostInit>

}
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	240011b4 	.word	0x240011b4
 8002450:	40000c00 	.word	0x40000c00

08002454 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_TIM13_Init+0x40>)
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <MX_TIM13_Init+0x44>)
 800245c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <MX_TIM13_Init+0x40>)
 8002460:	225f      	movs	r2, #95	; 0x5f
 8002462:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_TIM13_Init+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <MX_TIM13_Init+0x40>)
 800246c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002470:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_TIM13_Init+0x40>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_TIM13_Init+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_TIM13_Init+0x40>)
 8002480:	f00c ffcf 	bl	800f422 <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800248a:	f000 fa69 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	24001200 	.word	0x24001200
 8002498:	40001c00 	.word	0x40001c00

0800249c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <MX_UART4_Init+0x90>)
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <MX_UART4_Init+0x94>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <MX_UART4_Init+0x90>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b1f      	ldr	r3, [pc, #124]	; (800252c <MX_UART4_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MX_UART4_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <MX_UART4_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_UART4_Init+0x90>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <MX_UART4_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_UART4_Init+0x90>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <MX_UART4_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_UART4_Init+0x90>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <MX_UART4_Init+0x90>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024e4:	4811      	ldr	r0, [pc, #68]	; (800252c <MX_UART4_Init+0x90>)
 80024e6:	f00e fb43 	bl	8010b70 <HAL_UART_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80024f0:	f000 fa36 	bl	8002960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f4:	2100      	movs	r1, #0
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <MX_UART4_Init+0x90>)
 80024f8:	f00f fc49 	bl	8011d8e <HAL_UARTEx_SetTxFifoThreshold>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002502:	f000 fa2d 	bl	8002960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002506:	2100      	movs	r1, #0
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <MX_UART4_Init+0x90>)
 800250a:	f00f fc7e 	bl	8011e0a <HAL_UARTEx_SetRxFifoThreshold>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002514:	f000 fa24 	bl	8002960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <MX_UART4_Init+0x90>)
 800251a:	f00f fbff 	bl	8011d1c <HAL_UARTEx_DisableFifoMode>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002524:	f000 fa1c 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	240014a4 	.word	0x240014a4
 8002530:	40004c00 	.word	0x40004c00

08002534 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <MX_USART6_UART_Init+0x94>)
 800253c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800253e:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002544:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002572:	2200      	movs	r2, #0
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002578:	2200      	movs	r2, #0
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800257c:	4811      	ldr	r0, [pc, #68]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 800257e:	f00e faf7 	bl	8010b70 <HAL_UART_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002588:	f000 f9ea 	bl	8002960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800258c:	2100      	movs	r1, #0
 800258e:	480d      	ldr	r0, [pc, #52]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 8002590:	f00f fbfd 	bl	8011d8e <HAL_UARTEx_SetTxFifoThreshold>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800259a:	f000 f9e1 	bl	8002960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800259e:	2100      	movs	r1, #0
 80025a0:	4808      	ldr	r0, [pc, #32]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 80025a2:	f00f fc32 	bl	8011e0a <HAL_UARTEx_SetRxFifoThreshold>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80025ac:	f000 f9d8 	bl	8002960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <MX_USART6_UART_Init+0x90>)
 80025b2:	f00f fbb3 	bl	8011d1c <HAL_UARTEx_DisableFifoMode>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80025bc:	f000 f9d0 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	24001538 	.word	0x24001538
 80025c8:	40011400 	.word	0x40011400

080025cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <MX_DMA_Init+0xbc>)
 80025d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d8:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <MX_DMA_Init+0xbc>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <MX_DMA_Init+0xbc>)
 80025e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <MX_DMA_Init+0xbc>)
 80025f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <MX_DMA_Init+0xbc>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <MX_DMA_Init+0xbc>)
 8002602:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	200b      	movs	r0, #11
 8002614:	f002 fec7 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002618:	200b      	movs	r0, #11
 800261a:	f002 fede 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	200c      	movs	r0, #12
 8002624:	f002 febf 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002628:	200c      	movs	r0, #12
 800262a:	f002 fed6 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	200d      	movs	r0, #13
 8002634:	f002 feb7 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002638:	200d      	movs	r0, #13
 800263a:	f002 fece 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	200e      	movs	r0, #14
 8002644:	f002 feaf 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002648:	200e      	movs	r0, #14
 800264a:	f002 fec6 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	200f      	movs	r0, #15
 8002654:	f002 fea7 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002658:	200f      	movs	r0, #15
 800265a:	f002 febe 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2010      	movs	r0, #16
 8002664:	f002 fe9f 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002668:	2010      	movs	r0, #16
 800266a:	f002 feb6 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	2046      	movs	r0, #70	; 0x46
 8002674:	f002 fe97 	bl	80053a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002678:	2046      	movs	r0, #70	; 0x46
 800267a:	f002 feae 	bl	80053da <HAL_NVIC_EnableIRQ>

}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	58024400 	.word	0x58024400

0800268c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a2:	4ba7      	ldr	r3, [pc, #668]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4aa5      	ldr	r2, [pc, #660]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4ba3      	ldr	r3, [pc, #652]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026c0:	4b9f      	ldr	r3, [pc, #636]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c6:	4a9e      	ldr	r2, [pc, #632]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d0:	4b9b      	ldr	r3, [pc, #620]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026de:	4b98      	ldr	r3, [pc, #608]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e4:	4a96      	ldr	r2, [pc, #600]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ee:	4b94      	ldr	r3, [pc, #592]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	4b90      	ldr	r3, [pc, #576]	; (8002940 <MX_GPIO_Init+0x2b4>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002702:	4a8f      	ldr	r2, [pc, #572]	; (8002940 <MX_GPIO_Init+0x2b4>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270c:	4b8c      	ldr	r3, [pc, #560]	; (8002940 <MX_GPIO_Init+0x2b4>)
 800270e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <MX_GPIO_Init+0x2b4>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	4a87      	ldr	r2, [pc, #540]	; (8002940 <MX_GPIO_Init+0x2b4>)
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <MX_GPIO_Init+0x2b4>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002738:	4b81      	ldr	r3, [pc, #516]	; (8002940 <MX_GPIO_Init+0x2b4>)
 800273a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273e:	4a80      	ldr	r2, [pc, #512]	; (8002940 <MX_GPIO_Init+0x2b4>)
 8002740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002748:	4b7d      	ldr	r3, [pc, #500]	; (8002940 <MX_GPIO_Init+0x2b4>)
 800274a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <MX_GPIO_Init+0x2b4>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275c:	4a78      	ldr	r2, [pc, #480]	; (8002940 <MX_GPIO_Init+0x2b4>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <MX_GPIO_Init+0x2b4>)
 8002768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	f241 5104 	movw	r1, #5380	; 0x1504
 800277a:	4872      	ldr	r0, [pc, #456]	; (8002944 <MX_GPIO_Init+0x2b8>)
 800277c:	f005 fc40 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	f248 0106 	movw	r1, #32774	; 0x8006
 8002786:	4870      	ldr	r0, [pc, #448]	; (8002948 <MX_GPIO_Init+0x2bc>)
 8002788:	f005 fc3a 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	2130      	movs	r1, #48	; 0x30
 8002790:	486e      	ldr	r0, [pc, #440]	; (800294c <MX_GPIO_Init+0x2c0>)
 8002792:	f005 fc35 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	2103      	movs	r1, #3
 800279a:	486d      	ldr	r0, [pc, #436]	; (8002950 <MX_GPIO_Init+0x2c4>)
 800279c:	f005 fc30 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80027a6:	486b      	ldr	r0, [pc, #428]	; (8002954 <MX_GPIO_Init+0x2c8>)
 80027a8:	f005 fc2a 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	210e      	movs	r1, #14
 80027b0:	4869      	ldr	r0, [pc, #420]	; (8002958 <MX_GPIO_Init+0x2cc>)
 80027b2:	f005 fc25 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80027bc:	4867      	ldr	r0, [pc, #412]	; (800295c <MX_GPIO_Init+0x2d0>)
 80027be:	f005 fc1f 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2101      	movs	r1, #1
 80027c6:	4865      	ldr	r0, [pc, #404]	; (800295c <MX_GPIO_Init+0x2d0>)
 80027c8:	f005 fc1a 	bl	8008000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80027cc:	f241 5304 	movw	r3, #5380	; 0x1504
 80027d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	4857      	ldr	r0, [pc, #348]	; (8002944 <MX_GPIO_Init+0x2b8>)
 80027e6:	f005 fa4b 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80027ea:	f248 0306 	movw	r3, #32774	; 0x8006
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f0:	2301      	movs	r3, #1
 80027f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	4619      	mov	r1, r3
 8002802:	4851      	ldr	r0, [pc, #324]	; (8002948 <MX_GPIO_Init+0x2bc>)
 8002804:	f005 fa3c 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002808:	2330      	movs	r3, #48	; 0x30
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	2301      	movs	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	484b      	ldr	r0, [pc, #300]	; (800294c <MX_GPIO_Init+0x2c0>)
 8002820:	f005 fa2e 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002824:	2303      	movs	r3, #3
 8002826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002828:	2301      	movs	r3, #1
 800282a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	4845      	ldr	r0, [pc, #276]	; (8002950 <MX_GPIO_Init+0x2c4>)
 800283c:	f005 fa20 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002840:	2304      	movs	r3, #4
 8002842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002848:	2301      	movs	r3, #1
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	483f      	ldr	r0, [pc, #252]	; (8002950 <MX_GPIO_Init+0x2c4>)
 8002854:	f005 fa14 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002858:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 800285c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285e:	2301      	movs	r3, #1
 8002860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	4619      	mov	r1, r3
 8002870:	4838      	ldr	r0, [pc, #224]	; (8002954 <MX_GPIO_Init+0x2c8>)
 8002872:	f005 fa05 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002876:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800287a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002880:	2301      	movs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4832      	ldr	r0, [pc, #200]	; (8002954 <MX_GPIO_Init+0x2c8>)
 800288c:	f005 f9f8 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002890:	2301      	movs	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002898:	2301      	movs	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	482d      	ldr	r0, [pc, #180]	; (8002958 <MX_GPIO_Init+0x2cc>)
 80028a4:	f005 f9ec 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80028a8:	230e      	movs	r3, #14
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4826      	ldr	r0, [pc, #152]	; (8002958 <MX_GPIO_Init+0x2cc>)
 80028c0:	f005 f9de 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80028c4:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	481a      	ldr	r0, [pc, #104]	; (8002944 <MX_GPIO_Init+0x2b8>)
 80028da:	f005 f9d1 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 80028de:	f240 7301 	movw	r3, #1793	; 0x701
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e4:	2301      	movs	r3, #1
 80028e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	4819      	ldr	r0, [pc, #100]	; (800295c <MX_GPIO_Init+0x2d0>)
 80028f8:	f005 f9c2 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80028fc:	2310      	movs	r3, #16
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	4812      	ldr	r0, [pc, #72]	; (8002958 <MX_GPIO_Init+0x2cc>)
 8002910:	f005 f9b6 	bl	8007c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002926:	2300      	movs	r3, #0
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_GPIO_Init+0x2bc>)
 8002932:	f005 f9a5 	bl	8007c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002936:	bf00      	nop
 8002938:	3730      	adds	r7, #48	; 0x30
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400
 8002944:	58021000 	.word	0x58021000
 8002948:	58020000 	.word	0x58020000
 800294c:	58020800 	.word	0x58020800
 8002950:	58020400 	.word	0x58020400
 8002954:	58021400 	.word	0x58021400
 8002958:	58021800 	.word	0x58021800
 800295c:	58020c00 	.word	0x58020c00

08002960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002964:	b672      	cpsid	i
}
 8002966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002968:	e7fe      	b.n	8002968 <Error_Handler+0x8>
	...

0800296c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_MspInit+0x30>)
 8002974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002978:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_MspInit+0x30>)
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_MspInit+0x30>)
 8002984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	58024400 	.word	0x58024400

080029a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5d      	ldr	r2, [pc, #372]	; (8002b34 <HAL_ADC_MspInit+0x194>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d159      	bne.n	8002a76 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 80029c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029c8:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 80029ca:	f043 0320 	orr.w	r3, r3, #32
 80029ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 80029d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e6:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f0:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a02:	2303      	movs	r3, #3
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	484a      	ldr	r0, [pc, #296]	; (8002b3c <HAL_ADC_MspInit+0x19c>)
 8002a12:	f005 f935 	bl	8007c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002a16:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a18:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <HAL_ADC_MspInit+0x1a4>)
 8002a1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a1e:	2209      	movs	r2, #9
 8002a20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a28:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a2e:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a36:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a3e:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a46:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a4c:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a58:	4839      	ldr	r0, [pc, #228]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a5a:	f002 fcd9 	bl	8005410 <HAL_DMA_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a64:	f7ff ff7c 	bl	8002960 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a35      	ldr	r2, [pc, #212]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <HAL_ADC_MspInit+0x1a0>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a74:	e059      	b.n	8002b2a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a33      	ldr	r2, [pc, #204]	; (8002b48 <HAL_ADC_MspInit+0x1a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d154      	bne.n	8002b2a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 8002a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a86:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 8002a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 8002a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_ADC_MspInit+0x198>)
 8002ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002abc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ac0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ac4:	f001 f80e 	bl	8003ae4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002ac8:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002aca:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_ADC_MspInit+0x1b0>)
 8002acc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002ad0:	2273      	movs	r2, #115	; 0x73
 8002ad2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aee:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002afe:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b06:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b0e:	480f      	ldr	r0, [pc, #60]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002b10:	f002 fc7e 	bl	8005410 <HAL_DMA_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002b1a:	f7ff ff21 	bl	8002960 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
 8002b24:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_ADC_MspInit+0x1ac>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40022000 	.word	0x40022000
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	58020800 	.word	0x58020800
 8002b40:	24000cd8 	.word	0x24000cd8
 8002b44:	40020088 	.word	0x40020088
 8002b48:	58026000 	.word	0x58026000
 8002b4c:	24000d50 	.word	0x24000d50
 8002b50:	400204b8 	.word	0x400204b8

08002b54 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0b8      	sub	sp, #224	; 0xe0
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	22b8      	movs	r2, #184	; 0xb8
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f014 fad9 	bl	801712c <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <HAL_FDCAN_MspInit+0xc4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d145      	bne.n	8002c10 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b94:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f007 fe5e 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002ba6:	f7ff fedb 	bl	8002960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_FDCAN_MspInit+0xc8>)
 8002bac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_FDCAN_MspInit+0xc8>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_FDCAN_MspInit+0xc8>)
 8002bbc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_FDCAN_MspInit+0xc8>)
 8002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_FDCAN_MspInit+0xc8>)
 8002bd0:	f043 0320 	orr.w	r3, r3, #32
 8002bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_FDCAN_MspInit+0xc8>)
 8002bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002be6:	23c0      	movs	r3, #192	; 0xc0
 8002be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <HAL_FDCAN_MspInit+0xcc>)
 8002c0c:	f005 f838 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002c10:	bf00      	nop
 8002c12:	37e0      	adds	r7, #224	; 0xe0
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	4000d400 	.word	0x4000d400
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	58021400 	.word	0x58021400

08002c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b0b8      	sub	sp, #224	; 0xe0
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	22b8      	movs	r2, #184	; 0xb8
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f014 fa71 	bl	801712c <memset>
  if(hi2c->Instance==I2C2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_I2C_MspInit+0xd4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d14d      	bne.n	8002cf0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c54:	f04f 0208 	mov.w	r2, #8
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f007 fdf6 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c76:	f7ff fe73 	bl	8002960 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_I2C_MspInit+0xd8>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_I2C_MspInit+0xd8>)
 8002c82:	f043 0320 	orr.w	r3, r3, #32
 8002c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_I2C_MspInit+0xd8>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9e:	2312      	movs	r3, #18
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4810      	ldr	r0, [pc, #64]	; (8002d00 <HAL_I2C_MspInit+0xdc>)
 8002cbe:	f004 ffdf 	bl	8007c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_I2C_MspInit+0xd8>)
 8002cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <HAL_I2C_MspInit+0xd8>)
 8002cca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_I2C_MspInit+0xd8>)
 8002cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	2021      	movs	r0, #33	; 0x21
 8002ce6:	f002 fb5e 	bl	80053a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002cea:	2021      	movs	r0, #33	; 0x21
 8002cec:	f002 fb75 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cf0:	bf00      	nop
 8002cf2:	37e0      	adds	r7, #224	; 0xe0
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	58021400 	.word	0x58021400

08002d04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b0ba      	sub	sp, #232	; 0xe8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	22b8      	movs	r2, #184	; 0xb8
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f014 fa01 	bl	801712c <memset>
  if(hsd->Instance==SDMMC2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ea4 <HAL_SD_MspInit+0x1a0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f040 80b3 	bne.w	8002e9c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	f107 0318 	add.w	r3, r7, #24
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f007 fd86 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002d56:	f7ff fe03 	bl	8002960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002d5a:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d60:	4a51      	ldr	r2, [pc, #324]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7e:	4a4a      	ldr	r2, [pc, #296]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d88:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d96:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9c:	4a42      	ldr	r2, [pc, #264]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da6:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_SD_MspInit+0x1a4>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db4:	2340      	movs	r3, #64	; 0x40
 8002db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dcc:	230b      	movs	r3, #11
 8002dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4834      	ldr	r0, [pc, #208]	; (8002eac <HAL_SD_MspInit+0x1a8>)
 8002dda:	f004 ff51 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002df6:	230b      	movs	r3, #11
 8002df8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e00:	4619      	mov	r1, r3
 8002e02:	482a      	ldr	r0, [pc, #168]	; (8002eac <HAL_SD_MspInit+0x1a8>)
 8002e04:	f004 ff3c 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e22:	230b      	movs	r3, #11
 8002e24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4820      	ldr	r0, [pc, #128]	; (8002eb0 <HAL_SD_MspInit+0x1ac>)
 8002e30:	f004 ff26 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e4e:	230b      	movs	r3, #11
 8002e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4815      	ldr	r0, [pc, #84]	; (8002eb0 <HAL_SD_MspInit+0x1ac>)
 8002e5c:	f004 ff10 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e84:	4619      	mov	r1, r3
 8002e86:	480a      	ldr	r0, [pc, #40]	; (8002eb0 <HAL_SD_MspInit+0x1ac>)
 8002e88:	f004 fefa 	bl	8007c80 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	207c      	movs	r0, #124	; 0x7c
 8002e92:	f002 fa88 	bl	80053a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e96:	207c      	movs	r0, #124	; 0x7c
 8002e98:	f002 fa9f 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e9c:	bf00      	nop
 8002e9e:	37e8      	adds	r7, #232	; 0xe8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	48022400 	.word	0x48022400
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	58020c00 	.word	0x58020c00
 8002eb0:	58021800 	.word	0x58021800

08002eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4f      	ldr	r2, [pc, #316]	; (8003010 <HAL_SPI_MspInit+0x15c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12e      	bne.n	8002f34 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ed6:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002edc:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002ede:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efa:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f12:	23e0      	movs	r3, #224	; 0xe0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f22:	2305      	movs	r3, #5
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <HAL_SPI_MspInit+0x164>)
 8002f2e:	f004 fea7 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f32:	e068      	b.n	8003006 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a38      	ldr	r2, [pc, #224]	; (800301c <HAL_SPI_MspInit+0x168>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12f      	bne.n	8002f9e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f3e:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f44:	4a33      	ldr	r2, [pc, #204]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	4619      	mov	r1, r3
 8002f96:	4822      	ldr	r0, [pc, #136]	; (8003020 <HAL_SPI_MspInit+0x16c>)
 8002f98:	f004 fe72 	bl	8007c80 <HAL_GPIO_Init>
}
 8002f9c:	e033      	b.n	8003006 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_SPI_MspInit+0x170>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d12e      	bne.n	8003006 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fae:	4a19      	ldr	r2, [pc, #100]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fcc:	4a11      	ldr	r2, [pc, #68]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_SPI_MspInit+0x160>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fe4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffe:	4619      	mov	r1, r3
 8003000:	4809      	ldr	r0, [pc, #36]	; (8003028 <HAL_SPI_MspInit+0x174>)
 8003002:	f004 fe3d 	bl	8007c80 <HAL_GPIO_Init>
}
 8003006:	bf00      	nop
 8003008:	3738      	adds	r7, #56	; 0x38
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40013000 	.word	0x40013000
 8003014:	58024400 	.word	0x58024400
 8003018:	58020000 	.word	0x58020000
 800301c:	40003800 	.word	0x40003800
 8003020:	58020400 	.word	0x58020400
 8003024:	40003c00 	.word	0x40003c00
 8003028:	58020800 	.word	0x58020800

0800302c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d15d      	bne.n	800310a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304e:	4b8e      	ldr	r3, [pc, #568]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003054:	4a8c      	ldr	r2, [pc, #560]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800305e:	4b8a      	ldr	r3, [pc, #552]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306c:	4b86      	ldr	r3, [pc, #536]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 800306e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003072:	4a85      	ldr	r2, [pc, #532]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307c:	4b82      	ldr	r3, [pc, #520]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 800307e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800308a:	2301      	movs	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800309a:	2301      	movs	r3, #1
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	4879      	ldr	r0, [pc, #484]	; (800328c <HAL_TIM_PWM_MspInit+0x260>)
 80030a6:	f004 fdeb 	bl	8007c80 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80030aa:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030ac:	4a79      	ldr	r2, [pc, #484]	; (8003294 <HAL_TIM_PWM_MspInit+0x268>)
 80030ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80030b0:	4b77      	ldr	r3, [pc, #476]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030b2:	2214      	movs	r2, #20
 80030b4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030b8:	2240      	movs	r2, #64	; 0x40
 80030ba:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030bc:	4b74      	ldr	r3, [pc, #464]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030ca:	4b71      	ldr	r3, [pc, #452]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030d2:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030d8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030dc:	2200      	movs	r2, #0
 80030de:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e6:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80030ec:	4868      	ldr	r0, [pc, #416]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 80030ee:	f002 f98f 	bl	8005410 <HAL_DMA_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80030f8:	f7ff fc32 	bl	8002960 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a64      	ldr	r2, [pc, #400]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c
 8003102:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_TIM_PWM_MspInit+0x264>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003108:	e119      	b.n	800333e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a62      	ldr	r2, [pc, #392]	; (8003298 <HAL_TIM_PWM_MspInit+0x26c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d16d      	bne.n	80031f0 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003114:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800311a:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003132:	4b5a      	ldr	r3, [pc, #360]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003134:	4a5a      	ldr	r2, [pc, #360]	; (80032a0 <HAL_TIM_PWM_MspInit+0x274>)
 8003136:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003138:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 800313a:	2218      	movs	r2, #24
 800313c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003140:	2240      	movs	r2, #64	; 0x40
 8003142:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003144:	4b55      	ldr	r3, [pc, #340]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 800314c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003150:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003152:	4b52      	ldr	r3, [pc, #328]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003158:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800315a:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 800315c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003160:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 800316a:	2200      	movs	r2, #0
 800316c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800316e:	4b4b      	ldr	r3, [pc, #300]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003170:	2200      	movs	r2, #0
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003174:	4849      	ldr	r0, [pc, #292]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003176:	f002 f94b 	bl	8005410 <HAL_DMA_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003180:	f7ff fbee 	bl	8002960 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a45      	ldr	r2, [pc, #276]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
 800318a:	4a44      	ldr	r2, [pc, #272]	; (800329c <HAL_TIM_PWM_MspInit+0x270>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003190:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 8003192:	4a45      	ldr	r2, [pc, #276]	; (80032a8 <HAL_TIM_PWM_MspInit+0x27c>)
 8003194:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003196:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 8003198:	2217      	movs	r2, #23
 800319a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800319c:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80031a8:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ae:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031b0:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031b8:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031be:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80031c0:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80031d2:	4834      	ldr	r0, [pc, #208]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031d4:	f002 f91c 	bl	8005410 <HAL_DMA_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80031de:	f7ff fbbf 	bl	8002960 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2f      	ldr	r2, [pc, #188]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
 80031e8:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <HAL_TIM_PWM_MspInit+0x278>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031ee:	e0a6      	b.n	800333e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <HAL_TIM_PWM_MspInit+0x280>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d15e      	bne.n	80032b8 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031fa:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 80031fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003200:	4a21      	ldr	r2, [pc, #132]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800320a:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <HAL_TIM_PWM_MspInit+0x25c>)
 800320c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_TIM_PWM_MspInit+0x288>)
 800321c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003220:	221f      	movs	r2, #31
 8003222:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800322a:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003236:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 800323a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800323e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003246:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003256:	2200      	movs	r2, #0
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800325a:	4815      	ldr	r0, [pc, #84]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 800325c:	f002 f8d8 	bl	8005410 <HAL_DMA_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003266:	f7ff fb7b 	bl	8002960 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_TIM_PWM_MspInit+0x284>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	201e      	movs	r0, #30
 800327c:	f002 f893 	bl	80053a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003280:	201e      	movs	r0, #30
 8003282:	f002 f8aa 	bl	80053da <HAL_NVIC_EnableIRQ>
}
 8003286:	e05a      	b.n	800333e <HAL_TIM_PWM_MspInit+0x312>
 8003288:	58024400 	.word	0x58024400
 800328c:	58020000 	.word	0x58020000
 8003290:	2400124c 	.word	0x2400124c
 8003294:	40020028 	.word	0x40020028
 8003298:	40000400 	.word	0x40000400
 800329c:	240012c4 	.word	0x240012c4
 80032a0:	40020058 	.word	0x40020058
 80032a4:	2400133c 	.word	0x2400133c
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40000800 	.word	0x40000800
 80032b0:	240013b4 	.word	0x240013b4
 80032b4:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a22      	ldr	r2, [pc, #136]	; (8003348 <HAL_TIM_PWM_MspInit+0x31c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d13d      	bne.n	800333e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_TIM_PWM_MspInit+0x320>)
 80032c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <HAL_TIM_PWM_MspInit+0x320>)
 80032ca:	f043 0308 	orr.w	r3, r3, #8
 80032ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <HAL_TIM_PWM_MspInit+0x320>)
 80032d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <HAL_TIM_PWM_MspInit+0x328>)
 80032e4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 80032e8:	223a      	movs	r2, #58	; 0x3a
 80032ea:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 80032ee:	2240      	movs	r2, #64	; 0x40
 80032f0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 80032fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032fe:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 8003302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003306:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 800330a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800330e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 8003312:	2200      	movs	r2, #0
 8003314:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003316:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 8003318:	2200      	movs	r2, #0
 800331a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003322:	480b      	ldr	r0, [pc, #44]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 8003324:	f002 f874 	bl	8005410 <HAL_DMA_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800332e:	f7ff fb17 	bl	8002960 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <HAL_TIM_PWM_MspInit+0x324>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800333e:	bf00      	nop
 8003340:	3730      	adds	r7, #48	; 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40000c00 	.word	0x40000c00
 800334c:	58024400 	.word	0x58024400
 8003350:	2400142c 	.word	0x2400142c
 8003354:	40020040 	.word	0x40020040

08003358 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_TIM_Base_MspInit+0x3c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10e      	bne.n	8003388 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_TIM_Base_MspInit+0x40>)
 800336c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HAL_TIM_Base_MspInit+0x40>)
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_TIM_Base_MspInit+0x40>)
 800337c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40001c00 	.word	0x40001c00
 8003398:	58024400 	.word	0x58024400

0800339c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	; 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d120      	bne.n	8003400 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	4a50      	ldr	r2, [pc, #320]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ce:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033e6:	2302      	movs	r3, #2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4619      	mov	r1, r3
 80033f8:	4844      	ldr	r0, [pc, #272]	; (800350c <HAL_TIM_MspPostInit+0x170>)
 80033fa:	f004 fc41 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80033fe:	e07f      	b.n	8003500 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a42      	ldr	r2, [pc, #264]	; (8003510 <HAL_TIM_MspPostInit+0x174>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d11f      	bne.n	800344a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 800340c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003410:	4a3d      	ldr	r2, [pc, #244]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 800341c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003428:	2330      	movs	r3, #48	; 0x30
 800342a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003430:	2302      	movs	r3, #2
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003438:	2302      	movs	r3, #2
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	4619      	mov	r1, r3
 8003442:	4832      	ldr	r0, [pc, #200]	; (800350c <HAL_TIM_MspPostInit+0x170>)
 8003444:	f004 fc1c 	bl	8007c80 <HAL_GPIO_Init>
}
 8003448:	e05a      	b.n	8003500 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a31      	ldr	r2, [pc, #196]	; (8003514 <HAL_TIM_MspPostInit+0x178>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d131      	bne.n	80034b8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 8003456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345a:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003464:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 8003466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003472:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003484:	2302      	movs	r3, #2
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	4619      	mov	r1, r3
 800348e:	4822      	ldr	r0, [pc, #136]	; (8003518 <HAL_TIM_MspPostInit+0x17c>)
 8003490:	f004 fbf6 	bl	8007c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2302      	movs	r3, #2
 800349c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800349e:	2302      	movs	r3, #2
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034a6:	2302      	movs	r3, #2
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	4819      	ldr	r0, [pc, #100]	; (8003518 <HAL_TIM_MspPostInit+0x17c>)
 80034b2:	f004 fbe5 	bl	8007c80 <HAL_GPIO_Init>
}
 80034b6:	e023      	b.n	8003500 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a17      	ldr	r2, [pc, #92]	; (800351c <HAL_TIM_MspPostInit+0x180>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d11e      	bne.n	8003500 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 80034c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c8:	4a0f      	ldr	r2, [pc, #60]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_TIM_MspPostInit+0x16c>)
 80034d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034e0:	2308      	movs	r3, #8
 80034e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034e8:	2302      	movs	r3, #2
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	4619      	mov	r1, r3
 80034fa:	4809      	ldr	r0, [pc, #36]	; (8003520 <HAL_TIM_MspPostInit+0x184>)
 80034fc:	f004 fbc0 	bl	8007c80 <HAL_GPIO_Init>
}
 8003500:	bf00      	nop
 8003502:	3730      	adds	r7, #48	; 0x30
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	58024400 	.word	0x58024400
 800350c:	58020400 	.word	0x58020400
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	58020c00 	.word	0x58020c00
 800351c:	40000c00 	.word	0x40000c00
 8003520:	58020000 	.word	0x58020000

08003524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0ba      	sub	sp, #232	; 0xe8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	22b8      	movs	r2, #184	; 0xb8
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f013 fdf1 	bl	801712c <memset>
  if(huart->Instance==UART4)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <HAL_UART_MspInit+0x160>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d147      	bne.n	80035e4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003554:	f04f 0202 	mov.w	r2, #2
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	4618      	mov	r0, r3
 800356c:	f007 f976 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003576:	f7ff f9f3 	bl	8002960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <HAL_UART_MspInit+0x164>)
 800357c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003580:	4a41      	ldr	r2, [pc, #260]	; (8003688 <HAL_UART_MspInit+0x164>)
 8003582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003586:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <HAL_UART_MspInit+0x164>)
 800358c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_UART_MspInit+0x164>)
 800359a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800359e:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <HAL_UART_MspInit+0x164>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_UART_MspInit+0x164>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035d0:	2308      	movs	r3, #8
 80035d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035da:	4619      	mov	r1, r3
 80035dc:	482b      	ldr	r0, [pc, #172]	; (800368c <HAL_UART_MspInit+0x168>)
 80035de:	f004 fb4f 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035e2:	e04a      	b.n	800367a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_UART_MspInit+0x16c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d145      	bne.n	800367a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035ee:	f04f 0201 	mov.w	r2, #1
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003600:	f107 0318 	add.w	r3, r7, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f007 f929 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003610:	f7ff f9a6 	bl	8002960 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_UART_MspInit+0x164>)
 8003616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_UART_MspInit+0x164>)
 800361c:	f043 0320 	orr.w	r3, r3, #32
 8003620:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_UART_MspInit+0x164>)
 8003626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_UART_MspInit+0x164>)
 8003634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <HAL_UART_MspInit+0x164>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_UART_MspInit+0x164>)
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003650:	23c0      	movs	r3, #192	; 0xc0
 8003652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003668:	2307      	movs	r3, #7
 800366a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003672:	4619      	mov	r1, r3
 8003674:	4807      	ldr	r0, [pc, #28]	; (8003694 <HAL_UART_MspInit+0x170>)
 8003676:	f004 fb03 	bl	8007c80 <HAL_GPIO_Init>
}
 800367a:	bf00      	nop
 800367c:	37e8      	adds	r7, #232	; 0xe8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40004c00 	.word	0x40004c00
 8003688:	58024400 	.word	0x58024400
 800368c:	58020400 	.word	0x58020400
 8003690:	40011400 	.word	0x40011400
 8003694:	58020800 	.word	0x58020800

08003698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800369c:	e7fe      	b.n	800369c <NMI_Handler+0x4>

0800369e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <HardFault_Handler+0x4>

080036a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <MemManage_Handler+0x4>

080036aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ae:	e7fe      	b.n	80036ae <BusFault_Handler+0x4>

080036b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <UsageFault_Handler+0x4>

080036b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036e4:	f000 f9ba 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}

080036ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <DMA1_Stream0_IRQHandler+0x10>)
 80036f2:	f002 fc4f 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	240013b4 	.word	0x240013b4

08003700 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Stream1_IRQHandler+0x10>)
 8003706:	f002 fc45 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2400124c 	.word	0x2400124c

08003714 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA1_Stream2_IRQHandler+0x10>)
 800371a:	f002 fc3b 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2400142c 	.word	0x2400142c

08003728 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <DMA1_Stream3_IRQHandler+0x10>)
 800372e:	f002 fc31 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	240012c4 	.word	0x240012c4

0800373c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003740:	4802      	ldr	r0, [pc, #8]	; (800374c <DMA1_Stream4_IRQHandler+0x10>)
 8003742:	f002 fc27 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	2400133c 	.word	0x2400133c

08003750 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <DMA1_Stream5_IRQHandler+0x10>)
 8003756:	f002 fc1d 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	24000cd8 	.word	0x24000cd8

08003764 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <TIM4_IRQHandler+0x10>)
 800376a:	f00c fa59 	bl	800fc20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	24001168 	.word	0x24001168

08003778 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <I2C2_EV_IRQHandler+0x10>)
 800377e:	f004 fce9 	bl	8008154 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	24000e68 	.word	0x24000e68

0800378c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <DMA2_Stream7_IRQHandler+0x10>)
 8003792:	f002 fbff 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	24000d50 	.word	0x24000d50

080037a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <OTG_HS_IRQHandler+0x10>)
 80037a6:	f004 fedf 	bl	8008568 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	24002ad0 	.word	0x24002ad0

080037b4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <SDMMC2_IRQHandler+0x10>)
 80037ba:	f009 fea5 	bl	800d508 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	24000ebc 	.word	0x24000ebc

080037c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <_sbrk+0x5c>)
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <_sbrk+0x60>)
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <_sbrk+0x64>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <_sbrk+0x64>)
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <_sbrk+0x68>)
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <_sbrk+0x64>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d207      	bcs.n	8003808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037f8:	f013 fca0 	bl	801713c <__errno>
 80037fc:	4603      	mov	r3, r0
 80037fe:	220c      	movs	r2, #12
 8003800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	e009      	b.n	800381c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <_sbrk+0x64>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <_sbrk+0x64>)
 8003818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	24050000 	.word	0x24050000
 8003828:	00000800 	.word	0x00000800
 800382c:	240015cc 	.word	0x240015cc
 8003830:	24003348 	.word	0x24003348

08003834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003838:	4b32      	ldr	r3, [pc, #200]	; (8003904 <SystemInit+0xd0>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	4a31      	ldr	r2, [pc, #196]	; (8003904 <SystemInit+0xd0>)
 8003840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <SystemInit+0xd4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	2b06      	cmp	r3, #6
 8003852:	d807      	bhi.n	8003864 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003854:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <SystemInit+0xd4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 030f 	bic.w	r3, r3, #15
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <SystemInit+0xd4>)
 800385e:	f043 0307 	orr.w	r3, r3, #7
 8003862:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <SystemInit+0xd8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <SystemInit+0xd8>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003870:	4b26      	ldr	r3, [pc, #152]	; (800390c <SystemInit+0xd8>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003876:	4b25      	ldr	r3, [pc, #148]	; (800390c <SystemInit+0xd8>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4924      	ldr	r1, [pc, #144]	; (800390c <SystemInit+0xd8>)
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <SystemInit+0xdc>)
 800387e:	4013      	ands	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <SystemInit+0xd4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800388e:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <SystemInit+0xd4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 030f 	bic.w	r3, r3, #15
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <SystemInit+0xd4>)
 8003898:	f043 0307 	orr.w	r3, r3, #7
 800389c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <SystemInit+0xd8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <SystemInit+0xd8>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <SystemInit+0xd8>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <SystemInit+0xd8>)
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <SystemInit+0xe0>)
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <SystemInit+0xd8>)
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <SystemInit+0xe4>)
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <SystemInit+0xd8>)
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <SystemInit+0xe8>)
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <SystemInit+0xd8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <SystemInit+0xd8>)
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <SystemInit+0xe8>)
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <SystemInit+0xd8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <SystemInit+0xd8>)
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <SystemInit+0xe8>)
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <SystemInit+0xd8>)
 80038dc:	2200      	movs	r2, #0
 80038de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <SystemInit+0xd8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <SystemInit+0xd8>)
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <SystemInit+0xd8>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <SystemInit+0xec>)
 80038f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	52002000 	.word	0x52002000
 800390c:	58024400 	.word	0x58024400
 8003910:	eaf6ed7f 	.word	0xeaf6ed7f
 8003914:	02020200 	.word	0x02020200
 8003918:	01ff0000 	.word	0x01ff0000
 800391c:	01010280 	.word	0x01010280
 8003920:	52004000 	.word	0x52004000

08003924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800395c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003928:	f7ff ff84 	bl	8003834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800392c:	480c      	ldr	r0, [pc, #48]	; (8003960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800392e:	490d      	ldr	r1, [pc, #52]	; (8003964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003934:	e002      	b.n	800393c <LoopCopyDataInit>

08003936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393a:	3304      	adds	r3, #4

0800393c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800393c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800393e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003940:	d3f9      	bcc.n	8003936 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003944:	4c0a      	ldr	r4, [pc, #40]	; (8003970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003948:	e001      	b.n	800394e <LoopFillZerobss>

0800394a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800394c:	3204      	adds	r2, #4

0800394e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800394e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003950:	d3fb      	bcc.n	800394a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003952:	f013 fbf9 	bl	8017148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003956:	f7fd fd57 	bl	8001408 <main>
  bx  lr
 800395a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800395c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003960:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003964:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003968:	0801872c 	.word	0x0801872c
  ldr r2, =_sbss
 800396c:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8003970:	24003344 	.word	0x24003344

08003974 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <ADC3_IRQHandler>
	...

08003978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397e:	2003      	movs	r0, #3
 8003980:	f001 fd06 	bl	8005390 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003984:	f006 fd94 	bl	800a4b0 <HAL_RCC_GetSysClockFreq>
 8003988:	4602      	mov	r2, r0
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_Init+0x68>)
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	4913      	ldr	r1, [pc, #76]	; (80039e4 <HAL_Init+0x6c>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
 80039a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_Init+0x68>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <HAL_Init+0x6c>)
 80039ac:	5cd3      	ldrb	r3, [r2, r3]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <HAL_Init+0x70>)
 80039ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <HAL_Init+0x74>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039c2:	200f      	movs	r0, #15
 80039c4:	f000 f814 	bl	80039f0 <HAL_InitTick>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e002      	b.n	80039d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039d2:	f7fe ffcb 	bl	800296c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	58024400 	.word	0x58024400
 80039e4:	08018578 	.word	0x08018578
 80039e8:	24000004 	.word	0x24000004
 80039ec:	24000000 	.word	0x24000000

080039f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_InitTick+0x60>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e021      	b.n	8003a48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_InitTick+0x64>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_InitTick+0x60>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fceb 	bl	80053f6 <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d80a      	bhi.n	8003a46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f001 fcb5 	bl	80053a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <HAL_InitTick+0x68>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2400000c 	.word	0x2400000c
 8003a54:	24000000 	.word	0x24000000
 8003a58:	24000008 	.word	0x24000008

08003a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_IncTick+0x20>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_IncTick+0x24>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_IncTick+0x24>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	2400000c 	.word	0x2400000c
 8003a80:	240015d0 	.word	0x240015d0

08003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTick;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_GetTick+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	240015d0 	.word	0x240015d0

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff ffee 	bl	8003a84 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d005      	beq.n	8003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_Delay+0x44>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ac2:	bf00      	nop
 8003ac4:	f7ff ffde 	bl	8003a84 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d8f7      	bhi.n	8003ac4 <HAL_Delay+0x28>
  {
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2400000c 	.word	0x2400000c

08003ae4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	401a      	ands	r2, r3
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	58000400 	.word	0x58000400

08003b10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3360      	adds	r3, #96	; 0x60
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <LL_ADC_SetOffset+0x60>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10b      	bne.n	8003bb4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bb2:	e00b      	b.n	8003bcc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	601a      	str	r2, [r3, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	58026000 	.word	0x58026000

08003bdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3360      	adds	r3, #96	; 0x60
 8003bea:	461a      	mov	r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	611a      	str	r2, [r3, #16]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	601a      	str	r2, [r3, #0]
  }
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58026000 	.word	0x58026000

08003c80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <LL_ADC_SetOffsetSaturation+0x40>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10e      	bne.n	8003cb2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3360      	adds	r3, #96	; 0x60
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58026000 	.word	0x58026000

08003cc4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <LL_ADC_SetOffsetSign+0x40>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10e      	bne.n	8003cf6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3360      	adds	r3, #96	; 0x60
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	58026000 	.word	0x58026000

08003d08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3360      	adds	r3, #96	; 0x60
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <LL_ADC_SetOffsetState+0x50>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d108      	bne.n	8003d3c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d3a:	e007      	b.n	8003d4c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	601a      	str	r2, [r3, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	58026000 	.word	0x58026000

08003d5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3330      	adds	r3, #48	; 0x30
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	4413      	add	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	211f      	movs	r1, #31
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	401a      	ands	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0e9b      	lsrs	r3, r3, #26
 8003d94:	f003 011f 	and.w	r1, r3, #31
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	431a      	orrs	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	0e5b      	lsrs	r3, r3, #25
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	4413      	add	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	0d1b      	lsrs	r3, r3, #20
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2107      	movs	r1, #7
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	401a      	ands	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0d1b      	lsrs	r3, r3, #20
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d115      	bne.n	8003e4c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0318 	and.w	r3, r3, #24
 8003e36:	4914      	ldr	r1, [pc, #80]	; (8003e88 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e38:	40d9      	lsrs	r1, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e4a:	e014      	b.n	8003e76 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f003 0318 	and.w	r3, r3, #24
 8003e62:	4909      	ldr	r1, [pc, #36]	; (8003e88 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e64:	40d9      	lsrs	r1, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	400b      	ands	r3, r1
 8003e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	58026000 	.word	0x58026000
 8003e88:	000fffff 	.word	0x000fffff

08003e8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6093      	str	r3, [r2, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	5fffffc0 	.word	0x5fffffc0

08003eb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ec4:	d101      	bne.n	8003eca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <LL_ADC_EnableInternalRegulator+0x24>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	6fffffc0 	.word	0x6fffffc0

08003f00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f14:	d101      	bne.n	8003f1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_IsEnabled+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_IsEnabled+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d101      	bne.n	8003f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d101      	bne.n	8003f8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e1ee      	b.n	8004394 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fe fceb 	bl	80029a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff67 	bl	8003eb0 <LL_ADC_IsDeepPowerDownEnabled>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff4d 	bl	8003e8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff82 	bl	8003f00 <LL_ADC_IsInternalRegulatorEnabled>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d114      	bne.n	800402c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ff66 	bl	8003ed8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800400c:	4b8e      	ldr	r3, [pc, #568]	; (8004248 <HAL_ADC_Init+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	4a8e      	ldr	r2, [pc, #568]	; (800424c <HAL_ADC_Init+0x2b0>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800401e:	e002      	b.n	8004026 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3b01      	subs	r3, #1
 8004024:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f9      	bne.n	8004020 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff65 	bl	8003f00 <LL_ADC_IsInternalRegulatorEnabled>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404c:	f043 0201 	orr.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff76 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 8004062:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8188 	bne.w	8004382 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 8184 	bne.w	8004382 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004082:	f043 0202 	orr.w	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff4a 	bl	8003f28 <LL_ADC_IsEnabled>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d136      	bne.n	8004108 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6c      	ldr	r2, [pc, #432]	; (8004250 <HAL_ADC_Init+0x2b4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_ADC_Init+0x112>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a6a      	ldr	r2, [pc, #424]	; (8004254 <HAL_ADC_Init+0x2b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d10e      	bne.n	80040cc <HAL_ADC_Init+0x130>
 80040ae:	4868      	ldr	r0, [pc, #416]	; (8004250 <HAL_ADC_Init+0x2b4>)
 80040b0:	f7ff ff3a 	bl	8003f28 <LL_ADC_IsEnabled>
 80040b4:	4604      	mov	r4, r0
 80040b6:	4867      	ldr	r0, [pc, #412]	; (8004254 <HAL_ADC_Init+0x2b8>)
 80040b8:	f7ff ff36 	bl	8003f28 <LL_ADC_IsEnabled>
 80040bc:	4603      	mov	r3, r0
 80040be:	4323      	orrs	r3, r4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e008      	b.n	80040de <HAL_ADC_Init+0x142>
 80040cc:	4862      	ldr	r0, [pc, #392]	; (8004258 <HAL_ADC_Init+0x2bc>)
 80040ce:	f7ff ff2b 	bl	8003f28 <LL_ADC_IsEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5a      	ldr	r2, [pc, #360]	; (8004250 <HAL_ADC_Init+0x2b4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_ADC_Init+0x15a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a58      	ldr	r2, [pc, #352]	; (8004254 <HAL_ADC_Init+0x2b8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_ADC_Init+0x15e>
 80040f6:	4a59      	ldr	r2, [pc, #356]	; (800425c <HAL_ADC_Init+0x2c0>)
 80040f8:	e000      	b.n	80040fc <HAL_ADC_Init+0x160>
 80040fa:	4a59      	ldr	r2, [pc, #356]	; (8004260 <HAL_ADC_Init+0x2c4>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f7ff fd04 	bl	8003b10 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_ADC_Init+0x2bc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d129      	bne.n	8004166 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7e5b      	ldrb	r3, [r3, #25]
 8004116:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800411c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004122:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d013      	beq.n	8004154 <HAL_ADC_Init+0x1b8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d00d      	beq.n	8004150 <HAL_ADC_Init+0x1b4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b1c      	cmp	r3, #28
 800413a:	d007      	beq.n	800414c <HAL_ADC_Init+0x1b0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b18      	cmp	r3, #24
 8004142:	d101      	bne.n	8004148 <HAL_ADC_Init+0x1ac>
 8004144:	2318      	movs	r3, #24
 8004146:	e006      	b.n	8004156 <HAL_ADC_Init+0x1ba>
 8004148:	2300      	movs	r3, #0
 800414a:	e004      	b.n	8004156 <HAL_ADC_Init+0x1ba>
 800414c:	2310      	movs	r3, #16
 800414e:	e002      	b.n	8004156 <HAL_ADC_Init+0x1ba>
 8004150:	2308      	movs	r3, #8
 8004152:	e000      	b.n	8004156 <HAL_ADC_Init+0x1ba>
 8004154:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004156:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800415e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e00e      	b.n	8004184 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7e5b      	ldrb	r3, [r3, #25]
 800416a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004170:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004176:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800417e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d106      	bne.n	800419c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	3b01      	subs	r3, #1
 8004194:	045b      	lsls	r3, r3, #17
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <HAL_ADC_Init+0x2bc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d115      	bne.n	80041ee <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_ADC_Init+0x2c8>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	611a      	str	r2, [r3, #16]
 80041ec:	e009      	b.n	8004202 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <HAL_ADC_Init+0x2cc>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	430b      	orrs	r3, r1
 8004200:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fea1 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 800420c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff feae 	bl	8003f74 <LL_ADC_INJ_IsConversionOngoing>
 8004218:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 808e 	bne.w	800433e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f040 808a 	bne.w	800433e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <HAL_ADC_Init+0x2bc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d11b      	bne.n	800426c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7e1b      	ldrb	r3, [r3, #24]
 8004238:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004240:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	e018      	b.n	800427a <HAL_ADC_Init+0x2de>
 8004248:	24000000 	.word	0x24000000
 800424c:	053e2d63 	.word	0x053e2d63
 8004250:	40022000 	.word	0x40022000
 8004254:	40022100 	.word	0x40022100
 8004258:	58026000 	.word	0x58026000
 800425c:	40022300 	.word	0x40022300
 8004260:	58026300 	.word	0x58026300
 8004264:	fff04007 	.word	0xfff04007
 8004268:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7e1b      	ldrb	r3, [r3, #24]
 8004270:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <HAL_ADC_Init+0x400>)
 8004282:	4013      	ands	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	430b      	orrs	r3, r1
 800428c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004294:	2b01      	cmp	r3, #1
 8004296:	d137      	bne.n	8004308 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <HAL_ADC_Init+0x404>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d116      	bne.n	80042d6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <HAL_ADC_Init+0x408>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042ba:	4311      	orrs	r1, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042c6:	430a      	orrs	r2, r1
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	611a      	str	r2, [r3, #16]
 80042d4:	e020      	b.n	8004318 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_ADC_Init+0x40c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042e4:	3a01      	subs	r2, #1
 80042e6:	0411      	lsls	r1, r2, #16
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042f8:	430a      	orrs	r2, r1
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	e007      	b.n	8004318 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_ADC_Init+0x404>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d002      	beq.n	800433e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fd63 	bl	8004e04 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10c      	bne.n	8004360 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f023 010f 	bic.w	r1, r3, #15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
 800435e:	e007      	b.n	8004370 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020f 	bic.w	r2, r2, #15
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	661a      	str	r2, [r3, #96]	; 0x60
 8004380:	e007      	b.n	8004392 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004386:	f043 0210 	orr.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004392:	7ffb      	ldrb	r3, [r7, #31]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3724      	adds	r7, #36	; 0x24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}
 800439c:	ffffbffc 	.word	0xffffbffc
 80043a0:	58026000 	.word	0x58026000
 80043a4:	fc00f81f 	.word	0xfc00f81f
 80043a8:	fc00f81e 	.word	0xfc00f81e

080043ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b0b9      	sub	sp, #228	; 0xe4
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4aa9      	ldr	r2, [pc, #676]	; (8004674 <HAL_ADC_ConfigChannel+0x2c8>)
 80043ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x34>
 80043da:	2302      	movs	r3, #2
 80043dc:	f000 bcfa 	b.w	8004dd4 <HAL_ADC_ConfigChannel+0xa28>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fdae 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 84de 	bne.w	8004db6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a9e      	ldr	r2, [pc, #632]	; (8004678 <HAL_ADC_ConfigChannel+0x2cc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d033      	beq.n	800446c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x76>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0e9b      	lsrs	r3, r3, #26
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2201      	movs	r2, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	e01d      	b.n	800445e <HAL_ADC_ConfigChannel+0xb2>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800443a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800443e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004446:	2320      	movs	r3, #32
 8004448:	e004      	b.n	8004454 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800444a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2201      	movs	r2, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	69d1      	ldr	r1, [r2, #28]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	430b      	orrs	r3, r1
 800446a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	f7ff fc6f 	bl	8003d5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fd63 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 8004488:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fd6f 	bl	8003f74 <LL_ADC_INJ_IsConversionOngoing>
 8004496:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800449a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8270 	bne.w	8004984 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 826b 	bne.w	8004984 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7ff fc7a 	bl	8003db4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6c      	ldr	r2, [pc, #432]	; (8004678 <HAL_ADC_ConfigChannel+0x2cc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d10d      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	08db      	lsrs	r3, r3, #3
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044e4:	e032      	b.n	800454c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044e6:	4b65      	ldr	r3, [pc, #404]	; (800467c <HAL_ADC_ConfigChannel+0x2d0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f2:	d10b      	bne.n	800450c <HAL_ADC_ConfigChannel+0x160>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	e01d      	b.n	8004548 <HAL_ADC_ConfigChannel+0x19c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x186>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	e00a      	b.n	8004548 <HAL_ADC_ConfigChannel+0x19c>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d048      	beq.n	80045e6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6919      	ldr	r1, [r3, #16]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004564:	f7ff fb08 	bl	8003b78 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a42      	ldr	r2, [pc, #264]	; (8004678 <HAL_ADC_ConfigChannel+0x2cc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d119      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6919      	ldr	r1, [r3, #16]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	461a      	mov	r2, r3
 8004580:	f7ff fba0 	bl	8003cc4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6919      	ldr	r1, [r3, #16]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d102      	bne.n	800459c <HAL_ADC_ConfigChannel+0x1f0>
 8004596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459a:	e000      	b.n	800459e <HAL_ADC_ConfigChannel+0x1f2>
 800459c:	2300      	movs	r3, #0
 800459e:	461a      	mov	r2, r3
 80045a0:	f7ff fb6e 	bl	8003c80 <LL_ADC_SetOffsetSaturation>
 80045a4:	e1ee      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6919      	ldr	r1, [r3, #16]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d102      	bne.n	80045be <HAL_ADC_ConfigChannel+0x212>
 80045b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045bc:	e000      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x214>
 80045be:	2300      	movs	r3, #0
 80045c0:	461a      	mov	r2, r3
 80045c2:	f7ff fb3b 	bl	8003c3c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	7e1b      	ldrb	r3, [r3, #24]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x230>
 80045d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045da:	e000      	b.n	80045de <HAL_ADC_ConfigChannel+0x232>
 80045dc:	2300      	movs	r3, #0
 80045de:	461a      	mov	r2, r3
 80045e0:	f7ff fb12 	bl	8003c08 <LL_ADC_SetDataRightShift>
 80045e4:	e1ce      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <HAL_ADC_ConfigChannel+0x2cc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	f040 8181 	bne.w	80048f4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff faef 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 80045fe:	4603      	mov	r3, r0
 8004600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <HAL_ADC_ConfigChannel+0x272>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fae4 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 8004614:	4603      	mov	r3, r0
 8004616:	0e9b      	lsrs	r3, r3, #26
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	e01e      	b.n	800465c <HAL_ADC_ConfigChannel+0x2b0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fad9 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800463c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e004      	b.n	800465a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x2d4>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	e01e      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x306>
 8004674:	47ff0000 	.word	0x47ff0000
 8004678:	58026000 	.word	0x58026000
 800467c:	5c001000 	.word	0x5c001000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800469c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80046a4:	2320      	movs	r3, #32
 80046a6:	e004      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80046a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d106      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb22 	bl	8003d08 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fa86 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x344>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fa7b 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 80046e6:	4603      	mov	r3, r0
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	f003 021f 	and.w	r2, r3, #31
 80046ee:	e01e      	b.n	800472e <HAL_ADC_ConfigChannel+0x382>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2101      	movs	r1, #1
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fa70 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800470e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800471e:	2320      	movs	r3, #32
 8004720:	e004      	b.n	800472c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x39a>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	0e9b      	lsrs	r3, r3, #26
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	e018      	b.n	8004778 <HAL_ADC_ConfigChannel+0x3cc>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800475a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800475e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004762:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e004      	b.n	8004778 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800476e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	429a      	cmp	r2, r3
 800477a:	d106      	bne.n	800478a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2200      	movs	r2, #0
 8004782:	2101      	movs	r1, #1
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fabf 	bl	8003d08 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fa23 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x40a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fa18 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 80047ac:	4603      	mov	r3, r0
 80047ae:	0e9b      	lsrs	r3, r3, #26
 80047b0:	f003 021f 	and.w	r2, r3, #31
 80047b4:	e01e      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x448>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fa0d 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80047dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80047e4:	2320      	movs	r3, #32
 80047e6:	e004      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80047e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_ADC_ConfigChannel+0x460>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0e9b      	lsrs	r3, r3, #26
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	e014      	b.n	8004836 <HAL_ADC_ConfigChannel+0x48a>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800481a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004828:	2320      	movs	r3, #32
 800482a:	e004      	b.n	8004836 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800482c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	429a      	cmp	r2, r3
 8004838:	d106      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fa60 	bl	8003d08 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2103      	movs	r1, #3
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff f9c4 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 8004854:	4603      	mov	r3, r0
 8004856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x4c8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2103      	movs	r1, #3
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff f9b9 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 800486a:	4603      	mov	r3, r0
 800486c:	0e9b      	lsrs	r3, r3, #26
 800486e:	f003 021f 	and.w	r2, r3, #31
 8004872:	e017      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x4f8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2103      	movs	r1, #3
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff f9ae 	bl	8003bdc <LL_ADC_GetOffsetChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004896:	2320      	movs	r3, #32
 8004898:	e003      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800489a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489c:	fab3 f383 	clz	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x510>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0e9b      	lsrs	r3, r3, #26
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	e011      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x534>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80048ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80048ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80048d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d14f      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2103      	movs	r1, #3
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fa0b 	bl	8003d08 <LL_ADC_SetOffsetState>
 80048f2:	e047      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	069b      	lsls	r3, r3, #26
 8004904:	429a      	cmp	r2, r3
 8004906:	d107      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004916:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	069b      	lsls	r3, r3, #26
 8004928:	429a      	cmp	r2, r3
 800492a:	d107      	bne.n	800493c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800493a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	069b      	lsls	r3, r3, #26
 800494c:	429a      	cmp	r2, r3
 800494e:	d107      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800495e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	069b      	lsls	r3, r3, #26
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004982:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff facd 	bl	8003f28 <LL_ADC_IsEnabled>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 8219 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6819      	ldr	r1, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f7ff fa32 	bl	8003e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4aa1      	ldr	r2, [pc, #644]	; (8004c34 <HAL_ADC_ConfigChannel+0x888>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	f040 812e 	bne.w	8004c10 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x630>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e019      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x664>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049f4:	2320      	movs	r3, #32
 80049f6:	e003      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80049f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fa:	fab3 f383 	clz	r3, r3
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	3301      	adds	r3, #1
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2b09      	cmp	r3, #9
 8004a08:	bf94      	ite	ls
 8004a0a:	2301      	movls	r3, #1
 8004a0c:	2300      	movhi	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d079      	beq.n	8004b08 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d107      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x684>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	3301      	adds	r3, #1
 8004a28:	069b      	lsls	r3, r3, #26
 8004a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a2e:	e015      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x6b0>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a40:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e003      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	069b      	lsls	r3, r3, #26
 8004a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d109      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x6d0>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	0e9b      	lsrs	r3, r3, #26
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	e017      	b.n	8004aac <HAL_ADC_ConfigChannel+0x700>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a84:	fa93 f3a3 	rbit	r3, r3
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a94:	2320      	movs	r3, #32
 8004a96:	e003      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	ea42 0103 	orr.w	r1, r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x726>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	0e9b      	lsrs	r3, r3, #26
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f003 021f 	and.w	r2, r3, #31
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	051b      	lsls	r3, r3, #20
 8004ad0:	e018      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x758>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004aea:	2320      	movs	r3, #32
 8004aec:	e003      	b.n	8004af6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	fab3 f383 	clz	r3, r3
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f003 021f 	and.w	r2, r3, #31
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b04:	430b      	orrs	r3, r1
 8004b06:	e07e      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x778>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	0e9b      	lsrs	r3, r3, #26
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	069b      	lsls	r3, r3, #26
 8004b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b22:	e015      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x7a4>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	e003      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	3301      	adds	r3, #1
 8004b4a:	069b      	lsls	r3, r3, #26
 8004b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x7c4>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	3301      	adds	r3, #1
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2101      	movs	r1, #1
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	e017      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x7f4>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	61bb      	str	r3, [r7, #24]
  return result;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	e003      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	fab3 f383 	clz	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	3301      	adds	r3, #1
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	ea42 0103 	orr.w	r1, r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x820>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	0e9b      	lsrs	r3, r3, #26
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f003 021f 	and.w	r2, r3, #31
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3b1e      	subs	r3, #30
 8004bc4:	051b      	lsls	r3, r3, #20
 8004bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bca:	e01b      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x858>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
  return result;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004be4:	2320      	movs	r3, #32
 8004be6:	e003      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	f003 021f 	and.w	r2, r3, #31
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3b1e      	subs	r3, #30
 8004bfe:	051b      	lsls	r3, r3, #20
 8004c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c04:	430b      	orrs	r3, r1
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f7ff f8d2 	bl	8003db4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f280 80d7 	bge.w	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <HAL_ADC_ConfigChannel+0x88c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0x882>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <HAL_ADC_ConfigChannel+0x890>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d10a      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x898>
 8004c2e:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <HAL_ADC_ConfigChannel+0x894>)
 8004c30:	e009      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x89a>
 8004c32:	bf00      	nop
 8004c34:	47ff0000 	.word	0x47ff0000
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40022100 	.word	0x40022100
 8004c40:	40022300 	.word	0x40022300
 8004c44:	4b65      	ldr	r3, [pc, #404]	; (8004ddc <HAL_ADC_ConfigChannel+0xa30>)
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe ff88 	bl	8003b5c <LL_ADC_GetCommonPathInternalCh>
 8004c4c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a62      	ldr	r2, [pc, #392]	; (8004de0 <HAL_ADC_ConfigChannel+0xa34>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_ADC_ConfigChannel+0x8b8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	; (8004de4 <HAL_ADC_ConfigChannel+0xa38>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10e      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x8d6>
 8004c64:	485e      	ldr	r0, [pc, #376]	; (8004de0 <HAL_ADC_ConfigChannel+0xa34>)
 8004c66:	f7ff f95f 	bl	8003f28 <LL_ADC_IsEnabled>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	485d      	ldr	r0, [pc, #372]	; (8004de4 <HAL_ADC_ConfigChannel+0xa38>)
 8004c6e:	f7ff f95b 	bl	8003f28 <LL_ADC_IsEnabled>
 8004c72:	4603      	mov	r3, r0
 8004c74:	4323      	orrs	r3, r4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e008      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x8e8>
 8004c82:	4859      	ldr	r0, [pc, #356]	; (8004de8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c84:	f7ff f950 	bl	8003f28 <LL_ADC_IsEnabled>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf0c      	ite	eq
 8004c8e:	2301      	moveq	r3, #1
 8004c90:	2300      	movne	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8084 	beq.w	8004da2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a53      	ldr	r2, [pc, #332]	; (8004dec <HAL_ADC_ConfigChannel+0xa40>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d132      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x95e>
 8004ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d12c      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	f040 8086 	bne.w	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a47      	ldr	r2, [pc, #284]	; (8004de0 <HAL_ADC_ConfigChannel+0xa34>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_ADC_ConfigChannel+0x924>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a46      	ldr	r2, [pc, #280]	; (8004de4 <HAL_ADC_ConfigChannel+0xa38>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x928>
 8004cd0:	4a47      	ldr	r2, [pc, #284]	; (8004df0 <HAL_ADC_ConfigChannel+0xa44>)
 8004cd2:	e000      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x92a>
 8004cd4:	4a41      	ldr	r2, [pc, #260]	; (8004ddc <HAL_ADC_ConfigChannel+0xa30>)
 8004cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe ff28 	bl	8003b36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <HAL_ADC_ConfigChannel+0xa48>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	4a42      	ldr	r2, [pc, #264]	; (8004df8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cfa:	e002      	b.n	8004d02 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f9      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d08:	e05e      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3b      	ldr	r2, [pc, #236]	; (8004dfc <HAL_ADC_ConfigChannel+0xa50>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d120      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x9aa>
 8004d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d11a      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a30      	ldr	r2, [pc, #192]	; (8004de8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d14e      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <HAL_ADC_ConfigChannel+0xa34>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_ADC_ConfigChannel+0x992>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2a      	ldr	r2, [pc, #168]	; (8004de4 <HAL_ADC_ConfigChannel+0xa38>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x996>
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <HAL_ADC_ConfigChannel+0xa44>)
 8004d40:	e000      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x998>
 8004d42:	4a26      	ldr	r2, [pc, #152]	; (8004ddc <HAL_ADC_ConfigChannel+0xa30>)
 8004d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f7fe fef1 	bl	8003b36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d54:	e038      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <HAL_ADC_ConfigChannel+0xa54>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d133      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
 8004d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d12d      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d128      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <HAL_ADC_ConfigChannel+0xa34>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_ADC_ConfigChannel+0x9de>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <HAL_ADC_ConfigChannel+0xa38>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x9e2>
 8004d8a:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_ADC_ConfigChannel+0xa44>)
 8004d8c:	e000      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x9e4>
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <HAL_ADC_ConfigChannel+0xa30>)
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f7fe fecb 	bl	8003b36 <LL_ADC_SetCommonPathInternalCh>
 8004da0:	e012      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004db4:	e008      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004dd0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	37e4      	adds	r7, #228	; 0xe4
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd90      	pop	{r4, r7, pc}
 8004ddc:	58026300 	.word	0x58026300
 8004de0:	40022000 	.word	0x40022000
 8004de4:	40022100 	.word	0x40022100
 8004de8:	58026000 	.word	0x58026000
 8004dec:	c7520000 	.word	0xc7520000
 8004df0:	40022300 	.word	0x40022300
 8004df4:	24000000 	.word	0x24000000
 8004df8:	053e2d63 	.word	0x053e2d63
 8004dfc:	c3210000 	.word	0xc3210000
 8004e00:	cb840000 	.word	0xcb840000

08004e04 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6c      	ldr	r2, [pc, #432]	; (8004fc4 <ADC_ConfigureBoostMode+0x1c0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <ADC_ConfigureBoostMode+0x1c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6b      	ldr	r2, [pc, #428]	; (8004fc8 <ADC_ConfigureBoostMode+0x1c4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d109      	bne.n	8004e34 <ADC_ConfigureBoostMode+0x30>
 8004e20:	4b6a      	ldr	r3, [pc, #424]	; (8004fcc <ADC_ConfigureBoostMode+0x1c8>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e008      	b.n	8004e46 <ADC_ConfigureBoostMode+0x42>
 8004e34:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <ADC_ConfigureBoostMode+0x1cc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01c      	beq.n	8004e84 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e4a:	f005 fcab 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 8004e4e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e58:	d010      	beq.n	8004e7c <ADC_ConfigureBoostMode+0x78>
 8004e5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e5e:	d873      	bhi.n	8004f48 <ADC_ConfigureBoostMode+0x144>
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e64:	d002      	beq.n	8004e6c <ADC_ConfigureBoostMode+0x68>
 8004e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e6a:	d16d      	bne.n	8004f48 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	60fb      	str	r3, [r7, #12]
        break;
 8004e7a:	e068      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	089b      	lsrs	r3, r3, #2
 8004e80:	60fb      	str	r3, [r7, #12]
        break;
 8004e82:	e064      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	f006 fe86 	bl	800bb9c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e9a:	d051      	beq.n	8004f40 <ADC_ConfigureBoostMode+0x13c>
 8004e9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ea0:	d854      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004ea2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ea6:	d047      	beq.n	8004f38 <ADC_ConfigureBoostMode+0x134>
 8004ea8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004eac:	d84e      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004eae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004eb2:	d03d      	beq.n	8004f30 <ADC_ConfigureBoostMode+0x12c>
 8004eb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004eb8:	d848      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ebe:	d033      	beq.n	8004f28 <ADC_ConfigureBoostMode+0x124>
 8004ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ec4:	d842      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004ec6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eca:	d029      	beq.n	8004f20 <ADC_ConfigureBoostMode+0x11c>
 8004ecc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ed0:	d83c      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004ed2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ed6:	d01a      	beq.n	8004f0e <ADC_ConfigureBoostMode+0x10a>
 8004ed8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004edc:	d836      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004ede:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ee2:	d014      	beq.n	8004f0e <ADC_ConfigureBoostMode+0x10a>
 8004ee4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ee8:	d830      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eee:	d00e      	beq.n	8004f0e <ADC_ConfigureBoostMode+0x10a>
 8004ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef4:	d82a      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004ef6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004efa:	d008      	beq.n	8004f0e <ADC_ConfigureBoostMode+0x10a>
 8004efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f00:	d824      	bhi.n	8004f4c <ADC_ConfigureBoostMode+0x148>
 8004f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f06:	d002      	beq.n	8004f0e <ADC_ConfigureBoostMode+0x10a>
 8004f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f0c:	d11e      	bne.n	8004f4c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0c9b      	lsrs	r3, r3, #18
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	60fb      	str	r3, [r7, #12]
        break;
 8004f1e:	e016      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
        break;
 8004f26:	e012      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	60fb      	str	r3, [r7, #12]
        break;
 8004f2e:	e00e      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	60fb      	str	r3, [r7, #12]
        break;
 8004f36:	e00a      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	09db      	lsrs	r3, r3, #7
 8004f3c:	60fb      	str	r3, [r7, #12]
        break;
 8004f3e:	e006      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	60fb      	str	r3, [r7, #12]
        break;
 8004f46:	e002      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f48:	bf00      	nop
 8004f4a:	e000      	b.n	8004f4e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f4c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <ADC_ConfigureBoostMode+0x1d0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d808      	bhi.n	8004f6e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f6c:	e025      	b.n	8004fba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <ADC_ConfigureBoostMode+0x1d4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d80a      	bhi.n	8004f8c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f88:	609a      	str	r2, [r3, #8]
}
 8004f8a:	e016      	b.n	8004fba <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <ADC_ConfigureBoostMode+0x1d8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d80a      	bhi.n	8004faa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	e007      	b.n	8004fba <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fb8:	609a      	str	r2, [r3, #8]
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40022000 	.word	0x40022000
 8004fc8:	40022100 	.word	0x40022100
 8004fcc:	40022300 	.word	0x40022300
 8004fd0:	58026300 	.word	0x58026300
 8004fd4:	005f5e10 	.word	0x005f5e10
 8004fd8:	00bebc20 	.word	0x00bebc20
 8004fdc:	017d7840 	.word	0x017d7840

08004fe0 <LL_ADC_IsEnabled>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <LL_ADC_IsEnabled+0x18>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <LL_ADC_IsEnabled+0x1a>
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_ADC_REG_IsConversionOngoing>:
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d101      	bne.n	800501e <LL_ADC_REG_IsConversionOngoing+0x18>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b0a3      	sub	sp, #140	; 0x8c
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005046:	2302      	movs	r3, #2
 8005048:	e0c1      	b.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005056:	2300      	movs	r3, #0
 8005058:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5e      	ldr	r2, [pc, #376]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d102      	bne.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005064:	4b5d      	ldr	r3, [pc, #372]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e001      	b.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0a0      	b.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffb9 	bl	8005006 <LL_ADC_REG_IsConversionOngoing>
 8005094:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffb2 	bl	8005006 <LL_ADC_REG_IsConversionOngoing>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 8081 	bne.w	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d17c      	bne.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a48      	ldr	r2, [pc, #288]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a46      	ldr	r2, [pc, #280]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d101      	bne.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050c6:	4b46      	ldr	r3, [pc, #280]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050c8:	e000      	b.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80050ca:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050cc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d039      	beq.n	800514a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3a      	ldr	r2, [pc, #232]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a39      	ldr	r2, [pc, #228]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10e      	bne.n	800511a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050fc:	4836      	ldr	r0, [pc, #216]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050fe:	f7ff ff6f 	bl	8004fe0 <LL_ADC_IsEnabled>
 8005102:	4604      	mov	r4, r0
 8005104:	4835      	ldr	r0, [pc, #212]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005106:	f7ff ff6b 	bl	8004fe0 <LL_ADC_IsEnabled>
 800510a:	4603      	mov	r3, r0
 800510c:	4323      	orrs	r3, r4
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e008      	b.n	800512c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800511a:	4833      	ldr	r0, [pc, #204]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800511c:	f7ff ff60 	bl	8004fe0 <LL_ADC_IsEnabled>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d047      	beq.n	80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005136:	4013      	ands	r3, r2
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	6811      	ldr	r1, [r2, #0]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	430a      	orrs	r2, r1
 8005142:	431a      	orrs	r2, r3
 8005144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005146:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005148:	e03a      	b.n	80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800514a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005154:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10e      	bne.n	8005188 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800516a:	481b      	ldr	r0, [pc, #108]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800516c:	f7ff ff38 	bl	8004fe0 <LL_ADC_IsEnabled>
 8005170:	4604      	mov	r4, r0
 8005172:	481a      	ldr	r0, [pc, #104]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005174:	f7ff ff34 	bl	8004fe0 <LL_ADC_IsEnabled>
 8005178:	4603      	mov	r3, r0
 800517a:	4323      	orrs	r3, r4
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e008      	b.n	800519a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005188:	4817      	ldr	r0, [pc, #92]	; (80051e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800518a:	f7ff ff29 	bl	8004fe0 <LL_ADC_IsEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800519e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051aa:	e009      	b.n	80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80051be:	e000      	b.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	378c      	adds	r7, #140	; 0x8c
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd90      	pop	{r4, r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40022000 	.word	0x40022000
 80051dc:	40022100 	.word	0x40022100
 80051e0:	40022300 	.word	0x40022300
 80051e4:	58026300 	.word	0x58026300
 80051e8:	58026000 	.word	0x58026000
 80051ec:	fffff0e0 	.word	0xfffff0e0

080051f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <__NVIC_SetPriorityGrouping+0x40>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800520c:	4013      	ands	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <__NVIC_SetPriorityGrouping+0x44>)
 800521a:	4313      	orrs	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800521e:	4a04      	ldr	r2, [pc, #16]	; (8005230 <__NVIC_SetPriorityGrouping+0x40>)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	60d3      	str	r3, [r2, #12]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000ed00 	.word	0xe000ed00
 8005234:	05fa0000 	.word	0x05fa0000

08005238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800523c:	4b04      	ldr	r3, [pc, #16]	; (8005250 <__NVIC_GetPriorityGrouping+0x18>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	f003 0307 	and.w	r3, r3, #7
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800525e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005262:	2b00      	cmp	r3, #0
 8005264:	db0b      	blt.n	800527e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	f003 021f 	and.w	r2, r3, #31
 800526c:	4907      	ldr	r1, [pc, #28]	; (800528c <__NVIC_EnableIRQ+0x38>)
 800526e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2001      	movs	r0, #1
 8005276:	fa00 f202 	lsl.w	r2, r0, r2
 800527a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	e000e100 	.word	0xe000e100

08005290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	6039      	str	r1, [r7, #0]
 800529a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800529c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	db0a      	blt.n	80052ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	490c      	ldr	r1, [pc, #48]	; (80052dc <__NVIC_SetPriority+0x4c>)
 80052aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ae:	0112      	lsls	r2, r2, #4
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	440b      	add	r3, r1
 80052b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b8:	e00a      	b.n	80052d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	4908      	ldr	r1, [pc, #32]	; (80052e0 <__NVIC_SetPriority+0x50>)
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	3b04      	subs	r3, #4
 80052c8:	0112      	lsls	r2, r2, #4
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	440b      	add	r3, r1
 80052ce:	761a      	strb	r2, [r3, #24]
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	e000e100 	.word	0xe000e100
 80052e0:	e000ed00 	.word	0xe000ed00

080052e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f1c3 0307 	rsb	r3, r3, #7
 80052fe:	2b04      	cmp	r3, #4
 8005300:	bf28      	it	cs
 8005302:	2304      	movcs	r3, #4
 8005304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3304      	adds	r3, #4
 800530a:	2b06      	cmp	r3, #6
 800530c:	d902      	bls.n	8005314 <NVIC_EncodePriority+0x30>
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3b03      	subs	r3, #3
 8005312:	e000      	b.n	8005316 <NVIC_EncodePriority+0x32>
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005318:	f04f 32ff 	mov.w	r2, #4294967295
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43da      	mvns	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	401a      	ands	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800532c:	f04f 31ff 	mov.w	r1, #4294967295
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	43d9      	mvns	r1, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800533c:	4313      	orrs	r3, r2
         );
}
 800533e:	4618      	mov	r0, r3
 8005340:	3724      	adds	r7, #36	; 0x24
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3b01      	subs	r3, #1
 8005358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800535c:	d301      	bcc.n	8005362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800535e:	2301      	movs	r3, #1
 8005360:	e00f      	b.n	8005382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <SysTick_Config+0x40>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3b01      	subs	r3, #1
 8005368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800536a:	210f      	movs	r1, #15
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	f7ff ff8e 	bl	8005290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <SysTick_Config+0x40>)
 8005376:	2200      	movs	r2, #0
 8005378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800537a:	4b04      	ldr	r3, [pc, #16]	; (800538c <SysTick_Config+0x40>)
 800537c:	2207      	movs	r2, #7
 800537e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	e000e010 	.word	0xe000e010

08005390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ff29 	bl	80051f0 <__NVIC_SetPriorityGrouping>
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	4603      	mov	r3, r0
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053b4:	f7ff ff40 	bl	8005238 <__NVIC_GetPriorityGrouping>
 80053b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	6978      	ldr	r0, [r7, #20]
 80053c0:	f7ff ff90 	bl	80052e4 <NVIC_EncodePriority>
 80053c4:	4602      	mov	r2, r0
 80053c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ca:	4611      	mov	r1, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff5f 	bl	8005290 <__NVIC_SetPriority>
}
 80053d2:	bf00      	nop
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff33 	bl	8005254 <__NVIC_EnableIRQ>
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff ffa4 	bl	800534c <SysTick_Config>
 8005404:	4603      	mov	r3, r0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005418:	f7fe fb34 	bl	8003a84 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e312      	b.n	8005a4e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a66      	ldr	r2, [pc, #408]	; (80055c8 <HAL_DMA_Init+0x1b8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d04a      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a65      	ldr	r2, [pc, #404]	; (80055cc <HAL_DMA_Init+0x1bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d045      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a63      	ldr	r2, [pc, #396]	; (80055d0 <HAL_DMA_Init+0x1c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d040      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a62      	ldr	r2, [pc, #392]	; (80055d4 <HAL_DMA_Init+0x1c4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d03b      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a60      	ldr	r2, [pc, #384]	; (80055d8 <HAL_DMA_Init+0x1c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d036      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5f      	ldr	r2, [pc, #380]	; (80055dc <HAL_DMA_Init+0x1cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d031      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5d      	ldr	r2, [pc, #372]	; (80055e0 <HAL_DMA_Init+0x1d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02c      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5c      	ldr	r2, [pc, #368]	; (80055e4 <HAL_DMA_Init+0x1d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d027      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_DMA_Init+0x1d8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d022      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a59      	ldr	r2, [pc, #356]	; (80055ec <HAL_DMA_Init+0x1dc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d01d      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a57      	ldr	r2, [pc, #348]	; (80055f0 <HAL_DMA_Init+0x1e0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d018      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a56      	ldr	r2, [pc, #344]	; (80055f4 <HAL_DMA_Init+0x1e4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a54      	ldr	r2, [pc, #336]	; (80055f8 <HAL_DMA_Init+0x1e8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a53      	ldr	r2, [pc, #332]	; (80055fc <HAL_DMA_Init+0x1ec>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a51      	ldr	r2, [pc, #324]	; (8005600 <HAL_DMA_Init+0x1f0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_DMA_Init+0xb8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a50      	ldr	r2, [pc, #320]	; (8005604 <HAL_DMA_Init+0x1f4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_DMA_Init+0xbc>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_DMA_Init+0xbe>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 813c 	beq.w	800574c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <HAL_DMA_Init+0x1b8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <HAL_DMA_Init+0x174>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a36      	ldr	r2, [pc, #216]	; (80055cc <HAL_DMA_Init+0x1bc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <HAL_DMA_Init+0x174>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a34      	ldr	r2, [pc, #208]	; (80055d0 <HAL_DMA_Init+0x1c0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a33      	ldr	r2, [pc, #204]	; (80055d4 <HAL_DMA_Init+0x1c4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <HAL_DMA_Init+0x174>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a31      	ldr	r2, [pc, #196]	; (80055d8 <HAL_DMA_Init+0x1c8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a30      	ldr	r2, [pc, #192]	; (80055dc <HAL_DMA_Init+0x1cc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2e      	ldr	r2, [pc, #184]	; (80055e0 <HAL_DMA_Init+0x1d0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <HAL_DMA_Init+0x174>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <HAL_DMA_Init+0x1d4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2b      	ldr	r2, [pc, #172]	; (80055e8 <HAL_DMA_Init+0x1d8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_DMA_Init+0x174>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2a      	ldr	r2, [pc, #168]	; (80055ec <HAL_DMA_Init+0x1dc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <HAL_DMA_Init+0x1e0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_DMA_Init+0x1e4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_DMA_Init+0x174>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <HAL_DMA_Init+0x1e8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a24      	ldr	r2, [pc, #144]	; (80055fc <HAL_DMA_Init+0x1ec>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_DMA_Init+0x174>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a22      	ldr	r2, [pc, #136]	; (8005600 <HAL_DMA_Init+0x1f0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_DMA_Init+0x174>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_DMA_Init+0x1f4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <HAL_DMA_Init+0x186>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e007      	b.n	80055a6 <HAL_DMA_Init+0x196>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055a6:	e02f      	b.n	8005608 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055a8:	f7fe fa6c 	bl	8003a84 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d928      	bls.n	8005608 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2203      	movs	r2, #3
 80055c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e242      	b.n	8005a4e <HAL_DMA_Init+0x63e>
 80055c8:	40020010 	.word	0x40020010
 80055cc:	40020028 	.word	0x40020028
 80055d0:	40020040 	.word	0x40020040
 80055d4:	40020058 	.word	0x40020058
 80055d8:	40020070 	.word	0x40020070
 80055dc:	40020088 	.word	0x40020088
 80055e0:	400200a0 	.word	0x400200a0
 80055e4:	400200b8 	.word	0x400200b8
 80055e8:	40020410 	.word	0x40020410
 80055ec:	40020428 	.word	0x40020428
 80055f0:	40020440 	.word	0x40020440
 80055f4:	40020458 	.word	0x40020458
 80055f8:	40020470 	.word	0x40020470
 80055fc:	40020488 	.word	0x40020488
 8005600:	400204a0 	.word	0x400204a0
 8005604:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1c8      	bne.n	80055a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4b83      	ldr	r3, [pc, #524]	; (8005830 <HAL_DMA_Init+0x420>)
 8005622:	4013      	ands	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800562e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005646:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b04      	cmp	r3, #4
 800565a:	d107      	bne.n	800566c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	4313      	orrs	r3, r2
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b28      	cmp	r3, #40	; 0x28
 8005672:	d903      	bls.n	800567c <HAL_DMA_Init+0x26c>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b2e      	cmp	r3, #46	; 0x2e
 800567a:	d91f      	bls.n	80056bc <HAL_DMA_Init+0x2ac>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b3e      	cmp	r3, #62	; 0x3e
 8005682:	d903      	bls.n	800568c <HAL_DMA_Init+0x27c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b42      	cmp	r3, #66	; 0x42
 800568a:	d917      	bls.n	80056bc <HAL_DMA_Init+0x2ac>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b46      	cmp	r3, #70	; 0x46
 8005692:	d903      	bls.n	800569c <HAL_DMA_Init+0x28c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b48      	cmp	r3, #72	; 0x48
 800569a:	d90f      	bls.n	80056bc <HAL_DMA_Init+0x2ac>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b4e      	cmp	r3, #78	; 0x4e
 80056a2:	d903      	bls.n	80056ac <HAL_DMA_Init+0x29c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b52      	cmp	r3, #82	; 0x52
 80056aa:	d907      	bls.n	80056bc <HAL_DMA_Init+0x2ac>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b73      	cmp	r3, #115	; 0x73
 80056b2:	d905      	bls.n	80056c0 <HAL_DMA_Init+0x2b0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b77      	cmp	r3, #119	; 0x77
 80056ba:	d801      	bhi.n	80056c0 <HAL_DMA_Init+0x2b0>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_DMA_Init+0x2b2>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d117      	bne.n	8005728 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00e      	beq.n	8005728 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fdca 	bl	80072a4 <DMA_CheckFifoParam>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2240      	movs	r2, #64	; 0x40
 800571a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e192      	b.n	8005a4e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fd05 	bl	8007140 <DMA_CalcBaseAndBitshift>
 8005736:	4603      	mov	r3, r0
 8005738:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	223f      	movs	r2, #63	; 0x3f
 8005744:	409a      	lsls	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	e0c8      	b.n	80058de <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a38      	ldr	r2, [pc, #224]	; (8005834 <HAL_DMA_Init+0x424>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_DMA_Init+0x38c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a37      	ldr	r2, [pc, #220]	; (8005838 <HAL_DMA_Init+0x428>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d01d      	beq.n	800579c <HAL_DMA_Init+0x38c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a35      	ldr	r2, [pc, #212]	; (800583c <HAL_DMA_Init+0x42c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_DMA_Init+0x38c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a34      	ldr	r2, [pc, #208]	; (8005840 <HAL_DMA_Init+0x430>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_DMA_Init+0x38c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a32      	ldr	r2, [pc, #200]	; (8005844 <HAL_DMA_Init+0x434>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_DMA_Init+0x38c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a31      	ldr	r2, [pc, #196]	; (8005848 <HAL_DMA_Init+0x438>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_DMA_Init+0x38c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2f      	ldr	r2, [pc, #188]	; (800584c <HAL_DMA_Init+0x43c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_DMA_Init+0x38c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2e      	ldr	r2, [pc, #184]	; (8005850 <HAL_DMA_Init+0x440>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d101      	bne.n	80057a0 <HAL_DMA_Init+0x390>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_DMA_Init+0x392>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8092 	beq.w	80058cc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a21      	ldr	r2, [pc, #132]	; (8005834 <HAL_DMA_Init+0x424>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d021      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a20      	ldr	r2, [pc, #128]	; (8005838 <HAL_DMA_Init+0x428>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d01c      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1e      	ldr	r2, [pc, #120]	; (800583c <HAL_DMA_Init+0x42c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d017      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1d      	ldr	r2, [pc, #116]	; (8005840 <HAL_DMA_Init+0x430>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d012      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_DMA_Init+0x434>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00d      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <HAL_DMA_Init+0x438>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d008      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_DMA_Init+0x43c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <HAL_DMA_Init+0x3e6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <HAL_DMA_Init+0x440>)
 80057f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_DMA_Init+0x444>)
 8005812:	4013      	ands	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d01c      	beq.n	8005858 <HAL_DMA_Init+0x448>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d102      	bne.n	800582c <HAL_DMA_Init+0x41c>
 8005826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800582a:	e016      	b.n	800585a <HAL_DMA_Init+0x44a>
 800582c:	2300      	movs	r3, #0
 800582e:	e014      	b.n	800585a <HAL_DMA_Init+0x44a>
 8005830:	fe10803f 	.word	0xfe10803f
 8005834:	58025408 	.word	0x58025408
 8005838:	5802541c 	.word	0x5802541c
 800583c:	58025430 	.word	0x58025430
 8005840:	58025444 	.word	0x58025444
 8005844:	58025458 	.word	0x58025458
 8005848:	5802546c 	.word	0x5802546c
 800584c:	58025480 	.word	0x58025480
 8005850:	58025494 	.word	0x58025494
 8005854:	fffe000f 	.word	0xfffe000f
 8005858:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68d2      	ldr	r2, [r2, #12]
 800585e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005888:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	4b6e      	ldr	r3, [pc, #440]	; (8005a58 <HAL_DMA_Init+0x648>)
 80058a0:	4413      	add	r3, r2
 80058a2:	4a6e      	ldr	r2, [pc, #440]	; (8005a5c <HAL_DMA_Init+0x64c>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	009a      	lsls	r2, r3, #2
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fc45 	bl	8007140 <DMA_CalcBaseAndBitshift>
 80058b6:	4603      	mov	r3, r0
 80058b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2201      	movs	r2, #1
 80058c4:	409a      	lsls	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	e008      	b.n	80058de <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2240      	movs	r2, #64	; 0x40
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2203      	movs	r2, #3
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0b7      	b.n	8005a4e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5f      	ldr	r2, [pc, #380]	; (8005a60 <HAL_DMA_Init+0x650>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d072      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5d      	ldr	r2, [pc, #372]	; (8005a64 <HAL_DMA_Init+0x654>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d06d      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5c      	ldr	r2, [pc, #368]	; (8005a68 <HAL_DMA_Init+0x658>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d068      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5a      	ldr	r2, [pc, #360]	; (8005a6c <HAL_DMA_Init+0x65c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d063      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a59      	ldr	r2, [pc, #356]	; (8005a70 <HAL_DMA_Init+0x660>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d05e      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a57      	ldr	r2, [pc, #348]	; (8005a74 <HAL_DMA_Init+0x664>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d059      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a56      	ldr	r2, [pc, #344]	; (8005a78 <HAL_DMA_Init+0x668>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d054      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a54      	ldr	r2, [pc, #336]	; (8005a7c <HAL_DMA_Init+0x66c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d04f      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a53      	ldr	r2, [pc, #332]	; (8005a80 <HAL_DMA_Init+0x670>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04a      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a51      	ldr	r2, [pc, #324]	; (8005a84 <HAL_DMA_Init+0x674>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d045      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a50      	ldr	r2, [pc, #320]	; (8005a88 <HAL_DMA_Init+0x678>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d040      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a4e      	ldr	r2, [pc, #312]	; (8005a8c <HAL_DMA_Init+0x67c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d03b      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4d      	ldr	r2, [pc, #308]	; (8005a90 <HAL_DMA_Init+0x680>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d036      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a4b      	ldr	r2, [pc, #300]	; (8005a94 <HAL_DMA_Init+0x684>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a4a      	ldr	r2, [pc, #296]	; (8005a98 <HAL_DMA_Init+0x688>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d02c      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a48      	ldr	r2, [pc, #288]	; (8005a9c <HAL_DMA_Init+0x68c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a47      	ldr	r2, [pc, #284]	; (8005aa0 <HAL_DMA_Init+0x690>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a45      	ldr	r2, [pc, #276]	; (8005aa4 <HAL_DMA_Init+0x694>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a44      	ldr	r2, [pc, #272]	; (8005aa8 <HAL_DMA_Init+0x698>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a42      	ldr	r2, [pc, #264]	; (8005aac <HAL_DMA_Init+0x69c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <HAL_DMA_Init+0x6a0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3f      	ldr	r2, [pc, #252]	; (8005ab4 <HAL_DMA_Init+0x6a4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3e      	ldr	r2, [pc, #248]	; (8005ab8 <HAL_DMA_Init+0x6a8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_Init+0x5be>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3c      	ldr	r2, [pc, #240]	; (8005abc <HAL_DMA_Init+0x6ac>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_DMA_Init+0x5c2>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_DMA_Init+0x5c4>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d032      	beq.n	8005a3e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 fcdf 	bl	800739c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d102      	bne.n	80059ec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_DMA_Init+0x61c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d80c      	bhi.n	8005a2c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fd5c 	bl	80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	e008      	b.n	8005a3e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	a7fdabf8 	.word	0xa7fdabf8
 8005a5c:	cccccccd 	.word	0xcccccccd
 8005a60:	40020010 	.word	0x40020010
 8005a64:	40020028 	.word	0x40020028
 8005a68:	40020040 	.word	0x40020040
 8005a6c:	40020058 	.word	0x40020058
 8005a70:	40020070 	.word	0x40020070
 8005a74:	40020088 	.word	0x40020088
 8005a78:	400200a0 	.word	0x400200a0
 8005a7c:	400200b8 	.word	0x400200b8
 8005a80:	40020410 	.word	0x40020410
 8005a84:	40020428 	.word	0x40020428
 8005a88:	40020440 	.word	0x40020440
 8005a8c:	40020458 	.word	0x40020458
 8005a90:	40020470 	.word	0x40020470
 8005a94:	40020488 	.word	0x40020488
 8005a98:	400204a0 	.word	0x400204a0
 8005a9c:	400204b8 	.word	0x400204b8
 8005aa0:	58025408 	.word	0x58025408
 8005aa4:	5802541c 	.word	0x5802541c
 8005aa8:	58025430 	.word	0x58025430
 8005aac:	58025444 	.word	0x58025444
 8005ab0:	58025458 	.word	0x58025458
 8005ab4:	5802546c 	.word	0x5802546c
 8005ab8:	58025480 	.word	0x58025480
 8005abc:	58025494 	.word	0x58025494

08005ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e226      	b.n	8005f2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_DMA_Start_IT+0x2a>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e21f      	b.n	8005f2a <HAL_DMA_Start_IT+0x46a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	f040 820a 	bne.w	8005f14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a68      	ldr	r2, [pc, #416]	; (8005cb4 <HAL_DMA_Start_IT+0x1f4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d04a      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a66      	ldr	r2, [pc, #408]	; (8005cb8 <HAL_DMA_Start_IT+0x1f8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d045      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a65      	ldr	r2, [pc, #404]	; (8005cbc <HAL_DMA_Start_IT+0x1fc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d040      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a63      	ldr	r2, [pc, #396]	; (8005cc0 <HAL_DMA_Start_IT+0x200>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d03b      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a62      	ldr	r2, [pc, #392]	; (8005cc4 <HAL_DMA_Start_IT+0x204>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d036      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a60      	ldr	r2, [pc, #384]	; (8005cc8 <HAL_DMA_Start_IT+0x208>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d031      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5f      	ldr	r2, [pc, #380]	; (8005ccc <HAL_DMA_Start_IT+0x20c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d02c      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5d      	ldr	r2, [pc, #372]	; (8005cd0 <HAL_DMA_Start_IT+0x210>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d027      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a5c      	ldr	r2, [pc, #368]	; (8005cd4 <HAL_DMA_Start_IT+0x214>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d022      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5a      	ldr	r2, [pc, #360]	; (8005cd8 <HAL_DMA_Start_IT+0x218>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01d      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a59      	ldr	r2, [pc, #356]	; (8005cdc <HAL_DMA_Start_IT+0x21c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d018      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a57      	ldr	r2, [pc, #348]	; (8005ce0 <HAL_DMA_Start_IT+0x220>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a56      	ldr	r2, [pc, #344]	; (8005ce4 <HAL_DMA_Start_IT+0x224>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00e      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a54      	ldr	r2, [pc, #336]	; (8005ce8 <HAL_DMA_Start_IT+0x228>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a53      	ldr	r2, [pc, #332]	; (8005cec <HAL_DMA_Start_IT+0x22c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_DMA_Start_IT+0xee>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a51      	ldr	r2, [pc, #324]	; (8005cf0 <HAL_DMA_Start_IT+0x230>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d108      	bne.n	8005bc0 <HAL_DMA_Start_IT+0x100>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e007      	b.n	8005bd0 <HAL_DMA_Start_IT+0x110>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 f906 	bl	8006de8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <HAL_DMA_Start_IT+0x1f4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d04a      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a33      	ldr	r2, [pc, #204]	; (8005cb8 <HAL_DMA_Start_IT+0x1f8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d045      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a31      	ldr	r2, [pc, #196]	; (8005cbc <HAL_DMA_Start_IT+0x1fc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d040      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <HAL_DMA_Start_IT+0x200>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d03b      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_DMA_Start_IT+0x204>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d036      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_DMA_Start_IT+0x208>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d031      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <HAL_DMA_Start_IT+0x20c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d02c      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <HAL_DMA_Start_IT+0x210>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d027      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <HAL_DMA_Start_IT+0x214>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d022      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <HAL_DMA_Start_IT+0x218>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d01d      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <HAL_DMA_Start_IT+0x21c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <HAL_DMA_Start_IT+0x220>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <HAL_DMA_Start_IT+0x224>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <HAL_DMA_Start_IT+0x228>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <HAL_DMA_Start_IT+0x22c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_DMA_Start_IT+0x1bc>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <HAL_DMA_Start_IT+0x230>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d101      	bne.n	8005c80 <HAL_DMA_Start_IT+0x1c0>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_DMA_Start_IT+0x1c2>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d036      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f023 021e 	bic.w	r2, r3, #30
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0216 	orr.w	r2, r2, #22
 8005c98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d03e      	beq.n	8005d20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0208 	orr.w	r2, r2, #8
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e035      	b.n	8005d20 <HAL_DMA_Start_IT+0x260>
 8005cb4:	40020010 	.word	0x40020010
 8005cb8:	40020028 	.word	0x40020028
 8005cbc:	40020040 	.word	0x40020040
 8005cc0:	40020058 	.word	0x40020058
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	40020088 	.word	0x40020088
 8005ccc:	400200a0 	.word	0x400200a0
 8005cd0:	400200b8 	.word	0x400200b8
 8005cd4:	40020410 	.word	0x40020410
 8005cd8:	40020428 	.word	0x40020428
 8005cdc:	40020440 	.word	0x40020440
 8005ce0:	40020458 	.word	0x40020458
 8005ce4:	40020470 	.word	0x40020470
 8005ce8:	40020488 	.word	0x40020488
 8005cec:	400204a0 	.word	0x400204a0
 8005cf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 020e 	bic.w	r2, r3, #14
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 020a 	orr.w	r2, r2, #10
 8005d06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0204 	orr.w	r2, r2, #4
 8005d1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a83      	ldr	r2, [pc, #524]	; (8005f34 <HAL_DMA_Start_IT+0x474>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d072      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a82      	ldr	r2, [pc, #520]	; (8005f38 <HAL_DMA_Start_IT+0x478>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d06d      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a80      	ldr	r2, [pc, #512]	; (8005f3c <HAL_DMA_Start_IT+0x47c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d068      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a7f      	ldr	r2, [pc, #508]	; (8005f40 <HAL_DMA_Start_IT+0x480>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d063      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a7d      	ldr	r2, [pc, #500]	; (8005f44 <HAL_DMA_Start_IT+0x484>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d05e      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a7c      	ldr	r2, [pc, #496]	; (8005f48 <HAL_DMA_Start_IT+0x488>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d059      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7a      	ldr	r2, [pc, #488]	; (8005f4c <HAL_DMA_Start_IT+0x48c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d054      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a79      	ldr	r2, [pc, #484]	; (8005f50 <HAL_DMA_Start_IT+0x490>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d04f      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a77      	ldr	r2, [pc, #476]	; (8005f54 <HAL_DMA_Start_IT+0x494>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d04a      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a76      	ldr	r2, [pc, #472]	; (8005f58 <HAL_DMA_Start_IT+0x498>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d045      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a74      	ldr	r2, [pc, #464]	; (8005f5c <HAL_DMA_Start_IT+0x49c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d040      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a73      	ldr	r2, [pc, #460]	; (8005f60 <HAL_DMA_Start_IT+0x4a0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d03b      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a71      	ldr	r2, [pc, #452]	; (8005f64 <HAL_DMA_Start_IT+0x4a4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d036      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a70      	ldr	r2, [pc, #448]	; (8005f68 <HAL_DMA_Start_IT+0x4a8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d031      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6e      	ldr	r2, [pc, #440]	; (8005f6c <HAL_DMA_Start_IT+0x4ac>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d02c      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a6d      	ldr	r2, [pc, #436]	; (8005f70 <HAL_DMA_Start_IT+0x4b0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d027      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6b      	ldr	r2, [pc, #428]	; (8005f74 <HAL_DMA_Start_IT+0x4b4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d022      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6a      	ldr	r2, [pc, #424]	; (8005f78 <HAL_DMA_Start_IT+0x4b8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d01d      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a68      	ldr	r2, [pc, #416]	; (8005f7c <HAL_DMA_Start_IT+0x4bc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a67      	ldr	r2, [pc, #412]	; (8005f80 <HAL_DMA_Start_IT+0x4c0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d013      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a65      	ldr	r2, [pc, #404]	; (8005f84 <HAL_DMA_Start_IT+0x4c4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a64      	ldr	r2, [pc, #400]	; (8005f88 <HAL_DMA_Start_IT+0x4c8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a62      	ldr	r2, [pc, #392]	; (8005f8c <HAL_DMA_Start_IT+0x4cc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_DMA_Start_IT+0x350>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a61      	ldr	r2, [pc, #388]	; (8005f90 <HAL_DMA_Start_IT+0x4d0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d101      	bne.n	8005e14 <HAL_DMA_Start_IT+0x354>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <HAL_DMA_Start_IT+0x356>
 8005e14:	2300      	movs	r3, #0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01a      	beq.n	8005e50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a37      	ldr	r2, [pc, #220]	; (8005f34 <HAL_DMA_Start_IT+0x474>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d04a      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a36      	ldr	r2, [pc, #216]	; (8005f38 <HAL_DMA_Start_IT+0x478>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d045      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a34      	ldr	r2, [pc, #208]	; (8005f3c <HAL_DMA_Start_IT+0x47c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d040      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a33      	ldr	r2, [pc, #204]	; (8005f40 <HAL_DMA_Start_IT+0x480>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d03b      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a31      	ldr	r2, [pc, #196]	; (8005f44 <HAL_DMA_Start_IT+0x484>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d036      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <HAL_DMA_Start_IT+0x488>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d031      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2e      	ldr	r2, [pc, #184]	; (8005f4c <HAL_DMA_Start_IT+0x48c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d02c      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <HAL_DMA_Start_IT+0x490>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d027      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <HAL_DMA_Start_IT+0x494>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <HAL_DMA_Start_IT+0x498>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <HAL_DMA_Start_IT+0x49c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a27      	ldr	r2, [pc, #156]	; (8005f60 <HAL_DMA_Start_IT+0x4a0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a25      	ldr	r2, [pc, #148]	; (8005f64 <HAL_DMA_Start_IT+0x4a4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <HAL_DMA_Start_IT+0x4a8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <HAL_DMA_Start_IT+0x4ac>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_DMA_Start_IT+0x430>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_DMA_Start_IT+0x4b0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d108      	bne.n	8005f02 <HAL_DMA_Start_IT+0x442>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e012      	b.n	8005f28 <HAL_DMA_Start_IT+0x468>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e009      	b.n	8005f28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40020010 	.word	0x40020010
 8005f38:	40020028 	.word	0x40020028
 8005f3c:	40020040 	.word	0x40020040
 8005f40:	40020058 	.word	0x40020058
 8005f44:	40020070 	.word	0x40020070
 8005f48:	40020088 	.word	0x40020088
 8005f4c:	400200a0 	.word	0x400200a0
 8005f50:	400200b8 	.word	0x400200b8
 8005f54:	40020410 	.word	0x40020410
 8005f58:	40020428 	.word	0x40020428
 8005f5c:	40020440 	.word	0x40020440
 8005f60:	40020458 	.word	0x40020458
 8005f64:	40020470 	.word	0x40020470
 8005f68:	40020488 	.word	0x40020488
 8005f6c:	400204a0 	.word	0x400204a0
 8005f70:	400204b8 	.word	0x400204b8
 8005f74:	58025408 	.word	0x58025408
 8005f78:	5802541c 	.word	0x5802541c
 8005f7c:	58025430 	.word	0x58025430
 8005f80:	58025444 	.word	0x58025444
 8005f84:	58025458 	.word	0x58025458
 8005f88:	5802546c 	.word	0x5802546c
 8005f8c:	58025480 	.word	0x58025480
 8005f90:	58025494 	.word	0x58025494

08005f94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fa0:	4b67      	ldr	r3, [pc, #412]	; (8006140 <HAL_DMA_IRQHandler+0x1ac>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a67      	ldr	r2, [pc, #412]	; (8006144 <HAL_DMA_IRQHandler+0x1b0>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0a9b      	lsrs	r3, r3, #10
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5f      	ldr	r2, [pc, #380]	; (8006148 <HAL_DMA_IRQHandler+0x1b4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d04a      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5d      	ldr	r2, [pc, #372]	; (800614c <HAL_DMA_IRQHandler+0x1b8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d045      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5c      	ldr	r2, [pc, #368]	; (8006150 <HAL_DMA_IRQHandler+0x1bc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d040      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5a      	ldr	r2, [pc, #360]	; (8006154 <HAL_DMA_IRQHandler+0x1c0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d03b      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a59      	ldr	r2, [pc, #356]	; (8006158 <HAL_DMA_IRQHandler+0x1c4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d036      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a57      	ldr	r2, [pc, #348]	; (800615c <HAL_DMA_IRQHandler+0x1c8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d031      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a56      	ldr	r2, [pc, #344]	; (8006160 <HAL_DMA_IRQHandler+0x1cc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d02c      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a54      	ldr	r2, [pc, #336]	; (8006164 <HAL_DMA_IRQHandler+0x1d0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d027      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a53      	ldr	r2, [pc, #332]	; (8006168 <HAL_DMA_IRQHandler+0x1d4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a51      	ldr	r2, [pc, #324]	; (800616c <HAL_DMA_IRQHandler+0x1d8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a50      	ldr	r2, [pc, #320]	; (8006170 <HAL_DMA_IRQHandler+0x1dc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a4e      	ldr	r2, [pc, #312]	; (8006174 <HAL_DMA_IRQHandler+0x1e0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4d      	ldr	r2, [pc, #308]	; (8006178 <HAL_DMA_IRQHandler+0x1e4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4b      	ldr	r2, [pc, #300]	; (800617c <HAL_DMA_IRQHandler+0x1e8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4a      	ldr	r2, [pc, #296]	; (8006180 <HAL_DMA_IRQHandler+0x1ec>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_DMA_IRQHandler+0xd2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a48      	ldr	r2, [pc, #288]	; (8006184 <HAL_DMA_IRQHandler+0x1f0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d101      	bne.n	800606a <HAL_DMA_IRQHandler+0xd6>
 8006066:	2301      	movs	r3, #1
 8006068:	e000      	b.n	800606c <HAL_DMA_IRQHandler+0xd8>
 800606a:	2300      	movs	r3, #0
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 842b 	beq.w	80068c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2208      	movs	r2, #8
 800607c:	409a      	lsls	r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80a2 	beq.w	80061cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2e      	ldr	r2, [pc, #184]	; (8006148 <HAL_DMA_IRQHandler+0x1b4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04a      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2d      	ldr	r2, [pc, #180]	; (800614c <HAL_DMA_IRQHandler+0x1b8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d045      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <HAL_DMA_IRQHandler+0x1bc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d040      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <HAL_DMA_IRQHandler+0x1c0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d03b      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a28      	ldr	r2, [pc, #160]	; (8006158 <HAL_DMA_IRQHandler+0x1c4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d036      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a27      	ldr	r2, [pc, #156]	; (800615c <HAL_DMA_IRQHandler+0x1c8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d031      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a25      	ldr	r2, [pc, #148]	; (8006160 <HAL_DMA_IRQHandler+0x1cc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d02c      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a24      	ldr	r2, [pc, #144]	; (8006164 <HAL_DMA_IRQHandler+0x1d0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d027      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a22      	ldr	r2, [pc, #136]	; (8006168 <HAL_DMA_IRQHandler+0x1d4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d022      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a21      	ldr	r2, [pc, #132]	; (800616c <HAL_DMA_IRQHandler+0x1d8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d01d      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1f      	ldr	r2, [pc, #124]	; (8006170 <HAL_DMA_IRQHandler+0x1dc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <HAL_DMA_IRQHandler+0x1e0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <HAL_DMA_IRQHandler+0x1e4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1b      	ldr	r2, [pc, #108]	; (800617c <HAL_DMA_IRQHandler+0x1e8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a19      	ldr	r2, [pc, #100]	; (8006180 <HAL_DMA_IRQHandler+0x1ec>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_DMA_IRQHandler+0x194>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_DMA_IRQHandler+0x1f0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d12f      	bne.n	8006188 <HAL_DMA_IRQHandler+0x1f4>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	bf14      	ite	ne
 8006136:	2301      	movne	r3, #1
 8006138:	2300      	moveq	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	e02e      	b.n	800619c <HAL_DMA_IRQHandler+0x208>
 800613e:	bf00      	nop
 8006140:	24000000 	.word	0x24000000
 8006144:	1b4e81b5 	.word	0x1b4e81b5
 8006148:	40020010 	.word	0x40020010
 800614c:	40020028 	.word	0x40020028
 8006150:	40020040 	.word	0x40020040
 8006154:	40020058 	.word	0x40020058
 8006158:	40020070 	.word	0x40020070
 800615c:	40020088 	.word	0x40020088
 8006160:	400200a0 	.word	0x400200a0
 8006164:	400200b8 	.word	0x400200b8
 8006168:	40020410 	.word	0x40020410
 800616c:	40020428 	.word	0x40020428
 8006170:	40020440 	.word	0x40020440
 8006174:	40020458 	.word	0x40020458
 8006178:	40020470 	.word	0x40020470
 800617c:	40020488 	.word	0x40020488
 8006180:	400204a0 	.word	0x400204a0
 8006184:	400204b8 	.word	0x400204b8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf14      	ite	ne
 8006196:	2301      	movne	r3, #1
 8006198:	2300      	moveq	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d015      	beq.n	80061cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0204 	bic.w	r2, r2, #4
 80061ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	2208      	movs	r2, #8
 80061ba:	409a      	lsls	r2, r3
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	f043 0201 	orr.w	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	fa22 f303 	lsr.w	r3, r2, r3
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d06e      	beq.n	80062c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a69      	ldr	r2, [pc, #420]	; (800638c <HAL_DMA_IRQHandler+0x3f8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d04a      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a67      	ldr	r2, [pc, #412]	; (8006390 <HAL_DMA_IRQHandler+0x3fc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d045      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a66      	ldr	r2, [pc, #408]	; (8006394 <HAL_DMA_IRQHandler+0x400>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d040      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a64      	ldr	r2, [pc, #400]	; (8006398 <HAL_DMA_IRQHandler+0x404>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d03b      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a63      	ldr	r2, [pc, #396]	; (800639c <HAL_DMA_IRQHandler+0x408>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d036      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a61      	ldr	r2, [pc, #388]	; (80063a0 <HAL_DMA_IRQHandler+0x40c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d031      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a60      	ldr	r2, [pc, #384]	; (80063a4 <HAL_DMA_IRQHandler+0x410>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d02c      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a5e      	ldr	r2, [pc, #376]	; (80063a8 <HAL_DMA_IRQHandler+0x414>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d027      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a5d      	ldr	r2, [pc, #372]	; (80063ac <HAL_DMA_IRQHandler+0x418>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5b      	ldr	r2, [pc, #364]	; (80063b0 <HAL_DMA_IRQHandler+0x41c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01d      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5a      	ldr	r2, [pc, #360]	; (80063b4 <HAL_DMA_IRQHandler+0x420>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a58      	ldr	r2, [pc, #352]	; (80063b8 <HAL_DMA_IRQHandler+0x424>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a57      	ldr	r2, [pc, #348]	; (80063bc <HAL_DMA_IRQHandler+0x428>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a55      	ldr	r2, [pc, #340]	; (80063c0 <HAL_DMA_IRQHandler+0x42c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a54      	ldr	r2, [pc, #336]	; (80063c4 <HAL_DMA_IRQHandler+0x430>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_DMA_IRQHandler+0x2ee>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a52      	ldr	r2, [pc, #328]	; (80063c8 <HAL_DMA_IRQHandler+0x434>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10a      	bne.n	8006298 <HAL_DMA_IRQHandler+0x304>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e003      	b.n	80062a0 <HAL_DMA_IRQHandler+0x30c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	f043 0202 	orr.w	r2, r3, #2
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2204      	movs	r2, #4
 80062ca:	409a      	lsls	r2, r3
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 808f 	beq.w	80063f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2c      	ldr	r2, [pc, #176]	; (800638c <HAL_DMA_IRQHandler+0x3f8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2a      	ldr	r2, [pc, #168]	; (8006390 <HAL_DMA_IRQHandler+0x3fc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a29      	ldr	r2, [pc, #164]	; (8006394 <HAL_DMA_IRQHandler+0x400>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <HAL_DMA_IRQHandler+0x404>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <HAL_DMA_IRQHandler+0x408>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a24      	ldr	r2, [pc, #144]	; (80063a0 <HAL_DMA_IRQHandler+0x40c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a23      	ldr	r2, [pc, #140]	; (80063a4 <HAL_DMA_IRQHandler+0x410>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <HAL_DMA_IRQHandler+0x414>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a20      	ldr	r2, [pc, #128]	; (80063ac <HAL_DMA_IRQHandler+0x418>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_DMA_IRQHandler+0x41c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1d      	ldr	r2, [pc, #116]	; (80063b4 <HAL_DMA_IRQHandler+0x420>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_DMA_IRQHandler+0x424>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <HAL_DMA_IRQHandler+0x428>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_DMA_IRQHandler+0x42c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_DMA_IRQHandler+0x430>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_IRQHandler+0x3e2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <HAL_DMA_IRQHandler+0x434>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d12a      	bne.n	80063cc <HAL_DMA_IRQHandler+0x438>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e023      	b.n	80063d4 <HAL_DMA_IRQHandler+0x440>
 800638c:	40020010 	.word	0x40020010
 8006390:	40020028 	.word	0x40020028
 8006394:	40020040 	.word	0x40020040
 8006398:	40020058 	.word	0x40020058
 800639c:	40020070 	.word	0x40020070
 80063a0:	40020088 	.word	0x40020088
 80063a4:	400200a0 	.word	0x400200a0
 80063a8:	400200b8 	.word	0x400200b8
 80063ac:	40020410 	.word	0x40020410
 80063b0:	40020428 	.word	0x40020428
 80063b4:	40020440 	.word	0x40020440
 80063b8:	40020458 	.word	0x40020458
 80063bc:	40020470 	.word	0x40020470
 80063c0:	40020488 	.word	0x40020488
 80063c4:	400204a0 	.word	0x400204a0
 80063c8:	400204b8 	.word	0x400204b8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2204      	movs	r2, #4
 80063e2:	409a      	lsls	r2, r3
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ec:	f043 0204 	orr.w	r2, r3, #4
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	2210      	movs	r2, #16
 80063fe:	409a      	lsls	r2, r3
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80a6 	beq.w	8006556 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a85      	ldr	r2, [pc, #532]	; (8006624 <HAL_DMA_IRQHandler+0x690>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a83      	ldr	r2, [pc, #524]	; (8006628 <HAL_DMA_IRQHandler+0x694>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a82      	ldr	r2, [pc, #520]	; (800662c <HAL_DMA_IRQHandler+0x698>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a80      	ldr	r2, [pc, #512]	; (8006630 <HAL_DMA_IRQHandler+0x69c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7f      	ldr	r2, [pc, #508]	; (8006634 <HAL_DMA_IRQHandler+0x6a0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a7d      	ldr	r2, [pc, #500]	; (8006638 <HAL_DMA_IRQHandler+0x6a4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a7c      	ldr	r2, [pc, #496]	; (800663c <HAL_DMA_IRQHandler+0x6a8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7a      	ldr	r2, [pc, #488]	; (8006640 <HAL_DMA_IRQHandler+0x6ac>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a79      	ldr	r2, [pc, #484]	; (8006644 <HAL_DMA_IRQHandler+0x6b0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a77      	ldr	r2, [pc, #476]	; (8006648 <HAL_DMA_IRQHandler+0x6b4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a76      	ldr	r2, [pc, #472]	; (800664c <HAL_DMA_IRQHandler+0x6b8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a74      	ldr	r2, [pc, #464]	; (8006650 <HAL_DMA_IRQHandler+0x6bc>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a73      	ldr	r2, [pc, #460]	; (8006654 <HAL_DMA_IRQHandler+0x6c0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a71      	ldr	r2, [pc, #452]	; (8006658 <HAL_DMA_IRQHandler+0x6c4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a70      	ldr	r2, [pc, #448]	; (800665c <HAL_DMA_IRQHandler+0x6c8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_IRQHandler+0x516>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a6e      	ldr	r2, [pc, #440]	; (8006660 <HAL_DMA_IRQHandler+0x6cc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10a      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x52c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	e009      	b.n	80064d4 <HAL_DMA_IRQHandler+0x540>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d03e      	beq.n	8006556 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2210      	movs	r2, #16
 80064e2:	409a      	lsls	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d018      	beq.n	8006528 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d108      	bne.n	8006516 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d024      	beq.n	8006556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	e01f      	b.n	8006556 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01b      	beq.n	8006556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	e016      	b.n	8006556 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d107      	bne.n	8006546 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0208 	bic.w	r2, r2, #8
 8006544:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2220      	movs	r2, #32
 8006560:	409a      	lsls	r2, r3
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8110 	beq.w	800678c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2c      	ldr	r2, [pc, #176]	; (8006624 <HAL_DMA_IRQHandler+0x690>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d04a      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <HAL_DMA_IRQHandler+0x694>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d045      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a29      	ldr	r2, [pc, #164]	; (800662c <HAL_DMA_IRQHandler+0x698>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d040      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a28      	ldr	r2, [pc, #160]	; (8006630 <HAL_DMA_IRQHandler+0x69c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d03b      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <HAL_DMA_IRQHandler+0x6a0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d036      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a25      	ldr	r2, [pc, #148]	; (8006638 <HAL_DMA_IRQHandler+0x6a4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d031      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a23      	ldr	r2, [pc, #140]	; (800663c <HAL_DMA_IRQHandler+0x6a8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d02c      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a22      	ldr	r2, [pc, #136]	; (8006640 <HAL_DMA_IRQHandler+0x6ac>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d027      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a20      	ldr	r2, [pc, #128]	; (8006644 <HAL_DMA_IRQHandler+0x6b0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d022      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <HAL_DMA_IRQHandler+0x6b4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d01d      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1d      	ldr	r2, [pc, #116]	; (800664c <HAL_DMA_IRQHandler+0x6b8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d018      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <HAL_DMA_IRQHandler+0x6bc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <HAL_DMA_IRQHandler+0x6c0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a19      	ldr	r2, [pc, #100]	; (8006658 <HAL_DMA_IRQHandler+0x6c4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a17      	ldr	r2, [pc, #92]	; (800665c <HAL_DMA_IRQHandler+0x6c8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_DMA_IRQHandler+0x678>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a16      	ldr	r2, [pc, #88]	; (8006660 <HAL_DMA_IRQHandler+0x6cc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d12b      	bne.n	8006664 <HAL_DMA_IRQHandler+0x6d0>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e02a      	b.n	8006678 <HAL_DMA_IRQHandler+0x6e4>
 8006622:	bf00      	nop
 8006624:	40020010 	.word	0x40020010
 8006628:	40020028 	.word	0x40020028
 800662c:	40020040 	.word	0x40020040
 8006630:	40020058 	.word	0x40020058
 8006634:	40020070 	.word	0x40020070
 8006638:	40020088 	.word	0x40020088
 800663c:	400200a0 	.word	0x400200a0
 8006640:	400200b8 	.word	0x400200b8
 8006644:	40020410 	.word	0x40020410
 8006648:	40020428 	.word	0x40020428
 800664c:	40020440 	.word	0x40020440
 8006650:	40020458 	.word	0x40020458
 8006654:	40020470 	.word	0x40020470
 8006658:	40020488 	.word	0x40020488
 800665c:	400204a0 	.word	0x400204a0
 8006660:	400204b8 	.word	0x400204b8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	bf14      	ite	ne
 8006672:	2301      	movne	r3, #1
 8006674:	2300      	moveq	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8087 	beq.w	800678c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2220      	movs	r2, #32
 8006688:	409a      	lsls	r2, r3
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b04      	cmp	r3, #4
 8006698:	d139      	bne.n	800670e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0216 	bic.w	r2, r2, #22
 80066a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <HAL_DMA_IRQHandler+0x736>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0208 	bic.w	r2, r2, #8
 80066d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	223f      	movs	r2, #63	; 0x3f
 80066e4:	409a      	lsls	r2, r3
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 834a 	beq.w	8006d98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
          }
          return;
 800670c:	e344      	b.n	8006d98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d018      	beq.n	800674e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02c      	beq.n	800678c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
 800673a:	e027      	b.n	800678c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d023      	beq.n	800678c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	4798      	blx	r3
 800674c:	e01e      	b.n	800678c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10f      	bne.n	800677c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0210 	bic.w	r2, r2, #16
 800676a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8306 	beq.w	8006da2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8088 	beq.w	80068b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2204      	movs	r2, #4
 80067a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7a      	ldr	r2, [pc, #488]	; (800699c <HAL_DMA_IRQHandler+0xa08>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d04a      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a79      	ldr	r2, [pc, #484]	; (80069a0 <HAL_DMA_IRQHandler+0xa0c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d045      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a77      	ldr	r2, [pc, #476]	; (80069a4 <HAL_DMA_IRQHandler+0xa10>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d040      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a76      	ldr	r2, [pc, #472]	; (80069a8 <HAL_DMA_IRQHandler+0xa14>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d03b      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a74      	ldr	r2, [pc, #464]	; (80069ac <HAL_DMA_IRQHandler+0xa18>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d036      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a73      	ldr	r2, [pc, #460]	; (80069b0 <HAL_DMA_IRQHandler+0xa1c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d031      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a71      	ldr	r2, [pc, #452]	; (80069b4 <HAL_DMA_IRQHandler+0xa20>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d02c      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a70      	ldr	r2, [pc, #448]	; (80069b8 <HAL_DMA_IRQHandler+0xa24>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d027      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_DMA_IRQHandler+0xa28>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d022      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a6d      	ldr	r2, [pc, #436]	; (80069c0 <HAL_DMA_IRQHandler+0xa2c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d01d      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6b      	ldr	r2, [pc, #428]	; (80069c4 <HAL_DMA_IRQHandler+0xa30>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d018      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6a      	ldr	r2, [pc, #424]	; (80069c8 <HAL_DMA_IRQHandler+0xa34>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d013      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a68      	ldr	r2, [pc, #416]	; (80069cc <HAL_DMA_IRQHandler+0xa38>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00e      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a67      	ldr	r2, [pc, #412]	; (80069d0 <HAL_DMA_IRQHandler+0xa3c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d009      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a65      	ldr	r2, [pc, #404]	; (80069d4 <HAL_DMA_IRQHandler+0xa40>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <HAL_DMA_IRQHandler+0x8b8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a64      	ldr	r2, [pc, #400]	; (80069d8 <HAL_DMA_IRQHandler+0xa44>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d108      	bne.n	800685e <HAL_DMA_IRQHandler+0x8ca>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	e007      	b.n	800686e <HAL_DMA_IRQHandler+0x8da>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	429a      	cmp	r2, r3
 8006878:	d307      	bcc.n	800688a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f2      	bne.n	800686e <HAL_DMA_IRQHandler+0x8da>
 8006888:	e000      	b.n	800688c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800688a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2203      	movs	r2, #3
 800689e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068a2:	e003      	b.n	80068ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8272 	beq.w	8006da2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
 80068c6:	e26c      	b.n	8006da2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a43      	ldr	r2, [pc, #268]	; (80069dc <HAL_DMA_IRQHandler+0xa48>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a42      	ldr	r2, [pc, #264]	; (80069e0 <HAL_DMA_IRQHandler+0xa4c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01d      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a40      	ldr	r2, [pc, #256]	; (80069e4 <HAL_DMA_IRQHandler+0xa50>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3f      	ldr	r2, [pc, #252]	; (80069e8 <HAL_DMA_IRQHandler+0xa54>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3d      	ldr	r2, [pc, #244]	; (80069ec <HAL_DMA_IRQHandler+0xa58>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <HAL_DMA_IRQHandler+0xa5c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a3a      	ldr	r2, [pc, #232]	; (80069f4 <HAL_DMA_IRQHandler+0xa60>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_DMA_IRQHandler+0x984>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a39      	ldr	r2, [pc, #228]	; (80069f8 <HAL_DMA_IRQHandler+0xa64>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d101      	bne.n	800691c <HAL_DMA_IRQHandler+0x988>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <HAL_DMA_IRQHandler+0x98a>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 823f 	beq.w	8006da2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2204      	movs	r2, #4
 8006936:	409a      	lsls	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80cd 	beq.w	8006adc <HAL_DMA_IRQHandler+0xb48>
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80c7 	beq.w	8006adc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2204      	movs	r2, #4
 8006958:	409a      	lsls	r2, r3
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d049      	beq.n	80069fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8210 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006984:	e20a      	b.n	8006d9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8206 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006998:	e200      	b.n	8006d9c <HAL_DMA_IRQHandler+0xe08>
 800699a:	bf00      	nop
 800699c:	40020010 	.word	0x40020010
 80069a0:	40020028 	.word	0x40020028
 80069a4:	40020040 	.word	0x40020040
 80069a8:	40020058 	.word	0x40020058
 80069ac:	40020070 	.word	0x40020070
 80069b0:	40020088 	.word	0x40020088
 80069b4:	400200a0 	.word	0x400200a0
 80069b8:	400200b8 	.word	0x400200b8
 80069bc:	40020410 	.word	0x40020410
 80069c0:	40020428 	.word	0x40020428
 80069c4:	40020440 	.word	0x40020440
 80069c8:	40020458 	.word	0x40020458
 80069cc:	40020470 	.word	0x40020470
 80069d0:	40020488 	.word	0x40020488
 80069d4:	400204a0 	.word	0x400204a0
 80069d8:	400204b8 	.word	0x400204b8
 80069dc:	58025408 	.word	0x58025408
 80069e0:	5802541c 	.word	0x5802541c
 80069e4:	58025430 	.word	0x58025430
 80069e8:	58025444 	.word	0x58025444
 80069ec:	58025458 	.word	0x58025458
 80069f0:	5802546c 	.word	0x5802546c
 80069f4:	58025480 	.word	0x58025480
 80069f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d160      	bne.n	8006ac8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7f      	ldr	r2, [pc, #508]	; (8006c08 <HAL_DMA_IRQHandler+0xc74>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d04a      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7d      	ldr	r2, [pc, #500]	; (8006c0c <HAL_DMA_IRQHandler+0xc78>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d045      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7c      	ldr	r2, [pc, #496]	; (8006c10 <HAL_DMA_IRQHandler+0xc7c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d040      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7a      	ldr	r2, [pc, #488]	; (8006c14 <HAL_DMA_IRQHandler+0xc80>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d03b      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a79      	ldr	r2, [pc, #484]	; (8006c18 <HAL_DMA_IRQHandler+0xc84>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d036      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a77      	ldr	r2, [pc, #476]	; (8006c1c <HAL_DMA_IRQHandler+0xc88>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d031      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a76      	ldr	r2, [pc, #472]	; (8006c20 <HAL_DMA_IRQHandler+0xc8c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d02c      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a74      	ldr	r2, [pc, #464]	; (8006c24 <HAL_DMA_IRQHandler+0xc90>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d027      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a73      	ldr	r2, [pc, #460]	; (8006c28 <HAL_DMA_IRQHandler+0xc94>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d022      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a71      	ldr	r2, [pc, #452]	; (8006c2c <HAL_DMA_IRQHandler+0xc98>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01d      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a70      	ldr	r2, [pc, #448]	; (8006c30 <HAL_DMA_IRQHandler+0xc9c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6e      	ldr	r2, [pc, #440]	; (8006c34 <HAL_DMA_IRQHandler+0xca0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a6d      	ldr	r2, [pc, #436]	; (8006c38 <HAL_DMA_IRQHandler+0xca4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6b      	ldr	r2, [pc, #428]	; (8006c3c <HAL_DMA_IRQHandler+0xca8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6a      	ldr	r2, [pc, #424]	; (8006c40 <HAL_DMA_IRQHandler+0xcac>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0xb12>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a68      	ldr	r2, [pc, #416]	; (8006c44 <HAL_DMA_IRQHandler+0xcb0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d108      	bne.n	8006ab8 <HAL_DMA_IRQHandler+0xb24>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0208 	bic.w	r2, r2, #8
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e007      	b.n	8006ac8 <HAL_DMA_IRQHandler+0xb34>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0204 	bic.w	r2, r2, #4
 8006ac6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8165 	beq.w	8006d9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ada:	e15f      	b.n	8006d9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80c5 	beq.w	8006c7c <HAL_DMA_IRQHandler+0xce8>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80bf 	beq.w	8006c7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2202      	movs	r2, #2
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d018      	beq.n	8006b4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 813a 	beq.w	8006da0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b34:	e134      	b.n	8006da0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8130 	beq.w	8006da0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b48:	e12a      	b.n	8006da0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 8089 	bne.w	8006c68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a2b      	ldr	r2, [pc, #172]	; (8006c08 <HAL_DMA_IRQHandler+0xc74>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d04a      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <HAL_DMA_IRQHandler+0xc78>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d045      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a28      	ldr	r2, [pc, #160]	; (8006c10 <HAL_DMA_IRQHandler+0xc7c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d040      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <HAL_DMA_IRQHandler+0xc80>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d03b      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <HAL_DMA_IRQHandler+0xc84>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d036      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a23      	ldr	r2, [pc, #140]	; (8006c1c <HAL_DMA_IRQHandler+0xc88>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d031      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a22      	ldr	r2, [pc, #136]	; (8006c20 <HAL_DMA_IRQHandler+0xc8c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d02c      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a20      	ldr	r2, [pc, #128]	; (8006c24 <HAL_DMA_IRQHandler+0xc90>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d027      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <HAL_DMA_IRQHandler+0xc94>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d022      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	; (8006c2c <HAL_DMA_IRQHandler+0xc98>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d01d      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1c      	ldr	r2, [pc, #112]	; (8006c30 <HAL_DMA_IRQHandler+0xc9c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d018      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1a      	ldr	r2, [pc, #104]	; (8006c34 <HAL_DMA_IRQHandler+0xca0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <HAL_DMA_IRQHandler+0xca4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <HAL_DMA_IRQHandler+0xca8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d009      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <HAL_DMA_IRQHandler+0xcac>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d004      	beq.n	8006bf6 <HAL_DMA_IRQHandler+0xc62>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <HAL_DMA_IRQHandler+0xcb0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d128      	bne.n	8006c48 <HAL_DMA_IRQHandler+0xcb4>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0214 	bic.w	r2, r2, #20
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e027      	b.n	8006c58 <HAL_DMA_IRQHandler+0xcc4>
 8006c08:	40020010 	.word	0x40020010
 8006c0c:	40020028 	.word	0x40020028
 8006c10:	40020040 	.word	0x40020040
 8006c14:	40020058 	.word	0x40020058
 8006c18:	40020070 	.word	0x40020070
 8006c1c:	40020088 	.word	0x40020088
 8006c20:	400200a0 	.word	0x400200a0
 8006c24:	400200b8 	.word	0x400200b8
 8006c28:	40020410 	.word	0x40020410
 8006c2c:	40020428 	.word	0x40020428
 8006c30:	40020440 	.word	0x40020440
 8006c34:	40020458 	.word	0x40020458
 8006c38:	40020470 	.word	0x40020470
 8006c3c:	40020488 	.word	0x40020488
 8006c40:	400204a0 	.word	0x400204a0
 8006c44:	400204b8 	.word	0x400204b8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 020a 	bic.w	r2, r2, #10
 8006c56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8097 	beq.w	8006da0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c7a:	e091      	b.n	8006da0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2208      	movs	r2, #8
 8006c86:	409a      	lsls	r2, r3
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8088 	beq.w	8006da2 <HAL_DMA_IRQHandler+0xe0e>
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8082 	beq.w	8006da2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a41      	ldr	r2, [pc, #260]	; (8006da8 <HAL_DMA_IRQHandler+0xe14>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d04a      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3f      	ldr	r2, [pc, #252]	; (8006dac <HAL_DMA_IRQHandler+0xe18>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d045      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a3e      	ldr	r2, [pc, #248]	; (8006db0 <HAL_DMA_IRQHandler+0xe1c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d040      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a3c      	ldr	r2, [pc, #240]	; (8006db4 <HAL_DMA_IRQHandler+0xe20>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d03b      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a3b      	ldr	r2, [pc, #236]	; (8006db8 <HAL_DMA_IRQHandler+0xe24>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d036      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a39      	ldr	r2, [pc, #228]	; (8006dbc <HAL_DMA_IRQHandler+0xe28>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d031      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a38      	ldr	r2, [pc, #224]	; (8006dc0 <HAL_DMA_IRQHandler+0xe2c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d02c      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a36      	ldr	r2, [pc, #216]	; (8006dc4 <HAL_DMA_IRQHandler+0xe30>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d027      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a35      	ldr	r2, [pc, #212]	; (8006dc8 <HAL_DMA_IRQHandler+0xe34>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <HAL_DMA_IRQHandler+0xe38>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01d      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a32      	ldr	r2, [pc, #200]	; (8006dd0 <HAL_DMA_IRQHandler+0xe3c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a30      	ldr	r2, [pc, #192]	; (8006dd4 <HAL_DMA_IRQHandler+0xe40>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2f      	ldr	r2, [pc, #188]	; (8006dd8 <HAL_DMA_IRQHandler+0xe44>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2d      	ldr	r2, [pc, #180]	; (8006ddc <HAL_DMA_IRQHandler+0xe48>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <HAL_DMA_IRQHandler+0xe4c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xdaa>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <HAL_DMA_IRQHandler+0xe50>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d108      	bne.n	8006d50 <HAL_DMA_IRQHandler+0xdbc>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 021c 	bic.w	r2, r2, #28
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e007      	b.n	8006d60 <HAL_DMA_IRQHandler+0xdcc>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 020e 	bic.w	r2, r2, #14
 8006d5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
 8006d96:	e004      	b.n	8006da2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d98:	bf00      	nop
 8006d9a:	e002      	b.n	8006da2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d9c:	bf00      	nop
 8006d9e:	e000      	b.n	8006da2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006da2:	3728      	adds	r7, #40	; 0x28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40020010 	.word	0x40020010
 8006dac:	40020028 	.word	0x40020028
 8006db0:	40020040 	.word	0x40020040
 8006db4:	40020058 	.word	0x40020058
 8006db8:	40020070 	.word	0x40020070
 8006dbc:	40020088 	.word	0x40020088
 8006dc0:	400200a0 	.word	0x400200a0
 8006dc4:	400200b8 	.word	0x400200b8
 8006dc8:	40020410 	.word	0x40020410
 8006dcc:	40020428 	.word	0x40020428
 8006dd0:	40020440 	.word	0x40020440
 8006dd4:	40020458 	.word	0x40020458
 8006dd8:	40020470 	.word	0x40020470
 8006ddc:	40020488 	.word	0x40020488
 8006de0:	400204a0 	.word	0x400204a0
 8006de4:	400204b8 	.word	0x400204b8

08006de8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a7f      	ldr	r2, [pc, #508]	; (8007004 <DMA_SetConfig+0x21c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d072      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a7d      	ldr	r2, [pc, #500]	; (8007008 <DMA_SetConfig+0x220>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d06d      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7c      	ldr	r2, [pc, #496]	; (800700c <DMA_SetConfig+0x224>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d068      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7a      	ldr	r2, [pc, #488]	; (8007010 <DMA_SetConfig+0x228>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d063      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a79      	ldr	r2, [pc, #484]	; (8007014 <DMA_SetConfig+0x22c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d05e      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a77      	ldr	r2, [pc, #476]	; (8007018 <DMA_SetConfig+0x230>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d059      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a76      	ldr	r2, [pc, #472]	; (800701c <DMA_SetConfig+0x234>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d054      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a74      	ldr	r2, [pc, #464]	; (8007020 <DMA_SetConfig+0x238>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d04f      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a73      	ldr	r2, [pc, #460]	; (8007024 <DMA_SetConfig+0x23c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04a      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a71      	ldr	r2, [pc, #452]	; (8007028 <DMA_SetConfig+0x240>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d045      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a70      	ldr	r2, [pc, #448]	; (800702c <DMA_SetConfig+0x244>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d040      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a6e      	ldr	r2, [pc, #440]	; (8007030 <DMA_SetConfig+0x248>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d03b      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a6d      	ldr	r2, [pc, #436]	; (8007034 <DMA_SetConfig+0x24c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d036      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6b      	ldr	r2, [pc, #428]	; (8007038 <DMA_SetConfig+0x250>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d031      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a6a      	ldr	r2, [pc, #424]	; (800703c <DMA_SetConfig+0x254>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d02c      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a68      	ldr	r2, [pc, #416]	; (8007040 <DMA_SetConfig+0x258>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d027      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a67      	ldr	r2, [pc, #412]	; (8007044 <DMA_SetConfig+0x25c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a65      	ldr	r2, [pc, #404]	; (8007048 <DMA_SetConfig+0x260>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01d      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a64      	ldr	r2, [pc, #400]	; (800704c <DMA_SetConfig+0x264>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a62      	ldr	r2, [pc, #392]	; (8007050 <DMA_SetConfig+0x268>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a61      	ldr	r2, [pc, #388]	; (8007054 <DMA_SetConfig+0x26c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a5f      	ldr	r2, [pc, #380]	; (8007058 <DMA_SetConfig+0x270>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a5e      	ldr	r2, [pc, #376]	; (800705c <DMA_SetConfig+0x274>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <DMA_SetConfig+0x10a>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a5c      	ldr	r2, [pc, #368]	; (8007060 <DMA_SetConfig+0x278>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d101      	bne.n	8006ef6 <DMA_SetConfig+0x10e>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <DMA_SetConfig+0x110>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a39      	ldr	r2, [pc, #228]	; (8007004 <DMA_SetConfig+0x21c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d04a      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a38      	ldr	r2, [pc, #224]	; (8007008 <DMA_SetConfig+0x220>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d045      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a36      	ldr	r2, [pc, #216]	; (800700c <DMA_SetConfig+0x224>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d040      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a35      	ldr	r2, [pc, #212]	; (8007010 <DMA_SetConfig+0x228>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d03b      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a33      	ldr	r2, [pc, #204]	; (8007014 <DMA_SetConfig+0x22c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d036      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a32      	ldr	r2, [pc, #200]	; (8007018 <DMA_SetConfig+0x230>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d031      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a30      	ldr	r2, [pc, #192]	; (800701c <DMA_SetConfig+0x234>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d02c      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2f      	ldr	r2, [pc, #188]	; (8007020 <DMA_SetConfig+0x238>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d027      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <DMA_SetConfig+0x23c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2c      	ldr	r2, [pc, #176]	; (8007028 <DMA_SetConfig+0x240>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01d      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2a      	ldr	r2, [pc, #168]	; (800702c <DMA_SetConfig+0x244>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a29      	ldr	r2, [pc, #164]	; (8007030 <DMA_SetConfig+0x248>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a27      	ldr	r2, [pc, #156]	; (8007034 <DMA_SetConfig+0x24c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a26      	ldr	r2, [pc, #152]	; (8007038 <DMA_SetConfig+0x250>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a24      	ldr	r2, [pc, #144]	; (800703c <DMA_SetConfig+0x254>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <DMA_SetConfig+0x1d0>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a23      	ldr	r2, [pc, #140]	; (8007040 <DMA_SetConfig+0x258>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d101      	bne.n	8006fbc <DMA_SetConfig+0x1d4>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <DMA_SetConfig+0x1d6>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d059      	beq.n	8007076 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	223f      	movs	r2, #63	; 0x3f
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fe0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d138      	bne.n	8007064 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007002:	e086      	b.n	8007112 <DMA_SetConfig+0x32a>
 8007004:	40020010 	.word	0x40020010
 8007008:	40020028 	.word	0x40020028
 800700c:	40020040 	.word	0x40020040
 8007010:	40020058 	.word	0x40020058
 8007014:	40020070 	.word	0x40020070
 8007018:	40020088 	.word	0x40020088
 800701c:	400200a0 	.word	0x400200a0
 8007020:	400200b8 	.word	0x400200b8
 8007024:	40020410 	.word	0x40020410
 8007028:	40020428 	.word	0x40020428
 800702c:	40020440 	.word	0x40020440
 8007030:	40020458 	.word	0x40020458
 8007034:	40020470 	.word	0x40020470
 8007038:	40020488 	.word	0x40020488
 800703c:	400204a0 	.word	0x400204a0
 8007040:	400204b8 	.word	0x400204b8
 8007044:	58025408 	.word	0x58025408
 8007048:	5802541c 	.word	0x5802541c
 800704c:	58025430 	.word	0x58025430
 8007050:	58025444 	.word	0x58025444
 8007054:	58025458 	.word	0x58025458
 8007058:	5802546c 	.word	0x5802546c
 800705c:	58025480 	.word	0x58025480
 8007060:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]
}
 8007074:	e04d      	b.n	8007112 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a29      	ldr	r2, [pc, #164]	; (8007120 <DMA_SetConfig+0x338>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d022      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a27      	ldr	r2, [pc, #156]	; (8007124 <DMA_SetConfig+0x33c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01d      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a26      	ldr	r2, [pc, #152]	; (8007128 <DMA_SetConfig+0x340>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d018      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <DMA_SetConfig+0x344>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a23      	ldr	r2, [pc, #140]	; (8007130 <DMA_SetConfig+0x348>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a21      	ldr	r2, [pc, #132]	; (8007134 <DMA_SetConfig+0x34c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d009      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a20      	ldr	r2, [pc, #128]	; (8007138 <DMA_SetConfig+0x350>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <DMA_SetConfig+0x2de>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1e      	ldr	r2, [pc, #120]	; (800713c <DMA_SetConfig+0x354>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <DMA_SetConfig+0x2e2>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <DMA_SetConfig+0x2e4>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d020      	beq.n	8007112 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2201      	movs	r2, #1
 80070da:	409a      	lsls	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d108      	bne.n	8007102 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	60da      	str	r2, [r3, #12]
}
 8007100:	e007      	b.n	8007112 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	60da      	str	r2, [r3, #12]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	58025408 	.word	0x58025408
 8007124:	5802541c 	.word	0x5802541c
 8007128:	58025430 	.word	0x58025430
 800712c:	58025444 	.word	0x58025444
 8007130:	58025458 	.word	0x58025458
 8007134:	5802546c 	.word	0x5802546c
 8007138:	58025480 	.word	0x58025480
 800713c:	58025494 	.word	0x58025494

08007140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a42      	ldr	r2, [pc, #264]	; (8007258 <DMA_CalcBaseAndBitshift+0x118>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d04a      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a41      	ldr	r2, [pc, #260]	; (800725c <DMA_CalcBaseAndBitshift+0x11c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d045      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3f      	ldr	r2, [pc, #252]	; (8007260 <DMA_CalcBaseAndBitshift+0x120>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d040      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3e      	ldr	r2, [pc, #248]	; (8007264 <DMA_CalcBaseAndBitshift+0x124>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d03b      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3c      	ldr	r2, [pc, #240]	; (8007268 <DMA_CalcBaseAndBitshift+0x128>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d036      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3b      	ldr	r2, [pc, #236]	; (800726c <DMA_CalcBaseAndBitshift+0x12c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d031      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a39      	ldr	r2, [pc, #228]	; (8007270 <DMA_CalcBaseAndBitshift+0x130>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d02c      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a38      	ldr	r2, [pc, #224]	; (8007274 <DMA_CalcBaseAndBitshift+0x134>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d027      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a36      	ldr	r2, [pc, #216]	; (8007278 <DMA_CalcBaseAndBitshift+0x138>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d022      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a35      	ldr	r2, [pc, #212]	; (800727c <DMA_CalcBaseAndBitshift+0x13c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d01d      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a33      	ldr	r2, [pc, #204]	; (8007280 <DMA_CalcBaseAndBitshift+0x140>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d018      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a32      	ldr	r2, [pc, #200]	; (8007284 <DMA_CalcBaseAndBitshift+0x144>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a30      	ldr	r2, [pc, #192]	; (8007288 <DMA_CalcBaseAndBitshift+0x148>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00e      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2f      	ldr	r2, [pc, #188]	; (800728c <DMA_CalcBaseAndBitshift+0x14c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d009      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2d      	ldr	r2, [pc, #180]	; (8007290 <DMA_CalcBaseAndBitshift+0x150>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <DMA_CalcBaseAndBitshift+0xa8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2c      	ldr	r2, [pc, #176]	; (8007294 <DMA_CalcBaseAndBitshift+0x154>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d101      	bne.n	80071ec <DMA_CalcBaseAndBitshift+0xac>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <DMA_CalcBaseAndBitshift+0xae>
 80071ec:	2300      	movs	r3, #0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d024      	beq.n	800723c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	3b10      	subs	r3, #16
 80071fa:	4a27      	ldr	r2, [pc, #156]	; (8007298 <DMA_CalcBaseAndBitshift+0x158>)
 80071fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007200:	091b      	lsrs	r3, r3, #4
 8007202:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	4a24      	ldr	r2, [pc, #144]	; (800729c <DMA_CalcBaseAndBitshift+0x15c>)
 800720c:	5cd3      	ldrb	r3, [r2, r3]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b03      	cmp	r3, #3
 8007218:	d908      	bls.n	800722c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	4b1f      	ldr	r3, [pc, #124]	; (80072a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007222:	4013      	ands	r3, r2
 8007224:	1d1a      	adds	r2, r3, #4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	659a      	str	r2, [r3, #88]	; 0x58
 800722a:	e00d      	b.n	8007248 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007234:	4013      	ands	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6593      	str	r3, [r2, #88]	; 0x58
 800723a:	e005      	b.n	8007248 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40020010 	.word	0x40020010
 800725c:	40020028 	.word	0x40020028
 8007260:	40020040 	.word	0x40020040
 8007264:	40020058 	.word	0x40020058
 8007268:	40020070 	.word	0x40020070
 800726c:	40020088 	.word	0x40020088
 8007270:	400200a0 	.word	0x400200a0
 8007274:	400200b8 	.word	0x400200b8
 8007278:	40020410 	.word	0x40020410
 800727c:	40020428 	.word	0x40020428
 8007280:	40020440 	.word	0x40020440
 8007284:	40020458 	.word	0x40020458
 8007288:	40020470 	.word	0x40020470
 800728c:	40020488 	.word	0x40020488
 8007290:	400204a0 	.word	0x400204a0
 8007294:	400204b8 	.word	0x400204b8
 8007298:	aaaaaaab 	.word	0xaaaaaaab
 800729c:	08018588 	.word	0x08018588
 80072a0:	fffffc00 	.word	0xfffffc00

080072a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d120      	bne.n	80072fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d858      	bhi.n	8007372 <DMA_CheckFifoParam+0xce>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <DMA_CheckFifoParam+0x24>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072eb 	.word	0x080072eb
 80072d0:	080072d9 	.word	0x080072d9
 80072d4:	08007373 	.word	0x08007373
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d048      	beq.n	8007376 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072e8:	e045      	b.n	8007376 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072f2:	d142      	bne.n	800737a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072f8:	e03f      	b.n	800737a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007302:	d123      	bne.n	800734c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	2b03      	cmp	r3, #3
 800730a:	d838      	bhi.n	800737e <DMA_CheckFifoParam+0xda>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <DMA_CheckFifoParam+0x70>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007325 	.word	0x08007325
 8007318:	0800732b 	.word	0x0800732b
 800731c:	08007325 	.word	0x08007325
 8007320:	0800733d 	.word	0x0800733d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
        break;
 8007328:	e030      	b.n	800738c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d025      	beq.n	8007382 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800733a:	e022      	b.n	8007382 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007344:	d11f      	bne.n	8007386 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800734a:	e01c      	b.n	8007386 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	2b02      	cmp	r3, #2
 8007352:	d902      	bls.n	800735a <DMA_CheckFifoParam+0xb6>
 8007354:	2b03      	cmp	r3, #3
 8007356:	d003      	beq.n	8007360 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007358:	e018      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
        break;
 800735e:	e015      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e00b      	b.n	800738a <DMA_CheckFifoParam+0xe6>
        break;
 8007372:	bf00      	nop
 8007374:	e00a      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        break;
 8007376:	bf00      	nop
 8007378:	e008      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        break;
 800737a:	bf00      	nop
 800737c:	e006      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        break;
 800737e:	bf00      	nop
 8007380:	e004      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        break;
 8007382:	bf00      	nop
 8007384:	e002      	b.n	800738c <DMA_CheckFifoParam+0xe8>
        break;
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <DMA_CheckFifoParam+0xe8>
    break;
 800738a:	bf00      	nop
    }
  }

  return status;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a38      	ldr	r2, [pc, #224]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d022      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a36      	ldr	r2, [pc, #216]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01d      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a35      	ldr	r2, [pc, #212]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d018      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a33      	ldr	r2, [pc, #204]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a32      	ldr	r2, [pc, #200]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00e      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a30      	ldr	r2, [pc, #192]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d009      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a2f      	ldr	r2, [pc, #188]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d004      	beq.n	80073fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a2d      	ldr	r2, [pc, #180]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d101      	bne.n	80073fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01a      	beq.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	3b08      	subs	r3, #8
 800740c:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	091b      	lsrs	r3, r3, #4
 8007414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4b26      	ldr	r3, [pc, #152]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a24      	ldr	r2, [pc, #144]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007428:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2201      	movs	r2, #1
 8007432:	409a      	lsls	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007438:	e024      	b.n	8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	3b10      	subs	r3, #16
 8007442:	4a1e      	ldr	r2, [pc, #120]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4a1c      	ldr	r2, [pc, #112]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d806      	bhi.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d902      	bls.n	8007462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3308      	adds	r3, #8
 8007460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a16      	ldr	r2, [pc, #88]	; (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007474:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	58025408 	.word	0x58025408
 8007494:	5802541c 	.word	0x5802541c
 8007498:	58025430 	.word	0x58025430
 800749c:	58025444 	.word	0x58025444
 80074a0:	58025458 	.word	0x58025458
 80074a4:	5802546c 	.word	0x5802546c
 80074a8:	58025480 	.word	0x58025480
 80074ac:	58025494 	.word	0x58025494
 80074b0:	cccccccd 	.word	0xcccccccd
 80074b4:	16009600 	.word	0x16009600
 80074b8:	58025880 	.word	0x58025880
 80074bc:	aaaaaaab 	.word	0xaaaaaaab
 80074c0:	400204b8 	.word	0x400204b8
 80074c4:	4002040f 	.word	0x4002040f
 80074c8:	10008200 	.word	0x10008200
 80074cc:	40020880 	.word	0x40020880

080074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d04a      	beq.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d847      	bhi.n	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a25      	ldr	r2, [pc, #148]	; (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d022      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a24      	ldr	r2, [pc, #144]	; (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d01d      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a22      	ldr	r2, [pc, #136]	; (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d018      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a21      	ldr	r2, [pc, #132]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d013      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00e      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1e      	ldr	r2, [pc, #120]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d009      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d004      	beq.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1b      	ldr	r2, [pc, #108]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d101      	bne.n	8007540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800753c:	2301      	movs	r3, #1
 800753e:	e000      	b.n	8007542 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007540:	2300      	movs	r3, #0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007558:	671a      	str	r2, [r3, #112]	; 0x70
 800755a:	e009      	b.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	461a      	mov	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800756e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3b01      	subs	r3, #1
 8007574:	2201      	movs	r2, #1
 8007576:	409a      	lsls	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800757c:	bf00      	nop
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	58025408 	.word	0x58025408
 800758c:	5802541c 	.word	0x5802541c
 8007590:	58025430 	.word	0x58025430
 8007594:	58025444 	.word	0x58025444
 8007598:	58025458 	.word	0x58025458
 800759c:	5802546c 	.word	0x5802546c
 80075a0:	58025480 	.word	0x58025480
 80075a4:	58025494 	.word	0x58025494
 80075a8:	1600963f 	.word	0x1600963f
 80075ac:	58025940 	.word	0x58025940
 80075b0:	1000823f 	.word	0x1000823f
 80075b4:	40020940 	.word	0x40020940

080075b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b098      	sub	sp, #96	; 0x60
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80075c0:	4a84      	ldr	r2, [pc, #528]	; (80077d4 <HAL_FDCAN_Init+0x21c>)
 80075c2:	f107 030c 	add.w	r3, r7, #12
 80075c6:	4611      	mov	r1, r2
 80075c8:	224c      	movs	r2, #76	; 0x4c
 80075ca:	4618      	mov	r0, r3
 80075cc:	f00f fdea 	bl	80171a4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e1c6      	b.n	8007968 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a7e      	ldr	r2, [pc, #504]	; (80077d8 <HAL_FDCAN_Init+0x220>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d106      	bne.n	80075f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fb faa4 	bl	8002b54 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0210 	bic.w	r2, r2, #16
 800761a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800761c:	f7fc fa32 	bl	8003a84 <HAL_GetTick>
 8007620:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007622:	e014      	b.n	800764e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007624:	f7fc fa2e 	bl	8003a84 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b0a      	cmp	r3, #10
 8007630:	d90d      	bls.n	800764e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007638:	f043 0201 	orr.w	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2203      	movs	r2, #3
 8007646:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e18c      	b.n	8007968 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b08      	cmp	r3, #8
 800765a:	d0e3      	beq.n	8007624 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800766c:	f7fc fa0a 	bl	8003a84 <HAL_GetTick>
 8007670:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007672:	e014      	b.n	800769e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007674:	f7fc fa06 	bl	8003a84 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b0a      	cmp	r3, #10
 8007680:	d90d      	bls.n	800769e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007688:	f043 0201 	orr.w	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e164      	b.n	8007968 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0e3      	beq.n	8007674 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0202 	orr.w	r2, r2, #2
 80076ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7c1b      	ldrb	r3, [r3, #16]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d108      	bne.n	80076d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699a      	ldr	r2, [r3, #24]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d2:	619a      	str	r2, [r3, #24]
 80076d4:	e007      	b.n	80076e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699a      	ldr	r2, [r3, #24]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7c5b      	ldrb	r3, [r3, #17]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d108      	bne.n	8007700 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fc:	619a      	str	r2, [r3, #24]
 80076fe:	e007      	b.n	8007710 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800770e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7c9b      	ldrb	r3, [r3, #18]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d108      	bne.n	800772a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007726:	619a      	str	r2, [r3, #24]
 8007728:	e007      	b.n	800773a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007738:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800775e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0210 	bic.w	r2, r2, #16
 800776e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d108      	bne.n	800778a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0204 	orr.w	r2, r2, #4
 8007786:	619a      	str	r2, [r3, #24]
 8007788:	e030      	b.n	80077ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d02c      	beq.n	80077ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d020      	beq.n	80077dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0210 	orr.w	r2, r2, #16
 80077b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d114      	bne.n	80077ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0220 	orr.w	r2, r2, #32
 80077d0:	619a      	str	r2, [r3, #24]
 80077d2:	e00b      	b.n	80077ec <HAL_FDCAN_Init+0x234>
 80077d4:	08018474 	.word	0x08018474
 80077d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0220 	orr.w	r2, r2, #32
 80077ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007804:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	3b01      	subs	r3, #1
 800780e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007814:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007816:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007820:	d115      	bne.n	800784e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	3b01      	subs	r3, #1
 800782e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007830:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	3b01      	subs	r3, #1
 8007838:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800783a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	3b01      	subs	r3, #1
 8007844:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800784a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800784c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007874:	4413      	add	r3, r2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007882:	f023 0107 	bic.w	r1, r3, #7
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	3360      	adds	r3, #96	; 0x60
 800788e:	443b      	add	r3, r7
 8007890:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d011      	beq.n	80078ca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078ae:	f023 0107 	bic.w	r1, r3, #7
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	3360      	adds	r3, #96	; 0x60
 80078ba:	443b      	add	r3, r7
 80078bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d012      	beq.n	80078f8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078da:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	3360      	adds	r3, #96	; 0x60
 80078e6:	443b      	add	r3, r7
 80078e8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078ec:	011a      	lsls	r2, r3, #4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d012      	beq.n	8007926 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007908:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	3360      	adds	r3, #96	; 0x60
 8007914:	443b      	add	r3, r7
 8007916:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800791a:	021a      	lsls	r2, r3, #8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a11      	ldr	r2, [pc, #68]	; (8007970 <HAL_FDCAN_Init+0x3b8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d107      	bne.n	8007940 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f022 0203 	bic.w	r2, r2, #3
 800793e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f80b 	bl	8007974 <FDCAN_CalcultateRamBlockAddresses>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007964:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007968:	4618      	mov	r0, r3
 800796a:	3760      	adds	r7, #96	; 0x60
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	4000a000 	.word	0x4000a000

08007974 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007980:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800798a:	4ba7      	ldr	r3, [pc, #668]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800798c:	4013      	ands	r3, r2
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	0091      	lsls	r1, r2, #2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	430b      	orrs	r3, r1
 8007998:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	041a      	lsls	r2, r3, #16
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	4413      	add	r3, r2
 80079c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079ca:	4b97      	ldr	r3, [pc, #604]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	0091      	lsls	r1, r2, #2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	430b      	orrs	r3, r1
 80079d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ec:	041a      	lsls	r2, r3, #16
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4413      	add	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a0c:	4b86      	ldr	r3, [pc, #536]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	0091      	lsls	r1, r2, #2
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6812      	ldr	r2, [r2, #0]
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a26:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	041a      	lsls	r2, r3, #16
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a42:	fb02 f303 	mul.w	r3, r2, r3
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a54:	4b74      	ldr	r3, [pc, #464]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	0091      	lsls	r1, r2, #2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	430b      	orrs	r3, r1
 8007a62:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a6e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	041a      	lsls	r2, r3, #16
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4413      	add	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a9c:	4b62      	ldr	r3, [pc, #392]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	0091      	lsls	r1, r2, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4413      	add	r3, r2
 8007abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ac8:	4b57      	ldr	r3, [pc, #348]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	0091      	lsls	r1, r2, #2
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6812      	ldr	r2, [r2, #0]
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ae2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aea:	041a      	lsls	r2, r3, #16
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	4413      	add	r3, r2
 8007b00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b0a:	4b47      	ldr	r3, [pc, #284]	; (8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0091      	lsls	r1, r2, #2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6812      	ldr	r2, [r2, #0]
 8007b16:	430b      	orrs	r3, r1
 8007b18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b24:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2c:	041a      	lsls	r2, r3, #16
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b40:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b48:	061a      	lsls	r2, r3, #24
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b58:	4b34      	ldr	r3, [pc, #208]	; (8007c2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009a      	lsls	r2, r3, #2
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	441a      	add	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	441a      	add	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007bbe:	fb01 f303 	mul.w	r3, r1, r3
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bee:	fb01 f303 	mul.w	r3, r1, r3
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d915      	bls.n	8007c50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c24:	e006      	b.n	8007c34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c26:	bf00      	nop
 8007c28:	ffff0003 	.word	0xffff0003
 8007c2c:	10002b00 	.word	0x10002b00
 8007c30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c3a:	f043 0220 	orr.w	r2, r3, #32
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e010      	b.n	8007c72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	e005      	b.n	8007c64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3304      	adds	r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3f3      	bcc.n	8007c58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop

08007c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c8e:	4b86      	ldr	r3, [pc, #536]	; (8007ea8 <HAL_GPIO_Init+0x228>)
 8007c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c92:	e18c      	b.n	8007fae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	2101      	movs	r1, #1
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 817e 	beq.w	8007fa8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d005      	beq.n	8007cc4 <HAL_GPIO_Init+0x44>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f003 0303 	and.w	r3, r3, #3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d130      	bne.n	8007d26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	2203      	movs	r2, #3
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	43db      	mvns	r3, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4013      	ands	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f003 0201 	and.w	r2, r3, #1
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d017      	beq.n	8007d62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	43db      	mvns	r3, r3
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	4013      	ands	r3, r2
 8007d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d123      	bne.n	8007db6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	08da      	lsrs	r2, r3, #3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3208      	adds	r2, #8
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	220f      	movs	r2, #15
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	08da      	lsrs	r2, r3, #3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3208      	adds	r2, #8
 8007db0:	69b9      	ldr	r1, [r7, #24]
 8007db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f003 0203 	and.w	r2, r3, #3
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80d8 	beq.w	8007fa8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007df8:	4b2c      	ldr	r3, [pc, #176]	; (8007eac <HAL_GPIO_Init+0x22c>)
 8007dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dfe:	4a2b      	ldr	r2, [pc, #172]	; (8007eac <HAL_GPIO_Init+0x22c>)
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e08:	4b28      	ldr	r3, [pc, #160]	; (8007eac <HAL_GPIO_Init+0x22c>)
 8007e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e16:	4a26      	ldr	r2, [pc, #152]	; (8007eb0 <HAL_GPIO_Init+0x230>)
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	089b      	lsrs	r3, r3, #2
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	220f      	movs	r2, #15
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43db      	mvns	r3, r3
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4013      	ands	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <HAL_GPIO_Init+0x234>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d04a      	beq.n	8007ed8 <HAL_GPIO_Init+0x258>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <HAL_GPIO_Init+0x238>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d02b      	beq.n	8007ea2 <HAL_GPIO_Init+0x222>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <HAL_GPIO_Init+0x23c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d025      	beq.n	8007e9e <HAL_GPIO_Init+0x21e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a1a      	ldr	r2, [pc, #104]	; (8007ec0 <HAL_GPIO_Init+0x240>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01f      	beq.n	8007e9a <HAL_GPIO_Init+0x21a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <HAL_GPIO_Init+0x244>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d019      	beq.n	8007e96 <HAL_GPIO_Init+0x216>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a18      	ldr	r2, [pc, #96]	; (8007ec8 <HAL_GPIO_Init+0x248>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <HAL_GPIO_Init+0x212>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a17      	ldr	r2, [pc, #92]	; (8007ecc <HAL_GPIO_Init+0x24c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00d      	beq.n	8007e8e <HAL_GPIO_Init+0x20e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a16      	ldr	r2, [pc, #88]	; (8007ed0 <HAL_GPIO_Init+0x250>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <HAL_GPIO_Init+0x20a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a15      	ldr	r2, [pc, #84]	; (8007ed4 <HAL_GPIO_Init+0x254>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d101      	bne.n	8007e86 <HAL_GPIO_Init+0x206>
 8007e82:	2309      	movs	r3, #9
 8007e84:	e029      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e86:	230a      	movs	r3, #10
 8007e88:	e027      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e8a:	2307      	movs	r3, #7
 8007e8c:	e025      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e8e:	2306      	movs	r3, #6
 8007e90:	e023      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e92:	2305      	movs	r3, #5
 8007e94:	e021      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e96:	2304      	movs	r3, #4
 8007e98:	e01f      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e01d      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e01b      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e019      	b.n	8007eda <HAL_GPIO_Init+0x25a>
 8007ea6:	bf00      	nop
 8007ea8:	58000080 	.word	0x58000080
 8007eac:	58024400 	.word	0x58024400
 8007eb0:	58000400 	.word	0x58000400
 8007eb4:	58020000 	.word	0x58020000
 8007eb8:	58020400 	.word	0x58020400
 8007ebc:	58020800 	.word	0x58020800
 8007ec0:	58020c00 	.word	0x58020c00
 8007ec4:	58021000 	.word	0x58021000
 8007ec8:	58021400 	.word	0x58021400
 8007ecc:	58021800 	.word	0x58021800
 8007ed0:	58021c00 	.word	0x58021c00
 8007ed4:	58022400 	.word	0x58022400
 8007ed8:	2300      	movs	r3, #0
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	f002 0203 	and.w	r2, r2, #3
 8007ee0:	0092      	lsls	r2, r2, #2
 8007ee2:	4093      	lsls	r3, r2
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eea:	4938      	ldr	r1, [pc, #224]	; (8007fcc <HAL_GPIO_Init+0x34c>)
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	089b      	lsrs	r3, r3, #2
 8007ef0:	3302      	adds	r3, #2
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	43db      	mvns	r3, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	4013      	ands	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	43db      	mvns	r3, r3
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	4013      	ands	r3, r2
 8007f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	4013      	ands	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	3301      	adds	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f47f ae6b 	bne.w	8007c94 <HAL_GPIO_Init+0x14>
  }
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	3724      	adds	r7, #36	; 0x24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	58000400 	.word	0x58000400

08007fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	887b      	ldrh	r3, [r7, #2]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
 8007fec:	e001      	b.n	8007ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
 800800c:	4613      	mov	r3, r2
 800800e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008010:	787b      	ldrb	r3, [r7, #1]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008016:	887a      	ldrh	r2, [r7, #2]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800801c:	e003      	b.n	8008026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800801e:	887b      	ldrh	r3, [r7, #2]
 8008020:	041a      	lsls	r2, r3, #16
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	619a      	str	r2, [r3, #24]
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e07f      	b.n	8008146 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fa fde2 	bl	8002c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2224      	movs	r2, #36	; 0x24
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0201 	bic.w	r2, r2, #1
 8008076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008084:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008094:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d107      	bne.n	80080ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	e006      	b.n	80080bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d104      	bne.n	80080ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6859      	ldr	r1, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <HAL_I2C_Init+0x11c>)
 80080da:	430b      	orrs	r3, r1
 80080dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69d9      	ldr	r1, [r3, #28]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1a      	ldr	r2, [r3, #32]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	02008000 	.word	0x02008000

08008154 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	68f9      	ldr	r1, [r7, #12]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
  }
}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b20      	cmp	r3, #32
 800819c:	d138      	bne.n	8008210 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e032      	b.n	8008212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2224      	movs	r2, #36	; 0x24
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0201 	bic.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6819      	ldr	r1, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	e000      	b.n	8008212 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008210:	2302      	movs	r3, #2
  }
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b20      	cmp	r3, #32
 8008232:	d139      	bne.n	80082a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800823e:	2302      	movs	r3, #2
 8008240:	e033      	b.n	80082aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2224      	movs	r2, #36	; 0x24
 800824e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008270:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2220      	movs	r2, #32
 8008298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e000      	b.n	80082aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082a8:	2302      	movs	r3, #2
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b8:	b08f      	sub	sp, #60	; 0x3c
 80082ba:	af0a      	add	r7, sp, #40	; 0x28
 80082bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e116      	b.n	80084f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f00e fbc8 	bl	8016a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2203      	movs	r2, #3
 80082ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f00a fcf7 	bl	8012cfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	687e      	ldr	r6, [r7, #4]
 8008314:	466d      	mov	r5, sp
 8008316:	f106 0410 	add.w	r4, r6, #16
 800831a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800831c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800831e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008326:	e885 0003 	stmia.w	r5, {r0, r1}
 800832a:	1d33      	adds	r3, r6, #4
 800832c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800832e:	6838      	ldr	r0, [r7, #0]
 8008330:	f00a fbc2 	bl	8012ab8 <USB_CoreInit>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2202      	movs	r2, #2
 800833e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e0d7      	b.n	80084f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2100      	movs	r1, #0
 800834c:	4618      	mov	r0, r3
 800834e:	f00a fce5 	bl	8012d1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
 8008356:	e04a      	b.n	80083ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008358:	7bfa      	ldrb	r2, [r7, #15]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	333d      	adds	r3, #61	; 0x3d
 8008368:	2201      	movs	r2, #1
 800836a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800836c:	7bfa      	ldrb	r2, [r7, #15]
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	333c      	adds	r3, #60	; 0x3c
 800837c:	7bfa      	ldrb	r2, [r7, #15]
 800837e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008380:	7bfa      	ldrb	r2, [r7, #15]
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	b298      	uxth	r0, r3
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3356      	adds	r3, #86	; 0x56
 8008394:	4602      	mov	r2, r0
 8008396:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008398:	7bfa      	ldrb	r2, [r7, #15]
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	3340      	adds	r3, #64	; 0x40
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80083ac:	7bfa      	ldrb	r2, [r7, #15]
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	3344      	adds	r3, #68	; 0x44
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80083c0:	7bfa      	ldrb	r2, [r7, #15]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	3348      	adds	r3, #72	; 0x48
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083d4:	7bfa      	ldrb	r2, [r7, #15]
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4613      	mov	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4413      	add	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	334c      	adds	r3, #76	; 0x4c
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	3301      	adds	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	7bfa      	ldrb	r2, [r7, #15]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3af      	bcc.n	8008358 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
 80083fc:	e044      	b.n	8008488 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80083fe:	7bfa      	ldrb	r2, [r7, #15]
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	440b      	add	r3, r1
 800840c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008414:	7bfa      	ldrb	r2, [r7, #15]
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4613      	mov	r3, r2
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008426:	7bfa      	ldrb	r2, [r7, #15]
 8008428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800842a:	7bfa      	ldrb	r2, [r7, #15]
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008440:	7bfa      	ldrb	r2, [r7, #15]
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	4413      	add	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	440b      	add	r3, r1
 800844e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008456:	7bfa      	ldrb	r2, [r7, #15]
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800846c:	7bfa      	ldrb	r2, [r7, #15]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	3301      	adds	r3, #1
 8008486:	73fb      	strb	r3, [r7, #15]
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d3b5      	bcc.n	80083fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	687e      	ldr	r6, [r7, #4]
 800849a:	466d      	mov	r5, sp
 800849c:	f106 0410 	add.w	r4, r6, #16
 80084a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80084b0:	1d33      	adds	r3, r6, #4
 80084b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084b4:	6838      	ldr	r0, [r7, #0]
 80084b6:	f00a fc7d 	bl	8012db4 <USB_DevInit>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e014      	b.n	80084f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d102      	bne.n	80084ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f96f 	bl	80097c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f00b fcbf 	bl	8013e72 <USB_DevDisconnect>

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <HAL_PCD_Start+0x1c>
 8008516:	2302      	movs	r3, #2
 8008518:	e022      	b.n	8008560 <HAL_PCD_Start+0x62>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d109      	bne.n	8008542 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008532:	2b01      	cmp	r3, #1
 8008534:	d105      	bne.n	8008542 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	f00a fbc6 	bl	8012cd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f00b fc6d 	bl	8013e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b08d      	sub	sp, #52	; 0x34
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f00b fd2b 	bl	8013fda <USB_GetMode>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 84b7 	bne.w	8008efa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f00b fc8f 	bl	8013eb4 <USB_ReadInterrupts>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 84ad 	beq.w	8008ef8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	0a1b      	lsrs	r3, r3, #8
 80085a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f00b fc7c 	bl	8013eb4 <USB_ReadInterrupts>
 80085bc:	4603      	mov	r3, r0
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d107      	bne.n	80085d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695a      	ldr	r2, [r3, #20]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f002 0202 	and.w	r2, r2, #2
 80085d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f00b fc6a 	bl	8013eb4 <USB_ReadInterrupts>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d161      	bne.n	80086ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0210 	bic.w	r2, r2, #16
 80085f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f003 020f 	and.w	r2, r3, #15
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	4413      	add	r3, r2
 8008616:	3304      	adds	r3, #4
 8008618:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	0c5b      	lsrs	r3, r3, #17
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	2b02      	cmp	r3, #2
 8008624:	d124      	bne.n	8008670 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d035      	beq.n	800869e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800863c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008640:	b29b      	uxth	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	6a38      	ldr	r0, [r7, #32]
 8008646:	f00b faa1 	bl	8013b8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008656:	441a      	add	r2, r3
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	091b      	lsrs	r3, r3, #4
 8008664:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008668:	441a      	add	r2, r3
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	615a      	str	r2, [r3, #20]
 800866e:	e016      	b.n	800869e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	0c5b      	lsrs	r3, r3, #17
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	2b06      	cmp	r3, #6
 800867a:	d110      	bne.n	800869e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008682:	2208      	movs	r2, #8
 8008684:	4619      	mov	r1, r3
 8008686:	6a38      	ldr	r0, [r7, #32]
 8008688:	f00b fa80 	bl	8013b8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	695a      	ldr	r2, [r3, #20]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008698:	441a      	add	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0210 	orr.w	r2, r2, #16
 80086ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f00b fbfe 	bl	8013eb4 <USB_ReadInterrupts>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086c2:	f040 80a7 	bne.w	8008814 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f00b fc03 	bl	8013eda <USB_ReadDevAllOutEpInterrupt>
 80086d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80086d6:	e099      	b.n	800880c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 808e 	beq.w	8008800 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f00b fc27 	bl	8013f42 <USB_ReadDevOutEPInterrupt>
 80086f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00c      	beq.n	800871a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870c:	461a      	mov	r2, r3
 800870e:	2301      	movs	r3, #1
 8008710:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fed1 	bl	80094bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00c      	beq.n	800873e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008730:	461a      	mov	r2, r3
 8008732:	2308      	movs	r3, #8
 8008734:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 ffa7 	bl	800968c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008754:	461a      	mov	r2, r3
 8008756:	2310      	movs	r3, #16
 8008758:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d030      	beq.n	80087c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d109      	bne.n	8008784 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	69fa      	ldr	r2, [r7, #28]
 800877a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800877e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008782:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	4613      	mov	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	3304      	adds	r3, #4
 8008798:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d108      	bne.n	80087b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2200      	movs	r2, #0
 80087a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f00e fa5a 	bl	8016c68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	461a      	mov	r2, r3
 80087c2:	2302      	movs	r3, #2
 80087c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d008      	beq.n	80087e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	461a      	mov	r2, r3
 80087de:	2320      	movs	r3, #32
 80087e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	461a      	mov	r2, r3
 80087fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	3301      	adds	r3, #1
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	085b      	lsrs	r3, r3, #1
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	2b00      	cmp	r3, #0
 8008810:	f47f af62 	bne.w	80086d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f00b fb4b 	bl	8013eb4 <USB_ReadInterrupts>
 800881e:	4603      	mov	r3, r0
 8008820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008828:	f040 80db 	bne.w	80089e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f00b fb6c 	bl	8013f0e <USB_ReadDevAllInEpInterrupt>
 8008836:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800883c:	e0cd      	b.n	80089da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80c2 	beq.w	80089ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	4611      	mov	r1, r2
 8008854:	4618      	mov	r0, r3
 8008856:	f00b fb92 	bl	8013f7e <USB_ReadDevInEPInterrupt>
 800885a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d057      	beq.n	8008916 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	2201      	movs	r2, #1
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	43db      	mvns	r3, r3
 8008880:	69f9      	ldr	r1, [r7, #28]
 8008882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008886:	4013      	ands	r3, r2
 8008888:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008896:	461a      	mov	r2, r3
 8008898:	2301      	movs	r3, #1
 800889a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d132      	bne.n	800890a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a8:	4613      	mov	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	3348      	adds	r3, #72	; 0x48
 80088b4:	6819      	ldr	r1, [r3, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	4613      	mov	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4403      	add	r3, r0
 80088c4:	3344      	adds	r3, #68	; 0x44
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4419      	add	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ce:	4613      	mov	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4403      	add	r3, r0
 80088d8:	3348      	adds	r3, #72	; 0x48
 80088da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d113      	bne.n	800890a <HAL_PCD_IRQHandler+0x3a2>
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e6:	4613      	mov	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	334c      	adds	r3, #76	; 0x4c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d108      	bne.n	800890a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008902:	461a      	mov	r2, r3
 8008904:	2101      	movs	r1, #1
 8008906:	f00b fb9b 	bl	8014040 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	b2db      	uxtb	r3, r3
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f00e f924 	bl	8016b5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892c:	461a      	mov	r2, r3
 800892e:	2308      	movs	r3, #8
 8008930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	2b00      	cmp	r3, #0
 800893a:	d008      	beq.n	800894e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	461a      	mov	r2, r3
 800894a:	2310      	movs	r3, #16
 800894c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d008      	beq.n	800896a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	461a      	mov	r2, r3
 8008966:	2340      	movs	r3, #64	; 0x40
 8008968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d023      	beq.n	80089bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008976:	6a38      	ldr	r0, [r7, #32]
 8008978:	f00a fb7a 	bl	8013070 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800897c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897e:	4613      	mov	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	3338      	adds	r3, #56	; 0x38
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	3304      	adds	r3, #4
 800898e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	78db      	ldrb	r3, [r3, #3]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d108      	bne.n	80089aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2200      	movs	r2, #0
 800899c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f00e f971 	bl	8016c8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	461a      	mov	r2, r3
 80089b8:	2302      	movs	r3, #2
 80089ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fcea 	bl	80093a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	3301      	adds	r3, #1
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f47f af2e 	bne.w	800883e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00b fa64 	bl	8013eb4 <USB_ReadInterrupts>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f6:	d122      	bne.n	8008a3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	69fa      	ldr	r2, [r7, #28]
 8008a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a06:	f023 0301 	bic.w	r3, r3, #1
 8008a0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d108      	bne.n	8008a28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fef5 	bl	8009810 <HAL_PCDEx_LPM_Callback>
 8008a26:	e002      	b.n	8008a2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f00e f90f 	bl	8016c4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695a      	ldr	r2, [r3, #20]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f00b fa36 	bl	8013eb4 <USB_ReadInterrupts>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a52:	d112      	bne.n	8008a7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d102      	bne.n	8008a6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f00e f8cb 	bl	8016c00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f00b fa18 	bl	8013eb4 <USB_ReadInterrupts>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a8e:	d121      	bne.n	8008ad4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d111      	bne.n	8008ace <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab8:	089b      	lsrs	r3, r3, #2
 8008aba:	f003 020f 	and.w	r2, r3, #15
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fea2 	bl	8009810 <HAL_PCDEx_LPM_Callback>
 8008acc:	e002      	b.n	8008ad4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f00e f896 	bl	8016c00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f00b f9eb 	bl	8013eb4 <USB_ReadInterrupts>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae8:	f040 80b7 	bne.w	8008c5a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	69fa      	ldr	r2, [r7, #28]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afa:	f023 0301 	bic.w	r3, r3, #1
 8008afe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2110      	movs	r1, #16
 8008b06:	4618      	mov	r0, r3
 8008b08:	f00a fab2 	bl	8013070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b10:	e046      	b.n	8008ba0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	461a      	mov	r2, r3
 8008b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d3b3      	bcc.n	8008b12 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008bbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d016      	beq.n	8008bf4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd6:	f043 030b 	orr.w	r3, r3, #11
 8008bda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bec:	f043 030b 	orr.w	r3, r3, #11
 8008bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bf2:	e015      	b.n	8008c20 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	4619      	mov	r1, r3
 8008c04:	f242 032b 	movw	r3, #8235	; 0x202b
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1a:	f043 030b 	orr.w	r3, r3, #11
 8008c1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c44:	461a      	mov	r2, r3
 8008c46:	f00b f9fb 	bl	8014040 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695a      	ldr	r2, [r3, #20]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f00b f928 	bl	8013eb4 <USB_ReadInterrupts>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6e:	d124      	bne.n	8008cba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00b f9bf 	bl	8013ff8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f00a fa73 	bl	801316a <USB_GetDevSpeed>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681c      	ldr	r4, [r3, #0]
 8008c90:	f001 fd88 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 8008c94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f009 ff78 	bl	8012b94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f00d ff82 	bl	8016bae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	695a      	ldr	r2, [r3, #20]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f00b f8f8 	bl	8013eb4 <USB_ReadInterrupts>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d10a      	bne.n	8008ce4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f00d ff5f 	bl	8016b92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f002 0208 	and.w	r2, r2, #8
 8008ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f00b f8e3 	bl	8013eb4 <USB_ReadInterrupts>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf4:	2b80      	cmp	r3, #128	; 0x80
 8008cf6:	d122      	bne.n	8008d3e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d04:	2301      	movs	r3, #1
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
 8008d08:	e014      	b.n	8008d34 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0e:	4613      	mov	r3, r2
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d105      	bne.n	8008d2e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fb09 	bl	8009340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	3301      	adds	r3, #1
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d3e5      	bcc.n	8008d0a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f00b f8b6 	bl	8013eb4 <USB_ReadInterrupts>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d52:	d13b      	bne.n	8008dcc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d54:	2301      	movs	r3, #1
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
 8008d58:	e02b      	b.n	8008db2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6e:	4613      	mov	r3, r2
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	440b      	add	r3, r1
 8008d78:	3340      	adds	r3, #64	; 0x40
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d115      	bne.n	8008dac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	da12      	bge.n	8008dac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	333f      	adds	r3, #63	; 0x3f
 8008d96:	2201      	movs	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 faca 	bl	8009340 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	3301      	adds	r3, #1
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d3ce      	bcc.n	8008d5a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f00b f86f 	bl	8013eb4 <USB_ReadInterrupts>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008de0:	d155      	bne.n	8008e8e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008de2:	2301      	movs	r3, #1
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
 8008de6:	e045      	b.n	8008e74 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d12e      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da2b      	bge.n	8008e6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d121      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2e:	4613      	mov	r3, r2
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	69fa      	ldr	r2, [r7, #28]
 8008e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e6a:	6053      	str	r3, [r2, #4]
            break;
 8008e6c:	e007      	b.n	8008e7e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	3301      	adds	r3, #1
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d3b4      	bcc.n	8008de8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695a      	ldr	r2, [r3, #20]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f00b f80e 	bl	8013eb4 <USB_ReadInterrupts>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d10a      	bne.n	8008eba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f00d ff03 	bl	8016cb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695a      	ldr	r2, [r3, #20]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f00a fff8 	bl	8013eb4 <USB_ReadInterrupts>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f003 0304 	and.w	r3, r3, #4
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d115      	bne.n	8008efa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f00d fef3 	bl	8016ccc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	e000      	b.n	8008efa <HAL_PCD_IRQHandler+0x992>
      return;
 8008ef8:	bf00      	nop
    }
  }
}
 8008efa:	3734      	adds	r7, #52	; 0x34
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd90      	pop	{r4, r7, pc}

08008f00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_PCD_SetAddress+0x1a>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e013      	b.n	8008f42 <HAL_PCD_SetAddress+0x42>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f00a ff56 	bl	8013de4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	4608      	mov	r0, r1
 8008f54:	4611      	mov	r1, r2
 8008f56:	461a      	mov	r2, r3
 8008f58:	4603      	mov	r3, r0
 8008f5a:	70fb      	strb	r3, [r7, #3]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	803b      	strh	r3, [r7, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da0f      	bge.n	8008f90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	3338      	adds	r3, #56	; 0x38
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	3304      	adds	r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	705a      	strb	r2, [r3, #1]
 8008f8e:	e00f      	b.n	8008fb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 020f 	and.w	r2, r3, #15
 8008f96:	4613      	mov	r3, r2
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fbc:	883a      	ldrh	r2, [r7, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	78ba      	ldrb	r2, [r7, #2]
 8008fc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fda:	78bb      	ldrb	r3, [r7, #2]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d102      	bne.n	8008fe6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_PCD_EP_Open+0xaa>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e00e      	b.n	8009012 <HAL_PCD_EP_Open+0xc8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68f9      	ldr	r1, [r7, #12]
 8009002:	4618      	mov	r0, r3
 8009004:	f00a f8d6 	bl	80131b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009010:	7afb      	ldrb	r3, [r7, #11]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800902a:	2b00      	cmp	r3, #0
 800902c:	da0f      	bge.n	800904e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	f003 020f 	and.w	r2, r3, #15
 8009034:	4613      	mov	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	3338      	adds	r3, #56	; 0x38
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	4413      	add	r3, r2
 8009042:	3304      	adds	r3, #4
 8009044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	705a      	strb	r2, [r3, #1]
 800904c:	e00f      	b.n	800906e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	4613      	mov	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	4413      	add	r3, r2
 8009064:	3304      	adds	r3, #4
 8009066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	f003 030f 	and.w	r3, r3, #15
 8009074:	b2da      	uxtb	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_PCD_EP_Close+0x6e>
 8009084:	2302      	movs	r3, #2
 8009086:	e00e      	b.n	80090a6 <HAL_PCD_EP_Close+0x8c>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	4618      	mov	r0, r3
 8009098:	f00a f914 	bl	80132c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	460b      	mov	r3, r1
 80090bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2200      	movs	r2, #0
 80090e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2200      	movs	r2, #0
 80090ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d102      	bne.n	800910a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	f00a f9b0 	bl	801347c <USB_EPStartXfer>

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009148:	681b      	ldr	r3, [r3, #0]
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
 8009162:	460b      	mov	r3, r1
 8009164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	f003 020f 	and.w	r2, r3, #15
 800916c:	4613      	mov	r3, r2
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	3338      	adds	r3, #56	; 0x38
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	3304      	adds	r3, #4
 800917c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2200      	movs	r2, #0
 800918e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2201      	movs	r2, #1
 8009194:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	f003 030f 	and.w	r3, r3, #15
 800919c:	b2da      	uxtb	r2, r3
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d102      	bne.n	80091b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	6979      	ldr	r1, [r7, #20]
 80091be:	f00a f95d 	bl	801347c <USB_EPStartXfer>

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	f003 020f 	and.w	r2, r3, #15
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d901      	bls.n	80091ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e050      	b.n	800928c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	da0f      	bge.n	8009212 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	f003 020f 	and.w	r2, r3, #15
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	3338      	adds	r3, #56	; 0x38
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	4413      	add	r3, r2
 8009206:	3304      	adds	r3, #4
 8009208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	705a      	strb	r2, [r3, #1]
 8009210:	e00d      	b.n	800922e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	4613      	mov	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	4413      	add	r3, r2
 8009224:	3304      	adds	r3, #4
 8009226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_PCD_EP_SetStall+0x82>
 800924a:	2302      	movs	r3, #2
 800924c:	e01e      	b.n	800928c <HAL_PCD_EP_SetStall+0xc0>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	4618      	mov	r0, r3
 800925e:	f00a fced 	bl	8013c3c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10a      	bne.n	8009282 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	b2d9      	uxtb	r1, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800927c:	461a      	mov	r2, r3
 800927e:	f00a fedf 	bl	8014040 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	f003 020f 	and.w	r2, r3, #15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d901      	bls.n	80092b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e042      	b.n	8009338 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	da0f      	bge.n	80092da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	3338      	adds	r3, #56	; 0x38
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	705a      	strb	r2, [r3, #1]
 80092d8:	e00f      	b.n	80092fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	4613      	mov	r3, r2
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4413      	add	r3, r2
 80092f0:	3304      	adds	r3, #4
 80092f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	b2da      	uxtb	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_PCD_EP_ClrStall+0x86>
 8009316:	2302      	movs	r3, #2
 8009318:	e00e      	b.n	8009338 <HAL_PCD_EP_ClrStall+0xa4>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	4618      	mov	r0, r3
 800932a:	f00a fcf5 	bl	8013d18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800934c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009350:	2b00      	cmp	r3, #0
 8009352:	da0c      	bge.n	800936e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	f003 020f 	and.w	r2, r3, #15
 800935a:	4613      	mov	r3, r2
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	3338      	adds	r3, #56	; 0x38
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	4413      	add	r3, r2
 8009368:	3304      	adds	r3, #4
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e00c      	b.n	8009388 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	3304      	adds	r3, #4
 8009386:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68f9      	ldr	r1, [r7, #12]
 800938e:	4618      	mov	r0, r3
 8009390:	f00a fb14 	bl	80139bc <USB_EPStopXfer>
 8009394:	4603      	mov	r3, r0
 8009396:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009398:	7afb      	ldrb	r3, [r7, #11]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b08a      	sub	sp, #40	; 0x28
 80093a6:	af02      	add	r7, sp, #8
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	3338      	adds	r3, #56	; 0x38
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	4413      	add	r3, r2
 80093c6:	3304      	adds	r3, #4
 80093c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	695a      	ldr	r2, [r3, #20]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d901      	bls.n	80093da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e06c      	b.n	80094b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d902      	bls.n	80093f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	3303      	adds	r3, #3
 80093fa:	089b      	lsrs	r3, r3, #2
 80093fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093fe:	e02b      	b.n	8009458 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	429a      	cmp	r2, r3
 8009414:	d902      	bls.n	800941c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3303      	adds	r3, #3
 8009420:	089b      	lsrs	r3, r3, #2
 8009422:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	68d9      	ldr	r1, [r3, #12]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009434:	b2db      	uxtb	r3, r3
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4603      	mov	r3, r0
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f00a fb68 	bl	8013b10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	441a      	add	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	695a      	ldr	r2, [r3, #20]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	441a      	add	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	429a      	cmp	r2, r3
 800946c:	d809      	bhi.n	8009482 <PCD_WriteEmptyTxFifo+0xe0>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009476:	429a      	cmp	r2, r3
 8009478:	d203      	bcs.n	8009482 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1be      	bne.n	8009400 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	429a      	cmp	r2, r3
 800948c:	d811      	bhi.n	80094b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	f003 030f 	and.w	r3, r3, #15
 8009494:	2201      	movs	r2, #1
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	43db      	mvns	r3, r3
 80094a8:	6939      	ldr	r1, [r7, #16]
 80094aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ae:	4013      	ands	r3, r2
 80094b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	333c      	adds	r3, #60	; 0x3c
 80094d4:	3304      	adds	r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d17b      	bne.n	80095ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d015      	beq.n	8009528 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	4a61      	ldr	r2, [pc, #388]	; (8009684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	f240 80b9 	bls.w	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80b3 	beq.w	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951e:	461a      	mov	r2, r3
 8009520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009524:	6093      	str	r3, [r2, #8]
 8009526:	e0a7      	b.n	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953e:	461a      	mov	r2, r3
 8009540:	2320      	movs	r3, #32
 8009542:	6093      	str	r3, [r2, #8]
 8009544:	e098      	b.n	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 8093 	bne.w	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	4a4b      	ldr	r2, [pc, #300]	; (8009684 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d90f      	bls.n	800957a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009570:	461a      	mov	r2, r3
 8009572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009576:	6093      	str	r3, [r2, #8]
 8009578:	e07e      	b.n	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4413      	add	r3, r2
 800958c:	3304      	adds	r3, #4
 800958e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a1a      	ldr	r2, [r3, #32]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	0159      	lsls	r1, r3, #5
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	440b      	add	r3, r1
 800959c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095a6:	1ad2      	subs	r2, r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d114      	bne.n	80095dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095c4:	461a      	mov	r2, r3
 80095c6:	2101      	movs	r1, #1
 80095c8:	f00a fd3a 	bl	8014040 <USB_EP0_OutStart>
 80095cc:	e006      	b.n	80095dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	441a      	add	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f00d faa0 	bl	8016b28 <HAL_PCD_DataOutStageCallback>
 80095e8:	e046      	b.n	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	4a26      	ldr	r2, [pc, #152]	; (8009688 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d124      	bne.n	800963c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009608:	461a      	mov	r2, r3
 800960a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800960e:	6093      	str	r3, [r2, #8]
 8009610:	e032      	b.n	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d008      	beq.n	800962e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009628:	461a      	mov	r2, r3
 800962a:	2320      	movs	r3, #32
 800962c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f00d fa77 	bl	8016b28 <HAL_PCD_DataOutStageCallback>
 800963a:	e01d      	b.n	8009678 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d114      	bne.n	800966c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	4613      	mov	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	440b      	add	r3, r1
 8009650:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d108      	bne.n	800966c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009664:	461a      	mov	r2, r3
 8009666:	2100      	movs	r1, #0
 8009668:	f00a fcea 	bl	8014040 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	b2db      	uxtb	r3, r3
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f00d fa58 	bl	8016b28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3720      	adds	r7, #32
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	4f54300a 	.word	0x4f54300a
 8009688:	4f54310a 	.word	0x4f54310a

0800968c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	333c      	adds	r3, #60	; 0x3c
 80096a4:	3304      	adds	r3, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <PCD_EP_OutSetupPacket_int+0x88>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d90e      	bls.n	80096e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d009      	beq.n	80096e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d8:	461a      	mov	r2, r3
 80096da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f00d fa0f 	bl	8016b04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4a0a      	ldr	r2, [pc, #40]	; (8009714 <PCD_EP_OutSetupPacket_int+0x88>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d90c      	bls.n	8009708 <PCD_EP_OutSetupPacket_int+0x7c>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d108      	bne.n	8009708 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009700:	461a      	mov	r2, r3
 8009702:	2101      	movs	r1, #1
 8009704:	f00a fc9c 	bl	8014040 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	4f54300a 	.word	0x4f54300a

08009718 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
 8009724:	4613      	mov	r3, r2
 8009726:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d107      	bne.n	8009746 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009736:	883b      	ldrh	r3, [r7, #0]
 8009738:	0419      	lsls	r1, r3, #16
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	430a      	orrs	r2, r1
 8009742:	629a      	str	r2, [r3, #40]	; 0x28
 8009744:	e028      	b.n	8009798 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	0c1b      	lsrs	r3, r3, #16
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	4413      	add	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
 8009758:	e00d      	b.n	8009776 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	3340      	adds	r3, #64	; 0x40
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	0c1b      	lsrs	r3, r3, #16
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	3301      	adds	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
 8009776:	7bfa      	ldrb	r2, [r7, #15]
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	3b01      	subs	r3, #1
 800977c:	429a      	cmp	r2, r3
 800977e:	d3ec      	bcc.n	800975a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009780:	883b      	ldrh	r3, [r7, #0]
 8009782:	0418      	lsls	r0, r3, #16
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6819      	ldr	r1, [r3, #0]
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	3b01      	subs	r3, #1
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	4302      	orrs	r2, r0
 8009790:	3340      	adds	r3, #64	; 0x40
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	887a      	ldrh	r2, [r7, #2]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097f6:	4b05      	ldr	r3, [pc, #20]	; (800980c <HAL_PCDEx_ActivateLPM+0x44>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	10000003 	.word	0x10000003

08009810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009830:	4b19      	ldr	r3, [pc, #100]	; (8009898 <HAL_PWREx_ConfigSupply+0x70>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b04      	cmp	r3, #4
 800983a:	d00a      	beq.n	8009852 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800983c:	4b16      	ldr	r3, [pc, #88]	; (8009898 <HAL_PWREx_ConfigSupply+0x70>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f003 0307 	and.w	r3, r3, #7
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d001      	beq.n	800984e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e01f      	b.n	800988e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	e01d      	b.n	800988e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <HAL_PWREx_ConfigSupply+0x70>)
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f023 0207 	bic.w	r2, r3, #7
 800985a:	490f      	ldr	r1, [pc, #60]	; (8009898 <HAL_PWREx_ConfigSupply+0x70>)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4313      	orrs	r3, r2
 8009860:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009862:	f7fa f90f 	bl	8003a84 <HAL_GetTick>
 8009866:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009868:	e009      	b.n	800987e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800986a:	f7fa f90b 	bl	8003a84 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009878:	d901      	bls.n	800987e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e007      	b.n	800988e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800987e:	4b06      	ldr	r3, [pc, #24]	; (8009898 <HAL_PWREx_ConfigSupply+0x70>)
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988a:	d1ee      	bne.n	800986a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	58024800 	.word	0x58024800

0800989c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80098a0:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80098a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098aa:	60d3      	str	r3, [r2, #12]
}
 80098ac:	bf00      	nop
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	58024800 	.word	0x58024800

080098bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08c      	sub	sp, #48	; 0x30
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e3c8      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 8087 	beq.w	80099ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098dc:	4b88      	ldr	r3, [pc, #544]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098e6:	4b86      	ldr	r3, [pc, #536]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2b10      	cmp	r3, #16
 80098f0:	d007      	beq.n	8009902 <HAL_RCC_OscConfig+0x46>
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	2b18      	cmp	r3, #24
 80098f6:	d110      	bne.n	800991a <HAL_RCC_OscConfig+0x5e>
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d10b      	bne.n	800991a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009902:	4b7f      	ldr	r3, [pc, #508]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d06c      	beq.n	80099e8 <HAL_RCC_OscConfig+0x12c>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d168      	bne.n	80099e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e3a2      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009922:	d106      	bne.n	8009932 <HAL_RCC_OscConfig+0x76>
 8009924:	4b76      	ldr	r3, [pc, #472]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a75      	ldr	r2, [pc, #468]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800992a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e02e      	b.n	8009990 <HAL_RCC_OscConfig+0xd4>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <HAL_RCC_OscConfig+0x98>
 800993a:	4b71      	ldr	r3, [pc, #452]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a70      	ldr	r2, [pc, #448]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	4b6e      	ldr	r3, [pc, #440]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a6d      	ldr	r2, [pc, #436]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800994c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	e01d      	b.n	8009990 <HAL_RCC_OscConfig+0xd4>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800995c:	d10c      	bne.n	8009978 <HAL_RCC_OscConfig+0xbc>
 800995e:	4b68      	ldr	r3, [pc, #416]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a67      	ldr	r2, [pc, #412]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	4b65      	ldr	r3, [pc, #404]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a64      	ldr	r2, [pc, #400]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	e00b      	b.n	8009990 <HAL_RCC_OscConfig+0xd4>
 8009978:	4b61      	ldr	r3, [pc, #388]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a60      	ldr	r2, [pc, #384]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800997e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	4b5e      	ldr	r3, [pc, #376]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a5d      	ldr	r2, [pc, #372]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 800998a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800998e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d013      	beq.n	80099c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009998:	f7fa f874 	bl	8003a84 <HAL_GetTick>
 800999c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800999e:	e008      	b.n	80099b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099a0:	f7fa f870 	bl	8003a84 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b64      	cmp	r3, #100	; 0x64
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e356      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099b2:	4b53      	ldr	r3, [pc, #332]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f0      	beq.n	80099a0 <HAL_RCC_OscConfig+0xe4>
 80099be:	e014      	b.n	80099ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c0:	f7fa f860 	bl	8003a84 <HAL_GetTick>
 80099c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099c8:	f7fa f85c 	bl	8003a84 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b64      	cmp	r3, #100	; 0x64
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e342      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099da:	4b49      	ldr	r3, [pc, #292]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1f0      	bne.n	80099c8 <HAL_RCC_OscConfig+0x10c>
 80099e6:	e000      	b.n	80099ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0302 	and.w	r3, r3, #2
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 808c 	beq.w	8009b10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099f8:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a02:	4b3f      	ldr	r3, [pc, #252]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <HAL_RCC_OscConfig+0x162>
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	2b18      	cmp	r3, #24
 8009a12:	d137      	bne.n	8009a84 <HAL_RCC_OscConfig+0x1c8>
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d132      	bne.n	8009a84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a1e:	4b38      	ldr	r3, [pc, #224]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <HAL_RCC_OscConfig+0x17a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e314      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a36:	4b32      	ldr	r3, [pc, #200]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f023 0219 	bic.w	r2, r3, #25
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	492f      	ldr	r1, [pc, #188]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a48:	f7fa f81c 	bl	8003a84 <HAL_GetTick>
 8009a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a4e:	e008      	b.n	8009a62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a50:	f7fa f818 	bl	8003a84 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d901      	bls.n	8009a62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e2fe      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a62:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0f0      	beq.n	8009a50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a6e:	4b24      	ldr	r3, [pc, #144]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	061b      	lsls	r3, r3, #24
 8009a7c:	4920      	ldr	r1, [pc, #128]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a82:	e045      	b.n	8009b10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d026      	beq.n	8009ada <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a8c:	4b1c      	ldr	r3, [pc, #112]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f023 0219 	bic.w	r2, r3, #25
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	4919      	ldr	r1, [pc, #100]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a9e:	f7f9 fff1 	bl	8003a84 <HAL_GetTick>
 8009aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aa4:	e008      	b.n	8009ab8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aa6:	f7f9 ffed 	bl	8003a84 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e2d3      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ab8:	4b11      	ldr	r3, [pc, #68]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d0f0      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	061b      	lsls	r3, r3, #24
 8009ad2:	490b      	ldr	r1, [pc, #44]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	604b      	str	r3, [r1, #4]
 8009ad8:	e01a      	b.n	8009b10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a08      	ldr	r2, [pc, #32]	; (8009b00 <HAL_RCC_OscConfig+0x244>)
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae6:	f7f9 ffcd 	bl	8003a84 <HAL_GetTick>
 8009aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009aec:	e00a      	b.n	8009b04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aee:	f7f9 ffc9 	bl	8003a84 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d903      	bls.n	8009b04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e2af      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
 8009b00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b04:	4b96      	ldr	r3, [pc, #600]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1ee      	bne.n	8009aee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0310 	and.w	r3, r3, #16
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d06a      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b1c:	4b90      	ldr	r3, [pc, #576]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b26:	4b8e      	ldr	r3, [pc, #568]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b08      	cmp	r3, #8
 8009b30:	d007      	beq.n	8009b42 <HAL_RCC_OscConfig+0x286>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b18      	cmp	r3, #24
 8009b36:	d11b      	bne.n	8009b70 <HAL_RCC_OscConfig+0x2b4>
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f003 0303 	and.w	r3, r3, #3
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d116      	bne.n	8009b70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b42:	4b87      	ldr	r3, [pc, #540]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <HAL_RCC_OscConfig+0x29e>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	2b80      	cmp	r3, #128	; 0x80
 8009b54:	d001      	beq.n	8009b5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e282      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b5a:	4b81      	ldr	r3, [pc, #516]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	061b      	lsls	r3, r3, #24
 8009b68:	497d      	ldr	r1, [pc, #500]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b6e:	e040      	b.n	8009bf2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d023      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b78:	4b79      	ldr	r3, [pc, #484]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a78      	ldr	r2, [pc, #480]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b84:	f7f9 ff7e 	bl	8003a84 <HAL_GetTick>
 8009b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b8c:	f7f9 ff7a 	bl	8003a84 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e260      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b9e:	4b70      	ldr	r3, [pc, #448]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0f0      	beq.n	8009b8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009baa:	4b6d      	ldr	r3, [pc, #436]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	061b      	lsls	r3, r3, #24
 8009bb8:	4969      	ldr	r1, [pc, #420]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	60cb      	str	r3, [r1, #12]
 8009bbe:	e018      	b.n	8009bf2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009bc0:	4b67      	ldr	r3, [pc, #412]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a66      	ldr	r2, [pc, #408]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bcc:	f7f9 ff5a 	bl	8003a84 <HAL_GetTick>
 8009bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bd4:	f7f9 ff56 	bl	8003a84 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e23c      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009be6:	4b5e      	ldr	r3, [pc, #376]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1f0      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d036      	beq.n	8009c6c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d019      	beq.n	8009c3a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c06:	4b56      	ldr	r3, [pc, #344]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0a:	4a55      	ldr	r2, [pc, #340]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c0c:	f043 0301 	orr.w	r3, r3, #1
 8009c10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c12:	f7f9 ff37 	bl	8003a84 <HAL_GetTick>
 8009c16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c18:	e008      	b.n	8009c2c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c1a:	f7f9 ff33 	bl	8003a84 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e219      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c2c:	4b4c      	ldr	r3, [pc, #304]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d0f0      	beq.n	8009c1a <HAL_RCC_OscConfig+0x35e>
 8009c38:	e018      	b.n	8009c6c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c3a:	4b49      	ldr	r3, [pc, #292]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c3e:	4a48      	ldr	r2, [pc, #288]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c40:	f023 0301 	bic.w	r3, r3, #1
 8009c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c46:	f7f9 ff1d 	bl	8003a84 <HAL_GetTick>
 8009c4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c4c:	e008      	b.n	8009c60 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c4e:	f7f9 ff19 	bl	8003a84 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d901      	bls.n	8009c60 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e1ff      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c60:	4b3f      	ldr	r3, [pc, #252]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1f0      	bne.n	8009c4e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0320 	and.w	r3, r3, #32
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d036      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d019      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c80:	4b37      	ldr	r3, [pc, #220]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a36      	ldr	r2, [pc, #216]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c8c:	f7f9 fefa 	bl	8003a84 <HAL_GetTick>
 8009c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c92:	e008      	b.n	8009ca6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c94:	f7f9 fef6 	bl	8003a84 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e1dc      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ca6:	4b2e      	ldr	r3, [pc, #184]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0f0      	beq.n	8009c94 <HAL_RCC_OscConfig+0x3d8>
 8009cb2:	e018      	b.n	8009ce6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cb4:	4b2a      	ldr	r3, [pc, #168]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a29      	ldr	r2, [pc, #164]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cc0:	f7f9 fee0 	bl	8003a84 <HAL_GetTick>
 8009cc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cc8:	f7f9 fedc 	bl	8003a84 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e1c2      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cda:	4b21      	ldr	r3, [pc, #132]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f0      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0304 	and.w	r3, r3, #4
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8086 	beq.w	8009e00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009cf4:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <HAL_RCC_OscConfig+0x4a8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a1a      	ldr	r2, [pc, #104]	; (8009d64 <HAL_RCC_OscConfig+0x4a8>)
 8009cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d00:	f7f9 fec0 	bl	8003a84 <HAL_GetTick>
 8009d04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d06:	e008      	b.n	8009d1a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d08:	f7f9 febc 	bl	8003a84 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b64      	cmp	r3, #100	; 0x64
 8009d14:	d901      	bls.n	8009d1a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e1a2      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d1a:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <HAL_RCC_OscConfig+0x4a8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f0      	beq.n	8009d08 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d106      	bne.n	8009d3c <HAL_RCC_OscConfig+0x480>
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d32:	4a0b      	ldr	r2, [pc, #44]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009d34:	f043 0301 	orr.w	r3, r3, #1
 8009d38:	6713      	str	r3, [r2, #112]	; 0x70
 8009d3a:	e032      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e6>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d111      	bne.n	8009d68 <HAL_RCC_OscConfig+0x4ac>
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d48:	4a05      	ldr	r2, [pc, #20]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009d4a:	f023 0301 	bic.w	r3, r3, #1
 8009d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d50:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d54:	4a02      	ldr	r2, [pc, #8]	; (8009d60 <HAL_RCC_OscConfig+0x4a4>)
 8009d56:	f023 0304 	bic.w	r3, r3, #4
 8009d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d5c:	e021      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e6>
 8009d5e:	bf00      	nop
 8009d60:	58024400 	.word	0x58024400
 8009d64:	58024800 	.word	0x58024800
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d10c      	bne.n	8009d8a <HAL_RCC_OscConfig+0x4ce>
 8009d70:	4b83      	ldr	r3, [pc, #524]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d74:	4a82      	ldr	r2, [pc, #520]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d76:	f043 0304 	orr.w	r3, r3, #4
 8009d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d7c:	4b80      	ldr	r3, [pc, #512]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d80:	4a7f      	ldr	r2, [pc, #508]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	6713      	str	r3, [r2, #112]	; 0x70
 8009d88:	e00b      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e6>
 8009d8a:	4b7d      	ldr	r3, [pc, #500]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	4a7c      	ldr	r2, [pc, #496]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d90:	f023 0301 	bic.w	r3, r3, #1
 8009d94:	6713      	str	r3, [r2, #112]	; 0x70
 8009d96:	4b7a      	ldr	r3, [pc, #488]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	4a79      	ldr	r2, [pc, #484]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009d9c:	f023 0304 	bic.w	r3, r3, #4
 8009da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d015      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009daa:	f7f9 fe6b 	bl	8003a84 <HAL_GetTick>
 8009dae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009db0:	e00a      	b.n	8009dc8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db2:	f7f9 fe67 	bl	8003a84 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d901      	bls.n	8009dc8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e14b      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dc8:	4b6d      	ldr	r3, [pc, #436]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0ee      	beq.n	8009db2 <HAL_RCC_OscConfig+0x4f6>
 8009dd4:	e014      	b.n	8009e00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dd6:	f7f9 fe55 	bl	8003a84 <HAL_GetTick>
 8009dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ddc:	e00a      	b.n	8009df4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dde:	f7f9 fe51 	bl	8003a84 <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d901      	bls.n	8009df4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e135      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009df4:	4b62      	ldr	r3, [pc, #392]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1ee      	bne.n	8009dde <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 812a 	beq.w	800a05e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e0a:	4b5d      	ldr	r3, [pc, #372]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e12:	2b18      	cmp	r3, #24
 8009e14:	f000 80ba 	beq.w	8009f8c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	f040 8095 	bne.w	8009f4c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e22:	4b57      	ldr	r3, [pc, #348]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a56      	ldr	r2, [pc, #344]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2e:	f7f9 fe29 	bl	8003a84 <HAL_GetTick>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e34:	e008      	b.n	8009e48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e36:	f7f9 fe25 	bl	8003a84 <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d901      	bls.n	8009e48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e10b      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e48:	4b4d      	ldr	r3, [pc, #308]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1f0      	bne.n	8009e36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e54:	4b4a      	ldr	r3, [pc, #296]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e58:	4b4a      	ldr	r3, [pc, #296]	; (8009f84 <HAL_RCC_OscConfig+0x6c8>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e64:	0112      	lsls	r2, r2, #4
 8009e66:	430a      	orrs	r2, r1
 8009e68:	4945      	ldr	r1, [pc, #276]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	628b      	str	r3, [r1, #40]	; 0x28
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	3b01      	subs	r3, #1
 8009e74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	025b      	lsls	r3, r3, #9
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	431a      	orrs	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	041b      	lsls	r3, r3, #16
 8009e8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e96:	3b01      	subs	r3, #1
 8009e98:	061b      	lsls	r3, r3, #24
 8009e9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e9e:	4938      	ldr	r1, [pc, #224]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009ea4:	4b36      	ldr	r3, [pc, #216]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	4a35      	ldr	r2, [pc, #212]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009eaa:	f023 0301 	bic.w	r3, r3, #1
 8009eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009eb0:	4b33      	ldr	r3, [pc, #204]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb4:	4b34      	ldr	r3, [pc, #208]	; (8009f88 <HAL_RCC_OscConfig+0x6cc>)
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ebc:	00d2      	lsls	r2, r2, #3
 8009ebe:	4930      	ldr	r1, [pc, #192]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ec4:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	f023 020c 	bic.w	r2, r3, #12
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed0:	492b      	ldr	r1, [pc, #172]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ed6:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	f023 0202 	bic.w	r2, r3, #2
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee2:	4927      	ldr	r1, [pc, #156]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ee8:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	4a24      	ldr	r2, [pc, #144]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ef4:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	4a21      	ldr	r2, [pc, #132]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f00:	4b1f      	ldr	r3, [pc, #124]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	4a1e      	ldr	r2, [pc, #120]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f0c:	4b1c      	ldr	r3, [pc, #112]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f18:	4b19      	ldr	r3, [pc, #100]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a18      	ldr	r2, [pc, #96]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f24:	f7f9 fdae 	bl	8003a84 <HAL_GetTick>
 8009f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f2c:	f7f9 fdaa 	bl	8003a84 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e090      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f3e:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0f0      	beq.n	8009f2c <HAL_RCC_OscConfig+0x670>
 8009f4a:	e088      	b.n	800a05e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f4c:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0b      	ldr	r2, [pc, #44]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f58:	f7f9 fd94 	bl	8003a84 <HAL_GetTick>
 8009f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f5e:	e008      	b.n	8009f72 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f60:	f7f9 fd90 	bl	8003a84 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e076      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f72:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <HAL_RCC_OscConfig+0x6c4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1f0      	bne.n	8009f60 <HAL_RCC_OscConfig+0x6a4>
 8009f7e:	e06e      	b.n	800a05e <HAL_RCC_OscConfig+0x7a2>
 8009f80:	58024400 	.word	0x58024400
 8009f84:	fffffc0c 	.word	0xfffffc0c
 8009f88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f8c:	4b36      	ldr	r3, [pc, #216]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f92:	4b35      	ldr	r3, [pc, #212]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d031      	beq.n	800a004 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	f003 0203 	and.w	r2, r3, #3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d12a      	bne.n	800a004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	091b      	lsrs	r3, r3, #4
 8009fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d122      	bne.n	800a004 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d11a      	bne.n	800a004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	0a5b      	lsrs	r3, r3, #9
 8009fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d111      	bne.n	800a004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	0c1b      	lsrs	r3, r3, #16
 8009fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d108      	bne.n	800a004 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	0e1b      	lsrs	r3, r3, #24
 8009ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a000:	429a      	cmp	r2, r3
 800a002:	d001      	beq.n	800a008 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e02b      	b.n	800a060 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a008:	4b17      	ldr	r3, [pc, #92]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00c:	08db      	lsrs	r3, r3, #3
 800a00e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a012:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d01f      	beq.n	800a05e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a01e:	4b12      	ldr	r3, [pc, #72]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	4a11      	ldr	r2, [pc, #68]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a024:	f023 0301 	bic.w	r3, r3, #1
 800a028:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a02a:	f7f9 fd2b 	bl	8003a84 <HAL_GetTick>
 800a02e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a030:	bf00      	nop
 800a032:	f7f9 fd27 	bl	8003a84 <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d0f9      	beq.n	800a032 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a03e:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a042:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <HAL_RCC_OscConfig+0x7b0>)
 800a044:	4013      	ands	r3, r2
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a04a:	00d2      	lsls	r2, r2, #3
 800a04c:	4906      	ldr	r1, [pc, #24]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	4a04      	ldr	r2, [pc, #16]	; (800a068 <HAL_RCC_OscConfig+0x7ac>)
 800a058:	f043 0301 	orr.w	r3, r3, #1
 800a05c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3730      	adds	r7, #48	; 0x30
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	58024400 	.word	0x58024400
 800a06c:	ffff0007 	.word	0xffff0007

0800a070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e19c      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a084:	4b8a      	ldr	r3, [pc, #552]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d910      	bls.n	800a0b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a092:	4b87      	ldr	r3, [pc, #540]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f023 020f 	bic.w	r2, r3, #15
 800a09a:	4985      	ldr	r1, [pc, #532]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0a2:	4b83      	ldr	r3, [pc, #524]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d001      	beq.n	800a0b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e184      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d010      	beq.n	800a0e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	4b7b      	ldr	r3, [pc, #492]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d908      	bls.n	800a0e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0d0:	4b78      	ldr	r3, [pc, #480]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	4975      	ldr	r1, [pc, #468]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d010      	beq.n	800a110 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	4b70      	ldr	r3, [pc, #448]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d908      	bls.n	800a110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0fe:	4b6d      	ldr	r3, [pc, #436]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	496a      	ldr	r1, [pc, #424]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d010      	beq.n	800a13e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	4b64      	ldr	r3, [pc, #400]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a128:	429a      	cmp	r2, r3
 800a12a:	d908      	bls.n	800a13e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a12c:	4b61      	ldr	r3, [pc, #388]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	495e      	ldr	r1, [pc, #376]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d010      	beq.n	800a16c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69da      	ldr	r2, [r3, #28]
 800a14e:	4b59      	ldr	r3, [pc, #356]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a156:	429a      	cmp	r2, r3
 800a158:	d908      	bls.n	800a16c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a15a:	4b56      	ldr	r3, [pc, #344]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	4953      	ldr	r1, [pc, #332]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d010      	beq.n	800a19a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	4b4d      	ldr	r3, [pc, #308]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	429a      	cmp	r2, r3
 800a186:	d908      	bls.n	800a19a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a188:	4b4a      	ldr	r3, [pc, #296]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	f023 020f 	bic.w	r2, r3, #15
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4947      	ldr	r1, [pc, #284]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a196:	4313      	orrs	r3, r2
 800a198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d055      	beq.n	800a252 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1a6:	4b43      	ldr	r3, [pc, #268]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	4940      	ldr	r1, [pc, #256]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d107      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1c0:	4b3c      	ldr	r3, [pc, #240]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d121      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e0f6      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d107      	bne.n	800a1e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1d8:	4b36      	ldr	r3, [pc, #216]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d115      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e0ea      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d107      	bne.n	800a200 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1f0:	4b30      	ldr	r3, [pc, #192]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d109      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0de      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a200:	4b2c      	ldr	r3, [pc, #176]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e0d6      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a210:	4b28      	ldr	r3, [pc, #160]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f023 0207 	bic.w	r2, r3, #7
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	4925      	ldr	r1, [pc, #148]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a222:	f7f9 fc2f 	bl	8003a84 <HAL_GetTick>
 800a226:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a228:	e00a      	b.n	800a240 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a22a:	f7f9 fc2b 	bl	8003a84 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	f241 3288 	movw	r2, #5000	; 0x1388
 800a238:	4293      	cmp	r3, r2
 800a23a:	d901      	bls.n	800a240 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e0be      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a240:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	429a      	cmp	r2, r3
 800a250:	d1eb      	bne.n	800a22a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d010      	beq.n	800a280 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f003 030f 	and.w	r3, r3, #15
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d208      	bcs.n	800a280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a26e:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	f023 020f 	bic.w	r2, r3, #15
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	490e      	ldr	r1, [pc, #56]	; (800a2b4 <HAL_RCC_ClockConfig+0x244>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a280:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d214      	bcs.n	800a2b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a28e:	4b08      	ldr	r3, [pc, #32]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f023 020f 	bic.w	r2, r3, #15
 800a296:	4906      	ldr	r1, [pc, #24]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a29e:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <HAL_RCC_ClockConfig+0x240>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d005      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e086      	b.n	800a3be <HAL_RCC_ClockConfig+0x34e>
 800a2b0:	52002000 	.word	0x52002000
 800a2b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d010      	beq.n	800a2e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	4b3f      	ldr	r3, [pc, #252]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d208      	bcs.n	800a2e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2d4:	4b3c      	ldr	r3, [pc, #240]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4939      	ldr	r1, [pc, #228]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0308 	and.w	r3, r3, #8
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695a      	ldr	r2, [r3, #20]
 800a2f6:	4b34      	ldr	r3, [pc, #208]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d208      	bcs.n	800a314 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a302:	4b31      	ldr	r3, [pc, #196]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	492e      	ldr	r1, [pc, #184]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a310:	4313      	orrs	r3, r2
 800a312:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d010      	beq.n	800a342 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	699a      	ldr	r2, [r3, #24]
 800a324:	4b28      	ldr	r3, [pc, #160]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d208      	bcs.n	800a342 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a330:	4b25      	ldr	r3, [pc, #148]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	4922      	ldr	r1, [pc, #136]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	69da      	ldr	r2, [r3, #28]
 800a352:	4b1d      	ldr	r3, [pc, #116]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d208      	bcs.n	800a370 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a35e:	4b1a      	ldr	r3, [pc, #104]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	4917      	ldr	r1, [pc, #92]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a370:	f000 f89e 	bl	800a4b0 <HAL_RCC_GetSysClockFreq>
 800a374:	4602      	mov	r2, r0
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	4912      	ldr	r1, [pc, #72]	; (800a3cc <HAL_RCC_ClockConfig+0x35c>)
 800a382:	5ccb      	ldrb	r3, [r1, r3]
 800a384:	f003 031f 	and.w	r3, r3, #31
 800a388:	fa22 f303 	lsr.w	r3, r2, r3
 800a38c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a38e:	4b0e      	ldr	r3, [pc, #56]	; (800a3c8 <HAL_RCC_ClockConfig+0x358>)
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	4a0d      	ldr	r2, [pc, #52]	; (800a3cc <HAL_RCC_ClockConfig+0x35c>)
 800a398:	5cd3      	ldrb	r3, [r2, r3]
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	4a0a      	ldr	r2, [pc, #40]	; (800a3d0 <HAL_RCC_ClockConfig+0x360>)
 800a3a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3a8:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <HAL_RCC_ClockConfig+0x364>)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a3ae:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <HAL_RCC_ClockConfig+0x368>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7f9 fb1c 	bl	80039f0 <HAL_InitTick>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	58024400 	.word	0x58024400
 800a3cc:	08018578 	.word	0x08018578
 800a3d0:	24000004 	.word	0x24000004
 800a3d4:	24000000 	.word	0x24000000
 800a3d8:	24000008 	.word	0x24000008

0800a3dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08c      	sub	sp, #48	; 0x30
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d12a      	bne.n	800a444 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a3ee:	4b2d      	ldr	r3, [pc, #180]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a3f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f4:	4a2b      	ldr	r2, [pc, #172]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a3f6:	f043 0301 	orr.w	r3, r3, #1
 800a3fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3fe:	4b29      	ldr	r3, [pc, #164]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	61bb      	str	r3, [r7, #24]
 800a40a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a40c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a412:	2302      	movs	r3, #2
 800a414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a416:	2303      	movs	r3, #3
 800a418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a41e:	2300      	movs	r3, #0
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a422:	f107 031c 	add.w	r3, r7, #28
 800a426:	4619      	mov	r1, r3
 800a428:	481f      	ldr	r0, [pc, #124]	; (800a4a8 <HAL_RCC_MCOConfig+0xcc>)
 800a42a:	f7fd fc29 	bl	8007c80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a42e:	4b1d      	ldr	r3, [pc, #116]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	430b      	orrs	r3, r1
 800a43c:	4919      	ldr	r1, [pc, #100]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a442:	e02a      	b.n	800a49a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a444:	4b17      	ldr	r3, [pc, #92]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a44a:	4a16      	ldr	r2, [pc, #88]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a44c:	f043 0304 	orr.w	r3, r3, #4
 800a450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a454:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a462:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a468:	2302      	movs	r3, #2
 800a46a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a46c:	2303      	movs	r3, #3
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a470:	2300      	movs	r3, #0
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a474:	2300      	movs	r3, #0
 800a476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a478:	f107 031c 	add.w	r3, r7, #28
 800a47c:	4619      	mov	r1, r3
 800a47e:	480b      	ldr	r0, [pc, #44]	; (800a4ac <HAL_RCC_MCOConfig+0xd0>)
 800a480:	f7fd fbfe 	bl	8007c80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	01d9      	lsls	r1, r3, #7
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	430b      	orrs	r3, r1
 800a494:	4903      	ldr	r1, [pc, #12]	; (800a4a4 <HAL_RCC_MCOConfig+0xc8>)
 800a496:	4313      	orrs	r3, r2
 800a498:	610b      	str	r3, [r1, #16]
}
 800a49a:	bf00      	nop
 800a49c:	3730      	adds	r7, #48	; 0x30
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	58024400 	.word	0x58024400
 800a4a8:	58020000 	.word	0x58020000
 800a4ac:	58020800 	.word	0x58020800

0800a4b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b089      	sub	sp, #36	; 0x24
 800a4b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4b6:	4bb3      	ldr	r3, [pc, #716]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4be:	2b18      	cmp	r3, #24
 800a4c0:	f200 8155 	bhi.w	800a76e <HAL_RCC_GetSysClockFreq+0x2be>
 800a4c4:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ca:	bf00      	nop
 800a4cc:	0800a531 	.word	0x0800a531
 800a4d0:	0800a76f 	.word	0x0800a76f
 800a4d4:	0800a76f 	.word	0x0800a76f
 800a4d8:	0800a76f 	.word	0x0800a76f
 800a4dc:	0800a76f 	.word	0x0800a76f
 800a4e0:	0800a76f 	.word	0x0800a76f
 800a4e4:	0800a76f 	.word	0x0800a76f
 800a4e8:	0800a76f 	.word	0x0800a76f
 800a4ec:	0800a557 	.word	0x0800a557
 800a4f0:	0800a76f 	.word	0x0800a76f
 800a4f4:	0800a76f 	.word	0x0800a76f
 800a4f8:	0800a76f 	.word	0x0800a76f
 800a4fc:	0800a76f 	.word	0x0800a76f
 800a500:	0800a76f 	.word	0x0800a76f
 800a504:	0800a76f 	.word	0x0800a76f
 800a508:	0800a76f 	.word	0x0800a76f
 800a50c:	0800a55d 	.word	0x0800a55d
 800a510:	0800a76f 	.word	0x0800a76f
 800a514:	0800a76f 	.word	0x0800a76f
 800a518:	0800a76f 	.word	0x0800a76f
 800a51c:	0800a76f 	.word	0x0800a76f
 800a520:	0800a76f 	.word	0x0800a76f
 800a524:	0800a76f 	.word	0x0800a76f
 800a528:	0800a76f 	.word	0x0800a76f
 800a52c:	0800a563 	.word	0x0800a563
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a530:	4b94      	ldr	r3, [pc, #592]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0320 	and.w	r3, r3, #32
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d009      	beq.n	800a550 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a53c:	4b91      	ldr	r3, [pc, #580]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	08db      	lsrs	r3, r3, #3
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	4a90      	ldr	r2, [pc, #576]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a548:	fa22 f303 	lsr.w	r3, r2, r3
 800a54c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a54e:	e111      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a550:	4b8d      	ldr	r3, [pc, #564]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a552:	61bb      	str	r3, [r7, #24]
      break;
 800a554:	e10e      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a556:	4b8d      	ldr	r3, [pc, #564]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a558:	61bb      	str	r3, [r7, #24]
      break;
 800a55a:	e10b      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a55c:	4b8c      	ldr	r3, [pc, #560]	; (800a790 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a55e:	61bb      	str	r3, [r7, #24]
      break;
 800a560:	e108      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a562:	4b88      	ldr	r3, [pc, #544]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a566:	f003 0303 	and.w	r3, r3, #3
 800a56a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a56c:	4b85      	ldr	r3, [pc, #532]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a570:	091b      	lsrs	r3, r3, #4
 800a572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a576:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a578:	4b82      	ldr	r3, [pc, #520]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a582:	4b80      	ldr	r3, [pc, #512]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	08db      	lsrs	r3, r3, #3
 800a588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80e1 	beq.w	800a768 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	f000 8083 	beq.w	800a6b4 <HAL_RCC_GetSysClockFreq+0x204>
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	f200 80a1 	bhi.w	800a6f8 <HAL_RCC_GetSysClockFreq+0x248>
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x114>
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d056      	beq.n	800a670 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5c2:	e099      	b.n	800a6f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5c4:	4b6f      	ldr	r3, [pc, #444]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d02d      	beq.n	800a62c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d0:	4b6c      	ldr	r3, [pc, #432]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	08db      	lsrs	r3, r3, #3
 800a5d6:	f003 0303 	and.w	r3, r3, #3
 800a5da:	4a6b      	ldr	r2, [pc, #428]	; (800a788 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	ee07 3a90 	vmov	s15, r3
 800a5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5fa:	4b62      	ldr	r3, [pc, #392]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a60a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a60e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a626:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a62a:	e087      	b.n	800a73c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a636:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a798 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a63e:	4b51      	ldr	r3, [pc, #324]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a652:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a66e:	e065      	b.n	800a73c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	ee07 3a90 	vmov	s15, r3
 800a676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a682:	4b40      	ldr	r3, [pc, #256]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a692:	ed97 6a02 	vldr	s12, [r7, #8]
 800a696:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6b2:	e043      	b.n	800a73c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6be:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a7a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6c6:	4b2f      	ldr	r3, [pc, #188]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6f6:	e021      	b.n	800a73c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a702:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a79c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70a:	4b1e      	ldr	r3, [pc, #120]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a71e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a794 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a73a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a73c:	4b11      	ldr	r3, [pc, #68]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	0a5b      	lsrs	r3, r3, #9
 800a742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a746:	3301      	adds	r3, #1
 800a748:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a754:	edd7 6a07 	vldr	s13, [r7, #28]
 800a758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a75c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a760:	ee17 3a90 	vmov	r3, s15
 800a764:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a766:	e005      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	61bb      	str	r3, [r7, #24]
      break;
 800a76c:	e002      	b.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a76e:	4b07      	ldr	r3, [pc, #28]	; (800a78c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a770:	61bb      	str	r3, [r7, #24]
      break;
 800a772:	bf00      	nop
  }

  return sysclockfreq;
 800a774:	69bb      	ldr	r3, [r7, #24]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3724      	adds	r7, #36	; 0x24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	58024400 	.word	0x58024400
 800a788:	03d09000 	.word	0x03d09000
 800a78c:	003d0900 	.word	0x003d0900
 800a790:	02faf080 	.word	0x02faf080
 800a794:	46000000 	.word	0x46000000
 800a798:	4c742400 	.word	0x4c742400
 800a79c:	4a742400 	.word	0x4a742400
 800a7a0:	4c3ebc20 	.word	0x4c3ebc20

0800a7a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7aa:	f7ff fe81 	bl	800a4b0 <HAL_RCC_GetSysClockFreq>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	4b10      	ldr	r3, [pc, #64]	; (800a7f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	0a1b      	lsrs	r3, r3, #8
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	490f      	ldr	r1, [pc, #60]	; (800a7f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7bc:	5ccb      	ldrb	r3, [r1, r3]
 800a7be:	f003 031f 	and.w	r3, r3, #31
 800a7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7d2:	5cd3      	ldrb	r3, [r2, r3]
 800a7d4:	f003 031f 	and.w	r3, r3, #31
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	fa22 f303 	lsr.w	r3, r2, r3
 800a7de:	4a07      	ldr	r2, [pc, #28]	; (800a7fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a7e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7e2:	4a07      	ldr	r2, [pc, #28]	; (800a800 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7e8:	4b04      	ldr	r3, [pc, #16]	; (800a7fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	58024400 	.word	0x58024400
 800a7f8:	08018578 	.word	0x08018578
 800a7fc:	24000004 	.word	0x24000004
 800a800:	24000000 	.word	0x24000000

0800a804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a808:	f7ff ffcc 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 800a80c:	4602      	mov	r2, r0
 800a80e:	4b06      	ldr	r3, [pc, #24]	; (800a828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	091b      	lsrs	r3, r3, #4
 800a814:	f003 0307 	and.w	r3, r3, #7
 800a818:	4904      	ldr	r1, [pc, #16]	; (800a82c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a81a:	5ccb      	ldrb	r3, [r1, r3]
 800a81c:	f003 031f 	and.w	r3, r3, #31
 800a820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a824:	4618      	mov	r0, r3
 800a826:	bd80      	pop	{r7, pc}
 800a828:	58024400 	.word	0x58024400
 800a82c:	08018578 	.word	0x08018578

0800a830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a834:	f7ff ffb6 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 800a838:	4602      	mov	r2, r0
 800a83a:	4b06      	ldr	r3, [pc, #24]	; (800a854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	0a1b      	lsrs	r3, r3, #8
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	4904      	ldr	r1, [pc, #16]	; (800a858 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a846:	5ccb      	ldrb	r3, [r1, r3]
 800a848:	f003 031f 	and.w	r3, r3, #31
 800a84c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a850:	4618      	mov	r0, r3
 800a852:	bd80      	pop	{r7, pc}
 800a854:	58024400 	.word	0x58024400
 800a858:	08018578 	.word	0x08018578

0800a85c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a85c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a860:	b0c6      	sub	sp, #280	; 0x118
 800a862:	af00      	add	r7, sp, #0
 800a864:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a86e:	2300      	movs	r3, #0
 800a870:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a880:	2500      	movs	r5, #0
 800a882:	ea54 0305 	orrs.w	r3, r4, r5
 800a886:	d049      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a88e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a892:	d02f      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a898:	d828      	bhi.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a89a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a89e:	d01a      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a8a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8a4:	d822      	bhi.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ae:	d007      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8b0:	e01c      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8b2:	4bab      	ldr	r3, [pc, #684]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b6:	4aaa      	ldr	r2, [pc, #680]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8be:	e01a      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f002 fa49 	bl	800cd60 <RCCEx_PLL2_Config>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8d4:	e00f      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8da:	3328      	adds	r3, #40	; 0x28
 800a8dc:	2102      	movs	r1, #2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f002 faf0 	bl	800cec4 <RCCEx_PLL3_Config>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8ea:	e004      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8f2:	e000      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10a      	bne.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8fe:	4b98      	ldr	r3, [pc, #608]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a902:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a90c:	4a94      	ldr	r2, [pc, #592]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a90e:	430b      	orrs	r3, r1
 800a910:	6513      	str	r3, [r2, #80]	; 0x50
 800a912:	e003      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a918:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a928:	f04f 0900 	mov.w	r9, #0
 800a92c:	ea58 0309 	orrs.w	r3, r8, r9
 800a930:	d047      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d82a      	bhi.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a93c:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a942:	bf00      	nop
 800a944:	0800a959 	.word	0x0800a959
 800a948:	0800a967 	.word	0x0800a967
 800a94c:	0800a97d 	.word	0x0800a97d
 800a950:	0800a99b 	.word	0x0800a99b
 800a954:	0800a99b 	.word	0x0800a99b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a958:	4b81      	ldr	r3, [pc, #516]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	4a80      	ldr	r2, [pc, #512]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a95e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a964:	e01a      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96a:	3308      	adds	r3, #8
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f002 f9f6 	bl	800cd60 <RCCEx_PLL2_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a97a:	e00f      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a980:	3328      	adds	r3, #40	; 0x28
 800a982:	2100      	movs	r1, #0
 800a984:	4618      	mov	r0, r3
 800a986:	f002 fa9d 	bl	800cec4 <RCCEx_PLL3_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a990:	e004      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a998:	e000      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10a      	bne.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9a4:	4b6e      	ldr	r3, [pc, #440]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a8:	f023 0107 	bic.w	r1, r3, #7
 800a9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b2:	4a6b      	ldr	r2, [pc, #428]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9b4:	430b      	orrs	r3, r1
 800a9b6:	6513      	str	r3, [r2, #80]	; 0x50
 800a9b8:	e003      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a9ce:	f04f 0b00 	mov.w	fp, #0
 800a9d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a9d6:	d05b      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9e4:	d03b      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a9e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9ea:	d834      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9f0:	d037      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9f6:	d82e      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9fc:	d033      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a9fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa02:	d828      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa08:	d01a      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aa0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa0e:	d822      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa18:	d007      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa1a:	e01c      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa1c:	4b50      	ldr	r3, [pc, #320]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	4a4f      	ldr	r2, [pc, #316]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa28:	e01e      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	3308      	adds	r3, #8
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f002 f994 	bl	800cd60 <RCCEx_PLL2_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa3e:	e013      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	3328      	adds	r3, #40	; 0x28
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 fa3b 	bl	800cec4 <RCCEx_PLL3_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa54:	e008      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa5c:	e004      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa5e:	bf00      	nop
 800aa60:	e002      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa62:	bf00      	nop
 800aa64:	e000      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10b      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa70:	4b3b      	ldr	r3, [pc, #236]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa74:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa80:	4a37      	ldr	r2, [pc, #220]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa82:	430b      	orrs	r3, r1
 800aa84:	6593      	str	r3, [r2, #88]	; 0x58
 800aa86:	e003      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aaa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4313      	orrs	r3, r2
 800aaae:	d05d      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aab8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aabc:	d03b      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aabe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aac2:	d834      	bhi.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aac8:	d037      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aaca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aace:	d82e      	bhi.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aad0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aad4:	d033      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aad6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aada:	d828      	bhi.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aadc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae0:	d01a      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aae6:	d822      	bhi.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aaec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaf0:	d007      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aaf2:	e01c      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaf4:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	4a19      	ldr	r2, [pc, #100]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aafa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aafe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab00:	e01e      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab06:	3308      	adds	r3, #8
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f002 f928 	bl	800cd60 <RCCEx_PLL2_Config>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab16:	e013      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1c:	3328      	adds	r3, #40	; 0x28
 800ab1e:	2100      	movs	r1, #0
 800ab20:	4618      	mov	r0, r3
 800ab22:	f002 f9cf 	bl	800cec4 <RCCEx_PLL3_Config>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab2c:	e008      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab34:	e004      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab36:	bf00      	nop
 800ab38:	e002      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab3a:	bf00      	nop
 800ab3c:	e000      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10d      	bne.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab58:	4a01      	ldr	r2, [pc, #4]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab5a:	430b      	orrs	r3, r1
 800ab5c:	6593      	str	r3, [r2, #88]	; 0x58
 800ab5e:	e005      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab82:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	d03a      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab92:	2b30      	cmp	r3, #48	; 0x30
 800ab94:	d01f      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab96:	2b30      	cmp	r3, #48	; 0x30
 800ab98:	d819      	bhi.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d00c      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d815      	bhi.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d019      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aba6:	2b10      	cmp	r3, #16
 800aba8:	d111      	bne.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abaa:	4baa      	ldr	r3, [pc, #680]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abae:	4aa9      	ldr	r2, [pc, #676]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abb6:	e011      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	3308      	adds	r3, #8
 800abbe:	2102      	movs	r1, #2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f002 f8cd 	bl	800cd60 <RCCEx_PLL2_Config>
 800abc6:	4603      	mov	r3, r0
 800abc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abcc:	e006      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abd4:	e002      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abe4:	4b9b      	ldr	r3, [pc, #620]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf2:	4a98      	ldr	r2, [pc, #608]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abf4:	430b      	orrs	r3, r1
 800abf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abf8:	e003      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac12:	2300      	movs	r3, #0
 800ac14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	d051      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac2c:	d035      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ac2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac32:	d82e      	bhi.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac38:	d031      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac3e:	d828      	bhi.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac44:	d01a      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac4a:	d822      	bhi.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac54:	d007      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac56:	e01c      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac58:	4b7e      	ldr	r3, [pc, #504]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	4a7d      	ldr	r2, [pc, #500]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac64:	e01c      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f002 f876 	bl	800cd60 <RCCEx_PLL2_Config>
 800ac74:	4603      	mov	r3, r0
 800ac76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac7a:	e011      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	3328      	adds	r3, #40	; 0x28
 800ac82:	2100      	movs	r1, #0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f002 f91d 	bl	800cec4 <RCCEx_PLL3_Config>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac90:	e006      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac98:	e002      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac9a:	bf00      	nop
 800ac9c:	e000      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aca8:	4b6a      	ldr	r3, [pc, #424]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800acb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb6:	4a67      	ldr	r2, [pc, #412]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acb8:	430b      	orrs	r3, r1
 800acba:	6513      	str	r3, [r2, #80]	; 0x50
 800acbc:	e003      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800acd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acdc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4313      	orrs	r3, r2
 800ace4:	d053      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acf0:	d033      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800acf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acf6:	d82c      	bhi.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acfc:	d02f      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800acfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad02:	d826      	bhi.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad08:	d02b      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ad0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad0e:	d820      	bhi.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad14:	d012      	beq.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1a:	d81a      	bhi.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d022      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad24:	d115      	bne.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f002 f816 	bl	800cd60 <RCCEx_PLL2_Config>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad3a:	e015      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	3328      	adds	r3, #40	; 0x28
 800ad42:	2101      	movs	r1, #1
 800ad44:	4618      	mov	r0, r3
 800ad46:	f002 f8bd 	bl	800cec4 <RCCEx_PLL3_Config>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad50:	e00a      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad58:	e006      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad5a:	bf00      	nop
 800ad5c:	e004      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad5e:	bf00      	nop
 800ad60:	e002      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad62:	bf00      	nop
 800ad64:	e000      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad70:	4b38      	ldr	r3, [pc, #224]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad7e:	4a35      	ldr	r2, [pc, #212]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad80:	430b      	orrs	r3, r1
 800ad82:	6513      	str	r3, [r2, #80]	; 0x50
 800ad84:	e003      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ada4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ada8:	460b      	mov	r3, r1
 800adaa:	4313      	orrs	r3, r2
 800adac:	d058      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adba:	d033      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800adbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adc0:	d82c      	bhi.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc6:	d02f      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800adc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adcc:	d826      	bhi.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800add2:	d02b      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800add4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800add8:	d820      	bhi.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adde:	d012      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ade0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade4:	d81a      	bhi.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d022      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800adea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adee:	d115      	bne.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf4:	3308      	adds	r3, #8
 800adf6:	2101      	movs	r1, #1
 800adf8:	4618      	mov	r0, r3
 800adfa:	f001 ffb1 	bl	800cd60 <RCCEx_PLL2_Config>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae04:	e015      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0a:	3328      	adds	r3, #40	; 0x28
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f002 f858 	bl	800cec4 <RCCEx_PLL3_Config>
 800ae14:	4603      	mov	r3, r0
 800ae16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae1a:	e00a      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae22:	e006      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae24:	bf00      	nop
 800ae26:	e004      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae28:	bf00      	nop
 800ae2a:	e002      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae2c:	bf00      	nop
 800ae2e:	e000      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10e      	bne.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae3a:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae4a:	4a02      	ldr	r2, [pc, #8]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ae50:	e006      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae52:	bf00      	nop
 800ae54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae70:	2300      	movs	r3, #0
 800ae72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	d037      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae8a:	d00e      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae90:	d816      	bhi.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d018      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae9a:	d111      	bne.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae9c:	4bc4      	ldr	r3, [pc, #784]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	4ac3      	ldr	r2, [pc, #780]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aea8:	e00f      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeae:	3308      	adds	r3, #8
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 ff54 	bl	800cd60 <RCCEx_PLL2_Config>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aebe:	e004      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aec6:	e000      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aed2:	4bb7      	ldr	r3, [pc, #732]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee0:	4ab3      	ldr	r2, [pc, #716]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee2:	430b      	orrs	r3, r1
 800aee4:	6513      	str	r3, [r2, #80]	; 0x50
 800aee6:	e003      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aefc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af00:	2300      	movs	r3, #0
 800af02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800af0a:	460b      	mov	r3, r1
 800af0c:	4313      	orrs	r3, r2
 800af0e:	d039      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af16:	2b03      	cmp	r3, #3
 800af18:	d81c      	bhi.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af1a:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af20:	0800af5d 	.word	0x0800af5d
 800af24:	0800af31 	.word	0x0800af31
 800af28:	0800af3f 	.word	0x0800af3f
 800af2c:	0800af5d 	.word	0x0800af5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af30:	4b9f      	ldr	r3, [pc, #636]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af34:	4a9e      	ldr	r2, [pc, #632]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af3c:	e00f      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af42:	3308      	adds	r3, #8
 800af44:	2102      	movs	r1, #2
 800af46:	4618      	mov	r0, r3
 800af48:	f001 ff0a 	bl	800cd60 <RCCEx_PLL2_Config>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af52:	e004      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af5a:	e000      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10a      	bne.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af66:	4b92      	ldr	r3, [pc, #584]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6a:	f023 0103 	bic.w	r1, r3, #3
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af74:	4a8e      	ldr	r2, [pc, #568]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af76:	430b      	orrs	r3, r1
 800af78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af7a:	e003      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af94:	2300      	movs	r3, #0
 800af96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f000 8099 	beq.w	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afa6:	4b83      	ldr	r3, [pc, #524]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a82      	ldr	r2, [pc, #520]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afb2:	f7f8 fd67 	bl	8003a84 <HAL_GetTick>
 800afb6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afba:	e00b      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afbc:	f7f8 fd62 	bl	8003a84 <HAL_GetTick>
 800afc0:	4602      	mov	r2, r0
 800afc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b64      	cmp	r3, #100	; 0x64
 800afca:	d903      	bls.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd2:	e005      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afd4:	4b77      	ldr	r3, [pc, #476]	; (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0ed      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800afe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d173      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afe8:	4b71      	ldr	r3, [pc, #452]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aff4:	4053      	eors	r3, r2
 800aff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800affa:	2b00      	cmp	r3, #0
 800affc:	d015      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800affe:	4b6c      	ldr	r3, [pc, #432]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b006:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b00a:	4b69      	ldr	r3, [pc, #420]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	4a68      	ldr	r2, [pc, #416]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b014:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b016:	4b66      	ldr	r3, [pc, #408]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01a:	4a65      	ldr	r2, [pc, #404]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b01c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b020:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b022:	4a63      	ldr	r2, [pc, #396]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b028:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b036:	d118      	bne.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b038:	f7f8 fd24 	bl	8003a84 <HAL_GetTick>
 800b03c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b040:	e00d      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b042:	f7f8 fd1f 	bl	8003a84 <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b04c:	1ad2      	subs	r2, r2, r3
 800b04e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b052:	429a      	cmp	r2, r3
 800b054:	d903      	bls.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b05c:	e005      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b05e:	4b54      	ldr	r3, [pc, #336]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0eb      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b06a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d129      	bne.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b07a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b07e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b082:	d10e      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b084:	4b4a      	ldr	r3, [pc, #296]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b094:	091a      	lsrs	r2, r3, #4
 800b096:	4b48      	ldr	r3, [pc, #288]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b098:	4013      	ands	r3, r2
 800b09a:	4a45      	ldr	r2, [pc, #276]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b09c:	430b      	orrs	r3, r1
 800b09e:	6113      	str	r3, [r2, #16]
 800b0a0:	e005      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b0a2:	4b43      	ldr	r3, [pc, #268]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	4a42      	ldr	r2, [pc, #264]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0ac:	6113      	str	r3, [r2, #16]
 800b0ae:	4b40      	ldr	r3, [pc, #256]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0be:	4a3c      	ldr	r2, [pc, #240]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	6713      	str	r3, [r2, #112]	; 0x70
 800b0c4:	e008      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b0ce:	e003      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f002 0301 	and.w	r3, r2, #1
 800b0e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	f000 808f 	beq.w	800b218 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b100:	2b28      	cmp	r3, #40	; 0x28
 800b102:	d871      	bhi.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b1f1 	.word	0x0800b1f1
 800b110:	0800b1e9 	.word	0x0800b1e9
 800b114:	0800b1e9 	.word	0x0800b1e9
 800b118:	0800b1e9 	.word	0x0800b1e9
 800b11c:	0800b1e9 	.word	0x0800b1e9
 800b120:	0800b1e9 	.word	0x0800b1e9
 800b124:	0800b1e9 	.word	0x0800b1e9
 800b128:	0800b1e9 	.word	0x0800b1e9
 800b12c:	0800b1bd 	.word	0x0800b1bd
 800b130:	0800b1e9 	.word	0x0800b1e9
 800b134:	0800b1e9 	.word	0x0800b1e9
 800b138:	0800b1e9 	.word	0x0800b1e9
 800b13c:	0800b1e9 	.word	0x0800b1e9
 800b140:	0800b1e9 	.word	0x0800b1e9
 800b144:	0800b1e9 	.word	0x0800b1e9
 800b148:	0800b1e9 	.word	0x0800b1e9
 800b14c:	0800b1d3 	.word	0x0800b1d3
 800b150:	0800b1e9 	.word	0x0800b1e9
 800b154:	0800b1e9 	.word	0x0800b1e9
 800b158:	0800b1e9 	.word	0x0800b1e9
 800b15c:	0800b1e9 	.word	0x0800b1e9
 800b160:	0800b1e9 	.word	0x0800b1e9
 800b164:	0800b1e9 	.word	0x0800b1e9
 800b168:	0800b1e9 	.word	0x0800b1e9
 800b16c:	0800b1f1 	.word	0x0800b1f1
 800b170:	0800b1e9 	.word	0x0800b1e9
 800b174:	0800b1e9 	.word	0x0800b1e9
 800b178:	0800b1e9 	.word	0x0800b1e9
 800b17c:	0800b1e9 	.word	0x0800b1e9
 800b180:	0800b1e9 	.word	0x0800b1e9
 800b184:	0800b1e9 	.word	0x0800b1e9
 800b188:	0800b1e9 	.word	0x0800b1e9
 800b18c:	0800b1f1 	.word	0x0800b1f1
 800b190:	0800b1e9 	.word	0x0800b1e9
 800b194:	0800b1e9 	.word	0x0800b1e9
 800b198:	0800b1e9 	.word	0x0800b1e9
 800b19c:	0800b1e9 	.word	0x0800b1e9
 800b1a0:	0800b1e9 	.word	0x0800b1e9
 800b1a4:	0800b1e9 	.word	0x0800b1e9
 800b1a8:	0800b1e9 	.word	0x0800b1e9
 800b1ac:	0800b1f1 	.word	0x0800b1f1
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	58024800 	.word	0x58024800
 800b1b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f001 fdcb 	bl	800cd60 <RCCEx_PLL2_Config>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1d0:	e00f      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d6:	3328      	adds	r3, #40	; 0x28
 800b1d8:	2101      	movs	r1, #1
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 fe72 	bl	800cec4 <RCCEx_PLL3_Config>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1e6:	e004      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1ee:	e000      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1fa:	4bbf      	ldr	r3, [pc, #764]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b208:	4abb      	ldr	r2, [pc, #748]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b20a:	430b      	orrs	r3, r1
 800b20c:	6553      	str	r3, [r2, #84]	; 0x54
 800b20e:	e003      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b214:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f002 0302 	and.w	r3, r2, #2
 800b224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b228:	2300      	movs	r3, #0
 800b22a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b22e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b232:	460b      	mov	r3, r1
 800b234:	4313      	orrs	r3, r2
 800b236:	d041      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d824      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b242:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b295 	.word	0x0800b295
 800b24c:	0800b261 	.word	0x0800b261
 800b250:	0800b277 	.word	0x0800b277
 800b254:	0800b295 	.word	0x0800b295
 800b258:	0800b295 	.word	0x0800b295
 800b25c:	0800b295 	.word	0x0800b295
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b264:	3308      	adds	r3, #8
 800b266:	2101      	movs	r1, #1
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 fd79 	bl	800cd60 <RCCEx_PLL2_Config>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b274:	e00f      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27a:	3328      	adds	r3, #40	; 0x28
 800b27c:	2101      	movs	r1, #1
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 fe20 	bl	800cec4 <RCCEx_PLL3_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b28a:	e004      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b292:	e000      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b294:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b29e:	4b96      	ldr	r3, [pc, #600]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a2:	f023 0107 	bic.w	r1, r3, #7
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ac:	4a92      	ldr	r2, [pc, #584]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	6553      	str	r3, [r2, #84]	; 0x54
 800b2b2:	e003      	b.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f002 0304 	and.w	r3, r2, #4
 800b2c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	d044      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e4:	2b05      	cmp	r3, #5
 800b2e6:	d825      	bhi.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b2e8:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ee:	bf00      	nop
 800b2f0:	0800b33d 	.word	0x0800b33d
 800b2f4:	0800b309 	.word	0x0800b309
 800b2f8:	0800b31f 	.word	0x0800b31f
 800b2fc:	0800b33d 	.word	0x0800b33d
 800b300:	0800b33d 	.word	0x0800b33d
 800b304:	0800b33d 	.word	0x0800b33d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30c:	3308      	adds	r3, #8
 800b30e:	2101      	movs	r1, #1
 800b310:	4618      	mov	r0, r3
 800b312:	f001 fd25 	bl	800cd60 <RCCEx_PLL2_Config>
 800b316:	4603      	mov	r3, r0
 800b318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b31c:	e00f      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	3328      	adds	r3, #40	; 0x28
 800b324:	2101      	movs	r1, #1
 800b326:	4618      	mov	r0, r3
 800b328:	f001 fdcc 	bl	800cec4 <RCCEx_PLL3_Config>
 800b32c:	4603      	mov	r3, r0
 800b32e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b332:	e004      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b33a:	e000      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10b      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b346:	4b6c      	ldr	r3, [pc, #432]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34a:	f023 0107 	bic.w	r1, r3, #7
 800b34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b356:	4a68      	ldr	r2, [pc, #416]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b358:	430b      	orrs	r3, r1
 800b35a:	6593      	str	r3, [r2, #88]	; 0x58
 800b35c:	e003      	b.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b362:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f002 0320 	and.w	r3, r2, #32
 800b372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b376:	2300      	movs	r3, #0
 800b378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b37c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b380:	460b      	mov	r3, r1
 800b382:	4313      	orrs	r3, r2
 800b384:	d055      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b392:	d033      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b398:	d82c      	bhi.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b39e:	d02f      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a4:	d826      	bhi.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3aa:	d02b      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b3ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b0:	d820      	bhi.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b6:	d012      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3bc:	d81a      	bhi.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d022      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b3c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3c6:	d115      	bne.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f001 fcc5 	bl	800cd60 <RCCEx_PLL2_Config>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3dc:	e015      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e2:	3328      	adds	r3, #40	; 0x28
 800b3e4:	2102      	movs	r1, #2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f001 fd6c 	bl	800cec4 <RCCEx_PLL3_Config>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3f2:	e00a      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3fa:	e006      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3fc:	bf00      	nop
 800b3fe:	e004      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b400:	bf00      	nop
 800b402:	e002      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b404:	bf00      	nop
 800b406:	e000      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b40a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10b      	bne.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b412:	4b39      	ldr	r3, [pc, #228]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b422:	4a35      	ldr	r2, [pc, #212]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b424:	430b      	orrs	r3, r1
 800b426:	6553      	str	r3, [r2, #84]	; 0x54
 800b428:	e003      	b.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b42a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b42e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b43e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b442:	2300      	movs	r3, #0
 800b444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b448:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b44c:	460b      	mov	r3, r1
 800b44e:	4313      	orrs	r3, r2
 800b450:	d058      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b45a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b45e:	d033      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b460:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b464:	d82c      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46a:	d02f      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b46c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b470:	d826      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b476:	d02b      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b47c:	d820      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b482:	d012      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b488:	d81a      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d022      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b492:	d115      	bne.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b498:	3308      	adds	r3, #8
 800b49a:	2100      	movs	r1, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 fc5f 	bl	800cd60 <RCCEx_PLL2_Config>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4a8:	e015      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ae:	3328      	adds	r3, #40	; 0x28
 800b4b0:	2102      	movs	r1, #2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f001 fd06 	bl	800cec4 <RCCEx_PLL3_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4be:	e00a      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4c6:	e006      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4c8:	bf00      	nop
 800b4ca:	e004      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4cc:	bf00      	nop
 800b4ce:	e002      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d0:	bf00      	nop
 800b4d2:	e000      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10e      	bne.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4de:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4ee:	4a02      	ldr	r2, [pc, #8]	; (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b4f4:	e006      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4f6:	bf00      	nop
 800b4f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b500:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b514:	2300      	movs	r3, #0
 800b516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b51a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b51e:	460b      	mov	r3, r1
 800b520:	4313      	orrs	r3, r2
 800b522:	d055      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b52c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b530:	d033      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b532:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b536:	d82c      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b53c:	d02f      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b53e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b542:	d826      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b548:	d02b      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b54a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b54e:	d820      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b554:	d012      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b55a:	d81a      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d022      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b564:	d115      	bne.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56a:	3308      	adds	r3, #8
 800b56c:	2100      	movs	r1, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 fbf6 	bl	800cd60 <RCCEx_PLL2_Config>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b57a:	e015      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	3328      	adds	r3, #40	; 0x28
 800b582:	2102      	movs	r1, #2
 800b584:	4618      	mov	r0, r3
 800b586:	f001 fc9d 	bl	800cec4 <RCCEx_PLL3_Config>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b590:	e00a      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b598:	e006      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b59a:	bf00      	nop
 800b59c:	e004      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b59e:	bf00      	nop
 800b5a0:	e002      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5a2:	bf00      	nop
 800b5a4:	e000      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10b      	bne.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5b0:	4ba0      	ldr	r3, [pc, #640]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5c0:	4a9c      	ldr	r2, [pc, #624]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5c2:	430b      	orrs	r3, r1
 800b5c4:	6593      	str	r3, [r2, #88]	; 0x58
 800b5c6:	e003      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f002 0308 	and.w	r3, r2, #8
 800b5dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	d01e      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5fc:	d10c      	bne.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b602:	3328      	adds	r3, #40	; 0x28
 800b604:	2102      	movs	r1, #2
 800b606:	4618      	mov	r0, r3
 800b608:	f001 fc5c 	bl	800cec4 <RCCEx_PLL3_Config>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d002      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b618:	4b86      	ldr	r3, [pc, #536]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b61c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b628:	4a82      	ldr	r2, [pc, #520]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b62a:	430b      	orrs	r3, r1
 800b62c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f002 0310 	and.w	r3, r2, #16
 800b63a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b63e:	2300      	movs	r3, #0
 800b640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b644:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b648:	460b      	mov	r3, r1
 800b64a:	4313      	orrs	r3, r2
 800b64c:	d01e      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b65a:	d10c      	bne.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b660:	3328      	adds	r3, #40	; 0x28
 800b662:	2102      	movs	r1, #2
 800b664:	4618      	mov	r0, r3
 800b666:	f001 fc2d 	bl	800cec4 <RCCEx_PLL3_Config>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b676:	4b6f      	ldr	r3, [pc, #444]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b686:	4a6b      	ldr	r2, [pc, #428]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b688:	430b      	orrs	r3, r1
 800b68a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b698:	67bb      	str	r3, [r7, #120]	; 0x78
 800b69a:	2300      	movs	r3, #0
 800b69c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b69e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	d03e      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b4:	d022      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b6b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6ba:	d81b      	bhi.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d003      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6c4:	d00b      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b6c6:	e015      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f001 fb45 	bl	800cd60 <RCCEx_PLL2_Config>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6dc:	e00f      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	3328      	adds	r3, #40	; 0x28
 800b6e4:	2102      	movs	r1, #2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f001 fbec 	bl	800cec4 <RCCEx_PLL3_Config>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6f2:	e004      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6fa:	e000      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b706:	4b4b      	ldr	r3, [pc, #300]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b70a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b716:	4a47      	ldr	r2, [pc, #284]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b718:	430b      	orrs	r3, r1
 800b71a:	6593      	str	r3, [r2, #88]	; 0x58
 800b71c:	e003      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b722:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b732:	673b      	str	r3, [r7, #112]	; 0x70
 800b734:	2300      	movs	r3, #0
 800b736:	677b      	str	r3, [r7, #116]	; 0x74
 800b738:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b73c:	460b      	mov	r3, r1
 800b73e:	4313      	orrs	r3, r2
 800b740:	d03b      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b74a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b74e:	d01f      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b754:	d818      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b75a:	d003      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b75c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b760:	d007      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b762:	e011      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b764:	4b33      	ldr	r3, [pc, #204]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	4a32      	ldr	r2, [pc, #200]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b76a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b76e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b770:	e00f      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b776:	3328      	adds	r3, #40	; 0x28
 800b778:	2101      	movs	r1, #1
 800b77a:	4618      	mov	r0, r3
 800b77c:	f001 fba2 	bl	800cec4 <RCCEx_PLL3_Config>
 800b780:	4603      	mov	r3, r0
 800b782:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b786:	e004      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b78e:	e000      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b790:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b792:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b79a:	4b26      	ldr	r3, [pc, #152]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7aa:	4a22      	ldr	r2, [pc, #136]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	6553      	str	r3, [r2, #84]	; 0x54
 800b7b0:	e003      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b7c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	d034      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e4:	d007      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b7e6:	e011      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e8:	4b12      	ldr	r3, [pc, #72]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	4a11      	ldr	r2, [pc, #68]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7f4:	e00e      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fa:	3308      	adds	r3, #8
 800b7fc:	2102      	movs	r1, #2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f001 faae 	bl	800cd60 <RCCEx_PLL2_Config>
 800b804:	4603      	mov	r3, r0
 800b806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b80a:	e003      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b812:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10d      	bne.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82a:	4a02      	ldr	r2, [pc, #8]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b82c:	430b      	orrs	r3, r1
 800b82e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b830:	e006      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b832:	bf00      	nop
 800b834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b83c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b84c:	663b      	str	r3, [r7, #96]	; 0x60
 800b84e:	2300      	movs	r3, #0
 800b850:	667b      	str	r3, [r7, #100]	; 0x64
 800b852:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b856:	460b      	mov	r3, r1
 800b858:	4313      	orrs	r3, r2
 800b85a:	d00c      	beq.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b860:	3328      	adds	r3, #40	; 0x28
 800b862:	2102      	movs	r1, #2
 800b864:	4618      	mov	r0, r3
 800b866:	f001 fb2d 	bl	800cec4 <RCCEx_PLL3_Config>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b882:	65bb      	str	r3, [r7, #88]	; 0x58
 800b884:	2300      	movs	r3, #0
 800b886:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b888:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b88c:	460b      	mov	r3, r1
 800b88e:	4313      	orrs	r3, r2
 800b890:	d036      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b89c:	d018      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b89e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8a2:	d811      	bhi.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a8:	d014      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ae:	d80b      	bhi.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d011      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b8:	d106      	bne.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ba:	4bb7      	ldr	r3, [pc, #732]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	4ab6      	ldr	r2, [pc, #728]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8c6:	e008      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8ce:	e004      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8d0:	bf00      	nop
 800b8d2:	e002      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8d4:	bf00      	nop
 800b8d6:	e000      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8e2:	4bad      	ldr	r3, [pc, #692]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f0:	4aa9      	ldr	r2, [pc, #676]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	6553      	str	r3, [r2, #84]	; 0x54
 800b8f6:	e003      	b.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b90c:	653b      	str	r3, [r7, #80]	; 0x50
 800b90e:	2300      	movs	r3, #0
 800b910:	657b      	str	r3, [r7, #84]	; 0x54
 800b912:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b916:	460b      	mov	r3, r1
 800b918:	4313      	orrs	r3, r2
 800b91a:	d009      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b91c:	4b9e      	ldr	r3, [pc, #632]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b91e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b920:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92a:	4a9b      	ldr	r2, [pc, #620]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b92c:	430b      	orrs	r3, r1
 800b92e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b93e:	2300      	movs	r3, #0
 800b940:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b942:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b946:	460b      	mov	r3, r1
 800b948:	4313      	orrs	r3, r2
 800b94a:	d009      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b94c:	4b92      	ldr	r3, [pc, #584]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b950:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b95a:	4a8f      	ldr	r2, [pc, #572]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b95c:	430b      	orrs	r3, r1
 800b95e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b96c:	643b      	str	r3, [r7, #64]	; 0x40
 800b96e:	2300      	movs	r3, #0
 800b970:	647b      	str	r3, [r7, #68]	; 0x44
 800b972:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b976:	460b      	mov	r3, r1
 800b978:	4313      	orrs	r3, r2
 800b97a:	d00e      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b97c:	4b86      	ldr	r3, [pc, #536]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	4a85      	ldr	r2, [pc, #532]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b982:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b986:	6113      	str	r3, [r2, #16]
 800b988:	4b83      	ldr	r3, [pc, #524]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b98a:	6919      	ldr	r1, [r3, #16]
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b994:	4a80      	ldr	r2, [pc, #512]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b996:	430b      	orrs	r3, r1
 800b998:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	d009      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9b6:	4b78      	ldr	r3, [pc, #480]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c4:	4a74      	ldr	r2, [pc, #464]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c6:	430b      	orrs	r3, r1
 800b9c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b9d8:	2300      	movs	r3, #0
 800b9da:	637b      	str	r3, [r7, #52]	; 0x34
 800b9dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	d00a      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9e6:	4b6c      	ldr	r3, [pc, #432]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f6:	4a68      	ldr	r2, [pc, #416]	; (800bb98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9f8:	430b      	orrs	r3, r1
 800b9fa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	2100      	movs	r1, #0
 800ba06:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba12:	460b      	mov	r3, r1
 800ba14:	4313      	orrs	r3, r2
 800ba16:	d011      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	2100      	movs	r1, #0
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 f99d 	bl	800cd60 <RCCEx_PLL2_Config>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	2100      	movs	r1, #0
 800ba46:	6239      	str	r1, [r7, #32]
 800ba48:	f003 0302 	and.w	r3, r3, #2
 800ba4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba52:	460b      	mov	r3, r1
 800ba54:	4313      	orrs	r3, r2
 800ba56:	d011      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	2101      	movs	r1, #1
 800ba60:	4618      	mov	r0, r3
 800ba62:	f001 f97d 	bl	800cd60 <RCCEx_PLL2_Config>
 800ba66:	4603      	mov	r3, r0
 800ba68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	2100      	movs	r1, #0
 800ba86:	61b9      	str	r1, [r7, #24]
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba92:	460b      	mov	r3, r1
 800ba94:	4313      	orrs	r3, r2
 800ba96:	d011      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	2102      	movs	r1, #2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 f95d 	bl	800cd60 <RCCEx_PLL2_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800baac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800babc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	2100      	movs	r1, #0
 800bac6:	6139      	str	r1, [r7, #16]
 800bac8:	f003 0308 	and.w	r3, r3, #8
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bad2:	460b      	mov	r3, r1
 800bad4:	4313      	orrs	r3, r2
 800bad6:	d011      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	3328      	adds	r3, #40	; 0x28
 800bade:	2100      	movs	r1, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 f9ef 	bl	800cec4 <RCCEx_PLL3_Config>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800baec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d003      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	2100      	movs	r1, #0
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb12:	460b      	mov	r3, r1
 800bb14:	4313      	orrs	r3, r2
 800bb16:	d011      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1c:	3328      	adds	r3, #40	; 0x28
 800bb1e:	2101      	movs	r1, #1
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 f9cf 	bl	800cec4 <RCCEx_PLL3_Config>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	2100      	movs	r1, #0
 800bb46:	6039      	str	r1, [r7, #0]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	607b      	str	r3, [r7, #4]
 800bb4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	d011      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5c:	3328      	adds	r3, #40	; 0x28
 800bb5e:	2102      	movs	r1, #2
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 f9af 	bl	800cec4 <RCCEx_PLL3_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb7c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	e000      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb90:	46bd      	mov	sp, r7
 800bb92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb96:	bf00      	nop
 800bb98:	58024400 	.word	0x58024400

0800bb9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b090      	sub	sp, #64	; 0x40
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbaa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	f040 8094 	bne.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bbb4:	4b9b      	ldr	r3, [pc, #620]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb8:	f003 0307 	and.w	r3, r3, #7
 800bbbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	f200 8087 	bhi.w	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bbe1 	.word	0x0800bbe1
 800bbd0:	0800bc09 	.word	0x0800bc09
 800bbd4:	0800bc31 	.word	0x0800bc31
 800bbd8:	0800bccd 	.word	0x0800bccd
 800bbdc:	0800bc59 	.word	0x0800bc59
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbe0:	4b90      	ldr	r3, [pc, #576]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbec:	d108      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 ff62 	bl	800cabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbfc:	f000 bc93 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc04:	f000 bc8f 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc08:	4b86      	ldr	r3, [pc, #536]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc14:	d108      	bne.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc16:	f107 0318 	add.w	r3, r7, #24
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fca6 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc24:	f000 bc7f 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc2c:	f000 bc7b 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc30:	4b7c      	ldr	r3, [pc, #496]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc3c:	d108      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3e:	f107 030c 	add.w	r3, r7, #12
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 fde6 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc4c:	f000 bc6b 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc54:	f000 bc67 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc58:	4b72      	ldr	r3, [pc, #456]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc62:	4b70      	ldr	r3, [pc, #448]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 0304 	and.w	r3, r3, #4
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d10c      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d109      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc74:	4b6b      	ldr	r3, [pc, #428]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	08db      	lsrs	r3, r3, #3
 800bc7a:	f003 0303 	and.w	r3, r3, #3
 800bc7e:	4a6a      	ldr	r2, [pc, #424]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc80:	fa22 f303 	lsr.w	r3, r2, r3
 800bc84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc86:	e01f      	b.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc88:	4b66      	ldr	r3, [pc, #408]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc94:	d106      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc9c:	d102      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc9e:	4b63      	ldr	r3, [pc, #396]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca2:	e011      	b.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bca4:	4b5f      	ldr	r3, [pc, #380]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcb0:	d106      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb8:	d102      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcba:	4b5d      	ldr	r3, [pc, #372]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcbe:	e003      	b.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcc4:	f000 bc2f 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcc8:	f000 bc2d 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bccc:	4b59      	ldr	r3, [pc, #356]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd0:	f000 bc29 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd8:	f000 bc25 	b.w	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bcdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bce4:	430b      	orrs	r3, r1
 800bce6:	f040 80a7 	bne.w	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bcea:	4b4e      	ldr	r3, [pc, #312]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bcf2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcfa:	d054      	beq.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd02:	f200 808b 	bhi.w	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd0c:	f000 8083 	beq.w	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd16:	f200 8081 	bhi.w	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd20:	d02f      	beq.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd28:	d878      	bhi.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d004      	beq.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd36:	d012      	beq.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bd38:	e070      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd3a:	4b3a      	ldr	r3, [pc, #232]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd46:	d107      	bne.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 feb5 	bl	800cabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd56:	e3e6      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd5c:	e3e3      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd5e:	4b31      	ldr	r3, [pc, #196]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd6a:	d107      	bne.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd6c:	f107 0318 	add.w	r3, r7, #24
 800bd70:	4618      	mov	r0, r3
 800bd72:	f000 fbfb 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd7a:	e3d4      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd80:	e3d1      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd82:	4b28      	ldr	r3, [pc, #160]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd8e:	d107      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd90:	f107 030c 	add.w	r3, r7, #12
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fd3d 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd9e:	e3c2      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda4:	e3bf      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bda6:	4b1f      	ldr	r3, [pc, #124]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdb0:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0304 	and.w	r3, r3, #4
 800bdb8:	2b04      	cmp	r3, #4
 800bdba:	d10c      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdc2:	4b18      	ldr	r3, [pc, #96]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	08db      	lsrs	r3, r3, #3
 800bdc8:	f003 0303 	and.w	r3, r3, #3
 800bdcc:	4a16      	ldr	r2, [pc, #88]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bdce:	fa22 f303 	lsr.w	r3, r2, r3
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdd4:	e01e      	b.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdd6:	4b13      	ldr	r3, [pc, #76]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde2:	d106      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdea:	d102      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdec:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf0:	e010      	b.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdf2:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdfe:	d106      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800be00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be06:	d102      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be08:	4b09      	ldr	r3, [pc, #36]	; (800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be0c:	e002      	b.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be12:	e388      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be14:	e387      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be16:	4b07      	ldr	r3, [pc, #28]	; (800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be1a:	e384      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	e381      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be22:	bf00      	nop
 800be24:	58024400 	.word	0x58024400
 800be28:	03d09000 	.word	0x03d09000
 800be2c:	003d0900 	.word	0x003d0900
 800be30:	02faf080 	.word	0x02faf080
 800be34:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be3c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be40:	430b      	orrs	r3, r1
 800be42:	f040 809c 	bne.w	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be46:	4b9e      	ldr	r3, [pc, #632]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be56:	d054      	beq.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be5e:	f200 808b 	bhi.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be68:	f000 8083 	beq.w	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be72:	f200 8081 	bhi.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be7c:	d02f      	beq.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be84:	d878      	bhi.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be92:	d012      	beq.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be94:	e070      	b.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be96:	4b8a      	ldr	r3, [pc, #552]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bea2:	d107      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 fe07 	bl	800cabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb2:	e338      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb8:	e335      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800beba:	4b81      	ldr	r3, [pc, #516]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bec6:	d107      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bec8:	f107 0318 	add.w	r3, r7, #24
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fb4d 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed6:	e326      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bedc:	e323      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bede:	4b78      	ldr	r3, [pc, #480]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beea:	d107      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beec:	f107 030c 	add.w	r3, r7, #12
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 fc8f 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800befa:	e314      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf00:	e311      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf02:	4b6f      	ldr	r3, [pc, #444]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf0c:	4b6c      	ldr	r3, [pc, #432]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 0304 	and.w	r3, r3, #4
 800bf14:	2b04      	cmp	r3, #4
 800bf16:	d10c      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bf18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf1e:	4b68      	ldr	r3, [pc, #416]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	08db      	lsrs	r3, r3, #3
 800bf24:	f003 0303 	and.w	r3, r3, #3
 800bf28:	4a66      	ldr	r2, [pc, #408]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf30:	e01e      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf32:	4b63      	ldr	r3, [pc, #396]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3e:	d106      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf46:	d102      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf48:	4b5f      	ldr	r3, [pc, #380]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf4c:	e010      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf4e:	4b5c      	ldr	r3, [pc, #368]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf5a:	d106      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf62:	d102      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf64:	4b59      	ldr	r3, [pc, #356]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	e002      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf6e:	e2da      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf70:	e2d9      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf72:	4b57      	ldr	r3, [pc, #348]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf76:	e2d6      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf7c:	e2d3      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bf86:	430b      	orrs	r3, r1
 800bf88:	f040 80a7 	bne.w	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf8c:	4b4c      	ldr	r3, [pc, #304]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf9c:	d055      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfa4:	f200 8096 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfae:	f000 8084 	beq.w	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfb8:	f200 808c 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfc2:	d030      	beq.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfca:	f200 8083 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfda:	d012      	beq.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bfdc:	e07a      	b.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfde:	4b38      	ldr	r3, [pc, #224]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfea:	d107      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fd63 	bl	800cabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bffa:	e294      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c000:	e291      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c002:	4b2f      	ldr	r3, [pc, #188]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c00a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c00e:	d107      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c010:	f107 0318 	add.w	r3, r7, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f000 faa9 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01e:	e282      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c020:	2300      	movs	r3, #0
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c024:	e27f      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c026:	4b26      	ldr	r3, [pc, #152]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c032:	d107      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c034:	f107 030c 	add.w	r3, r7, #12
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fbeb 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c042:	e270      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	e26d      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c04a:	4b1d      	ldr	r3, [pc, #116]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c052:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c054:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d10c      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c062:	2b00      	cmp	r3, #0
 800c064:	d109      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c066:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	08db      	lsrs	r3, r3, #3
 800c06c:	f003 0303 	and.w	r3, r3, #3
 800c070:	4a14      	ldr	r2, [pc, #80]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c072:	fa22 f303 	lsr.w	r3, r2, r3
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c078:	e01e      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c086:	d106      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c08e:	d102      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c090:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c094:	e010      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c096:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c09e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0a2:	d106      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0aa:	d102      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ac:	4b07      	ldr	r3, [pc, #28]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b0:	e002      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0b6:	e236      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0b8:	e235      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0be:	e232      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	03d09000 	.word	0x03d09000
 800c0c8:	003d0900 	.word	0x003d0900
 800c0cc:	02faf080 	.word	0x02faf080
 800c0d0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	e225      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	f040 8085 	bne.w	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0e8:	4b9c      	ldr	r3, [pc, #624]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0f0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0f8:	d06b      	beq.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c100:	d874      	bhi.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c108:	d056      	beq.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c110:	d86c      	bhi.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c118:	d03b      	beq.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c120:	d864      	bhi.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c128:	d021      	beq.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c130:	d85c      	bhi.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	2b00      	cmp	r3, #0
 800c136:	d004      	beq.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c13e:	d004      	beq.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c140:	e054      	b.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c142:	f7fe fb5f 	bl	800a804 <HAL_RCC_GetPCLK1Freq>
 800c146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c148:	e1ed      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c14a:	4b84      	ldr	r3, [pc, #528]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c156:	d107      	bne.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c158:	f107 0318 	add.w	r3, r7, #24
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 fa05 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c166:	e1de      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16c:	e1db      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c16e:	4b7b      	ldr	r3, [pc, #492]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c17a:	d107      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c17c:	f107 030c 	add.w	r3, r7, #12
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fb47 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c18a:	e1cc      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c190:	e1c9      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c192:	4b72      	ldr	r3, [pc, #456]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0304 	and.w	r3, r3, #4
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	d109      	bne.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c19e:	4b6f      	ldr	r3, [pc, #444]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	08db      	lsrs	r3, r3, #3
 800c1a4:	f003 0303 	and.w	r3, r3, #3
 800c1a8:	4a6d      	ldr	r2, [pc, #436]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b0:	e1b9      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b6:	e1b6      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1b8:	4b68      	ldr	r3, [pc, #416]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1c4:	d102      	bne.n	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c1c6:	4b67      	ldr	r3, [pc, #412]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ca:	e1ac      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d0:	e1a9      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1d2:	4b62      	ldr	r3, [pc, #392]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1de:	d102      	bne.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c1e0:	4b61      	ldr	r3, [pc, #388]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1e4:	e19f      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ea:	e19c      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f0:	e199      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c1fa:	430b      	orrs	r3, r1
 800c1fc:	d173      	bne.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1fe:	4b57      	ldr	r3, [pc, #348]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c206:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c20e:	d02f      	beq.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c216:	d863      	bhi.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d004      	beq.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c224:	d012      	beq.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c226:	e05b      	b.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c228:	4b4c      	ldr	r3, [pc, #304]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c234:	d107      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c236:	f107 0318 	add.w	r3, r7, #24
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 f996 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c244:	e16f      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24a:	e16c      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c24c:	4b43      	ldr	r3, [pc, #268]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c258:	d107      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c25a:	f107 030c 	add.w	r3, r7, #12
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fad8 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c268:	e15d      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26e:	e15a      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c270:	4b3a      	ldr	r3, [pc, #232]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c278:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c27a:	4b38      	ldr	r3, [pc, #224]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0304 	and.w	r3, r3, #4
 800c282:	2b04      	cmp	r3, #4
 800c284:	d10c      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d109      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c28c:	4b33      	ldr	r3, [pc, #204]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	08db      	lsrs	r3, r3, #3
 800c292:	f003 0303 	and.w	r3, r3, #3
 800c296:	4a32      	ldr	r2, [pc, #200]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c298:	fa22 f303 	lsr.w	r3, r2, r3
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c29e:	e01e      	b.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2a0:	4b2e      	ldr	r3, [pc, #184]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ac:	d106      	bne.n	800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2b4:	d102      	bne.n	800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2b6:	4b2b      	ldr	r3, [pc, #172]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ba:	e010      	b.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2bc:	4b27      	ldr	r3, [pc, #156]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2c8:	d106      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d0:	d102      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2d2:	4b25      	ldr	r3, [pc, #148]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d6:	e002      	b.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2dc:	e123      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2de:	e122      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e4:	e11f      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ea:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c2ee:	430b      	orrs	r3, r1
 800c2f0:	d13c      	bne.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2f2:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c308:	d012      	beq.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c30a:	e023      	b.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c30c:	4b13      	ldr	r3, [pc, #76]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c318:	d107      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c31a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fbcc 	bl	800cabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c328:	e0fd      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c32e:	e0fa      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c330:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c33c:	d107      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c33e:	f107 0318 	add.w	r3, r7, #24
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f912 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c34c:	e0eb      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c352:	e0e8      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c358:	e0e5      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c35a:	bf00      	nop
 800c35c:	58024400 	.word	0x58024400
 800c360:	03d09000 	.word	0x03d09000
 800c364:	003d0900 	.word	0x003d0900
 800c368:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c36c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c370:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c374:	430b      	orrs	r3, r1
 800c376:	f040 8085 	bne.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c37a:	4b6d      	ldr	r3, [pc, #436]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c37e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c382:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c38a:	d06b      	beq.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c392:	d874      	bhi.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c39a:	d056      	beq.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a2:	d86c      	bhi.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3aa:	d03b      	beq.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3b2:	d864      	bhi.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ba:	d021      	beq.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c2:	d85c      	bhi.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3d0:	d004      	beq.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c3d2:	e054      	b.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c3d4:	f000 f8b4 	bl	800c540 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3da:	e0a4      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3dc:	4b54      	ldr	r3, [pc, #336]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3e8:	d107      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3ea:	f107 0318 	add.w	r3, r7, #24
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 f8bc 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f8:	e095      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3fe:	e092      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c400:	4b4b      	ldr	r3, [pc, #300]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c40c:	d107      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c40e:	f107 030c 	add.w	r3, r7, #12
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f9fe 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41c:	e083      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e080      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c424:	4b42      	ldr	r3, [pc, #264]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0304 	and.w	r3, r3, #4
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	d109      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c430:	4b3f      	ldr	r3, [pc, #252]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	08db      	lsrs	r3, r3, #3
 800c436:	f003 0303 	and.w	r3, r3, #3
 800c43a:	4a3e      	ldr	r2, [pc, #248]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c43c:	fa22 f303 	lsr.w	r3, r2, r3
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c442:	e070      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e06d      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c44a:	4b39      	ldr	r3, [pc, #228]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c456:	d102      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c458:	4b37      	ldr	r3, [pc, #220]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45c:	e063      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c462:	e060      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c464:	4b32      	ldr	r3, [pc, #200]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c46c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c470:	d102      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c472:	4b32      	ldr	r3, [pc, #200]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c476:	e056      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e053      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c482:	e050      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c488:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c48c:	430b      	orrs	r3, r1
 800c48e:	d148      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c490:	4b27      	ldr	r3, [pc, #156]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c498:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4a0:	d02a      	beq.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4a8:	d838      	bhi.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4b6:	d00d      	beq.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c4b8:	e030      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4ba:	4b1d      	ldr	r3, [pc, #116]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4c6:	d102      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c4c8:	4b1c      	ldr	r3, [pc, #112]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4cc:	e02b      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d2:	e028      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4d4:	4b16      	ldr	r3, [pc, #88]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4e0:	d107      	bne.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fae8 	bl	800cabc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f0:	e019      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f6:	e016      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4f8:	4b0d      	ldr	r3, [pc, #52]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c504:	d107      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c506:	f107 0318 	add.w	r3, r7, #24
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f82e 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c514:	e007      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c51a:	e004      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c520:	e001      	b.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3740      	adds	r7, #64	; 0x40
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	58024400 	.word	0x58024400
 800c534:	03d09000 	.word	0x03d09000
 800c538:	003d0900 	.word	0x003d0900
 800c53c:	02faf080 	.word	0x02faf080

0800c540 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c544:	f7fe f92e 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 800c548:	4602      	mov	r2, r0
 800c54a:	4b06      	ldr	r3, [pc, #24]	; (800c564 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	091b      	lsrs	r3, r3, #4
 800c550:	f003 0307 	and.w	r3, r3, #7
 800c554:	4904      	ldr	r1, [pc, #16]	; (800c568 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c556:	5ccb      	ldrb	r3, [r1, r3]
 800c558:	f003 031f 	and.w	r3, r3, #31
 800c55c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c560:	4618      	mov	r0, r3
 800c562:	bd80      	pop	{r7, pc}
 800c564:	58024400 	.word	0x58024400
 800c568:	08018578 	.word	0x08018578

0800c56c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b089      	sub	sp, #36	; 0x24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c574:	4ba1      	ldr	r3, [pc, #644]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c578:	f003 0303 	and.w	r3, r3, #3
 800c57c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c57e:	4b9f      	ldr	r3, [pc, #636]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c582:	0b1b      	lsrs	r3, r3, #12
 800c584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c588:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c58a:	4b9c      	ldr	r3, [pc, #624]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	091b      	lsrs	r3, r3, #4
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c596:	4b99      	ldr	r3, [pc, #612]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59a:	08db      	lsrs	r3, r3, #3
 800c59c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	fb02 f303 	mul.w	r3, r2, r3
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 8111 	beq.w	800c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	f000 8083 	beq.w	800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	f200 80a1 	bhi.w	800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d056      	beq.n	800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c5d6:	e099      	b.n	800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5d8:	4b88      	ldr	r3, [pc, #544]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d02d      	beq.n	800c640 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5e4:	4b85      	ldr	r3, [pc, #532]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	08db      	lsrs	r3, r3, #3
 800c5ea:	f003 0303 	and.w	r3, r3, #3
 800c5ee:	4a84      	ldr	r2, [pc, #528]	; (800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	ee07 3a90 	vmov	s15, r3
 800c5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c60e:	4b7b      	ldr	r3, [pc, #492]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c616:	ee07 3a90 	vmov	s15, r3
 800c61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c622:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c63a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c63e:	e087      	b.n	800c750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	ee07 3a90 	vmov	s15, r3
 800c646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c64a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c808 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c652:	4b6a      	ldr	r3, [pc, #424]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c65a:	ee07 3a90 	vmov	s15, r3
 800c65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c662:	ed97 6a03 	vldr	s12, [r7, #12]
 800c666:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c67e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c682:	e065      	b.n	800c750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c696:	4b59      	ldr	r3, [pc, #356]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c69e:	ee07 3a90 	vmov	s15, r3
 800c6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6c6:	e043      	b.n	800c750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6da:	4b48      	ldr	r3, [pc, #288]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e2:	ee07 3a90 	vmov	s15, r3
 800c6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c70a:	e021      	b.n	800c750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c71e:	4b37      	ldr	r3, [pc, #220]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c732:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c74e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c750:	4b2a      	ldr	r3, [pc, #168]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c754:	0a5b      	lsrs	r3, r3, #9
 800c756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c75a:	ee07 3a90 	vmov	s15, r3
 800c75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c76a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c776:	ee17 2a90 	vmov	r2, s15
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c77e:	4b1f      	ldr	r3, [pc, #124]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	0c1b      	lsrs	r3, r3, #16
 800c784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c788:	ee07 3a90 	vmov	s15, r3
 800c78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c794:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c798:	edd7 6a07 	vldr	s13, [r7, #28]
 800c79c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7a4:	ee17 2a90 	vmov	r2, s15
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7ac:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b0:	0e1b      	lsrs	r3, r3, #24
 800c7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7d2:	ee17 2a90 	vmov	r2, s15
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c7da:	e008      	b.n	800c7ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	609a      	str	r2, [r3, #8]
}
 800c7ee:	bf00      	nop
 800c7f0:	3724      	adds	r7, #36	; 0x24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	58024400 	.word	0x58024400
 800c800:	03d09000 	.word	0x03d09000
 800c804:	46000000 	.word	0x46000000
 800c808:	4c742400 	.word	0x4c742400
 800c80c:	4a742400 	.word	0x4a742400
 800c810:	4c3ebc20 	.word	0x4c3ebc20

0800c814 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c814:	b480      	push	{r7}
 800c816:	b089      	sub	sp, #36	; 0x24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c81c:	4ba1      	ldr	r3, [pc, #644]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c820:	f003 0303 	and.w	r3, r3, #3
 800c824:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c826:	4b9f      	ldr	r3, [pc, #636]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82a:	0d1b      	lsrs	r3, r3, #20
 800c82c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c830:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c832:	4b9c      	ldr	r3, [pc, #624]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c836:	0a1b      	lsrs	r3, r3, #8
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c83e:	4b99      	ldr	r3, [pc, #612]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c842:	08db      	lsrs	r3, r3, #3
 800c844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	fb02 f303 	mul.w	r3, r2, r3
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 8111 	beq.w	800ca84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	2b02      	cmp	r3, #2
 800c866:	f000 8083 	beq.w	800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	f200 80a1 	bhi.w	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d056      	beq.n	800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c87e:	e099      	b.n	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c880:	4b88      	ldr	r3, [pc, #544]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0320 	and.w	r3, r3, #32
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d02d      	beq.n	800c8e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c88c:	4b85      	ldr	r3, [pc, #532]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	08db      	lsrs	r3, r3, #3
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	4a84      	ldr	r2, [pc, #528]	; (800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c898:	fa22 f303 	lsr.w	r3, r2, r3
 800c89c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	ee07 3a90 	vmov	s15, r3
 800c8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8b6:	4b7b      	ldr	r3, [pc, #492]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8be:	ee07 3a90 	vmov	s15, r3
 800c8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800caac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8e6:	e087      	b.n	800c9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	ee07 3a90 	vmov	s15, r3
 800c8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cab0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8fa:	4b6a      	ldr	r3, [pc, #424]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c902:	ee07 3a90 	vmov	s15, r3
 800c906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c90e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800caac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c92a:	e065      	b.n	800c9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	ee07 3a90 	vmov	s15, r3
 800c932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c936:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c93e:	4b59      	ldr	r3, [pc, #356]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c946:	ee07 3a90 	vmov	s15, r3
 800c94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c952:	eddf 5a56 	vldr	s11, [pc, #344]	; 800caac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c96e:	e043      	b.n	800c9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c982:	4b48      	ldr	r3, [pc, #288]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98a:	ee07 3a90 	vmov	s15, r3
 800c98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c992:	ed97 6a03 	vldr	s12, [r7, #12]
 800c996:	eddf 5a45 	vldr	s11, [pc, #276]	; 800caac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9b2:	e021      	b.n	800c9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9c6:	4b37      	ldr	r3, [pc, #220]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800caac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9f8:	4b2a      	ldr	r3, [pc, #168]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fc:	0a5b      	lsrs	r3, r3, #9
 800c9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca1e:	ee17 2a90 	vmov	r2, s15
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca26:	4b1f      	ldr	r3, [pc, #124]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2a:	0c1b      	lsrs	r3, r3, #16
 800ca2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca30:	ee07 3a90 	vmov	s15, r3
 800ca34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca4c:	ee17 2a90 	vmov	r2, s15
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca54:	4b13      	ldr	r3, [pc, #76]	; (800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca58:	0e1b      	lsrs	r3, r3, #24
 800ca5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca7a:	ee17 2a90 	vmov	r2, s15
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca82:	e008      	b.n	800ca96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	609a      	str	r2, [r3, #8]
}
 800ca96:	bf00      	nop
 800ca98:	3724      	adds	r7, #36	; 0x24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	58024400 	.word	0x58024400
 800caa8:	03d09000 	.word	0x03d09000
 800caac:	46000000 	.word	0x46000000
 800cab0:	4c742400 	.word	0x4c742400
 800cab4:	4a742400 	.word	0x4a742400
 800cab8:	4c3ebc20 	.word	0x4c3ebc20

0800cabc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b089      	sub	sp, #36	; 0x24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cac4:	4ba0      	ldr	r3, [pc, #640]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac8:	f003 0303 	and.w	r3, r3, #3
 800cacc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cace:	4b9e      	ldr	r3, [pc, #632]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad2:	091b      	lsrs	r3, r3, #4
 800cad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cad8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cada:	4b9b      	ldr	r3, [pc, #620]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cae4:	4b98      	ldr	r3, [pc, #608]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae8:	08db      	lsrs	r3, r3, #3
 800caea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	fb02 f303 	mul.w	r3, r2, r3
 800caf4:	ee07 3a90 	vmov	s15, r3
 800caf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 8111 	beq.w	800cd2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	f000 8083 	beq.w	800cc16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	f200 80a1 	bhi.w	800cc5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d056      	beq.n	800cbd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb24:	e099      	b.n	800cc5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb26:	4b88      	ldr	r3, [pc, #544]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 0320 	and.w	r3, r3, #32
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d02d      	beq.n	800cb8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb32:	4b85      	ldr	r3, [pc, #532]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	08db      	lsrs	r3, r3, #3
 800cb38:	f003 0303 	and.w	r3, r3, #3
 800cb3c:	4a83      	ldr	r2, [pc, #524]	; (800cd4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	ee07 3a90 	vmov	s15, r3
 800cb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb5c:	4b7a      	ldr	r3, [pc, #488]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb64:	ee07 3a90 	vmov	s15, r3
 800cb68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb70:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb8c:	e087      	b.n	800cc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cba0:	4b69      	ldr	r3, [pc, #420]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba8:	ee07 3a90 	vmov	s15, r3
 800cbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbd0:	e065      	b.n	800cc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	ee07 3a90 	vmov	s15, r3
 800cbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cbe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe4:	4b58      	ldr	r3, [pc, #352]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbec:	ee07 3a90 	vmov	s15, r3
 800cbf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc14:	e043      	b.n	800cc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc28:	4b47      	ldr	r3, [pc, #284]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc30:	ee07 3a90 	vmov	s15, r3
 800cc34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc38:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc58:	e021      	b.n	800cc9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	ee07 3a90 	vmov	s15, r3
 800cc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc6c:	4b36      	ldr	r3, [pc, #216]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc80:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc9e:	4b2a      	ldr	r3, [pc, #168]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca2:	0a5b      	lsrs	r3, r3, #9
 800cca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca8:	ee07 3a90 	vmov	s15, r3
 800ccac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc4:	ee17 2a90 	vmov	r2, s15
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cccc:	4b1e      	ldr	r3, [pc, #120]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd0:	0c1b      	lsrs	r3, r3, #16
 800ccd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd6:	ee07 3a90 	vmov	s15, r3
 800ccda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf2:	ee17 2a90 	vmov	r2, s15
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ccfa:	4b13      	ldr	r3, [pc, #76]	; (800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfe:	0e1b      	lsrs	r3, r3, #24
 800cd00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd04:	ee07 3a90 	vmov	s15, r3
 800cd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd20:	ee17 2a90 	vmov	r2, s15
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd28:	e008      	b.n	800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	609a      	str	r2, [r3, #8]
}
 800cd3c:	bf00      	nop
 800cd3e:	3724      	adds	r7, #36	; 0x24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	58024400 	.word	0x58024400
 800cd4c:	03d09000 	.word	0x03d09000
 800cd50:	46000000 	.word	0x46000000
 800cd54:	4c742400 	.word	0x4c742400
 800cd58:	4a742400 	.word	0x4a742400
 800cd5c:	4c3ebc20 	.word	0x4c3ebc20

0800cd60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd6e:	4b53      	ldr	r3, [pc, #332]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	f003 0303 	and.w	r3, r3, #3
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	d101      	bne.n	800cd7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e099      	b.n	800ceb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd7e:	4b4f      	ldr	r3, [pc, #316]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a4e      	ldr	r2, [pc, #312]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cd84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd8a:	f7f6 fe7b 	bl	8003a84 <HAL_GetTick>
 800cd8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd90:	e008      	b.n	800cda4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd92:	f7f6 fe77 	bl	8003a84 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	d901      	bls.n	800cda4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cda0:	2303      	movs	r3, #3
 800cda2:	e086      	b.n	800ceb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cda4:	4b45      	ldr	r3, [pc, #276]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f0      	bne.n	800cd92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cdb0:	4b42      	ldr	r3, [pc, #264]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	031b      	lsls	r3, r3, #12
 800cdbe:	493f      	ldr	r1, [pc, #252]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	628b      	str	r3, [r1, #40]	; 0x28
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	025b      	lsls	r3, r3, #9
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	041b      	lsls	r3, r3, #16
 800cde2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	061b      	lsls	r3, r3, #24
 800cdf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cdf4:	4931      	ldr	r1, [pc, #196]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdfa:	4b30      	ldr	r3, [pc, #192]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	492d      	ldr	r1, [pc, #180]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce0c:	4b2b      	ldr	r3, [pc, #172]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce10:	f023 0220 	bic.w	r2, r3, #32
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	699b      	ldr	r3, [r3, #24]
 800ce18:	4928      	ldr	r1, [pc, #160]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce1e:	4b27      	ldr	r3, [pc, #156]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	4a26      	ldr	r2, [pc, #152]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce24:	f023 0310 	bic.w	r3, r3, #16
 800ce28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce2a:	4b24      	ldr	r3, [pc, #144]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce2e:	4b24      	ldr	r3, [pc, #144]	; (800cec0 <RCCEx_PLL2_Config+0x160>)
 800ce30:	4013      	ands	r3, r2
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	69d2      	ldr	r2, [r2, #28]
 800ce36:	00d2      	lsls	r2, r2, #3
 800ce38:	4920      	ldr	r1, [pc, #128]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce3e:	4b1f      	ldr	r3, [pc, #124]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce42:	4a1e      	ldr	r2, [pc, #120]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce44:	f043 0310 	orr.w	r3, r3, #16
 800ce48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d106      	bne.n	800ce5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce50:	4b1a      	ldr	r3, [pc, #104]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce54:	4a19      	ldr	r2, [pc, #100]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce5c:	e00f      	b.n	800ce7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d106      	bne.n	800ce72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce64:	4b15      	ldr	r3, [pc, #84]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce68:	4a14      	ldr	r2, [pc, #80]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce70:	e005      	b.n	800ce7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce72:	4b12      	ldr	r3, [pc, #72]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	4a11      	ldr	r2, [pc, #68]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce7e:	4b0f      	ldr	r3, [pc, #60]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a0e      	ldr	r2, [pc, #56]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800ce84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce8a:	f7f6 fdfb 	bl	8003a84 <HAL_GetTick>
 800ce8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce90:	e008      	b.n	800cea4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce92:	f7f6 fdf7 	bl	8003a84 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d901      	bls.n	800cea4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cea0:	2303      	movs	r3, #3
 800cea2:	e006      	b.n	800ceb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cea4:	4b05      	ldr	r3, [pc, #20]	; (800cebc <RCCEx_PLL2_Config+0x15c>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0f0      	beq.n	800ce92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	58024400 	.word	0x58024400
 800cec0:	ffff0007 	.word	0xffff0007

0800cec4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ced2:	4b53      	ldr	r3, [pc, #332]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800ced4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced6:	f003 0303 	and.w	r3, r3, #3
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d101      	bne.n	800cee2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e099      	b.n	800d016 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cee2:	4b4f      	ldr	r3, [pc, #316]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a4e      	ldr	r2, [pc, #312]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceee:	f7f6 fdc9 	bl	8003a84 <HAL_GetTick>
 800cef2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cef4:	e008      	b.n	800cf08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cef6:	f7f6 fdc5 	bl	8003a84 <HAL_GetTick>
 800cefa:	4602      	mov	r2, r0
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d901      	bls.n	800cf08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e086      	b.n	800d016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf08:	4b45      	ldr	r3, [pc, #276]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1f0      	bne.n	800cef6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf14:	4b42      	ldr	r3, [pc, #264]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	051b      	lsls	r3, r3, #20
 800cf22:	493f      	ldr	r1, [pc, #252]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	628b      	str	r3, [r1, #40]	; 0x28
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	025b      	lsls	r3, r3, #9
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	041b      	lsls	r3, r3, #16
 800cf46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	061b      	lsls	r3, r3, #24
 800cf54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf58:	4931      	ldr	r1, [pc, #196]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf5e:	4b30      	ldr	r3, [pc, #192]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	492d      	ldr	r1, [pc, #180]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf70:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	4928      	ldr	r1, [pc, #160]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf82:	4b27      	ldr	r3, [pc, #156]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	4a26      	ldr	r2, [pc, #152]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf8e:	4b24      	ldr	r3, [pc, #144]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf92:	4b24      	ldr	r3, [pc, #144]	; (800d024 <RCCEx_PLL3_Config+0x160>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	69d2      	ldr	r2, [r2, #28]
 800cf9a:	00d2      	lsls	r2, r2, #3
 800cf9c:	4920      	ldr	r1, [pc, #128]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfa2:	4b1f      	ldr	r3, [pc, #124]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	4a1e      	ldr	r2, [pc, #120]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfb4:	4b1a      	ldr	r3, [pc, #104]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	4a19      	ldr	r2, [pc, #100]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cfbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfc0:	e00f      	b.n	800cfe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d106      	bne.n	800cfd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cfc8:	4b15      	ldr	r3, [pc, #84]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	4a14      	ldr	r2, [pc, #80]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfd4:	e005      	b.n	800cfe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfd6:	4b12      	ldr	r3, [pc, #72]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	4a11      	ldr	r2, [pc, #68]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfe2:	4b0f      	ldr	r3, [pc, #60]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a0e      	ldr	r2, [pc, #56]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfee:	f7f6 fd49 	bl	8003a84 <HAL_GetTick>
 800cff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cff4:	e008      	b.n	800d008 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cff6:	f7f6 fd45 	bl	8003a84 <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b02      	cmp	r3, #2
 800d002:	d901      	bls.n	800d008 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e006      	b.n	800d016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d008:	4b05      	ldr	r3, [pc, #20]	; (800d020 <RCCEx_PLL3_Config+0x15c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f0      	beq.n	800cff6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d014:	7bfb      	ldrb	r3, [r7, #15]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	58024400 	.word	0x58024400
 800d024:	ffff0007 	.word	0xffff0007

0800d028 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08a      	sub	sp, #40	; 0x28
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d036:	2301      	movs	r3, #1
 800d038:	e075      	b.n	800d126 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d105      	bne.n	800d052 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7f5 fe59 	bl	8002d04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2204      	movs	r2, #4
 800d056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f868 	bl	800d130 <HAL_SD_InitCard>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	e05d      	b.n	800d126 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4619      	mov	r1, r3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fdaf 	bl	800dbd4 <HAL_SD_GetCardStatus>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	e052      	b.n	800d126 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d080:	7e3b      	ldrb	r3, [r7, #24]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d086:	7e7b      	ldrb	r3, [r7, #25]
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d090:	2b01      	cmp	r3, #1
 800d092:	d10a      	bne.n	800d0aa <HAL_SD_Init+0x82>
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	2b00      	cmp	r3, #0
 800d098:	d102      	bne.n	800d0a0 <HAL_SD_Init+0x78>
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0a6:	659a      	str	r2, [r3, #88]	; 0x58
 800d0a8:	e00b      	b.n	800d0c2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d104      	bne.n	800d0bc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0b8:	659a      	str	r2, [r3, #88]	; 0x58
 800d0ba:	e002      	b.n	800d0c2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fe6d 	bl	800dda8 <HAL_SD_ConfigWideBusOperation>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e026      	b.n	800d126 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d0d8:	f7f6 fcd4 	bl	8003a84 <HAL_GetTick>
 800d0dc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0de:	e011      	b.n	800d104 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0e0:	f7f6 fcd0 	bl	8003a84 <HAL_GetTick>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d109      	bne.n	800d104 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0f6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e010      	b.n	800d126 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 ff61 	bl	800dfcc <HAL_SD_GetCardState>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d1e7      	bne.n	800d0e0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3728      	adds	r7, #40	; 0x28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
	...

0800d130 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d130:	b590      	push	{r4, r7, lr}
 800d132:	b08d      	sub	sp, #52	; 0x34
 800d134:	af02      	add	r7, sp, #8
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d140:	2300      	movs	r3, #0
 800d142:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d144:	2300      	movs	r3, #0
 800d146:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d148:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d14c:	f04f 0100 	mov.w	r1, #0
 800d150:	f7fe fd24 	bl	800bb9c <HAL_RCCEx_GetPeriphCLKFreq>
 800d154:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d109      	bne.n	800d170 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d16a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e070      	b.n	800d252 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	0a1b      	lsrs	r3, r3, #8
 800d174:	4a39      	ldr	r2, [pc, #228]	; (800d25c <HAL_SD_InitCard+0x12c>)
 800d176:	fba2 2303 	umull	r2, r3, r2, r3
 800d17a:	091b      	lsrs	r3, r3, #4
 800d17c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681c      	ldr	r4, [r3, #0]
 800d182:	466a      	mov	r2, sp
 800d184:	f107 0318 	add.w	r3, r7, #24
 800d188:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d18c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d190:	f107 030c 	add.w	r3, r7, #12
 800d194:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d196:	4620      	mov	r0, r4
 800d198:	f004 fec4 	bl	8011f24 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f004 ff07 	bl	8011fb4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d005      	beq.n	800d1b8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d007      	beq.n	800d1ce <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d1be:	4a28      	ldr	r2, [pc, #160]	; (800d260 <HAL_SD_InitCard+0x130>)
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7f6 fc67 	bl	8003a9c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 ffea 	bl	800e1a8 <SD_PowerON>
 800d1d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00b      	beq.n	800d1f4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e02e      	b.n	800d252 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 ff09 	bl	800e00c <SD_InitCard>
 800d1fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00b      	beq.n	800d21a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d20e:	6a3b      	ldr	r3, [r7, #32]
 800d210:	431a      	orrs	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	e01b      	b.n	800d252 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d222:	4618      	mov	r0, r3
 800d224:	f004 ff5c 	bl	80120e0 <SDMMC_CmdBlockLength>
 800d228:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00f      	beq.n	800d250 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a0b      	ldr	r2, [pc, #44]	; (800d264 <HAL_SD_InitCard+0x134>)
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d23c:	6a3b      	ldr	r3, [r7, #32]
 800d23e:	431a      	orrs	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e000      	b.n	800d252 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	372c      	adds	r7, #44	; 0x2c
 800d256:	46bd      	mov	sp, r7
 800d258:	bd90      	pop	{r4, r7, pc}
 800d25a:	bf00      	nop
 800d25c:	014f8b59 	.word	0x014f8b59
 800d260:	00012110 	.word	0x00012110
 800d264:	1fe00fff 	.word	0x1fe00fff

0800d268 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08c      	sub	sp, #48	; 0x30
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d107      	bne.n	800d290 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d284:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e08d      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b01      	cmp	r3, #1
 800d29a:	f040 8086 	bne.w	800d3aa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	441a      	add	r2, r3
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d907      	bls.n	800d2c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e074      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	025a      	lsls	r2, r3, #9
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d002      	beq.n	800d2ee <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	025b      	lsls	r3, r3, #9
 800d2ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	025b      	lsls	r3, r3, #9
 800d2f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2fa:	2390      	movs	r3, #144	; 0x90
 800d2fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2fe:	2302      	movs	r3, #2
 800d300:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d302:	2300      	movs	r3, #0
 800d304:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d306:	2300      	movs	r3, #0
 800d308:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f107 0210 	add.w	r2, r7, #16
 800d312:	4611      	mov	r1, r2
 800d314:	4618      	mov	r0, r3
 800d316:	f004 feb7 	bl	8012088 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68da      	ldr	r2, [r3, #12]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d328:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2201      	movs	r2, #1
 800d338:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d90a      	bls.n	800d356 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2282      	movs	r2, #130	; 0x82
 800d344:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d34c:	4618      	mov	r0, r3
 800d34e:	f004 ff0d 	bl	801216c <SDMMC_CmdReadMultiBlock>
 800d352:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d354:	e009      	b.n	800d36a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2281      	movs	r2, #129	; 0x81
 800d35a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d362:	4618      	mov	r0, r3
 800d364:	f004 fedf 	bl	8012126 <SDMMC_CmdReadSingleBlock>
 800d368:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d012      	beq.n	800d396 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a0f      	ldr	r2, [pc, #60]	; (800d3b4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d376:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	431a      	orrs	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e00a      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d3a4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e000      	b.n	800d3ac <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3aa:	2302      	movs	r3, #2
  }
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3730      	adds	r7, #48	; 0x30
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	1fe00fff 	.word	0x1fe00fff

0800d3b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	; 0x30
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d107      	bne.n	800d3e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e08d      	b.n	800d4fc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	f040 8086 	bne.w	800d4fa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d907      	bls.n	800d412 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d406:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e074      	b.n	800d4fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2203      	movs	r2, #3
 800d416:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2200      	movs	r2, #0
 800d420:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	025a      	lsls	r2, r3, #9
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d434:	2b01      	cmp	r3, #1
 800d436:	d002      	beq.n	800d43e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	025b      	lsls	r3, r3, #9
 800d43c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d43e:	f04f 33ff 	mov.w	r3, #4294967295
 800d442:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	025b      	lsls	r3, r3, #9
 800d448:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d44a:	2390      	movs	r3, #144	; 0x90
 800d44c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d44e:	2300      	movs	r3, #0
 800d450:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d452:	2300      	movs	r3, #0
 800d454:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d456:	2300      	movs	r3, #0
 800d458:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f107 0210 	add.w	r2, r7, #16
 800d462:	4611      	mov	r1, r2
 800d464:	4618      	mov	r0, r3
 800d466:	f004 fe0f 	bl	8012088 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68da      	ldr	r2, [r3, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d478:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2201      	movs	r2, #1
 800d488:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d90a      	bls.n	800d4a6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	22a0      	movs	r2, #160	; 0xa0
 800d494:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d49c:	4618      	mov	r0, r3
 800d49e:	f004 feab 	bl	80121f8 <SDMMC_CmdWriteMultiBlock>
 800d4a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4a4:	e009      	b.n	800d4ba <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2290      	movs	r2, #144	; 0x90
 800d4aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f004 fe7d 	bl	80121b2 <SDMMC_CmdWriteSingleBlock>
 800d4b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d012      	beq.n	800d4e6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a0f      	ldr	r2, [pc, #60]	; (800d504 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	431a      	orrs	r2, r3
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e00a      	b.n	800d4fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4f4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e000      	b.n	800d4fc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d4fa:	2302      	movs	r3, #2
  }
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3730      	adds	r7, #48	; 0x30
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	1fe00fff 	.word	0x1fe00fff

0800d508 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d514:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d008      	beq.n	800d536 <HAL_SD_IRQHandler+0x2e>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f003 0308 	and.w	r3, r3, #8
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f001 f926 	bl	800e780 <SD_Read_IT>
 800d534:	e19a      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 80ac 	beq.w	800d69e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	4b59      	ldr	r3, [pc, #356]	; (800d6c0 <HAL_SD_IRQHandler+0x1b8>)
 800d55c:	400b      	ands	r3, r1
 800d55e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d56e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68da      	ldr	r2, [r3, #12]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d57e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f003 0308 	and.w	r3, r3, #8
 800d586:	2b00      	cmp	r3, #0
 800d588:	d038      	beq.n	800d5fc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f003 0302 	and.w	r3, r3, #2
 800d590:	2b00      	cmp	r3, #0
 800d592:	d104      	bne.n	800d59e <HAL_SD_IRQHandler+0x96>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f003 0320 	and.w	r3, r3, #32
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d011      	beq.n	800d5c2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f004 fe4c 	bl	8012240 <SDMMC_CmdStopTransfer>
 800d5a8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d008      	beq.n	800d5c2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f95b 	bl	800d878 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a3f      	ldr	r2, [pc, #252]	; (800d6c4 <HAL_SD_IRQHandler+0x1bc>)
 800d5c8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d104      	bne.n	800d5ec <HAL_SD_IRQHandler+0xe4>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f006 fe4d 	bl	801428c <HAL_SD_RxCpltCallback>
 800d5f2:	e13b      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f006 fe3f 	bl	8014278 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5fa:	e137      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 8132 	beq.w	800d86c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2200      	movs	r2, #0
 800d60e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2200      	movs	r2, #0
 800d616:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2200      	movs	r2, #0
 800d61e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f003 0302 	and.w	r3, r3, #2
 800d626:	2b00      	cmp	r3, #0
 800d628:	d104      	bne.n	800d634 <HAL_SD_IRQHandler+0x12c>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f003 0320 	and.w	r3, r3, #32
 800d630:	2b00      	cmp	r3, #0
 800d632:	d011      	beq.n	800d658 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4618      	mov	r0, r3
 800d63a:	f004 fe01 	bl	8012240 <SDMMC_CmdStopTransfer>
 800d63e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d008      	beq.n	800d658 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	431a      	orrs	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f910 	bl	800d878 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f003 0310 	and.w	r3, r3, #16
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d104      	bne.n	800d67a <HAL_SD_IRQHandler+0x172>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f003 0320 	and.w	r3, r3, #32
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f006 fdfc 	bl	8014278 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	2b00      	cmp	r3, #0
 800d688:	d105      	bne.n	800d696 <HAL_SD_IRQHandler+0x18e>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f003 0302 	and.w	r3, r3, #2
 800d690:	2b00      	cmp	r3, #0
 800d692:	f000 80eb 	beq.w	800d86c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f006 fdf8 	bl	801428c <HAL_SD_RxCpltCallback>
}
 800d69c:	e0e6      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00d      	beq.n	800d6c8 <HAL_SD_IRQHandler+0x1c0>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f003 0308 	and.w	r3, r3, #8
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d008      	beq.n	800d6c8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 f8a8 	bl	800e80c <SD_Write_IT>
 800d6bc:	e0d6      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
 800d6be:	bf00      	nop
 800d6c0:	ffff3ec5 	.word	0xffff3ec5
 800d6c4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 809d 	beq.w	800d812 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6de:	f003 0302 	and.w	r3, r3, #2
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ea:	f043 0202 	orr.w	r2, r3, #2
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f8:	f003 0308 	and.w	r3, r3, #8
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d005      	beq.n	800d70c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d704:	f043 0208 	orr.w	r2, r3, #8
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d712:	f003 0320 	and.w	r3, r3, #32
 800d716:	2b00      	cmp	r3, #0
 800d718:	d005      	beq.n	800d726 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71e:	f043 0220 	orr.w	r2, r3, #32
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d72c:	f003 0310 	and.w	r3, r3, #16
 800d730:	2b00      	cmp	r3, #0
 800d732:	d005      	beq.n	800d740 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d738:	f043 0210 	orr.w	r2, r3, #16
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a4b      	ldr	r2, [pc, #300]	; (800d874 <HAL_SD_IRQHandler+0x36c>)
 800d746:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d756:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68da      	ldr	r2, [r3, #12]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d766:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d776:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68da      	ldr	r2, [r3, #12]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d786:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f004 fd57 	bl	8012240 <SDMMC_CmdStopTransfer>
 800d792:	4602      	mov	r2, r0
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d798:	431a      	orrs	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7ac:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f003 0308 	and.w	r3, r3, #8
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00a      	beq.n	800d7d8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f851 	bl	800d878 <HAL_SD_ErrorCallback>
}
 800d7d6:	e049      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d044      	beq.n	800d86c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d040      	beq.n	800d86c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7f8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2200      	movs	r2, #0
 800d800:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f834 	bl	800d878 <HAL_SD_ErrorCallback>
}
 800d810:	e02c      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d025      	beq.n	800d86c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d828:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10c      	bne.n	800d852 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f003 0320 	and.w	r3, r3, #32
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f001 f84a 	bl	800e8dc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d848:	e010      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f001 f832 	bl	800e8b4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d850:	e00c      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f003 0320 	and.w	r3, r3, #32
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f001 f833 	bl	800e8c8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d862:	e003      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f001 f81b 	bl	800e8a0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d86a:	e7ff      	b.n	800d86c <HAL_SD_IRQHandler+0x364>
 800d86c:	bf00      	nop
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	18000f3a 	.word	0x18000f3a

0800d878 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d89a:	0f9b      	lsrs	r3, r3, #30
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8a6:	0e9b      	lsrs	r3, r3, #26
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	f003 030f 	and.w	r3, r3, #15
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8b8:	0e1b      	lsrs	r3, r3, #24
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f003 0303 	and.w	r3, r3, #3
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ca:	0c1b      	lsrs	r3, r3, #16
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d6:	0a1b      	lsrs	r3, r3, #8
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ec:	0d1b      	lsrs	r3, r3, #20
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	f003 030f 	and.w	r3, r3, #15
 800d900:	b2da      	uxtb	r2, r3
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d90a:	0bdb      	lsrs	r3, r3, #15
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	b2da      	uxtb	r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d91c:	0b9b      	lsrs	r3, r3, #14
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	b2da      	uxtb	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92e:	0b5b      	lsrs	r3, r3, #13
 800d930:	b2db      	uxtb	r3, r3
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	b2da      	uxtb	r2, r3
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d940:	0b1b      	lsrs	r3, r3, #12
 800d942:	b2db      	uxtb	r3, r3
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2200      	movs	r2, #0
 800d952:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d163      	bne.n	800da24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d960:	009a      	lsls	r2, r3, #2
 800d962:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d966:	4013      	ands	r3, r2
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d96c:	0f92      	lsrs	r2, r2, #30
 800d96e:	431a      	orrs	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d978:	0edb      	lsrs	r3, r3, #27
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 0307 	and.w	r3, r3, #7
 800d980:	b2da      	uxtb	r2, r3
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d98a:	0e1b      	lsrs	r3, r3, #24
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0307 	and.w	r3, r3, #7
 800d992:	b2da      	uxtb	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d99c:	0d5b      	lsrs	r3, r3, #21
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	f003 0307 	and.w	r3, r3, #7
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ae:	0c9b      	lsrs	r3, r3, #18
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	f003 0307 	and.w	r3, r3, #7
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c0:	0bdb      	lsrs	r3, r3, #15
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	f003 0307 	and.w	r3, r3, #7
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	1c5a      	adds	r2, r3, #1
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	7e1b      	ldrb	r3, [r3, #24]
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	3302      	adds	r3, #2
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d9ee:	fb03 f202 	mul.w	r2, r3, r2
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	7a1b      	ldrb	r3, [r3, #8]
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 030f 	and.w	r3, r3, #15
 800da00:	2201      	movs	r2, #1
 800da02:	409a      	lsls	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da10:	0a52      	lsrs	r2, r2, #9
 800da12:	fb03 f202 	mul.w	r2, r3, r2
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da20:	655a      	str	r2, [r3, #84]	; 0x54
 800da22:	e031      	b.n	800da88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d11d      	bne.n	800da68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da30:	041b      	lsls	r3, r3, #16
 800da32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da3a:	0c1b      	lsrs	r3, r3, #16
 800da3c:	431a      	orrs	r2, r3
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	3301      	adds	r3, #1
 800da48:	029a      	lsls	r2, r3, #10
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	655a      	str	r2, [r3, #84]	; 0x54
 800da66:	e00f      	b.n	800da88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a58      	ldr	r2, [pc, #352]	; (800dbd0 <HAL_SD_GetCardCSD+0x344>)
 800da6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2201      	movs	r2, #1
 800da80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	e09d      	b.n	800dbc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da8c:	0b9b      	lsrs	r3, r3, #14
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0301 	and.w	r3, r3, #1
 800da94:	b2da      	uxtb	r2, r3
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da9e:	09db      	lsrs	r3, r3, #7
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dac0:	0fdb      	lsrs	r3, r3, #31
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dacc:	0f5b      	lsrs	r3, r3, #29
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	f003 0303 	and.w	r3, r3, #3
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dade:	0e9b      	lsrs	r3, r3, #26
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	f003 0307 	and.w	r3, r3, #7
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf0:	0d9b      	lsrs	r3, r3, #22
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	f003 030f 	and.w	r3, r3, #15
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db02:	0d5b      	lsrs	r3, r3, #21
 800db04:	b2db      	uxtb	r3, r3
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2200      	movs	r2, #0
 800db16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db1e:	0c1b      	lsrs	r3, r3, #16
 800db20:	b2db      	uxtb	r3, r3
 800db22:	f003 0301 	and.w	r3, r3, #1
 800db26:	b2da      	uxtb	r2, r3
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db32:	0bdb      	lsrs	r3, r3, #15
 800db34:	b2db      	uxtb	r3, r3
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db46:	0b9b      	lsrs	r3, r3, #14
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db5a:	0b5b      	lsrs	r3, r3, #13
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db6e:	0b1b      	lsrs	r3, r3, #12
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	b2da      	uxtb	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db82:	0a9b      	lsrs	r3, r3, #10
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db96:	0a1b      	lsrs	r3, r3, #8
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0303 	and.w	r3, r3, #3
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbaa:	085b      	lsrs	r3, r3, #1
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	1fe00fff 	.word	0x1fe00fff

0800dbd4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b094      	sub	sp, #80	; 0x50
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	d101      	bne.n	800dbf4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e0a7      	b.n	800dd44 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbf4:	f107 0308 	add.w	r3, r7, #8
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fb62 	bl	800e2c4 <SD_SendSDStatus>
 800dc00:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d011      	beq.n	800dc2c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a4f      	ldr	r2, [pc, #316]	; (800dd4c <HAL_SD_GetCardStatus+0x178>)
 800dc0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc16:	431a      	orrs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc2a:	e070      	b.n	800dd0e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	099b      	lsrs	r3, r3, #6
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	f003 0303 	and.w	r3, r3, #3
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	095b      	lsrs	r3, r3, #5
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	f003 0301 	and.w	r3, r3, #1
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	0a1b      	lsrs	r3, r3, #8
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	0e1b      	lsrs	r3, r3, #24
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	061a      	lsls	r2, r3, #24
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	021b      	lsls	r3, r3, #8
 800dc6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc72:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	0a1b      	lsrs	r3, r3, #8
 800dc78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc7c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	0e1b      	lsrs	r3, r3, #24
 800dc82:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	0a1b      	lsrs	r3, r3, #8
 800dc94:	b2da      	uxtb	r2, r3
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	0d1b      	lsrs	r3, r3, #20
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	f003 030f 	and.w	r3, r3, #15
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	0c1b      	lsrs	r3, r3, #16
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	0a9b      	lsrs	r3, r3, #10
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	0a1b      	lsrs	r3, r3, #8
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0303 	and.w	r3, r3, #3
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	091b      	lsrs	r3, r3, #4
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f003 030f 	and.w	r3, r3, #15
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	f003 030f 	and.w	r3, r3, #15
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	0e1b      	lsrs	r3, r3, #24
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd16:	4618      	mov	r0, r3
 800dd18:	f004 f9e2 	bl	80120e0 <SDMMC_CmdBlockLength>
 800dd1c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00d      	beq.n	800dd40 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a08      	ldr	r2, [pc, #32]	; (800dd4c <HAL_SD_GetCardStatus+0x178>)
 800dd2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd30:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dd40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3750      	adds	r7, #80	; 0x50
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	1fe00fff 	.word	0x1fe00fff

0800dd50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dda8:	b590      	push	{r4, r7, lr}
 800ddaa:	b08d      	sub	sp, #52	; 0x34
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2203      	movs	r2, #3
 800ddbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d02e      	beq.n	800de26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddce:	d106      	bne.n	800ddde <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	635a      	str	r2, [r3, #52]	; 0x34
 800dddc:	e029      	b.n	800de32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dde4:	d10a      	bne.n	800ddfc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fb64 	bl	800e4b4 <SD_WideBus_Enable>
 800ddec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	431a      	orrs	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	635a      	str	r2, [r3, #52]	; 0x34
 800ddfa:	e01a      	b.n	800de32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10a      	bne.n	800de18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fba1 	bl	800e54a <SD_WideBus_Disable>
 800de08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	431a      	orrs	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	635a      	str	r2, [r3, #52]	; 0x34
 800de16:	e00c      	b.n	800de32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	635a      	str	r2, [r3, #52]	; 0x34
 800de24:	e005      	b.n	800de32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de36:	2b00      	cmp	r3, #0
 800de38:	d007      	beq.n	800de4a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a5f      	ldr	r2, [pc, #380]	; (800dfbc <HAL_SD_ConfigWideBusOperation+0x214>)
 800de40:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de48:	e096      	b.n	800df78 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de4a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de4e:	f04f 0100 	mov.w	r1, #0
 800de52:	f7fd fea3 	bl	800bb9c <HAL_RCCEx_GetPeriphCLKFreq>
 800de56:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 8083 	beq.w	800df66 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	695a      	ldr	r2, [r3, #20]
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	4950      	ldr	r1, [pc, #320]	; (800dfc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de7e:	fba1 1303 	umull	r1, r3, r1, r3
 800de82:	0e1b      	lsrs	r3, r3, #24
 800de84:	429a      	cmp	r2, r3
 800de86:	d303      	bcc.n	800de90 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	61bb      	str	r3, [r7, #24]
 800de8e:	e05a      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de98:	d103      	bne.n	800dea2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	695b      	ldr	r3, [r3, #20]
 800de9e:	61bb      	str	r3, [r7, #24]
 800dea0:	e051      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deaa:	d126      	bne.n	800defa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10e      	bne.n	800ded2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	4a43      	ldr	r2, [pc, #268]	; (800dfc4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d906      	bls.n	800deca <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	4a40      	ldr	r2, [pc, #256]	; (800dfc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dec0:	fba2 2303 	umull	r2, r3, r2, r3
 800dec4:	0e5b      	lsrs	r3, r3, #25
 800dec6:	61bb      	str	r3, [r7, #24]
 800dec8:	e03d      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	61bb      	str	r3, [r7, #24]
 800ded0:	e039      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	69fa      	ldr	r2, [r7, #28]
 800deda:	fbb2 f3f3 	udiv	r3, r2, r3
 800dede:	4a39      	ldr	r2, [pc, #228]	; (800dfc4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d906      	bls.n	800def2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	4a36      	ldr	r2, [pc, #216]	; (800dfc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dee8:	fba2 2303 	umull	r2, r3, r2, r3
 800deec:	0e5b      	lsrs	r3, r3, #25
 800deee:	61bb      	str	r3, [r7, #24]
 800def0:	e029      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	61bb      	str	r3, [r7, #24]
 800def8:	e025      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d10e      	bne.n	800df20 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	4a30      	ldr	r2, [pc, #192]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d906      	bls.n	800df18 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	4a2c      	ldr	r2, [pc, #176]	; (800dfc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df0e:	fba2 2303 	umull	r2, r3, r2, r3
 800df12:	0e1b      	lsrs	r3, r3, #24
 800df14:	61bb      	str	r3, [r7, #24]
 800df16:	e016      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	695b      	ldr	r3, [r3, #20]
 800df1c:	61bb      	str	r3, [r7, #24]
 800df1e:	e012      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	695b      	ldr	r3, [r3, #20]
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	69fa      	ldr	r2, [r7, #28]
 800df28:	fbb2 f3f3 	udiv	r3, r2, r3
 800df2c:	4a26      	ldr	r2, [pc, #152]	; (800dfc8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d906      	bls.n	800df40 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	4a22      	ldr	r2, [pc, #136]	; (800dfc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df36:	fba2 2303 	umull	r2, r3, r2, r3
 800df3a:	0e1b      	lsrs	r3, r3, #24
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	e002      	b.n	800df46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	695b      	ldr	r3, [r3, #20]
 800df44:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681c      	ldr	r4, [r3, #0]
 800df4a:	466a      	mov	r2, sp
 800df4c:	f107 0314 	add.w	r3, r7, #20
 800df50:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df54:	e882 0003 	stmia.w	r2, {r0, r1}
 800df58:	f107 0308 	add.w	r3, r7, #8
 800df5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df5e:	4620      	mov	r0, r4
 800df60:	f003 ffe0 	bl	8011f24 <SDMMC_Init>
 800df64:	e008      	b.n	800df78 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df80:	4618      	mov	r0, r3
 800df82:	f004 f8ad 	bl	80120e0 <SDMMC_CmdBlockLength>
 800df86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df88:	6a3b      	ldr	r3, [r7, #32]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00c      	beq.n	800dfa8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a0a      	ldr	r2, [pc, #40]	; (800dfbc <HAL_SD_ConfigWideBusOperation+0x214>)
 800df94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	372c      	adds	r7, #44	; 0x2c
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd90      	pop	{r4, r7, pc}
 800dfbc:	1fe00fff 	.word	0x1fe00fff
 800dfc0:	55e63b89 	.word	0x55e63b89
 800dfc4:	02faf080 	.word	0x02faf080
 800dfc8:	017d7840 	.word	0x017d7840

0800dfcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfd8:	f107 030c 	add.w	r3, r7, #12
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fa40 	bl	800e464 <SD_SendStatus>
 800dfe4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d005      	beq.n	800dff8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	431a      	orrs	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	0a5b      	lsrs	r3, r3, #9
 800dffc:	f003 030f 	and.w	r3, r3, #15
 800e000:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e002:	693b      	ldr	r3, [r7, #16]
}
 800e004:	4618      	mov	r0, r3
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b090      	sub	sp, #64	; 0x40
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e014:	2300      	movs	r3, #0
 800e016:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e018:	f7f5 fd34 	bl	8003a84 <HAL_GetTick>
 800e01c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4618      	mov	r0, r3
 800e024:	f003 ffd7 	bl	8011fd6 <SDMMC_GetPowerState>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d102      	bne.n	800e034 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e02e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e032:	e0b5      	b.n	800e1a0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e038:	2b03      	cmp	r3, #3
 800e03a:	d02e      	beq.n	800e09a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4618      	mov	r0, r3
 800e042:	f004 fa22 	bl	801248a <SDMMC_CmdSendCID>
 800e046:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <SD_InitCard+0x46>
    {
      return errorstate;
 800e04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e050:	e0a6      	b.n	800e1a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2100      	movs	r1, #0
 800e058:	4618      	mov	r0, r3
 800e05a:	f004 f802 	bl	8012062 <SDMMC_GetResponse>
 800e05e:	4602      	mov	r2, r0
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2104      	movs	r1, #4
 800e06a:	4618      	mov	r0, r3
 800e06c:	f003 fff9 	bl	8012062 <SDMMC_GetResponse>
 800e070:	4602      	mov	r2, r0
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2108      	movs	r1, #8
 800e07c:	4618      	mov	r0, r3
 800e07e:	f003 fff0 	bl	8012062 <SDMMC_GetResponse>
 800e082:	4602      	mov	r2, r0
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	210c      	movs	r1, #12
 800e08e:	4618      	mov	r0, r3
 800e090:	f003 ffe7 	bl	8012062 <SDMMC_GetResponse>
 800e094:	4602      	mov	r2, r0
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d01d      	beq.n	800e0de <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e0a2:	e019      	b.n	800e0d8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f107 020a 	add.w	r2, r7, #10
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f004 fa2a 	bl	8012508 <SDMMC_CmdSetRelAdd>
 800e0b4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d001      	beq.n	800e0c0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	e06f      	b.n	800e1a0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e0c0:	f7f5 fce0 	bl	8003a84 <HAL_GetTick>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	f241 3287 	movw	r2, #4999	; 0x1387
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d902      	bls.n	800e0d8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e0d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0d6:	e063      	b.n	800e1a0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e0d8:	897b      	ldrh	r3, [r7, #10]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0e2      	beq.n	800e0a4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d036      	beq.n	800e154 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0e6:	897b      	ldrh	r3, [r7, #10]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0f6:	041b      	lsls	r3, r3, #16
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	f004 f9e4 	bl	80124c8 <SDMMC_CmdSendCSD>
 800e100:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <SD_InitCard+0x100>
    {
      return errorstate;
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	e049      	b.n	800e1a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2100      	movs	r1, #0
 800e112:	4618      	mov	r0, r3
 800e114:	f003 ffa5 	bl	8012062 <SDMMC_GetResponse>
 800e118:	4602      	mov	r2, r0
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2104      	movs	r1, #4
 800e124:	4618      	mov	r0, r3
 800e126:	f003 ff9c 	bl	8012062 <SDMMC_GetResponse>
 800e12a:	4602      	mov	r2, r0
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2108      	movs	r1, #8
 800e136:	4618      	mov	r0, r3
 800e138:	f003 ff93 	bl	8012062 <SDMMC_GetResponse>
 800e13c:	4602      	mov	r2, r0
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	210c      	movs	r1, #12
 800e148:	4618      	mov	r0, r3
 800e14a:	f003 ff8a 	bl	8012062 <SDMMC_GetResponse>
 800e14e:	4602      	mov	r2, r0
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2104      	movs	r1, #4
 800e15a:	4618      	mov	r0, r3
 800e15c:	f003 ff81 	bl	8012062 <SDMMC_GetResponse>
 800e160:	4603      	mov	r3, r0
 800e162:	0d1a      	lsrs	r2, r3, #20
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e168:	f107 030c 	add.w	r3, r7, #12
 800e16c:	4619      	mov	r1, r3
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff fb8c 	bl	800d88c <HAL_SD_GetCardCSD>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d002      	beq.n	800e180 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e17a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e17e:	e00f      	b.n	800e1a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e188:	041b      	lsls	r3, r3, #16
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f004 f893 	bl	80122b8 <SDMMC_CmdSelDesel>
 800e192:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <SD_InitCard+0x192>
  {
    return errorstate;
 800e19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19c:	e000      	b.n	800e1a0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3740      	adds	r7, #64	; 0x40
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f004 f89c 	bl	80122fe <SDMMC_CmdGoIdleState>
 800e1c6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	e072      	b.n	800e2b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f004 f8af 	bl	801233a <SDMMC_CmdOperCond>
 800e1dc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1e4:	d10d      	bne.n	800e202 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f004 f884 	bl	80122fe <SDMMC_CmdGoIdleState>
 800e1f6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d004      	beq.n	800e208 <SD_PowerON+0x60>
    {
      return errorstate;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	e05a      	b.n	800e2b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d137      	bne.n	800e280 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2100      	movs	r1, #0
 800e216:	4618      	mov	r0, r3
 800e218:	f004 f8af 	bl	801237a <SDMMC_CmdAppCommand>
 800e21c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d02d      	beq.n	800e280 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e228:	e046      	b.n	800e2b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2100      	movs	r1, #0
 800e230:	4618      	mov	r0, r3
 800e232:	f004 f8a2 	bl	801237a <SDMMC_CmdAppCommand>
 800e236:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d001      	beq.n	800e242 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	e03a      	b.n	800e2b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	491e      	ldr	r1, [pc, #120]	; (800e2c0 <SD_PowerON+0x118>)
 800e248:	4618      	mov	r0, r3
 800e24a:	f004 f8b9 	bl	80123c0 <SDMMC_CmdAppOperCommand>
 800e24e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e25a:	e02d      	b.n	800e2b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2100      	movs	r1, #0
 800e262:	4618      	mov	r0, r3
 800e264:	f003 fefd 	bl	8012062 <SDMMC_GetResponse>
 800e268:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	0fdb      	lsrs	r3, r3, #31
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d101      	bne.n	800e276 <SD_PowerON+0xce>
 800e272:	2301      	movs	r3, #1
 800e274:	e000      	b.n	800e278 <SD_PowerON+0xd0>
 800e276:	2300      	movs	r3, #0
 800e278:	613b      	str	r3, [r7, #16]

    count++;
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	3301      	adds	r3, #1
 800e27e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e286:	4293      	cmp	r3, r2
 800e288:	d802      	bhi.n	800e290 <SD_PowerON+0xe8>
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0cc      	beq.n	800e22a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e296:	4293      	cmp	r3, r2
 800e298:	d902      	bls.n	800e2a0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e29a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e29e:	e00b      	b.n	800e2b8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3718      	adds	r7, #24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	c1100000 	.word	0xc1100000

0800e2c4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b08c      	sub	sp, #48	; 0x30
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2ce:	f7f5 fbd9 	bl	8003a84 <HAL_GetTick>
 800e2d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2100      	movs	r1, #0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f003 febf 	bl	8012062 <SDMMC_GetResponse>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2ee:	d102      	bne.n	800e2f6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2f4:	e0b0      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2140      	movs	r1, #64	; 0x40
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f003 feef 	bl	80120e0 <SDMMC_CmdBlockLength>
 800e302:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d005      	beq.n	800e316 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	e0a0      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31e:	041b      	lsls	r3, r3, #16
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f004 f829 	bl	801237a <SDMMC_CmdAppCommand>
 800e328:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d005      	beq.n	800e33c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e338:	6a3b      	ldr	r3, [r7, #32]
 800e33a:	e08d      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e33c:	f04f 33ff 	mov.w	r3, #4294967295
 800e340:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e342:	2340      	movs	r3, #64	; 0x40
 800e344:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e346:	2360      	movs	r3, #96	; 0x60
 800e348:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e34a:	2302      	movs	r3, #2
 800e34c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e34e:	2300      	movs	r3, #0
 800e350:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e352:	2301      	movs	r3, #1
 800e354:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f107 0208 	add.w	r2, r7, #8
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f003 fe91 	bl	8012088 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f004 f911 	bl	8012592 <SDMMC_CmdStatusRegister>
 800e370:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d02b      	beq.n	800e3d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	e069      	b.n	800e458 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d013      	beq.n	800e3ba <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e392:	2300      	movs	r3, #0
 800e394:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e396:	e00d      	b.n	800e3b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f003 fdeb 	bl	8011f78 <SDMMC_ReadFIFO>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	601a      	str	r2, [r3, #0]
        pData++;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	2b07      	cmp	r3, #7
 800e3b8:	d9ee      	bls.n	800e398 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3ba:	f7f5 fb63 	bl	8003a84 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c8:	d102      	bne.n	800e3d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3ce:	e043      	b.n	800e458 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d0d2      	beq.n	800e384 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e4:	f003 0308 	and.w	r3, r3, #8
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3ec:	2308      	movs	r3, #8
 800e3ee:	e033      	b.n	800e458 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	f003 0302 	and.w	r3, r3, #2
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e3fe:	2302      	movs	r3, #2
 800e400:	e02a      	b.n	800e458 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e408:	f003 0320 	and.w	r3, r3, #32
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d017      	beq.n	800e440 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e410:	2320      	movs	r3, #32
 800e412:	e021      	b.n	800e458 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4618      	mov	r0, r3
 800e41a:	f003 fdad 	bl	8011f78 <SDMMC_ReadFIFO>
 800e41e:	4602      	mov	r2, r0
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	601a      	str	r2, [r3, #0]
    pData++;
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	3304      	adds	r3, #4
 800e428:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e42a:	f7f5 fb2b 	bl	8003a84 <HAL_GetTick>
 800e42e:	4602      	mov	r2, r0
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e438:	d102      	bne.n	800e440 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e43a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e43e:	e00b      	b.n	800e458 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e2      	bne.n	800e414 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a03      	ldr	r2, [pc, #12]	; (800e460 <SD_SendSDStatus+0x19c>)
 800e454:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3730      	adds	r7, #48	; 0x30
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	18000f3a 	.word	0x18000f3a

0800e464 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e478:	e018      	b.n	800e4ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e482:	041b      	lsls	r3, r3, #16
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f004 f860 	bl	801254c <SDMMC_CmdSendStatus>
 800e48c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	e009      	b.n	800e4ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2100      	movs	r1, #0
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f003 fddf 	bl	8012062 <SDMMC_GetResponse>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60fb      	str	r3, [r7, #12]
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f003 fdc9 	bl	8012062 <SDMMC_GetResponse>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4da:	d102      	bne.n	800e4e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4e0:	e02f      	b.n	800e542 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4e2:	f107 030c 	add.w	r3, r7, #12
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f879 	bl	800e5e0 <SD_FindSCR>
 800e4ee:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	e023      	b.n	800e542 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d01c      	beq.n	800e53e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50c:	041b      	lsls	r3, r3, #16
 800e50e:	4619      	mov	r1, r3
 800e510:	4610      	mov	r0, r2
 800e512:	f003 ff32 	bl	801237a <SDMMC_CmdAppCommand>
 800e516:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	e00f      	b.n	800e542 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2102      	movs	r1, #2
 800e528:	4618      	mov	r0, r3
 800e52a:	f003 ff69 	bl	8012400 <SDMMC_CmdBusWidth>
 800e52e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	e003      	b.n	800e542 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e53a:	2300      	movs	r3, #0
 800e53c:	e001      	b.n	800e542 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e53e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b086      	sub	sp, #24
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e552:	2300      	movs	r3, #0
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	2300      	movs	r3, #0
 800e558:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2100      	movs	r1, #0
 800e560:	4618      	mov	r0, r3
 800e562:	f003 fd7e 	bl	8012062 <SDMMC_GetResponse>
 800e566:	4603      	mov	r3, r0
 800e568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e56c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e570:	d102      	bne.n	800e578 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e572:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e576:	e02f      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e578:	f107 030c 	add.w	r3, r7, #12
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f82e 	bl	800e5e0 <SD_FindSCR>
 800e584:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	e023      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e596:	2b00      	cmp	r3, #0
 800e598:	d01c      	beq.n	800e5d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5a2:	041b      	lsls	r3, r3, #16
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	f003 fee7 	bl	801237a <SDMMC_CmdAppCommand>
 800e5ac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	e00f      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f003 ff1e 	bl	8012400 <SDMMC_CmdBusWidth>
 800e5c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	e003      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e001      	b.n	800e5d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b08e      	sub	sp, #56	; 0x38
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5ea:	f7f5 fa4b 	bl	8003a84 <HAL_GetTick>
 800e5ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	60bb      	str	r3, [r7, #8]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2108      	movs	r1, #8
 800e606:	4618      	mov	r0, r3
 800e608:	f003 fd6a 	bl	80120e0 <SDMMC_CmdBlockLength>
 800e60c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	2b00      	cmp	r3, #0
 800e612:	d001      	beq.n	800e618 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	e0ad      	b.n	800e774 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e620:	041b      	lsls	r3, r3, #16
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f003 fea8 	bl	801237a <SDMMC_CmdAppCommand>
 800e62a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	e09e      	b.n	800e774 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e636:	f04f 33ff 	mov.w	r3, #4294967295
 800e63a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e63c:	2308      	movs	r3, #8
 800e63e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e640:	2330      	movs	r3, #48	; 0x30
 800e642:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e644:	2302      	movs	r3, #2
 800e646:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e648:	2300      	movs	r3, #0
 800e64a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f107 0210 	add.w	r2, r7, #16
 800e658:	4611      	mov	r1, r2
 800e65a:	4618      	mov	r0, r3
 800e65c:	f003 fd14 	bl	8012088 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	f003 feee 	bl	8012446 <SDMMC_CmdSendSCR>
 800e66a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d027      	beq.n	800e6c2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	e07e      	b.n	800e774 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e680:	2b00      	cmp	r3, #0
 800e682:	d113      	bne.n	800e6ac <SD_FindSCR+0xcc>
 800e684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e686:	2b00      	cmp	r3, #0
 800e688:	d110      	bne.n	800e6ac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4618      	mov	r0, r3
 800e690:	f003 fc72 	bl	8011f78 <SDMMC_ReadFIFO>
 800e694:	4603      	mov	r3, r0
 800e696:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f003 fc6b 	bl	8011f78 <SDMMC_ReadFIFO>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	60fb      	str	r3, [r7, #12]
      index++;
 800e6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6ac:	f7f5 f9ea 	bl	8003a84 <HAL_GetTick>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ba:	d102      	bne.n	800e6c2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6c0:	e058      	b.n	800e774 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6c8:	f240 532a 	movw	r3, #1322	; 0x52a
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0d1      	beq.n	800e676 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d8:	f003 0308 	and.w	r3, r3, #8
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6e8:	2308      	movs	r3, #8
 800e6ea:	e043      	b.n	800e774 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f2:	f003 0302 	and.w	r3, r3, #2
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d005      	beq.n	800e706 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2202      	movs	r2, #2
 800e700:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e702:	2302      	movs	r3, #2
 800e704:	e036      	b.n	800e774 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e70c:	f003 0320 	and.w	r3, r3, #32
 800e710:	2b00      	cmp	r3, #0
 800e712:	d005      	beq.n	800e720 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2220      	movs	r2, #32
 800e71a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e71c:	2320      	movs	r3, #32
 800e71e:	e029      	b.n	800e774 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a15      	ldr	r2, [pc, #84]	; (800e77c <SD_FindSCR+0x19c>)
 800e726:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	061a      	lsls	r2, r3, #24
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	021b      	lsls	r3, r3, #8
 800e730:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e734:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	0a1b      	lsrs	r3, r3, #8
 800e73a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e73e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	0e1b      	lsrs	r3, r3, #24
 800e744:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	601a      	str	r2, [r3, #0]
    scr++;
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	3304      	adds	r3, #4
 800e74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	061a      	lsls	r2, r3, #24
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	021b      	lsls	r3, r3, #8
 800e758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e75c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	0a1b      	lsrs	r3, r3, #8
 800e762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e766:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	0e1b      	lsrs	r3, r3, #24
 800e76c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3738      	adds	r7, #56	; 0x38
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	18000f3a 	.word	0x18000f3a

0800e780 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e792:	2b1f      	cmp	r3, #31
 800e794:	d936      	bls.n	800e804 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
 800e79a:	e027      	b.n	800e7ec <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f003 fbe9 	bl	8011f78 <SDMMC_ReadFIFO>
 800e7a6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	0a1b      	lsrs	r3, r3, #8
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	0c1b      	lsrs	r3, r3, #16
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	0e1b      	lsrs	r3, r3, #24
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2b07      	cmp	r3, #7
 800e7f0:	d9d4      	bls.n	800e79c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7fc:	f1a3 0220 	sub.w	r2, r3, #32
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	2b1f      	cmp	r3, #31
 800e820:	d93a      	bls.n	800e898 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e822:	2300      	movs	r3, #0
 800e824:	617b      	str	r3, [r7, #20]
 800e826:	e02b      	b.n	800e880 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	3301      	adds	r3, #1
 800e832:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	021a      	lsls	r2, r3, #8
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	4313      	orrs	r3, r2
 800e83e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	3301      	adds	r3, #1
 800e844:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	041a      	lsls	r2, r3, #16
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4313      	orrs	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	3301      	adds	r3, #1
 800e856:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	061a      	lsls	r2, r3, #24
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	4313      	orrs	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	3301      	adds	r3, #1
 800e868:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f107 020c 	add.w	r2, r7, #12
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f003 fb8c 	bl	8011f92 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	3301      	adds	r3, #1
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2b07      	cmp	r3, #7
 800e884:	d9d0      	bls.n	800e828 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a1b      	ldr	r3, [r3, #32]
 800e890:	f1a3 0220 	sub.w	r2, r3, #32
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	621a      	str	r2, [r3, #32]
  }
}
 800e898:	bf00      	nop
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8d0:	bf00      	nop
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d101      	bne.n	800e902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e10f      	b.n	800eb22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a87      	ldr	r2, [pc, #540]	; (800eb2c <HAL_SPI_Init+0x23c>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d00f      	beq.n	800e932 <HAL_SPI_Init+0x42>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a86      	ldr	r2, [pc, #536]	; (800eb30 <HAL_SPI_Init+0x240>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d00a      	beq.n	800e932 <HAL_SPI_Init+0x42>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a84      	ldr	r2, [pc, #528]	; (800eb34 <HAL_SPI_Init+0x244>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d005      	beq.n	800e932 <HAL_SPI_Init+0x42>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	2b0f      	cmp	r3, #15
 800e92c:	d901      	bls.n	800e932 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	e0f7      	b.n	800eb22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 fd5a 	bl	800f3ec <SPI_GetPacketSize>
 800e938:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a7b      	ldr	r2, [pc, #492]	; (800eb2c <HAL_SPI_Init+0x23c>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d00c      	beq.n	800e95e <HAL_SPI_Init+0x6e>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a79      	ldr	r2, [pc, #484]	; (800eb30 <HAL_SPI_Init+0x240>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d007      	beq.n	800e95e <HAL_SPI_Init+0x6e>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a78      	ldr	r2, [pc, #480]	; (800eb34 <HAL_SPI_Init+0x244>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d002      	beq.n	800e95e <HAL_SPI_Init+0x6e>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2b08      	cmp	r3, #8
 800e95c:	d811      	bhi.n	800e982 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e962:	4a72      	ldr	r2, [pc, #456]	; (800eb2c <HAL_SPI_Init+0x23c>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d009      	beq.n	800e97c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a70      	ldr	r2, [pc, #448]	; (800eb30 <HAL_SPI_Init+0x240>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d004      	beq.n	800e97c <HAL_SPI_Init+0x8c>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a6f      	ldr	r2, [pc, #444]	; (800eb34 <HAL_SPI_Init+0x244>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d104      	bne.n	800e986 <HAL_SPI_Init+0x96>
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b10      	cmp	r3, #16
 800e980:	d901      	bls.n	800e986 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e0cd      	b.n	800eb22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d106      	bne.n	800e9a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7f4 fa8a 	bl	8002eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2202      	movs	r2, #2
 800e9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f022 0201 	bic.w	r2, r2, #1
 800e9b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e9c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	699b      	ldr	r3, [r3, #24]
 800e9c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9cc:	d119      	bne.n	800ea02 <HAL_SPI_Init+0x112>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9d6:	d103      	bne.n	800e9e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d008      	beq.n	800e9f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d10c      	bne.n	800ea02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9f0:	d107      	bne.n	800ea02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00f      	beq.n	800ea2e <HAL_SPI_Init+0x13e>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	2b06      	cmp	r3, #6
 800ea14:	d90b      	bls.n	800ea2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	430a      	orrs	r2, r1
 800ea2a:	601a      	str	r2, [r3, #0]
 800ea2c:	e007      	b.n	800ea3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	69da      	ldr	r2, [r3, #28]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea46:	431a      	orrs	r2, r3
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea50:	ea42 0103 	orr.w	r1, r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	68da      	ldr	r2, [r3, #12]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	430a      	orrs	r2, r1
 800ea5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea6e:	431a      	orrs	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	431a      	orrs	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	695b      	ldr	r3, [r3, #20]
 800ea80:	431a      	orrs	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	431a      	orrs	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea92:	431a      	orrs	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	431a      	orrs	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea9e:	ea42 0103 	orr.w	r1, r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d113      	bne.n	800eade <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eac8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eadc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f022 0201 	bic.w	r2, r2, #1
 800eaec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00a      	beq.n	800eb10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	40013000 	.word	0x40013000
 800eb30:	40003800 	.word	0x40003800
 800eb34:	40003c00 	.word	0x40003c00

0800eb38 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08a      	sub	sp, #40	; 0x28
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4613      	mov	r3, r2
 800eb46:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	3320      	adds	r3, #32
 800eb4e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb50:	2300      	movs	r3, #0
 800eb52:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d101      	bne.n	800eb62 <HAL_SPI_Transmit+0x2a>
 800eb5e:	2302      	movs	r3, #2
 800eb60:	e1e1      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb6a:	f7f4 ff8b 	bl	8003a84 <HAL_GetTick>
 800eb6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d007      	beq.n	800eb8c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb88:	7efb      	ldrb	r3, [r7, #27]
 800eb8a:	e1cc      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <HAL_SPI_Transmit+0x60>
 800eb92:	88fb      	ldrh	r3, [r7, #6]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d107      	bne.n	800eba8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eba4:	7efb      	ldrb	r3, [r7, #27]
 800eba6:	e1be      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2203      	movs	r2, #3
 800ebac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	88fa      	ldrh	r2, [r7, #6]
 800ebc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	88fa      	ldrh	r2, [r7, #6]
 800ebca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2200      	movs	r2, #0
 800ebee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ebf8:	d108      	bne.n	800ec0c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	e009      	b.n	800ec20 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	685a      	ldr	r2, [r3, #4]
 800ec26:	4b96      	ldr	r3, [pc, #600]	; (800ee80 <HAL_SPI_Transmit+0x348>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	88f9      	ldrh	r1, [r7, #6]
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	6812      	ldr	r2, [r2, #0]
 800ec30:	430b      	orrs	r3, r1
 800ec32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f042 0201 	orr.w	r2, r2, #1
 800ec42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec4c:	d107      	bne.n	800ec5e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	2b0f      	cmp	r3, #15
 800ec64:	d947      	bls.n	800ecf6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec66:	e03f      	b.n	800ece8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	f003 0302 	and.w	r3, r3, #2
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d114      	bne.n	800eca0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	6812      	ldr	r2, [r2, #0]
 800ec80:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec86:	1d1a      	adds	r2, r3, #4
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	3b01      	subs	r3, #1
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec9e:	e023      	b.n	800ece8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eca0:	f7f4 fef0 	bl	8003a84 <HAL_GetTick>
 800eca4:	4602      	mov	r2, r0
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d803      	bhi.n	800ecb8 <HAL_SPI_Transmit+0x180>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb6:	d102      	bne.n	800ecbe <HAL_SPI_Transmit+0x186>
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d114      	bne.n	800ece8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 fac6 	bl	800f250 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ece4:	2303      	movs	r3, #3
 800ece6:	e11e      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1b9      	bne.n	800ec68 <HAL_SPI_Transmit+0x130>
 800ecf4:	e0f1      	b.n	800eeda <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	2b07      	cmp	r3, #7
 800ecfc:	f240 80e6 	bls.w	800eecc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed00:	e05d      	b.n	800edbe <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	f003 0302 	and.w	r3, r3, #2
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	d132      	bne.n	800ed76 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d918      	bls.n	800ed4e <HAL_SPI_Transmit+0x216>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d014      	beq.n	800ed4e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6812      	ldr	r2, [r2, #0]
 800ed2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed34:	1d1a      	adds	r2, r3, #4
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	3b02      	subs	r3, #2
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed4c:	e037      	b.n	800edbe <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed52:	881a      	ldrh	r2, [r3, #0]
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed5c:	1c9a      	adds	r2, r3, #2
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	b29a      	uxth	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed74:	e023      	b.n	800edbe <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed76:	f7f4 fe85 	bl	8003a84 <HAL_GetTick>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d803      	bhi.n	800ed8e <HAL_SPI_Transmit+0x256>
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8c:	d102      	bne.n	800ed94 <HAL_SPI_Transmit+0x25c>
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d114      	bne.n	800edbe <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f000 fa5b 	bl	800f250 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eda8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edba:	2303      	movs	r3, #3
 800edbc:	e0b3      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d19b      	bne.n	800ed02 <HAL_SPI_Transmit+0x1ca>
 800edca:	e086      	b.n	800eeda <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	695b      	ldr	r3, [r3, #20]
 800edd2:	f003 0302 	and.w	r3, r3, #2
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	d154      	bne.n	800ee84 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d918      	bls.n	800ee18 <HAL_SPI_Transmit+0x2e0>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edea:	2b40      	cmp	r3, #64	; 0x40
 800edec:	d914      	bls.n	800ee18 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6812      	ldr	r2, [r2, #0]
 800edf8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edfe:	1d1a      	adds	r2, r3, #4
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	3b04      	subs	r3, #4
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee16:	e059      	b.n	800eecc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d917      	bls.n	800ee54 <HAL_SPI_Transmit+0x31c>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d013      	beq.n	800ee54 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee30:	881a      	ldrh	r2, [r3, #0]
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee3a:	1c9a      	adds	r2, r3, #2
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	3b02      	subs	r3, #2
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee52:	e03b      	b.n	800eecc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	3320      	adds	r3, #32
 800ee5e:	7812      	ldrb	r2, [r2, #0]
 800ee60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee66:	1c5a      	adds	r2, r3, #1
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	3b01      	subs	r3, #1
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee7e:	e025      	b.n	800eecc <HAL_SPI_Transmit+0x394>
 800ee80:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee84:	f7f4 fdfe 	bl	8003a84 <HAL_GetTick>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	683a      	ldr	r2, [r7, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d803      	bhi.n	800ee9c <HAL_SPI_Transmit+0x364>
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9a:	d102      	bne.n	800eea2 <HAL_SPI_Transmit+0x36a>
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d114      	bne.n	800eecc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 f9d4 	bl	800f250 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eec8:	2303      	movs	r3, #3
 800eeca:	e02c      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f47f af79 	bne.w	800edcc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2200      	movs	r2, #0
 800eee2:	2108      	movs	r1, #8
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f000 fa53 	bl	800f390 <SPI_WaitOnFlagUntilTimeout>
 800eeea:	4603      	mov	r3, r0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d007      	beq.n	800ef00 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eef6:	f043 0220 	orr.w	r2, r3, #32
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f000 f9a5 	bl	800f250 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ef20:	2301      	movs	r3, #1
 800ef22:	e000      	b.n	800ef26 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ef24:	7efb      	ldrb	r3, [r7, #27]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop

0800ef30 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b088      	sub	sp, #32
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	4613      	mov	r3, r2
 800ef3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3330      	adds	r3, #48	; 0x30
 800ef4a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d101      	bne.n	800ef5a <HAL_SPI_Receive+0x2a>
 800ef56:	2302      	movs	r3, #2
 800ef58:	e173      	b.n	800f242 <HAL_SPI_Receive+0x312>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef62:	f7f4 fd8f 	bl	8003a84 <HAL_GetTick>
 800ef66:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d007      	beq.n	800ef84 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ef74:	2302      	movs	r3, #2
 800ef76:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef80:	7ffb      	ldrb	r3, [r7, #31]
 800ef82:	e15e      	b.n	800f242 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d002      	beq.n	800ef90 <HAL_SPI_Receive+0x60>
 800ef8a:	88fb      	ldrh	r3, [r7, #6]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d107      	bne.n	800efa0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef9c:	7ffb      	ldrb	r3, [r7, #31]
 800ef9e:	e150      	b.n	800f242 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2204      	movs	r2, #4
 800efa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	88fa      	ldrh	r2, [r7, #6]
 800efba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	88fa      	ldrh	r2, [r7, #6]
 800efc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2200      	movs	r2, #0
 800efe6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eff0:	d108      	bne.n	800f004 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	e009      	b.n	800f018 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f016:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	4b8b      	ldr	r3, [pc, #556]	; (800f24c <HAL_SPI_Receive+0x31c>)
 800f020:	4013      	ands	r3, r2
 800f022:	88f9      	ldrh	r1, [r7, #6]
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	6812      	ldr	r2, [r2, #0]
 800f028:	430b      	orrs	r3, r1
 800f02a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f042 0201 	orr.w	r2, r2, #1
 800f03a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f044:	d107      	bne.n	800f056 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f054:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	2b0f      	cmp	r3, #15
 800f05c:	d948      	bls.n	800f0f0 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f05e:	e040      	b.n	800f0e2 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	695a      	ldr	r2, [r3, #20]
 800f066:	f248 0308 	movw	r3, #32776	; 0x8008
 800f06a:	4013      	ands	r3, r2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d014      	beq.n	800f09a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f078:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f07a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f080:	1d1a      	adds	r2, r3, #4
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	3b01      	subs	r3, #1
 800f090:	b29a      	uxth	r2, r3
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f098:	e023      	b.n	800f0e2 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f09a:	f7f4 fcf3 	bl	8003a84 <HAL_GetTick>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d803      	bhi.n	800f0b2 <HAL_SPI_Receive+0x182>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b0:	d102      	bne.n	800f0b8 <HAL_SPI_Receive+0x188>
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d114      	bne.n	800f0e2 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f000 f8c9 	bl	800f250 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e0af      	b.n	800f242 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1b8      	bne.n	800f060 <HAL_SPI_Receive+0x130>
 800f0ee:	e095      	b.n	800f21c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	2b07      	cmp	r3, #7
 800f0f6:	f240 808b 	bls.w	800f210 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0fa:	e03f      	b.n	800f17c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b01      	cmp	r3, #1
 800f108:	d114      	bne.n	800f134 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f10e:	69ba      	ldr	r2, [r7, #24]
 800f110:	8812      	ldrh	r2, [r2, #0]
 800f112:	b292      	uxth	r2, r2
 800f114:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f11a:	1c9a      	adds	r2, r3, #2
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f126:	b29b      	uxth	r3, r3
 800f128:	3b01      	subs	r3, #1
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f132:	e023      	b.n	800f17c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f134:	f7f4 fca6 	bl	8003a84 <HAL_GetTick>
 800f138:	4602      	mov	r2, r0
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	d803      	bhi.n	800f14c <HAL_SPI_Receive+0x21c>
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14a:	d102      	bne.n	800f152 <HAL_SPI_Receive+0x222>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d114      	bne.n	800f17c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f000 f87c 	bl	800f250 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f178:	2303      	movs	r3, #3
 800f17a:	e062      	b.n	800f242 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f182:	b29b      	uxth	r3, r3
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1b9      	bne.n	800f0fc <HAL_SPI_Receive+0x1cc>
 800f188:	e048      	b.n	800f21c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	695b      	ldr	r3, [r3, #20]
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	2b01      	cmp	r3, #1
 800f196:	d117      	bne.n	800f1c8 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1a4:	7812      	ldrb	r2, [r2, #0]
 800f1a6:	b2d2      	uxtb	r2, r2
 800f1a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ae:	1c5a      	adds	r2, r3, #1
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	3b01      	subs	r3, #1
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1c6:	e023      	b.n	800f210 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1c8:	f7f4 fc5c 	bl	8003a84 <HAL_GetTick>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	1ad3      	subs	r3, r2, r3
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d803      	bhi.n	800f1e0 <HAL_SPI_Receive+0x2b0>
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1de:	d102      	bne.n	800f1e6 <HAL_SPI_Receive+0x2b6>
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d114      	bne.n	800f210 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f000 f832 	bl	800f250 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f20c:	2303      	movs	r3, #3
 800f20e:	e018      	b.n	800f242 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f216:	b29b      	uxth	r3, r3
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1b6      	bne.n	800f18a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f817 	bl	800f250 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2200      	movs	r2, #0
 800f226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2201      	movs	r2, #1
 800f22e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f23c:	2301      	movs	r3, #1
 800f23e:	e000      	b.n	800f242 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f240:	7ffb      	ldrb	r3, [r7, #31]
}
 800f242:	4618      	mov	r0, r3
 800f244:	3720      	adds	r7, #32
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	ffff0000 	.word	0xffff0000

0800f250 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	695b      	ldr	r3, [r3, #20]
 800f25e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	699a      	ldr	r2, [r3, #24]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f042 0208 	orr.w	r2, r2, #8
 800f26e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	699a      	ldr	r2, [r3, #24]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f042 0210 	orr.w	r2, r2, #16
 800f27e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f022 0201 	bic.w	r2, r2, #1
 800f28e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	6919      	ldr	r1, [r3, #16]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	4b3c      	ldr	r3, [pc, #240]	; (800f38c <SPI_CloseTransfer+0x13c>)
 800f29c:	400b      	ands	r3, r1
 800f29e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	689a      	ldr	r2, [r3, #8]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b04      	cmp	r3, #4
 800f2ba:	d014      	beq.n	800f2e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f003 0320 	and.w	r3, r3, #32
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00f      	beq.n	800f2e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	699a      	ldr	r2, [r3, #24]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f042 0220 	orr.w	r2, r2, #32
 800f2e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b03      	cmp	r3, #3
 800f2f0:	d014      	beq.n	800f31c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00f      	beq.n	800f31c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f302:	f043 0204 	orr.w	r2, r3, #4
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	699a      	ldr	r2, [r3, #24]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f31a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00f      	beq.n	800f346 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f32c:	f043 0201 	orr.w	r2, r3, #1
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	699a      	ldr	r2, [r3, #24]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f344:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00f      	beq.n	800f370 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f356:	f043 0208 	orr.w	r2, r3, #8
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	699a      	ldr	r2, [r3, #24]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f36e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f380:	bf00      	nop
 800f382:	3714      	adds	r7, #20
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr
 800f38c:	fffffc90 	.word	0xfffffc90

0800f390 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	603b      	str	r3, [r7, #0]
 800f39c:	4613      	mov	r3, r2
 800f39e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3a0:	e010      	b.n	800f3c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3a2:	f7f4 fb6f 	bl	8003a84 <HAL_GetTick>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d803      	bhi.n	800f3ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b8:	d102      	bne.n	800f3c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f3c0:	2303      	movs	r3, #3
 800f3c2:	e00f      	b.n	800f3e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	695a      	ldr	r2, [r3, #20]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	bf0c      	ite	eq
 800f3d4:	2301      	moveq	r3, #1
 800f3d6:	2300      	movne	r3, #0
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	461a      	mov	r2, r3
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d0df      	beq.n	800f3a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b085      	sub	sp, #20
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f8:	095b      	lsrs	r3, r3, #5
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	3301      	adds	r3, #1
 800f404:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	3307      	adds	r3, #7
 800f40a:	08db      	lsrs	r3, r3, #3
 800f40c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	fb02 f303 	mul.w	r3, r2, r3
}
 800f416:	4618      	mov	r0, r3
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f430:	2301      	movs	r3, #1
 800f432:	e049      	b.n	800f4c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d106      	bne.n	800f44e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7f3 ff85 	bl	8003358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2202      	movs	r2, #2
 800f452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3304      	adds	r3, #4
 800f45e:	4619      	mov	r1, r3
 800f460:	4610      	mov	r0, r2
 800f462:	f000 ff29 	bl	80102b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2201      	movs	r2, #1
 800f482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2201      	movs	r2, #1
 800f48a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2201      	movs	r2, #1
 800f492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3708      	adds	r7, #8
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d101      	bne.n	800f4e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e049      	b.n	800f576 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d106      	bne.n	800f4fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7f3 fd98 	bl	800302c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2202      	movs	r2, #2
 800f500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3304      	adds	r3, #4
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f000 fed2 	bl	80102b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2201      	movs	r2, #1
 800f518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2201      	movs	r2, #1
 800f528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d109      	bne.n	800f5a4 <HAL_TIM_PWM_Start+0x24>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f596:	b2db      	uxtb	r3, r3
 800f598:	2b01      	cmp	r3, #1
 800f59a:	bf14      	ite	ne
 800f59c:	2301      	movne	r3, #1
 800f59e:	2300      	moveq	r3, #0
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	e03c      	b.n	800f61e <HAL_TIM_PWM_Start+0x9e>
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	2b04      	cmp	r3, #4
 800f5a8:	d109      	bne.n	800f5be <HAL_TIM_PWM_Start+0x3e>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	bf14      	ite	ne
 800f5b6:	2301      	movne	r3, #1
 800f5b8:	2300      	moveq	r3, #0
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	e02f      	b.n	800f61e <HAL_TIM_PWM_Start+0x9e>
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	2b08      	cmp	r3, #8
 800f5c2:	d109      	bne.n	800f5d8 <HAL_TIM_PWM_Start+0x58>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	bf14      	ite	ne
 800f5d0:	2301      	movne	r3, #1
 800f5d2:	2300      	moveq	r3, #0
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	e022      	b.n	800f61e <HAL_TIM_PWM_Start+0x9e>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	2b0c      	cmp	r3, #12
 800f5dc:	d109      	bne.n	800f5f2 <HAL_TIM_PWM_Start+0x72>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	bf14      	ite	ne
 800f5ea:	2301      	movne	r3, #1
 800f5ec:	2300      	moveq	r3, #0
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	e015      	b.n	800f61e <HAL_TIM_PWM_Start+0x9e>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b10      	cmp	r3, #16
 800f5f6:	d109      	bne.n	800f60c <HAL_TIM_PWM_Start+0x8c>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b01      	cmp	r3, #1
 800f602:	bf14      	ite	ne
 800f604:	2301      	movne	r3, #1
 800f606:	2300      	moveq	r3, #0
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	e008      	b.n	800f61e <HAL_TIM_PWM_Start+0x9e>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b01      	cmp	r3, #1
 800f616:	bf14      	ite	ne
 800f618:	2301      	movne	r3, #1
 800f61a:	2300      	moveq	r3, #0
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f622:	2301      	movs	r3, #1
 800f624:	e0ab      	b.n	800f77e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d104      	bne.n	800f636 <HAL_TIM_PWM_Start+0xb6>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2202      	movs	r2, #2
 800f630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f634:	e023      	b.n	800f67e <HAL_TIM_PWM_Start+0xfe>
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b04      	cmp	r3, #4
 800f63a:	d104      	bne.n	800f646 <HAL_TIM_PWM_Start+0xc6>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2202      	movs	r2, #2
 800f640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f644:	e01b      	b.n	800f67e <HAL_TIM_PWM_Start+0xfe>
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	2b08      	cmp	r3, #8
 800f64a:	d104      	bne.n	800f656 <HAL_TIM_PWM_Start+0xd6>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2202      	movs	r2, #2
 800f650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f654:	e013      	b.n	800f67e <HAL_TIM_PWM_Start+0xfe>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	2b0c      	cmp	r3, #12
 800f65a:	d104      	bne.n	800f666 <HAL_TIM_PWM_Start+0xe6>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2202      	movs	r2, #2
 800f660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f664:	e00b      	b.n	800f67e <HAL_TIM_PWM_Start+0xfe>
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	2b10      	cmp	r3, #16
 800f66a:	d104      	bne.n	800f676 <HAL_TIM_PWM_Start+0xf6>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2202      	movs	r2, #2
 800f670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f674:	e003      	b.n	800f67e <HAL_TIM_PWM_Start+0xfe>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2202      	movs	r2, #2
 800f67a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2201      	movs	r2, #1
 800f684:	6839      	ldr	r1, [r7, #0]
 800f686:	4618      	mov	r0, r3
 800f688:	f001 f992 	bl	80109b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a3d      	ldr	r2, [pc, #244]	; (800f788 <HAL_TIM_PWM_Start+0x208>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d013      	beq.n	800f6be <HAL_TIM_PWM_Start+0x13e>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a3c      	ldr	r2, [pc, #240]	; (800f78c <HAL_TIM_PWM_Start+0x20c>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d00e      	beq.n	800f6be <HAL_TIM_PWM_Start+0x13e>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a3a      	ldr	r2, [pc, #232]	; (800f790 <HAL_TIM_PWM_Start+0x210>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d009      	beq.n	800f6be <HAL_TIM_PWM_Start+0x13e>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a39      	ldr	r2, [pc, #228]	; (800f794 <HAL_TIM_PWM_Start+0x214>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d004      	beq.n	800f6be <HAL_TIM_PWM_Start+0x13e>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a37      	ldr	r2, [pc, #220]	; (800f798 <HAL_TIM_PWM_Start+0x218>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d101      	bne.n	800f6c2 <HAL_TIM_PWM_Start+0x142>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e000      	b.n	800f6c4 <HAL_TIM_PWM_Start+0x144>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d007      	beq.n	800f6d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a2a      	ldr	r2, [pc, #168]	; (800f788 <HAL_TIM_PWM_Start+0x208>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d02c      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ea:	d027      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a2a      	ldr	r2, [pc, #168]	; (800f79c <HAL_TIM_PWM_Start+0x21c>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d022      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a29      	ldr	r2, [pc, #164]	; (800f7a0 <HAL_TIM_PWM_Start+0x220>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d01d      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a27      	ldr	r2, [pc, #156]	; (800f7a4 <HAL_TIM_PWM_Start+0x224>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d018      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a1f      	ldr	r2, [pc, #124]	; (800f78c <HAL_TIM_PWM_Start+0x20c>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d013      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a23      	ldr	r2, [pc, #140]	; (800f7a8 <HAL_TIM_PWM_Start+0x228>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d00e      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a1b      	ldr	r2, [pc, #108]	; (800f790 <HAL_TIM_PWM_Start+0x210>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d009      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a1f      	ldr	r2, [pc, #124]	; (800f7ac <HAL_TIM_PWM_Start+0x22c>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d004      	beq.n	800f73c <HAL_TIM_PWM_Start+0x1bc>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a1e      	ldr	r2, [pc, #120]	; (800f7b0 <HAL_TIM_PWM_Start+0x230>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d115      	bne.n	800f768 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	689a      	ldr	r2, [r3, #8]
 800f742:	4b1c      	ldr	r3, [pc, #112]	; (800f7b4 <HAL_TIM_PWM_Start+0x234>)
 800f744:	4013      	ands	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b06      	cmp	r3, #6
 800f74c:	d015      	beq.n	800f77a <HAL_TIM_PWM_Start+0x1fa>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f754:	d011      	beq.n	800f77a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f042 0201 	orr.w	r2, r2, #1
 800f764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f766:	e008      	b.n	800f77a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f042 0201 	orr.w	r2, r2, #1
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	e000      	b.n	800f77c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f77a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	40010000 	.word	0x40010000
 800f78c:	40010400 	.word	0x40010400
 800f790:	40014000 	.word	0x40014000
 800f794:	40014400 	.word	0x40014400
 800f798:	40014800 	.word	0x40014800
 800f79c:	40000400 	.word	0x40000400
 800f7a0:	40000800 	.word	0x40000800
 800f7a4:	40000c00 	.word	0x40000c00
 800f7a8:	40001800 	.word	0x40001800
 800f7ac:	4000e000 	.word	0x4000e000
 800f7b0:	4000e400 	.word	0x4000e400
 800f7b4:	00010007 	.word	0x00010007

0800f7b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d109      	bne.n	800f7e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	bf0c      	ite	eq
 800f7dc:	2301      	moveq	r3, #1
 800f7de:	2300      	movne	r3, #0
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	e03c      	b.n	800f85e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2b04      	cmp	r3, #4
 800f7e8:	d109      	bne.n	800f7fe <HAL_TIM_PWM_Start_DMA+0x46>
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b02      	cmp	r3, #2
 800f7f4:	bf0c      	ite	eq
 800f7f6:	2301      	moveq	r3, #1
 800f7f8:	2300      	movne	r3, #0
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	e02f      	b.n	800f85e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b08      	cmp	r3, #8
 800f802:	d109      	bne.n	800f818 <HAL_TIM_PWM_Start_DMA+0x60>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	bf0c      	ite	eq
 800f810:	2301      	moveq	r3, #1
 800f812:	2300      	movne	r3, #0
 800f814:	b2db      	uxtb	r3, r3
 800f816:	e022      	b.n	800f85e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b0c      	cmp	r3, #12
 800f81c:	d109      	bne.n	800f832 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b02      	cmp	r3, #2
 800f828:	bf0c      	ite	eq
 800f82a:	2301      	moveq	r3, #1
 800f82c:	2300      	movne	r3, #0
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	e015      	b.n	800f85e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	2b10      	cmp	r3, #16
 800f836:	d109      	bne.n	800f84c <HAL_TIM_PWM_Start_DMA+0x94>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b02      	cmp	r3, #2
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	e008      	b.n	800f85e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b02      	cmp	r3, #2
 800f856:	bf0c      	ite	eq
 800f858:	2301      	moveq	r3, #1
 800f85a:	2300      	movne	r3, #0
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f862:	2302      	movs	r3, #2
 800f864:	e1ba      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d109      	bne.n	800f880 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f872:	b2db      	uxtb	r3, r3
 800f874:	2b01      	cmp	r3, #1
 800f876:	bf0c      	ite	eq
 800f878:	2301      	moveq	r3, #1
 800f87a:	2300      	movne	r3, #0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	e03c      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x142>
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b04      	cmp	r3, #4
 800f884:	d109      	bne.n	800f89a <HAL_TIM_PWM_Start_DMA+0xe2>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b01      	cmp	r3, #1
 800f890:	bf0c      	ite	eq
 800f892:	2301      	moveq	r3, #1
 800f894:	2300      	movne	r3, #0
 800f896:	b2db      	uxtb	r3, r3
 800f898:	e02f      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x142>
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b08      	cmp	r3, #8
 800f89e:	d109      	bne.n	800f8b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	bf0c      	ite	eq
 800f8ac:	2301      	moveq	r3, #1
 800f8ae:	2300      	movne	r3, #0
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	e022      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x142>
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2b0c      	cmp	r3, #12
 800f8b8:	d109      	bne.n	800f8ce <HAL_TIM_PWM_Start_DMA+0x116>
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	bf0c      	ite	eq
 800f8c6:	2301      	moveq	r3, #1
 800f8c8:	2300      	movne	r3, #0
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	e015      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x142>
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	2b10      	cmp	r3, #16
 800f8d2:	d109      	bne.n	800f8e8 <HAL_TIM_PWM_Start_DMA+0x130>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	bf0c      	ite	eq
 800f8e0:	2301      	moveq	r3, #1
 800f8e2:	2300      	movne	r3, #0
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	e008      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x142>
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	bf0c      	ite	eq
 800f8f4:	2301      	moveq	r3, #1
 800f8f6:	2300      	movne	r3, #0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d034      	beq.n	800f968 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <HAL_TIM_PWM_Start_DMA+0x152>
 800f904:	887b      	ldrh	r3, [r7, #2]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d101      	bne.n	800f90e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e166      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d104      	bne.n	800f91e <HAL_TIM_PWM_Start_DMA+0x166>
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2202      	movs	r2, #2
 800f918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f91c:	e026      	b.n	800f96c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2b04      	cmp	r3, #4
 800f922:	d104      	bne.n	800f92e <HAL_TIM_PWM_Start_DMA+0x176>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2202      	movs	r2, #2
 800f928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f92c:	e01e      	b.n	800f96c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	2b08      	cmp	r3, #8
 800f932:	d104      	bne.n	800f93e <HAL_TIM_PWM_Start_DMA+0x186>
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2202      	movs	r2, #2
 800f938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f93c:	e016      	b.n	800f96c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2b0c      	cmp	r3, #12
 800f942:	d104      	bne.n	800f94e <HAL_TIM_PWM_Start_DMA+0x196>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2202      	movs	r2, #2
 800f948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f94c:	e00e      	b.n	800f96c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	2b10      	cmp	r3, #16
 800f952:	d104      	bne.n	800f95e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2202      	movs	r2, #2
 800f958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f95c:	e006      	b.n	800f96c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2202      	movs	r2, #2
 800f962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f966:	e001      	b.n	800f96c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f968:	2301      	movs	r3, #1
 800f96a:	e137      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	2b0c      	cmp	r3, #12
 800f970:	f200 80ae 	bhi.w	800fad0 <HAL_TIM_PWM_Start_DMA+0x318>
 800f974:	a201      	add	r2, pc, #4	; (adr r2, 800f97c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f97a:	bf00      	nop
 800f97c:	0800f9b1 	.word	0x0800f9b1
 800f980:	0800fad1 	.word	0x0800fad1
 800f984:	0800fad1 	.word	0x0800fad1
 800f988:	0800fad1 	.word	0x0800fad1
 800f98c:	0800f9f9 	.word	0x0800f9f9
 800f990:	0800fad1 	.word	0x0800fad1
 800f994:	0800fad1 	.word	0x0800fad1
 800f998:	0800fad1 	.word	0x0800fad1
 800f99c:	0800fa41 	.word	0x0800fa41
 800f9a0:	0800fad1 	.word	0x0800fad1
 800f9a4:	0800fad1 	.word	0x0800fad1
 800f9a8:	0800fad1 	.word	0x0800fad1
 800f9ac:	0800fa89 	.word	0x0800fa89
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	4a8b      	ldr	r2, [pc, #556]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9bc:	4a8a      	ldr	r2, [pc, #552]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c4:	4a89      	ldr	r2, [pc, #548]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f9cc:	6879      	ldr	r1, [r7, #4]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	3334      	adds	r3, #52	; 0x34
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	887b      	ldrh	r3, [r7, #2]
 800f9d8:	f7f6 f872 	bl	8005ac0 <HAL_DMA_Start_IT>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e0fa      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68da      	ldr	r2, [r3, #12]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9f4:	60da      	str	r2, [r3, #12]
      break;
 800f9f6:	e06e      	b.n	800fad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fc:	4a79      	ldr	r2, [pc, #484]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa04:	4a78      	ldr	r2, [pc, #480]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0c:	4a77      	ldr	r2, [pc, #476]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fa14:	6879      	ldr	r1, [r7, #4]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3338      	adds	r3, #56	; 0x38
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	887b      	ldrh	r3, [r7, #2]
 800fa20:	f7f6 f84e 	bl	8005ac0 <HAL_DMA_Start_IT>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e0d6      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68da      	ldr	r2, [r3, #12]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa3c:	60da      	str	r2, [r3, #12]
      break;
 800fa3e:	e04a      	b.n	800fad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa44:	4a67      	ldr	r2, [pc, #412]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4c:	4a66      	ldr	r2, [pc, #408]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa54:	4a65      	ldr	r2, [pc, #404]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fa5c:	6879      	ldr	r1, [r7, #4]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	333c      	adds	r3, #60	; 0x3c
 800fa64:	461a      	mov	r2, r3
 800fa66:	887b      	ldrh	r3, [r7, #2]
 800fa68:	f7f6 f82a 	bl	8005ac0 <HAL_DMA_Start_IT>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa72:	2301      	movs	r3, #1
 800fa74:	e0b2      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68da      	ldr	r2, [r3, #12]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa84:	60da      	str	r2, [r3, #12]
      break;
 800fa86:	e026      	b.n	800fad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa8c:	4a55      	ldr	r2, [pc, #340]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa94:	4a54      	ldr	r2, [pc, #336]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa9c:	4a53      	ldr	r2, [pc, #332]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800faa4:	6879      	ldr	r1, [r7, #4]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	3340      	adds	r3, #64	; 0x40
 800faac:	461a      	mov	r2, r3
 800faae:	887b      	ldrh	r3, [r7, #2]
 800fab0:	f7f6 f806 	bl	8005ac0 <HAL_DMA_Start_IT>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800faba:	2301      	movs	r3, #1
 800fabc:	e08e      	b.n	800fbdc <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	68da      	ldr	r2, [r3, #12]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800facc:	60da      	str	r2, [r3, #12]
      break;
 800face:	e002      	b.n	800fad6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	75fb      	strb	r3, [r7, #23]
      break;
 800fad4:	bf00      	nop
  }

  if (status == HAL_OK)
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d17e      	bne.n	800fbda <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2201      	movs	r2, #1
 800fae2:	68b9      	ldr	r1, [r7, #8]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 ff63 	bl	80109b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a40      	ldr	r2, [pc, #256]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d013      	beq.n	800fb1c <HAL_TIM_PWM_Start_DMA+0x364>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a3e      	ldr	r2, [pc, #248]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d00e      	beq.n	800fb1c <HAL_TIM_PWM_Start_DMA+0x364>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a3d      	ldr	r2, [pc, #244]	; (800fbf8 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d009      	beq.n	800fb1c <HAL_TIM_PWM_Start_DMA+0x364>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a3b      	ldr	r2, [pc, #236]	; (800fbfc <HAL_TIM_PWM_Start_DMA+0x444>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d004      	beq.n	800fb1c <HAL_TIM_PWM_Start_DMA+0x364>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4a3a      	ldr	r2, [pc, #232]	; (800fc00 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d101      	bne.n	800fb20 <HAL_TIM_PWM_Start_DMA+0x368>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e000      	b.n	800fb22 <HAL_TIM_PWM_Start_DMA+0x36a>
 800fb20:	2300      	movs	r3, #0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d007      	beq.n	800fb36 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a2d      	ldr	r2, [pc, #180]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d02c      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb48:	d027      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a2d      	ldr	r2, [pc, #180]	; (800fc04 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d022      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a2b      	ldr	r2, [pc, #172]	; (800fc08 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d01d      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a2a      	ldr	r2, [pc, #168]	; (800fc0c <HAL_TIM_PWM_Start_DMA+0x454>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d018      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a21      	ldr	r2, [pc, #132]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d013      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4a26      	ldr	r2, [pc, #152]	; (800fc10 <HAL_TIM_PWM_Start_DMA+0x458>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d00e      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a1d      	ldr	r2, [pc, #116]	; (800fbf8 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d009      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a22      	ldr	r2, [pc, #136]	; (800fc14 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d004      	beq.n	800fb9a <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a20      	ldr	r2, [pc, #128]	; (800fc18 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d115      	bne.n	800fbc6 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	689a      	ldr	r2, [r3, #8]
 800fba0:	4b1e      	ldr	r3, [pc, #120]	; (800fc1c <HAL_TIM_PWM_Start_DMA+0x464>)
 800fba2:	4013      	ands	r3, r2
 800fba4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	2b06      	cmp	r3, #6
 800fbaa:	d015      	beq.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x420>
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbb2:	d011      	beq.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f042 0201 	orr.w	r2, r2, #1
 800fbc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbc4:	e008      	b.n	800fbd8 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f042 0201 	orr.w	r2, r2, #1
 800fbd4:	601a      	str	r2, [r3, #0]
 800fbd6:	e000      	b.n	800fbda <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbd8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	080101a7 	.word	0x080101a7
 800fbe8:	0801024f 	.word	0x0801024f
 800fbec:	08010115 	.word	0x08010115
 800fbf0:	40010000 	.word	0x40010000
 800fbf4:	40010400 	.word	0x40010400
 800fbf8:	40014000 	.word	0x40014000
 800fbfc:	40014400 	.word	0x40014400
 800fc00:	40014800 	.word	0x40014800
 800fc04:	40000400 	.word	0x40000400
 800fc08:	40000800 	.word	0x40000800
 800fc0c:	40000c00 	.word	0x40000c00
 800fc10:	40001800 	.word	0x40001800
 800fc14:	4000e000 	.word	0x4000e000
 800fc18:	4000e400 	.word	0x4000e400
 800fc1c:	00010007 	.word	0x00010007

0800fc20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	f003 0302 	and.w	r3, r3, #2
 800fc32:	2b02      	cmp	r3, #2
 800fc34:	d122      	bne.n	800fc7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	f003 0302 	and.w	r3, r3, #2
 800fc40:	2b02      	cmp	r3, #2
 800fc42:	d11b      	bne.n	800fc7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f06f 0202 	mvn.w	r2, #2
 800fc4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	f003 0303 	and.w	r3, r3, #3
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d003      	beq.n	800fc6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 fa24 	bl	80100b0 <HAL_TIM_IC_CaptureCallback>
 800fc68:	e005      	b.n	800fc76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fa16 	bl	801009c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fa27 	bl	80100c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	f003 0304 	and.w	r3, r3, #4
 800fc86:	2b04      	cmp	r3, #4
 800fc88:	d122      	bne.n	800fcd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	f003 0304 	and.w	r3, r3, #4
 800fc94:	2b04      	cmp	r3, #4
 800fc96:	d11b      	bne.n	800fcd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f06f 0204 	mvn.w	r2, #4
 800fca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2202      	movs	r2, #2
 800fca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	699b      	ldr	r3, [r3, #24]
 800fcae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d003      	beq.n	800fcbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 f9fa 	bl	80100b0 <HAL_TIM_IC_CaptureCallback>
 800fcbc:	e005      	b.n	800fcca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 f9ec 	bl	801009c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 f9fd 	bl	80100c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	f003 0308 	and.w	r3, r3, #8
 800fcda:	2b08      	cmp	r3, #8
 800fcdc:	d122      	bne.n	800fd24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f003 0308 	and.w	r3, r3, #8
 800fce8:	2b08      	cmp	r3, #8
 800fcea:	d11b      	bne.n	800fd24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f06f 0208 	mvn.w	r2, #8
 800fcf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2204      	movs	r2, #4
 800fcfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	69db      	ldr	r3, [r3, #28]
 800fd02:	f003 0303 	and.w	r3, r3, #3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f9d0 	bl	80100b0 <HAL_TIM_IC_CaptureCallback>
 800fd10:	e005      	b.n	800fd1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 f9c2 	bl	801009c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 f9d3 	bl	80100c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	691b      	ldr	r3, [r3, #16]
 800fd2a:	f003 0310 	and.w	r3, r3, #16
 800fd2e:	2b10      	cmp	r3, #16
 800fd30:	d122      	bne.n	800fd78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	f003 0310 	and.w	r3, r3, #16
 800fd3c:	2b10      	cmp	r3, #16
 800fd3e:	d11b      	bne.n	800fd78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f06f 0210 	mvn.w	r2, #16
 800fd48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2208      	movs	r2, #8
 800fd4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d003      	beq.n	800fd66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f9a6 	bl	80100b0 <HAL_TIM_IC_CaptureCallback>
 800fd64:	e005      	b.n	800fd72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f998 	bl	801009c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 f9a9 	bl	80100c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d10e      	bne.n	800fda4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	f003 0301 	and.w	r3, r3, #1
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d107      	bne.n	800fda4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f06f 0201 	mvn.w	r2, #1
 800fd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 f972 	bl	8010088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdae:	2b80      	cmp	r3, #128	; 0x80
 800fdb0:	d10e      	bne.n	800fdd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdbc:	2b80      	cmp	r3, #128	; 0x80
 800fdbe:	d107      	bne.n	800fdd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fdc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 febc 	bl	8010b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	691b      	ldr	r3, [r3, #16]
 800fdd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdde:	d10e      	bne.n	800fdfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdea:	2b80      	cmp	r3, #128	; 0x80
 800fdec:	d107      	bne.n	800fdfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 feaf 	bl	8010b5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe08:	2b40      	cmp	r3, #64	; 0x40
 800fe0a:	d10e      	bne.n	800fe2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe16:	2b40      	cmp	r3, #64	; 0x40
 800fe18:	d107      	bne.n	800fe2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f961 	bl	80100ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	f003 0320 	and.w	r3, r3, #32
 800fe34:	2b20      	cmp	r3, #32
 800fe36:	d10e      	bne.n	800fe56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	f003 0320 	and.w	r3, r3, #32
 800fe42:	2b20      	cmp	r3, #32
 800fe44:	d107      	bne.n	800fe56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f06f 0220 	mvn.w	r2, #32
 800fe4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 fe6f 	bl	8010b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe56:	bf00      	nop
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d101      	bne.n	800fe7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fe7a:	2302      	movs	r3, #2
 800fe7c:	e0ff      	b.n	801007e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2201      	movs	r2, #1
 800fe82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2b14      	cmp	r3, #20
 800fe8a:	f200 80f0 	bhi.w	801006e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe8e:	a201      	add	r2, pc, #4	; (adr r2, 800fe94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe94:	0800fee9 	.word	0x0800fee9
 800fe98:	0801006f 	.word	0x0801006f
 800fe9c:	0801006f 	.word	0x0801006f
 800fea0:	0801006f 	.word	0x0801006f
 800fea4:	0800ff29 	.word	0x0800ff29
 800fea8:	0801006f 	.word	0x0801006f
 800feac:	0801006f 	.word	0x0801006f
 800feb0:	0801006f 	.word	0x0801006f
 800feb4:	0800ff6b 	.word	0x0800ff6b
 800feb8:	0801006f 	.word	0x0801006f
 800febc:	0801006f 	.word	0x0801006f
 800fec0:	0801006f 	.word	0x0801006f
 800fec4:	0800ffab 	.word	0x0800ffab
 800fec8:	0801006f 	.word	0x0801006f
 800fecc:	0801006f 	.word	0x0801006f
 800fed0:	0801006f 	.word	0x0801006f
 800fed4:	0800ffed 	.word	0x0800ffed
 800fed8:	0801006f 	.word	0x0801006f
 800fedc:	0801006f 	.word	0x0801006f
 800fee0:	0801006f 	.word	0x0801006f
 800fee4:	0801002d 	.word	0x0801002d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68b9      	ldr	r1, [r7, #8]
 800feee:	4618      	mov	r0, r3
 800fef0:	f000 fa88 	bl	8010404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	699a      	ldr	r2, [r3, #24]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f042 0208 	orr.w	r2, r2, #8
 800ff02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	699a      	ldr	r2, [r3, #24]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f022 0204 	bic.w	r2, r2, #4
 800ff12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6999      	ldr	r1, [r3, #24]
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	691a      	ldr	r2, [r3, #16]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	619a      	str	r2, [r3, #24]
      break;
 800ff26:	e0a5      	b.n	8010074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	68b9      	ldr	r1, [r7, #8]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 faf8 	bl	8010524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	699a      	ldr	r2, [r3, #24]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	699a      	ldr	r2, [r3, #24]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	6999      	ldr	r1, [r3, #24]
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	021a      	lsls	r2, r3, #8
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	619a      	str	r2, [r3, #24]
      break;
 800ff68:	e084      	b.n	8010074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	68b9      	ldr	r1, [r7, #8]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f000 fb61 	bl	8010638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	69da      	ldr	r2, [r3, #28]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f042 0208 	orr.w	r2, r2, #8
 800ff84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	69da      	ldr	r2, [r3, #28]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f022 0204 	bic.w	r2, r2, #4
 800ff94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	69d9      	ldr	r1, [r3, #28]
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	691a      	ldr	r2, [r3, #16]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	430a      	orrs	r2, r1
 800ffa6:	61da      	str	r2, [r3, #28]
      break;
 800ffa8:	e064      	b.n	8010074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	68b9      	ldr	r1, [r7, #8]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f000 fbc9 	bl	8010748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	69da      	ldr	r2, [r3, #28]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	69da      	ldr	r2, [r3, #28]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	69d9      	ldr	r1, [r3, #28]
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	691b      	ldr	r3, [r3, #16]
 800ffe0:	021a      	lsls	r2, r3, #8
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	61da      	str	r2, [r3, #28]
      break;
 800ffea:	e043      	b.n	8010074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68b9      	ldr	r1, [r7, #8]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 fc12 	bl	801081c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f042 0208 	orr.w	r2, r2, #8
 8010006:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f022 0204 	bic.w	r2, r2, #4
 8010016:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	691a      	ldr	r2, [r3, #16]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	430a      	orrs	r2, r1
 8010028:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801002a:	e023      	b.n	8010074 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68b9      	ldr	r1, [r7, #8]
 8010032:	4618      	mov	r0, r3
 8010034:	f000 fc56 	bl	80108e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	691b      	ldr	r3, [r3, #16]
 8010062:	021a      	lsls	r2, r3, #8
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	430a      	orrs	r2, r1
 801006a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801006c:	e002      	b.n	8010074 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	75fb      	strb	r3, [r7, #23]
      break;
 8010072:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801007c:	7dfb      	ldrb	r3, [r7, #23]
}
 801007e:	4618      	mov	r0, r3
 8010080:	3718      	adds	r7, #24
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop

08010088 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010090:	bf00      	nop
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100cc:	bf00      	nop
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100f4:	bf00      	nop
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010108:	bf00      	nop
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010120:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	429a      	cmp	r2, r3
 801012a:	d107      	bne.n	801013c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2201      	movs	r2, #1
 8010130:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801013a:	e02a      	b.n	8010192 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d107      	bne.n	8010156 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2202      	movs	r2, #2
 801014a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2201      	movs	r2, #1
 8010150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010154:	e01d      	b.n	8010192 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	429a      	cmp	r2, r3
 801015e:	d107      	bne.n	8010170 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2204      	movs	r2, #4
 8010164:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2201      	movs	r2, #1
 801016a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801016e:	e010      	b.n	8010192 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	429a      	cmp	r2, r3
 8010178:	d107      	bne.n	801018a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2208      	movs	r2, #8
 801017e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2201      	movs	r2, #1
 8010184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010188:	e003      	b.n	8010192 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2201      	movs	r2, #1
 801018e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7ff ffb4 	bl	8010100 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	771a      	strb	r2, [r3, #28]
}
 801019e:	bf00      	nop
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b084      	sub	sp, #16
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d10b      	bne.n	80101d6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2201      	movs	r2, #1
 80101c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	69db      	ldr	r3, [r3, #28]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d136      	bne.n	801023a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101d4:	e031      	b.n	801023a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d10b      	bne.n	80101f8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2202      	movs	r2, #2
 80101e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	69db      	ldr	r3, [r3, #28]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d125      	bne.n	801023a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101f6:	e020      	b.n	801023a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d10b      	bne.n	801021a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2204      	movs	r2, #4
 8010206:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d114      	bne.n	801023a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2201      	movs	r2, #1
 8010214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010218:	e00f      	b.n	801023a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	429a      	cmp	r2, r3
 8010222:	d10a      	bne.n	801023a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2208      	movs	r2, #8
 8010228:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	69db      	ldr	r3, [r3, #28]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d103      	bne.n	801023a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2201      	movs	r2, #1
 8010236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801023a:	68f8      	ldr	r0, [r7, #12]
 801023c:	f7ff ff42 	bl	80100c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2200      	movs	r2, #0
 8010244:	771a      	strb	r2, [r3, #28]
}
 8010246:	bf00      	nop
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b084      	sub	sp, #16
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801025a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	429a      	cmp	r2, r3
 8010264:	d103      	bne.n	801026e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2201      	movs	r2, #1
 801026a:	771a      	strb	r2, [r3, #28]
 801026c:	e019      	b.n	80102a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	429a      	cmp	r2, r3
 8010276:	d103      	bne.n	8010280 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2202      	movs	r2, #2
 801027c:	771a      	strb	r2, [r3, #28]
 801027e:	e010      	b.n	80102a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	429a      	cmp	r2, r3
 8010288:	d103      	bne.n	8010292 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2204      	movs	r2, #4
 801028e:	771a      	strb	r2, [r3, #28]
 8010290:	e007      	b.n	80102a2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	429a      	cmp	r2, r3
 801029a:	d102      	bne.n	80102a2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2208      	movs	r2, #8
 80102a0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	f7ff ff18 	bl	80100d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2200      	movs	r2, #0
 80102ac:	771a      	strb	r2, [r3, #28]
}
 80102ae:	bf00      	nop
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a44      	ldr	r2, [pc, #272]	; (80103dc <TIM_Base_SetConfig+0x124>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d013      	beq.n	80102f8 <TIM_Base_SetConfig+0x40>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102d6:	d00f      	beq.n	80102f8 <TIM_Base_SetConfig+0x40>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4a41      	ldr	r2, [pc, #260]	; (80103e0 <TIM_Base_SetConfig+0x128>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d00b      	beq.n	80102f8 <TIM_Base_SetConfig+0x40>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a40      	ldr	r2, [pc, #256]	; (80103e4 <TIM_Base_SetConfig+0x12c>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d007      	beq.n	80102f8 <TIM_Base_SetConfig+0x40>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a3f      	ldr	r2, [pc, #252]	; (80103e8 <TIM_Base_SetConfig+0x130>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d003      	beq.n	80102f8 <TIM_Base_SetConfig+0x40>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a3e      	ldr	r2, [pc, #248]	; (80103ec <TIM_Base_SetConfig+0x134>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d108      	bne.n	801030a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	4313      	orrs	r3, r2
 8010308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4a33      	ldr	r2, [pc, #204]	; (80103dc <TIM_Base_SetConfig+0x124>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d027      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010318:	d023      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4a30      	ldr	r2, [pc, #192]	; (80103e0 <TIM_Base_SetConfig+0x128>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d01f      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4a2f      	ldr	r2, [pc, #188]	; (80103e4 <TIM_Base_SetConfig+0x12c>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d01b      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4a2e      	ldr	r2, [pc, #184]	; (80103e8 <TIM_Base_SetConfig+0x130>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d017      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a2d      	ldr	r2, [pc, #180]	; (80103ec <TIM_Base_SetConfig+0x134>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d013      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4a2c      	ldr	r2, [pc, #176]	; (80103f0 <TIM_Base_SetConfig+0x138>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d00f      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a2b      	ldr	r2, [pc, #172]	; (80103f4 <TIM_Base_SetConfig+0x13c>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d00b      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4a2a      	ldr	r2, [pc, #168]	; (80103f8 <TIM_Base_SetConfig+0x140>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d007      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4a29      	ldr	r2, [pc, #164]	; (80103fc <TIM_Base_SetConfig+0x144>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d003      	beq.n	8010362 <TIM_Base_SetConfig+0xaa>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a28      	ldr	r2, [pc, #160]	; (8010400 <TIM_Base_SetConfig+0x148>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d108      	bne.n	8010374 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	4313      	orrs	r3, r2
 8010372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	695b      	ldr	r3, [r3, #20]
 801037e:	4313      	orrs	r3, r2
 8010380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	689a      	ldr	r2, [r3, #8]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a10      	ldr	r2, [pc, #64]	; (80103dc <TIM_Base_SetConfig+0x124>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d00f      	beq.n	80103c0 <TIM_Base_SetConfig+0x108>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a12      	ldr	r2, [pc, #72]	; (80103ec <TIM_Base_SetConfig+0x134>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d00b      	beq.n	80103c0 <TIM_Base_SetConfig+0x108>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a11      	ldr	r2, [pc, #68]	; (80103f0 <TIM_Base_SetConfig+0x138>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d007      	beq.n	80103c0 <TIM_Base_SetConfig+0x108>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a10      	ldr	r2, [pc, #64]	; (80103f4 <TIM_Base_SetConfig+0x13c>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d003      	beq.n	80103c0 <TIM_Base_SetConfig+0x108>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a0f      	ldr	r2, [pc, #60]	; (80103f8 <TIM_Base_SetConfig+0x140>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d103      	bne.n	80103c8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	691a      	ldr	r2, [r3, #16]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2201      	movs	r2, #1
 80103cc:	615a      	str	r2, [r3, #20]
}
 80103ce:	bf00      	nop
 80103d0:	3714      	adds	r7, #20
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	40010000 	.word	0x40010000
 80103e0:	40000400 	.word	0x40000400
 80103e4:	40000800 	.word	0x40000800
 80103e8:	40000c00 	.word	0x40000c00
 80103ec:	40010400 	.word	0x40010400
 80103f0:	40014000 	.word	0x40014000
 80103f4:	40014400 	.word	0x40014400
 80103f8:	40014800 	.word	0x40014800
 80103fc:	4000e000 	.word	0x4000e000
 8010400:	4000e400 	.word	0x4000e400

08010404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010404:	b480      	push	{r7}
 8010406:	b087      	sub	sp, #28
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6a1b      	ldr	r3, [r3, #32]
 8010412:	f023 0201 	bic.w	r2, r3, #1
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6a1b      	ldr	r3, [r3, #32]
 801041e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	699b      	ldr	r3, [r3, #24]
 801042a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801042c:	68fa      	ldr	r2, [r7, #12]
 801042e:	4b37      	ldr	r3, [pc, #220]	; (801050c <TIM_OC1_SetConfig+0x108>)
 8010430:	4013      	ands	r3, r2
 8010432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f023 0303 	bic.w	r3, r3, #3
 801043a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	4313      	orrs	r3, r2
 8010444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f023 0302 	bic.w	r3, r3, #2
 801044c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	697a      	ldr	r2, [r7, #20]
 8010454:	4313      	orrs	r3, r2
 8010456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	4a2d      	ldr	r2, [pc, #180]	; (8010510 <TIM_OC1_SetConfig+0x10c>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d00f      	beq.n	8010480 <TIM_OC1_SetConfig+0x7c>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4a2c      	ldr	r2, [pc, #176]	; (8010514 <TIM_OC1_SetConfig+0x110>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d00b      	beq.n	8010480 <TIM_OC1_SetConfig+0x7c>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	4a2b      	ldr	r2, [pc, #172]	; (8010518 <TIM_OC1_SetConfig+0x114>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d007      	beq.n	8010480 <TIM_OC1_SetConfig+0x7c>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4a2a      	ldr	r2, [pc, #168]	; (801051c <TIM_OC1_SetConfig+0x118>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d003      	beq.n	8010480 <TIM_OC1_SetConfig+0x7c>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	4a29      	ldr	r2, [pc, #164]	; (8010520 <TIM_OC1_SetConfig+0x11c>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d10c      	bne.n	801049a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	f023 0308 	bic.w	r3, r3, #8
 8010486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	4313      	orrs	r3, r2
 8010490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	f023 0304 	bic.w	r3, r3, #4
 8010498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a1c      	ldr	r2, [pc, #112]	; (8010510 <TIM_OC1_SetConfig+0x10c>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d00f      	beq.n	80104c2 <TIM_OC1_SetConfig+0xbe>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4a1b      	ldr	r2, [pc, #108]	; (8010514 <TIM_OC1_SetConfig+0x110>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d00b      	beq.n	80104c2 <TIM_OC1_SetConfig+0xbe>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a1a      	ldr	r2, [pc, #104]	; (8010518 <TIM_OC1_SetConfig+0x114>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d007      	beq.n	80104c2 <TIM_OC1_SetConfig+0xbe>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a19      	ldr	r2, [pc, #100]	; (801051c <TIM_OC1_SetConfig+0x118>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d003      	beq.n	80104c2 <TIM_OC1_SetConfig+0xbe>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a18      	ldr	r2, [pc, #96]	; (8010520 <TIM_OC1_SetConfig+0x11c>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d111      	bne.n	80104e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	695b      	ldr	r3, [r3, #20]
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	4313      	orrs	r3, r2
 80104da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	693a      	ldr	r2, [r7, #16]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	693a      	ldr	r2, [r7, #16]
 80104ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	68fa      	ldr	r2, [r7, #12]
 80104f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	697a      	ldr	r2, [r7, #20]
 80104fe:	621a      	str	r2, [r3, #32]
}
 8010500:	bf00      	nop
 8010502:	371c      	adds	r7, #28
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	fffeff8f 	.word	0xfffeff8f
 8010510:	40010000 	.word	0x40010000
 8010514:	40010400 	.word	0x40010400
 8010518:	40014000 	.word	0x40014000
 801051c:	40014400 	.word	0x40014400
 8010520:	40014800 	.word	0x40014800

08010524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010524:	b480      	push	{r7}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	f023 0210 	bic.w	r2, r3, #16
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6a1b      	ldr	r3, [r3, #32]
 801053e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	699b      	ldr	r3, [r3, #24]
 801054a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	4b34      	ldr	r3, [pc, #208]	; (8010620 <TIM_OC2_SetConfig+0xfc>)
 8010550:	4013      	ands	r3, r2
 8010552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801055a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	021b      	lsls	r3, r3, #8
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	4313      	orrs	r3, r2
 8010566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	f023 0320 	bic.w	r3, r3, #32
 801056e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	011b      	lsls	r3, r3, #4
 8010576:	697a      	ldr	r2, [r7, #20]
 8010578:	4313      	orrs	r3, r2
 801057a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a29      	ldr	r2, [pc, #164]	; (8010624 <TIM_OC2_SetConfig+0x100>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d003      	beq.n	801058c <TIM_OC2_SetConfig+0x68>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4a28      	ldr	r2, [pc, #160]	; (8010628 <TIM_OC2_SetConfig+0x104>)
 8010588:	4293      	cmp	r3, r2
 801058a:	d10d      	bne.n	80105a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	011b      	lsls	r3, r3, #4
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	4313      	orrs	r3, r2
 801059e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4a1e      	ldr	r2, [pc, #120]	; (8010624 <TIM_OC2_SetConfig+0x100>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d00f      	beq.n	80105d0 <TIM_OC2_SetConfig+0xac>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4a1d      	ldr	r2, [pc, #116]	; (8010628 <TIM_OC2_SetConfig+0x104>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d00b      	beq.n	80105d0 <TIM_OC2_SetConfig+0xac>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4a1c      	ldr	r2, [pc, #112]	; (801062c <TIM_OC2_SetConfig+0x108>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d007      	beq.n	80105d0 <TIM_OC2_SetConfig+0xac>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4a1b      	ldr	r2, [pc, #108]	; (8010630 <TIM_OC2_SetConfig+0x10c>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d003      	beq.n	80105d0 <TIM_OC2_SetConfig+0xac>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a1a      	ldr	r2, [pc, #104]	; (8010634 <TIM_OC2_SetConfig+0x110>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d113      	bne.n	80105f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	4313      	orrs	r3, r2
 80105ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	699b      	ldr	r3, [r3, #24]
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	693a      	ldr	r2, [r7, #16]
 80105fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	685a      	ldr	r2, [r3, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	621a      	str	r2, [r3, #32]
}
 8010612:	bf00      	nop
 8010614:	371c      	adds	r7, #28
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	feff8fff 	.word	0xfeff8fff
 8010624:	40010000 	.word	0x40010000
 8010628:	40010400 	.word	0x40010400
 801062c:	40014000 	.word	0x40014000
 8010630:	40014400 	.word	0x40014400
 8010634:	40014800 	.word	0x40014800

08010638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010638:	b480      	push	{r7}
 801063a:	b087      	sub	sp, #28
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	69db      	ldr	r3, [r3, #28]
 801065e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	4b33      	ldr	r3, [pc, #204]	; (8010730 <TIM_OC3_SetConfig+0xf8>)
 8010664:	4013      	ands	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f023 0303 	bic.w	r3, r3, #3
 801066e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	68fa      	ldr	r2, [r7, #12]
 8010676:	4313      	orrs	r3, r2
 8010678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	021b      	lsls	r3, r3, #8
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	4313      	orrs	r3, r2
 801068c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a28      	ldr	r2, [pc, #160]	; (8010734 <TIM_OC3_SetConfig+0xfc>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d003      	beq.n	801069e <TIM_OC3_SetConfig+0x66>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a27      	ldr	r2, [pc, #156]	; (8010738 <TIM_OC3_SetConfig+0x100>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d10d      	bne.n	80106ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	021b      	lsls	r3, r3, #8
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4a1d      	ldr	r2, [pc, #116]	; (8010734 <TIM_OC3_SetConfig+0xfc>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d00f      	beq.n	80106e2 <TIM_OC3_SetConfig+0xaa>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a1c      	ldr	r2, [pc, #112]	; (8010738 <TIM_OC3_SetConfig+0x100>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d00b      	beq.n	80106e2 <TIM_OC3_SetConfig+0xaa>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a1b      	ldr	r2, [pc, #108]	; (801073c <TIM_OC3_SetConfig+0x104>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d007      	beq.n	80106e2 <TIM_OC3_SetConfig+0xaa>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a1a      	ldr	r2, [pc, #104]	; (8010740 <TIM_OC3_SetConfig+0x108>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d003      	beq.n	80106e2 <TIM_OC3_SetConfig+0xaa>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a19      	ldr	r2, [pc, #100]	; (8010744 <TIM_OC3_SetConfig+0x10c>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d113      	bne.n	801070a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	011b      	lsls	r3, r3, #4
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	011b      	lsls	r3, r3, #4
 8010704:	693a      	ldr	r2, [r7, #16]
 8010706:	4313      	orrs	r3, r2
 8010708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	697a      	ldr	r2, [r7, #20]
 8010722:	621a      	str	r2, [r3, #32]
}
 8010724:	bf00      	nop
 8010726:	371c      	adds	r7, #28
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr
 8010730:	fffeff8f 	.word	0xfffeff8f
 8010734:	40010000 	.word	0x40010000
 8010738:	40010400 	.word	0x40010400
 801073c:	40014000 	.word	0x40014000
 8010740:	40014400 	.word	0x40014400
 8010744:	40014800 	.word	0x40014800

08010748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010748:	b480      	push	{r7}
 801074a:	b087      	sub	sp, #28
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	69db      	ldr	r3, [r3, #28]
 801076e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	4b24      	ldr	r3, [pc, #144]	; (8010804 <TIM_OC4_SetConfig+0xbc>)
 8010774:	4013      	ands	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801077e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	021b      	lsls	r3, r3, #8
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	4313      	orrs	r3, r2
 801078a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	031b      	lsls	r3, r3, #12
 801079a:	693a      	ldr	r2, [r7, #16]
 801079c:	4313      	orrs	r3, r2
 801079e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4a19      	ldr	r2, [pc, #100]	; (8010808 <TIM_OC4_SetConfig+0xc0>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d00f      	beq.n	80107c8 <TIM_OC4_SetConfig+0x80>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4a18      	ldr	r2, [pc, #96]	; (801080c <TIM_OC4_SetConfig+0xc4>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d00b      	beq.n	80107c8 <TIM_OC4_SetConfig+0x80>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	4a17      	ldr	r2, [pc, #92]	; (8010810 <TIM_OC4_SetConfig+0xc8>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d007      	beq.n	80107c8 <TIM_OC4_SetConfig+0x80>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a16      	ldr	r2, [pc, #88]	; (8010814 <TIM_OC4_SetConfig+0xcc>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d003      	beq.n	80107c8 <TIM_OC4_SetConfig+0x80>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a15      	ldr	r2, [pc, #84]	; (8010818 <TIM_OC4_SetConfig+0xd0>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d109      	bne.n	80107dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	695b      	ldr	r3, [r3, #20]
 80107d4:	019b      	lsls	r3, r3, #6
 80107d6:	697a      	ldr	r2, [r7, #20]
 80107d8:	4313      	orrs	r3, r2
 80107da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	685a      	ldr	r2, [r3, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	693a      	ldr	r2, [r7, #16]
 80107f4:	621a      	str	r2, [r3, #32]
}
 80107f6:	bf00      	nop
 80107f8:	371c      	adds	r7, #28
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	feff8fff 	.word	0xfeff8fff
 8010808:	40010000 	.word	0x40010000
 801080c:	40010400 	.word	0x40010400
 8010810:	40014000 	.word	0x40014000
 8010814:	40014400 	.word	0x40014400
 8010818:	40014800 	.word	0x40014800

0801081c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801081c:	b480      	push	{r7}
 801081e:	b087      	sub	sp, #28
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6a1b      	ldr	r3, [r3, #32]
 801082a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	4b21      	ldr	r3, [pc, #132]	; (80108cc <TIM_OC5_SetConfig+0xb0>)
 8010848:	4013      	ands	r3, r2
 801084a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	4313      	orrs	r3, r2
 8010854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801085c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	041b      	lsls	r3, r3, #16
 8010864:	693a      	ldr	r2, [r7, #16]
 8010866:	4313      	orrs	r3, r2
 8010868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a18      	ldr	r2, [pc, #96]	; (80108d0 <TIM_OC5_SetConfig+0xb4>)
 801086e:	4293      	cmp	r3, r2
 8010870:	d00f      	beq.n	8010892 <TIM_OC5_SetConfig+0x76>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4a17      	ldr	r2, [pc, #92]	; (80108d4 <TIM_OC5_SetConfig+0xb8>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d00b      	beq.n	8010892 <TIM_OC5_SetConfig+0x76>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4a16      	ldr	r2, [pc, #88]	; (80108d8 <TIM_OC5_SetConfig+0xbc>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d007      	beq.n	8010892 <TIM_OC5_SetConfig+0x76>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	4a15      	ldr	r2, [pc, #84]	; (80108dc <TIM_OC5_SetConfig+0xc0>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d003      	beq.n	8010892 <TIM_OC5_SetConfig+0x76>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4a14      	ldr	r2, [pc, #80]	; (80108e0 <TIM_OC5_SetConfig+0xc4>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d109      	bne.n	80108a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	695b      	ldr	r3, [r3, #20]
 801089e:	021b      	lsls	r3, r3, #8
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	697a      	ldr	r2, [r7, #20]
 80108aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	68fa      	ldr	r2, [r7, #12]
 80108b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	685a      	ldr	r2, [r3, #4]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	693a      	ldr	r2, [r7, #16]
 80108be:	621a      	str	r2, [r3, #32]
}
 80108c0:	bf00      	nop
 80108c2:	371c      	adds	r7, #28
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	fffeff8f 	.word	0xfffeff8f
 80108d0:	40010000 	.word	0x40010000
 80108d4:	40010400 	.word	0x40010400
 80108d8:	40014000 	.word	0x40014000
 80108dc:	40014400 	.word	0x40014400
 80108e0:	40014800 	.word	0x40014800

080108e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b087      	sub	sp, #28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a1b      	ldr	r3, [r3, #32]
 80108f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801090a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	4b22      	ldr	r3, [pc, #136]	; (8010998 <TIM_OC6_SetConfig+0xb4>)
 8010910:	4013      	ands	r3, r2
 8010912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	021b      	lsls	r3, r3, #8
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	4313      	orrs	r3, r2
 801091e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	051b      	lsls	r3, r3, #20
 801092e:	693a      	ldr	r2, [r7, #16]
 8010930:	4313      	orrs	r3, r2
 8010932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4a19      	ldr	r2, [pc, #100]	; (801099c <TIM_OC6_SetConfig+0xb8>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d00f      	beq.n	801095c <TIM_OC6_SetConfig+0x78>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a18      	ldr	r2, [pc, #96]	; (80109a0 <TIM_OC6_SetConfig+0xbc>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d00b      	beq.n	801095c <TIM_OC6_SetConfig+0x78>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4a17      	ldr	r2, [pc, #92]	; (80109a4 <TIM_OC6_SetConfig+0xc0>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d007      	beq.n	801095c <TIM_OC6_SetConfig+0x78>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4a16      	ldr	r2, [pc, #88]	; (80109a8 <TIM_OC6_SetConfig+0xc4>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d003      	beq.n	801095c <TIM_OC6_SetConfig+0x78>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4a15      	ldr	r2, [pc, #84]	; (80109ac <TIM_OC6_SetConfig+0xc8>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d109      	bne.n	8010970 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	029b      	lsls	r3, r3, #10
 801096a:	697a      	ldr	r2, [r7, #20]
 801096c:	4313      	orrs	r3, r2
 801096e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	697a      	ldr	r2, [r7, #20]
 8010974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	685a      	ldr	r2, [r3, #4]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	693a      	ldr	r2, [r7, #16]
 8010988:	621a      	str	r2, [r3, #32]
}
 801098a:	bf00      	nop
 801098c:	371c      	adds	r7, #28
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop
 8010998:	feff8fff 	.word	0xfeff8fff
 801099c:	40010000 	.word	0x40010000
 80109a0:	40010400 	.word	0x40010400
 80109a4:	40014000 	.word	0x40014000
 80109a8:	40014400 	.word	0x40014400
 80109ac:	40014800 	.word	0x40014800

080109b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b087      	sub	sp, #28
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	f003 031f 	and.w	r3, r3, #31
 80109c2:	2201      	movs	r2, #1
 80109c4:	fa02 f303 	lsl.w	r3, r2, r3
 80109c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	6a1a      	ldr	r2, [r3, #32]
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	43db      	mvns	r3, r3
 80109d2:	401a      	ands	r2, r3
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6a1a      	ldr	r2, [r3, #32]
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	f003 031f 	and.w	r3, r3, #31
 80109e2:	6879      	ldr	r1, [r7, #4]
 80109e4:	fa01 f303 	lsl.w	r3, r1, r3
 80109e8:	431a      	orrs	r2, r3
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	621a      	str	r2, [r3, #32]
}
 80109ee:	bf00      	nop
 80109f0:	371c      	adds	r7, #28
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr
	...

080109fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d101      	bne.n	8010a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a10:	2302      	movs	r3, #2
 8010a12:	e077      	b.n	8010b04 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2201      	movs	r2, #1
 8010a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2202      	movs	r2, #2
 8010a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	689b      	ldr	r3, [r3, #8]
 8010a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a35      	ldr	r2, [pc, #212]	; (8010b10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d004      	beq.n	8010a48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4a34      	ldr	r2, [pc, #208]	; (8010b14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d108      	bne.n	8010a5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	4313      	orrs	r3, r2
 8010a58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	68fa      	ldr	r2, [r7, #12]
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a25      	ldr	r2, [pc, #148]	; (8010b10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d02c      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a86:	d027      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a22      	ldr	r2, [pc, #136]	; (8010b18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d022      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a21      	ldr	r2, [pc, #132]	; (8010b1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d01d      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a1f      	ldr	r2, [pc, #124]	; (8010b20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d018      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a1a      	ldr	r2, [pc, #104]	; (8010b14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d013      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a1b      	ldr	r2, [pc, #108]	; (8010b24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d00e      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a1a      	ldr	r2, [pc, #104]	; (8010b28 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d009      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a18      	ldr	r2, [pc, #96]	; (8010b2c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d004      	beq.n	8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a17      	ldr	r2, [pc, #92]	; (8010b30 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d10c      	bne.n	8010af2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ade:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b02:	2300      	movs	r3, #0
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3714      	adds	r7, #20
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr
 8010b10:	40010000 	.word	0x40010000
 8010b14:	40010400 	.word	0x40010400
 8010b18:	40000400 	.word	0x40000400
 8010b1c:	40000800 	.word	0x40000800
 8010b20:	40000c00 	.word	0x40000c00
 8010b24:	40001800 	.word	0x40001800
 8010b28:	40014000 	.word	0x40014000
 8010b2c:	4000e000 	.word	0x4000e000
 8010b30:	4000e400 	.word	0x4000e400

08010b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b3c:	bf00      	nop
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b50:	bf00      	nop
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b64:	bf00      	nop
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d101      	bne.n	8010b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e042      	b.n	8010c08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d106      	bne.n	8010b9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7f2 fcc5 	bl	8003524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2224      	movs	r2, #36	; 0x24
 8010b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f022 0201 	bic.w	r2, r2, #1
 8010bb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f000 f82c 	bl	8010c10 <UART_SetConfig>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d101      	bne.n	8010bc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e022      	b.n	8010c08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d002      	beq.n	8010bd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 fe8c 	bl	80118e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	685a      	ldr	r2, [r3, #4]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	689a      	ldr	r2, [r3, #8]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f042 0201 	orr.w	r2, r2, #1
 8010bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 ff13 	bl	8011a2c <UART_CheckIdleState>
 8010c06:	4603      	mov	r3, r0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c14:	b092      	sub	sp, #72	; 0x48
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	689a      	ldr	r2, [r3, #8]
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	431a      	orrs	r2, r3
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	695b      	ldr	r3, [r3, #20]
 8010c2e:	431a      	orrs	r2, r3
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	4bbe      	ldr	r3, [pc, #760]	; (8010f38 <UART_SetConfig+0x328>)
 8010c40:	4013      	ands	r3, r2
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	6812      	ldr	r2, [r2, #0]
 8010c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c48:	430b      	orrs	r3, r1
 8010c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	68da      	ldr	r2, [r3, #12]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	430a      	orrs	r2, r1
 8010c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	699b      	ldr	r3, [r3, #24]
 8010c66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4ab3      	ldr	r2, [pc, #716]	; (8010f3c <UART_SetConfig+0x32c>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d004      	beq.n	8010c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	6a1b      	ldr	r3, [r3, #32]
 8010c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	689a      	ldr	r2, [r3, #8]
 8010c82:	4baf      	ldr	r3, [pc, #700]	; (8010f40 <UART_SetConfig+0x330>)
 8010c84:	4013      	ands	r3, r2
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c8c:	430b      	orrs	r3, r1
 8010c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c96:	f023 010f 	bic.w	r1, r3, #15
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	430a      	orrs	r2, r1
 8010ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	4aa6      	ldr	r2, [pc, #664]	; (8010f44 <UART_SetConfig+0x334>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d177      	bne.n	8010da0 <UART_SetConfig+0x190>
 8010cb0:	4ba5      	ldr	r3, [pc, #660]	; (8010f48 <UART_SetConfig+0x338>)
 8010cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cb8:	2b28      	cmp	r3, #40	; 0x28
 8010cba:	d86d      	bhi.n	8010d98 <UART_SetConfig+0x188>
 8010cbc:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <UART_SetConfig+0xb4>)
 8010cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc2:	bf00      	nop
 8010cc4:	08010d69 	.word	0x08010d69
 8010cc8:	08010d99 	.word	0x08010d99
 8010ccc:	08010d99 	.word	0x08010d99
 8010cd0:	08010d99 	.word	0x08010d99
 8010cd4:	08010d99 	.word	0x08010d99
 8010cd8:	08010d99 	.word	0x08010d99
 8010cdc:	08010d99 	.word	0x08010d99
 8010ce0:	08010d99 	.word	0x08010d99
 8010ce4:	08010d71 	.word	0x08010d71
 8010ce8:	08010d99 	.word	0x08010d99
 8010cec:	08010d99 	.word	0x08010d99
 8010cf0:	08010d99 	.word	0x08010d99
 8010cf4:	08010d99 	.word	0x08010d99
 8010cf8:	08010d99 	.word	0x08010d99
 8010cfc:	08010d99 	.word	0x08010d99
 8010d00:	08010d99 	.word	0x08010d99
 8010d04:	08010d79 	.word	0x08010d79
 8010d08:	08010d99 	.word	0x08010d99
 8010d0c:	08010d99 	.word	0x08010d99
 8010d10:	08010d99 	.word	0x08010d99
 8010d14:	08010d99 	.word	0x08010d99
 8010d18:	08010d99 	.word	0x08010d99
 8010d1c:	08010d99 	.word	0x08010d99
 8010d20:	08010d99 	.word	0x08010d99
 8010d24:	08010d81 	.word	0x08010d81
 8010d28:	08010d99 	.word	0x08010d99
 8010d2c:	08010d99 	.word	0x08010d99
 8010d30:	08010d99 	.word	0x08010d99
 8010d34:	08010d99 	.word	0x08010d99
 8010d38:	08010d99 	.word	0x08010d99
 8010d3c:	08010d99 	.word	0x08010d99
 8010d40:	08010d99 	.word	0x08010d99
 8010d44:	08010d89 	.word	0x08010d89
 8010d48:	08010d99 	.word	0x08010d99
 8010d4c:	08010d99 	.word	0x08010d99
 8010d50:	08010d99 	.word	0x08010d99
 8010d54:	08010d99 	.word	0x08010d99
 8010d58:	08010d99 	.word	0x08010d99
 8010d5c:	08010d99 	.word	0x08010d99
 8010d60:	08010d99 	.word	0x08010d99
 8010d64:	08010d91 	.word	0x08010d91
 8010d68:	2301      	movs	r3, #1
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e326      	b.n	80113be <UART_SetConfig+0x7ae>
 8010d70:	2304      	movs	r3, #4
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e322      	b.n	80113be <UART_SetConfig+0x7ae>
 8010d78:	2308      	movs	r3, #8
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e31e      	b.n	80113be <UART_SetConfig+0x7ae>
 8010d80:	2310      	movs	r3, #16
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e31a      	b.n	80113be <UART_SetConfig+0x7ae>
 8010d88:	2320      	movs	r3, #32
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e316      	b.n	80113be <UART_SetConfig+0x7ae>
 8010d90:	2340      	movs	r3, #64	; 0x40
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e312      	b.n	80113be <UART_SetConfig+0x7ae>
 8010d98:	2380      	movs	r3, #128	; 0x80
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e30e      	b.n	80113be <UART_SetConfig+0x7ae>
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4a69      	ldr	r2, [pc, #420]	; (8010f4c <UART_SetConfig+0x33c>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d130      	bne.n	8010e0c <UART_SetConfig+0x1fc>
 8010daa:	4b67      	ldr	r3, [pc, #412]	; (8010f48 <UART_SetConfig+0x338>)
 8010dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dae:	f003 0307 	and.w	r3, r3, #7
 8010db2:	2b05      	cmp	r3, #5
 8010db4:	d826      	bhi.n	8010e04 <UART_SetConfig+0x1f4>
 8010db6:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <UART_SetConfig+0x1ac>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010dd5 	.word	0x08010dd5
 8010dc0:	08010ddd 	.word	0x08010ddd
 8010dc4:	08010de5 	.word	0x08010de5
 8010dc8:	08010ded 	.word	0x08010ded
 8010dcc:	08010df5 	.word	0x08010df5
 8010dd0:	08010dfd 	.word	0x08010dfd
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e2f0      	b.n	80113be <UART_SetConfig+0x7ae>
 8010ddc:	2304      	movs	r3, #4
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e2ec      	b.n	80113be <UART_SetConfig+0x7ae>
 8010de4:	2308      	movs	r3, #8
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e2e8      	b.n	80113be <UART_SetConfig+0x7ae>
 8010dec:	2310      	movs	r3, #16
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e2e4      	b.n	80113be <UART_SetConfig+0x7ae>
 8010df4:	2320      	movs	r3, #32
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e2e0      	b.n	80113be <UART_SetConfig+0x7ae>
 8010dfc:	2340      	movs	r3, #64	; 0x40
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e2dc      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e04:	2380      	movs	r3, #128	; 0x80
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e2d8      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a4f      	ldr	r2, [pc, #316]	; (8010f50 <UART_SetConfig+0x340>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d130      	bne.n	8010e78 <UART_SetConfig+0x268>
 8010e16:	4b4c      	ldr	r3, [pc, #304]	; (8010f48 <UART_SetConfig+0x338>)
 8010e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e1a:	f003 0307 	and.w	r3, r3, #7
 8010e1e:	2b05      	cmp	r3, #5
 8010e20:	d826      	bhi.n	8010e70 <UART_SetConfig+0x260>
 8010e22:	a201      	add	r2, pc, #4	; (adr r2, 8010e28 <UART_SetConfig+0x218>)
 8010e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e28:	08010e41 	.word	0x08010e41
 8010e2c:	08010e49 	.word	0x08010e49
 8010e30:	08010e51 	.word	0x08010e51
 8010e34:	08010e59 	.word	0x08010e59
 8010e38:	08010e61 	.word	0x08010e61
 8010e3c:	08010e69 	.word	0x08010e69
 8010e40:	2300      	movs	r3, #0
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e2ba      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e48:	2304      	movs	r3, #4
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e2b6      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e50:	2308      	movs	r3, #8
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e2b2      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e58:	2310      	movs	r3, #16
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e2ae      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e60:	2320      	movs	r3, #32
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e2aa      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e68:	2340      	movs	r3, #64	; 0x40
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e2a6      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e70:	2380      	movs	r3, #128	; 0x80
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e2a2      	b.n	80113be <UART_SetConfig+0x7ae>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4a35      	ldr	r2, [pc, #212]	; (8010f54 <UART_SetConfig+0x344>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d130      	bne.n	8010ee4 <UART_SetConfig+0x2d4>
 8010e82:	4b31      	ldr	r3, [pc, #196]	; (8010f48 <UART_SetConfig+0x338>)
 8010e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e86:	f003 0307 	and.w	r3, r3, #7
 8010e8a:	2b05      	cmp	r3, #5
 8010e8c:	d826      	bhi.n	8010edc <UART_SetConfig+0x2cc>
 8010e8e:	a201      	add	r2, pc, #4	; (adr r2, 8010e94 <UART_SetConfig+0x284>)
 8010e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e94:	08010ead 	.word	0x08010ead
 8010e98:	08010eb5 	.word	0x08010eb5
 8010e9c:	08010ebd 	.word	0x08010ebd
 8010ea0:	08010ec5 	.word	0x08010ec5
 8010ea4:	08010ecd 	.word	0x08010ecd
 8010ea8:	08010ed5 	.word	0x08010ed5
 8010eac:	2300      	movs	r3, #0
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e284      	b.n	80113be <UART_SetConfig+0x7ae>
 8010eb4:	2304      	movs	r3, #4
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e280      	b.n	80113be <UART_SetConfig+0x7ae>
 8010ebc:	2308      	movs	r3, #8
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e27c      	b.n	80113be <UART_SetConfig+0x7ae>
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eca:	e278      	b.n	80113be <UART_SetConfig+0x7ae>
 8010ecc:	2320      	movs	r3, #32
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e274      	b.n	80113be <UART_SetConfig+0x7ae>
 8010ed4:	2340      	movs	r3, #64	; 0x40
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e270      	b.n	80113be <UART_SetConfig+0x7ae>
 8010edc:	2380      	movs	r3, #128	; 0x80
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e26c      	b.n	80113be <UART_SetConfig+0x7ae>
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	4a1b      	ldr	r2, [pc, #108]	; (8010f58 <UART_SetConfig+0x348>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d142      	bne.n	8010f74 <UART_SetConfig+0x364>
 8010eee:	4b16      	ldr	r3, [pc, #88]	; (8010f48 <UART_SetConfig+0x338>)
 8010ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ef2:	f003 0307 	and.w	r3, r3, #7
 8010ef6:	2b05      	cmp	r3, #5
 8010ef8:	d838      	bhi.n	8010f6c <UART_SetConfig+0x35c>
 8010efa:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <UART_SetConfig+0x2f0>)
 8010efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f00:	08010f19 	.word	0x08010f19
 8010f04:	08010f21 	.word	0x08010f21
 8010f08:	08010f29 	.word	0x08010f29
 8010f0c:	08010f31 	.word	0x08010f31
 8010f10:	08010f5d 	.word	0x08010f5d
 8010f14:	08010f65 	.word	0x08010f65
 8010f18:	2300      	movs	r3, #0
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e24e      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f20:	2304      	movs	r3, #4
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e24a      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f28:	2308      	movs	r3, #8
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e246      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f30:	2310      	movs	r3, #16
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e242      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f38:	cfff69f3 	.word	0xcfff69f3
 8010f3c:	58000c00 	.word	0x58000c00
 8010f40:	11fff4ff 	.word	0x11fff4ff
 8010f44:	40011000 	.word	0x40011000
 8010f48:	58024400 	.word	0x58024400
 8010f4c:	40004400 	.word	0x40004400
 8010f50:	40004800 	.word	0x40004800
 8010f54:	40004c00 	.word	0x40004c00
 8010f58:	40005000 	.word	0x40005000
 8010f5c:	2320      	movs	r3, #32
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f62:	e22c      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f64:	2340      	movs	r3, #64	; 0x40
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e228      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f6c:	2380      	movs	r3, #128	; 0x80
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e224      	b.n	80113be <UART_SetConfig+0x7ae>
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4ab1      	ldr	r2, [pc, #708]	; (8011240 <UART_SetConfig+0x630>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d176      	bne.n	801106c <UART_SetConfig+0x45c>
 8010f7e:	4bb1      	ldr	r3, [pc, #708]	; (8011244 <UART_SetConfig+0x634>)
 8010f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f86:	2b28      	cmp	r3, #40	; 0x28
 8010f88:	d86c      	bhi.n	8011064 <UART_SetConfig+0x454>
 8010f8a:	a201      	add	r2, pc, #4	; (adr r2, 8010f90 <UART_SetConfig+0x380>)
 8010f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f90:	08011035 	.word	0x08011035
 8010f94:	08011065 	.word	0x08011065
 8010f98:	08011065 	.word	0x08011065
 8010f9c:	08011065 	.word	0x08011065
 8010fa0:	08011065 	.word	0x08011065
 8010fa4:	08011065 	.word	0x08011065
 8010fa8:	08011065 	.word	0x08011065
 8010fac:	08011065 	.word	0x08011065
 8010fb0:	0801103d 	.word	0x0801103d
 8010fb4:	08011065 	.word	0x08011065
 8010fb8:	08011065 	.word	0x08011065
 8010fbc:	08011065 	.word	0x08011065
 8010fc0:	08011065 	.word	0x08011065
 8010fc4:	08011065 	.word	0x08011065
 8010fc8:	08011065 	.word	0x08011065
 8010fcc:	08011065 	.word	0x08011065
 8010fd0:	08011045 	.word	0x08011045
 8010fd4:	08011065 	.word	0x08011065
 8010fd8:	08011065 	.word	0x08011065
 8010fdc:	08011065 	.word	0x08011065
 8010fe0:	08011065 	.word	0x08011065
 8010fe4:	08011065 	.word	0x08011065
 8010fe8:	08011065 	.word	0x08011065
 8010fec:	08011065 	.word	0x08011065
 8010ff0:	0801104d 	.word	0x0801104d
 8010ff4:	08011065 	.word	0x08011065
 8010ff8:	08011065 	.word	0x08011065
 8010ffc:	08011065 	.word	0x08011065
 8011000:	08011065 	.word	0x08011065
 8011004:	08011065 	.word	0x08011065
 8011008:	08011065 	.word	0x08011065
 801100c:	08011065 	.word	0x08011065
 8011010:	08011055 	.word	0x08011055
 8011014:	08011065 	.word	0x08011065
 8011018:	08011065 	.word	0x08011065
 801101c:	08011065 	.word	0x08011065
 8011020:	08011065 	.word	0x08011065
 8011024:	08011065 	.word	0x08011065
 8011028:	08011065 	.word	0x08011065
 801102c:	08011065 	.word	0x08011065
 8011030:	0801105d 	.word	0x0801105d
 8011034:	2301      	movs	r3, #1
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e1c0      	b.n	80113be <UART_SetConfig+0x7ae>
 801103c:	2304      	movs	r3, #4
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e1bc      	b.n	80113be <UART_SetConfig+0x7ae>
 8011044:	2308      	movs	r3, #8
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e1b8      	b.n	80113be <UART_SetConfig+0x7ae>
 801104c:	2310      	movs	r3, #16
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e1b4      	b.n	80113be <UART_SetConfig+0x7ae>
 8011054:	2320      	movs	r3, #32
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e1b0      	b.n	80113be <UART_SetConfig+0x7ae>
 801105c:	2340      	movs	r3, #64	; 0x40
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e1ac      	b.n	80113be <UART_SetConfig+0x7ae>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e1a8      	b.n	80113be <UART_SetConfig+0x7ae>
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a75      	ldr	r2, [pc, #468]	; (8011248 <UART_SetConfig+0x638>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d130      	bne.n	80110d8 <UART_SetConfig+0x4c8>
 8011076:	4b73      	ldr	r3, [pc, #460]	; (8011244 <UART_SetConfig+0x634>)
 8011078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107a:	f003 0307 	and.w	r3, r3, #7
 801107e:	2b05      	cmp	r3, #5
 8011080:	d826      	bhi.n	80110d0 <UART_SetConfig+0x4c0>
 8011082:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <UART_SetConfig+0x478>)
 8011084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011088:	080110a1 	.word	0x080110a1
 801108c:	080110a9 	.word	0x080110a9
 8011090:	080110b1 	.word	0x080110b1
 8011094:	080110b9 	.word	0x080110b9
 8011098:	080110c1 	.word	0x080110c1
 801109c:	080110c9 	.word	0x080110c9
 80110a0:	2300      	movs	r3, #0
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e18a      	b.n	80113be <UART_SetConfig+0x7ae>
 80110a8:	2304      	movs	r3, #4
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e186      	b.n	80113be <UART_SetConfig+0x7ae>
 80110b0:	2308      	movs	r3, #8
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e182      	b.n	80113be <UART_SetConfig+0x7ae>
 80110b8:	2310      	movs	r3, #16
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e17e      	b.n	80113be <UART_SetConfig+0x7ae>
 80110c0:	2320      	movs	r3, #32
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e17a      	b.n	80113be <UART_SetConfig+0x7ae>
 80110c8:	2340      	movs	r3, #64	; 0x40
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e176      	b.n	80113be <UART_SetConfig+0x7ae>
 80110d0:	2380      	movs	r3, #128	; 0x80
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e172      	b.n	80113be <UART_SetConfig+0x7ae>
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a5b      	ldr	r2, [pc, #364]	; (801124c <UART_SetConfig+0x63c>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d130      	bne.n	8011144 <UART_SetConfig+0x534>
 80110e2:	4b58      	ldr	r3, [pc, #352]	; (8011244 <UART_SetConfig+0x634>)
 80110e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e6:	f003 0307 	and.w	r3, r3, #7
 80110ea:	2b05      	cmp	r3, #5
 80110ec:	d826      	bhi.n	801113c <UART_SetConfig+0x52c>
 80110ee:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <UART_SetConfig+0x4e4>)
 80110f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f4:	0801110d 	.word	0x0801110d
 80110f8:	08011115 	.word	0x08011115
 80110fc:	0801111d 	.word	0x0801111d
 8011100:	08011125 	.word	0x08011125
 8011104:	0801112d 	.word	0x0801112d
 8011108:	08011135 	.word	0x08011135
 801110c:	2300      	movs	r3, #0
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e154      	b.n	80113be <UART_SetConfig+0x7ae>
 8011114:	2304      	movs	r3, #4
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e150      	b.n	80113be <UART_SetConfig+0x7ae>
 801111c:	2308      	movs	r3, #8
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e14c      	b.n	80113be <UART_SetConfig+0x7ae>
 8011124:	2310      	movs	r3, #16
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e148      	b.n	80113be <UART_SetConfig+0x7ae>
 801112c:	2320      	movs	r3, #32
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e144      	b.n	80113be <UART_SetConfig+0x7ae>
 8011134:	2340      	movs	r3, #64	; 0x40
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e140      	b.n	80113be <UART_SetConfig+0x7ae>
 801113c:	2380      	movs	r3, #128	; 0x80
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e13c      	b.n	80113be <UART_SetConfig+0x7ae>
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a41      	ldr	r2, [pc, #260]	; (8011250 <UART_SetConfig+0x640>)
 801114a:	4293      	cmp	r3, r2
 801114c:	f040 8082 	bne.w	8011254 <UART_SetConfig+0x644>
 8011150:	4b3c      	ldr	r3, [pc, #240]	; (8011244 <UART_SetConfig+0x634>)
 8011152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011158:	2b28      	cmp	r3, #40	; 0x28
 801115a:	d86d      	bhi.n	8011238 <UART_SetConfig+0x628>
 801115c:	a201      	add	r2, pc, #4	; (adr r2, 8011164 <UART_SetConfig+0x554>)
 801115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011162:	bf00      	nop
 8011164:	08011209 	.word	0x08011209
 8011168:	08011239 	.word	0x08011239
 801116c:	08011239 	.word	0x08011239
 8011170:	08011239 	.word	0x08011239
 8011174:	08011239 	.word	0x08011239
 8011178:	08011239 	.word	0x08011239
 801117c:	08011239 	.word	0x08011239
 8011180:	08011239 	.word	0x08011239
 8011184:	08011211 	.word	0x08011211
 8011188:	08011239 	.word	0x08011239
 801118c:	08011239 	.word	0x08011239
 8011190:	08011239 	.word	0x08011239
 8011194:	08011239 	.word	0x08011239
 8011198:	08011239 	.word	0x08011239
 801119c:	08011239 	.word	0x08011239
 80111a0:	08011239 	.word	0x08011239
 80111a4:	08011219 	.word	0x08011219
 80111a8:	08011239 	.word	0x08011239
 80111ac:	08011239 	.word	0x08011239
 80111b0:	08011239 	.word	0x08011239
 80111b4:	08011239 	.word	0x08011239
 80111b8:	08011239 	.word	0x08011239
 80111bc:	08011239 	.word	0x08011239
 80111c0:	08011239 	.word	0x08011239
 80111c4:	08011221 	.word	0x08011221
 80111c8:	08011239 	.word	0x08011239
 80111cc:	08011239 	.word	0x08011239
 80111d0:	08011239 	.word	0x08011239
 80111d4:	08011239 	.word	0x08011239
 80111d8:	08011239 	.word	0x08011239
 80111dc:	08011239 	.word	0x08011239
 80111e0:	08011239 	.word	0x08011239
 80111e4:	08011229 	.word	0x08011229
 80111e8:	08011239 	.word	0x08011239
 80111ec:	08011239 	.word	0x08011239
 80111f0:	08011239 	.word	0x08011239
 80111f4:	08011239 	.word	0x08011239
 80111f8:	08011239 	.word	0x08011239
 80111fc:	08011239 	.word	0x08011239
 8011200:	08011239 	.word	0x08011239
 8011204:	08011231 	.word	0x08011231
 8011208:	2301      	movs	r3, #1
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e0d6      	b.n	80113be <UART_SetConfig+0x7ae>
 8011210:	2304      	movs	r3, #4
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e0d2      	b.n	80113be <UART_SetConfig+0x7ae>
 8011218:	2308      	movs	r3, #8
 801121a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121e:	e0ce      	b.n	80113be <UART_SetConfig+0x7ae>
 8011220:	2310      	movs	r3, #16
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e0ca      	b.n	80113be <UART_SetConfig+0x7ae>
 8011228:	2320      	movs	r3, #32
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e0c6      	b.n	80113be <UART_SetConfig+0x7ae>
 8011230:	2340      	movs	r3, #64	; 0x40
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e0c2      	b.n	80113be <UART_SetConfig+0x7ae>
 8011238:	2380      	movs	r3, #128	; 0x80
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e0be      	b.n	80113be <UART_SetConfig+0x7ae>
 8011240:	40011400 	.word	0x40011400
 8011244:	58024400 	.word	0x58024400
 8011248:	40007800 	.word	0x40007800
 801124c:	40007c00 	.word	0x40007c00
 8011250:	40011800 	.word	0x40011800
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	4aad      	ldr	r2, [pc, #692]	; (8011510 <UART_SetConfig+0x900>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d176      	bne.n	801134c <UART_SetConfig+0x73c>
 801125e:	4bad      	ldr	r3, [pc, #692]	; (8011514 <UART_SetConfig+0x904>)
 8011260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011266:	2b28      	cmp	r3, #40	; 0x28
 8011268:	d86c      	bhi.n	8011344 <UART_SetConfig+0x734>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <UART_SetConfig+0x660>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	08011315 	.word	0x08011315
 8011274:	08011345 	.word	0x08011345
 8011278:	08011345 	.word	0x08011345
 801127c:	08011345 	.word	0x08011345
 8011280:	08011345 	.word	0x08011345
 8011284:	08011345 	.word	0x08011345
 8011288:	08011345 	.word	0x08011345
 801128c:	08011345 	.word	0x08011345
 8011290:	0801131d 	.word	0x0801131d
 8011294:	08011345 	.word	0x08011345
 8011298:	08011345 	.word	0x08011345
 801129c:	08011345 	.word	0x08011345
 80112a0:	08011345 	.word	0x08011345
 80112a4:	08011345 	.word	0x08011345
 80112a8:	08011345 	.word	0x08011345
 80112ac:	08011345 	.word	0x08011345
 80112b0:	08011325 	.word	0x08011325
 80112b4:	08011345 	.word	0x08011345
 80112b8:	08011345 	.word	0x08011345
 80112bc:	08011345 	.word	0x08011345
 80112c0:	08011345 	.word	0x08011345
 80112c4:	08011345 	.word	0x08011345
 80112c8:	08011345 	.word	0x08011345
 80112cc:	08011345 	.word	0x08011345
 80112d0:	0801132d 	.word	0x0801132d
 80112d4:	08011345 	.word	0x08011345
 80112d8:	08011345 	.word	0x08011345
 80112dc:	08011345 	.word	0x08011345
 80112e0:	08011345 	.word	0x08011345
 80112e4:	08011345 	.word	0x08011345
 80112e8:	08011345 	.word	0x08011345
 80112ec:	08011345 	.word	0x08011345
 80112f0:	08011335 	.word	0x08011335
 80112f4:	08011345 	.word	0x08011345
 80112f8:	08011345 	.word	0x08011345
 80112fc:	08011345 	.word	0x08011345
 8011300:	08011345 	.word	0x08011345
 8011304:	08011345 	.word	0x08011345
 8011308:	08011345 	.word	0x08011345
 801130c:	08011345 	.word	0x08011345
 8011310:	0801133d 	.word	0x0801133d
 8011314:	2301      	movs	r3, #1
 8011316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131a:	e050      	b.n	80113be <UART_SetConfig+0x7ae>
 801131c:	2304      	movs	r3, #4
 801131e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011322:	e04c      	b.n	80113be <UART_SetConfig+0x7ae>
 8011324:	2308      	movs	r3, #8
 8011326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132a:	e048      	b.n	80113be <UART_SetConfig+0x7ae>
 801132c:	2310      	movs	r3, #16
 801132e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011332:	e044      	b.n	80113be <UART_SetConfig+0x7ae>
 8011334:	2320      	movs	r3, #32
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e040      	b.n	80113be <UART_SetConfig+0x7ae>
 801133c:	2340      	movs	r3, #64	; 0x40
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e03c      	b.n	80113be <UART_SetConfig+0x7ae>
 8011344:	2380      	movs	r3, #128	; 0x80
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e038      	b.n	80113be <UART_SetConfig+0x7ae>
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4a71      	ldr	r2, [pc, #452]	; (8011518 <UART_SetConfig+0x908>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d130      	bne.n	80113b8 <UART_SetConfig+0x7a8>
 8011356:	4b6f      	ldr	r3, [pc, #444]	; (8011514 <UART_SetConfig+0x904>)
 8011358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801135a:	f003 0307 	and.w	r3, r3, #7
 801135e:	2b05      	cmp	r3, #5
 8011360:	d826      	bhi.n	80113b0 <UART_SetConfig+0x7a0>
 8011362:	a201      	add	r2, pc, #4	; (adr r2, 8011368 <UART_SetConfig+0x758>)
 8011364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011368:	08011381 	.word	0x08011381
 801136c:	08011389 	.word	0x08011389
 8011370:	08011391 	.word	0x08011391
 8011374:	08011399 	.word	0x08011399
 8011378:	080113a1 	.word	0x080113a1
 801137c:	080113a9 	.word	0x080113a9
 8011380:	2302      	movs	r3, #2
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011386:	e01a      	b.n	80113be <UART_SetConfig+0x7ae>
 8011388:	2304      	movs	r3, #4
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138e:	e016      	b.n	80113be <UART_SetConfig+0x7ae>
 8011390:	2308      	movs	r3, #8
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e012      	b.n	80113be <UART_SetConfig+0x7ae>
 8011398:	2310      	movs	r3, #16
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e00e      	b.n	80113be <UART_SetConfig+0x7ae>
 80113a0:	2320      	movs	r3, #32
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e00a      	b.n	80113be <UART_SetConfig+0x7ae>
 80113a8:	2340      	movs	r3, #64	; 0x40
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e006      	b.n	80113be <UART_SetConfig+0x7ae>
 80113b0:	2380      	movs	r3, #128	; 0x80
 80113b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b6:	e002      	b.n	80113be <UART_SetConfig+0x7ae>
 80113b8:	2380      	movs	r3, #128	; 0x80
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4a55      	ldr	r2, [pc, #340]	; (8011518 <UART_SetConfig+0x908>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	f040 80f8 	bne.w	80115ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113ce:	2b20      	cmp	r3, #32
 80113d0:	dc46      	bgt.n	8011460 <UART_SetConfig+0x850>
 80113d2:	2b02      	cmp	r3, #2
 80113d4:	db75      	blt.n	80114c2 <UART_SetConfig+0x8b2>
 80113d6:	3b02      	subs	r3, #2
 80113d8:	2b1e      	cmp	r3, #30
 80113da:	d872      	bhi.n	80114c2 <UART_SetConfig+0x8b2>
 80113dc:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <UART_SetConfig+0x7d4>)
 80113de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e2:	bf00      	nop
 80113e4:	08011467 	.word	0x08011467
 80113e8:	080114c3 	.word	0x080114c3
 80113ec:	0801146f 	.word	0x0801146f
 80113f0:	080114c3 	.word	0x080114c3
 80113f4:	080114c3 	.word	0x080114c3
 80113f8:	080114c3 	.word	0x080114c3
 80113fc:	0801147f 	.word	0x0801147f
 8011400:	080114c3 	.word	0x080114c3
 8011404:	080114c3 	.word	0x080114c3
 8011408:	080114c3 	.word	0x080114c3
 801140c:	080114c3 	.word	0x080114c3
 8011410:	080114c3 	.word	0x080114c3
 8011414:	080114c3 	.word	0x080114c3
 8011418:	080114c3 	.word	0x080114c3
 801141c:	0801148f 	.word	0x0801148f
 8011420:	080114c3 	.word	0x080114c3
 8011424:	080114c3 	.word	0x080114c3
 8011428:	080114c3 	.word	0x080114c3
 801142c:	080114c3 	.word	0x080114c3
 8011430:	080114c3 	.word	0x080114c3
 8011434:	080114c3 	.word	0x080114c3
 8011438:	080114c3 	.word	0x080114c3
 801143c:	080114c3 	.word	0x080114c3
 8011440:	080114c3 	.word	0x080114c3
 8011444:	080114c3 	.word	0x080114c3
 8011448:	080114c3 	.word	0x080114c3
 801144c:	080114c3 	.word	0x080114c3
 8011450:	080114c3 	.word	0x080114c3
 8011454:	080114c3 	.word	0x080114c3
 8011458:	080114c3 	.word	0x080114c3
 801145c:	080114b5 	.word	0x080114b5
 8011460:	2b40      	cmp	r3, #64	; 0x40
 8011462:	d02a      	beq.n	80114ba <UART_SetConfig+0x8aa>
 8011464:	e02d      	b.n	80114c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011466:	f7fb f86b 	bl	800c540 <HAL_RCCEx_GetD3PCLK1Freq>
 801146a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801146c:	e02f      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011472:	4618      	mov	r0, r3
 8011474:	f7fb f87a 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801147c:	e027      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801147e:	f107 0318 	add.w	r3, r7, #24
 8011482:	4618      	mov	r0, r3
 8011484:	f7fb f9c6 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801148c:	e01f      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801148e:	4b21      	ldr	r3, [pc, #132]	; (8011514 <UART_SetConfig+0x904>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f003 0320 	and.w	r3, r3, #32
 8011496:	2b00      	cmp	r3, #0
 8011498:	d009      	beq.n	80114ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801149a:	4b1e      	ldr	r3, [pc, #120]	; (8011514 <UART_SetConfig+0x904>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	08db      	lsrs	r3, r3, #3
 80114a0:	f003 0303 	and.w	r3, r3, #3
 80114a4:	4a1d      	ldr	r2, [pc, #116]	; (801151c <UART_SetConfig+0x90c>)
 80114a6:	fa22 f303 	lsr.w	r3, r2, r3
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114ac:	e00f      	b.n	80114ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114ae:	4b1b      	ldr	r3, [pc, #108]	; (801151c <UART_SetConfig+0x90c>)
 80114b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b2:	e00c      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114b4:	4b1a      	ldr	r3, [pc, #104]	; (8011520 <UART_SetConfig+0x910>)
 80114b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b8:	e009      	b.n	80114ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c0:	e005      	b.n	80114ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114c2:	2300      	movs	r3, #0
 80114c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 81ee 	beq.w	80118b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114da:	4a12      	ldr	r2, [pc, #72]	; (8011524 <UART_SetConfig+0x914>)
 80114dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114e0:	461a      	mov	r2, r3
 80114e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80114e8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	685a      	ldr	r2, [r3, #4]
 80114ee:	4613      	mov	r3, r2
 80114f0:	005b      	lsls	r3, r3, #1
 80114f2:	4413      	add	r3, r2
 80114f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d305      	bcc.n	8011506 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011502:	429a      	cmp	r2, r3
 8011504:	d910      	bls.n	8011528 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011506:	2301      	movs	r3, #1
 8011508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801150c:	e1d1      	b.n	80118b2 <UART_SetConfig+0xca2>
 801150e:	bf00      	nop
 8011510:	40011c00 	.word	0x40011c00
 8011514:	58024400 	.word	0x58024400
 8011518:	58000c00 	.word	0x58000c00
 801151c:	03d09000 	.word	0x03d09000
 8011520:	003d0900 	.word	0x003d0900
 8011524:	08018590 	.word	0x08018590
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801152a:	2200      	movs	r2, #0
 801152c:	60bb      	str	r3, [r7, #8]
 801152e:	60fa      	str	r2, [r7, #12]
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011534:	4ac0      	ldr	r2, [pc, #768]	; (8011838 <UART_SetConfig+0xc28>)
 8011536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801153a:	b29b      	uxth	r3, r3
 801153c:	2200      	movs	r2, #0
 801153e:	603b      	str	r3, [r7, #0]
 8011540:	607a      	str	r2, [r7, #4]
 8011542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801154a:	f7ee ff49 	bl	80003e0 <__aeabi_uldivmod>
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	4610      	mov	r0, r2
 8011554:	4619      	mov	r1, r3
 8011556:	f04f 0200 	mov.w	r2, #0
 801155a:	f04f 0300 	mov.w	r3, #0
 801155e:	020b      	lsls	r3, r1, #8
 8011560:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011564:	0202      	lsls	r2, r0, #8
 8011566:	6979      	ldr	r1, [r7, #20]
 8011568:	6849      	ldr	r1, [r1, #4]
 801156a:	0849      	lsrs	r1, r1, #1
 801156c:	2000      	movs	r0, #0
 801156e:	460c      	mov	r4, r1
 8011570:	4605      	mov	r5, r0
 8011572:	eb12 0804 	adds.w	r8, r2, r4
 8011576:	eb43 0905 	adc.w	r9, r3, r5
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	469a      	mov	sl, r3
 8011582:	4693      	mov	fp, r2
 8011584:	4652      	mov	r2, sl
 8011586:	465b      	mov	r3, fp
 8011588:	4640      	mov	r0, r8
 801158a:	4649      	mov	r1, r9
 801158c:	f7ee ff28 	bl	80003e0 <__aeabi_uldivmod>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4613      	mov	r3, r2
 8011596:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801159e:	d308      	bcc.n	80115b2 <UART_SetConfig+0x9a2>
 80115a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115a6:	d204      	bcs.n	80115b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ae:	60da      	str	r2, [r3, #12]
 80115b0:	e17f      	b.n	80118b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80115b2:	2301      	movs	r3, #1
 80115b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115b8:	e17b      	b.n	80118b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	69db      	ldr	r3, [r3, #28]
 80115be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115c2:	f040 80bd 	bne.w	8011740 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80115c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115ca:	2b20      	cmp	r3, #32
 80115cc:	dc48      	bgt.n	8011660 <UART_SetConfig+0xa50>
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	db7b      	blt.n	80116ca <UART_SetConfig+0xaba>
 80115d2:	2b20      	cmp	r3, #32
 80115d4:	d879      	bhi.n	80116ca <UART_SetConfig+0xaba>
 80115d6:	a201      	add	r2, pc, #4	; (adr r2, 80115dc <UART_SetConfig+0x9cc>)
 80115d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115dc:	08011667 	.word	0x08011667
 80115e0:	0801166f 	.word	0x0801166f
 80115e4:	080116cb 	.word	0x080116cb
 80115e8:	080116cb 	.word	0x080116cb
 80115ec:	08011677 	.word	0x08011677
 80115f0:	080116cb 	.word	0x080116cb
 80115f4:	080116cb 	.word	0x080116cb
 80115f8:	080116cb 	.word	0x080116cb
 80115fc:	08011687 	.word	0x08011687
 8011600:	080116cb 	.word	0x080116cb
 8011604:	080116cb 	.word	0x080116cb
 8011608:	080116cb 	.word	0x080116cb
 801160c:	080116cb 	.word	0x080116cb
 8011610:	080116cb 	.word	0x080116cb
 8011614:	080116cb 	.word	0x080116cb
 8011618:	080116cb 	.word	0x080116cb
 801161c:	08011697 	.word	0x08011697
 8011620:	080116cb 	.word	0x080116cb
 8011624:	080116cb 	.word	0x080116cb
 8011628:	080116cb 	.word	0x080116cb
 801162c:	080116cb 	.word	0x080116cb
 8011630:	080116cb 	.word	0x080116cb
 8011634:	080116cb 	.word	0x080116cb
 8011638:	080116cb 	.word	0x080116cb
 801163c:	080116cb 	.word	0x080116cb
 8011640:	080116cb 	.word	0x080116cb
 8011644:	080116cb 	.word	0x080116cb
 8011648:	080116cb 	.word	0x080116cb
 801164c:	080116cb 	.word	0x080116cb
 8011650:	080116cb 	.word	0x080116cb
 8011654:	080116cb 	.word	0x080116cb
 8011658:	080116cb 	.word	0x080116cb
 801165c:	080116bd 	.word	0x080116bd
 8011660:	2b40      	cmp	r3, #64	; 0x40
 8011662:	d02e      	beq.n	80116c2 <UART_SetConfig+0xab2>
 8011664:	e031      	b.n	80116ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011666:	f7f9 f8cd 	bl	800a804 <HAL_RCC_GetPCLK1Freq>
 801166a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801166c:	e033      	b.n	80116d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801166e:	f7f9 f8df 	bl	800a830 <HAL_RCC_GetPCLK2Freq>
 8011672:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011674:	e02f      	b.n	80116d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801167a:	4618      	mov	r0, r3
 801167c:	f7fa ff76 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011684:	e027      	b.n	80116d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011686:	f107 0318 	add.w	r3, r7, #24
 801168a:	4618      	mov	r0, r3
 801168c:	f7fb f8c2 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011694:	e01f      	b.n	80116d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011696:	4b69      	ldr	r3, [pc, #420]	; (801183c <UART_SetConfig+0xc2c>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f003 0320 	and.w	r3, r3, #32
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d009      	beq.n	80116b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116a2:	4b66      	ldr	r3, [pc, #408]	; (801183c <UART_SetConfig+0xc2c>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	08db      	lsrs	r3, r3, #3
 80116a8:	f003 0303 	and.w	r3, r3, #3
 80116ac:	4a64      	ldr	r2, [pc, #400]	; (8011840 <UART_SetConfig+0xc30>)
 80116ae:	fa22 f303 	lsr.w	r3, r2, r3
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116b4:	e00f      	b.n	80116d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116b6:	4b62      	ldr	r3, [pc, #392]	; (8011840 <UART_SetConfig+0xc30>)
 80116b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116ba:	e00c      	b.n	80116d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116bc:	4b61      	ldr	r3, [pc, #388]	; (8011844 <UART_SetConfig+0xc34>)
 80116be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c0:	e009      	b.n	80116d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c8:	e005      	b.n	80116d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80116ca:	2300      	movs	r3, #0
 80116cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f000 80ea 	beq.w	80118b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e2:	4a55      	ldr	r2, [pc, #340]	; (8011838 <UART_SetConfig+0xc28>)
 80116e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116e8:	461a      	mov	r2, r3
 80116ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80116f0:	005a      	lsls	r2, r3, #1
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	085b      	lsrs	r3, r3, #1
 80116f8:	441a      	add	r2, r3
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011702:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011706:	2b0f      	cmp	r3, #15
 8011708:	d916      	bls.n	8011738 <UART_SetConfig+0xb28>
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011710:	d212      	bcs.n	8011738 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	b29b      	uxth	r3, r3
 8011716:	f023 030f 	bic.w	r3, r3, #15
 801171a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801171c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171e:	085b      	lsrs	r3, r3, #1
 8011720:	b29b      	uxth	r3, r3
 8011722:	f003 0307 	and.w	r3, r3, #7
 8011726:	b29a      	uxth	r2, r3
 8011728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801172a:	4313      	orrs	r3, r2
 801172c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011734:	60da      	str	r2, [r3, #12]
 8011736:	e0bc      	b.n	80118b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011738:	2301      	movs	r3, #1
 801173a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801173e:	e0b8      	b.n	80118b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011740:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011744:	2b20      	cmp	r3, #32
 8011746:	dc4b      	bgt.n	80117e0 <UART_SetConfig+0xbd0>
 8011748:	2b00      	cmp	r3, #0
 801174a:	f2c0 8087 	blt.w	801185c <UART_SetConfig+0xc4c>
 801174e:	2b20      	cmp	r3, #32
 8011750:	f200 8084 	bhi.w	801185c <UART_SetConfig+0xc4c>
 8011754:	a201      	add	r2, pc, #4	; (adr r2, 801175c <UART_SetConfig+0xb4c>)
 8011756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175a:	bf00      	nop
 801175c:	080117e7 	.word	0x080117e7
 8011760:	080117ef 	.word	0x080117ef
 8011764:	0801185d 	.word	0x0801185d
 8011768:	0801185d 	.word	0x0801185d
 801176c:	080117f7 	.word	0x080117f7
 8011770:	0801185d 	.word	0x0801185d
 8011774:	0801185d 	.word	0x0801185d
 8011778:	0801185d 	.word	0x0801185d
 801177c:	08011807 	.word	0x08011807
 8011780:	0801185d 	.word	0x0801185d
 8011784:	0801185d 	.word	0x0801185d
 8011788:	0801185d 	.word	0x0801185d
 801178c:	0801185d 	.word	0x0801185d
 8011790:	0801185d 	.word	0x0801185d
 8011794:	0801185d 	.word	0x0801185d
 8011798:	0801185d 	.word	0x0801185d
 801179c:	08011817 	.word	0x08011817
 80117a0:	0801185d 	.word	0x0801185d
 80117a4:	0801185d 	.word	0x0801185d
 80117a8:	0801185d 	.word	0x0801185d
 80117ac:	0801185d 	.word	0x0801185d
 80117b0:	0801185d 	.word	0x0801185d
 80117b4:	0801185d 	.word	0x0801185d
 80117b8:	0801185d 	.word	0x0801185d
 80117bc:	0801185d 	.word	0x0801185d
 80117c0:	0801185d 	.word	0x0801185d
 80117c4:	0801185d 	.word	0x0801185d
 80117c8:	0801185d 	.word	0x0801185d
 80117cc:	0801185d 	.word	0x0801185d
 80117d0:	0801185d 	.word	0x0801185d
 80117d4:	0801185d 	.word	0x0801185d
 80117d8:	0801185d 	.word	0x0801185d
 80117dc:	0801184f 	.word	0x0801184f
 80117e0:	2b40      	cmp	r3, #64	; 0x40
 80117e2:	d037      	beq.n	8011854 <UART_SetConfig+0xc44>
 80117e4:	e03a      	b.n	801185c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117e6:	f7f9 f80d 	bl	800a804 <HAL_RCC_GetPCLK1Freq>
 80117ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117ec:	e03c      	b.n	8011868 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117ee:	f7f9 f81f 	bl	800a830 <HAL_RCC_GetPCLK2Freq>
 80117f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117f4:	e038      	b.n	8011868 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fa feb6 	bl	800c56c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011804:	e030      	b.n	8011868 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011806:	f107 0318 	add.w	r3, r7, #24
 801180a:	4618      	mov	r0, r3
 801180c:	f7fb f802 	bl	800c814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011814:	e028      	b.n	8011868 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011816:	4b09      	ldr	r3, [pc, #36]	; (801183c <UART_SetConfig+0xc2c>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f003 0320 	and.w	r3, r3, #32
 801181e:	2b00      	cmp	r3, #0
 8011820:	d012      	beq.n	8011848 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011822:	4b06      	ldr	r3, [pc, #24]	; (801183c <UART_SetConfig+0xc2c>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	08db      	lsrs	r3, r3, #3
 8011828:	f003 0303 	and.w	r3, r3, #3
 801182c:	4a04      	ldr	r2, [pc, #16]	; (8011840 <UART_SetConfig+0xc30>)
 801182e:	fa22 f303 	lsr.w	r3, r2, r3
 8011832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011834:	e018      	b.n	8011868 <UART_SetConfig+0xc58>
 8011836:	bf00      	nop
 8011838:	08018590 	.word	0x08018590
 801183c:	58024400 	.word	0x58024400
 8011840:	03d09000 	.word	0x03d09000
 8011844:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011848:	4b24      	ldr	r3, [pc, #144]	; (80118dc <UART_SetConfig+0xccc>)
 801184a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801184c:	e00c      	b.n	8011868 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801184e:	4b24      	ldr	r3, [pc, #144]	; (80118e0 <UART_SetConfig+0xcd0>)
 8011850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011852:	e009      	b.n	8011868 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801185a:	e005      	b.n	8011868 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801185c:	2300      	movs	r3, #0
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011866:	bf00      	nop
    }

    if (pclk != 0U)
 8011868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801186a:	2b00      	cmp	r3, #0
 801186c:	d021      	beq.n	80118b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011872:	4a1c      	ldr	r2, [pc, #112]	; (80118e4 <UART_SetConfig+0xcd4>)
 8011874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011878:	461a      	mov	r2, r3
 801187a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801187c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	085b      	lsrs	r3, r3, #1
 8011886:	441a      	add	r2, r3
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011890:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011894:	2b0f      	cmp	r3, #15
 8011896:	d909      	bls.n	80118ac <UART_SetConfig+0xc9c>
 8011898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801189e:	d205      	bcs.n	80118ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	60da      	str	r2, [r3, #12]
 80118aa:	e002      	b.n	80118b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80118ac:	2301      	movs	r3, #1
 80118ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	2201      	movs	r2, #1
 80118b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2201      	movs	r2, #1
 80118be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2200      	movs	r2, #0
 80118c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	2200      	movs	r2, #0
 80118cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80118ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3748      	adds	r7, #72	; 0x48
 80118d6:	46bd      	mov	sp, r7
 80118d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118dc:	03d09000 	.word	0x03d09000
 80118e0:	003d0900 	.word	0x003d0900
 80118e4:	08018590 	.word	0x08018590

080118e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f4:	f003 0301 	and.w	r3, r3, #1
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00a      	beq.n	8011912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	430a      	orrs	r2, r1
 8011910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011916:	f003 0302 	and.w	r3, r3, #2
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00a      	beq.n	8011934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	430a      	orrs	r2, r1
 8011932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011938:	f003 0304 	and.w	r3, r3, #4
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00a      	beq.n	8011956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	430a      	orrs	r2, r1
 8011954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801195a:	f003 0308 	and.w	r3, r3, #8
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00a      	beq.n	8011978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	430a      	orrs	r2, r1
 8011976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801197c:	f003 0310 	and.w	r3, r3, #16
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00a      	beq.n	801199a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	689b      	ldr	r3, [r3, #8]
 801198a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	430a      	orrs	r2, r1
 8011998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199e:	f003 0320 	and.w	r3, r3, #32
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d00a      	beq.n	80119bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	430a      	orrs	r2, r1
 80119ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d01a      	beq.n	80119fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	430a      	orrs	r2, r1
 80119dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119e6:	d10a      	bne.n	80119fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	430a      	orrs	r2, r1
 80119fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00a      	beq.n	8011a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	430a      	orrs	r2, r1
 8011a1e:	605a      	str	r2, [r3, #4]
  }
}
 8011a20:	bf00      	nop
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr

08011a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b098      	sub	sp, #96	; 0x60
 8011a30:	af02      	add	r7, sp, #8
 8011a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a3c:	f7f2 f822 	bl	8003a84 <HAL_GetTick>
 8011a40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f003 0308 	and.w	r3, r3, #8
 8011a4c:	2b08      	cmp	r3, #8
 8011a4e:	d12f      	bne.n	8011ab0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 f88e 	bl	8011b80 <UART_WaitOnFlagUntilTimeout>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d022      	beq.n	8011ab0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a72:	e853 3f00 	ldrex	r3, [r3]
 8011a76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	461a      	mov	r2, r3
 8011a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a88:	647b      	str	r3, [r7, #68]	; 0x44
 8011a8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a90:	e841 2300 	strex	r3, r2, [r1]
 8011a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1e6      	bne.n	8011a6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2220      	movs	r2, #32
 8011aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011aac:	2303      	movs	r3, #3
 8011aae:	e063      	b.n	8011b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f003 0304 	and.w	r3, r3, #4
 8011aba:	2b04      	cmp	r3, #4
 8011abc:	d149      	bne.n	8011b52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011abe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ac2:	9300      	str	r3, [sp, #0]
 8011ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f000 f857 	bl	8011b80 <UART_WaitOnFlagUntilTimeout>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d03c      	beq.n	8011b52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	e853 3f00 	ldrex	r3, [r3]
 8011ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	461a      	mov	r2, r3
 8011af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011af6:	633b      	str	r3, [r7, #48]	; 0x30
 8011af8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011afe:	e841 2300 	strex	r3, r2, [r1]
 8011b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1e6      	bne.n	8011ad8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	3308      	adds	r3, #8
 8011b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	e853 3f00 	ldrex	r3, [r3]
 8011b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f023 0301 	bic.w	r3, r3, #1
 8011b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	3308      	adds	r3, #8
 8011b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b2a:	61fa      	str	r2, [r7, #28]
 8011b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b2e:	69b9      	ldr	r1, [r7, #24]
 8011b30:	69fa      	ldr	r2, [r7, #28]
 8011b32:	e841 2300 	strex	r3, r2, [r1]
 8011b36:	617b      	str	r3, [r7, #20]
   return(result);
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1e5      	bne.n	8011b0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2220      	movs	r2, #32
 8011b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	e012      	b.n	8011b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2220      	movs	r2, #32
 8011b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2220      	movs	r2, #32
 8011b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2200      	movs	r2, #0
 8011b72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3758      	adds	r7, #88	; 0x58
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	603b      	str	r3, [r7, #0]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b90:	e049      	b.n	8011c26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b98:	d045      	beq.n	8011c26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b9a:	f7f1 ff73 	bl	8003a84 <HAL_GetTick>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d302      	bcc.n	8011bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d101      	bne.n	8011bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	e048      	b.n	8011c46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f003 0304 	and.w	r3, r3, #4
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d031      	beq.n	8011c26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	69db      	ldr	r3, [r3, #28]
 8011bc8:	f003 0308 	and.w	r3, r3, #8
 8011bcc:	2b08      	cmp	r3, #8
 8011bce:	d110      	bne.n	8011bf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2208      	movs	r2, #8
 8011bd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f000 f839 	bl	8011c50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2208      	movs	r2, #8
 8011be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	e029      	b.n	8011c46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	69db      	ldr	r3, [r3, #28]
 8011bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c00:	d111      	bne.n	8011c26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c0c:	68f8      	ldr	r0, [r7, #12]
 8011c0e:	f000 f81f 	bl	8011c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2220      	movs	r2, #32
 8011c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c22:	2303      	movs	r3, #3
 8011c24:	e00f      	b.n	8011c46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	69da      	ldr	r2, [r3, #28]
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	4013      	ands	r3, r2
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	bf0c      	ite	eq
 8011c36:	2301      	moveq	r3, #1
 8011c38:	2300      	movne	r3, #0
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	79fb      	ldrb	r3, [r7, #7]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d0a6      	beq.n	8011b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3710      	adds	r7, #16
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
	...

08011c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b095      	sub	sp, #84	; 0x54
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c60:	e853 3f00 	ldrex	r3, [r3]
 8011c64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	461a      	mov	r2, r3
 8011c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c76:	643b      	str	r3, [r7, #64]	; 0x40
 8011c78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c7e:	e841 2300 	strex	r3, r2, [r1]
 8011c82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1e6      	bne.n	8011c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	3308      	adds	r3, #8
 8011c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c92:	6a3b      	ldr	r3, [r7, #32]
 8011c94:	e853 3f00 	ldrex	r3, [r3]
 8011c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c9a:	69fa      	ldr	r2, [r7, #28]
 8011c9c:	4b1e      	ldr	r3, [pc, #120]	; (8011d18 <UART_EndRxTransfer+0xc8>)
 8011c9e:	4013      	ands	r3, r2
 8011ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	3308      	adds	r3, #8
 8011ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011cac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cb2:	e841 2300 	strex	r3, r2, [r1]
 8011cb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1e5      	bne.n	8011c8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d118      	bne.n	8011cf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	e853 3f00 	ldrex	r3, [r3]
 8011cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	f023 0310 	bic.w	r3, r3, #16
 8011cda:	647b      	str	r3, [r7, #68]	; 0x44
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ce4:	61bb      	str	r3, [r7, #24]
 8011ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce8:	6979      	ldr	r1, [r7, #20]
 8011cea:	69ba      	ldr	r2, [r7, #24]
 8011cec:	e841 2300 	strex	r3, r2, [r1]
 8011cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1e6      	bne.n	8011cc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2220      	movs	r2, #32
 8011cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d0c:	bf00      	nop
 8011d0e:	3754      	adds	r7, #84	; 0x54
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	effffffe 	.word	0xeffffffe

08011d1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d101      	bne.n	8011d32 <HAL_UARTEx_DisableFifoMode+0x16>
 8011d2e:	2302      	movs	r3, #2
 8011d30:	e027      	b.n	8011d82 <HAL_UARTEx_DisableFifoMode+0x66>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2224      	movs	r2, #36	; 0x24
 8011d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f022 0201 	bic.w	r2, r2, #1
 8011d58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2200      	movs	r2, #0
 8011d66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	68fa      	ldr	r2, [r7, #12]
 8011d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2220      	movs	r2, #32
 8011d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d80:	2300      	movs	r3, #0
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3714      	adds	r7, #20
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr

08011d8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b084      	sub	sp, #16
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
 8011d96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d101      	bne.n	8011da6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011da2:	2302      	movs	r3, #2
 8011da4:	e02d      	b.n	8011e02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2201      	movs	r2, #1
 8011daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2224      	movs	r2, #36	; 0x24
 8011db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f022 0201 	bic.w	r2, r2, #1
 8011dcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	430a      	orrs	r2, r1
 8011de0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 f850 	bl	8011e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2220      	movs	r2, #32
 8011df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b084      	sub	sp, #16
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d101      	bne.n	8011e22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e1e:	2302      	movs	r3, #2
 8011e20:	e02d      	b.n	8011e7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2201      	movs	r2, #1
 8011e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2224      	movs	r2, #36	; 0x24
 8011e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f022 0201 	bic.w	r2, r2, #1
 8011e48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	430a      	orrs	r2, r1
 8011e5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 f812 	bl	8011e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2220      	movs	r2, #32
 8011e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
	...

08011e88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d108      	bne.n	8011eaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ea8:	e031      	b.n	8011f0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011eaa:	2310      	movs	r3, #16
 8011eac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011eae:	2310      	movs	r3, #16
 8011eb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	0e5b      	lsrs	r3, r3, #25
 8011eba:	b2db      	uxtb	r3, r3
 8011ebc:	f003 0307 	and.w	r3, r3, #7
 8011ec0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	0f5b      	lsrs	r3, r3, #29
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	f003 0307 	and.w	r3, r3, #7
 8011ed0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ed2:	7bbb      	ldrb	r3, [r7, #14]
 8011ed4:	7b3a      	ldrb	r2, [r7, #12]
 8011ed6:	4911      	ldr	r1, [pc, #68]	; (8011f1c <UARTEx_SetNbDataToProcess+0x94>)
 8011ed8:	5c8a      	ldrb	r2, [r1, r2]
 8011eda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011ede:	7b3a      	ldrb	r2, [r7, #12]
 8011ee0:	490f      	ldr	r1, [pc, #60]	; (8011f20 <UARTEx_SetNbDataToProcess+0x98>)
 8011ee2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
 8011ef2:	7b7a      	ldrb	r2, [r7, #13]
 8011ef4:	4909      	ldr	r1, [pc, #36]	; (8011f1c <UARTEx_SetNbDataToProcess+0x94>)
 8011ef6:	5c8a      	ldrb	r2, [r1, r2]
 8011ef8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011efc:	7b7a      	ldrb	r2, [r7, #13]
 8011efe:	4908      	ldr	r1, [pc, #32]	; (8011f20 <UARTEx_SetNbDataToProcess+0x98>)
 8011f00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f06:	b29a      	uxth	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011f0e:	bf00      	nop
 8011f10:	3714      	adds	r7, #20
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	080185a8 	.word	0x080185a8
 8011f20:	080185b0 	.word	0x080185b0

08011f24 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011f24:	b084      	sub	sp, #16
 8011f26:	b480      	push	{r7}
 8011f28:	b085      	sub	sp, #20
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
 8011f2e:	f107 001c 	add.w	r0, r7, #28
 8011f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f36:	2300      	movs	r3, #0
 8011f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f3e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f46:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	4b07      	ldr	r3, [pc, #28]	; (8011f74 <SDMMC_Init+0x50>)
 8011f58:	4013      	ands	r3, r2
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	431a      	orrs	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	b004      	add	sp, #16
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	ffc02c00 	.word	0xffc02c00

08011f78 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr

08011f92 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011f92:	b480      	push	{r7}
 8011f94:	b083      	sub	sp, #12
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
 8011f9a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	681a      	ldr	r2, [r3, #0]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	370c      	adds	r7, #12
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	4770      	bx	lr

08011fb4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f043 0203 	orr.w	r2, r3, #3
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011fc8:	2300      	movs	r3, #0
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b083      	sub	sp, #12
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f003 0303 	and.w	r3, r3, #3
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	370c      	adds	r7, #12
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
	...

08011ff4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012012:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012018:	431a      	orrs	r2, r3
                       Command->CPSM);
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801201e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012020:	68fa      	ldr	r2, [r7, #12]
 8012022:	4313      	orrs	r3, r2
 8012024:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	68da      	ldr	r2, [r3, #12]
 801202a:	4b06      	ldr	r3, [pc, #24]	; (8012044 <SDMMC_SendCommand+0x50>)
 801202c:	4013      	ands	r3, r2
 801202e:	68fa      	ldr	r2, [r7, #12]
 8012030:	431a      	orrs	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3714      	adds	r7, #20
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr
 8012044:	fffee0c0 	.word	0xfffee0c0

08012048 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	691b      	ldr	r3, [r3, #16]
 8012054:	b2db      	uxtb	r3, r3
}
 8012056:	4618      	mov	r0, r3
 8012058:	370c      	adds	r7, #12
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr

08012062 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012062:	b480      	push	{r7}
 8012064:	b085      	sub	sp, #20
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
 801206a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	3314      	adds	r3, #20
 8012070:	461a      	mov	r2, r3
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	4413      	add	r3, r2
 8012076:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012088:	b480      	push	{r7}
 801208a:	b085      	sub	sp, #20
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	681a      	ldr	r2, [r3, #0]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	685a      	ldr	r2, [r3, #4]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80120b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80120ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	4313      	orrs	r3, r2
 80120c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	431a      	orrs	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80120d2:	2300      	movs	r3, #0

}
 80120d4:	4618      	mov	r0, r3
 80120d6:	3714      	adds	r7, #20
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120ee:	2310      	movs	r3, #16
 80120f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f8:	2300      	movs	r3, #0
 80120fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012102:	f107 0308 	add.w	r3, r7, #8
 8012106:	4619      	mov	r1, r3
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7ff ff73 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012112:	2110      	movs	r1, #16
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 fa5f 	bl	80125d8 <SDMMC_GetCmdResp1>
 801211a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801211c:	69fb      	ldr	r3, [r7, #28]
}
 801211e:	4618      	mov	r0, r3
 8012120:	3720      	adds	r7, #32
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012126:	b580      	push	{r7, lr}
 8012128:	b088      	sub	sp, #32
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
 801212e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012134:	2311      	movs	r3, #17
 8012136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012138:	f44f 7380 	mov.w	r3, #256	; 0x100
 801213c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801213e:	2300      	movs	r3, #0
 8012140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012148:	f107 0308 	add.w	r3, r7, #8
 801214c:	4619      	mov	r1, r3
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff ff50 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012154:	f241 3288 	movw	r2, #5000	; 0x1388
 8012158:	2111      	movs	r1, #17
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fa3c 	bl	80125d8 <SDMMC_GetCmdResp1>
 8012160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012162:	69fb      	ldr	r3, [r7, #28]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3720      	adds	r7, #32
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b088      	sub	sp, #32
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801217a:	2312      	movs	r3, #18
 801217c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801217e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012184:	2300      	movs	r3, #0
 8012186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801218c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801218e:	f107 0308 	add.w	r3, r7, #8
 8012192:	4619      	mov	r1, r3
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7ff ff2d 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801219a:	f241 3288 	movw	r2, #5000	; 0x1388
 801219e:	2112      	movs	r1, #18
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 fa19 	bl	80125d8 <SDMMC_GetCmdResp1>
 80121a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a8:	69fb      	ldr	r3, [r7, #28]
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3720      	adds	r7, #32
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}

080121b2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121b2:	b580      	push	{r7, lr}
 80121b4:	b088      	sub	sp, #32
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
 80121ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80121c0:	2318      	movs	r3, #24
 80121c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121ca:	2300      	movs	r3, #0
 80121cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121d4:	f107 0308 	add.w	r3, r7, #8
 80121d8:	4619      	mov	r1, r3
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7ff ff0a 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80121e4:	2118      	movs	r1, #24
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 f9f6 	bl	80125d8 <SDMMC_GetCmdResp1>
 80121ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121ee:	69fb      	ldr	r3, [r7, #28]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3720      	adds	r7, #32
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b088      	sub	sp, #32
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012206:	2319      	movs	r3, #25
 8012208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801220e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012210:	2300      	movs	r3, #0
 8012212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801221a:	f107 0308 	add.w	r3, r7, #8
 801221e:	4619      	mov	r1, r3
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff fee7 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012226:	f241 3288 	movw	r2, #5000	; 0x1388
 801222a:	2119      	movs	r1, #25
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 f9d3 	bl	80125d8 <SDMMC_GetCmdResp1>
 8012232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012234:	69fb      	ldr	r3, [r7, #28]
}
 8012236:	4618      	mov	r0, r3
 8012238:	3720      	adds	r7, #32
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
	...

08012240 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b088      	sub	sp, #32
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012248:	2300      	movs	r3, #0
 801224a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801224c:	230c      	movs	r3, #12
 801224e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012256:	2300      	movs	r3, #0
 8012258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801225e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012278:	f107 0308 	add.w	r3, r7, #8
 801227c:	4619      	mov	r1, r3
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f7ff feb8 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012284:	4a0b      	ldr	r2, [pc, #44]	; (80122b4 <SDMMC_CmdStopTransfer+0x74>)
 8012286:	210c      	movs	r1, #12
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f9a5 	bl	80125d8 <SDMMC_GetCmdResp1>
 801228e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80122a2:	d101      	bne.n	80122a8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80122a4:	2300      	movs	r3, #0
 80122a6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80122a8:	69fb      	ldr	r3, [r7, #28]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3720      	adds	r7, #32
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	05f5e100 	.word	0x05f5e100

080122b8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b088      	sub	sp, #32
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80122c6:	2307      	movs	r3, #7
 80122c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122d0:	2300      	movs	r3, #0
 80122d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122da:	f107 0308 	add.w	r3, r7, #8
 80122de:	4619      	mov	r1, r3
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff fe87 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80122e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80122ea:	2107      	movs	r1, #7
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f000 f973 	bl	80125d8 <SDMMC_GetCmdResp1>
 80122f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122f4:	69fb      	ldr	r3, [r7, #28]
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3720      	adds	r7, #32
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}

080122fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80122fe:	b580      	push	{r7, lr}
 8012300:	b088      	sub	sp, #32
 8012302:	af00      	add	r7, sp, #0
 8012304:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012306:	2300      	movs	r3, #0
 8012308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801230a:	2300      	movs	r3, #0
 801230c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801230e:	2300      	movs	r3, #0
 8012310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012312:	2300      	movs	r3, #0
 8012314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801231a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801231c:	f107 0308 	add.w	r3, r7, #8
 8012320:	4619      	mov	r1, r3
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7ff fe66 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 fb97 	bl	8012a5c <SDMMC_GetCmdError>
 801232e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012330:	69fb      	ldr	r3, [r7, #28]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3720      	adds	r7, #32
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b088      	sub	sp, #32
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012342:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012348:	2308      	movs	r3, #8
 801234a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801234c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012352:	2300      	movs	r3, #0
 8012354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801235a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801235c:	f107 0308 	add.w	r3, r7, #8
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff fe46 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f000 fb29 	bl	80129c0 <SDMMC_GetCmdResp7>
 801236e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012370:	69fb      	ldr	r3, [r7, #28]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3720      	adds	r7, #32
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b088      	sub	sp, #32
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012388:	2337      	movs	r3, #55	; 0x37
 801238a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012392:	2300      	movs	r3, #0
 8012394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801239a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801239c:	f107 0308 	add.w	r3, r7, #8
 80123a0:	4619      	mov	r1, r3
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f7ff fe26 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80123a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80123ac:	2137      	movs	r1, #55	; 0x37
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 f912 	bl	80125d8 <SDMMC_GetCmdResp1>
 80123b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123b6:	69fb      	ldr	r3, [r7, #28]
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3720      	adds	r7, #32
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80123ce:	2329      	movs	r3, #41	; 0x29
 80123d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123d8:	2300      	movs	r3, #0
 80123da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123e2:	f107 0308 	add.w	r3, r7, #8
 80123e6:	4619      	mov	r1, r3
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f7ff fe03 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f000 fa2e 	bl	8012850 <SDMMC_GetCmdResp3>
 80123f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123f6:	69fb      	ldr	r3, [r7, #28]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3720      	adds	r7, #32
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b088      	sub	sp, #32
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801240e:	2306      	movs	r3, #6
 8012410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012418:	2300      	movs	r3, #0
 801241a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801241c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012422:	f107 0308 	add.w	r3, r7, #8
 8012426:	4619      	mov	r1, r3
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f7ff fde3 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012432:	2106      	movs	r1, #6
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 f8cf 	bl	80125d8 <SDMMC_GetCmdResp1>
 801243a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801243c:	69fb      	ldr	r3, [r7, #28]
}
 801243e:	4618      	mov	r0, r3
 8012440:	3720      	adds	r7, #32
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b088      	sub	sp, #32
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801244e:	2300      	movs	r3, #0
 8012450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012452:	2333      	movs	r3, #51	; 0x33
 8012454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012456:	f44f 7380 	mov.w	r3, #256	; 0x100
 801245a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801245c:	2300      	movs	r3, #0
 801245e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012466:	f107 0308 	add.w	r3, r7, #8
 801246a:	4619      	mov	r1, r3
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff fdc1 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012472:	f241 3288 	movw	r2, #5000	; 0x1388
 8012476:	2133      	movs	r1, #51	; 0x33
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 f8ad 	bl	80125d8 <SDMMC_GetCmdResp1>
 801247e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012480:	69fb      	ldr	r3, [r7, #28]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3720      	adds	r7, #32
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b088      	sub	sp, #32
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012492:	2300      	movs	r3, #0
 8012494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012496:	2302      	movs	r3, #2
 8012498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801249a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801249e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124aa:	f107 0308 	add.w	r3, r7, #8
 80124ae:	4619      	mov	r1, r3
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff fd9f 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f000 f980 	bl	80127bc <SDMMC_GetCmdResp2>
 80124bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124be:	69fb      	ldr	r3, [r7, #28]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3720      	adds	r7, #32
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b088      	sub	sp, #32
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80124d6:	2309      	movs	r3, #9
 80124d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124e0:	2300      	movs	r3, #0
 80124e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124ea:	f107 0308 	add.w	r3, r7, #8
 80124ee:	4619      	mov	r1, r3
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f7ff fd7f 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f960 	bl	80127bc <SDMMC_GetCmdResp2>
 80124fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124fe:	69fb      	ldr	r3, [r7, #28]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3720      	adds	r7, #32
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012512:	2300      	movs	r3, #0
 8012514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012516:	2303      	movs	r3, #3
 8012518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801251a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801251e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012520:	2300      	movs	r3, #0
 8012522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801252a:	f107 0308 	add.w	r3, r7, #8
 801252e:	4619      	mov	r1, r3
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7ff fd5f 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	2103      	movs	r1, #3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f9c8 	bl	80128d0 <SDMMC_GetCmdResp6>
 8012540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012542:	69fb      	ldr	r3, [r7, #28]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3720      	adds	r7, #32
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b088      	sub	sp, #32
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801255a:	230d      	movs	r3, #13
 801255c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801255e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012564:	2300      	movs	r3, #0
 8012566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801256c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801256e:	f107 0308 	add.w	r3, r7, #8
 8012572:	4619      	mov	r1, r3
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff fd3d 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801257a:	f241 3288 	movw	r2, #5000	; 0x1388
 801257e:	210d      	movs	r1, #13
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 f829 	bl	80125d8 <SDMMC_GetCmdResp1>
 8012586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012588:	69fb      	ldr	r3, [r7, #28]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3720      	adds	r7, #32
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b088      	sub	sp, #32
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801259a:	2300      	movs	r3, #0
 801259c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801259e:	230d      	movs	r3, #13
 80125a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125a8:	2300      	movs	r3, #0
 80125aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125b2:	f107 0308 	add.w	r3, r7, #8
 80125b6:	4619      	mov	r1, r3
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7ff fd1b 	bl	8011ff4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80125be:	f241 3288 	movw	r2, #5000	; 0x1388
 80125c2:	210d      	movs	r1, #13
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 f807 	bl	80125d8 <SDMMC_GetCmdResp1>
 80125ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125cc:	69fb      	ldr	r3, [r7, #28]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3720      	adds	r7, #32
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
	...

080125d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b088      	sub	sp, #32
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	460b      	mov	r3, r1
 80125e2:	607a      	str	r2, [r7, #4]
 80125e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80125e6:	4b70      	ldr	r3, [pc, #448]	; (80127a8 <SDMMC_GetCmdResp1+0x1d0>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	4a70      	ldr	r2, [pc, #448]	; (80127ac <SDMMC_GetCmdResp1+0x1d4>)
 80125ec:	fba2 2303 	umull	r2, r3, r2, r3
 80125f0:	0a5a      	lsrs	r2, r3, #9
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	fb02 f303 	mul.w	r3, r2, r3
 80125f8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	1e5a      	subs	r2, r3, #1
 80125fe:	61fa      	str	r2, [r7, #28]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d102      	bne.n	801260a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012608:	e0c9      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012610:	69ba      	ldr	r2, [r7, #24]
 8012612:	4b67      	ldr	r3, [pc, #412]	; (80127b0 <SDMMC_GetCmdResp1+0x1d8>)
 8012614:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012616:	2b00      	cmp	r3, #0
 8012618:	d0ef      	beq.n	80125fa <SDMMC_GetCmdResp1+0x22>
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012620:	2b00      	cmp	r3, #0
 8012622:	d1ea      	bne.n	80125fa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012628:	f003 0304 	and.w	r3, r3, #4
 801262c:	2b00      	cmp	r3, #0
 801262e:	d004      	beq.n	801263a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2204      	movs	r2, #4
 8012634:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012636:	2304      	movs	r3, #4
 8012638:	e0b1      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801263e:	f003 0301 	and.w	r3, r3, #1
 8012642:	2b00      	cmp	r3, #0
 8012644:	d004      	beq.n	8012650 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2201      	movs	r2, #1
 801264a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801264c:	2301      	movs	r3, #1
 801264e:	e0a6      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	4a58      	ldr	r2, [pc, #352]	; (80127b4 <SDMMC_GetCmdResp1+0x1dc>)
 8012654:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012656:	68f8      	ldr	r0, [r7, #12]
 8012658:	f7ff fcf6 	bl	8012048 <SDMMC_GetCommandResponse>
 801265c:	4603      	mov	r3, r0
 801265e:	461a      	mov	r2, r3
 8012660:	7afb      	ldrb	r3, [r7, #11]
 8012662:	4293      	cmp	r3, r2
 8012664:	d001      	beq.n	801266a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012666:	2301      	movs	r3, #1
 8012668:	e099      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801266a:	2100      	movs	r1, #0
 801266c:	68f8      	ldr	r0, [r7, #12]
 801266e:	f7ff fcf8 	bl	8012062 <SDMMC_GetResponse>
 8012672:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012674:	697a      	ldr	r2, [r7, #20]
 8012676:	4b50      	ldr	r3, [pc, #320]	; (80127b8 <SDMMC_GetCmdResp1+0x1e0>)
 8012678:	4013      	ands	r3, r2
 801267a:	2b00      	cmp	r3, #0
 801267c:	d101      	bne.n	8012682 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801267e:	2300      	movs	r3, #0
 8012680:	e08d      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	2b00      	cmp	r3, #0
 8012686:	da02      	bge.n	801268e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801268c:	e087      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012694:	2b00      	cmp	r3, #0
 8012696:	d001      	beq.n	801269c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012698:	2340      	movs	r3, #64	; 0x40
 801269a:	e080      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d001      	beq.n	80126aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80126a6:	2380      	movs	r3, #128	; 0x80
 80126a8:	e079      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126b8:	e071      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d002      	beq.n	80126ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80126c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126c8:	e069      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d002      	beq.n	80126da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126d8:	e061      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d002      	beq.n	80126ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126e8:	e059      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126f8:	e051      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012700:	2b00      	cmp	r3, #0
 8012702:	d002      	beq.n	801270a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012708:	e049      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012710:	2b00      	cmp	r3, #0
 8012712:	d002      	beq.n	801271a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012718:	e041      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012728:	e039      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012738:	e031      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012748:	e029      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012754:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012758:	e021      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012760:	2b00      	cmp	r3, #0
 8012762:	d002      	beq.n	801276a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012768:	e019      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012770:	2b00      	cmp	r3, #0
 8012772:	d002      	beq.n	801277a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012774:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012778:	e011      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012780:	2b00      	cmp	r3, #0
 8012782:	d002      	beq.n	801278a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012788:	e009      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	f003 0308 	and.w	r3, r3, #8
 8012790:	2b00      	cmp	r3, #0
 8012792:	d002      	beq.n	801279a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012794:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012798:	e001      	b.n	801279e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801279a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3720      	adds	r7, #32
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	24000000 	.word	0x24000000
 80127ac:	10624dd3 	.word	0x10624dd3
 80127b0:	00200045 	.word	0x00200045
 80127b4:	002000c5 	.word	0x002000c5
 80127b8:	fdffe008 	.word	0xfdffe008

080127bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80127bc:	b480      	push	{r7}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127c4:	4b1f      	ldr	r3, [pc, #124]	; (8012844 <SDMMC_GetCmdResp2+0x88>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4a1f      	ldr	r2, [pc, #124]	; (8012848 <SDMMC_GetCmdResp2+0x8c>)
 80127ca:	fba2 2303 	umull	r2, r3, r2, r3
 80127ce:	0a5b      	lsrs	r3, r3, #9
 80127d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127d4:	fb02 f303 	mul.w	r3, r2, r3
 80127d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	1e5a      	subs	r2, r3, #1
 80127de:	60fa      	str	r2, [r7, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d102      	bne.n	80127ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127e8:	e026      	b.n	8012838 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0ef      	beq.n	80127da <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1ea      	bne.n	80127da <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012808:	f003 0304 	and.w	r3, r3, #4
 801280c:	2b00      	cmp	r3, #0
 801280e:	d004      	beq.n	801281a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2204      	movs	r2, #4
 8012814:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012816:	2304      	movs	r3, #4
 8012818:	e00e      	b.n	8012838 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	2b00      	cmp	r3, #0
 8012824:	d004      	beq.n	8012830 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2201      	movs	r2, #1
 801282a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801282c:	2301      	movs	r3, #1
 801282e:	e003      	b.n	8012838 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	4a06      	ldr	r2, [pc, #24]	; (801284c <SDMMC_GetCmdResp2+0x90>)
 8012834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3714      	adds	r7, #20
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr
 8012844:	24000000 	.word	0x24000000
 8012848:	10624dd3 	.word	0x10624dd3
 801284c:	002000c5 	.word	0x002000c5

08012850 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012850:	b480      	push	{r7}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012858:	4b1a      	ldr	r3, [pc, #104]	; (80128c4 <SDMMC_GetCmdResp3+0x74>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4a1a      	ldr	r2, [pc, #104]	; (80128c8 <SDMMC_GetCmdResp3+0x78>)
 801285e:	fba2 2303 	umull	r2, r3, r2, r3
 8012862:	0a5b      	lsrs	r3, r3, #9
 8012864:	f241 3288 	movw	r2, #5000	; 0x1388
 8012868:	fb02 f303 	mul.w	r3, r2, r3
 801286c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	1e5a      	subs	r2, r3, #1
 8012872:	60fa      	str	r2, [r7, #12]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d102      	bne.n	801287e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012878:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801287c:	e01b      	b.n	80128b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012882:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801288a:	2b00      	cmp	r3, #0
 801288c:	d0ef      	beq.n	801286e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1ea      	bne.n	801286e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801289c:	f003 0304 	and.w	r3, r3, #4
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d004      	beq.n	80128ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2204      	movs	r2, #4
 80128a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128aa:	2304      	movs	r3, #4
 80128ac:	e003      	b.n	80128b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4a06      	ldr	r2, [pc, #24]	; (80128cc <SDMMC_GetCmdResp3+0x7c>)
 80128b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3714      	adds	r7, #20
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	24000000 	.word	0x24000000
 80128c8:	10624dd3 	.word	0x10624dd3
 80128cc:	002000c5 	.word	0x002000c5

080128d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b088      	sub	sp, #32
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	460b      	mov	r3, r1
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128de:	4b35      	ldr	r3, [pc, #212]	; (80129b4 <SDMMC_GetCmdResp6+0xe4>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a35      	ldr	r2, [pc, #212]	; (80129b8 <SDMMC_GetCmdResp6+0xe8>)
 80128e4:	fba2 2303 	umull	r2, r3, r2, r3
 80128e8:	0a5b      	lsrs	r3, r3, #9
 80128ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80128ee:	fb02 f303 	mul.w	r3, r2, r3
 80128f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	1e5a      	subs	r2, r3, #1
 80128f8:	61fa      	str	r2, [r7, #28]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d102      	bne.n	8012904 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012902:	e052      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012908:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012910:	2b00      	cmp	r3, #0
 8012912:	d0ef      	beq.n	80128f4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801291a:	2b00      	cmp	r3, #0
 801291c:	d1ea      	bne.n	80128f4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012922:	f003 0304 	and.w	r3, r3, #4
 8012926:	2b00      	cmp	r3, #0
 8012928:	d004      	beq.n	8012934 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2204      	movs	r2, #4
 801292e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012930:	2304      	movs	r3, #4
 8012932:	e03a      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012938:	f003 0301 	and.w	r3, r3, #1
 801293c:	2b00      	cmp	r3, #0
 801293e:	d004      	beq.n	801294a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2201      	movs	r2, #1
 8012944:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012946:	2301      	movs	r3, #1
 8012948:	e02f      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f7ff fb7c 	bl	8012048 <SDMMC_GetCommandResponse>
 8012950:	4603      	mov	r3, r0
 8012952:	461a      	mov	r2, r3
 8012954:	7afb      	ldrb	r3, [r7, #11]
 8012956:	4293      	cmp	r3, r2
 8012958:	d001      	beq.n	801295e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801295a:	2301      	movs	r3, #1
 801295c:	e025      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	4a16      	ldr	r2, [pc, #88]	; (80129bc <SDMMC_GetCmdResp6+0xec>)
 8012962:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012964:	2100      	movs	r1, #0
 8012966:	68f8      	ldr	r0, [r7, #12]
 8012968:	f7ff fb7b 	bl	8012062 <SDMMC_GetResponse>
 801296c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012974:	2b00      	cmp	r3, #0
 8012976:	d106      	bne.n	8012986 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	0c1b      	lsrs	r3, r3, #16
 801297c:	b29a      	uxth	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012982:	2300      	movs	r3, #0
 8012984:	e011      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012994:	e009      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80129a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129a4:	e001      	b.n	80129aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80129a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3720      	adds	r7, #32
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	24000000 	.word	0x24000000
 80129b8:	10624dd3 	.word	0x10624dd3
 80129bc:	002000c5 	.word	0x002000c5

080129c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b085      	sub	sp, #20
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129c8:	4b22      	ldr	r3, [pc, #136]	; (8012a54 <SDMMC_GetCmdResp7+0x94>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a22      	ldr	r2, [pc, #136]	; (8012a58 <SDMMC_GetCmdResp7+0x98>)
 80129ce:	fba2 2303 	umull	r2, r3, r2, r3
 80129d2:	0a5b      	lsrs	r3, r3, #9
 80129d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80129d8:	fb02 f303 	mul.w	r3, r2, r3
 80129dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	1e5a      	subs	r2, r3, #1
 80129e2:	60fa      	str	r2, [r7, #12]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d102      	bne.n	80129ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129ec:	e02c      	b.n	8012a48 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d0ef      	beq.n	80129de <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1ea      	bne.n	80129de <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a0c:	f003 0304 	and.w	r3, r3, #4
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d004      	beq.n	8012a1e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2204      	movs	r2, #4
 8012a18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a1a:	2304      	movs	r3, #4
 8012a1c:	e014      	b.n	8012a48 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a22:	f003 0301 	and.w	r3, r3, #1
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d004      	beq.n	8012a34 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a30:	2301      	movs	r3, #1
 8012a32:	e009      	b.n	8012a48 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d002      	beq.n	8012a46 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2240      	movs	r2, #64	; 0x40
 8012a44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a46:	2300      	movs	r3, #0

}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3714      	adds	r7, #20
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr
 8012a54:	24000000 	.word	0x24000000
 8012a58:	10624dd3 	.word	0x10624dd3

08012a5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b085      	sub	sp, #20
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a64:	4b11      	ldr	r3, [pc, #68]	; (8012aac <SDMMC_GetCmdError+0x50>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4a11      	ldr	r2, [pc, #68]	; (8012ab0 <SDMMC_GetCmdError+0x54>)
 8012a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a6e:	0a5b      	lsrs	r3, r3, #9
 8012a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a74:	fb02 f303 	mul.w	r3, r2, r3
 8012a78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	1e5a      	subs	r2, r3, #1
 8012a7e:	60fa      	str	r2, [r7, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d102      	bne.n	8012a8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a88:	e009      	b.n	8012a9e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d0f1      	beq.n	8012a7a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4a06      	ldr	r2, [pc, #24]	; (8012ab4 <SDMMC_GetCmdError+0x58>)
 8012a9a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012a9c:	2300      	movs	r3, #0
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3714      	adds	r7, #20
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	24000000 	.word	0x24000000
 8012ab0:	10624dd3 	.word	0x10624dd3
 8012ab4:	002000c5 	.word	0x002000c5

08012ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ab8:	b084      	sub	sp, #16
 8012aba:	b580      	push	{r7, lr}
 8012abc:	b084      	sub	sp, #16
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
 8012ac2:	f107 001c 	add.w	r0, r7, #28
 8012ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d120      	bne.n	8012b12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	68da      	ldr	r2, [r3, #12]
 8012ae0:	4b2a      	ldr	r3, [pc, #168]	; (8012b8c <USB_CoreInit+0xd4>)
 8012ae2:	4013      	ands	r3, r2
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d105      	bne.n	8012b06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f001 faf8 	bl	80140fc <USB_CoreReset>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	73fb      	strb	r3, [r7, #15]
 8012b10:	e01a      	b.n	8012b48 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f001 faec 	bl	80140fc <USB_CoreReset>
 8012b24:	4603      	mov	r3, r0
 8012b26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	639a      	str	r2, [r3, #56]	; 0x38
 8012b3a:	e005      	b.n	8012b48 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d116      	bne.n	8012b7c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b5c:	4b0c      	ldr	r3, [pc, #48]	; (8012b90 <USB_CoreInit+0xd8>)
 8012b5e:	4313      	orrs	r3, r2
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	f043 0206 	orr.w	r2, r3, #6
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	f043 0220 	orr.w	r2, r3, #32
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b88:	b004      	add	sp, #16
 8012b8a:	4770      	bx	lr
 8012b8c:	ffbdffbf 	.word	0xffbdffbf
 8012b90:	03ee0000 	.word	0x03ee0000

08012b94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b94:	b480      	push	{r7}
 8012b96:	b087      	sub	sp, #28
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012ba2:	79fb      	ldrb	r3, [r7, #7]
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d165      	bne.n	8012c74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	4a41      	ldr	r2, [pc, #260]	; (8012cb0 <USB_SetTurnaroundTime+0x11c>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d906      	bls.n	8012bbe <USB_SetTurnaroundTime+0x2a>
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	4a40      	ldr	r2, [pc, #256]	; (8012cb4 <USB_SetTurnaroundTime+0x120>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d202      	bcs.n	8012bbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012bb8:	230f      	movs	r3, #15
 8012bba:	617b      	str	r3, [r7, #20]
 8012bbc:	e062      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	4a3c      	ldr	r2, [pc, #240]	; (8012cb4 <USB_SetTurnaroundTime+0x120>)
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d306      	bcc.n	8012bd4 <USB_SetTurnaroundTime+0x40>
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	4a3b      	ldr	r2, [pc, #236]	; (8012cb8 <USB_SetTurnaroundTime+0x124>)
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d202      	bcs.n	8012bd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012bce:	230e      	movs	r3, #14
 8012bd0:	617b      	str	r3, [r7, #20]
 8012bd2:	e057      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	4a38      	ldr	r2, [pc, #224]	; (8012cb8 <USB_SetTurnaroundTime+0x124>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d306      	bcc.n	8012bea <USB_SetTurnaroundTime+0x56>
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	4a37      	ldr	r2, [pc, #220]	; (8012cbc <USB_SetTurnaroundTime+0x128>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d202      	bcs.n	8012bea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012be4:	230d      	movs	r3, #13
 8012be6:	617b      	str	r3, [r7, #20]
 8012be8:	e04c      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	4a33      	ldr	r2, [pc, #204]	; (8012cbc <USB_SetTurnaroundTime+0x128>)
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	d306      	bcc.n	8012c00 <USB_SetTurnaroundTime+0x6c>
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	4a32      	ldr	r2, [pc, #200]	; (8012cc0 <USB_SetTurnaroundTime+0x12c>)
 8012bf6:	4293      	cmp	r3, r2
 8012bf8:	d802      	bhi.n	8012c00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012bfa:	230c      	movs	r3, #12
 8012bfc:	617b      	str	r3, [r7, #20]
 8012bfe:	e041      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	4a2f      	ldr	r2, [pc, #188]	; (8012cc0 <USB_SetTurnaroundTime+0x12c>)
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d906      	bls.n	8012c16 <USB_SetTurnaroundTime+0x82>
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	4a2e      	ldr	r2, [pc, #184]	; (8012cc4 <USB_SetTurnaroundTime+0x130>)
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d802      	bhi.n	8012c16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012c10:	230b      	movs	r3, #11
 8012c12:	617b      	str	r3, [r7, #20]
 8012c14:	e036      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	4a2a      	ldr	r2, [pc, #168]	; (8012cc4 <USB_SetTurnaroundTime+0x130>)
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d906      	bls.n	8012c2c <USB_SetTurnaroundTime+0x98>
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	4a29      	ldr	r2, [pc, #164]	; (8012cc8 <USB_SetTurnaroundTime+0x134>)
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d802      	bhi.n	8012c2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012c26:	230a      	movs	r3, #10
 8012c28:	617b      	str	r3, [r7, #20]
 8012c2a:	e02b      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	4a26      	ldr	r2, [pc, #152]	; (8012cc8 <USB_SetTurnaroundTime+0x134>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d906      	bls.n	8012c42 <USB_SetTurnaroundTime+0xae>
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	4a25      	ldr	r2, [pc, #148]	; (8012ccc <USB_SetTurnaroundTime+0x138>)
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d202      	bcs.n	8012c42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c3c:	2309      	movs	r3, #9
 8012c3e:	617b      	str	r3, [r7, #20]
 8012c40:	e020      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	4a21      	ldr	r2, [pc, #132]	; (8012ccc <USB_SetTurnaroundTime+0x138>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d306      	bcc.n	8012c58 <USB_SetTurnaroundTime+0xc4>
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	4a20      	ldr	r2, [pc, #128]	; (8012cd0 <USB_SetTurnaroundTime+0x13c>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d802      	bhi.n	8012c58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c52:	2308      	movs	r3, #8
 8012c54:	617b      	str	r3, [r7, #20]
 8012c56:	e015      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	4a1d      	ldr	r2, [pc, #116]	; (8012cd0 <USB_SetTurnaroundTime+0x13c>)
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	d906      	bls.n	8012c6e <USB_SetTurnaroundTime+0xda>
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	4a1c      	ldr	r2, [pc, #112]	; (8012cd4 <USB_SetTurnaroundTime+0x140>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d202      	bcs.n	8012c6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c68:	2307      	movs	r3, #7
 8012c6a:	617b      	str	r3, [r7, #20]
 8012c6c:	e00a      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c6e:	2306      	movs	r3, #6
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	e007      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d102      	bne.n	8012c80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c7a:	2309      	movs	r3, #9
 8012c7c:	617b      	str	r3, [r7, #20]
 8012c7e:	e001      	b.n	8012c84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c80:	2309      	movs	r3, #9
 8012c82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	68da      	ldr	r2, [r3, #12]
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	029b      	lsls	r3, r3, #10
 8012c98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012c9c:	431a      	orrs	r2, r3
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ca2:	2300      	movs	r3, #0
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	371c      	adds	r7, #28
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr
 8012cb0:	00d8acbf 	.word	0x00d8acbf
 8012cb4:	00e4e1c0 	.word	0x00e4e1c0
 8012cb8:	00f42400 	.word	0x00f42400
 8012cbc:	01067380 	.word	0x01067380
 8012cc0:	011a499f 	.word	0x011a499f
 8012cc4:	01312cff 	.word	0x01312cff
 8012cc8:	014ca43f 	.word	0x014ca43f
 8012ccc:	016e3600 	.word	0x016e3600
 8012cd0:	01a6ab1f 	.word	0x01a6ab1f
 8012cd4:	01e84800 	.word	0x01e84800

08012cd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b083      	sub	sp, #12
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	f043 0201 	orr.w	r2, r3, #1
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012cfa:	b480      	push	{r7}
 8012cfc:	b083      	sub	sp, #12
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	f023 0201 	bic.w	r2, r3, #1
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d0e:	2300      	movs	r3, #0
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b084      	sub	sp, #16
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	460b      	mov	r3, r1
 8012d26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d38:	78fb      	ldrb	r3, [r7, #3]
 8012d3a:	2b01      	cmp	r3, #1
 8012d3c:	d115      	bne.n	8012d6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d4a:	2001      	movs	r0, #1
 8012d4c:	f7f0 fea6 	bl	8003a9c <HAL_Delay>
      ms++;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	3301      	adds	r3, #1
 8012d54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f001 f93f 	bl	8013fda <USB_GetMode>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d01e      	beq.n	8012da0 <USB_SetCurrentMode+0x84>
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2b31      	cmp	r3, #49	; 0x31
 8012d66:	d9f0      	bls.n	8012d4a <USB_SetCurrentMode+0x2e>
 8012d68:	e01a      	b.n	8012da0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d6a:	78fb      	ldrb	r3, [r7, #3]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d115      	bne.n	8012d9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d7c:	2001      	movs	r0, #1
 8012d7e:	f7f0 fe8d 	bl	8003a9c <HAL_Delay>
      ms++;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	3301      	adds	r3, #1
 8012d86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f001 f926 	bl	8013fda <USB_GetMode>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d005      	beq.n	8012da0 <USB_SetCurrentMode+0x84>
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2b31      	cmp	r3, #49	; 0x31
 8012d98:	d9f0      	bls.n	8012d7c <USB_SetCurrentMode+0x60>
 8012d9a:	e001      	b.n	8012da0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e005      	b.n	8012dac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2b32      	cmp	r3, #50	; 0x32
 8012da4:	d101      	bne.n	8012daa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012da6:	2301      	movs	r3, #1
 8012da8:	e000      	b.n	8012dac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012daa:	2300      	movs	r3, #0
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012db4:	b084      	sub	sp, #16
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b086      	sub	sp, #24
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012dce:	2300      	movs	r3, #0
 8012dd0:	613b      	str	r3, [r7, #16]
 8012dd2:	e009      	b.n	8012de8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	3340      	adds	r3, #64	; 0x40
 8012dda:	009b      	lsls	r3, r3, #2
 8012ddc:	4413      	add	r3, r2
 8012dde:	2200      	movs	r2, #0
 8012de0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	3301      	adds	r3, #1
 8012de6:	613b      	str	r3, [r7, #16]
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	2b0e      	cmp	r3, #14
 8012dec:	d9f2      	bls.n	8012dd4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d11c      	bne.n	8012e2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	68fa      	ldr	r2, [r7, #12]
 8012dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e02:	f043 0302 	orr.w	r3, r3, #2
 8012e06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	601a      	str	r2, [r3, #0]
 8012e2c:	e005      	b.n	8012e3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e40:	461a      	mov	r2, r3
 8012e42:	2300      	movs	r3, #0
 8012e44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e54:	461a      	mov	r2, r3
 8012e56:	680b      	ldr	r3, [r1, #0]
 8012e58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5c:	2b01      	cmp	r3, #1
 8012e5e:	d10c      	bne.n	8012e7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d104      	bne.n	8012e70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e66:	2100      	movs	r1, #0
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f000 f965 	bl	8013138 <USB_SetDevSpeed>
 8012e6e:	e008      	b.n	8012e82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e70:	2101      	movs	r1, #1
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 f960 	bl	8013138 <USB_SetDevSpeed>
 8012e78:	e003      	b.n	8012e82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e7a:	2103      	movs	r1, #3
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f000 f95b 	bl	8013138 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e82:	2110      	movs	r1, #16
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f8f3 	bl	8013070 <USB_FlushTxFifo>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012e90:	2301      	movs	r3, #1
 8012e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f000 f91f 	bl	80130d8 <USB_FlushRxFifo>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eaa:	461a      	mov	r2, r3
 8012eac:	2300      	movs	r3, #0
 8012eae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	2300      	movs	r3, #0
 8012eba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ec8:	2300      	movs	r3, #0
 8012eca:	613b      	str	r3, [r7, #16]
 8012ecc:	e043      	b.n	8012f56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	015a      	lsls	r2, r3, #5
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ee4:	d118      	bne.n	8012f18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d10a      	bne.n	8012f02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	015a      	lsls	r2, r3, #5
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef8:	461a      	mov	r2, r3
 8012efa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012efe:	6013      	str	r3, [r2, #0]
 8012f00:	e013      	b.n	8012f2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	015a      	lsls	r2, r3, #5
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	4413      	add	r3, r2
 8012f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f0e:	461a      	mov	r2, r3
 8012f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f14:	6013      	str	r3, [r2, #0]
 8012f16:	e008      	b.n	8012f2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	015a      	lsls	r2, r3, #5
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	4413      	add	r3, r2
 8012f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f24:	461a      	mov	r2, r3
 8012f26:	2300      	movs	r3, #0
 8012f28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	015a      	lsls	r2, r3, #5
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	4413      	add	r3, r2
 8012f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f36:	461a      	mov	r2, r3
 8012f38:	2300      	movs	r3, #0
 8012f3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f48:	461a      	mov	r2, r3
 8012f4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	3301      	adds	r3, #1
 8012f54:	613b      	str	r3, [r7, #16]
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	693a      	ldr	r2, [r7, #16]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d3b7      	bcc.n	8012ece <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f5e:	2300      	movs	r3, #0
 8012f60:	613b      	str	r3, [r7, #16]
 8012f62:	e043      	b.n	8012fec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	015a      	lsls	r2, r3, #5
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f7a:	d118      	bne.n	8012fae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d10a      	bne.n	8012f98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	015a      	lsls	r2, r3, #5
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	4413      	add	r3, r2
 8012f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f8e:	461a      	mov	r2, r3
 8012f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f94:	6013      	str	r3, [r2, #0]
 8012f96:	e013      	b.n	8012fc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	015a      	lsls	r2, r3, #5
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012faa:	6013      	str	r3, [r2, #0]
 8012fac:	e008      	b.n	8012fc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	015a      	lsls	r2, r3, #5
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fba:	461a      	mov	r2, r3
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	015a      	lsls	r2, r3, #5
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fcc:	461a      	mov	r2, r3
 8012fce:	2300      	movs	r3, #0
 8012fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	015a      	lsls	r2, r3, #5
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	4413      	add	r3, r2
 8012fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fde:	461a      	mov	r2, r3
 8012fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	613b      	str	r3, [r7, #16]
 8012fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fee:	693a      	ldr	r2, [r7, #16]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d3b7      	bcc.n	8012f64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	68fa      	ldr	r2, [r7, #12]
 8012ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013006:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013014:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013018:	2b00      	cmp	r3, #0
 801301a:	d105      	bne.n	8013028 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	699b      	ldr	r3, [r3, #24]
 8013020:	f043 0210 	orr.w	r2, r3, #16
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	699a      	ldr	r2, [r3, #24]
 801302c:	4b0e      	ldr	r3, [pc, #56]	; (8013068 <USB_DevInit+0x2b4>)
 801302e:	4313      	orrs	r3, r2
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013036:	2b00      	cmp	r3, #0
 8013038:	d005      	beq.n	8013046 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	699b      	ldr	r3, [r3, #24]
 801303e:	f043 0208 	orr.w	r2, r3, #8
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013048:	2b01      	cmp	r3, #1
 801304a:	d105      	bne.n	8013058 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	699a      	ldr	r2, [r3, #24]
 8013050:	4b06      	ldr	r3, [pc, #24]	; (801306c <USB_DevInit+0x2b8>)
 8013052:	4313      	orrs	r3, r2
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013058:	7dfb      	ldrb	r3, [r7, #23]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3718      	adds	r7, #24
 801305e:	46bd      	mov	sp, r7
 8013060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013064:	b004      	add	sp, #16
 8013066:	4770      	bx	lr
 8013068:	803c3800 	.word	0x803c3800
 801306c:	40000004 	.word	0x40000004

08013070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013070:	b480      	push	{r7}
 8013072:	b085      	sub	sp, #20
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801307a:	2300      	movs	r3, #0
 801307c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	3301      	adds	r3, #1
 8013082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	4a13      	ldr	r2, [pc, #76]	; (80130d4 <USB_FlushTxFifo+0x64>)
 8013088:	4293      	cmp	r3, r2
 801308a:	d901      	bls.n	8013090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801308c:	2303      	movs	r3, #3
 801308e:	e01b      	b.n	80130c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	691b      	ldr	r3, [r3, #16]
 8013094:	2b00      	cmp	r3, #0
 8013096:	daf2      	bge.n	801307e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013098:	2300      	movs	r3, #0
 801309a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	019b      	lsls	r3, r3, #6
 80130a0:	f043 0220 	orr.w	r2, r3, #32
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	3301      	adds	r3, #1
 80130ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	4a08      	ldr	r2, [pc, #32]	; (80130d4 <USB_FlushTxFifo+0x64>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d901      	bls.n	80130ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80130b6:	2303      	movs	r3, #3
 80130b8:	e006      	b.n	80130c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	691b      	ldr	r3, [r3, #16]
 80130be:	f003 0320 	and.w	r3, r3, #32
 80130c2:	2b20      	cmp	r3, #32
 80130c4:	d0f0      	beq.n	80130a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80130c6:	2300      	movs	r3, #0
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3714      	adds	r7, #20
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr
 80130d4:	00030d40 	.word	0x00030d40

080130d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80130d8:	b480      	push	{r7}
 80130da:	b085      	sub	sp, #20
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80130e0:	2300      	movs	r3, #0
 80130e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	3301      	adds	r3, #1
 80130e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	4a11      	ldr	r2, [pc, #68]	; (8013134 <USB_FlushRxFifo+0x5c>)
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d901      	bls.n	80130f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80130f2:	2303      	movs	r3, #3
 80130f4:	e018      	b.n	8013128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	691b      	ldr	r3, [r3, #16]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	daf2      	bge.n	80130e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80130fe:	2300      	movs	r3, #0
 8013100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2210      	movs	r2, #16
 8013106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	3301      	adds	r3, #1
 801310c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	4a08      	ldr	r2, [pc, #32]	; (8013134 <USB_FlushRxFifo+0x5c>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d901      	bls.n	801311a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013116:	2303      	movs	r3, #3
 8013118:	e006      	b.n	8013128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	f003 0310 	and.w	r3, r3, #16
 8013122:	2b10      	cmp	r3, #16
 8013124:	d0f0      	beq.n	8013108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013126:	2300      	movs	r3, #0
}
 8013128:	4618      	mov	r0, r3
 801312a:	3714      	adds	r7, #20
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr
 8013134:	00030d40 	.word	0x00030d40

08013138 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	460b      	mov	r3, r1
 8013142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	78fb      	ldrb	r3, [r7, #3]
 8013152:	68f9      	ldr	r1, [r7, #12]
 8013154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013158:	4313      	orrs	r3, r2
 801315a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801315c:	2300      	movs	r3, #0
}
 801315e:	4618      	mov	r0, r3
 8013160:	3714      	adds	r7, #20
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801316a:	b480      	push	{r7}
 801316c:	b087      	sub	sp, #28
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	f003 0306 	and.w	r3, r3, #6
 8013182:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d102      	bne.n	8013190 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801318a:	2300      	movs	r3, #0
 801318c:	75fb      	strb	r3, [r7, #23]
 801318e:	e00a      	b.n	80131a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2b02      	cmp	r3, #2
 8013194:	d002      	beq.n	801319c <USB_GetDevSpeed+0x32>
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2b06      	cmp	r3, #6
 801319a:	d102      	bne.n	80131a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801319c:	2302      	movs	r3, #2
 801319e:	75fb      	strb	r3, [r7, #23]
 80131a0:	e001      	b.n	80131a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80131a2:	230f      	movs	r3, #15
 80131a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80131a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	371c      	adds	r7, #28
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b085      	sub	sp, #20
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	785b      	ldrb	r3, [r3, #1]
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d139      	bne.n	8013244 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131d6:	69da      	ldr	r2, [r3, #28]
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	f003 030f 	and.w	r3, r3, #15
 80131e0:	2101      	movs	r1, #1
 80131e2:	fa01 f303 	lsl.w	r3, r1, r3
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	68f9      	ldr	r1, [r7, #12]
 80131ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131ee:	4313      	orrs	r3, r2
 80131f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	015a      	lsls	r2, r3, #5
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	4413      	add	r3, r2
 80131fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013204:	2b00      	cmp	r3, #0
 8013206:	d153      	bne.n	80132b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	015a      	lsls	r2, r3, #5
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	4413      	add	r3, r2
 8013210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	791b      	ldrb	r3, [r3, #4]
 8013222:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013224:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	059b      	lsls	r3, r3, #22
 801322a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801322c:	431a      	orrs	r2, r3
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	0159      	lsls	r1, r3, #5
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	440b      	add	r3, r1
 8013236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801323a:	4619      	mov	r1, r3
 801323c:	4b20      	ldr	r3, [pc, #128]	; (80132c0 <USB_ActivateEndpoint+0x10c>)
 801323e:	4313      	orrs	r3, r2
 8013240:	600b      	str	r3, [r1, #0]
 8013242:	e035      	b.n	80132b0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801324a:	69da      	ldr	r2, [r3, #28]
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	f003 030f 	and.w	r3, r3, #15
 8013254:	2101      	movs	r1, #1
 8013256:	fa01 f303 	lsl.w	r3, r1, r3
 801325a:	041b      	lsls	r3, r3, #16
 801325c:	68f9      	ldr	r1, [r7, #12]
 801325e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013262:	4313      	orrs	r3, r2
 8013264:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	015a      	lsls	r2, r3, #5
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	4413      	add	r3, r2
 801326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013278:	2b00      	cmp	r3, #0
 801327a:	d119      	bne.n	80132b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	015a      	lsls	r2, r3, #5
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	4413      	add	r3, r2
 8013284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013288:	681a      	ldr	r2, [r3, #0]
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	689b      	ldr	r3, [r3, #8]
 801328e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	791b      	ldrb	r3, [r3, #4]
 8013296:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013298:	430b      	orrs	r3, r1
 801329a:	431a      	orrs	r2, r3
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	0159      	lsls	r1, r3, #5
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	440b      	add	r3, r1
 80132a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a8:	4619      	mov	r1, r3
 80132aa:	4b05      	ldr	r3, [pc, #20]	; (80132c0 <USB_ActivateEndpoint+0x10c>)
 80132ac:	4313      	orrs	r3, r2
 80132ae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3714      	adds	r7, #20
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	10008000 	.word	0x10008000

080132c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	785b      	ldrb	r3, [r3, #1]
 80132dc:	2b01      	cmp	r3, #1
 80132de:	d161      	bne.n	80133a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	015a      	lsls	r2, r3, #5
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	4413      	add	r3, r2
 80132e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132f6:	d11f      	bne.n	8013338 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	015a      	lsls	r2, r3, #5
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	4413      	add	r3, r2
 8013300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	68ba      	ldr	r2, [r7, #8]
 8013308:	0151      	lsls	r1, r2, #5
 801330a:	68fa      	ldr	r2, [r7, #12]
 801330c:	440a      	add	r2, r1
 801330e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013312:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013316:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	015a      	lsls	r2, r3, #5
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	4413      	add	r3, r2
 8013320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	68ba      	ldr	r2, [r7, #8]
 8013328:	0151      	lsls	r1, r2, #5
 801332a:	68fa      	ldr	r2, [r7, #12]
 801332c:	440a      	add	r2, r1
 801332e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013336:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801333e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	f003 030f 	and.w	r3, r3, #15
 8013348:	2101      	movs	r1, #1
 801334a:	fa01 f303 	lsl.w	r3, r1, r3
 801334e:	b29b      	uxth	r3, r3
 8013350:	43db      	mvns	r3, r3
 8013352:	68f9      	ldr	r1, [r7, #12]
 8013354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013358:	4013      	ands	r3, r2
 801335a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013362:	69da      	ldr	r2, [r3, #28]
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	f003 030f 	and.w	r3, r3, #15
 801336c:	2101      	movs	r1, #1
 801336e:	fa01 f303 	lsl.w	r3, r1, r3
 8013372:	b29b      	uxth	r3, r3
 8013374:	43db      	mvns	r3, r3
 8013376:	68f9      	ldr	r1, [r7, #12]
 8013378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801337c:	4013      	ands	r3, r2
 801337e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	015a      	lsls	r2, r3, #5
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	4413      	add	r3, r2
 8013388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	0159      	lsls	r1, r3, #5
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	440b      	add	r3, r1
 8013396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801339a:	4619      	mov	r1, r3
 801339c:	4b35      	ldr	r3, [pc, #212]	; (8013474 <USB_DeactivateEndpoint+0x1b0>)
 801339e:	4013      	ands	r3, r2
 80133a0:	600b      	str	r3, [r1, #0]
 80133a2:	e060      	b.n	8013466 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	015a      	lsls	r2, r3, #5
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	4413      	add	r3, r2
 80133ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133ba:	d11f      	bne.n	80133fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	015a      	lsls	r2, r3, #5
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	4413      	add	r3, r2
 80133c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	68ba      	ldr	r2, [r7, #8]
 80133cc:	0151      	lsls	r1, r2, #5
 80133ce:	68fa      	ldr	r2, [r7, #12]
 80133d0:	440a      	add	r2, r1
 80133d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80133da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	015a      	lsls	r2, r3, #5
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	4413      	add	r3, r2
 80133e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	68ba      	ldr	r2, [r7, #8]
 80133ec:	0151      	lsls	r1, r2, #5
 80133ee:	68fa      	ldr	r2, [r7, #12]
 80133f0:	440a      	add	r2, r1
 80133f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	f003 030f 	and.w	r3, r3, #15
 801340c:	2101      	movs	r1, #1
 801340e:	fa01 f303 	lsl.w	r3, r1, r3
 8013412:	041b      	lsls	r3, r3, #16
 8013414:	43db      	mvns	r3, r3
 8013416:	68f9      	ldr	r1, [r7, #12]
 8013418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801341c:	4013      	ands	r3, r2
 801341e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013426:	69da      	ldr	r2, [r3, #28]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	f003 030f 	and.w	r3, r3, #15
 8013430:	2101      	movs	r1, #1
 8013432:	fa01 f303 	lsl.w	r3, r1, r3
 8013436:	041b      	lsls	r3, r3, #16
 8013438:	43db      	mvns	r3, r3
 801343a:	68f9      	ldr	r1, [r7, #12]
 801343c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013440:	4013      	ands	r3, r2
 8013442:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	015a      	lsls	r2, r3, #5
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	4413      	add	r3, r2
 801344c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	0159      	lsls	r1, r3, #5
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	440b      	add	r3, r1
 801345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801345e:	4619      	mov	r1, r3
 8013460:	4b05      	ldr	r3, [pc, #20]	; (8013478 <USB_DeactivateEndpoint+0x1b4>)
 8013462:	4013      	ands	r3, r2
 8013464:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013466:	2300      	movs	r3, #0
}
 8013468:	4618      	mov	r0, r3
 801346a:	3714      	adds	r7, #20
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr
 8013474:	ec337800 	.word	0xec337800
 8013478:	eff37800 	.word	0xeff37800

0801347c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b08a      	sub	sp, #40	; 0x28
 8013480:	af02      	add	r7, sp, #8
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	4613      	mov	r3, r2
 8013488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	785b      	ldrb	r3, [r3, #1]
 8013498:	2b01      	cmp	r3, #1
 801349a:	f040 8181 	bne.w	80137a0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d132      	bne.n	801350c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	015a      	lsls	r2, r3, #5
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	4413      	add	r3, r2
 80134ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134b2:	691a      	ldr	r2, [r3, #16]
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	0159      	lsls	r1, r3, #5
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	440b      	add	r3, r1
 80134bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c0:	4619      	mov	r1, r3
 80134c2:	4ba5      	ldr	r3, [pc, #660]	; (8013758 <USB_EPStartXfer+0x2dc>)
 80134c4:	4013      	ands	r3, r2
 80134c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	015a      	lsls	r2, r3, #5
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	4413      	add	r3, r2
 80134d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d4:	691b      	ldr	r3, [r3, #16]
 80134d6:	69ba      	ldr	r2, [r7, #24]
 80134d8:	0151      	lsls	r1, r2, #5
 80134da:	69fa      	ldr	r2, [r7, #28]
 80134dc:	440a      	add	r2, r1
 80134de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f4:	691a      	ldr	r2, [r3, #16]
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	0159      	lsls	r1, r3, #5
 80134fa:	69fb      	ldr	r3, [r7, #28]
 80134fc:	440b      	add	r3, r1
 80134fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013502:	4619      	mov	r1, r3
 8013504:	4b95      	ldr	r3, [pc, #596]	; (801375c <USB_EPStartXfer+0x2e0>)
 8013506:	4013      	ands	r3, r2
 8013508:	610b      	str	r3, [r1, #16]
 801350a:	e092      	b.n	8013632 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	015a      	lsls	r2, r3, #5
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	4413      	add	r3, r2
 8013514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013518:	691a      	ldr	r2, [r3, #16]
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	0159      	lsls	r1, r3, #5
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	440b      	add	r3, r1
 8013522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013526:	4619      	mov	r1, r3
 8013528:	4b8c      	ldr	r3, [pc, #560]	; (801375c <USB_EPStartXfer+0x2e0>)
 801352a:	4013      	ands	r3, r2
 801352c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	015a      	lsls	r2, r3, #5
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	4413      	add	r3, r2
 8013536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801353a:	691a      	ldr	r2, [r3, #16]
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	0159      	lsls	r1, r3, #5
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	440b      	add	r3, r1
 8013544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013548:	4619      	mov	r1, r3
 801354a:	4b83      	ldr	r3, [pc, #524]	; (8013758 <USB_EPStartXfer+0x2dc>)
 801354c:	4013      	ands	r3, r2
 801354e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d11a      	bne.n	801358c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	691a      	ldr	r2, [r3, #16]
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	429a      	cmp	r2, r3
 8013560:	d903      	bls.n	801356a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	689a      	ldr	r2, [r3, #8]
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	015a      	lsls	r2, r3, #5
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	4413      	add	r3, r2
 8013572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013576:	691b      	ldr	r3, [r3, #16]
 8013578:	69ba      	ldr	r2, [r7, #24]
 801357a:	0151      	lsls	r1, r2, #5
 801357c:	69fa      	ldr	r2, [r7, #28]
 801357e:	440a      	add	r2, r1
 8013580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013588:	6113      	str	r3, [r2, #16]
 801358a:	e01b      	b.n	80135c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	015a      	lsls	r2, r3, #5
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	4413      	add	r3, r2
 8013594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013598:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	6919      	ldr	r1, [r3, #16]
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	440b      	add	r3, r1
 80135a4:	1e59      	subs	r1, r3, #1
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80135ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80135b0:	4b6b      	ldr	r3, [pc, #428]	; (8013760 <USB_EPStartXfer+0x2e4>)
 80135b2:	400b      	ands	r3, r1
 80135b4:	69b9      	ldr	r1, [r7, #24]
 80135b6:	0148      	lsls	r0, r1, #5
 80135b8:	69f9      	ldr	r1, [r7, #28]
 80135ba:	4401      	add	r1, r0
 80135bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135c0:	4313      	orrs	r3, r2
 80135c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	015a      	lsls	r2, r3, #5
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	4413      	add	r3, r2
 80135cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d0:	691a      	ldr	r2, [r3, #16]
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	691b      	ldr	r3, [r3, #16]
 80135d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135da:	69b9      	ldr	r1, [r7, #24]
 80135dc:	0148      	lsls	r0, r1, #5
 80135de:	69f9      	ldr	r1, [r7, #28]
 80135e0:	4401      	add	r1, r0
 80135e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135e6:	4313      	orrs	r3, r2
 80135e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	791b      	ldrb	r3, [r3, #4]
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d11f      	bne.n	8013632 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	015a      	lsls	r2, r3, #5
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	4413      	add	r3, r2
 80135fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135fe:	691b      	ldr	r3, [r3, #16]
 8013600:	69ba      	ldr	r2, [r7, #24]
 8013602:	0151      	lsls	r1, r2, #5
 8013604:	69fa      	ldr	r2, [r7, #28]
 8013606:	440a      	add	r2, r1
 8013608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801360c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013610:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013612:	69bb      	ldr	r3, [r7, #24]
 8013614:	015a      	lsls	r2, r3, #5
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	4413      	add	r3, r2
 801361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801361e:	691b      	ldr	r3, [r3, #16]
 8013620:	69ba      	ldr	r2, [r7, #24]
 8013622:	0151      	lsls	r1, r2, #5
 8013624:	69fa      	ldr	r2, [r7, #28]
 8013626:	440a      	add	r2, r1
 8013628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801362c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013630:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013632:	79fb      	ldrb	r3, [r7, #7]
 8013634:	2b01      	cmp	r3, #1
 8013636:	d14b      	bne.n	80136d0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	69db      	ldr	r3, [r3, #28]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d009      	beq.n	8013654 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364c:	461a      	mov	r2, r3
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	69db      	ldr	r3, [r3, #28]
 8013652:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	791b      	ldrb	r3, [r3, #4]
 8013658:	2b01      	cmp	r3, #1
 801365a:	d128      	bne.n	80136ae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013662:	689b      	ldr	r3, [r3, #8]
 8013664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013668:	2b00      	cmp	r3, #0
 801366a:	d110      	bne.n	801368e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	015a      	lsls	r2, r3, #5
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	4413      	add	r3, r2
 8013674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	69ba      	ldr	r2, [r7, #24]
 801367c:	0151      	lsls	r1, r2, #5
 801367e:	69fa      	ldr	r2, [r7, #28]
 8013680:	440a      	add	r2, r1
 8013682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013686:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801368a:	6013      	str	r3, [r2, #0]
 801368c:	e00f      	b.n	80136ae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	015a      	lsls	r2, r3, #5
 8013692:	69fb      	ldr	r3, [r7, #28]
 8013694:	4413      	add	r3, r2
 8013696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	69ba      	ldr	r2, [r7, #24]
 801369e:	0151      	lsls	r1, r2, #5
 80136a0:	69fa      	ldr	r2, [r7, #28]
 80136a2:	440a      	add	r2, r1
 80136a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	015a      	lsls	r2, r3, #5
 80136b2:	69fb      	ldr	r3, [r7, #28]
 80136b4:	4413      	add	r3, r2
 80136b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	69ba      	ldr	r2, [r7, #24]
 80136be:	0151      	lsls	r1, r2, #5
 80136c0:	69fa      	ldr	r2, [r7, #28]
 80136c2:	440a      	add	r2, r1
 80136c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136cc:	6013      	str	r3, [r2, #0]
 80136ce:	e16a      	b.n	80139a6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	015a      	lsls	r2, r3, #5
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	4413      	add	r3, r2
 80136d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	69ba      	ldr	r2, [r7, #24]
 80136e0:	0151      	lsls	r1, r2, #5
 80136e2:	69fa      	ldr	r2, [r7, #28]
 80136e4:	440a      	add	r2, r1
 80136e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	791b      	ldrb	r3, [r3, #4]
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d015      	beq.n	8013724 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	691b      	ldr	r3, [r3, #16]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 8152 	beq.w	80139a6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	f003 030f 	and.w	r3, r3, #15
 8013712:	2101      	movs	r1, #1
 8013714:	fa01 f303 	lsl.w	r3, r1, r3
 8013718:	69f9      	ldr	r1, [r7, #28]
 801371a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801371e:	4313      	orrs	r3, r2
 8013720:	634b      	str	r3, [r1, #52]	; 0x34
 8013722:	e140      	b.n	80139a6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801372a:	689b      	ldr	r3, [r3, #8]
 801372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013730:	2b00      	cmp	r3, #0
 8013732:	d117      	bne.n	8013764 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	015a      	lsls	r2, r3, #5
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	4413      	add	r3, r2
 801373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	69ba      	ldr	r2, [r7, #24]
 8013744:	0151      	lsls	r1, r2, #5
 8013746:	69fa      	ldr	r2, [r7, #28]
 8013748:	440a      	add	r2, r1
 801374a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801374e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013752:	6013      	str	r3, [r2, #0]
 8013754:	e016      	b.n	8013784 <USB_EPStartXfer+0x308>
 8013756:	bf00      	nop
 8013758:	e007ffff 	.word	0xe007ffff
 801375c:	fff80000 	.word	0xfff80000
 8013760:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	015a      	lsls	r2, r3, #5
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	4413      	add	r3, r2
 801376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	69ba      	ldr	r2, [r7, #24]
 8013774:	0151      	lsls	r1, r2, #5
 8013776:	69fa      	ldr	r2, [r7, #28]
 8013778:	440a      	add	r2, r1
 801377a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013782:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	68d9      	ldr	r1, [r3, #12]
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	781a      	ldrb	r2, [r3, #0]
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	691b      	ldr	r3, [r3, #16]
 8013790:	b298      	uxth	r0, r3
 8013792:	79fb      	ldrb	r3, [r7, #7]
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	4603      	mov	r3, r0
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f000 f9b9 	bl	8013b10 <USB_WritePacket>
 801379e:	e102      	b.n	80139a6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	015a      	lsls	r2, r3, #5
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	4413      	add	r3, r2
 80137a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ac:	691a      	ldr	r2, [r3, #16]
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	0159      	lsls	r1, r3, #5
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	440b      	add	r3, r1
 80137b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ba:	4619      	mov	r1, r3
 80137bc:	4b7c      	ldr	r3, [pc, #496]	; (80139b0 <USB_EPStartXfer+0x534>)
 80137be:	4013      	ands	r3, r2
 80137c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	015a      	lsls	r2, r3, #5
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	4413      	add	r3, r2
 80137ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ce:	691a      	ldr	r2, [r3, #16]
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	0159      	lsls	r1, r3, #5
 80137d4:	69fb      	ldr	r3, [r7, #28]
 80137d6:	440b      	add	r3, r1
 80137d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137dc:	4619      	mov	r1, r3
 80137de:	4b75      	ldr	r3, [pc, #468]	; (80139b4 <USB_EPStartXfer+0x538>)
 80137e0:	4013      	ands	r3, r2
 80137e2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d12f      	bne.n	801384a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	691b      	ldr	r3, [r3, #16]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d003      	beq.n	80137fa <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	689a      	ldr	r2, [r3, #8]
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	689a      	ldr	r2, [r3, #8]
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013802:	69bb      	ldr	r3, [r7, #24]
 8013804:	015a      	lsls	r2, r3, #5
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	4413      	add	r3, r2
 801380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801380e:	691a      	ldr	r2, [r3, #16]
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	6a1b      	ldr	r3, [r3, #32]
 8013814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013818:	69b9      	ldr	r1, [r7, #24]
 801381a:	0148      	lsls	r0, r1, #5
 801381c:	69f9      	ldr	r1, [r7, #28]
 801381e:	4401      	add	r1, r0
 8013820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013824:	4313      	orrs	r3, r2
 8013826:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	015a      	lsls	r2, r3, #5
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	4413      	add	r3, r2
 8013830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	69ba      	ldr	r2, [r7, #24]
 8013838:	0151      	lsls	r1, r2, #5
 801383a:	69fa      	ldr	r2, [r7, #28]
 801383c:	440a      	add	r2, r1
 801383e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013846:	6113      	str	r3, [r2, #16]
 8013848:	e05f      	b.n	801390a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	691b      	ldr	r3, [r3, #16]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d123      	bne.n	801389a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	015a      	lsls	r2, r3, #5
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	4413      	add	r3, r2
 801385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801385e:	691a      	ldr	r2, [r3, #16]
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	689b      	ldr	r3, [r3, #8]
 8013864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013868:	69b9      	ldr	r1, [r7, #24]
 801386a:	0148      	lsls	r0, r1, #5
 801386c:	69f9      	ldr	r1, [r7, #28]
 801386e:	4401      	add	r1, r0
 8013870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013874:	4313      	orrs	r3, r2
 8013876:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	015a      	lsls	r2, r3, #5
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	4413      	add	r3, r2
 8013880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	69ba      	ldr	r2, [r7, #24]
 8013888:	0151      	lsls	r1, r2, #5
 801388a:	69fa      	ldr	r2, [r7, #28]
 801388c:	440a      	add	r2, r1
 801388e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013896:	6113      	str	r3, [r2, #16]
 8013898:	e037      	b.n	801390a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	691a      	ldr	r2, [r3, #16]
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	4413      	add	r3, r2
 80138a4:	1e5a      	subs	r2, r3, #1
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	689b      	ldr	r3, [r3, #8]
 80138aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80138ae:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	689b      	ldr	r3, [r3, #8]
 80138b4:	8afa      	ldrh	r2, [r7, #22]
 80138b6:	fb03 f202 	mul.w	r2, r3, r2
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	015a      	lsls	r2, r3, #5
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	4413      	add	r3, r2
 80138c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ca:	691a      	ldr	r2, [r3, #16]
 80138cc:	8afb      	ldrh	r3, [r7, #22]
 80138ce:	04d9      	lsls	r1, r3, #19
 80138d0:	4b39      	ldr	r3, [pc, #228]	; (80139b8 <USB_EPStartXfer+0x53c>)
 80138d2:	400b      	ands	r3, r1
 80138d4:	69b9      	ldr	r1, [r7, #24]
 80138d6:	0148      	lsls	r0, r1, #5
 80138d8:	69f9      	ldr	r1, [r7, #28]
 80138da:	4401      	add	r1, r0
 80138dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138e0:	4313      	orrs	r3, r2
 80138e2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	015a      	lsls	r2, r3, #5
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f0:	691a      	ldr	r2, [r3, #16]
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	6a1b      	ldr	r3, [r3, #32]
 80138f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138fa:	69b9      	ldr	r1, [r7, #24]
 80138fc:	0148      	lsls	r0, r1, #5
 80138fe:	69f9      	ldr	r1, [r7, #28]
 8013900:	4401      	add	r1, r0
 8013902:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013906:	4313      	orrs	r3, r2
 8013908:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801390a:	79fb      	ldrb	r3, [r7, #7]
 801390c:	2b01      	cmp	r3, #1
 801390e:	d10d      	bne.n	801392c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d009      	beq.n	801392c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	68d9      	ldr	r1, [r3, #12]
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	015a      	lsls	r2, r3, #5
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	4413      	add	r3, r2
 8013924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013928:	460a      	mov	r2, r1
 801392a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	791b      	ldrb	r3, [r3, #4]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d128      	bne.n	8013986 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013940:	2b00      	cmp	r3, #0
 8013942:	d110      	bne.n	8013966 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	015a      	lsls	r2, r3, #5
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	4413      	add	r3, r2
 801394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	69ba      	ldr	r2, [r7, #24]
 8013954:	0151      	lsls	r1, r2, #5
 8013956:	69fa      	ldr	r2, [r7, #28]
 8013958:	440a      	add	r2, r1
 801395a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801395e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013962:	6013      	str	r3, [r2, #0]
 8013964:	e00f      	b.n	8013986 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	4413      	add	r3, r2
 801396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	69ba      	ldr	r2, [r7, #24]
 8013976:	0151      	lsls	r1, r2, #5
 8013978:	69fa      	ldr	r2, [r7, #28]
 801397a:	440a      	add	r2, r1
 801397c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013984:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	015a      	lsls	r2, r3, #5
 801398a:	69fb      	ldr	r3, [r7, #28]
 801398c:	4413      	add	r3, r2
 801398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	69ba      	ldr	r2, [r7, #24]
 8013996:	0151      	lsls	r1, r2, #5
 8013998:	69fa      	ldr	r2, [r7, #28]
 801399a:	440a      	add	r2, r1
 801399c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139a6:	2300      	movs	r3, #0
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3720      	adds	r7, #32
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	fff80000 	.word	0xfff80000
 80139b4:	e007ffff 	.word	0xe007ffff
 80139b8:	1ff80000 	.word	0x1ff80000

080139bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139bc:	b480      	push	{r7}
 80139be:	b087      	sub	sp, #28
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139c6:	2300      	movs	r3, #0
 80139c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80139ca:	2300      	movs	r3, #0
 80139cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	785b      	ldrb	r3, [r3, #1]
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	d14a      	bne.n	8013a70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	015a      	lsls	r2, r3, #5
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	4413      	add	r3, r2
 80139e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139f2:	f040 8086 	bne.w	8013b02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	015a      	lsls	r2, r3, #5
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	4413      	add	r3, r2
 8013a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	683a      	ldr	r2, [r7, #0]
 8013a08:	7812      	ldrb	r2, [r2, #0]
 8013a0a:	0151      	lsls	r1, r2, #5
 8013a0c:	693a      	ldr	r2, [r7, #16]
 8013a0e:	440a      	add	r2, r1
 8013a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	015a      	lsls	r2, r3, #5
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	4413      	add	r3, r2
 8013a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	7812      	ldrb	r2, [r2, #0]
 8013a2e:	0151      	lsls	r1, r2, #5
 8013a30:	693a      	ldr	r2, [r7, #16]
 8013a32:	440a      	add	r2, r1
 8013a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	3301      	adds	r3, #1
 8013a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d902      	bls.n	8013a54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	75fb      	strb	r3, [r7, #23]
          break;
 8013a52:	e056      	b.n	8013b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	015a      	lsls	r2, r3, #5
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a6c:	d0e7      	beq.n	8013a3e <USB_EPStopXfer+0x82>
 8013a6e:	e048      	b.n	8013b02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	015a      	lsls	r2, r3, #5
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	4413      	add	r3, r2
 8013a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a88:	d13b      	bne.n	8013b02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	015a      	lsls	r2, r3, #5
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	4413      	add	r3, r2
 8013a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	683a      	ldr	r2, [r7, #0]
 8013a9c:	7812      	ldrb	r2, [r2, #0]
 8013a9e:	0151      	lsls	r1, r2, #5
 8013aa0:	693a      	ldr	r2, [r7, #16]
 8013aa2:	440a      	add	r2, r1
 8013aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013aac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	015a      	lsls	r2, r3, #5
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	683a      	ldr	r2, [r7, #0]
 8013ac0:	7812      	ldrb	r2, [r2, #0]
 8013ac2:	0151      	lsls	r1, r2, #5
 8013ac4:	693a      	ldr	r2, [r7, #16]
 8013ac6:	440a      	add	r2, r1
 8013ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8013ade:	4293      	cmp	r3, r2
 8013ae0:	d902      	bls.n	8013ae8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8013ae6:	e00c      	b.n	8013b02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	015a      	lsls	r2, r3, #5
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	4413      	add	r3, r2
 8013af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b00:	d0e7      	beq.n	8013ad2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	371c      	adds	r7, #28
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0e:	4770      	bx	lr

08013b10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b10:	b480      	push	{r7}
 8013b12:	b089      	sub	sp, #36	; 0x24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	4611      	mov	r1, r2
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	460b      	mov	r3, r1
 8013b20:	71fb      	strb	r3, [r7, #7]
 8013b22:	4613      	mov	r3, r2
 8013b24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d123      	bne.n	8013b7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b36:	88bb      	ldrh	r3, [r7, #4]
 8013b38:	3303      	adds	r3, #3
 8013b3a:	089b      	lsrs	r3, r3, #2
 8013b3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b3e:	2300      	movs	r3, #0
 8013b40:	61bb      	str	r3, [r7, #24]
 8013b42:	e018      	b.n	8013b76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b44:	79fb      	ldrb	r3, [r7, #7]
 8013b46:	031a      	lsls	r2, r3, #12
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	4413      	add	r3, r2
 8013b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b50:	461a      	mov	r2, r3
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	3301      	adds	r3, #1
 8013b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	3301      	adds	r3, #1
 8013b68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	3301      	adds	r3, #1
 8013b74:	61bb      	str	r3, [r7, #24]
 8013b76:	69ba      	ldr	r2, [r7, #24]
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d3e2      	bcc.n	8013b44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b7e:	2300      	movs	r3, #0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3724      	adds	r7, #36	; 0x24
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b08b      	sub	sp, #44	; 0x2c
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	4613      	mov	r3, r2
 8013b98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013ba2:	88fb      	ldrh	r3, [r7, #6]
 8013ba4:	089b      	lsrs	r3, r3, #2
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013baa:	88fb      	ldrh	r3, [r7, #6]
 8013bac:	f003 0303 	and.w	r3, r3, #3
 8013bb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	623b      	str	r3, [r7, #32]
 8013bb6:	e014      	b.n	8013be2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013bb8:	69bb      	ldr	r3, [r7, #24]
 8013bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bcc:	3301      	adds	r3, #1
 8013bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd8:	3301      	adds	r3, #1
 8013bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013bdc:	6a3b      	ldr	r3, [r7, #32]
 8013bde:	3301      	adds	r3, #1
 8013be0:	623b      	str	r3, [r7, #32]
 8013be2:	6a3a      	ldr	r2, [r7, #32]
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d3e6      	bcc.n	8013bb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bea:	8bfb      	ldrh	r3, [r7, #30]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d01e      	beq.n	8013c2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013bf4:	69bb      	ldr	r3, [r7, #24]
 8013bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	f107 0310 	add.w	r3, r7, #16
 8013c00:	6812      	ldr	r2, [r2, #0]
 8013c02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013c04:	693a      	ldr	r2, [r7, #16]
 8013c06:	6a3b      	ldr	r3, [r7, #32]
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	00db      	lsls	r3, r3, #3
 8013c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8013c10:	b2da      	uxtb	r2, r3
 8013c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c14:	701a      	strb	r2, [r3, #0]
      i++;
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	3301      	adds	r3, #1
 8013c1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1e:	3301      	adds	r3, #1
 8013c20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c22:	8bfb      	ldrh	r3, [r7, #30]
 8013c24:	3b01      	subs	r3, #1
 8013c26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c28:	8bfb      	ldrh	r3, [r7, #30]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d1ea      	bne.n	8013c04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	372c      	adds	r7, #44	; 0x2c
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	785b      	ldrb	r3, [r3, #1]
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d12c      	bne.n	8013cb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	015a      	lsls	r2, r3, #5
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	4413      	add	r3, r2
 8013c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	db12      	blt.n	8013c90 <USB_EPSetStall+0x54>
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00f      	beq.n	8013c90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	015a      	lsls	r2, r3, #5
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	4413      	add	r3, r2
 8013c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	68ba      	ldr	r2, [r7, #8]
 8013c80:	0151      	lsls	r1, r2, #5
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	440a      	add	r2, r1
 8013c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	015a      	lsls	r2, r3, #5
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	4413      	add	r3, r2
 8013c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	68ba      	ldr	r2, [r7, #8]
 8013ca0:	0151      	lsls	r1, r2, #5
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	440a      	add	r2, r1
 8013ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cae:	6013      	str	r3, [r2, #0]
 8013cb0:	e02b      	b.n	8013d0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	015a      	lsls	r2, r3, #5
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	4413      	add	r3, r2
 8013cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	db12      	blt.n	8013cea <USB_EPSetStall+0xae>
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00f      	beq.n	8013cea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	015a      	lsls	r2, r3, #5
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	0151      	lsls	r1, r2, #5
 8013cdc:	68fa      	ldr	r2, [r7, #12]
 8013cde:	440a      	add	r2, r1
 8013ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ce8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	015a      	lsls	r2, r3, #5
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	4413      	add	r3, r2
 8013cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	68ba      	ldr	r2, [r7, #8]
 8013cfa:	0151      	lsls	r1, r2, #5
 8013cfc:	68fa      	ldr	r2, [r7, #12]
 8013cfe:	440a      	add	r2, r1
 8013d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d0a:	2300      	movs	r3, #0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3714      	adds	r7, #20
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr

08013d18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	785b      	ldrb	r3, [r3, #1]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d128      	bne.n	8013d86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	015a      	lsls	r2, r3, #5
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	68ba      	ldr	r2, [r7, #8]
 8013d44:	0151      	lsls	r1, r2, #5
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	440a      	add	r2, r1
 8013d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	791b      	ldrb	r3, [r3, #4]
 8013d58:	2b03      	cmp	r3, #3
 8013d5a:	d003      	beq.n	8013d64 <USB_EPClearStall+0x4c>
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	791b      	ldrb	r3, [r3, #4]
 8013d60:	2b02      	cmp	r3, #2
 8013d62:	d138      	bne.n	8013dd6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	015a      	lsls	r2, r3, #5
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	4413      	add	r3, r2
 8013d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	68ba      	ldr	r2, [r7, #8]
 8013d74:	0151      	lsls	r1, r2, #5
 8013d76:	68fa      	ldr	r2, [r7, #12]
 8013d78:	440a      	add	r2, r1
 8013d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d82:	6013      	str	r3, [r2, #0]
 8013d84:	e027      	b.n	8013dd6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	015a      	lsls	r2, r3, #5
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	68ba      	ldr	r2, [r7, #8]
 8013d96:	0151      	lsls	r1, r2, #5
 8013d98:	68fa      	ldr	r2, [r7, #12]
 8013d9a:	440a      	add	r2, r1
 8013d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013da4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	791b      	ldrb	r3, [r3, #4]
 8013daa:	2b03      	cmp	r3, #3
 8013dac:	d003      	beq.n	8013db6 <USB_EPClearStall+0x9e>
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	791b      	ldrb	r3, [r3, #4]
 8013db2:	2b02      	cmp	r3, #2
 8013db4:	d10f      	bne.n	8013dd6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	015a      	lsls	r2, r3, #5
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	68ba      	ldr	r2, [r7, #8]
 8013dc6:	0151      	lsls	r1, r2, #5
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	440a      	add	r2, r1
 8013dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dd4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3714      	adds	r7, #20
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr

08013de4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b085      	sub	sp, #20
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	460b      	mov	r3, r1
 8013dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	68fa      	ldr	r2, [r7, #12]
 8013dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013e06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	78fb      	ldrb	r3, [r7, #3]
 8013e12:	011b      	lsls	r3, r3, #4
 8013e14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e18:	68f9      	ldr	r1, [r7, #12]
 8013e1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e22:	2300      	movs	r3, #0
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3714      	adds	r7, #20
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b085      	sub	sp, #20
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e4a:	f023 0303 	bic.w	r3, r3, #3
 8013e4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	68fa      	ldr	r2, [r7, #12]
 8013e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e5e:	f023 0302 	bic.w	r3, r3, #2
 8013e62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3714      	adds	r7, #20
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e70:	4770      	bx	lr

08013e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e72:	b480      	push	{r7}
 8013e74:	b085      	sub	sp, #20
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e8c:	f023 0303 	bic.w	r3, r3, #3
 8013e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	68fa      	ldr	r2, [r7, #12]
 8013e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ea0:	f043 0302 	orr.w	r3, r3, #2
 8013ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013ea6:	2300      	movs	r3, #0
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3714      	adds	r7, #20
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b085      	sub	sp, #20
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	695b      	ldr	r3, [r3, #20]
 8013ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	699b      	ldr	r3, [r3, #24]
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	4013      	ands	r3, r2
 8013eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b085      	sub	sp, #20
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eec:	699b      	ldr	r3, [r3, #24]
 8013eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ef6:	69db      	ldr	r3, [r3, #28]
 8013ef8:	68ba      	ldr	r2, [r7, #8]
 8013efa:	4013      	ands	r3, r2
 8013efc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	0c1b      	lsrs	r3, r3, #16
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3714      	adds	r7, #20
 8013f06:	46bd      	mov	sp, r7
 8013f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0c:	4770      	bx	lr

08013f0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f0e:	b480      	push	{r7}
 8013f10:	b085      	sub	sp, #20
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f20:	699b      	ldr	r3, [r3, #24]
 8013f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f2a:	69db      	ldr	r3, [r3, #28]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	4013      	ands	r3, r2
 8013f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	b29b      	uxth	r3, r3
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3714      	adds	r7, #20
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr

08013f42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f42:	b480      	push	{r7}
 8013f44:	b085      	sub	sp, #20
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
 8013f4a:	460b      	mov	r3, r1
 8013f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f52:	78fb      	ldrb	r3, [r7, #3]
 8013f54:	015a      	lsls	r2, r3, #5
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	4413      	add	r3, r2
 8013f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f68:	695b      	ldr	r3, [r3, #20]
 8013f6a:	68ba      	ldr	r2, [r7, #8]
 8013f6c:	4013      	ands	r3, r2
 8013f6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f70:	68bb      	ldr	r3, [r7, #8]
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3714      	adds	r7, #20
 8013f76:	46bd      	mov	sp, r7
 8013f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7c:	4770      	bx	lr

08013f7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f7e:	b480      	push	{r7}
 8013f80:	b087      	sub	sp, #28
 8013f82:	af00      	add	r7, sp, #0
 8013f84:	6078      	str	r0, [r7, #4]
 8013f86:	460b      	mov	r3, r1
 8013f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f94:	691b      	ldr	r3, [r3, #16]
 8013f96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013fa2:	78fb      	ldrb	r3, [r7, #3]
 8013fa4:	f003 030f 	and.w	r3, r3, #15
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	fa22 f303 	lsr.w	r3, r2, r3
 8013fae:	01db      	lsls	r3, r3, #7
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	693a      	ldr	r2, [r7, #16]
 8013fb4:	4313      	orrs	r3, r2
 8013fb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013fb8:	78fb      	ldrb	r3, [r7, #3]
 8013fba:	015a      	lsls	r2, r3, #5
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fc4:	689b      	ldr	r3, [r3, #8]
 8013fc6:	693a      	ldr	r2, [r7, #16]
 8013fc8:	4013      	ands	r3, r2
 8013fca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fcc:	68bb      	ldr	r3, [r7, #8]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	371c      	adds	r7, #28
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr

08013fda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fda:	b480      	push	{r7}
 8013fdc:	b083      	sub	sp, #12
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	695b      	ldr	r3, [r3, #20]
 8013fe6:	f003 0301 	and.w	r3, r3, #1
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	370c      	adds	r7, #12
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr
	...

08013ff8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b085      	sub	sp, #20
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014012:	4619      	mov	r1, r3
 8014014:	4b09      	ldr	r3, [pc, #36]	; (801403c <USB_ActivateSetup+0x44>)
 8014016:	4013      	ands	r3, r2
 8014018:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801402c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801402e:	2300      	movs	r3, #0
}
 8014030:	4618      	mov	r0, r3
 8014032:	3714      	adds	r7, #20
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr
 801403c:	fffff800 	.word	0xfffff800

08014040 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014040:	b480      	push	{r7}
 8014042:	b087      	sub	sp, #28
 8014044:	af00      	add	r7, sp, #0
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	460b      	mov	r3, r1
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	333c      	adds	r3, #60	; 0x3c
 8014056:	3304      	adds	r3, #4
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	4a26      	ldr	r2, [pc, #152]	; (80140f8 <USB_EP0_OutStart+0xb8>)
 8014060:	4293      	cmp	r3, r2
 8014062:	d90a      	bls.n	801407a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014074:	d101      	bne.n	801407a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014076:	2300      	movs	r3, #0
 8014078:	e037      	b.n	80140ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014080:	461a      	mov	r2, r3
 8014082:	2300      	movs	r3, #0
 8014084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801408c:	691b      	ldr	r3, [r3, #16]
 801408e:	697a      	ldr	r2, [r7, #20]
 8014090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014098:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a0:	691b      	ldr	r3, [r3, #16]
 80140a2:	697a      	ldr	r2, [r7, #20]
 80140a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140a8:	f043 0318 	orr.w	r3, r3, #24
 80140ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b4:	691b      	ldr	r3, [r3, #16]
 80140b6:	697a      	ldr	r2, [r7, #20]
 80140b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80140c2:	7afb      	ldrb	r3, [r7, #11]
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d10f      	bne.n	80140e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ce:	461a      	mov	r2, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	697a      	ldr	r2, [r7, #20]
 80140de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140e8:	2300      	movs	r3, #0
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	371c      	adds	r7, #28
 80140ee:	46bd      	mov	sp, r7
 80140f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	4f54300a 	.word	0x4f54300a

080140fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80140fc:	b480      	push	{r7}
 80140fe:	b085      	sub	sp, #20
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014104:	2300      	movs	r3, #0
 8014106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3301      	adds	r3, #1
 801410c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	4a13      	ldr	r2, [pc, #76]	; (8014160 <USB_CoreReset+0x64>)
 8014112:	4293      	cmp	r3, r2
 8014114:	d901      	bls.n	801411a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014116:	2303      	movs	r3, #3
 8014118:	e01b      	b.n	8014152 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	691b      	ldr	r3, [r3, #16]
 801411e:	2b00      	cmp	r3, #0
 8014120:	daf2      	bge.n	8014108 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014122:	2300      	movs	r3, #0
 8014124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	691b      	ldr	r3, [r3, #16]
 801412a:	f043 0201 	orr.w	r2, r3, #1
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	3301      	adds	r3, #1
 8014136:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	4a09      	ldr	r2, [pc, #36]	; (8014160 <USB_CoreReset+0x64>)
 801413c:	4293      	cmp	r3, r2
 801413e:	d901      	bls.n	8014144 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014140:	2303      	movs	r3, #3
 8014142:	e006      	b.n	8014152 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	691b      	ldr	r3, [r3, #16]
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	2b01      	cmp	r3, #1
 801414e:	d0f0      	beq.n	8014132 <USB_CoreReset+0x36>

  return HAL_OK;
 8014150:	2300      	movs	r3, #0
}
 8014152:	4618      	mov	r0, r3
 8014154:	3714      	adds	r7, #20
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop
 8014160:	00030d40 	.word	0x00030d40

08014164 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014168:	4904      	ldr	r1, [pc, #16]	; (801417c <MX_FATFS_Init+0x18>)
 801416a:	4805      	ldr	r0, [pc, #20]	; (8014180 <MX_FATFS_Init+0x1c>)
 801416c:	f002 fa56 	bl	801661c <FATFS_LinkDriver>
 8014170:	4603      	mov	r3, r0
 8014172:	461a      	mov	r2, r3
 8014174:	4b03      	ldr	r3, [pc, #12]	; (8014184 <MX_FATFS_Init+0x20>)
 8014176:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014178:	bf00      	nop
 801417a:	bd80      	pop	{r7, pc}
 801417c:	240015d8 	.word	0x240015d8
 8014180:	080185b8 	.word	0x080185b8
 8014184:	240015d4 	.word	0x240015d4

08014188 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801418e:	2300      	movs	r3, #0
 8014190:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014192:	f000 f885 	bl	80142a0 <BSP_SD_IsDetected>
 8014196:	4603      	mov	r3, r0
 8014198:	2b01      	cmp	r3, #1
 801419a:	d001      	beq.n	80141a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801419c:	2302      	movs	r3, #2
 801419e:	e012      	b.n	80141c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80141a0:	480b      	ldr	r0, [pc, #44]	; (80141d0 <BSP_SD_Init+0x48>)
 80141a2:	f7f8 ff41 	bl	800d028 <HAL_SD_Init>
 80141a6:	4603      	mov	r3, r0
 80141a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80141aa:	79fb      	ldrb	r3, [r7, #7]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d109      	bne.n	80141c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80141b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141b4:	4806      	ldr	r0, [pc, #24]	; (80141d0 <BSP_SD_Init+0x48>)
 80141b6:	f7f9 fdf7 	bl	800dda8 <HAL_SD_ConfigWideBusOperation>
 80141ba:	4603      	mov	r3, r0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d001      	beq.n	80141c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80141c0:	2301      	movs	r3, #1
 80141c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80141c4:	79fb      	ldrb	r3, [r7, #7]
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3708      	adds	r7, #8
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop
 80141d0:	24000ebc 	.word	0x24000ebc

080141d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141e0:	2300      	movs	r3, #0
 80141e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	68ba      	ldr	r2, [r7, #8]
 80141e8:	68f9      	ldr	r1, [r7, #12]
 80141ea:	4806      	ldr	r0, [pc, #24]	; (8014204 <BSP_SD_ReadBlocks_DMA+0x30>)
 80141ec:	f7f9 f83c 	bl	800d268 <HAL_SD_ReadBlocks_DMA>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d001      	beq.n	80141fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141f6:	2301      	movs	r3, #1
 80141f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3718      	adds	r7, #24
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}
 8014204:	24000ebc 	.word	0x24000ebc

08014208 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b086      	sub	sp, #24
 801420c:	af00      	add	r7, sp, #0
 801420e:	60f8      	str	r0, [r7, #12]
 8014210:	60b9      	str	r1, [r7, #8]
 8014212:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014214:	2300      	movs	r3, #0
 8014216:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	68ba      	ldr	r2, [r7, #8]
 801421c:	68f9      	ldr	r1, [r7, #12]
 801421e:	4806      	ldr	r0, [pc, #24]	; (8014238 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014220:	f7f9 f8ca 	bl	800d3b8 <HAL_SD_WriteBlocks_DMA>
 8014224:	4603      	mov	r3, r0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d001      	beq.n	801422e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801422a:	2301      	movs	r3, #1
 801422c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3718      	adds	r7, #24
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}
 8014238:	24000ebc 	.word	0x24000ebc

0801423c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014240:	4805      	ldr	r0, [pc, #20]	; (8014258 <BSP_SD_GetCardState+0x1c>)
 8014242:	f7f9 fec3 	bl	800dfcc <HAL_SD_GetCardState>
 8014246:	4603      	mov	r3, r0
 8014248:	2b04      	cmp	r3, #4
 801424a:	bf14      	ite	ne
 801424c:	2301      	movne	r3, #1
 801424e:	2300      	moveq	r3, #0
 8014250:	b2db      	uxtb	r3, r3
}
 8014252:	4618      	mov	r0, r3
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	24000ebc 	.word	0x24000ebc

0801425c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014264:	6879      	ldr	r1, [r7, #4]
 8014266:	4803      	ldr	r0, [pc, #12]	; (8014274 <BSP_SD_GetCardInfo+0x18>)
 8014268:	f7f9 fd72 	bl	800dd50 <HAL_SD_GetCardInfo>
}
 801426c:	bf00      	nop
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	24000ebc 	.word	0x24000ebc

08014278 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b082      	sub	sp, #8
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014280:	f000 f9a0 	bl	80145c4 <BSP_SD_WriteCpltCallback>
}
 8014284:	bf00      	nop
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014294:	f000 f9a2 	bl	80145dc <BSP_SD_ReadCpltCallback>
}
 8014298:	bf00      	nop
 801429a:	3708      	adds	r7, #8
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80142a6:	2301      	movs	r3, #1
 80142a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80142aa:	f000 f80b 	bl	80142c4 <BSP_PlatformIsDetected>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d101      	bne.n	80142b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80142b4:	2300      	movs	r3, #0
 80142b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80142b8:	79fb      	ldrb	r3, [r7, #7]
 80142ba:	b2db      	uxtb	r3, r3
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3708      	adds	r7, #8
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80142ca:	2301      	movs	r3, #1
 80142cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80142ce:	2104      	movs	r1, #4
 80142d0:	4806      	ldr	r0, [pc, #24]	; (80142ec <BSP_PlatformIsDetected+0x28>)
 80142d2:	f7f3 fe7d 	bl	8007fd0 <HAL_GPIO_ReadPin>
 80142d6:	4603      	mov	r3, r0
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d001      	beq.n	80142e0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80142dc:	2300      	movs	r3, #0
 80142de:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80142e0:	79fb      	ldrb	r3, [r7, #7]
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	58020400 	.word	0x58020400

080142f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80142f8:	f7ef fbc4 	bl	8003a84 <HAL_GetTick>
 80142fc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80142fe:	e006      	b.n	801430e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014300:	f7ff ff9c 	bl	801423c <BSP_SD_GetCardState>
 8014304:	4603      	mov	r3, r0
 8014306:	2b00      	cmp	r3, #0
 8014308:	d101      	bne.n	801430e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801430a:	2300      	movs	r3, #0
 801430c:	e009      	b.n	8014322 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801430e:	f7ef fbb9 	bl	8003a84 <HAL_GetTick>
 8014312:	4602      	mov	r2, r0
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	687a      	ldr	r2, [r7, #4]
 801431a:	429a      	cmp	r2, r3
 801431c:	d8f0      	bhi.n	8014300 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801431e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014322:	4618      	mov	r0, r3
 8014324:	3710      	adds	r7, #16
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
	...

0801432c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	4603      	mov	r3, r0
 8014334:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014336:	4b0b      	ldr	r3, [pc, #44]	; (8014364 <SD_CheckStatus+0x38>)
 8014338:	2201      	movs	r2, #1
 801433a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801433c:	f7ff ff7e 	bl	801423c <BSP_SD_GetCardState>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d107      	bne.n	8014356 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014346:	4b07      	ldr	r3, [pc, #28]	; (8014364 <SD_CheckStatus+0x38>)
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	b2db      	uxtb	r3, r3
 801434c:	f023 0301 	bic.w	r3, r3, #1
 8014350:	b2da      	uxtb	r2, r3
 8014352:	4b04      	ldr	r3, [pc, #16]	; (8014364 <SD_CheckStatus+0x38>)
 8014354:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014356:	4b03      	ldr	r3, [pc, #12]	; (8014364 <SD_CheckStatus+0x38>)
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	b2db      	uxtb	r3, r3
}
 801435c:	4618      	mov	r0, r3
 801435e:	3708      	adds	r7, #8
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	2400000d 	.word	0x2400000d

08014368 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	4603      	mov	r3, r0
 8014370:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014372:	f7ff ff09 	bl	8014188 <BSP_SD_Init>
 8014376:	4603      	mov	r3, r0
 8014378:	2b00      	cmp	r3, #0
 801437a:	d107      	bne.n	801438c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801437c:	79fb      	ldrb	r3, [r7, #7]
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff ffd4 	bl	801432c <SD_CheckStatus>
 8014384:	4603      	mov	r3, r0
 8014386:	461a      	mov	r2, r3
 8014388:	4b04      	ldr	r3, [pc, #16]	; (801439c <SD_initialize+0x34>)
 801438a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801438c:	4b03      	ldr	r3, [pc, #12]	; (801439c <SD_initialize+0x34>)
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	b2db      	uxtb	r3, r3
}
 8014392:	4618      	mov	r0, r3
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	2400000d 	.word	0x2400000d

080143a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	4603      	mov	r3, r0
 80143a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80143aa:	79fb      	ldrb	r3, [r7, #7]
 80143ac:	4618      	mov	r0, r3
 80143ae:	f7ff ffbd 	bl	801432c <SD_CheckStatus>
 80143b2:	4603      	mov	r3, r0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3708      	adds	r7, #8
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}

080143bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b086      	sub	sp, #24
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60b9      	str	r1, [r7, #8]
 80143c4:	607a      	str	r2, [r7, #4]
 80143c6:	603b      	str	r3, [r7, #0]
 80143c8:	4603      	mov	r3, r0
 80143ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143cc:	2301      	movs	r3, #1
 80143ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80143d4:	f7ff ff8c 	bl	80142f0 <SD_CheckStatusWithTimeout>
 80143d8:	4603      	mov	r3, r0
 80143da:	2b00      	cmp	r3, #0
 80143dc:	da01      	bge.n	80143e2 <SD_read+0x26>
  {
    return res;
 80143de:	7dfb      	ldrb	r3, [r7, #23]
 80143e0:	e03b      	b.n	801445a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80143e2:	683a      	ldr	r2, [r7, #0]
 80143e4:	6879      	ldr	r1, [r7, #4]
 80143e6:	68b8      	ldr	r0, [r7, #8]
 80143e8:	f7ff fef4 	bl	80141d4 <BSP_SD_ReadBlocks_DMA>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d132      	bne.n	8014458 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80143f2:	4b1c      	ldr	r3, [pc, #112]	; (8014464 <SD_read+0xa8>)
 80143f4:	2200      	movs	r2, #0
 80143f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80143f8:	f7ef fb44 	bl	8003a84 <HAL_GetTick>
 80143fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143fe:	bf00      	nop
 8014400:	4b18      	ldr	r3, [pc, #96]	; (8014464 <SD_read+0xa8>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d108      	bne.n	801441a <SD_read+0x5e>
 8014408:	f7ef fb3c 	bl	8003a84 <HAL_GetTick>
 801440c:	4602      	mov	r2, r0
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	1ad3      	subs	r3, r2, r3
 8014412:	f247 522f 	movw	r2, #29999	; 0x752f
 8014416:	4293      	cmp	r3, r2
 8014418:	d9f2      	bls.n	8014400 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801441a:	4b12      	ldr	r3, [pc, #72]	; (8014464 <SD_read+0xa8>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d102      	bne.n	8014428 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014422:	2301      	movs	r3, #1
 8014424:	75fb      	strb	r3, [r7, #23]
 8014426:	e017      	b.n	8014458 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014428:	4b0e      	ldr	r3, [pc, #56]	; (8014464 <SD_read+0xa8>)
 801442a:	2200      	movs	r2, #0
 801442c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801442e:	f7ef fb29 	bl	8003a84 <HAL_GetTick>
 8014432:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014434:	e007      	b.n	8014446 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014436:	f7ff ff01 	bl	801423c <BSP_SD_GetCardState>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d102      	bne.n	8014446 <SD_read+0x8a>
          {
            res = RES_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014444:	e008      	b.n	8014458 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014446:	f7ef fb1d 	bl	8003a84 <HAL_GetTick>
 801444a:	4602      	mov	r2, r0
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	1ad3      	subs	r3, r2, r3
 8014450:	f247 522f 	movw	r2, #29999	; 0x752f
 8014454:	4293      	cmp	r3, r2
 8014456:	d9ee      	bls.n	8014436 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014458:	7dfb      	ldrb	r3, [r7, #23]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3718      	adds	r7, #24
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	240015e0 	.word	0x240015e0

08014468 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b086      	sub	sp, #24
 801446c:	af00      	add	r7, sp, #0
 801446e:	60b9      	str	r1, [r7, #8]
 8014470:	607a      	str	r2, [r7, #4]
 8014472:	603b      	str	r3, [r7, #0]
 8014474:	4603      	mov	r3, r0
 8014476:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014478:	2301      	movs	r3, #1
 801447a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801447c:	4b24      	ldr	r3, [pc, #144]	; (8014510 <SD_write+0xa8>)
 801447e:	2200      	movs	r2, #0
 8014480:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014482:	f247 5030 	movw	r0, #30000	; 0x7530
 8014486:	f7ff ff33 	bl	80142f0 <SD_CheckStatusWithTimeout>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	da01      	bge.n	8014494 <SD_write+0x2c>
  {
    return res;
 8014490:	7dfb      	ldrb	r3, [r7, #23]
 8014492:	e038      	b.n	8014506 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014494:	683a      	ldr	r2, [r7, #0]
 8014496:	6879      	ldr	r1, [r7, #4]
 8014498:	68b8      	ldr	r0, [r7, #8]
 801449a:	f7ff feb5 	bl	8014208 <BSP_SD_WriteBlocks_DMA>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d12f      	bne.n	8014504 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80144a4:	f7ef faee 	bl	8003a84 <HAL_GetTick>
 80144a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80144aa:	bf00      	nop
 80144ac:	4b18      	ldr	r3, [pc, #96]	; (8014510 <SD_write+0xa8>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d108      	bne.n	80144c6 <SD_write+0x5e>
 80144b4:	f7ef fae6 	bl	8003a84 <HAL_GetTick>
 80144b8:	4602      	mov	r2, r0
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	1ad3      	subs	r3, r2, r3
 80144be:	f247 522f 	movw	r2, #29999	; 0x752f
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d9f2      	bls.n	80144ac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80144c6:	4b12      	ldr	r3, [pc, #72]	; (8014510 <SD_write+0xa8>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d102      	bne.n	80144d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80144ce:	2301      	movs	r3, #1
 80144d0:	75fb      	strb	r3, [r7, #23]
 80144d2:	e017      	b.n	8014504 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80144d4:	4b0e      	ldr	r3, [pc, #56]	; (8014510 <SD_write+0xa8>)
 80144d6:	2200      	movs	r2, #0
 80144d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144da:	f7ef fad3 	bl	8003a84 <HAL_GetTick>
 80144de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144e0:	e007      	b.n	80144f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144e2:	f7ff feab 	bl	801423c <BSP_SD_GetCardState>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d102      	bne.n	80144f2 <SD_write+0x8a>
          {
            res = RES_OK;
 80144ec:	2300      	movs	r3, #0
 80144ee:	75fb      	strb	r3, [r7, #23]
            break;
 80144f0:	e008      	b.n	8014504 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144f2:	f7ef fac7 	bl	8003a84 <HAL_GetTick>
 80144f6:	4602      	mov	r2, r0
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	1ad3      	subs	r3, r2, r3
 80144fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8014500:	4293      	cmp	r3, r2
 8014502:	d9ee      	bls.n	80144e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014504:	7dfb      	ldrb	r3, [r7, #23]
}
 8014506:	4618      	mov	r0, r3
 8014508:	3718      	adds	r7, #24
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	240015dc 	.word	0x240015dc

08014514 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b08c      	sub	sp, #48	; 0x30
 8014518:	af00      	add	r7, sp, #0
 801451a:	4603      	mov	r3, r0
 801451c:	603a      	str	r2, [r7, #0]
 801451e:	71fb      	strb	r3, [r7, #7]
 8014520:	460b      	mov	r3, r1
 8014522:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014524:	2301      	movs	r3, #1
 8014526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801452a:	4b25      	ldr	r3, [pc, #148]	; (80145c0 <SD_ioctl+0xac>)
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	b2db      	uxtb	r3, r3
 8014530:	f003 0301 	and.w	r3, r3, #1
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <SD_ioctl+0x28>
 8014538:	2303      	movs	r3, #3
 801453a:	e03c      	b.n	80145b6 <SD_ioctl+0xa2>

  switch (cmd)
 801453c:	79bb      	ldrb	r3, [r7, #6]
 801453e:	2b03      	cmp	r3, #3
 8014540:	d834      	bhi.n	80145ac <SD_ioctl+0x98>
 8014542:	a201      	add	r2, pc, #4	; (adr r2, 8014548 <SD_ioctl+0x34>)
 8014544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014548:	08014559 	.word	0x08014559
 801454c:	08014561 	.word	0x08014561
 8014550:	08014579 	.word	0x08014579
 8014554:	08014593 	.word	0x08014593
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014558:	2300      	movs	r3, #0
 801455a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801455e:	e028      	b.n	80145b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014560:	f107 0308 	add.w	r3, r7, #8
 8014564:	4618      	mov	r0, r3
 8014566:	f7ff fe79 	bl	801425c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801456a:	6a3a      	ldr	r2, [r7, #32]
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014570:	2300      	movs	r3, #0
 8014572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014576:	e01c      	b.n	80145b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014578:	f107 0308 	add.w	r3, r7, #8
 801457c:	4618      	mov	r0, r3
 801457e:	f7ff fe6d 	bl	801425c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014584:	b29a      	uxth	r2, r3
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801458a:	2300      	movs	r3, #0
 801458c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014590:	e00f      	b.n	80145b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014592:	f107 0308 	add.w	r3, r7, #8
 8014596:	4618      	mov	r0, r3
 8014598:	f7ff fe60 	bl	801425c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459e:	0a5a      	lsrs	r2, r3, #9
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80145a4:	2300      	movs	r3, #0
 80145a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145aa:	e002      	b.n	80145b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80145ac:	2304      	movs	r3, #4
 80145ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80145b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3730      	adds	r7, #48	; 0x30
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	2400000d 	.word	0x2400000d

080145c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80145c4:	b480      	push	{r7}
 80145c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80145c8:	4b03      	ldr	r3, [pc, #12]	; (80145d8 <BSP_SD_WriteCpltCallback+0x14>)
 80145ca:	2201      	movs	r2, #1
 80145cc:	601a      	str	r2, [r3, #0]
}
 80145ce:	bf00      	nop
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr
 80145d8:	240015dc 	.word	0x240015dc

080145dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80145dc:	b480      	push	{r7}
 80145de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80145e0:	4b03      	ldr	r3, [pc, #12]	; (80145f0 <BSP_SD_ReadCpltCallback+0x14>)
 80145e2:	2201      	movs	r2, #1
 80145e4:	601a      	str	r2, [r3, #0]
}
 80145e6:	bf00      	nop
 80145e8:	46bd      	mov	sp, r7
 80145ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ee:	4770      	bx	lr
 80145f0:	240015e0 	.word	0x240015e0

080145f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b084      	sub	sp, #16
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	460b      	mov	r3, r1
 80145fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014600:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014604:	f002 fd00 	bl	8017008 <USBD_static_malloc>
 8014608:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d109      	bne.n	8014624 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	32b0      	adds	r2, #176	; 0xb0
 801461a:	2100      	movs	r1, #0
 801461c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014620:	2302      	movs	r3, #2
 8014622:	e0d4      	b.n	80147ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014624:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014628:	2100      	movs	r1, #0
 801462a:	68f8      	ldr	r0, [r7, #12]
 801462c:	f002 fd7e 	bl	801712c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	32b0      	adds	r2, #176	; 0xb0
 801463a:	68f9      	ldr	r1, [r7, #12]
 801463c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	32b0      	adds	r2, #176	; 0xb0
 801464a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	7c1b      	ldrb	r3, [r3, #16]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d138      	bne.n	80146ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801465c:	4b5e      	ldr	r3, [pc, #376]	; (80147d8 <USBD_CDC_Init+0x1e4>)
 801465e:	7819      	ldrb	r1, [r3, #0]
 8014660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014664:	2202      	movs	r2, #2
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f002 fbab 	bl	8016dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801466c:	4b5a      	ldr	r3, [pc, #360]	; (80147d8 <USBD_CDC_Init+0x1e4>)
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	f003 020f 	and.w	r2, r3, #15
 8014674:	6879      	ldr	r1, [r7, #4]
 8014676:	4613      	mov	r3, r2
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	4413      	add	r3, r2
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	440b      	add	r3, r1
 8014680:	3324      	adds	r3, #36	; 0x24
 8014682:	2201      	movs	r2, #1
 8014684:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014686:	4b55      	ldr	r3, [pc, #340]	; (80147dc <USBD_CDC_Init+0x1e8>)
 8014688:	7819      	ldrb	r1, [r3, #0]
 801468a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801468e:	2202      	movs	r2, #2
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f002 fb96 	bl	8016dc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014696:	4b51      	ldr	r3, [pc, #324]	; (80147dc <USBD_CDC_Init+0x1e8>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	f003 020f 	and.w	r2, r3, #15
 801469e:	6879      	ldr	r1, [r7, #4]
 80146a0:	4613      	mov	r3, r2
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	4413      	add	r3, r2
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	440b      	add	r3, r1
 80146aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146ae:	2201      	movs	r2, #1
 80146b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80146b2:	4b4b      	ldr	r3, [pc, #300]	; (80147e0 <USBD_CDC_Init+0x1ec>)
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	f003 020f 	and.w	r2, r3, #15
 80146ba:	6879      	ldr	r1, [r7, #4]
 80146bc:	4613      	mov	r3, r2
 80146be:	009b      	lsls	r3, r3, #2
 80146c0:	4413      	add	r3, r2
 80146c2:	009b      	lsls	r3, r3, #2
 80146c4:	440b      	add	r3, r1
 80146c6:	3326      	adds	r3, #38	; 0x26
 80146c8:	2210      	movs	r2, #16
 80146ca:	801a      	strh	r2, [r3, #0]
 80146cc:	e035      	b.n	801473a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146ce:	4b42      	ldr	r3, [pc, #264]	; (80147d8 <USBD_CDC_Init+0x1e4>)
 80146d0:	7819      	ldrb	r1, [r3, #0]
 80146d2:	2340      	movs	r3, #64	; 0x40
 80146d4:	2202      	movs	r2, #2
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f002 fb73 	bl	8016dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146dc:	4b3e      	ldr	r3, [pc, #248]	; (80147d8 <USBD_CDC_Init+0x1e4>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	f003 020f 	and.w	r2, r3, #15
 80146e4:	6879      	ldr	r1, [r7, #4]
 80146e6:	4613      	mov	r3, r2
 80146e8:	009b      	lsls	r3, r3, #2
 80146ea:	4413      	add	r3, r2
 80146ec:	009b      	lsls	r3, r3, #2
 80146ee:	440b      	add	r3, r1
 80146f0:	3324      	adds	r3, #36	; 0x24
 80146f2:	2201      	movs	r2, #1
 80146f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146f6:	4b39      	ldr	r3, [pc, #228]	; (80147dc <USBD_CDC_Init+0x1e8>)
 80146f8:	7819      	ldrb	r1, [r3, #0]
 80146fa:	2340      	movs	r3, #64	; 0x40
 80146fc:	2202      	movs	r2, #2
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f002 fb5f 	bl	8016dc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014704:	4b35      	ldr	r3, [pc, #212]	; (80147dc <USBD_CDC_Init+0x1e8>)
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	f003 020f 	and.w	r2, r3, #15
 801470c:	6879      	ldr	r1, [r7, #4]
 801470e:	4613      	mov	r3, r2
 8014710:	009b      	lsls	r3, r3, #2
 8014712:	4413      	add	r3, r2
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	440b      	add	r3, r1
 8014718:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801471c:	2201      	movs	r2, #1
 801471e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014720:	4b2f      	ldr	r3, [pc, #188]	; (80147e0 <USBD_CDC_Init+0x1ec>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	f003 020f 	and.w	r2, r3, #15
 8014728:	6879      	ldr	r1, [r7, #4]
 801472a:	4613      	mov	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	4413      	add	r3, r2
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	440b      	add	r3, r1
 8014734:	3326      	adds	r3, #38	; 0x26
 8014736:	2210      	movs	r2, #16
 8014738:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801473a:	4b29      	ldr	r3, [pc, #164]	; (80147e0 <USBD_CDC_Init+0x1ec>)
 801473c:	7819      	ldrb	r1, [r3, #0]
 801473e:	2308      	movs	r3, #8
 8014740:	2203      	movs	r2, #3
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f002 fb3d 	bl	8016dc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014748:	4b25      	ldr	r3, [pc, #148]	; (80147e0 <USBD_CDC_Init+0x1ec>)
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	f003 020f 	and.w	r2, r3, #15
 8014750:	6879      	ldr	r1, [r7, #4]
 8014752:	4613      	mov	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4413      	add	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	440b      	add	r3, r1
 801475c:	3324      	adds	r3, #36	; 0x24
 801475e:	2201      	movs	r2, #1
 8014760:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	2200      	movs	r2, #0
 8014766:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	33b0      	adds	r3, #176	; 0xb0
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	4413      	add	r3, r2
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	2200      	movs	r2, #0
 8014782:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2200      	movs	r2, #0
 801478a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014794:	2b00      	cmp	r3, #0
 8014796:	d101      	bne.n	801479c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014798:	2302      	movs	r3, #2
 801479a:	e018      	b.n	80147ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	7c1b      	ldrb	r3, [r3, #16]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d10a      	bne.n	80147ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147a4:	4b0d      	ldr	r3, [pc, #52]	; (80147dc <USBD_CDC_Init+0x1e8>)
 80147a6:	7819      	ldrb	r1, [r3, #0]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f002 fbf4 	bl	8016fa0 <USBD_LL_PrepareReceive>
 80147b8:	e008      	b.n	80147cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147ba:	4b08      	ldr	r3, [pc, #32]	; (80147dc <USBD_CDC_Init+0x1e8>)
 80147bc:	7819      	ldrb	r1, [r3, #0]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147c4:	2340      	movs	r3, #64	; 0x40
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f002 fbea 	bl	8016fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3710      	adds	r7, #16
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	24000097 	.word	0x24000097
 80147dc:	24000098 	.word	0x24000098
 80147e0:	24000099 	.word	0x24000099

080147e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	460b      	mov	r3, r1
 80147ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80147f0:	4b3a      	ldr	r3, [pc, #232]	; (80148dc <USBD_CDC_DeInit+0xf8>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	4619      	mov	r1, r3
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f002 fb09 	bl	8016e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80147fc:	4b37      	ldr	r3, [pc, #220]	; (80148dc <USBD_CDC_DeInit+0xf8>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	f003 020f 	and.w	r2, r3, #15
 8014804:	6879      	ldr	r1, [r7, #4]
 8014806:	4613      	mov	r3, r2
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	4413      	add	r3, r2
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	440b      	add	r3, r1
 8014810:	3324      	adds	r3, #36	; 0x24
 8014812:	2200      	movs	r2, #0
 8014814:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014816:	4b32      	ldr	r3, [pc, #200]	; (80148e0 <USBD_CDC_DeInit+0xfc>)
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	4619      	mov	r1, r3
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f002 faf6 	bl	8016e0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014822:	4b2f      	ldr	r3, [pc, #188]	; (80148e0 <USBD_CDC_DeInit+0xfc>)
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	f003 020f 	and.w	r2, r3, #15
 801482a:	6879      	ldr	r1, [r7, #4]
 801482c:	4613      	mov	r3, r2
 801482e:	009b      	lsls	r3, r3, #2
 8014830:	4413      	add	r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	440b      	add	r3, r1
 8014836:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801483a:	2200      	movs	r2, #0
 801483c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801483e:	4b29      	ldr	r3, [pc, #164]	; (80148e4 <USBD_CDC_DeInit+0x100>)
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	4619      	mov	r1, r3
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f002 fae2 	bl	8016e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801484a:	4b26      	ldr	r3, [pc, #152]	; (80148e4 <USBD_CDC_DeInit+0x100>)
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	f003 020f 	and.w	r2, r3, #15
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	4613      	mov	r3, r2
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	4413      	add	r3, r2
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	440b      	add	r3, r1
 801485e:	3324      	adds	r3, #36	; 0x24
 8014860:	2200      	movs	r2, #0
 8014862:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014864:	4b1f      	ldr	r3, [pc, #124]	; (80148e4 <USBD_CDC_DeInit+0x100>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	f003 020f 	and.w	r2, r3, #15
 801486c:	6879      	ldr	r1, [r7, #4]
 801486e:	4613      	mov	r3, r2
 8014870:	009b      	lsls	r3, r3, #2
 8014872:	4413      	add	r3, r2
 8014874:	009b      	lsls	r3, r3, #2
 8014876:	440b      	add	r3, r1
 8014878:	3326      	adds	r3, #38	; 0x26
 801487a:	2200      	movs	r2, #0
 801487c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	32b0      	adds	r2, #176	; 0xb0
 8014888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d01f      	beq.n	80148d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	33b0      	adds	r3, #176	; 0xb0
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	4413      	add	r3, r2
 801489e:	685b      	ldr	r3, [r3, #4]
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	32b0      	adds	r2, #176	; 0xb0
 80148ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f002 fbb6 	bl	8017024 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	32b0      	adds	r2, #176	; 0xb0
 80148c2:	2100      	movs	r1, #0
 80148c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80148d0:	2300      	movs	r3, #0
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3708      	adds	r7, #8
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	24000097 	.word	0x24000097
 80148e0:	24000098 	.word	0x24000098
 80148e4:	24000099 	.word	0x24000099

080148e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	32b0      	adds	r2, #176	; 0xb0
 80148fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014900:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014902:	2300      	movs	r3, #0
 8014904:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014906:	2300      	movs	r3, #0
 8014908:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801490a:	2300      	movs	r3, #0
 801490c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d101      	bne.n	8014918 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014914:	2303      	movs	r3, #3
 8014916:	e0bf      	b.n	8014a98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014920:	2b00      	cmp	r3, #0
 8014922:	d050      	beq.n	80149c6 <USBD_CDC_Setup+0xde>
 8014924:	2b20      	cmp	r3, #32
 8014926:	f040 80af 	bne.w	8014a88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	88db      	ldrh	r3, [r3, #6]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d03a      	beq.n	80149a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	b25b      	sxtb	r3, r3
 8014938:	2b00      	cmp	r3, #0
 801493a:	da1b      	bge.n	8014974 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	33b0      	adds	r3, #176	; 0xb0
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	689b      	ldr	r3, [r3, #8]
 801494e:	683a      	ldr	r2, [r7, #0]
 8014950:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014952:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014954:	683a      	ldr	r2, [r7, #0]
 8014956:	88d2      	ldrh	r2, [r2, #6]
 8014958:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	88db      	ldrh	r3, [r3, #6]
 801495e:	2b07      	cmp	r3, #7
 8014960:	bf28      	it	cs
 8014962:	2307      	movcs	r3, #7
 8014964:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	89fa      	ldrh	r2, [r7, #14]
 801496a:	4619      	mov	r1, r3
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f001 fd89 	bl	8016484 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014972:	e090      	b.n	8014a96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	785a      	ldrb	r2, [r3, #1]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	88db      	ldrh	r3, [r3, #6]
 8014982:	2b3f      	cmp	r3, #63	; 0x3f
 8014984:	d803      	bhi.n	801498e <USBD_CDC_Setup+0xa6>
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	88db      	ldrh	r3, [r3, #6]
 801498a:	b2da      	uxtb	r2, r3
 801498c:	e000      	b.n	8014990 <USBD_CDC_Setup+0xa8>
 801498e:	2240      	movs	r2, #64	; 0x40
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014996:	6939      	ldr	r1, [r7, #16]
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801499e:	461a      	mov	r2, r3
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f001 fd9b 	bl	80164dc <USBD_CtlPrepareRx>
      break;
 80149a6:	e076      	b.n	8014a96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149ae:	687a      	ldr	r2, [r7, #4]
 80149b0:	33b0      	adds	r3, #176	; 0xb0
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	4413      	add	r3, r2
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	689b      	ldr	r3, [r3, #8]
 80149ba:	683a      	ldr	r2, [r7, #0]
 80149bc:	7850      	ldrb	r0, [r2, #1]
 80149be:	2200      	movs	r2, #0
 80149c0:	6839      	ldr	r1, [r7, #0]
 80149c2:	4798      	blx	r3
      break;
 80149c4:	e067      	b.n	8014a96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	785b      	ldrb	r3, [r3, #1]
 80149ca:	2b0b      	cmp	r3, #11
 80149cc:	d851      	bhi.n	8014a72 <USBD_CDC_Setup+0x18a>
 80149ce:	a201      	add	r2, pc, #4	; (adr r2, 80149d4 <USBD_CDC_Setup+0xec>)
 80149d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149d4:	08014a05 	.word	0x08014a05
 80149d8:	08014a81 	.word	0x08014a81
 80149dc:	08014a73 	.word	0x08014a73
 80149e0:	08014a73 	.word	0x08014a73
 80149e4:	08014a73 	.word	0x08014a73
 80149e8:	08014a73 	.word	0x08014a73
 80149ec:	08014a73 	.word	0x08014a73
 80149f0:	08014a73 	.word	0x08014a73
 80149f4:	08014a73 	.word	0x08014a73
 80149f8:	08014a73 	.word	0x08014a73
 80149fc:	08014a2f 	.word	0x08014a2f
 8014a00:	08014a59 	.word	0x08014a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b03      	cmp	r3, #3
 8014a0e:	d107      	bne.n	8014a20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a10:	f107 030a 	add.w	r3, r7, #10
 8014a14:	2202      	movs	r2, #2
 8014a16:	4619      	mov	r1, r3
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f001 fd33 	bl	8016484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a1e:	e032      	b.n	8014a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a20:	6839      	ldr	r1, [r7, #0]
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f001 fcbd 	bl	80163a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a28:	2303      	movs	r3, #3
 8014a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8014a2c:	e02b      	b.n	8014a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	2b03      	cmp	r3, #3
 8014a38:	d107      	bne.n	8014a4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a3a:	f107 030d 	add.w	r3, r7, #13
 8014a3e:	2201      	movs	r2, #1
 8014a40:	4619      	mov	r1, r3
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f001 fd1e 	bl	8016484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a48:	e01d      	b.n	8014a86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a4a:	6839      	ldr	r1, [r7, #0]
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f001 fca8 	bl	80163a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a52:	2303      	movs	r3, #3
 8014a54:	75fb      	strb	r3, [r7, #23]
          break;
 8014a56:	e016      	b.n	8014a86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	2b03      	cmp	r3, #3
 8014a62:	d00f      	beq.n	8014a84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f001 fc9b 	bl	80163a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a6c:	2303      	movs	r3, #3
 8014a6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a70:	e008      	b.n	8014a84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a72:	6839      	ldr	r1, [r7, #0]
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f001 fc94 	bl	80163a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8014a7a:	2303      	movs	r3, #3
 8014a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8014a7e:	e002      	b.n	8014a86 <USBD_CDC_Setup+0x19e>
          break;
 8014a80:	bf00      	nop
 8014a82:	e008      	b.n	8014a96 <USBD_CDC_Setup+0x1ae>
          break;
 8014a84:	bf00      	nop
      }
      break;
 8014a86:	e006      	b.n	8014a96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a88:	6839      	ldr	r1, [r7, #0]
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f001 fc89 	bl	80163a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8014a90:	2303      	movs	r3, #3
 8014a92:	75fb      	strb	r3, [r7, #23]
      break;
 8014a94:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3718      	adds	r7, #24
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}

08014aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	460b      	mov	r3, r1
 8014aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	32b0      	adds	r2, #176	; 0xb0
 8014abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d101      	bne.n	8014aca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014ac6:	2303      	movs	r3, #3
 8014ac8:	e065      	b.n	8014b96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	32b0      	adds	r2, #176	; 0xb0
 8014ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ada:	78fb      	ldrb	r3, [r7, #3]
 8014adc:	f003 020f 	and.w	r2, r3, #15
 8014ae0:	6879      	ldr	r1, [r7, #4]
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	4413      	add	r3, r2
 8014ae8:	009b      	lsls	r3, r3, #2
 8014aea:	440b      	add	r3, r1
 8014aec:	3318      	adds	r3, #24
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d02f      	beq.n	8014b54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014af4:	78fb      	ldrb	r3, [r7, #3]
 8014af6:	f003 020f 	and.w	r2, r3, #15
 8014afa:	6879      	ldr	r1, [r7, #4]
 8014afc:	4613      	mov	r3, r2
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	4413      	add	r3, r2
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	440b      	add	r3, r1
 8014b06:	3318      	adds	r3, #24
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	78fb      	ldrb	r3, [r7, #3]
 8014b0c:	f003 010f 	and.w	r1, r3, #15
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	460b      	mov	r3, r1
 8014b14:	00db      	lsls	r3, r3, #3
 8014b16:	440b      	add	r3, r1
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	4403      	add	r3, r0
 8014b1c:	3344      	adds	r3, #68	; 0x44
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b24:	fb01 f303 	mul.w	r3, r1, r3
 8014b28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d112      	bne.n	8014b54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014b2e:	78fb      	ldrb	r3, [r7, #3]
 8014b30:	f003 020f 	and.w	r2, r3, #15
 8014b34:	6879      	ldr	r1, [r7, #4]
 8014b36:	4613      	mov	r3, r2
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	4413      	add	r3, r2
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	440b      	add	r3, r1
 8014b40:	3318      	adds	r3, #24
 8014b42:	2200      	movs	r2, #0
 8014b44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b46:	78f9      	ldrb	r1, [r7, #3]
 8014b48:	2300      	movs	r3, #0
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f002 fa06 	bl	8016f5e <USBD_LL_Transmit>
 8014b52:	e01f      	b.n	8014b94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	2200      	movs	r2, #0
 8014b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b62:	687a      	ldr	r2, [r7, #4]
 8014b64:	33b0      	adds	r3, #176	; 0xb0
 8014b66:	009b      	lsls	r3, r3, #2
 8014b68:	4413      	add	r3, r2
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	691b      	ldr	r3, [r3, #16]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d010      	beq.n	8014b94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	33b0      	adds	r3, #176	; 0xb0
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	4413      	add	r3, r2
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	691b      	ldr	r3, [r3, #16]
 8014b84:	68ba      	ldr	r2, [r7, #8]
 8014b86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b8a:	68ba      	ldr	r2, [r7, #8]
 8014b8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b90:	78fa      	ldrb	r2, [r7, #3]
 8014b92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b94:	2300      	movs	r3, #0
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b084      	sub	sp, #16
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	460b      	mov	r3, r1
 8014ba8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	32b0      	adds	r2, #176	; 0xb0
 8014bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	32b0      	adds	r2, #176	; 0xb0
 8014bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014bcc:	2303      	movs	r3, #3
 8014bce:	e01a      	b.n	8014c06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014bd0:	78fb      	ldrb	r3, [r7, #3]
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f002 fa04 	bl	8016fe2 <USBD_LL_GetRxDataSize>
 8014bda:	4602      	mov	r2, r0
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014be8:	687a      	ldr	r2, [r7, #4]
 8014bea:	33b0      	adds	r3, #176	; 0xb0
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	4413      	add	r3, r2
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	68fa      	ldr	r2, [r7, #12]
 8014bf6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014bfa:	68fa      	ldr	r2, [r7, #12]
 8014bfc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014c00:	4611      	mov	r1, r2
 8014c02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014c04:	2300      	movs	r3, #0
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3710      	adds	r7, #16
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}

08014c0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c0e:	b580      	push	{r7, lr}
 8014c10:	b084      	sub	sp, #16
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	32b0      	adds	r2, #176	; 0xb0
 8014c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d101      	bne.n	8014c30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c2c:	2303      	movs	r3, #3
 8014c2e:	e025      	b.n	8014c7c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	33b0      	adds	r3, #176	; 0xb0
 8014c3a:	009b      	lsls	r3, r3, #2
 8014c3c:	4413      	add	r3, r2
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d01a      	beq.n	8014c7a <USBD_CDC_EP0_RxReady+0x6c>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c4a:	2bff      	cmp	r3, #255	; 0xff
 8014c4c:	d015      	beq.n	8014c7a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	33b0      	adds	r3, #176	; 0xb0
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	4413      	add	r3, r2
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	68fa      	ldr	r2, [r7, #12]
 8014c62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c68:	68fa      	ldr	r2, [r7, #12]
 8014c6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c6e:	b292      	uxth	r2, r2
 8014c70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	22ff      	movs	r2, #255	; 0xff
 8014c76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b086      	sub	sp, #24
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c8c:	2182      	movs	r1, #130	; 0x82
 8014c8e:	4818      	ldr	r0, [pc, #96]	; (8014cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c90:	f000 fd4f 	bl	8015732 <USBD_GetEpDesc>
 8014c94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c96:	2101      	movs	r1, #1
 8014c98:	4815      	ldr	r0, [pc, #84]	; (8014cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c9a:	f000 fd4a 	bl	8015732 <USBD_GetEpDesc>
 8014c9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ca0:	2181      	movs	r1, #129	; 0x81
 8014ca2:	4813      	ldr	r0, [pc, #76]	; (8014cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ca4:	f000 fd45 	bl	8015732 <USBD_GetEpDesc>
 8014ca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d002      	beq.n	8014cb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	2210      	movs	r2, #16
 8014cb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d006      	beq.n	8014cca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cc4:	711a      	strb	r2, [r3, #4]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d006      	beq.n	8014cde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cd8:	711a      	strb	r2, [r3, #4]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2243      	movs	r2, #67	; 0x43
 8014ce2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014ce4:	4b02      	ldr	r3, [pc, #8]	; (8014cf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	24000054 	.word	0x24000054

08014cf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b086      	sub	sp, #24
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014cfc:	2182      	movs	r1, #130	; 0x82
 8014cfe:	4818      	ldr	r0, [pc, #96]	; (8014d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d00:	f000 fd17 	bl	8015732 <USBD_GetEpDesc>
 8014d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d06:	2101      	movs	r1, #1
 8014d08:	4815      	ldr	r0, [pc, #84]	; (8014d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d0a:	f000 fd12 	bl	8015732 <USBD_GetEpDesc>
 8014d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d10:	2181      	movs	r1, #129	; 0x81
 8014d12:	4813      	ldr	r0, [pc, #76]	; (8014d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d14:	f000 fd0d 	bl	8015732 <USBD_GetEpDesc>
 8014d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d002      	beq.n	8014d26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	2210      	movs	r2, #16
 8014d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d006      	beq.n	8014d3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	711a      	strb	r2, [r3, #4]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f042 0202 	orr.w	r2, r2, #2
 8014d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d006      	beq.n	8014d4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2200      	movs	r2, #0
 8014d44:	711a      	strb	r2, [r3, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	f042 0202 	orr.w	r2, r2, #2
 8014d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2243      	movs	r2, #67	; 0x43
 8014d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d54:	4b02      	ldr	r3, [pc, #8]	; (8014d60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3718      	adds	r7, #24
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	24000054 	.word	0x24000054

08014d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b086      	sub	sp, #24
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d6c:	2182      	movs	r1, #130	; 0x82
 8014d6e:	4818      	ldr	r0, [pc, #96]	; (8014dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d70:	f000 fcdf 	bl	8015732 <USBD_GetEpDesc>
 8014d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d76:	2101      	movs	r1, #1
 8014d78:	4815      	ldr	r0, [pc, #84]	; (8014dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d7a:	f000 fcda 	bl	8015732 <USBD_GetEpDesc>
 8014d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d80:	2181      	movs	r1, #129	; 0x81
 8014d82:	4813      	ldr	r0, [pc, #76]	; (8014dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d84:	f000 fcd5 	bl	8015732 <USBD_GetEpDesc>
 8014d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d002      	beq.n	8014d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	2210      	movs	r2, #16
 8014d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d006      	beq.n	8014daa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014da4:	711a      	strb	r2, [r3, #4]
 8014da6:	2200      	movs	r2, #0
 8014da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d006      	beq.n	8014dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2200      	movs	r2, #0
 8014db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014db8:	711a      	strb	r2, [r3, #4]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2243      	movs	r2, #67	; 0x43
 8014dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014dc4:	4b02      	ldr	r3, [pc, #8]	; (8014dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3718      	adds	r7, #24
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	24000054 	.word	0x24000054

08014dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	b083      	sub	sp, #12
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	220a      	movs	r2, #10
 8014de0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014de2:	4b03      	ldr	r3, [pc, #12]	; (8014df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	370c      	adds	r7, #12
 8014de8:	46bd      	mov	sp, r7
 8014dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dee:	4770      	bx	lr
 8014df0:	24000010 	.word	0x24000010

08014df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b083      	sub	sp, #12
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d101      	bne.n	8014e08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014e04:	2303      	movs	r3, #3
 8014e06:	e009      	b.n	8014e1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e0e:	687a      	ldr	r2, [r7, #4]
 8014e10:	33b0      	adds	r3, #176	; 0xb0
 8014e12:	009b      	lsls	r3, r3, #2
 8014e14:	4413      	add	r3, r2
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e1a:	2300      	movs	r3, #0
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	370c      	adds	r7, #12
 8014e20:	46bd      	mov	sp, r7
 8014e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e26:	4770      	bx	lr

08014e28 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b087      	sub	sp, #28
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	32b0      	adds	r2, #176	; 0xb0
 8014e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e42:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d101      	bne.n	8014e4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e4a:	2303      	movs	r3, #3
 8014e4c:	e008      	b.n	8014e60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	68ba      	ldr	r2, [r7, #8]
 8014e52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e5e:	2300      	movs	r3, #0
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	371c      	adds	r7, #28
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b085      	sub	sp, #20
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	32b0      	adds	r2, #176	; 0xb0
 8014e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d101      	bne.n	8014e90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e8c:	2303      	movs	r3, #3
 8014e8e:	e004      	b.n	8014e9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	683a      	ldr	r2, [r7, #0]
 8014e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014e98:	2300      	movs	r3, #0
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3714      	adds	r7, #20
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea4:	4770      	bx	lr
	...

08014ea8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	32b0      	adds	r2, #176	; 0xb0
 8014eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ebe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d101      	bne.n	8014ece <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014eca:	2303      	movs	r3, #3
 8014ecc:	e025      	b.n	8014f1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d11f      	bne.n	8014f18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	2201      	movs	r2, #1
 8014edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ee0:	4b10      	ldr	r3, [pc, #64]	; (8014f24 <USBD_CDC_TransmitPacket+0x7c>)
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	f003 020f 	and.w	r2, r3, #15
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	4413      	add	r3, r2
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	4403      	add	r3, r0
 8014efa:	3318      	adds	r3, #24
 8014efc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014efe:	4b09      	ldr	r3, [pc, #36]	; (8014f24 <USBD_CDC_TransmitPacket+0x7c>)
 8014f00:	7819      	ldrb	r1, [r3, #0]
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f002 f825 	bl	8016f5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f14:	2300      	movs	r3, #0
 8014f16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3710      	adds	r7, #16
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	24000097 	.word	0x24000097

08014f28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	32b0      	adds	r2, #176	; 0xb0
 8014f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	32b0      	adds	r2, #176	; 0xb0
 8014f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d101      	bne.n	8014f56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f52:	2303      	movs	r3, #3
 8014f54:	e018      	b.n	8014f88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	7c1b      	ldrb	r3, [r3, #16]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d10a      	bne.n	8014f74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f5e:	4b0c      	ldr	r3, [pc, #48]	; (8014f90 <USBD_CDC_ReceivePacket+0x68>)
 8014f60:	7819      	ldrb	r1, [r3, #0]
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f002 f817 	bl	8016fa0 <USBD_LL_PrepareReceive>
 8014f72:	e008      	b.n	8014f86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f74:	4b06      	ldr	r3, [pc, #24]	; (8014f90 <USBD_CDC_ReceivePacket+0x68>)
 8014f76:	7819      	ldrb	r1, [r3, #0]
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f7e:	2340      	movs	r3, #64	; 0x40
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f002 f80d 	bl	8016fa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f86:	2300      	movs	r3, #0
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	3710      	adds	r7, #16
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	24000098 	.word	0x24000098

08014f94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b086      	sub	sp, #24
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	60b9      	str	r1, [r7, #8]
 8014f9e:	4613      	mov	r3, r2
 8014fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d101      	bne.n	8014fac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	e01f      	b.n	8014fec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d003      	beq.n	8014fd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	68ba      	ldr	r2, [r7, #8]
 8014fce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	2201      	movs	r2, #1
 8014fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	79fa      	ldrb	r2, [r7, #7]
 8014fde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014fe0:	68f8      	ldr	r0, [r7, #12]
 8014fe2:	f001 fe81 	bl	8016ce8 <USBD_LL_Init>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3718      	adds	r7, #24
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014ffe:	2300      	movs	r3, #0
 8015000:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d101      	bne.n	801500c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015008:	2303      	movs	r3, #3
 801500a:	e025      	b.n	8015058 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	683a      	ldr	r2, [r7, #0]
 8015010:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	32ae      	adds	r2, #174	; 0xae
 801501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015024:	2b00      	cmp	r3, #0
 8015026:	d00f      	beq.n	8015048 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	32ae      	adds	r2, #174	; 0xae
 8015032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015038:	f107 020e 	add.w	r2, r7, #14
 801503c:	4610      	mov	r0, r2
 801503e:	4798      	blx	r3
 8015040:	4602      	mov	r2, r0
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801504e:	1c5a      	adds	r2, r3, #1
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015056:	2300      	movs	r3, #0
}
 8015058:	4618      	mov	r0, r3
 801505a:	3710      	adds	r7, #16
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f001 fe8f 	bl	8016d8c <USBD_LL_Start>
 801506e:	4603      	mov	r3, r0
}
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015078:	b480      	push	{r7}
 801507a:	b083      	sub	sp, #12
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015080:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015082:	4618      	mov	r0, r3
 8015084:	370c      	adds	r7, #12
 8015086:	46bd      	mov	sp, r7
 8015088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508c:	4770      	bx	lr

0801508e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801508e:	b580      	push	{r7, lr}
 8015090:	b084      	sub	sp, #16
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
 8015096:	460b      	mov	r3, r1
 8015098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801509a:	2300      	movs	r3, #0
 801509c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d009      	beq.n	80150bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	78fa      	ldrb	r2, [r7, #3]
 80150b2:	4611      	mov	r1, r2
 80150b4:	6878      	ldr	r0, [r7, #4]
 80150b6:	4798      	blx	r3
 80150b8:	4603      	mov	r3, r0
 80150ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150c6:	b580      	push	{r7, lr}
 80150c8:	b084      	sub	sp, #16
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
 80150ce:	460b      	mov	r3, r1
 80150d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150d2:	2300      	movs	r3, #0
 80150d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	78fa      	ldrb	r2, [r7, #3]
 80150e0:	4611      	mov	r1, r2
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	4798      	blx	r3
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d001      	beq.n	80150f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150ec:	2303      	movs	r3, #3
 80150ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b084      	sub	sp, #16
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
 8015102:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801510a:	6839      	ldr	r1, [r7, #0]
 801510c:	4618      	mov	r0, r3
 801510e:	f001 f90e 	bl	801632e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2201      	movs	r2, #1
 8015116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015120:	461a      	mov	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801512e:	f003 031f 	and.w	r3, r3, #31
 8015132:	2b02      	cmp	r3, #2
 8015134:	d01a      	beq.n	801516c <USBD_LL_SetupStage+0x72>
 8015136:	2b02      	cmp	r3, #2
 8015138:	d822      	bhi.n	8015180 <USBD_LL_SetupStage+0x86>
 801513a:	2b00      	cmp	r3, #0
 801513c:	d002      	beq.n	8015144 <USBD_LL_SetupStage+0x4a>
 801513e:	2b01      	cmp	r3, #1
 8015140:	d00a      	beq.n	8015158 <USBD_LL_SetupStage+0x5e>
 8015142:	e01d      	b.n	8015180 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801514a:	4619      	mov	r1, r3
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f000 fb65 	bl	801581c <USBD_StdDevReq>
 8015152:	4603      	mov	r3, r0
 8015154:	73fb      	strb	r3, [r7, #15]
      break;
 8015156:	e020      	b.n	801519a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801515e:	4619      	mov	r1, r3
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 fbcd 	bl	8015900 <USBD_StdItfReq>
 8015166:	4603      	mov	r3, r0
 8015168:	73fb      	strb	r3, [r7, #15]
      break;
 801516a:	e016      	b.n	801519a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015172:	4619      	mov	r1, r3
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 fc2f 	bl	80159d8 <USBD_StdEPReq>
 801517a:	4603      	mov	r3, r0
 801517c:	73fb      	strb	r3, [r7, #15]
      break;
 801517e:	e00c      	b.n	801519a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801518a:	b2db      	uxtb	r3, r3
 801518c:	4619      	mov	r1, r3
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f001 fe5c 	bl	8016e4c <USBD_LL_StallEP>
 8015194:	4603      	mov	r3, r0
 8015196:	73fb      	strb	r3, [r7, #15]
      break;
 8015198:	bf00      	nop
  }

  return ret;
 801519a:	7bfb      	ldrb	r3, [r7, #15]
}
 801519c:	4618      	mov	r0, r3
 801519e:	3710      	adds	r7, #16
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b086      	sub	sp, #24
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	460b      	mov	r3, r1
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80151b2:	2300      	movs	r3, #0
 80151b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151b6:	7afb      	ldrb	r3, [r7, #11]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d16e      	bne.n	801529a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80151c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80151ca:	2b03      	cmp	r3, #3
 80151cc:	f040 8098 	bne.w	8015300 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	689a      	ldr	r2, [r3, #8]
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d913      	bls.n	8015204 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	689a      	ldr	r2, [r3, #8]
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	1ad2      	subs	r2, r2, r3
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	68da      	ldr	r2, [r3, #12]
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	689b      	ldr	r3, [r3, #8]
 80151f2:	4293      	cmp	r3, r2
 80151f4:	bf28      	it	cs
 80151f6:	4613      	movcs	r3, r2
 80151f8:	461a      	mov	r2, r3
 80151fa:	6879      	ldr	r1, [r7, #4]
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f001 f98a 	bl	8016516 <USBD_CtlContinueRx>
 8015202:	e07d      	b.n	8015300 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801520a:	f003 031f 	and.w	r3, r3, #31
 801520e:	2b02      	cmp	r3, #2
 8015210:	d014      	beq.n	801523c <USBD_LL_DataOutStage+0x98>
 8015212:	2b02      	cmp	r3, #2
 8015214:	d81d      	bhi.n	8015252 <USBD_LL_DataOutStage+0xae>
 8015216:	2b00      	cmp	r3, #0
 8015218:	d002      	beq.n	8015220 <USBD_LL_DataOutStage+0x7c>
 801521a:	2b01      	cmp	r3, #1
 801521c:	d003      	beq.n	8015226 <USBD_LL_DataOutStage+0x82>
 801521e:	e018      	b.n	8015252 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015220:	2300      	movs	r3, #0
 8015222:	75bb      	strb	r3, [r7, #22]
            break;
 8015224:	e018      	b.n	8015258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801522c:	b2db      	uxtb	r3, r3
 801522e:	4619      	mov	r1, r3
 8015230:	68f8      	ldr	r0, [r7, #12]
 8015232:	f000 fa64 	bl	80156fe <USBD_CoreFindIF>
 8015236:	4603      	mov	r3, r0
 8015238:	75bb      	strb	r3, [r7, #22]
            break;
 801523a:	e00d      	b.n	8015258 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015242:	b2db      	uxtb	r3, r3
 8015244:	4619      	mov	r1, r3
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	f000 fa66 	bl	8015718 <USBD_CoreFindEP>
 801524c:	4603      	mov	r3, r0
 801524e:	75bb      	strb	r3, [r7, #22]
            break;
 8015250:	e002      	b.n	8015258 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015252:	2300      	movs	r3, #0
 8015254:	75bb      	strb	r3, [r7, #22]
            break;
 8015256:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015258:	7dbb      	ldrb	r3, [r7, #22]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d119      	bne.n	8015292 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015264:	b2db      	uxtb	r3, r3
 8015266:	2b03      	cmp	r3, #3
 8015268:	d113      	bne.n	8015292 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801526a:	7dba      	ldrb	r2, [r7, #22]
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	32ae      	adds	r2, #174	; 0xae
 8015270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015274:	691b      	ldr	r3, [r3, #16]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d00b      	beq.n	8015292 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801527a:	7dba      	ldrb	r2, [r7, #22]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015282:	7dba      	ldrb	r2, [r7, #22]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	32ae      	adds	r2, #174	; 0xae
 8015288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801528c:	691b      	ldr	r3, [r3, #16]
 801528e:	68f8      	ldr	r0, [r7, #12]
 8015290:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015292:	68f8      	ldr	r0, [r7, #12]
 8015294:	f001 f950 	bl	8016538 <USBD_CtlSendStatus>
 8015298:	e032      	b.n	8015300 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801529a:	7afb      	ldrb	r3, [r7, #11]
 801529c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	4619      	mov	r1, r3
 80152a4:	68f8      	ldr	r0, [r7, #12]
 80152a6:	f000 fa37 	bl	8015718 <USBD_CoreFindEP>
 80152aa:	4603      	mov	r3, r0
 80152ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152ae:	7dbb      	ldrb	r3, [r7, #22]
 80152b0:	2bff      	cmp	r3, #255	; 0xff
 80152b2:	d025      	beq.n	8015300 <USBD_LL_DataOutStage+0x15c>
 80152b4:	7dbb      	ldrb	r3, [r7, #22]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d122      	bne.n	8015300 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	2b03      	cmp	r3, #3
 80152c4:	d117      	bne.n	80152f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80152c6:	7dba      	ldrb	r2, [r7, #22]
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	32ae      	adds	r2, #174	; 0xae
 80152cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d0:	699b      	ldr	r3, [r3, #24]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d00f      	beq.n	80152f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152d6:	7dba      	ldrb	r2, [r7, #22]
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152de:	7dba      	ldrb	r2, [r7, #22]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	32ae      	adds	r2, #174	; 0xae
 80152e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152e8:	699b      	ldr	r3, [r3, #24]
 80152ea:	7afa      	ldrb	r2, [r7, #11]
 80152ec:	4611      	mov	r1, r2
 80152ee:	68f8      	ldr	r0, [r7, #12]
 80152f0:	4798      	blx	r3
 80152f2:	4603      	mov	r3, r0
 80152f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152f6:	7dfb      	ldrb	r3, [r7, #23]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d001      	beq.n	8015300 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80152fc:	7dfb      	ldrb	r3, [r7, #23]
 80152fe:	e000      	b.n	8015302 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015300:	2300      	movs	r3, #0
}
 8015302:	4618      	mov	r0, r3
 8015304:	3718      	adds	r7, #24
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}

0801530a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b086      	sub	sp, #24
 801530e:	af00      	add	r7, sp, #0
 8015310:	60f8      	str	r0, [r7, #12]
 8015312:	460b      	mov	r3, r1
 8015314:	607a      	str	r2, [r7, #4]
 8015316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015318:	7afb      	ldrb	r3, [r7, #11]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d16f      	bne.n	80153fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	3314      	adds	r3, #20
 8015322:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801532a:	2b02      	cmp	r3, #2
 801532c:	d15a      	bne.n	80153e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	689a      	ldr	r2, [r3, #8]
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	68db      	ldr	r3, [r3, #12]
 8015336:	429a      	cmp	r2, r3
 8015338:	d914      	bls.n	8015364 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	689a      	ldr	r2, [r3, #8]
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	68db      	ldr	r3, [r3, #12]
 8015342:	1ad2      	subs	r2, r2, r3
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	689b      	ldr	r3, [r3, #8]
 801534c:	461a      	mov	r2, r3
 801534e:	6879      	ldr	r1, [r7, #4]
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f001 f8b2 	bl	80164ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015356:	2300      	movs	r3, #0
 8015358:	2200      	movs	r2, #0
 801535a:	2100      	movs	r1, #0
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f001 fe1f 	bl	8016fa0 <USBD_LL_PrepareReceive>
 8015362:	e03f      	b.n	80153e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	68da      	ldr	r2, [r3, #12]
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	689b      	ldr	r3, [r3, #8]
 801536c:	429a      	cmp	r2, r3
 801536e:	d11c      	bne.n	80153aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	685a      	ldr	r2, [r3, #4]
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015378:	429a      	cmp	r2, r3
 801537a:	d316      	bcc.n	80153aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	685a      	ldr	r2, [r3, #4]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015386:	429a      	cmp	r2, r3
 8015388:	d20f      	bcs.n	80153aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801538a:	2200      	movs	r2, #0
 801538c:	2100      	movs	r1, #0
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f001 f893 	bl	80164ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2200      	movs	r2, #0
 8015398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801539c:	2300      	movs	r3, #0
 801539e:	2200      	movs	r2, #0
 80153a0:	2100      	movs	r1, #0
 80153a2:	68f8      	ldr	r0, [r7, #12]
 80153a4:	f001 fdfc 	bl	8016fa0 <USBD_LL_PrepareReceive>
 80153a8:	e01c      	b.n	80153e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	2b03      	cmp	r3, #3
 80153b4:	d10f      	bne.n	80153d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d009      	beq.n	80153d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	2200      	movs	r2, #0
 80153c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d0:	68db      	ldr	r3, [r3, #12]
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153d6:	2180      	movs	r1, #128	; 0x80
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f001 fd37 	bl	8016e4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153de:	68f8      	ldr	r0, [r7, #12]
 80153e0:	f001 f8bd 	bl	801655e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d03a      	beq.n	8015464 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153ee:	68f8      	ldr	r0, [r7, #12]
 80153f0:	f7ff fe42 	bl	8015078 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2200      	movs	r2, #0
 80153f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80153fc:	e032      	b.n	8015464 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80153fe:	7afb      	ldrb	r3, [r7, #11]
 8015400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015404:	b2db      	uxtb	r3, r3
 8015406:	4619      	mov	r1, r3
 8015408:	68f8      	ldr	r0, [r7, #12]
 801540a:	f000 f985 	bl	8015718 <USBD_CoreFindEP>
 801540e:	4603      	mov	r3, r0
 8015410:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015412:	7dfb      	ldrb	r3, [r7, #23]
 8015414:	2bff      	cmp	r3, #255	; 0xff
 8015416:	d025      	beq.n	8015464 <USBD_LL_DataInStage+0x15a>
 8015418:	7dfb      	ldrb	r3, [r7, #23]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d122      	bne.n	8015464 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015424:	b2db      	uxtb	r3, r3
 8015426:	2b03      	cmp	r3, #3
 8015428:	d11c      	bne.n	8015464 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801542a:	7dfa      	ldrb	r2, [r7, #23]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	32ae      	adds	r2, #174	; 0xae
 8015430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015434:	695b      	ldr	r3, [r3, #20]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d014      	beq.n	8015464 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801543a:	7dfa      	ldrb	r2, [r7, #23]
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015442:	7dfa      	ldrb	r2, [r7, #23]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	32ae      	adds	r2, #174	; 0xae
 8015448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801544c:	695b      	ldr	r3, [r3, #20]
 801544e:	7afa      	ldrb	r2, [r7, #11]
 8015450:	4611      	mov	r1, r2
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	4798      	blx	r3
 8015456:	4603      	mov	r3, r0
 8015458:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801545a:	7dbb      	ldrb	r3, [r7, #22]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d001      	beq.n	8015464 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015460:	7dbb      	ldrb	r3, [r7, #22]
 8015462:	e000      	b.n	8015466 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015464:	2300      	movs	r3, #0
}
 8015466:	4618      	mov	r0, r3
 8015468:	3718      	adds	r7, #24
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}

0801546e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801546e:	b580      	push	{r7, lr}
 8015470:	b084      	sub	sp, #16
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015476:	2300      	movs	r3, #0
 8015478:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2201      	movs	r2, #1
 801547e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2200      	movs	r2, #0
 8015486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2200      	movs	r2, #0
 801548e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2200      	movs	r2, #0
 8015494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d014      	beq.n	80154d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d00e      	beq.n	80154d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	6852      	ldr	r2, [r2, #4]
 80154c2:	b2d2      	uxtb	r2, r2
 80154c4:	4611      	mov	r1, r2
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	4798      	blx	r3
 80154ca:	4603      	mov	r3, r0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d001      	beq.n	80154d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80154d0:	2303      	movs	r3, #3
 80154d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154d4:	2340      	movs	r3, #64	; 0x40
 80154d6:	2200      	movs	r2, #0
 80154d8:	2100      	movs	r1, #0
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	f001 fc71 	bl	8016dc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2201      	movs	r2, #1
 80154e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2240      	movs	r2, #64	; 0x40
 80154ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154f0:	2340      	movs	r3, #64	; 0x40
 80154f2:	2200      	movs	r2, #0
 80154f4:	2180      	movs	r1, #128	; 0x80
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f001 fc63 	bl	8016dc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2201      	movs	r2, #1
 8015500:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2240      	movs	r2, #64	; 0x40
 8015506:	621a      	str	r2, [r3, #32]

  return ret;
 8015508:	7bfb      	ldrb	r3, [r7, #15]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015512:	b480      	push	{r7}
 8015514:	b083      	sub	sp, #12
 8015516:	af00      	add	r7, sp, #0
 8015518:	6078      	str	r0, [r7, #4]
 801551a:	460b      	mov	r3, r1
 801551c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	78fa      	ldrb	r2, [r7, #3]
 8015522:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015524:	2300      	movs	r3, #0
}
 8015526:	4618      	mov	r0, r3
 8015528:	370c      	adds	r7, #12
 801552a:	46bd      	mov	sp, r7
 801552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015530:	4770      	bx	lr

08015532 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015532:	b480      	push	{r7}
 8015534:	b083      	sub	sp, #12
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015540:	b2db      	uxtb	r3, r3
 8015542:	2b04      	cmp	r3, #4
 8015544:	d006      	beq.n	8015554 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801554c:	b2da      	uxtb	r2, r3
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2204      	movs	r2, #4
 8015558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801555c:	2300      	movs	r3, #0
}
 801555e:	4618      	mov	r0, r3
 8015560:	370c      	adds	r7, #12
 8015562:	46bd      	mov	sp, r7
 8015564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015568:	4770      	bx	lr

0801556a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801556a:	b480      	push	{r7}
 801556c:	b083      	sub	sp, #12
 801556e:	af00      	add	r7, sp, #0
 8015570:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015578:	b2db      	uxtb	r3, r3
 801557a:	2b04      	cmp	r3, #4
 801557c:	d106      	bne.n	801558c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015584:	b2da      	uxtb	r2, r3
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801558c:	2300      	movs	r3, #0
}
 801558e:	4618      	mov	r0, r3
 8015590:	370c      	adds	r7, #12
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr

0801559a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b082      	sub	sp, #8
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	2b03      	cmp	r3, #3
 80155ac:	d110      	bne.n	80155d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00b      	beq.n	80155d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155be:	69db      	ldr	r3, [r3, #28]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d005      	beq.n	80155d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155ca:	69db      	ldr	r3, [r3, #28]
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b082      	sub	sp, #8
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	460b      	mov	r3, r1
 80155e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	32ae      	adds	r2, #174	; 0xae
 80155f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d101      	bne.n	80155fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80155f8:	2303      	movs	r3, #3
 80155fa:	e01c      	b.n	8015636 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015602:	b2db      	uxtb	r3, r3
 8015604:	2b03      	cmp	r3, #3
 8015606:	d115      	bne.n	8015634 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	32ae      	adds	r2, #174	; 0xae
 8015612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015616:	6a1b      	ldr	r3, [r3, #32]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d00b      	beq.n	8015634 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	32ae      	adds	r2, #174	; 0xae
 8015626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562a:	6a1b      	ldr	r3, [r3, #32]
 801562c:	78fa      	ldrb	r2, [r7, #3]
 801562e:	4611      	mov	r1, r2
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015634:	2300      	movs	r3, #0
}
 8015636:	4618      	mov	r0, r3
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}

0801563e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801563e:	b580      	push	{r7, lr}
 8015640:	b082      	sub	sp, #8
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	460b      	mov	r3, r1
 8015648:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	32ae      	adds	r2, #174	; 0xae
 8015654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d101      	bne.n	8015660 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801565c:	2303      	movs	r3, #3
 801565e:	e01c      	b.n	801569a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015666:	b2db      	uxtb	r3, r3
 8015668:	2b03      	cmp	r3, #3
 801566a:	d115      	bne.n	8015698 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	32ae      	adds	r2, #174	; 0xae
 8015676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801567c:	2b00      	cmp	r3, #0
 801567e:	d00b      	beq.n	8015698 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	32ae      	adds	r2, #174	; 0xae
 801568a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015690:	78fa      	ldrb	r2, [r7, #3]
 8015692:	4611      	mov	r1, r2
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015698:	2300      	movs	r3, #0
}
 801569a:	4618      	mov	r0, r3
 801569c:	3708      	adds	r7, #8
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}

080156a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80156a2:	b480      	push	{r7}
 80156a4:	b083      	sub	sp, #12
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156aa:	2300      	movs	r3, #0
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	370c      	adds	r7, #12
 80156b0:	46bd      	mov	sp, r7
 80156b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b6:	4770      	bx	lr

080156b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b084      	sub	sp, #16
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80156c0:	2300      	movs	r3, #0
 80156c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2201      	movs	r2, #1
 80156c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d00e      	beq.n	80156f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	6852      	ldr	r2, [r2, #4]
 80156e2:	b2d2      	uxtb	r2, r2
 80156e4:	4611      	mov	r1, r2
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	4798      	blx	r3
 80156ea:	4603      	mov	r3, r0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d001      	beq.n	80156f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156f0:	2303      	movs	r3, #3
 80156f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3710      	adds	r7, #16
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}

080156fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156fe:	b480      	push	{r7}
 8015700:	b083      	sub	sp, #12
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]
 8015706:	460b      	mov	r3, r1
 8015708:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801570a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801570c:	4618      	mov	r0, r3
 801570e:	370c      	adds	r7, #12
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr

08015718 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015718:	b480      	push	{r7}
 801571a:	b083      	sub	sp, #12
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	460b      	mov	r3, r1
 8015722:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015724:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015726:	4618      	mov	r0, r3
 8015728:	370c      	adds	r7, #12
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr

08015732 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015732:	b580      	push	{r7, lr}
 8015734:	b086      	sub	sp, #24
 8015736:	af00      	add	r7, sp, #0
 8015738:	6078      	str	r0, [r7, #4]
 801573a:	460b      	mov	r3, r1
 801573c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015746:	2300      	movs	r3, #0
 8015748:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	885b      	ldrh	r3, [r3, #2]
 801574e:	b29a      	uxth	r2, r3
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	b29b      	uxth	r3, r3
 8015756:	429a      	cmp	r2, r3
 8015758:	d920      	bls.n	801579c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	b29b      	uxth	r3, r3
 8015760:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015762:	e013      	b.n	801578c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015764:	f107 030a 	add.w	r3, r7, #10
 8015768:	4619      	mov	r1, r3
 801576a:	6978      	ldr	r0, [r7, #20]
 801576c:	f000 f81b 	bl	80157a6 <USBD_GetNextDesc>
 8015770:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	785b      	ldrb	r3, [r3, #1]
 8015776:	2b05      	cmp	r3, #5
 8015778:	d108      	bne.n	801578c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801577a:	697b      	ldr	r3, [r7, #20]
 801577c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	789b      	ldrb	r3, [r3, #2]
 8015782:	78fa      	ldrb	r2, [r7, #3]
 8015784:	429a      	cmp	r2, r3
 8015786:	d008      	beq.n	801579a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015788:	2300      	movs	r3, #0
 801578a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	885b      	ldrh	r3, [r3, #2]
 8015790:	b29a      	uxth	r2, r3
 8015792:	897b      	ldrh	r3, [r7, #10]
 8015794:	429a      	cmp	r2, r3
 8015796:	d8e5      	bhi.n	8015764 <USBD_GetEpDesc+0x32>
 8015798:	e000      	b.n	801579c <USBD_GetEpDesc+0x6a>
          break;
 801579a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801579c:	693b      	ldr	r3, [r7, #16]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3718      	adds	r7, #24
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80157a6:	b480      	push	{r7}
 80157a8:	b085      	sub	sp, #20
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
 80157ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	881a      	ldrh	r2, [r3, #0]
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	b29b      	uxth	r3, r3
 80157be:	4413      	add	r3, r2
 80157c0:	b29a      	uxth	r2, r3
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	461a      	mov	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	4413      	add	r3, r2
 80157d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80157d2:	68fb      	ldr	r3, [r7, #12]
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr

080157e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157e0:	b480      	push	{r7}
 80157e2:	b087      	sub	sp, #28
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	3301      	adds	r3, #1
 80157f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157fe:	8a3b      	ldrh	r3, [r7, #16]
 8015800:	021b      	lsls	r3, r3, #8
 8015802:	b21a      	sxth	r2, r3
 8015804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015808:	4313      	orrs	r3, r2
 801580a:	b21b      	sxth	r3, r3
 801580c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801580e:	89fb      	ldrh	r3, [r7, #14]
}
 8015810:	4618      	mov	r0, r3
 8015812:	371c      	adds	r7, #28
 8015814:	46bd      	mov	sp, r7
 8015816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581a:	4770      	bx	lr

0801581c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015826:	2300      	movs	r3, #0
 8015828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015832:	2b40      	cmp	r3, #64	; 0x40
 8015834:	d005      	beq.n	8015842 <USBD_StdDevReq+0x26>
 8015836:	2b40      	cmp	r3, #64	; 0x40
 8015838:	d857      	bhi.n	80158ea <USBD_StdDevReq+0xce>
 801583a:	2b00      	cmp	r3, #0
 801583c:	d00f      	beq.n	801585e <USBD_StdDevReq+0x42>
 801583e:	2b20      	cmp	r3, #32
 8015840:	d153      	bne.n	80158ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	32ae      	adds	r2, #174	; 0xae
 801584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015850:	689b      	ldr	r3, [r3, #8]
 8015852:	6839      	ldr	r1, [r7, #0]
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	4798      	blx	r3
 8015858:	4603      	mov	r3, r0
 801585a:	73fb      	strb	r3, [r7, #15]
      break;
 801585c:	e04a      	b.n	80158f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801585e:	683b      	ldr	r3, [r7, #0]
 8015860:	785b      	ldrb	r3, [r3, #1]
 8015862:	2b09      	cmp	r3, #9
 8015864:	d83b      	bhi.n	80158de <USBD_StdDevReq+0xc2>
 8015866:	a201      	add	r2, pc, #4	; (adr r2, 801586c <USBD_StdDevReq+0x50>)
 8015868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801586c:	080158c1 	.word	0x080158c1
 8015870:	080158d5 	.word	0x080158d5
 8015874:	080158df 	.word	0x080158df
 8015878:	080158cb 	.word	0x080158cb
 801587c:	080158df 	.word	0x080158df
 8015880:	0801589f 	.word	0x0801589f
 8015884:	08015895 	.word	0x08015895
 8015888:	080158df 	.word	0x080158df
 801588c:	080158b7 	.word	0x080158b7
 8015890:	080158a9 	.word	0x080158a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015894:	6839      	ldr	r1, [r7, #0]
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f000 fa3c 	bl	8015d14 <USBD_GetDescriptor>
          break;
 801589c:	e024      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 fba1 	bl	8015fe8 <USBD_SetAddress>
          break;
 80158a6:	e01f      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80158a8:	6839      	ldr	r1, [r7, #0]
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 fbe0 	bl	8016070 <USBD_SetConfig>
 80158b0:	4603      	mov	r3, r0
 80158b2:	73fb      	strb	r3, [r7, #15]
          break;
 80158b4:	e018      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80158b6:	6839      	ldr	r1, [r7, #0]
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f000 fc83 	bl	80161c4 <USBD_GetConfig>
          break;
 80158be:	e013      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f000 fcb4 	bl	8016230 <USBD_GetStatus>
          break;
 80158c8:	e00e      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80158ca:	6839      	ldr	r1, [r7, #0]
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fce3 	bl	8016298 <USBD_SetFeature>
          break;
 80158d2:	e009      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158d4:	6839      	ldr	r1, [r7, #0]
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f000 fd07 	bl	80162ea <USBD_ClrFeature>
          break;
 80158dc:	e004      	b.n	80158e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f000 fd5e 	bl	80163a2 <USBD_CtlError>
          break;
 80158e6:	bf00      	nop
      }
      break;
 80158e8:	e004      	b.n	80158f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158ea:	6839      	ldr	r1, [r7, #0]
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f000 fd58 	bl	80163a2 <USBD_CtlError>
      break;
 80158f2:	bf00      	nop
  }

  return ret;
 80158f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3710      	adds	r7, #16
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop

08015900 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801590a:	2300      	movs	r3, #0
 801590c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015916:	2b40      	cmp	r3, #64	; 0x40
 8015918:	d005      	beq.n	8015926 <USBD_StdItfReq+0x26>
 801591a:	2b40      	cmp	r3, #64	; 0x40
 801591c:	d852      	bhi.n	80159c4 <USBD_StdItfReq+0xc4>
 801591e:	2b00      	cmp	r3, #0
 8015920:	d001      	beq.n	8015926 <USBD_StdItfReq+0x26>
 8015922:	2b20      	cmp	r3, #32
 8015924:	d14e      	bne.n	80159c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801592c:	b2db      	uxtb	r3, r3
 801592e:	3b01      	subs	r3, #1
 8015930:	2b02      	cmp	r3, #2
 8015932:	d840      	bhi.n	80159b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	889b      	ldrh	r3, [r3, #4]
 8015938:	b2db      	uxtb	r3, r3
 801593a:	2b01      	cmp	r3, #1
 801593c:	d836      	bhi.n	80159ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	889b      	ldrh	r3, [r3, #4]
 8015942:	b2db      	uxtb	r3, r3
 8015944:	4619      	mov	r1, r3
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f7ff fed9 	bl	80156fe <USBD_CoreFindIF>
 801594c:	4603      	mov	r3, r0
 801594e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015950:	7bbb      	ldrb	r3, [r7, #14]
 8015952:	2bff      	cmp	r3, #255	; 0xff
 8015954:	d01d      	beq.n	8015992 <USBD_StdItfReq+0x92>
 8015956:	7bbb      	ldrb	r3, [r7, #14]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d11a      	bne.n	8015992 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801595c:	7bba      	ldrb	r2, [r7, #14]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	32ae      	adds	r2, #174	; 0xae
 8015962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015966:	689b      	ldr	r3, [r3, #8]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d00f      	beq.n	801598c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801596c:	7bba      	ldrb	r2, [r7, #14]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015974:	7bba      	ldrb	r2, [r7, #14]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	32ae      	adds	r2, #174	; 0xae
 801597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597e:	689b      	ldr	r3, [r3, #8]
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	4798      	blx	r3
 8015986:	4603      	mov	r3, r0
 8015988:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801598a:	e004      	b.n	8015996 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801598c:	2303      	movs	r3, #3
 801598e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015990:	e001      	b.n	8015996 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015992:	2303      	movs	r3, #3
 8015994:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	88db      	ldrh	r3, [r3, #6]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d110      	bne.n	80159c0 <USBD_StdItfReq+0xc0>
 801599e:	7bfb      	ldrb	r3, [r7, #15]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10d      	bne.n	80159c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 fdc7 	bl	8016538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80159aa:	e009      	b.n	80159c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f000 fcf7 	bl	80163a2 <USBD_CtlError>
          break;
 80159b4:	e004      	b.n	80159c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159b6:	6839      	ldr	r1, [r7, #0]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 fcf2 	bl	80163a2 <USBD_CtlError>
          break;
 80159be:	e000      	b.n	80159c2 <USBD_StdItfReq+0xc2>
          break;
 80159c0:	bf00      	nop
      }
      break;
 80159c2:	e004      	b.n	80159ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f000 fceb 	bl	80163a2 <USBD_CtlError>
      break;
 80159cc:	bf00      	nop
  }

  return ret;
 80159ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3710      	adds	r7, #16
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b084      	sub	sp, #16
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159e2:	2300      	movs	r3, #0
 80159e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	889b      	ldrh	r3, [r3, #4]
 80159ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159f4:	2b40      	cmp	r3, #64	; 0x40
 80159f6:	d007      	beq.n	8015a08 <USBD_StdEPReq+0x30>
 80159f8:	2b40      	cmp	r3, #64	; 0x40
 80159fa:	f200 817f 	bhi.w	8015cfc <USBD_StdEPReq+0x324>
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d02a      	beq.n	8015a58 <USBD_StdEPReq+0x80>
 8015a02:	2b20      	cmp	r3, #32
 8015a04:	f040 817a 	bne.w	8015cfc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a08:	7bbb      	ldrb	r3, [r7, #14]
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f7ff fe83 	bl	8015718 <USBD_CoreFindEP>
 8015a12:	4603      	mov	r3, r0
 8015a14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a16:	7b7b      	ldrb	r3, [r7, #13]
 8015a18:	2bff      	cmp	r3, #255	; 0xff
 8015a1a:	f000 8174 	beq.w	8015d06 <USBD_StdEPReq+0x32e>
 8015a1e:	7b7b      	ldrb	r3, [r7, #13]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	f040 8170 	bne.w	8015d06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a26:	7b7a      	ldrb	r2, [r7, #13]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a2e:	7b7a      	ldrb	r2, [r7, #13]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	32ae      	adds	r2, #174	; 0xae
 8015a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a38:	689b      	ldr	r3, [r3, #8]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	f000 8163 	beq.w	8015d06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a40:	7b7a      	ldrb	r2, [r7, #13]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	32ae      	adds	r2, #174	; 0xae
 8015a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a4a:	689b      	ldr	r3, [r3, #8]
 8015a4c:	6839      	ldr	r1, [r7, #0]
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	4798      	blx	r3
 8015a52:	4603      	mov	r3, r0
 8015a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a56:	e156      	b.n	8015d06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	785b      	ldrb	r3, [r3, #1]
 8015a5c:	2b03      	cmp	r3, #3
 8015a5e:	d008      	beq.n	8015a72 <USBD_StdEPReq+0x9a>
 8015a60:	2b03      	cmp	r3, #3
 8015a62:	f300 8145 	bgt.w	8015cf0 <USBD_StdEPReq+0x318>
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f000 809b 	beq.w	8015ba2 <USBD_StdEPReq+0x1ca>
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d03c      	beq.n	8015aea <USBD_StdEPReq+0x112>
 8015a70:	e13e      	b.n	8015cf0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	2b02      	cmp	r3, #2
 8015a7c:	d002      	beq.n	8015a84 <USBD_StdEPReq+0xac>
 8015a7e:	2b03      	cmp	r3, #3
 8015a80:	d016      	beq.n	8015ab0 <USBD_StdEPReq+0xd8>
 8015a82:	e02c      	b.n	8015ade <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a84:	7bbb      	ldrb	r3, [r7, #14]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d00d      	beq.n	8015aa6 <USBD_StdEPReq+0xce>
 8015a8a:	7bbb      	ldrb	r3, [r7, #14]
 8015a8c:	2b80      	cmp	r3, #128	; 0x80
 8015a8e:	d00a      	beq.n	8015aa6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a90:	7bbb      	ldrb	r3, [r7, #14]
 8015a92:	4619      	mov	r1, r3
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f001 f9d9 	bl	8016e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a9a:	2180      	movs	r1, #128	; 0x80
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f001 f9d5 	bl	8016e4c <USBD_LL_StallEP>
 8015aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015aa4:	e020      	b.n	8015ae8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015aa6:	6839      	ldr	r1, [r7, #0]
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 fc7a 	bl	80163a2 <USBD_CtlError>
              break;
 8015aae:	e01b      	b.n	8015ae8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	885b      	ldrh	r3, [r3, #2]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d10e      	bne.n	8015ad6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015ab8:	7bbb      	ldrb	r3, [r7, #14]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d00b      	beq.n	8015ad6 <USBD_StdEPReq+0xfe>
 8015abe:	7bbb      	ldrb	r3, [r7, #14]
 8015ac0:	2b80      	cmp	r3, #128	; 0x80
 8015ac2:	d008      	beq.n	8015ad6 <USBD_StdEPReq+0xfe>
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	88db      	ldrh	r3, [r3, #6]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d104      	bne.n	8015ad6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015acc:	7bbb      	ldrb	r3, [r7, #14]
 8015ace:	4619      	mov	r1, r3
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f001 f9bb 	bl	8016e4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f000 fd2e 	bl	8016538 <USBD_CtlSendStatus>

              break;
 8015adc:	e004      	b.n	8015ae8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015ade:	6839      	ldr	r1, [r7, #0]
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f000 fc5e 	bl	80163a2 <USBD_CtlError>
              break;
 8015ae6:	bf00      	nop
          }
          break;
 8015ae8:	e107      	b.n	8015cfa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	2b02      	cmp	r3, #2
 8015af4:	d002      	beq.n	8015afc <USBD_StdEPReq+0x124>
 8015af6:	2b03      	cmp	r3, #3
 8015af8:	d016      	beq.n	8015b28 <USBD_StdEPReq+0x150>
 8015afa:	e04b      	b.n	8015b94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d00d      	beq.n	8015b1e <USBD_StdEPReq+0x146>
 8015b02:	7bbb      	ldrb	r3, [r7, #14]
 8015b04:	2b80      	cmp	r3, #128	; 0x80
 8015b06:	d00a      	beq.n	8015b1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b08:	7bbb      	ldrb	r3, [r7, #14]
 8015b0a:	4619      	mov	r1, r3
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f001 f99d 	bl	8016e4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b12:	2180      	movs	r1, #128	; 0x80
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f001 f999 	bl	8016e4c <USBD_LL_StallEP>
 8015b1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b1c:	e040      	b.n	8015ba0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b1e:	6839      	ldr	r1, [r7, #0]
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f000 fc3e 	bl	80163a2 <USBD_CtlError>
              break;
 8015b26:	e03b      	b.n	8015ba0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	885b      	ldrh	r3, [r3, #2]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d136      	bne.n	8015b9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b30:	7bbb      	ldrb	r3, [r7, #14]
 8015b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d004      	beq.n	8015b44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b3a:	7bbb      	ldrb	r3, [r7, #14]
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f001 f9a3 	bl	8016e8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f000 fcf7 	bl	8016538 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b4a:	7bbb      	ldrb	r3, [r7, #14]
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f7ff fde2 	bl	8015718 <USBD_CoreFindEP>
 8015b54:	4603      	mov	r3, r0
 8015b56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b58:	7b7b      	ldrb	r3, [r7, #13]
 8015b5a:	2bff      	cmp	r3, #255	; 0xff
 8015b5c:	d01f      	beq.n	8015b9e <USBD_StdEPReq+0x1c6>
 8015b5e:	7b7b      	ldrb	r3, [r7, #13]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d11c      	bne.n	8015b9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b64:	7b7a      	ldrb	r2, [r7, #13]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b6c:	7b7a      	ldrb	r2, [r7, #13]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	32ae      	adds	r2, #174	; 0xae
 8015b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d010      	beq.n	8015b9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b7c:	7b7a      	ldrb	r2, [r7, #13]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	32ae      	adds	r2, #174	; 0xae
 8015b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b86:	689b      	ldr	r3, [r3, #8]
 8015b88:	6839      	ldr	r1, [r7, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	4798      	blx	r3
 8015b8e:	4603      	mov	r3, r0
 8015b90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b92:	e004      	b.n	8015b9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b94:	6839      	ldr	r1, [r7, #0]
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f000 fc03 	bl	80163a2 <USBD_CtlError>
              break;
 8015b9c:	e000      	b.n	8015ba0 <USBD_StdEPReq+0x1c8>
              break;
 8015b9e:	bf00      	nop
          }
          break;
 8015ba0:	e0ab      	b.n	8015cfa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ba8:	b2db      	uxtb	r3, r3
 8015baa:	2b02      	cmp	r3, #2
 8015bac:	d002      	beq.n	8015bb4 <USBD_StdEPReq+0x1dc>
 8015bae:	2b03      	cmp	r3, #3
 8015bb0:	d032      	beq.n	8015c18 <USBD_StdEPReq+0x240>
 8015bb2:	e097      	b.n	8015ce4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bb4:	7bbb      	ldrb	r3, [r7, #14]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d007      	beq.n	8015bca <USBD_StdEPReq+0x1f2>
 8015bba:	7bbb      	ldrb	r3, [r7, #14]
 8015bbc:	2b80      	cmp	r3, #128	; 0x80
 8015bbe:	d004      	beq.n	8015bca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015bc0:	6839      	ldr	r1, [r7, #0]
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f000 fbed 	bl	80163a2 <USBD_CtlError>
                break;
 8015bc8:	e091      	b.n	8015cee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	da0b      	bge.n	8015bea <USBD_StdEPReq+0x212>
 8015bd2:	7bbb      	ldrb	r3, [r7, #14]
 8015bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bd8:	4613      	mov	r3, r2
 8015bda:	009b      	lsls	r3, r3, #2
 8015bdc:	4413      	add	r3, r2
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	3310      	adds	r3, #16
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	4413      	add	r3, r2
 8015be6:	3304      	adds	r3, #4
 8015be8:	e00b      	b.n	8015c02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bea:	7bbb      	ldrb	r3, [r7, #14]
 8015bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bf0:	4613      	mov	r3, r2
 8015bf2:	009b      	lsls	r3, r3, #2
 8015bf4:	4413      	add	r3, r2
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bfc:	687a      	ldr	r2, [r7, #4]
 8015bfe:	4413      	add	r3, r2
 8015c00:	3304      	adds	r3, #4
 8015c02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	2200      	movs	r2, #0
 8015c08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2202      	movs	r2, #2
 8015c0e:	4619      	mov	r1, r3
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 fc37 	bl	8016484 <USBD_CtlSendData>
              break;
 8015c16:	e06a      	b.n	8015cee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	da11      	bge.n	8015c44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c20:	7bbb      	ldrb	r3, [r7, #14]
 8015c22:	f003 020f 	and.w	r2, r3, #15
 8015c26:	6879      	ldr	r1, [r7, #4]
 8015c28:	4613      	mov	r3, r2
 8015c2a:	009b      	lsls	r3, r3, #2
 8015c2c:	4413      	add	r3, r2
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	440b      	add	r3, r1
 8015c32:	3324      	adds	r3, #36	; 0x24
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d117      	bne.n	8015c6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c3a:	6839      	ldr	r1, [r7, #0]
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f000 fbb0 	bl	80163a2 <USBD_CtlError>
                  break;
 8015c42:	e054      	b.n	8015cee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c44:	7bbb      	ldrb	r3, [r7, #14]
 8015c46:	f003 020f 	and.w	r2, r3, #15
 8015c4a:	6879      	ldr	r1, [r7, #4]
 8015c4c:	4613      	mov	r3, r2
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	4413      	add	r3, r2
 8015c52:	009b      	lsls	r3, r3, #2
 8015c54:	440b      	add	r3, r1
 8015c56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c5a:	881b      	ldrh	r3, [r3, #0]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d104      	bne.n	8015c6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c60:	6839      	ldr	r1, [r7, #0]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 fb9d 	bl	80163a2 <USBD_CtlError>
                  break;
 8015c68:	e041      	b.n	8015cee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	da0b      	bge.n	8015c8a <USBD_StdEPReq+0x2b2>
 8015c72:	7bbb      	ldrb	r3, [r7, #14]
 8015c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c78:	4613      	mov	r3, r2
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	4413      	add	r3, r2
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	3310      	adds	r3, #16
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	4413      	add	r3, r2
 8015c86:	3304      	adds	r3, #4
 8015c88:	e00b      	b.n	8015ca2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c8a:	7bbb      	ldrb	r3, [r7, #14]
 8015c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c90:	4613      	mov	r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	4413      	add	r3, r2
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	4413      	add	r3, r2
 8015ca0:	3304      	adds	r3, #4
 8015ca2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ca4:	7bbb      	ldrb	r3, [r7, #14]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d002      	beq.n	8015cb0 <USBD_StdEPReq+0x2d8>
 8015caa:	7bbb      	ldrb	r3, [r7, #14]
 8015cac:	2b80      	cmp	r3, #128	; 0x80
 8015cae:	d103      	bne.n	8015cb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	601a      	str	r2, [r3, #0]
 8015cb6:	e00e      	b.n	8015cd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015cb8:	7bbb      	ldrb	r3, [r7, #14]
 8015cba:	4619      	mov	r1, r3
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f001 f903 	bl	8016ec8 <USBD_LL_IsStallEP>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d003      	beq.n	8015cd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	2201      	movs	r2, #1
 8015ccc:	601a      	str	r2, [r3, #0]
 8015cce:	e002      	b.n	8015cd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	2202      	movs	r2, #2
 8015cda:	4619      	mov	r1, r3
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f000 fbd1 	bl	8016484 <USBD_CtlSendData>
              break;
 8015ce2:	e004      	b.n	8015cee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015ce4:	6839      	ldr	r1, [r7, #0]
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f000 fb5b 	bl	80163a2 <USBD_CtlError>
              break;
 8015cec:	bf00      	nop
          }
          break;
 8015cee:	e004      	b.n	8015cfa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fb55 	bl	80163a2 <USBD_CtlError>
          break;
 8015cf8:	bf00      	nop
      }
      break;
 8015cfa:	e005      	b.n	8015d08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 fb4f 	bl	80163a2 <USBD_CtlError>
      break;
 8015d04:	e000      	b.n	8015d08 <USBD_StdEPReq+0x330>
      break;
 8015d06:	bf00      	nop
  }

  return ret;
 8015d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3710      	adds	r7, #16
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
	...

08015d14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b084      	sub	sp, #16
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d22:	2300      	movs	r3, #0
 8015d24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d26:	2300      	movs	r3, #0
 8015d28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	885b      	ldrh	r3, [r3, #2]
 8015d2e:	0a1b      	lsrs	r3, r3, #8
 8015d30:	b29b      	uxth	r3, r3
 8015d32:	3b01      	subs	r3, #1
 8015d34:	2b06      	cmp	r3, #6
 8015d36:	f200 8128 	bhi.w	8015f8a <USBD_GetDescriptor+0x276>
 8015d3a:	a201      	add	r2, pc, #4	; (adr r2, 8015d40 <USBD_GetDescriptor+0x2c>)
 8015d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d40:	08015d5d 	.word	0x08015d5d
 8015d44:	08015d75 	.word	0x08015d75
 8015d48:	08015db5 	.word	0x08015db5
 8015d4c:	08015f8b 	.word	0x08015f8b
 8015d50:	08015f8b 	.word	0x08015f8b
 8015d54:	08015f2b 	.word	0x08015f2b
 8015d58:	08015f57 	.word	0x08015f57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	7c12      	ldrb	r2, [r2, #16]
 8015d68:	f107 0108 	add.w	r1, r7, #8
 8015d6c:	4610      	mov	r0, r2
 8015d6e:	4798      	blx	r3
 8015d70:	60f8      	str	r0, [r7, #12]
      break;
 8015d72:	e112      	b.n	8015f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	7c1b      	ldrb	r3, [r3, #16]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d10d      	bne.n	8015d98 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d84:	f107 0208 	add.w	r2, r7, #8
 8015d88:	4610      	mov	r0, r2
 8015d8a:	4798      	blx	r3
 8015d8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	3301      	adds	r3, #1
 8015d92:	2202      	movs	r2, #2
 8015d94:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d96:	e100      	b.n	8015f9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015da0:	f107 0208 	add.w	r2, r7, #8
 8015da4:	4610      	mov	r0, r2
 8015da6:	4798      	blx	r3
 8015da8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	3301      	adds	r3, #1
 8015dae:	2202      	movs	r2, #2
 8015db0:	701a      	strb	r2, [r3, #0]
      break;
 8015db2:	e0f2      	b.n	8015f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	885b      	ldrh	r3, [r3, #2]
 8015db8:	b2db      	uxtb	r3, r3
 8015dba:	2b05      	cmp	r3, #5
 8015dbc:	f200 80ac 	bhi.w	8015f18 <USBD_GetDescriptor+0x204>
 8015dc0:	a201      	add	r2, pc, #4	; (adr r2, 8015dc8 <USBD_GetDescriptor+0xb4>)
 8015dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dc6:	bf00      	nop
 8015dc8:	08015de1 	.word	0x08015de1
 8015dcc:	08015e15 	.word	0x08015e15
 8015dd0:	08015e49 	.word	0x08015e49
 8015dd4:	08015e7d 	.word	0x08015e7d
 8015dd8:	08015eb1 	.word	0x08015eb1
 8015ddc:	08015ee5 	.word	0x08015ee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00b      	beq.n	8015e04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df2:	685b      	ldr	r3, [r3, #4]
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	7c12      	ldrb	r2, [r2, #16]
 8015df8:	f107 0108 	add.w	r1, r7, #8
 8015dfc:	4610      	mov	r0, r2
 8015dfe:	4798      	blx	r3
 8015e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e02:	e091      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e04:	6839      	ldr	r1, [r7, #0]
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 facb 	bl	80163a2 <USBD_CtlError>
            err++;
 8015e0c:	7afb      	ldrb	r3, [r7, #11]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	72fb      	strb	r3, [r7, #11]
          break;
 8015e12:	e089      	b.n	8015f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1a:	689b      	ldr	r3, [r3, #8]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d00b      	beq.n	8015e38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e26:	689b      	ldr	r3, [r3, #8]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	7c12      	ldrb	r2, [r2, #16]
 8015e2c:	f107 0108 	add.w	r1, r7, #8
 8015e30:	4610      	mov	r0, r2
 8015e32:	4798      	blx	r3
 8015e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e36:	e077      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e38:	6839      	ldr	r1, [r7, #0]
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f000 fab1 	bl	80163a2 <USBD_CtlError>
            err++;
 8015e40:	7afb      	ldrb	r3, [r7, #11]
 8015e42:	3301      	adds	r3, #1
 8015e44:	72fb      	strb	r3, [r7, #11]
          break;
 8015e46:	e06f      	b.n	8015f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e4e:	68db      	ldr	r3, [r3, #12]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d00b      	beq.n	8015e6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e5a:	68db      	ldr	r3, [r3, #12]
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	7c12      	ldrb	r2, [r2, #16]
 8015e60:	f107 0108 	add.w	r1, r7, #8
 8015e64:	4610      	mov	r0, r2
 8015e66:	4798      	blx	r3
 8015e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e6a:	e05d      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e6c:	6839      	ldr	r1, [r7, #0]
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 fa97 	bl	80163a2 <USBD_CtlError>
            err++;
 8015e74:	7afb      	ldrb	r3, [r7, #11]
 8015e76:	3301      	adds	r3, #1
 8015e78:	72fb      	strb	r3, [r7, #11]
          break;
 8015e7a:	e055      	b.n	8015f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e82:	691b      	ldr	r3, [r3, #16]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d00b      	beq.n	8015ea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e8e:	691b      	ldr	r3, [r3, #16]
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	7c12      	ldrb	r2, [r2, #16]
 8015e94:	f107 0108 	add.w	r1, r7, #8
 8015e98:	4610      	mov	r0, r2
 8015e9a:	4798      	blx	r3
 8015e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e9e:	e043      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ea0:	6839      	ldr	r1, [r7, #0]
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 fa7d 	bl	80163a2 <USBD_CtlError>
            err++;
 8015ea8:	7afb      	ldrb	r3, [r7, #11]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	72fb      	strb	r3, [r7, #11]
          break;
 8015eae:	e03b      	b.n	8015f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eb6:	695b      	ldr	r3, [r3, #20]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00b      	beq.n	8015ed4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ec2:	695b      	ldr	r3, [r3, #20]
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	7c12      	ldrb	r2, [r2, #16]
 8015ec8:	f107 0108 	add.w	r1, r7, #8
 8015ecc:	4610      	mov	r0, r2
 8015ece:	4798      	blx	r3
 8015ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ed2:	e029      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 fa63 	bl	80163a2 <USBD_CtlError>
            err++;
 8015edc:	7afb      	ldrb	r3, [r7, #11]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ee2:	e021      	b.n	8015f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eea:	699b      	ldr	r3, [r3, #24]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d00b      	beq.n	8015f08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ef6:	699b      	ldr	r3, [r3, #24]
 8015ef8:	687a      	ldr	r2, [r7, #4]
 8015efa:	7c12      	ldrb	r2, [r2, #16]
 8015efc:	f107 0108 	add.w	r1, r7, #8
 8015f00:	4610      	mov	r0, r2
 8015f02:	4798      	blx	r3
 8015f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f06:	e00f      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f08:	6839      	ldr	r1, [r7, #0]
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 fa49 	bl	80163a2 <USBD_CtlError>
            err++;
 8015f10:	7afb      	ldrb	r3, [r7, #11]
 8015f12:	3301      	adds	r3, #1
 8015f14:	72fb      	strb	r3, [r7, #11]
          break;
 8015f16:	e007      	b.n	8015f28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f18:	6839      	ldr	r1, [r7, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f000 fa41 	bl	80163a2 <USBD_CtlError>
          err++;
 8015f20:	7afb      	ldrb	r3, [r7, #11]
 8015f22:	3301      	adds	r3, #1
 8015f24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f26:	bf00      	nop
      }
      break;
 8015f28:	e037      	b.n	8015f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	7c1b      	ldrb	r3, [r3, #16]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d109      	bne.n	8015f46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f3a:	f107 0208 	add.w	r2, r7, #8
 8015f3e:	4610      	mov	r0, r2
 8015f40:	4798      	blx	r3
 8015f42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f44:	e029      	b.n	8015f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f46:	6839      	ldr	r1, [r7, #0]
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fa2a 	bl	80163a2 <USBD_CtlError>
        err++;
 8015f4e:	7afb      	ldrb	r3, [r7, #11]
 8015f50:	3301      	adds	r3, #1
 8015f52:	72fb      	strb	r3, [r7, #11]
      break;
 8015f54:	e021      	b.n	8015f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	7c1b      	ldrb	r3, [r3, #16]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d10d      	bne.n	8015f7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f66:	f107 0208 	add.w	r2, r7, #8
 8015f6a:	4610      	mov	r0, r2
 8015f6c:	4798      	blx	r3
 8015f6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	3301      	adds	r3, #1
 8015f74:	2207      	movs	r2, #7
 8015f76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f78:	e00f      	b.n	8015f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f7a:	6839      	ldr	r1, [r7, #0]
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f000 fa10 	bl	80163a2 <USBD_CtlError>
        err++;
 8015f82:	7afb      	ldrb	r3, [r7, #11]
 8015f84:	3301      	adds	r3, #1
 8015f86:	72fb      	strb	r3, [r7, #11]
      break;
 8015f88:	e007      	b.n	8015f9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 fa08 	bl	80163a2 <USBD_CtlError>
      err++;
 8015f92:	7afb      	ldrb	r3, [r7, #11]
 8015f94:	3301      	adds	r3, #1
 8015f96:	72fb      	strb	r3, [r7, #11]
      break;
 8015f98:	bf00      	nop
  }

  if (err != 0U)
 8015f9a:	7afb      	ldrb	r3, [r7, #11]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d11e      	bne.n	8015fde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	88db      	ldrh	r3, [r3, #6]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d016      	beq.n	8015fd6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015fa8:	893b      	ldrh	r3, [r7, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d00e      	beq.n	8015fcc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	88da      	ldrh	r2, [r3, #6]
 8015fb2:	893b      	ldrh	r3, [r7, #8]
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	bf28      	it	cs
 8015fb8:	4613      	movcs	r3, r2
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015fbe:	893b      	ldrh	r3, [r7, #8]
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	68f9      	ldr	r1, [r7, #12]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 fa5d 	bl	8016484 <USBD_CtlSendData>
 8015fca:	e009      	b.n	8015fe0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015fcc:	6839      	ldr	r1, [r7, #0]
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f000 f9e7 	bl	80163a2 <USBD_CtlError>
 8015fd4:	e004      	b.n	8015fe0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f000 faae 	bl	8016538 <USBD_CtlSendStatus>
 8015fdc:	e000      	b.n	8015fe0 <USBD_GetDescriptor+0x2cc>
    return;
 8015fde:	bf00      	nop
  }
}
 8015fe0:	3710      	adds	r7, #16
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop

08015fe8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b084      	sub	sp, #16
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	889b      	ldrh	r3, [r3, #4]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d131      	bne.n	801605e <USBD_SetAddress+0x76>
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	88db      	ldrh	r3, [r3, #6]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d12d      	bne.n	801605e <USBD_SetAddress+0x76>
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	885b      	ldrh	r3, [r3, #2]
 8016006:	2b7f      	cmp	r3, #127	; 0x7f
 8016008:	d829      	bhi.n	801605e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	885b      	ldrh	r3, [r3, #2]
 801600e:	b2db      	uxtb	r3, r3
 8016010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016014:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801601c:	b2db      	uxtb	r3, r3
 801601e:	2b03      	cmp	r3, #3
 8016020:	d104      	bne.n	801602c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016022:	6839      	ldr	r1, [r7, #0]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 f9bc 	bl	80163a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801602a:	e01d      	b.n	8016068 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	7bfa      	ldrb	r2, [r7, #15]
 8016030:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016034:	7bfb      	ldrb	r3, [r7, #15]
 8016036:	4619      	mov	r1, r3
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 ff71 	bl	8016f20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f000 fa7a 	bl	8016538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016044:	7bfb      	ldrb	r3, [r7, #15]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d004      	beq.n	8016054 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2202      	movs	r2, #2
 801604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016052:	e009      	b.n	8016068 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2201      	movs	r2, #1
 8016058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801605c:	e004      	b.n	8016068 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801605e:	6839      	ldr	r1, [r7, #0]
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 f99e 	bl	80163a2 <USBD_CtlError>
  }
}
 8016066:	bf00      	nop
 8016068:	bf00      	nop
 801606a:	3710      	adds	r7, #16
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801607a:	2300      	movs	r3, #0
 801607c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	885b      	ldrh	r3, [r3, #2]
 8016082:	b2da      	uxtb	r2, r3
 8016084:	4b4e      	ldr	r3, [pc, #312]	; (80161c0 <USBD_SetConfig+0x150>)
 8016086:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016088:	4b4d      	ldr	r3, [pc, #308]	; (80161c0 <USBD_SetConfig+0x150>)
 801608a:	781b      	ldrb	r3, [r3, #0]
 801608c:	2b01      	cmp	r3, #1
 801608e:	d905      	bls.n	801609c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016090:	6839      	ldr	r1, [r7, #0]
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 f985 	bl	80163a2 <USBD_CtlError>
    return USBD_FAIL;
 8016098:	2303      	movs	r3, #3
 801609a:	e08c      	b.n	80161b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160a2:	b2db      	uxtb	r3, r3
 80160a4:	2b02      	cmp	r3, #2
 80160a6:	d002      	beq.n	80160ae <USBD_SetConfig+0x3e>
 80160a8:	2b03      	cmp	r3, #3
 80160aa:	d029      	beq.n	8016100 <USBD_SetConfig+0x90>
 80160ac:	e075      	b.n	801619a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160ae:	4b44      	ldr	r3, [pc, #272]	; (80161c0 <USBD_SetConfig+0x150>)
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d020      	beq.n	80160f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160b6:	4b42      	ldr	r3, [pc, #264]	; (80161c0 <USBD_SetConfig+0x150>)
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	461a      	mov	r2, r3
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160c0:	4b3f      	ldr	r3, [pc, #252]	; (80161c0 <USBD_SetConfig+0x150>)
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	4619      	mov	r1, r3
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7fe ffe1 	bl	801508e <USBD_SetClassConfig>
 80160cc:	4603      	mov	r3, r0
 80160ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80160d0:	7bfb      	ldrb	r3, [r7, #15]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d008      	beq.n	80160e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80160d6:	6839      	ldr	r1, [r7, #0]
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 f962 	bl	80163a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2202      	movs	r2, #2
 80160e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160e6:	e065      	b.n	80161b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 fa25 	bl	8016538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2203      	movs	r2, #3
 80160f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160f6:	e05d      	b.n	80161b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f000 fa1d 	bl	8016538 <USBD_CtlSendStatus>
      break;
 80160fe:	e059      	b.n	80161b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016100:	4b2f      	ldr	r3, [pc, #188]	; (80161c0 <USBD_SetConfig+0x150>)
 8016102:	781b      	ldrb	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d112      	bne.n	801612e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2202      	movs	r2, #2
 801610c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016110:	4b2b      	ldr	r3, [pc, #172]	; (80161c0 <USBD_SetConfig+0x150>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	461a      	mov	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801611a:	4b29      	ldr	r3, [pc, #164]	; (80161c0 <USBD_SetConfig+0x150>)
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	4619      	mov	r1, r3
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f7fe ffd0 	bl	80150c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 fa06 	bl	8016538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801612c:	e042      	b.n	80161b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801612e:	4b24      	ldr	r3, [pc, #144]	; (80161c0 <USBD_SetConfig+0x150>)
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	461a      	mov	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	429a      	cmp	r2, r3
 801613a:	d02a      	beq.n	8016192 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	685b      	ldr	r3, [r3, #4]
 8016140:	b2db      	uxtb	r3, r3
 8016142:	4619      	mov	r1, r3
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f7fe ffbe 	bl	80150c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801614a:	4b1d      	ldr	r3, [pc, #116]	; (80161c0 <USBD_SetConfig+0x150>)
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	461a      	mov	r2, r3
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016154:	4b1a      	ldr	r3, [pc, #104]	; (80161c0 <USBD_SetConfig+0x150>)
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	4619      	mov	r1, r3
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f7fe ff97 	bl	801508e <USBD_SetClassConfig>
 8016160:	4603      	mov	r3, r0
 8016162:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016164:	7bfb      	ldrb	r3, [r7, #15]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d00f      	beq.n	801618a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801616a:	6839      	ldr	r1, [r7, #0]
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f000 f918 	bl	80163a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	b2db      	uxtb	r3, r3
 8016178:	4619      	mov	r1, r3
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f7fe ffa3 	bl	80150c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2202      	movs	r2, #2
 8016184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016188:	e014      	b.n	80161b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 f9d4 	bl	8016538 <USBD_CtlSendStatus>
      break;
 8016190:	e010      	b.n	80161b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f000 f9d0 	bl	8016538 <USBD_CtlSendStatus>
      break;
 8016198:	e00c      	b.n	80161b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801619a:	6839      	ldr	r1, [r7, #0]
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 f900 	bl	80163a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80161a2:	4b07      	ldr	r3, [pc, #28]	; (80161c0 <USBD_SetConfig+0x150>)
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	4619      	mov	r1, r3
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7fe ff8c 	bl	80150c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80161ae:	2303      	movs	r3, #3
 80161b0:	73fb      	strb	r3, [r7, #15]
      break;
 80161b2:	bf00      	nop
  }

  return ret;
 80161b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3710      	adds	r7, #16
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	240015e4 	.word	0x240015e4

080161c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	88db      	ldrh	r3, [r3, #6]
 80161d2:	2b01      	cmp	r3, #1
 80161d4:	d004      	beq.n	80161e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161d6:	6839      	ldr	r1, [r7, #0]
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f000 f8e2 	bl	80163a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161de:	e023      	b.n	8016228 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161e6:	b2db      	uxtb	r3, r3
 80161e8:	2b02      	cmp	r3, #2
 80161ea:	dc02      	bgt.n	80161f2 <USBD_GetConfig+0x2e>
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	dc03      	bgt.n	80161f8 <USBD_GetConfig+0x34>
 80161f0:	e015      	b.n	801621e <USBD_GetConfig+0x5a>
 80161f2:	2b03      	cmp	r3, #3
 80161f4:	d00b      	beq.n	801620e <USBD_GetConfig+0x4a>
 80161f6:	e012      	b.n	801621e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2200      	movs	r2, #0
 80161fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	3308      	adds	r3, #8
 8016202:	2201      	movs	r2, #1
 8016204:	4619      	mov	r1, r3
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f93c 	bl	8016484 <USBD_CtlSendData>
        break;
 801620c:	e00c      	b.n	8016228 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	3304      	adds	r3, #4
 8016212:	2201      	movs	r2, #1
 8016214:	4619      	mov	r1, r3
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f000 f934 	bl	8016484 <USBD_CtlSendData>
        break;
 801621c:	e004      	b.n	8016228 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801621e:	6839      	ldr	r1, [r7, #0]
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f000 f8be 	bl	80163a2 <USBD_CtlError>
        break;
 8016226:	bf00      	nop
}
 8016228:	bf00      	nop
 801622a:	3708      	adds	r7, #8
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}

08016230 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016240:	b2db      	uxtb	r3, r3
 8016242:	3b01      	subs	r3, #1
 8016244:	2b02      	cmp	r3, #2
 8016246:	d81e      	bhi.n	8016286 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	88db      	ldrh	r3, [r3, #6]
 801624c:	2b02      	cmp	r3, #2
 801624e:	d004      	beq.n	801625a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016250:	6839      	ldr	r1, [r7, #0]
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f000 f8a5 	bl	80163a2 <USBD_CtlError>
        break;
 8016258:	e01a      	b.n	8016290 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2201      	movs	r2, #1
 801625e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016266:	2b00      	cmp	r3, #0
 8016268:	d005      	beq.n	8016276 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	68db      	ldr	r3, [r3, #12]
 801626e:	f043 0202 	orr.w	r2, r3, #2
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	330c      	adds	r3, #12
 801627a:	2202      	movs	r2, #2
 801627c:	4619      	mov	r1, r3
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f000 f900 	bl	8016484 <USBD_CtlSendData>
      break;
 8016284:	e004      	b.n	8016290 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016286:	6839      	ldr	r1, [r7, #0]
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f000 f88a 	bl	80163a2 <USBD_CtlError>
      break;
 801628e:	bf00      	nop
  }
}
 8016290:	bf00      	nop
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	885b      	ldrh	r3, [r3, #2]
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d107      	bne.n	80162ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2201      	movs	r2, #1
 80162ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f000 f940 	bl	8016538 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162b8:	e013      	b.n	80162e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	885b      	ldrh	r3, [r3, #2]
 80162be:	2b02      	cmp	r3, #2
 80162c0:	d10b      	bne.n	80162da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	889b      	ldrh	r3, [r3, #4]
 80162c6:	0a1b      	lsrs	r3, r3, #8
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	b2da      	uxtb	r2, r3
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 f930 	bl	8016538 <USBD_CtlSendStatus>
}
 80162d8:	e003      	b.n	80162e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80162da:	6839      	ldr	r1, [r7, #0]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f000 f860 	bl	80163a2 <USBD_CtlError>
}
 80162e2:	bf00      	nop
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}

080162ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162ea:	b580      	push	{r7, lr}
 80162ec:	b082      	sub	sp, #8
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	6078      	str	r0, [r7, #4]
 80162f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	3b01      	subs	r3, #1
 80162fe:	2b02      	cmp	r3, #2
 8016300:	d80b      	bhi.n	801631a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	885b      	ldrh	r3, [r3, #2]
 8016306:	2b01      	cmp	r3, #1
 8016308:	d10c      	bne.n	8016324 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2200      	movs	r2, #0
 801630e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 f910 	bl	8016538 <USBD_CtlSendStatus>
      }
      break;
 8016318:	e004      	b.n	8016324 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801631a:	6839      	ldr	r1, [r7, #0]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 f840 	bl	80163a2 <USBD_CtlError>
      break;
 8016322:	e000      	b.n	8016326 <USBD_ClrFeature+0x3c>
      break;
 8016324:	bf00      	nop
  }
}
 8016326:	bf00      	nop
 8016328:	3708      	adds	r7, #8
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801632e:	b580      	push	{r7, lr}
 8016330:	b084      	sub	sp, #16
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
 8016336:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	781a      	ldrb	r2, [r3, #0]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	3301      	adds	r3, #1
 8016348:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	781a      	ldrb	r2, [r3, #0]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	3301      	adds	r3, #1
 8016356:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016358:	68f8      	ldr	r0, [r7, #12]
 801635a:	f7ff fa41 	bl	80157e0 <SWAPBYTE>
 801635e:	4603      	mov	r3, r0
 8016360:	461a      	mov	r2, r3
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	3301      	adds	r3, #1
 801636a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	3301      	adds	r3, #1
 8016370:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016372:	68f8      	ldr	r0, [r7, #12]
 8016374:	f7ff fa34 	bl	80157e0 <SWAPBYTE>
 8016378:	4603      	mov	r3, r0
 801637a:	461a      	mov	r2, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	3301      	adds	r3, #1
 8016384:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	3301      	adds	r3, #1
 801638a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f7ff fa27 	bl	80157e0 <SWAPBYTE>
 8016392:	4603      	mov	r3, r0
 8016394:	461a      	mov	r2, r3
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	80da      	strh	r2, [r3, #6]
}
 801639a:	bf00      	nop
 801639c:	3710      	adds	r7, #16
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163a2:	b580      	push	{r7, lr}
 80163a4:	b082      	sub	sp, #8
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	6078      	str	r0, [r7, #4]
 80163aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163ac:	2180      	movs	r1, #128	; 0x80
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	f000 fd4c 	bl	8016e4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163b4:	2100      	movs	r1, #0
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 fd48 	bl	8016e4c <USBD_LL_StallEP>
}
 80163bc:	bf00      	nop
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b086      	sub	sp, #24
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163d0:	2300      	movs	r3, #0
 80163d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d036      	beq.n	8016448 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163de:	6938      	ldr	r0, [r7, #16]
 80163e0:	f000 f836 	bl	8016450 <USBD_GetLen>
 80163e4:	4603      	mov	r3, r0
 80163e6:	3301      	adds	r3, #1
 80163e8:	b29b      	uxth	r3, r3
 80163ea:	005b      	lsls	r3, r3, #1
 80163ec:	b29a      	uxth	r2, r3
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
 80163f4:	68ba      	ldr	r2, [r7, #8]
 80163f6:	4413      	add	r3, r2
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	7812      	ldrb	r2, [r2, #0]
 80163fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
 8016400:	3301      	adds	r3, #1
 8016402:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016404:	7dfb      	ldrb	r3, [r7, #23]
 8016406:	68ba      	ldr	r2, [r7, #8]
 8016408:	4413      	add	r3, r2
 801640a:	2203      	movs	r2, #3
 801640c:	701a      	strb	r2, [r3, #0]
  idx++;
 801640e:	7dfb      	ldrb	r3, [r7, #23]
 8016410:	3301      	adds	r3, #1
 8016412:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016414:	e013      	b.n	801643e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016416:	7dfb      	ldrb	r3, [r7, #23]
 8016418:	68ba      	ldr	r2, [r7, #8]
 801641a:	4413      	add	r3, r2
 801641c:	693a      	ldr	r2, [r7, #16]
 801641e:	7812      	ldrb	r2, [r2, #0]
 8016420:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	3301      	adds	r3, #1
 8016426:	613b      	str	r3, [r7, #16]
    idx++;
 8016428:	7dfb      	ldrb	r3, [r7, #23]
 801642a:	3301      	adds	r3, #1
 801642c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801642e:	7dfb      	ldrb	r3, [r7, #23]
 8016430:	68ba      	ldr	r2, [r7, #8]
 8016432:	4413      	add	r3, r2
 8016434:	2200      	movs	r2, #0
 8016436:	701a      	strb	r2, [r3, #0]
    idx++;
 8016438:	7dfb      	ldrb	r3, [r7, #23]
 801643a:	3301      	adds	r3, #1
 801643c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d1e7      	bne.n	8016416 <USBD_GetString+0x52>
 8016446:	e000      	b.n	801644a <USBD_GetString+0x86>
    return;
 8016448:	bf00      	nop
  }
}
 801644a:	3718      	adds	r7, #24
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016450:	b480      	push	{r7}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016458:	2300      	movs	r3, #0
 801645a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016460:	e005      	b.n	801646e <USBD_GetLen+0x1e>
  {
    len++;
 8016462:	7bfb      	ldrb	r3, [r7, #15]
 8016464:	3301      	adds	r3, #1
 8016466:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	3301      	adds	r3, #1
 801646c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	781b      	ldrb	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d1f5      	bne.n	8016462 <USBD_GetLen+0x12>
  }

  return len;
 8016476:	7bfb      	ldrb	r3, [r7, #15]
}
 8016478:	4618      	mov	r0, r3
 801647a:	3714      	adds	r7, #20
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr

08016484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b084      	sub	sp, #16
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2202      	movs	r2, #2
 8016494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	68ba      	ldr	r2, [r7, #8]
 80164a8:	2100      	movs	r1, #0
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f000 fd57 	bl	8016f5e <USBD_LL_Transmit>

  return USBD_OK;
 80164b0:	2300      	movs	r3, #0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3710      	adds	r7, #16
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}

080164ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164ba:	b580      	push	{r7, lr}
 80164bc:	b084      	sub	sp, #16
 80164be:	af00      	add	r7, sp, #0
 80164c0:	60f8      	str	r0, [r7, #12]
 80164c2:	60b9      	str	r1, [r7, #8]
 80164c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	2100      	movs	r1, #0
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	f000 fd46 	bl	8016f5e <USBD_LL_Transmit>

  return USBD_OK;
 80164d2:	2300      	movs	r3, #0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3710      	adds	r7, #16
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2203      	movs	r2, #3
 80164ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	687a      	ldr	r2, [r7, #4]
 80164f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	68ba      	ldr	r2, [r7, #8]
 8016504:	2100      	movs	r1, #0
 8016506:	68f8      	ldr	r0, [r7, #12]
 8016508:	f000 fd4a 	bl	8016fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801650c:	2300      	movs	r3, #0
}
 801650e:	4618      	mov	r0, r3
 8016510:	3710      	adds	r7, #16
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}

08016516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016516:	b580      	push	{r7, lr}
 8016518:	b084      	sub	sp, #16
 801651a:	af00      	add	r7, sp, #0
 801651c:	60f8      	str	r0, [r7, #12]
 801651e:	60b9      	str	r1, [r7, #8]
 8016520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	68ba      	ldr	r2, [r7, #8]
 8016526:	2100      	movs	r1, #0
 8016528:	68f8      	ldr	r0, [r7, #12]
 801652a:	f000 fd39 	bl	8016fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801652e:	2300      	movs	r3, #0
}
 8016530:	4618      	mov	r0, r3
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2204      	movs	r2, #4
 8016544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016548:	2300      	movs	r3, #0
 801654a:	2200      	movs	r2, #0
 801654c:	2100      	movs	r1, #0
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f000 fd05 	bl	8016f5e <USBD_LL_Transmit>

  return USBD_OK;
 8016554:	2300      	movs	r3, #0
}
 8016556:	4618      	mov	r0, r3
 8016558:	3708      	adds	r7, #8
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}

0801655e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801655e:	b580      	push	{r7, lr}
 8016560:	b082      	sub	sp, #8
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2205      	movs	r2, #5
 801656a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801656e:	2300      	movs	r3, #0
 8016570:	2200      	movs	r2, #0
 8016572:	2100      	movs	r1, #0
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f000 fd13 	bl	8016fa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801657a:	2300      	movs	r3, #0
}
 801657c:	4618      	mov	r0, r3
 801657e:	3708      	adds	r7, #8
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}

08016584 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016584:	b480      	push	{r7}
 8016586:	b087      	sub	sp, #28
 8016588:	af00      	add	r7, sp, #0
 801658a:	60f8      	str	r0, [r7, #12]
 801658c:	60b9      	str	r1, [r7, #8]
 801658e:	4613      	mov	r3, r2
 8016590:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016592:	2301      	movs	r3, #1
 8016594:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016596:	2300      	movs	r3, #0
 8016598:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801659a:	4b1f      	ldr	r3, [pc, #124]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 801659c:	7a5b      	ldrb	r3, [r3, #9]
 801659e:	b2db      	uxtb	r3, r3
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d131      	bne.n	8016608 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80165a4:	4b1c      	ldr	r3, [pc, #112]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165a6:	7a5b      	ldrb	r3, [r3, #9]
 80165a8:	b2db      	uxtb	r3, r3
 80165aa:	461a      	mov	r2, r3
 80165ac:	4b1a      	ldr	r3, [pc, #104]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165ae:	2100      	movs	r1, #0
 80165b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80165b2:	4b19      	ldr	r3, [pc, #100]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165b4:	7a5b      	ldrb	r3, [r3, #9]
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	4a17      	ldr	r2, [pc, #92]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165ba:	009b      	lsls	r3, r3, #2
 80165bc:	4413      	add	r3, r2
 80165be:	68fa      	ldr	r2, [r7, #12]
 80165c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80165c2:	4b15      	ldr	r3, [pc, #84]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165c4:	7a5b      	ldrb	r3, [r3, #9]
 80165c6:	b2db      	uxtb	r3, r3
 80165c8:	461a      	mov	r2, r3
 80165ca:	4b13      	ldr	r3, [pc, #76]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165cc:	4413      	add	r3, r2
 80165ce:	79fa      	ldrb	r2, [r7, #7]
 80165d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80165d2:	4b11      	ldr	r3, [pc, #68]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165d4:	7a5b      	ldrb	r3, [r3, #9]
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	1c5a      	adds	r2, r3, #1
 80165da:	b2d1      	uxtb	r1, r2
 80165dc:	4a0e      	ldr	r2, [pc, #56]	; (8016618 <FATFS_LinkDriverEx+0x94>)
 80165de:	7251      	strb	r1, [r2, #9]
 80165e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80165e2:	7dbb      	ldrb	r3, [r7, #22]
 80165e4:	3330      	adds	r3, #48	; 0x30
 80165e6:	b2da      	uxtb	r2, r3
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	3301      	adds	r3, #1
 80165f0:	223a      	movs	r2, #58	; 0x3a
 80165f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	3302      	adds	r3, #2
 80165f8:	222f      	movs	r2, #47	; 0x2f
 80165fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3303      	adds	r3, #3
 8016600:	2200      	movs	r2, #0
 8016602:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016604:	2300      	movs	r3, #0
 8016606:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016608:	7dfb      	ldrb	r3, [r7, #23]
}
 801660a:	4618      	mov	r0, r3
 801660c:	371c      	adds	r7, #28
 801660e:	46bd      	mov	sp, r7
 8016610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016614:	4770      	bx	lr
 8016616:	bf00      	nop
 8016618:	240015e8 	.word	0x240015e8

0801661c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016626:	2200      	movs	r2, #0
 8016628:	6839      	ldr	r1, [r7, #0]
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f7ff ffaa 	bl	8016584 <FATFS_LinkDriverEx>
 8016630:	4603      	mov	r3, r0
}
 8016632:	4618      	mov	r0, r3
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
	...

0801663c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016640:	2201      	movs	r2, #1
 8016642:	4913      	ldr	r1, [pc, #76]	; (8016690 <MX_USB_DEVICE_Init+0x54>)
 8016644:	4813      	ldr	r0, [pc, #76]	; (8016694 <MX_USB_DEVICE_Init+0x58>)
 8016646:	f7fe fca5 	bl	8014f94 <USBD_Init>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d001      	beq.n	8016654 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016650:	f7ec f986 	bl	8002960 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016654:	4910      	ldr	r1, [pc, #64]	; (8016698 <MX_USB_DEVICE_Init+0x5c>)
 8016656:	480f      	ldr	r0, [pc, #60]	; (8016694 <MX_USB_DEVICE_Init+0x58>)
 8016658:	f7fe fccc 	bl	8014ff4 <USBD_RegisterClass>
 801665c:	4603      	mov	r3, r0
 801665e:	2b00      	cmp	r3, #0
 8016660:	d001      	beq.n	8016666 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016662:	f7ec f97d 	bl	8002960 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016666:	490d      	ldr	r1, [pc, #52]	; (801669c <MX_USB_DEVICE_Init+0x60>)
 8016668:	480a      	ldr	r0, [pc, #40]	; (8016694 <MX_USB_DEVICE_Init+0x58>)
 801666a:	f7fe fbc3 	bl	8014df4 <USBD_CDC_RegisterInterface>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	d001      	beq.n	8016678 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016674:	f7ec f974 	bl	8002960 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016678:	4806      	ldr	r0, [pc, #24]	; (8016694 <MX_USB_DEVICE_Init+0x58>)
 801667a:	f7fe fcf1 	bl	8015060 <USBD_Start>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d001      	beq.n	8016688 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016684:	f7ec f96c 	bl	8002960 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016688:	f7f3 f908 	bl	800989c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801668c:	bf00      	nop
 801668e:	bd80      	pop	{r7, pc}
 8016690:	240000b0 	.word	0x240000b0
 8016694:	240015f4 	.word	0x240015f4
 8016698:	2400001c 	.word	0x2400001c
 801669c:	2400009c 	.word	0x2400009c

080166a0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80166a4:	2200      	movs	r2, #0
 80166a6:	4905      	ldr	r1, [pc, #20]	; (80166bc <CDC_Init_HS+0x1c>)
 80166a8:	4805      	ldr	r0, [pc, #20]	; (80166c0 <CDC_Init_HS+0x20>)
 80166aa:	f7fe fbbd 	bl	8014e28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80166ae:	4905      	ldr	r1, [pc, #20]	; (80166c4 <CDC_Init_HS+0x24>)
 80166b0:	4803      	ldr	r0, [pc, #12]	; (80166c0 <CDC_Init_HS+0x20>)
 80166b2:	f7fe fbdb 	bl	8014e6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166b6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	240020d0 	.word	0x240020d0
 80166c0:	240015f4 	.word	0x240015f4
 80166c4:	240018d0 	.word	0x240018d0

080166c8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80166c8:	b480      	push	{r7}
 80166ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80166cc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	46bd      	mov	sp, r7
 80166d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d6:	4770      	bx	lr

080166d8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
 80166de:	4603      	mov	r3, r0
 80166e0:	6039      	str	r1, [r7, #0]
 80166e2:	71fb      	strb	r3, [r7, #7]
 80166e4:	4613      	mov	r3, r2
 80166e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80166e8:	79fb      	ldrb	r3, [r7, #7]
 80166ea:	2b23      	cmp	r3, #35	; 0x23
 80166ec:	d84a      	bhi.n	8016784 <CDC_Control_HS+0xac>
 80166ee:	a201      	add	r2, pc, #4	; (adr r2, 80166f4 <CDC_Control_HS+0x1c>)
 80166f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166f4:	08016785 	.word	0x08016785
 80166f8:	08016785 	.word	0x08016785
 80166fc:	08016785 	.word	0x08016785
 8016700:	08016785 	.word	0x08016785
 8016704:	08016785 	.word	0x08016785
 8016708:	08016785 	.word	0x08016785
 801670c:	08016785 	.word	0x08016785
 8016710:	08016785 	.word	0x08016785
 8016714:	08016785 	.word	0x08016785
 8016718:	08016785 	.word	0x08016785
 801671c:	08016785 	.word	0x08016785
 8016720:	08016785 	.word	0x08016785
 8016724:	08016785 	.word	0x08016785
 8016728:	08016785 	.word	0x08016785
 801672c:	08016785 	.word	0x08016785
 8016730:	08016785 	.word	0x08016785
 8016734:	08016785 	.word	0x08016785
 8016738:	08016785 	.word	0x08016785
 801673c:	08016785 	.word	0x08016785
 8016740:	08016785 	.word	0x08016785
 8016744:	08016785 	.word	0x08016785
 8016748:	08016785 	.word	0x08016785
 801674c:	08016785 	.word	0x08016785
 8016750:	08016785 	.word	0x08016785
 8016754:	08016785 	.word	0x08016785
 8016758:	08016785 	.word	0x08016785
 801675c:	08016785 	.word	0x08016785
 8016760:	08016785 	.word	0x08016785
 8016764:	08016785 	.word	0x08016785
 8016768:	08016785 	.word	0x08016785
 801676c:	08016785 	.word	0x08016785
 8016770:	08016785 	.word	0x08016785
 8016774:	08016785 	.word	0x08016785
 8016778:	08016785 	.word	0x08016785
 801677c:	08016785 	.word	0x08016785
 8016780:	08016785 	.word	0x08016785
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016784:	bf00      	nop
  }

  return (USBD_OK);
 8016786:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016788:	4618      	mov	r0, r3
 801678a:	370c      	adds	r7, #12
 801678c:	46bd      	mov	sp, r7
 801678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016792:	4770      	bx	lr

08016794 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801679e:	6879      	ldr	r1, [r7, #4]
 80167a0:	480e      	ldr	r0, [pc, #56]	; (80167dc <CDC_Receive_HS+0x48>)
 80167a2:	f7fe fb63 	bl	8014e6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80167a6:	480d      	ldr	r0, [pc, #52]	; (80167dc <CDC_Receive_HS+0x48>)
 80167a8:	f7fe fbbe 	bl	8014f28 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80167b2:	4b0b      	ldr	r3, [pc, #44]	; (80167e0 <CDC_Receive_HS+0x4c>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	4a0b      	ldr	r2, [pc, #44]	; (80167e4 <CDC_Receive_HS+0x50>)
 80167b8:	4413      	add	r3, r2
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	6879      	ldr	r1, [r7, #4]
 80167be:	4618      	mov	r0, r3
 80167c0:	f000 fcf0 	bl	80171a4 <memcpy>
  usbBytesReady += cpyLen;
 80167c4:	4b06      	ldr	r3, [pc, #24]	; (80167e0 <CDC_Receive_HS+0x4c>)
 80167c6:	681a      	ldr	r2, [r3, #0]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	4413      	add	r3, r2
 80167cc:	4a04      	ldr	r2, [pc, #16]	; (80167e0 <CDC_Receive_HS+0x4c>)
 80167ce:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80167d0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80167d2:	4618      	mov	r0, r3
 80167d4:	3710      	adds	r7, #16
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}
 80167da:	bf00      	nop
 80167dc:	240015f4 	.word	0x240015f4
 80167e0:	2400026c 	.word	0x2400026c
 80167e4:	2400016c 	.word	0x2400016c

080167e8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b084      	sub	sp, #16
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	460b      	mov	r3, r1
 80167f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80167f4:	2300      	movs	r3, #0
 80167f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80167f8:	4b0d      	ldr	r3, [pc, #52]	; (8016830 <CDC_Transmit_HS+0x48>)
 80167fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016806:	2b00      	cmp	r3, #0
 8016808:	d001      	beq.n	801680e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801680a:	2301      	movs	r3, #1
 801680c:	e00b      	b.n	8016826 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801680e:	887b      	ldrh	r3, [r7, #2]
 8016810:	461a      	mov	r2, r3
 8016812:	6879      	ldr	r1, [r7, #4]
 8016814:	4806      	ldr	r0, [pc, #24]	; (8016830 <CDC_Transmit_HS+0x48>)
 8016816:	f7fe fb07 	bl	8014e28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801681a:	4805      	ldr	r0, [pc, #20]	; (8016830 <CDC_Transmit_HS+0x48>)
 801681c:	f7fe fb44 	bl	8014ea8 <USBD_CDC_TransmitPacket>
 8016820:	4603      	mov	r3, r0
 8016822:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016824:	7bfb      	ldrb	r3, [r7, #15]
}
 8016826:	4618      	mov	r0, r3
 8016828:	3710      	adds	r7, #16
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	240015f4 	.word	0x240015f4

08016834 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016834:	b480      	push	{r7}
 8016836:	b087      	sub	sp, #28
 8016838:	af00      	add	r7, sp, #0
 801683a:	60f8      	str	r0, [r7, #12]
 801683c:	60b9      	str	r1, [r7, #8]
 801683e:	4613      	mov	r3, r2
 8016840:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016842:	2300      	movs	r3, #0
 8016844:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016846:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801684a:	4618      	mov	r0, r3
 801684c:	371c      	adds	r7, #28
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr
	...

08016858 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016858:	b480      	push	{r7}
 801685a:	b083      	sub	sp, #12
 801685c:	af00      	add	r7, sp, #0
 801685e:	4603      	mov	r3, r0
 8016860:	6039      	str	r1, [r7, #0]
 8016862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	2212      	movs	r2, #18
 8016868:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801686a:	4b03      	ldr	r3, [pc, #12]	; (8016878 <USBD_HS_DeviceDescriptor+0x20>)
}
 801686c:	4618      	mov	r0, r3
 801686e:	370c      	adds	r7, #12
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr
 8016878:	240000cc 	.word	0x240000cc

0801687c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801687c:	b480      	push	{r7}
 801687e:	b083      	sub	sp, #12
 8016880:	af00      	add	r7, sp, #0
 8016882:	4603      	mov	r3, r0
 8016884:	6039      	str	r1, [r7, #0]
 8016886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	2204      	movs	r2, #4
 801688c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801688e:	4b03      	ldr	r3, [pc, #12]	; (801689c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016890:	4618      	mov	r0, r3
 8016892:	370c      	adds	r7, #12
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr
 801689c:	240000e0 	.word	0x240000e0

080168a0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	4603      	mov	r3, r0
 80168a8:	6039      	str	r1, [r7, #0]
 80168aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168ac:	79fb      	ldrb	r3, [r7, #7]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d105      	bne.n	80168be <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168b2:	683a      	ldr	r2, [r7, #0]
 80168b4:	4907      	ldr	r1, [pc, #28]	; (80168d4 <USBD_HS_ProductStrDescriptor+0x34>)
 80168b6:	4808      	ldr	r0, [pc, #32]	; (80168d8 <USBD_HS_ProductStrDescriptor+0x38>)
 80168b8:	f7ff fd84 	bl	80163c4 <USBD_GetString>
 80168bc:	e004      	b.n	80168c8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168be:	683a      	ldr	r2, [r7, #0]
 80168c0:	4904      	ldr	r1, [pc, #16]	; (80168d4 <USBD_HS_ProductStrDescriptor+0x34>)
 80168c2:	4805      	ldr	r0, [pc, #20]	; (80168d8 <USBD_HS_ProductStrDescriptor+0x38>)
 80168c4:	f7ff fd7e 	bl	80163c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168c8:	4b02      	ldr	r3, [pc, #8]	; (80168d4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3708      	adds	r7, #8
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	bf00      	nop
 80168d4:	240028d0 	.word	0x240028d0
 80168d8:	080184c0 	.word	0x080184c0

080168dc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	4603      	mov	r3, r0
 80168e4:	6039      	str	r1, [r7, #0]
 80168e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80168e8:	683a      	ldr	r2, [r7, #0]
 80168ea:	4904      	ldr	r1, [pc, #16]	; (80168fc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80168ec:	4804      	ldr	r0, [pc, #16]	; (8016900 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80168ee:	f7ff fd69 	bl	80163c4 <USBD_GetString>
  return USBD_StrDesc;
 80168f2:	4b02      	ldr	r3, [pc, #8]	; (80168fc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3708      	adds	r7, #8
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}
 80168fc:	240028d0 	.word	0x240028d0
 8016900:	080184dc 	.word	0x080184dc

08016904 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b082      	sub	sp, #8
 8016908:	af00      	add	r7, sp, #0
 801690a:	4603      	mov	r3, r0
 801690c:	6039      	str	r1, [r7, #0]
 801690e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	221a      	movs	r2, #26
 8016914:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016916:	f000 f843 	bl	80169a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801691a:	4b02      	ldr	r3, [pc, #8]	; (8016924 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801691c:	4618      	mov	r0, r3
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}
 8016924:	240000e4 	.word	0x240000e4

08016928 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
 801692e:	4603      	mov	r3, r0
 8016930:	6039      	str	r1, [r7, #0]
 8016932:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016934:	79fb      	ldrb	r3, [r7, #7]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d105      	bne.n	8016946 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	4907      	ldr	r1, [pc, #28]	; (801695c <USBD_HS_ConfigStrDescriptor+0x34>)
 801693e:	4808      	ldr	r0, [pc, #32]	; (8016960 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016940:	f7ff fd40 	bl	80163c4 <USBD_GetString>
 8016944:	e004      	b.n	8016950 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016946:	683a      	ldr	r2, [r7, #0]
 8016948:	4904      	ldr	r1, [pc, #16]	; (801695c <USBD_HS_ConfigStrDescriptor+0x34>)
 801694a:	4805      	ldr	r0, [pc, #20]	; (8016960 <USBD_HS_ConfigStrDescriptor+0x38>)
 801694c:	f7ff fd3a 	bl	80163c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016950:	4b02      	ldr	r3, [pc, #8]	; (801695c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016952:	4618      	mov	r0, r3
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}
 801695a:	bf00      	nop
 801695c:	240028d0 	.word	0x240028d0
 8016960:	080184e0 	.word	0x080184e0

08016964 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b082      	sub	sp, #8
 8016968:	af00      	add	r7, sp, #0
 801696a:	4603      	mov	r3, r0
 801696c:	6039      	str	r1, [r7, #0]
 801696e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016970:	79fb      	ldrb	r3, [r7, #7]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d105      	bne.n	8016982 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016976:	683a      	ldr	r2, [r7, #0]
 8016978:	4907      	ldr	r1, [pc, #28]	; (8016998 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801697a:	4808      	ldr	r0, [pc, #32]	; (801699c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801697c:	f7ff fd22 	bl	80163c4 <USBD_GetString>
 8016980:	e004      	b.n	801698c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016982:	683a      	ldr	r2, [r7, #0]
 8016984:	4904      	ldr	r1, [pc, #16]	; (8016998 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016986:	4805      	ldr	r0, [pc, #20]	; (801699c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016988:	f7ff fd1c 	bl	80163c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801698c:	4b02      	ldr	r3, [pc, #8]	; (8016998 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801698e:	4618      	mov	r0, r3
 8016990:	3708      	adds	r7, #8
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	240028d0 	.word	0x240028d0
 801699c:	080184ec 	.word	0x080184ec

080169a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80169a6:	4b0f      	ldr	r3, [pc, #60]	; (80169e4 <Get_SerialNum+0x44>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80169ac:	4b0e      	ldr	r3, [pc, #56]	; (80169e8 <Get_SerialNum+0x48>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80169b2:	4b0e      	ldr	r3, [pc, #56]	; (80169ec <Get_SerialNum+0x4c>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80169b8:	68fa      	ldr	r2, [r7, #12]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	4413      	add	r3, r2
 80169be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d009      	beq.n	80169da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80169c6:	2208      	movs	r2, #8
 80169c8:	4909      	ldr	r1, [pc, #36]	; (80169f0 <Get_SerialNum+0x50>)
 80169ca:	68f8      	ldr	r0, [r7, #12]
 80169cc:	f000 f814 	bl	80169f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80169d0:	2204      	movs	r2, #4
 80169d2:	4908      	ldr	r1, [pc, #32]	; (80169f4 <Get_SerialNum+0x54>)
 80169d4:	68b8      	ldr	r0, [r7, #8]
 80169d6:	f000 f80f 	bl	80169f8 <IntToUnicode>
  }
}
 80169da:	bf00      	nop
 80169dc:	3710      	adds	r7, #16
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	1ff1e800 	.word	0x1ff1e800
 80169e8:	1ff1e804 	.word	0x1ff1e804
 80169ec:	1ff1e808 	.word	0x1ff1e808
 80169f0:	240000e6 	.word	0x240000e6
 80169f4:	240000f6 	.word	0x240000f6

080169f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b087      	sub	sp, #28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	4613      	mov	r3, r2
 8016a04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016a06:	2300      	movs	r3, #0
 8016a08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	75fb      	strb	r3, [r7, #23]
 8016a0e:	e027      	b.n	8016a60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	0f1b      	lsrs	r3, r3, #28
 8016a14:	2b09      	cmp	r3, #9
 8016a16:	d80b      	bhi.n	8016a30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	0f1b      	lsrs	r3, r3, #28
 8016a1c:	b2da      	uxtb	r2, r3
 8016a1e:	7dfb      	ldrb	r3, [r7, #23]
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	4619      	mov	r1, r3
 8016a24:	68bb      	ldr	r3, [r7, #8]
 8016a26:	440b      	add	r3, r1
 8016a28:	3230      	adds	r2, #48	; 0x30
 8016a2a:	b2d2      	uxtb	r2, r2
 8016a2c:	701a      	strb	r2, [r3, #0]
 8016a2e:	e00a      	b.n	8016a46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	0f1b      	lsrs	r3, r3, #28
 8016a34:	b2da      	uxtb	r2, r3
 8016a36:	7dfb      	ldrb	r3, [r7, #23]
 8016a38:	005b      	lsls	r3, r3, #1
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	440b      	add	r3, r1
 8016a40:	3237      	adds	r2, #55	; 0x37
 8016a42:	b2d2      	uxtb	r2, r2
 8016a44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	011b      	lsls	r3, r3, #4
 8016a4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a4c:	7dfb      	ldrb	r3, [r7, #23]
 8016a4e:	005b      	lsls	r3, r3, #1
 8016a50:	3301      	adds	r3, #1
 8016a52:	68ba      	ldr	r2, [r7, #8]
 8016a54:	4413      	add	r3, r2
 8016a56:	2200      	movs	r2, #0
 8016a58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a5a:	7dfb      	ldrb	r3, [r7, #23]
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	75fb      	strb	r3, [r7, #23]
 8016a60:	7dfa      	ldrb	r2, [r7, #23]
 8016a62:	79fb      	ldrb	r3, [r7, #7]
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d3d3      	bcc.n	8016a10 <IntToUnicode+0x18>
  }
}
 8016a68:	bf00      	nop
 8016a6a:	bf00      	nop
 8016a6c:	371c      	adds	r7, #28
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a74:	4770      	bx	lr
	...

08016a78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b0b2      	sub	sp, #200	; 0xc8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a80:	f107 0310 	add.w	r3, r7, #16
 8016a84:	22b8      	movs	r2, #184	; 0xb8
 8016a86:	2100      	movs	r1, #0
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f000 fb4f 	bl	801712c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4a1a      	ldr	r2, [pc, #104]	; (8016afc <HAL_PCD_MspInit+0x84>)
 8016a94:	4293      	cmp	r3, r2
 8016a96:	d12c      	bne.n	8016af2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a9c:	f04f 0300 	mov.w	r3, #0
 8016aa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016aa4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016aac:	f107 0310 	add.w	r3, r7, #16
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7f3 fed3 	bl	800a85c <HAL_RCCEx_PeriphCLKConfig>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d001      	beq.n	8016ac0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016abc:	f7eb ff50 	bl	8002960 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016ac0:	f7f2 feec 	bl	800989c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016ac4:	4b0e      	ldr	r3, [pc, #56]	; (8016b00 <HAL_PCD_MspInit+0x88>)
 8016ac6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016aca:	4a0d      	ldr	r2, [pc, #52]	; (8016b00 <HAL_PCD_MspInit+0x88>)
 8016acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016ad0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016ad4:	4b0a      	ldr	r3, [pc, #40]	; (8016b00 <HAL_PCD_MspInit+0x88>)
 8016ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016ade:	60fb      	str	r3, [r7, #12]
 8016ae0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	204d      	movs	r0, #77	; 0x4d
 8016ae8:	f7ee fc5d 	bl	80053a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016aec:	204d      	movs	r0, #77	; 0x4d
 8016aee:	f7ee fc74 	bl	80053da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016af2:	bf00      	nop
 8016af4:	37c8      	adds	r7, #200	; 0xc8
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	40040000 	.word	0x40040000
 8016b00:	58024400 	.word	0x58024400

08016b04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016b18:	4619      	mov	r1, r3
 8016b1a:	4610      	mov	r0, r2
 8016b1c:	f7fe faed 	bl	80150fa <USBD_LL_SetupStage>
}
 8016b20:	bf00      	nop
 8016b22:	3708      	adds	r7, #8
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	460b      	mov	r3, r1
 8016b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b3a:	78fa      	ldrb	r2, [r7, #3]
 8016b3c:	6879      	ldr	r1, [r7, #4]
 8016b3e:	4613      	mov	r3, r2
 8016b40:	00db      	lsls	r3, r3, #3
 8016b42:	4413      	add	r3, r2
 8016b44:	009b      	lsls	r3, r3, #2
 8016b46:	440b      	add	r3, r1
 8016b48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	78fb      	ldrb	r3, [r7, #3]
 8016b50:	4619      	mov	r1, r3
 8016b52:	f7fe fb27 	bl	80151a4 <USBD_LL_DataOutStage>
}
 8016b56:	bf00      	nop
 8016b58:	3708      	adds	r7, #8
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b082      	sub	sp, #8
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
 8016b66:	460b      	mov	r3, r1
 8016b68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b70:	78fa      	ldrb	r2, [r7, #3]
 8016b72:	6879      	ldr	r1, [r7, #4]
 8016b74:	4613      	mov	r3, r2
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	4413      	add	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	440b      	add	r3, r1
 8016b7e:	3348      	adds	r3, #72	; 0x48
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	78fb      	ldrb	r3, [r7, #3]
 8016b84:	4619      	mov	r1, r3
 8016b86:	f7fe fbc0 	bl	801530a <USBD_LL_DataInStage>
}
 8016b8a:	bf00      	nop
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b082      	sub	sp, #8
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7fe fcfa 	bl	801559a <USBD_LL_SOF>
}
 8016ba6:	bf00      	nop
 8016ba8:	3708      	adds	r7, #8
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}

08016bae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bae:	b580      	push	{r7, lr}
 8016bb0:	b084      	sub	sp, #16
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	691b      	ldr	r3, [r3, #16]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d102      	bne.n	8016bc8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	73fb      	strb	r3, [r7, #15]
 8016bc6:	e008      	b.n	8016bda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	691b      	ldr	r3, [r3, #16]
 8016bcc:	2b02      	cmp	r3, #2
 8016bce:	d102      	bne.n	8016bd6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	73fb      	strb	r3, [r7, #15]
 8016bd4:	e001      	b.n	8016bda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016bd6:	f7eb fec3 	bl	8002960 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be0:	7bfa      	ldrb	r2, [r7, #15]
 8016be2:	4611      	mov	r1, r2
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fc94 	bl	8015512 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7fe fc3c 	bl	801546e <USBD_LL_Reset>
}
 8016bf6:	bf00      	nop
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
	...

08016c00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b082      	sub	sp, #8
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7fe fc8f 	bl	8015532 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	687a      	ldr	r2, [r7, #4]
 8016c20:	6812      	ldr	r2, [r2, #0]
 8016c22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c26:	f043 0301 	orr.w	r3, r3, #1
 8016c2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6a1b      	ldr	r3, [r3, #32]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d005      	beq.n	8016c40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c34:	4b04      	ldr	r3, [pc, #16]	; (8016c48 <HAL_PCD_SuspendCallback+0x48>)
 8016c36:	691b      	ldr	r3, [r3, #16]
 8016c38:	4a03      	ldr	r2, [pc, #12]	; (8016c48 <HAL_PCD_SuspendCallback+0x48>)
 8016c3a:	f043 0306 	orr.w	r3, r3, #6
 8016c3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c40:	bf00      	nop
 8016c42:	3708      	adds	r7, #8
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}
 8016c48:	e000ed00 	.word	0xe000ed00

08016c4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7fe fc85 	bl	801556a <USBD_LL_Resume>
}
 8016c60:	bf00      	nop
 8016c62:	3708      	adds	r7, #8
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}

08016c68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	460b      	mov	r3, r1
 8016c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c7a:	78fa      	ldrb	r2, [r7, #3]
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7fe fcdd 	bl	801563e <USBD_LL_IsoOUTIncomplete>
}
 8016c84:	bf00      	nop
 8016c86:	3708      	adds	r7, #8
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}

08016c8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b082      	sub	sp, #8
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	460b      	mov	r3, r1
 8016c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c9e:	78fa      	ldrb	r2, [r7, #3]
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7fe fc99 	bl	80155da <USBD_LL_IsoINIncomplete>
}
 8016ca8:	bf00      	nop
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7fe fcef 	bl	80156a2 <USBD_LL_DevConnected>
}
 8016cc4:	bf00      	nop
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}

08016ccc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7fe fcec 	bl	80156b8 <USBD_LL_DevDisconnected>
}
 8016ce0:	bf00      	nop
 8016ce2:	3708      	adds	r7, #8
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}

08016ce8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	d140      	bne.n	8016d7a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016cf8:	4a22      	ldr	r2, [pc, #136]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	4a20      	ldr	r2, [pc, #128]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016d08:	4b1e      	ldr	r3, [pc, #120]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d0a:	4a1f      	ldr	r2, [pc, #124]	; (8016d88 <USBD_LL_Init+0xa0>)
 8016d0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016d0e:	4b1d      	ldr	r3, [pc, #116]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d10:	2209      	movs	r2, #9
 8016d12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016d14:	4b1b      	ldr	r3, [pc, #108]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d16:	2202      	movs	r2, #2
 8016d18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016d1a:	4b1a      	ldr	r3, [pc, #104]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d20:	4b18      	ldr	r3, [pc, #96]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d22:	2202      	movs	r2, #2
 8016d24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016d26:	4b17      	ldr	r3, [pc, #92]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d28:	2200      	movs	r2, #0
 8016d2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016d2c:	4b15      	ldr	r3, [pc, #84]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d2e:	2200      	movs	r2, #0
 8016d30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016d32:	4b14      	ldr	r3, [pc, #80]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d34:	2200      	movs	r2, #0
 8016d36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d38:	4b12      	ldr	r3, [pc, #72]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d3e:	4b11      	ldr	r3, [pc, #68]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d40:	2200      	movs	r2, #0
 8016d42:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d44:	4b0f      	ldr	r3, [pc, #60]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d46:	2200      	movs	r2, #0
 8016d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d4a:	480e      	ldr	r0, [pc, #56]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d4c:	f7f1 fab3 	bl	80082b6 <HAL_PCD_Init>
 8016d50:	4603      	mov	r3, r0
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d001      	beq.n	8016d5a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d56:	f7eb fe03 	bl	8002960 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d5e:	4809      	ldr	r0, [pc, #36]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d60:	f7f2 fd21 	bl	80097a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016d64:	2280      	movs	r2, #128	; 0x80
 8016d66:	2100      	movs	r1, #0
 8016d68:	4806      	ldr	r0, [pc, #24]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d6a:	f7f2 fcd5 	bl	8009718 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016d6e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016d72:	2101      	movs	r1, #1
 8016d74:	4803      	ldr	r0, [pc, #12]	; (8016d84 <USBD_LL_Init+0x9c>)
 8016d76:	f7f2 fccf 	bl	8009718 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d7a:	2300      	movs	r3, #0
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	3708      	adds	r7, #8
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	24002ad0 	.word	0x24002ad0
 8016d88:	40040000 	.word	0x40040000

08016d8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b084      	sub	sp, #16
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d94:	2300      	movs	r3, #0
 8016d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7f1 fbab 	bl	80084fe <HAL_PCD_Start>
 8016da8:	4603      	mov	r3, r0
 8016daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dac:	7bfb      	ldrb	r3, [r7, #15]
 8016dae:	4618      	mov	r0, r3
 8016db0:	f000 f942 	bl	8017038 <USBD_Get_USB_Status>
 8016db4:	4603      	mov	r3, r0
 8016db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dba:	4618      	mov	r0, r3
 8016dbc:	3710      	adds	r7, #16
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}

08016dc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016dc2:	b580      	push	{r7, lr}
 8016dc4:	b084      	sub	sp, #16
 8016dc6:	af00      	add	r7, sp, #0
 8016dc8:	6078      	str	r0, [r7, #4]
 8016dca:	4608      	mov	r0, r1
 8016dcc:	4611      	mov	r1, r2
 8016dce:	461a      	mov	r2, r3
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	70fb      	strb	r3, [r7, #3]
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	70bb      	strb	r3, [r7, #2]
 8016dd8:	4613      	mov	r3, r2
 8016dda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016de0:	2300      	movs	r3, #0
 8016de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dea:	78bb      	ldrb	r3, [r7, #2]
 8016dec:	883a      	ldrh	r2, [r7, #0]
 8016dee:	78f9      	ldrb	r1, [r7, #3]
 8016df0:	f7f2 f8ab 	bl	8008f4a <HAL_PCD_EP_Open>
 8016df4:	4603      	mov	r3, r0
 8016df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df8:	7bfb      	ldrb	r3, [r7, #15]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f000 f91c 	bl	8017038 <USBD_Get_USB_Status>
 8016e00:	4603      	mov	r3, r0
 8016e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3710      	adds	r7, #16
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}

08016e0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e0e:	b580      	push	{r7, lr}
 8016e10:	b084      	sub	sp, #16
 8016e12:	af00      	add	r7, sp, #0
 8016e14:	6078      	str	r0, [r7, #4]
 8016e16:	460b      	mov	r3, r1
 8016e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e28:	78fa      	ldrb	r2, [r7, #3]
 8016e2a:	4611      	mov	r1, r2
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7f2 f8f4 	bl	800901a <HAL_PCD_EP_Close>
 8016e32:	4603      	mov	r3, r0
 8016e34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e36:	7bfb      	ldrb	r3, [r7, #15]
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f000 f8fd 	bl	8017038 <USBD_Get_USB_Status>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	3710      	adds	r7, #16
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}

08016e4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b084      	sub	sp, #16
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	460b      	mov	r3, r1
 8016e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e58:	2300      	movs	r3, #0
 8016e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e66:	78fa      	ldrb	r2, [r7, #3]
 8016e68:	4611      	mov	r1, r2
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7f2 f9ae 	bl	80091cc <HAL_PCD_EP_SetStall>
 8016e70:	4603      	mov	r3, r0
 8016e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e74:	7bfb      	ldrb	r3, [r7, #15]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f000 f8de 	bl	8017038 <USBD_Get_USB_Status>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3710      	adds	r7, #16
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}

08016e8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e8a:	b580      	push	{r7, lr}
 8016e8c:	b084      	sub	sp, #16
 8016e8e:	af00      	add	r7, sp, #0
 8016e90:	6078      	str	r0, [r7, #4]
 8016e92:	460b      	mov	r3, r1
 8016e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ea4:	78fa      	ldrb	r2, [r7, #3]
 8016ea6:	4611      	mov	r1, r2
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7f2 f9f3 	bl	8009294 <HAL_PCD_EP_ClrStall>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb2:	7bfb      	ldrb	r3, [r7, #15]
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 f8bf 	bl	8017038 <USBD_Get_USB_Status>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ec8:	b480      	push	{r7}
 8016eca:	b085      	sub	sp, #20
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
 8016ed0:	460b      	mov	r3, r1
 8016ed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016eda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	da0b      	bge.n	8016efc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016ee4:	78fb      	ldrb	r3, [r7, #3]
 8016ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016eea:	68f9      	ldr	r1, [r7, #12]
 8016eec:	4613      	mov	r3, r2
 8016eee:	00db      	lsls	r3, r3, #3
 8016ef0:	4413      	add	r3, r2
 8016ef2:	009b      	lsls	r3, r3, #2
 8016ef4:	440b      	add	r3, r1
 8016ef6:	333e      	adds	r3, #62	; 0x3e
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	e00b      	b.n	8016f14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016efc:	78fb      	ldrb	r3, [r7, #3]
 8016efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f02:	68f9      	ldr	r1, [r7, #12]
 8016f04:	4613      	mov	r3, r2
 8016f06:	00db      	lsls	r3, r3, #3
 8016f08:	4413      	add	r3, r2
 8016f0a:	009b      	lsls	r3, r3, #2
 8016f0c:	440b      	add	r3, r1
 8016f0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016f12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	3714      	adds	r7, #20
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1e:	4770      	bx	lr

08016f20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b084      	sub	sp, #16
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	460b      	mov	r3, r1
 8016f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f30:	2300      	movs	r3, #0
 8016f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f3a:	78fa      	ldrb	r2, [r7, #3]
 8016f3c:	4611      	mov	r1, r2
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7f1 ffde 	bl	8008f00 <HAL_PCD_SetAddress>
 8016f44:	4603      	mov	r3, r0
 8016f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f48:	7bfb      	ldrb	r3, [r7, #15]
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f000 f874 	bl	8017038 <USBD_Get_USB_Status>
 8016f50:	4603      	mov	r3, r0
 8016f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	3710      	adds	r7, #16
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	bd80      	pop	{r7, pc}

08016f5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f5e:	b580      	push	{r7, lr}
 8016f60:	b086      	sub	sp, #24
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	60f8      	str	r0, [r7, #12]
 8016f66:	607a      	str	r2, [r7, #4]
 8016f68:	603b      	str	r3, [r7, #0]
 8016f6a:	460b      	mov	r3, r1
 8016f6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f72:	2300      	movs	r3, #0
 8016f74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f7c:	7af9      	ldrb	r1, [r7, #11]
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	687a      	ldr	r2, [r7, #4]
 8016f82:	f7f2 f8e8 	bl	8009156 <HAL_PCD_EP_Transmit>
 8016f86:	4603      	mov	r3, r0
 8016f88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f8a:	7dfb      	ldrb	r3, [r7, #23]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f000 f853 	bl	8017038 <USBD_Get_USB_Status>
 8016f92:	4603      	mov	r3, r0
 8016f94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3718      	adds	r7, #24
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b086      	sub	sp, #24
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	607a      	str	r2, [r7, #4]
 8016faa:	603b      	str	r3, [r7, #0]
 8016fac:	460b      	mov	r3, r1
 8016fae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016fbe:	7af9      	ldrb	r1, [r7, #11]
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	f7f2 f873 	bl	80090ae <HAL_PCD_EP_Receive>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fcc:	7dfb      	ldrb	r3, [r7, #23]
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f000 f832 	bl	8017038 <USBD_Get_USB_Status>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3718      	adds	r7, #24
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}

08016fe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fe2:	b580      	push	{r7, lr}
 8016fe4:	b082      	sub	sp, #8
 8016fe6:	af00      	add	r7, sp, #0
 8016fe8:	6078      	str	r0, [r7, #4]
 8016fea:	460b      	mov	r3, r1
 8016fec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ff4:	78fa      	ldrb	r2, [r7, #3]
 8016ff6:	4611      	mov	r1, r2
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f2 f894 	bl	8009126 <HAL_PCD_EP_GetRxCount>
 8016ffe:	4603      	mov	r3, r0
}
 8017000:	4618      	mov	r0, r3
 8017002:	3708      	adds	r7, #8
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}

08017008 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017008:	b480      	push	{r7}
 801700a:	b083      	sub	sp, #12
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017010:	4b03      	ldr	r3, [pc, #12]	; (8017020 <USBD_static_malloc+0x18>)
}
 8017012:	4618      	mov	r0, r3
 8017014:	370c      	adds	r7, #12
 8017016:	46bd      	mov	sp, r7
 8017018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop
 8017020:	24002fdc 	.word	0x24002fdc

08017024 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017024:	b480      	push	{r7}
 8017026:	b083      	sub	sp, #12
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801702c:	bf00      	nop
 801702e:	370c      	adds	r7, #12
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr

08017038 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017038:	b480      	push	{r7}
 801703a:	b085      	sub	sp, #20
 801703c:	af00      	add	r7, sp, #0
 801703e:	4603      	mov	r3, r0
 8017040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017042:	2300      	movs	r3, #0
 8017044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017046:	79fb      	ldrb	r3, [r7, #7]
 8017048:	2b03      	cmp	r3, #3
 801704a:	d817      	bhi.n	801707c <USBD_Get_USB_Status+0x44>
 801704c:	a201      	add	r2, pc, #4	; (adr r2, 8017054 <USBD_Get_USB_Status+0x1c>)
 801704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017052:	bf00      	nop
 8017054:	08017065 	.word	0x08017065
 8017058:	0801706b 	.word	0x0801706b
 801705c:	08017071 	.word	0x08017071
 8017060:	08017077 	.word	0x08017077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017064:	2300      	movs	r3, #0
 8017066:	73fb      	strb	r3, [r7, #15]
    break;
 8017068:	e00b      	b.n	8017082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801706a:	2303      	movs	r3, #3
 801706c:	73fb      	strb	r3, [r7, #15]
    break;
 801706e:	e008      	b.n	8017082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017070:	2301      	movs	r3, #1
 8017072:	73fb      	strb	r3, [r7, #15]
    break;
 8017074:	e005      	b.n	8017082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017076:	2303      	movs	r3, #3
 8017078:	73fb      	strb	r3, [r7, #15]
    break;
 801707a:	e002      	b.n	8017082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801707c:	2303      	movs	r3, #3
 801707e:	73fb      	strb	r3, [r7, #15]
    break;
 8017080:	bf00      	nop
  }
  return usb_status;
 8017082:	7bfb      	ldrb	r3, [r7, #15]
}
 8017084:	4618      	mov	r0, r3
 8017086:	3714      	adds	r7, #20
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr

08017090 <siprintf>:
 8017090:	b40e      	push	{r1, r2, r3}
 8017092:	b500      	push	{lr}
 8017094:	b09c      	sub	sp, #112	; 0x70
 8017096:	ab1d      	add	r3, sp, #116	; 0x74
 8017098:	9002      	str	r0, [sp, #8]
 801709a:	9006      	str	r0, [sp, #24]
 801709c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170a0:	4809      	ldr	r0, [pc, #36]	; (80170c8 <siprintf+0x38>)
 80170a2:	9107      	str	r1, [sp, #28]
 80170a4:	9104      	str	r1, [sp, #16]
 80170a6:	4909      	ldr	r1, [pc, #36]	; (80170cc <siprintf+0x3c>)
 80170a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80170ac:	9105      	str	r1, [sp, #20]
 80170ae:	6800      	ldr	r0, [r0, #0]
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	a902      	add	r1, sp, #8
 80170b4:	f000 f9d6 	bl	8017464 <_svfiprintf_r>
 80170b8:	9b02      	ldr	r3, [sp, #8]
 80170ba:	2200      	movs	r2, #0
 80170bc:	701a      	strb	r2, [r3, #0]
 80170be:	b01c      	add	sp, #112	; 0x70
 80170c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80170c4:	b003      	add	sp, #12
 80170c6:	4770      	bx	lr
 80170c8:	2400014c 	.word	0x2400014c
 80170cc:	ffff0208 	.word	0xffff0208

080170d0 <siscanf>:
 80170d0:	b40e      	push	{r1, r2, r3}
 80170d2:	b510      	push	{r4, lr}
 80170d4:	b09f      	sub	sp, #124	; 0x7c
 80170d6:	ac21      	add	r4, sp, #132	; 0x84
 80170d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80170dc:	f854 2b04 	ldr.w	r2, [r4], #4
 80170e0:	9201      	str	r2, [sp, #4]
 80170e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80170e6:	9004      	str	r0, [sp, #16]
 80170e8:	9008      	str	r0, [sp, #32]
 80170ea:	f7e9 f91b 	bl	8000324 <strlen>
 80170ee:	4b0c      	ldr	r3, [pc, #48]	; (8017120 <siscanf+0x50>)
 80170f0:	9005      	str	r0, [sp, #20]
 80170f2:	9009      	str	r0, [sp, #36]	; 0x24
 80170f4:	930d      	str	r3, [sp, #52]	; 0x34
 80170f6:	480b      	ldr	r0, [pc, #44]	; (8017124 <siscanf+0x54>)
 80170f8:	9a01      	ldr	r2, [sp, #4]
 80170fa:	6800      	ldr	r0, [r0, #0]
 80170fc:	9403      	str	r4, [sp, #12]
 80170fe:	2300      	movs	r3, #0
 8017100:	9311      	str	r3, [sp, #68]	; 0x44
 8017102:	9316      	str	r3, [sp, #88]	; 0x58
 8017104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017108:	f8ad 301e 	strh.w	r3, [sp, #30]
 801710c:	a904      	add	r1, sp, #16
 801710e:	4623      	mov	r3, r4
 8017110:	f000 fb00 	bl	8017714 <__ssvfiscanf_r>
 8017114:	b01f      	add	sp, #124	; 0x7c
 8017116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801711a:	b003      	add	sp, #12
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop
 8017120:	08017129 	.word	0x08017129
 8017124:	2400014c 	.word	0x2400014c

08017128 <__seofread>:
 8017128:	2000      	movs	r0, #0
 801712a:	4770      	bx	lr

0801712c <memset>:
 801712c:	4402      	add	r2, r0
 801712e:	4603      	mov	r3, r0
 8017130:	4293      	cmp	r3, r2
 8017132:	d100      	bne.n	8017136 <memset+0xa>
 8017134:	4770      	bx	lr
 8017136:	f803 1b01 	strb.w	r1, [r3], #1
 801713a:	e7f9      	b.n	8017130 <memset+0x4>

0801713c <__errno>:
 801713c:	4b01      	ldr	r3, [pc, #4]	; (8017144 <__errno+0x8>)
 801713e:	6818      	ldr	r0, [r3, #0]
 8017140:	4770      	bx	lr
 8017142:	bf00      	nop
 8017144:	2400014c 	.word	0x2400014c

08017148 <__libc_init_array>:
 8017148:	b570      	push	{r4, r5, r6, lr}
 801714a:	4d0d      	ldr	r5, [pc, #52]	; (8017180 <__libc_init_array+0x38>)
 801714c:	4c0d      	ldr	r4, [pc, #52]	; (8017184 <__libc_init_array+0x3c>)
 801714e:	1b64      	subs	r4, r4, r5
 8017150:	10a4      	asrs	r4, r4, #2
 8017152:	2600      	movs	r6, #0
 8017154:	42a6      	cmp	r6, r4
 8017156:	d109      	bne.n	801716c <__libc_init_array+0x24>
 8017158:	4d0b      	ldr	r5, [pc, #44]	; (8017188 <__libc_init_array+0x40>)
 801715a:	4c0c      	ldr	r4, [pc, #48]	; (801718c <__libc_init_array+0x44>)
 801715c:	f001 f8fe 	bl	801835c <_init>
 8017160:	1b64      	subs	r4, r4, r5
 8017162:	10a4      	asrs	r4, r4, #2
 8017164:	2600      	movs	r6, #0
 8017166:	42a6      	cmp	r6, r4
 8017168:	d105      	bne.n	8017176 <__libc_init_array+0x2e>
 801716a:	bd70      	pop	{r4, r5, r6, pc}
 801716c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017170:	4798      	blx	r3
 8017172:	3601      	adds	r6, #1
 8017174:	e7ee      	b.n	8017154 <__libc_init_array+0xc>
 8017176:	f855 3b04 	ldr.w	r3, [r5], #4
 801717a:	4798      	blx	r3
 801717c:	3601      	adds	r6, #1
 801717e:	e7f2      	b.n	8017166 <__libc_init_array+0x1e>
 8017180:	08018724 	.word	0x08018724
 8017184:	08018724 	.word	0x08018724
 8017188:	08018724 	.word	0x08018724
 801718c:	08018728 	.word	0x08018728

08017190 <__retarget_lock_acquire_recursive>:
 8017190:	4770      	bx	lr

08017192 <__retarget_lock_release_recursive>:
 8017192:	4770      	bx	lr

08017194 <strcpy>:
 8017194:	4603      	mov	r3, r0
 8017196:	f811 2b01 	ldrb.w	r2, [r1], #1
 801719a:	f803 2b01 	strb.w	r2, [r3], #1
 801719e:	2a00      	cmp	r2, #0
 80171a0:	d1f9      	bne.n	8017196 <strcpy+0x2>
 80171a2:	4770      	bx	lr

080171a4 <memcpy>:
 80171a4:	440a      	add	r2, r1
 80171a6:	4291      	cmp	r1, r2
 80171a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80171ac:	d100      	bne.n	80171b0 <memcpy+0xc>
 80171ae:	4770      	bx	lr
 80171b0:	b510      	push	{r4, lr}
 80171b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171ba:	4291      	cmp	r1, r2
 80171bc:	d1f9      	bne.n	80171b2 <memcpy+0xe>
 80171be:	bd10      	pop	{r4, pc}

080171c0 <_free_r>:
 80171c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171c2:	2900      	cmp	r1, #0
 80171c4:	d044      	beq.n	8017250 <_free_r+0x90>
 80171c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171ca:	9001      	str	r0, [sp, #4]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	f1a1 0404 	sub.w	r4, r1, #4
 80171d2:	bfb8      	it	lt
 80171d4:	18e4      	addlt	r4, r4, r3
 80171d6:	f000 f8df 	bl	8017398 <__malloc_lock>
 80171da:	4a1e      	ldr	r2, [pc, #120]	; (8017254 <_free_r+0x94>)
 80171dc:	9801      	ldr	r0, [sp, #4]
 80171de:	6813      	ldr	r3, [r2, #0]
 80171e0:	b933      	cbnz	r3, 80171f0 <_free_r+0x30>
 80171e2:	6063      	str	r3, [r4, #4]
 80171e4:	6014      	str	r4, [r2, #0]
 80171e6:	b003      	add	sp, #12
 80171e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171ec:	f000 b8da 	b.w	80173a4 <__malloc_unlock>
 80171f0:	42a3      	cmp	r3, r4
 80171f2:	d908      	bls.n	8017206 <_free_r+0x46>
 80171f4:	6825      	ldr	r5, [r4, #0]
 80171f6:	1961      	adds	r1, r4, r5
 80171f8:	428b      	cmp	r3, r1
 80171fa:	bf01      	itttt	eq
 80171fc:	6819      	ldreq	r1, [r3, #0]
 80171fe:	685b      	ldreq	r3, [r3, #4]
 8017200:	1949      	addeq	r1, r1, r5
 8017202:	6021      	streq	r1, [r4, #0]
 8017204:	e7ed      	b.n	80171e2 <_free_r+0x22>
 8017206:	461a      	mov	r2, r3
 8017208:	685b      	ldr	r3, [r3, #4]
 801720a:	b10b      	cbz	r3, 8017210 <_free_r+0x50>
 801720c:	42a3      	cmp	r3, r4
 801720e:	d9fa      	bls.n	8017206 <_free_r+0x46>
 8017210:	6811      	ldr	r1, [r2, #0]
 8017212:	1855      	adds	r5, r2, r1
 8017214:	42a5      	cmp	r5, r4
 8017216:	d10b      	bne.n	8017230 <_free_r+0x70>
 8017218:	6824      	ldr	r4, [r4, #0]
 801721a:	4421      	add	r1, r4
 801721c:	1854      	adds	r4, r2, r1
 801721e:	42a3      	cmp	r3, r4
 8017220:	6011      	str	r1, [r2, #0]
 8017222:	d1e0      	bne.n	80171e6 <_free_r+0x26>
 8017224:	681c      	ldr	r4, [r3, #0]
 8017226:	685b      	ldr	r3, [r3, #4]
 8017228:	6053      	str	r3, [r2, #4]
 801722a:	440c      	add	r4, r1
 801722c:	6014      	str	r4, [r2, #0]
 801722e:	e7da      	b.n	80171e6 <_free_r+0x26>
 8017230:	d902      	bls.n	8017238 <_free_r+0x78>
 8017232:	230c      	movs	r3, #12
 8017234:	6003      	str	r3, [r0, #0]
 8017236:	e7d6      	b.n	80171e6 <_free_r+0x26>
 8017238:	6825      	ldr	r5, [r4, #0]
 801723a:	1961      	adds	r1, r4, r5
 801723c:	428b      	cmp	r3, r1
 801723e:	bf04      	itt	eq
 8017240:	6819      	ldreq	r1, [r3, #0]
 8017242:	685b      	ldreq	r3, [r3, #4]
 8017244:	6063      	str	r3, [r4, #4]
 8017246:	bf04      	itt	eq
 8017248:	1949      	addeq	r1, r1, r5
 801724a:	6021      	streq	r1, [r4, #0]
 801724c:	6054      	str	r4, [r2, #4]
 801724e:	e7ca      	b.n	80171e6 <_free_r+0x26>
 8017250:	b003      	add	sp, #12
 8017252:	bd30      	pop	{r4, r5, pc}
 8017254:	2400333c 	.word	0x2400333c

08017258 <sbrk_aligned>:
 8017258:	b570      	push	{r4, r5, r6, lr}
 801725a:	4e0e      	ldr	r6, [pc, #56]	; (8017294 <sbrk_aligned+0x3c>)
 801725c:	460c      	mov	r4, r1
 801725e:	6831      	ldr	r1, [r6, #0]
 8017260:	4605      	mov	r5, r0
 8017262:	b911      	cbnz	r1, 801726a <sbrk_aligned+0x12>
 8017264:	f000 ff3a 	bl	80180dc <_sbrk_r>
 8017268:	6030      	str	r0, [r6, #0]
 801726a:	4621      	mov	r1, r4
 801726c:	4628      	mov	r0, r5
 801726e:	f000 ff35 	bl	80180dc <_sbrk_r>
 8017272:	1c43      	adds	r3, r0, #1
 8017274:	d00a      	beq.n	801728c <sbrk_aligned+0x34>
 8017276:	1cc4      	adds	r4, r0, #3
 8017278:	f024 0403 	bic.w	r4, r4, #3
 801727c:	42a0      	cmp	r0, r4
 801727e:	d007      	beq.n	8017290 <sbrk_aligned+0x38>
 8017280:	1a21      	subs	r1, r4, r0
 8017282:	4628      	mov	r0, r5
 8017284:	f000 ff2a 	bl	80180dc <_sbrk_r>
 8017288:	3001      	adds	r0, #1
 801728a:	d101      	bne.n	8017290 <sbrk_aligned+0x38>
 801728c:	f04f 34ff 	mov.w	r4, #4294967295
 8017290:	4620      	mov	r0, r4
 8017292:	bd70      	pop	{r4, r5, r6, pc}
 8017294:	24003340 	.word	0x24003340

08017298 <_malloc_r>:
 8017298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801729c:	1ccd      	adds	r5, r1, #3
 801729e:	f025 0503 	bic.w	r5, r5, #3
 80172a2:	3508      	adds	r5, #8
 80172a4:	2d0c      	cmp	r5, #12
 80172a6:	bf38      	it	cc
 80172a8:	250c      	movcc	r5, #12
 80172aa:	2d00      	cmp	r5, #0
 80172ac:	4607      	mov	r7, r0
 80172ae:	db01      	blt.n	80172b4 <_malloc_r+0x1c>
 80172b0:	42a9      	cmp	r1, r5
 80172b2:	d905      	bls.n	80172c0 <_malloc_r+0x28>
 80172b4:	230c      	movs	r3, #12
 80172b6:	603b      	str	r3, [r7, #0]
 80172b8:	2600      	movs	r6, #0
 80172ba:	4630      	mov	r0, r6
 80172bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017394 <_malloc_r+0xfc>
 80172c4:	f000 f868 	bl	8017398 <__malloc_lock>
 80172c8:	f8d8 3000 	ldr.w	r3, [r8]
 80172cc:	461c      	mov	r4, r3
 80172ce:	bb5c      	cbnz	r4, 8017328 <_malloc_r+0x90>
 80172d0:	4629      	mov	r1, r5
 80172d2:	4638      	mov	r0, r7
 80172d4:	f7ff ffc0 	bl	8017258 <sbrk_aligned>
 80172d8:	1c43      	adds	r3, r0, #1
 80172da:	4604      	mov	r4, r0
 80172dc:	d155      	bne.n	801738a <_malloc_r+0xf2>
 80172de:	f8d8 4000 	ldr.w	r4, [r8]
 80172e2:	4626      	mov	r6, r4
 80172e4:	2e00      	cmp	r6, #0
 80172e6:	d145      	bne.n	8017374 <_malloc_r+0xdc>
 80172e8:	2c00      	cmp	r4, #0
 80172ea:	d048      	beq.n	801737e <_malloc_r+0xe6>
 80172ec:	6823      	ldr	r3, [r4, #0]
 80172ee:	4631      	mov	r1, r6
 80172f0:	4638      	mov	r0, r7
 80172f2:	eb04 0903 	add.w	r9, r4, r3
 80172f6:	f000 fef1 	bl	80180dc <_sbrk_r>
 80172fa:	4581      	cmp	r9, r0
 80172fc:	d13f      	bne.n	801737e <_malloc_r+0xe6>
 80172fe:	6821      	ldr	r1, [r4, #0]
 8017300:	1a6d      	subs	r5, r5, r1
 8017302:	4629      	mov	r1, r5
 8017304:	4638      	mov	r0, r7
 8017306:	f7ff ffa7 	bl	8017258 <sbrk_aligned>
 801730a:	3001      	adds	r0, #1
 801730c:	d037      	beq.n	801737e <_malloc_r+0xe6>
 801730e:	6823      	ldr	r3, [r4, #0]
 8017310:	442b      	add	r3, r5
 8017312:	6023      	str	r3, [r4, #0]
 8017314:	f8d8 3000 	ldr.w	r3, [r8]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d038      	beq.n	801738e <_malloc_r+0xf6>
 801731c:	685a      	ldr	r2, [r3, #4]
 801731e:	42a2      	cmp	r2, r4
 8017320:	d12b      	bne.n	801737a <_malloc_r+0xe2>
 8017322:	2200      	movs	r2, #0
 8017324:	605a      	str	r2, [r3, #4]
 8017326:	e00f      	b.n	8017348 <_malloc_r+0xb0>
 8017328:	6822      	ldr	r2, [r4, #0]
 801732a:	1b52      	subs	r2, r2, r5
 801732c:	d41f      	bmi.n	801736e <_malloc_r+0xd6>
 801732e:	2a0b      	cmp	r2, #11
 8017330:	d917      	bls.n	8017362 <_malloc_r+0xca>
 8017332:	1961      	adds	r1, r4, r5
 8017334:	42a3      	cmp	r3, r4
 8017336:	6025      	str	r5, [r4, #0]
 8017338:	bf18      	it	ne
 801733a:	6059      	strne	r1, [r3, #4]
 801733c:	6863      	ldr	r3, [r4, #4]
 801733e:	bf08      	it	eq
 8017340:	f8c8 1000 	streq.w	r1, [r8]
 8017344:	5162      	str	r2, [r4, r5]
 8017346:	604b      	str	r3, [r1, #4]
 8017348:	4638      	mov	r0, r7
 801734a:	f104 060b 	add.w	r6, r4, #11
 801734e:	f000 f829 	bl	80173a4 <__malloc_unlock>
 8017352:	f026 0607 	bic.w	r6, r6, #7
 8017356:	1d23      	adds	r3, r4, #4
 8017358:	1af2      	subs	r2, r6, r3
 801735a:	d0ae      	beq.n	80172ba <_malloc_r+0x22>
 801735c:	1b9b      	subs	r3, r3, r6
 801735e:	50a3      	str	r3, [r4, r2]
 8017360:	e7ab      	b.n	80172ba <_malloc_r+0x22>
 8017362:	42a3      	cmp	r3, r4
 8017364:	6862      	ldr	r2, [r4, #4]
 8017366:	d1dd      	bne.n	8017324 <_malloc_r+0x8c>
 8017368:	f8c8 2000 	str.w	r2, [r8]
 801736c:	e7ec      	b.n	8017348 <_malloc_r+0xb0>
 801736e:	4623      	mov	r3, r4
 8017370:	6864      	ldr	r4, [r4, #4]
 8017372:	e7ac      	b.n	80172ce <_malloc_r+0x36>
 8017374:	4634      	mov	r4, r6
 8017376:	6876      	ldr	r6, [r6, #4]
 8017378:	e7b4      	b.n	80172e4 <_malloc_r+0x4c>
 801737a:	4613      	mov	r3, r2
 801737c:	e7cc      	b.n	8017318 <_malloc_r+0x80>
 801737e:	230c      	movs	r3, #12
 8017380:	603b      	str	r3, [r7, #0]
 8017382:	4638      	mov	r0, r7
 8017384:	f000 f80e 	bl	80173a4 <__malloc_unlock>
 8017388:	e797      	b.n	80172ba <_malloc_r+0x22>
 801738a:	6025      	str	r5, [r4, #0]
 801738c:	e7dc      	b.n	8017348 <_malloc_r+0xb0>
 801738e:	605b      	str	r3, [r3, #4]
 8017390:	deff      	udf	#255	; 0xff
 8017392:	bf00      	nop
 8017394:	2400333c 	.word	0x2400333c

08017398 <__malloc_lock>:
 8017398:	4801      	ldr	r0, [pc, #4]	; (80173a0 <__malloc_lock+0x8>)
 801739a:	f7ff bef9 	b.w	8017190 <__retarget_lock_acquire_recursive>
 801739e:	bf00      	nop
 80173a0:	24003338 	.word	0x24003338

080173a4 <__malloc_unlock>:
 80173a4:	4801      	ldr	r0, [pc, #4]	; (80173ac <__malloc_unlock+0x8>)
 80173a6:	f7ff bef4 	b.w	8017192 <__retarget_lock_release_recursive>
 80173aa:	bf00      	nop
 80173ac:	24003338 	.word	0x24003338

080173b0 <__ssputs_r>:
 80173b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173b4:	688e      	ldr	r6, [r1, #8]
 80173b6:	461f      	mov	r7, r3
 80173b8:	42be      	cmp	r6, r7
 80173ba:	680b      	ldr	r3, [r1, #0]
 80173bc:	4682      	mov	sl, r0
 80173be:	460c      	mov	r4, r1
 80173c0:	4690      	mov	r8, r2
 80173c2:	d82c      	bhi.n	801741e <__ssputs_r+0x6e>
 80173c4:	898a      	ldrh	r2, [r1, #12]
 80173c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173ca:	d026      	beq.n	801741a <__ssputs_r+0x6a>
 80173cc:	6965      	ldr	r5, [r4, #20]
 80173ce:	6909      	ldr	r1, [r1, #16]
 80173d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173d4:	eba3 0901 	sub.w	r9, r3, r1
 80173d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173dc:	1c7b      	adds	r3, r7, #1
 80173de:	444b      	add	r3, r9
 80173e0:	106d      	asrs	r5, r5, #1
 80173e2:	429d      	cmp	r5, r3
 80173e4:	bf38      	it	cc
 80173e6:	461d      	movcc	r5, r3
 80173e8:	0553      	lsls	r3, r2, #21
 80173ea:	d527      	bpl.n	801743c <__ssputs_r+0x8c>
 80173ec:	4629      	mov	r1, r5
 80173ee:	f7ff ff53 	bl	8017298 <_malloc_r>
 80173f2:	4606      	mov	r6, r0
 80173f4:	b360      	cbz	r0, 8017450 <__ssputs_r+0xa0>
 80173f6:	6921      	ldr	r1, [r4, #16]
 80173f8:	464a      	mov	r2, r9
 80173fa:	f7ff fed3 	bl	80171a4 <memcpy>
 80173fe:	89a3      	ldrh	r3, [r4, #12]
 8017400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017408:	81a3      	strh	r3, [r4, #12]
 801740a:	6126      	str	r6, [r4, #16]
 801740c:	6165      	str	r5, [r4, #20]
 801740e:	444e      	add	r6, r9
 8017410:	eba5 0509 	sub.w	r5, r5, r9
 8017414:	6026      	str	r6, [r4, #0]
 8017416:	60a5      	str	r5, [r4, #8]
 8017418:	463e      	mov	r6, r7
 801741a:	42be      	cmp	r6, r7
 801741c:	d900      	bls.n	8017420 <__ssputs_r+0x70>
 801741e:	463e      	mov	r6, r7
 8017420:	6820      	ldr	r0, [r4, #0]
 8017422:	4632      	mov	r2, r6
 8017424:	4641      	mov	r1, r8
 8017426:	f000 fe3e 	bl	80180a6 <memmove>
 801742a:	68a3      	ldr	r3, [r4, #8]
 801742c:	1b9b      	subs	r3, r3, r6
 801742e:	60a3      	str	r3, [r4, #8]
 8017430:	6823      	ldr	r3, [r4, #0]
 8017432:	4433      	add	r3, r6
 8017434:	6023      	str	r3, [r4, #0]
 8017436:	2000      	movs	r0, #0
 8017438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801743c:	462a      	mov	r2, r5
 801743e:	f000 fe5d 	bl	80180fc <_realloc_r>
 8017442:	4606      	mov	r6, r0
 8017444:	2800      	cmp	r0, #0
 8017446:	d1e0      	bne.n	801740a <__ssputs_r+0x5a>
 8017448:	6921      	ldr	r1, [r4, #16]
 801744a:	4650      	mov	r0, sl
 801744c:	f7ff feb8 	bl	80171c0 <_free_r>
 8017450:	230c      	movs	r3, #12
 8017452:	f8ca 3000 	str.w	r3, [sl]
 8017456:	89a3      	ldrh	r3, [r4, #12]
 8017458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801745c:	81a3      	strh	r3, [r4, #12]
 801745e:	f04f 30ff 	mov.w	r0, #4294967295
 8017462:	e7e9      	b.n	8017438 <__ssputs_r+0x88>

08017464 <_svfiprintf_r>:
 8017464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017468:	4698      	mov	r8, r3
 801746a:	898b      	ldrh	r3, [r1, #12]
 801746c:	061b      	lsls	r3, r3, #24
 801746e:	b09d      	sub	sp, #116	; 0x74
 8017470:	4607      	mov	r7, r0
 8017472:	460d      	mov	r5, r1
 8017474:	4614      	mov	r4, r2
 8017476:	d50e      	bpl.n	8017496 <_svfiprintf_r+0x32>
 8017478:	690b      	ldr	r3, [r1, #16]
 801747a:	b963      	cbnz	r3, 8017496 <_svfiprintf_r+0x32>
 801747c:	2140      	movs	r1, #64	; 0x40
 801747e:	f7ff ff0b 	bl	8017298 <_malloc_r>
 8017482:	6028      	str	r0, [r5, #0]
 8017484:	6128      	str	r0, [r5, #16]
 8017486:	b920      	cbnz	r0, 8017492 <_svfiprintf_r+0x2e>
 8017488:	230c      	movs	r3, #12
 801748a:	603b      	str	r3, [r7, #0]
 801748c:	f04f 30ff 	mov.w	r0, #4294967295
 8017490:	e0d0      	b.n	8017634 <_svfiprintf_r+0x1d0>
 8017492:	2340      	movs	r3, #64	; 0x40
 8017494:	616b      	str	r3, [r5, #20]
 8017496:	2300      	movs	r3, #0
 8017498:	9309      	str	r3, [sp, #36]	; 0x24
 801749a:	2320      	movs	r3, #32
 801749c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80174a4:	2330      	movs	r3, #48	; 0x30
 80174a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801764c <_svfiprintf_r+0x1e8>
 80174aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174ae:	f04f 0901 	mov.w	r9, #1
 80174b2:	4623      	mov	r3, r4
 80174b4:	469a      	mov	sl, r3
 80174b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174ba:	b10a      	cbz	r2, 80174c0 <_svfiprintf_r+0x5c>
 80174bc:	2a25      	cmp	r2, #37	; 0x25
 80174be:	d1f9      	bne.n	80174b4 <_svfiprintf_r+0x50>
 80174c0:	ebba 0b04 	subs.w	fp, sl, r4
 80174c4:	d00b      	beq.n	80174de <_svfiprintf_r+0x7a>
 80174c6:	465b      	mov	r3, fp
 80174c8:	4622      	mov	r2, r4
 80174ca:	4629      	mov	r1, r5
 80174cc:	4638      	mov	r0, r7
 80174ce:	f7ff ff6f 	bl	80173b0 <__ssputs_r>
 80174d2:	3001      	adds	r0, #1
 80174d4:	f000 80a9 	beq.w	801762a <_svfiprintf_r+0x1c6>
 80174d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174da:	445a      	add	r2, fp
 80174dc:	9209      	str	r2, [sp, #36]	; 0x24
 80174de:	f89a 3000 	ldrb.w	r3, [sl]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f000 80a1 	beq.w	801762a <_svfiprintf_r+0x1c6>
 80174e8:	2300      	movs	r3, #0
 80174ea:	f04f 32ff 	mov.w	r2, #4294967295
 80174ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174f2:	f10a 0a01 	add.w	sl, sl, #1
 80174f6:	9304      	str	r3, [sp, #16]
 80174f8:	9307      	str	r3, [sp, #28]
 80174fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174fe:	931a      	str	r3, [sp, #104]	; 0x68
 8017500:	4654      	mov	r4, sl
 8017502:	2205      	movs	r2, #5
 8017504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017508:	4850      	ldr	r0, [pc, #320]	; (801764c <_svfiprintf_r+0x1e8>)
 801750a:	f7e8 ff19 	bl	8000340 <memchr>
 801750e:	9a04      	ldr	r2, [sp, #16]
 8017510:	b9d8      	cbnz	r0, 801754a <_svfiprintf_r+0xe6>
 8017512:	06d0      	lsls	r0, r2, #27
 8017514:	bf44      	itt	mi
 8017516:	2320      	movmi	r3, #32
 8017518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801751c:	0711      	lsls	r1, r2, #28
 801751e:	bf44      	itt	mi
 8017520:	232b      	movmi	r3, #43	; 0x2b
 8017522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017526:	f89a 3000 	ldrb.w	r3, [sl]
 801752a:	2b2a      	cmp	r3, #42	; 0x2a
 801752c:	d015      	beq.n	801755a <_svfiprintf_r+0xf6>
 801752e:	9a07      	ldr	r2, [sp, #28]
 8017530:	4654      	mov	r4, sl
 8017532:	2000      	movs	r0, #0
 8017534:	f04f 0c0a 	mov.w	ip, #10
 8017538:	4621      	mov	r1, r4
 801753a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801753e:	3b30      	subs	r3, #48	; 0x30
 8017540:	2b09      	cmp	r3, #9
 8017542:	d94d      	bls.n	80175e0 <_svfiprintf_r+0x17c>
 8017544:	b1b0      	cbz	r0, 8017574 <_svfiprintf_r+0x110>
 8017546:	9207      	str	r2, [sp, #28]
 8017548:	e014      	b.n	8017574 <_svfiprintf_r+0x110>
 801754a:	eba0 0308 	sub.w	r3, r0, r8
 801754e:	fa09 f303 	lsl.w	r3, r9, r3
 8017552:	4313      	orrs	r3, r2
 8017554:	9304      	str	r3, [sp, #16]
 8017556:	46a2      	mov	sl, r4
 8017558:	e7d2      	b.n	8017500 <_svfiprintf_r+0x9c>
 801755a:	9b03      	ldr	r3, [sp, #12]
 801755c:	1d19      	adds	r1, r3, #4
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	9103      	str	r1, [sp, #12]
 8017562:	2b00      	cmp	r3, #0
 8017564:	bfbb      	ittet	lt
 8017566:	425b      	neglt	r3, r3
 8017568:	f042 0202 	orrlt.w	r2, r2, #2
 801756c:	9307      	strge	r3, [sp, #28]
 801756e:	9307      	strlt	r3, [sp, #28]
 8017570:	bfb8      	it	lt
 8017572:	9204      	strlt	r2, [sp, #16]
 8017574:	7823      	ldrb	r3, [r4, #0]
 8017576:	2b2e      	cmp	r3, #46	; 0x2e
 8017578:	d10c      	bne.n	8017594 <_svfiprintf_r+0x130>
 801757a:	7863      	ldrb	r3, [r4, #1]
 801757c:	2b2a      	cmp	r3, #42	; 0x2a
 801757e:	d134      	bne.n	80175ea <_svfiprintf_r+0x186>
 8017580:	9b03      	ldr	r3, [sp, #12]
 8017582:	1d1a      	adds	r2, r3, #4
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	9203      	str	r2, [sp, #12]
 8017588:	2b00      	cmp	r3, #0
 801758a:	bfb8      	it	lt
 801758c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017590:	3402      	adds	r4, #2
 8017592:	9305      	str	r3, [sp, #20]
 8017594:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801765c <_svfiprintf_r+0x1f8>
 8017598:	7821      	ldrb	r1, [r4, #0]
 801759a:	2203      	movs	r2, #3
 801759c:	4650      	mov	r0, sl
 801759e:	f7e8 fecf 	bl	8000340 <memchr>
 80175a2:	b138      	cbz	r0, 80175b4 <_svfiprintf_r+0x150>
 80175a4:	9b04      	ldr	r3, [sp, #16]
 80175a6:	eba0 000a 	sub.w	r0, r0, sl
 80175aa:	2240      	movs	r2, #64	; 0x40
 80175ac:	4082      	lsls	r2, r0
 80175ae:	4313      	orrs	r3, r2
 80175b0:	3401      	adds	r4, #1
 80175b2:	9304      	str	r3, [sp, #16]
 80175b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175b8:	4825      	ldr	r0, [pc, #148]	; (8017650 <_svfiprintf_r+0x1ec>)
 80175ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175be:	2206      	movs	r2, #6
 80175c0:	f7e8 febe 	bl	8000340 <memchr>
 80175c4:	2800      	cmp	r0, #0
 80175c6:	d038      	beq.n	801763a <_svfiprintf_r+0x1d6>
 80175c8:	4b22      	ldr	r3, [pc, #136]	; (8017654 <_svfiprintf_r+0x1f0>)
 80175ca:	bb1b      	cbnz	r3, 8017614 <_svfiprintf_r+0x1b0>
 80175cc:	9b03      	ldr	r3, [sp, #12]
 80175ce:	3307      	adds	r3, #7
 80175d0:	f023 0307 	bic.w	r3, r3, #7
 80175d4:	3308      	adds	r3, #8
 80175d6:	9303      	str	r3, [sp, #12]
 80175d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175da:	4433      	add	r3, r6
 80175dc:	9309      	str	r3, [sp, #36]	; 0x24
 80175de:	e768      	b.n	80174b2 <_svfiprintf_r+0x4e>
 80175e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80175e4:	460c      	mov	r4, r1
 80175e6:	2001      	movs	r0, #1
 80175e8:	e7a6      	b.n	8017538 <_svfiprintf_r+0xd4>
 80175ea:	2300      	movs	r3, #0
 80175ec:	3401      	adds	r4, #1
 80175ee:	9305      	str	r3, [sp, #20]
 80175f0:	4619      	mov	r1, r3
 80175f2:	f04f 0c0a 	mov.w	ip, #10
 80175f6:	4620      	mov	r0, r4
 80175f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175fc:	3a30      	subs	r2, #48	; 0x30
 80175fe:	2a09      	cmp	r2, #9
 8017600:	d903      	bls.n	801760a <_svfiprintf_r+0x1a6>
 8017602:	2b00      	cmp	r3, #0
 8017604:	d0c6      	beq.n	8017594 <_svfiprintf_r+0x130>
 8017606:	9105      	str	r1, [sp, #20]
 8017608:	e7c4      	b.n	8017594 <_svfiprintf_r+0x130>
 801760a:	fb0c 2101 	mla	r1, ip, r1, r2
 801760e:	4604      	mov	r4, r0
 8017610:	2301      	movs	r3, #1
 8017612:	e7f0      	b.n	80175f6 <_svfiprintf_r+0x192>
 8017614:	ab03      	add	r3, sp, #12
 8017616:	9300      	str	r3, [sp, #0]
 8017618:	462a      	mov	r2, r5
 801761a:	4b0f      	ldr	r3, [pc, #60]	; (8017658 <_svfiprintf_r+0x1f4>)
 801761c:	a904      	add	r1, sp, #16
 801761e:	4638      	mov	r0, r7
 8017620:	f3af 8000 	nop.w
 8017624:	1c42      	adds	r2, r0, #1
 8017626:	4606      	mov	r6, r0
 8017628:	d1d6      	bne.n	80175d8 <_svfiprintf_r+0x174>
 801762a:	89ab      	ldrh	r3, [r5, #12]
 801762c:	065b      	lsls	r3, r3, #25
 801762e:	f53f af2d 	bmi.w	801748c <_svfiprintf_r+0x28>
 8017632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017634:	b01d      	add	sp, #116	; 0x74
 8017636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801763a:	ab03      	add	r3, sp, #12
 801763c:	9300      	str	r3, [sp, #0]
 801763e:	462a      	mov	r2, r5
 8017640:	4b05      	ldr	r3, [pc, #20]	; (8017658 <_svfiprintf_r+0x1f4>)
 8017642:	a904      	add	r1, sp, #16
 8017644:	4638      	mov	r0, r7
 8017646:	f000 fa4b 	bl	8017ae0 <_printf_i>
 801764a:	e7eb      	b.n	8017624 <_svfiprintf_r+0x1c0>
 801764c:	080185cc 	.word	0x080185cc
 8017650:	080185d6 	.word	0x080185d6
 8017654:	00000000 	.word	0x00000000
 8017658:	080173b1 	.word	0x080173b1
 801765c:	080185d2 	.word	0x080185d2

08017660 <_sungetc_r>:
 8017660:	b538      	push	{r3, r4, r5, lr}
 8017662:	1c4b      	adds	r3, r1, #1
 8017664:	4614      	mov	r4, r2
 8017666:	d103      	bne.n	8017670 <_sungetc_r+0x10>
 8017668:	f04f 35ff 	mov.w	r5, #4294967295
 801766c:	4628      	mov	r0, r5
 801766e:	bd38      	pop	{r3, r4, r5, pc}
 8017670:	8993      	ldrh	r3, [r2, #12]
 8017672:	f023 0320 	bic.w	r3, r3, #32
 8017676:	8193      	strh	r3, [r2, #12]
 8017678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801767a:	6852      	ldr	r2, [r2, #4]
 801767c:	b2cd      	uxtb	r5, r1
 801767e:	b18b      	cbz	r3, 80176a4 <_sungetc_r+0x44>
 8017680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017682:	4293      	cmp	r3, r2
 8017684:	dd08      	ble.n	8017698 <_sungetc_r+0x38>
 8017686:	6823      	ldr	r3, [r4, #0]
 8017688:	1e5a      	subs	r2, r3, #1
 801768a:	6022      	str	r2, [r4, #0]
 801768c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017690:	6863      	ldr	r3, [r4, #4]
 8017692:	3301      	adds	r3, #1
 8017694:	6063      	str	r3, [r4, #4]
 8017696:	e7e9      	b.n	801766c <_sungetc_r+0xc>
 8017698:	4621      	mov	r1, r4
 801769a:	f000 fcca 	bl	8018032 <__submore>
 801769e:	2800      	cmp	r0, #0
 80176a0:	d0f1      	beq.n	8017686 <_sungetc_r+0x26>
 80176a2:	e7e1      	b.n	8017668 <_sungetc_r+0x8>
 80176a4:	6921      	ldr	r1, [r4, #16]
 80176a6:	6823      	ldr	r3, [r4, #0]
 80176a8:	b151      	cbz	r1, 80176c0 <_sungetc_r+0x60>
 80176aa:	4299      	cmp	r1, r3
 80176ac:	d208      	bcs.n	80176c0 <_sungetc_r+0x60>
 80176ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80176b2:	42a9      	cmp	r1, r5
 80176b4:	d104      	bne.n	80176c0 <_sungetc_r+0x60>
 80176b6:	3b01      	subs	r3, #1
 80176b8:	3201      	adds	r2, #1
 80176ba:	6023      	str	r3, [r4, #0]
 80176bc:	6062      	str	r2, [r4, #4]
 80176be:	e7d5      	b.n	801766c <_sungetc_r+0xc>
 80176c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80176c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176c8:	6363      	str	r3, [r4, #52]	; 0x34
 80176ca:	2303      	movs	r3, #3
 80176cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80176ce:	4623      	mov	r3, r4
 80176d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80176d4:	6023      	str	r3, [r4, #0]
 80176d6:	2301      	movs	r3, #1
 80176d8:	e7dc      	b.n	8017694 <_sungetc_r+0x34>

080176da <__ssrefill_r>:
 80176da:	b510      	push	{r4, lr}
 80176dc:	460c      	mov	r4, r1
 80176de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176e0:	b169      	cbz	r1, 80176fe <__ssrefill_r+0x24>
 80176e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176e6:	4299      	cmp	r1, r3
 80176e8:	d001      	beq.n	80176ee <__ssrefill_r+0x14>
 80176ea:	f7ff fd69 	bl	80171c0 <_free_r>
 80176ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176f0:	6063      	str	r3, [r4, #4]
 80176f2:	2000      	movs	r0, #0
 80176f4:	6360      	str	r0, [r4, #52]	; 0x34
 80176f6:	b113      	cbz	r3, 80176fe <__ssrefill_r+0x24>
 80176f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80176fa:	6023      	str	r3, [r4, #0]
 80176fc:	bd10      	pop	{r4, pc}
 80176fe:	6923      	ldr	r3, [r4, #16]
 8017700:	6023      	str	r3, [r4, #0]
 8017702:	2300      	movs	r3, #0
 8017704:	6063      	str	r3, [r4, #4]
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	f043 0320 	orr.w	r3, r3, #32
 801770c:	81a3      	strh	r3, [r4, #12]
 801770e:	f04f 30ff 	mov.w	r0, #4294967295
 8017712:	e7f3      	b.n	80176fc <__ssrefill_r+0x22>

08017714 <__ssvfiscanf_r>:
 8017714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017718:	460c      	mov	r4, r1
 801771a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801771e:	2100      	movs	r1, #0
 8017720:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017724:	49a6      	ldr	r1, [pc, #664]	; (80179c0 <__ssvfiscanf_r+0x2ac>)
 8017726:	91a0      	str	r1, [sp, #640]	; 0x280
 8017728:	f10d 0804 	add.w	r8, sp, #4
 801772c:	49a5      	ldr	r1, [pc, #660]	; (80179c4 <__ssvfiscanf_r+0x2b0>)
 801772e:	4fa6      	ldr	r7, [pc, #664]	; (80179c8 <__ssvfiscanf_r+0x2b4>)
 8017730:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80179cc <__ssvfiscanf_r+0x2b8>
 8017734:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017738:	4606      	mov	r6, r0
 801773a:	91a1      	str	r1, [sp, #644]	; 0x284
 801773c:	9300      	str	r3, [sp, #0]
 801773e:	7813      	ldrb	r3, [r2, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	f000 815a 	beq.w	80179fa <__ssvfiscanf_r+0x2e6>
 8017746:	5cf9      	ldrb	r1, [r7, r3]
 8017748:	f011 0108 	ands.w	r1, r1, #8
 801774c:	f102 0501 	add.w	r5, r2, #1
 8017750:	d019      	beq.n	8017786 <__ssvfiscanf_r+0x72>
 8017752:	6863      	ldr	r3, [r4, #4]
 8017754:	2b00      	cmp	r3, #0
 8017756:	dd0f      	ble.n	8017778 <__ssvfiscanf_r+0x64>
 8017758:	6823      	ldr	r3, [r4, #0]
 801775a:	781a      	ldrb	r2, [r3, #0]
 801775c:	5cba      	ldrb	r2, [r7, r2]
 801775e:	0712      	lsls	r2, r2, #28
 8017760:	d401      	bmi.n	8017766 <__ssvfiscanf_r+0x52>
 8017762:	462a      	mov	r2, r5
 8017764:	e7eb      	b.n	801773e <__ssvfiscanf_r+0x2a>
 8017766:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017768:	3201      	adds	r2, #1
 801776a:	9245      	str	r2, [sp, #276]	; 0x114
 801776c:	6862      	ldr	r2, [r4, #4]
 801776e:	3301      	adds	r3, #1
 8017770:	3a01      	subs	r2, #1
 8017772:	6062      	str	r2, [r4, #4]
 8017774:	6023      	str	r3, [r4, #0]
 8017776:	e7ec      	b.n	8017752 <__ssvfiscanf_r+0x3e>
 8017778:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801777a:	4621      	mov	r1, r4
 801777c:	4630      	mov	r0, r6
 801777e:	4798      	blx	r3
 8017780:	2800      	cmp	r0, #0
 8017782:	d0e9      	beq.n	8017758 <__ssvfiscanf_r+0x44>
 8017784:	e7ed      	b.n	8017762 <__ssvfiscanf_r+0x4e>
 8017786:	2b25      	cmp	r3, #37	; 0x25
 8017788:	d012      	beq.n	80177b0 <__ssvfiscanf_r+0x9c>
 801778a:	469a      	mov	sl, r3
 801778c:	6863      	ldr	r3, [r4, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	f340 8091 	ble.w	80178b6 <__ssvfiscanf_r+0x1a2>
 8017794:	6822      	ldr	r2, [r4, #0]
 8017796:	7813      	ldrb	r3, [r2, #0]
 8017798:	4553      	cmp	r3, sl
 801779a:	f040 812e 	bne.w	80179fa <__ssvfiscanf_r+0x2e6>
 801779e:	6863      	ldr	r3, [r4, #4]
 80177a0:	3b01      	subs	r3, #1
 80177a2:	6063      	str	r3, [r4, #4]
 80177a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80177a6:	3201      	adds	r2, #1
 80177a8:	3301      	adds	r3, #1
 80177aa:	6022      	str	r2, [r4, #0]
 80177ac:	9345      	str	r3, [sp, #276]	; 0x114
 80177ae:	e7d8      	b.n	8017762 <__ssvfiscanf_r+0x4e>
 80177b0:	9141      	str	r1, [sp, #260]	; 0x104
 80177b2:	9143      	str	r1, [sp, #268]	; 0x10c
 80177b4:	7853      	ldrb	r3, [r2, #1]
 80177b6:	2b2a      	cmp	r3, #42	; 0x2a
 80177b8:	bf02      	ittt	eq
 80177ba:	2310      	moveq	r3, #16
 80177bc:	1c95      	addeq	r5, r2, #2
 80177be:	9341      	streq	r3, [sp, #260]	; 0x104
 80177c0:	220a      	movs	r2, #10
 80177c2:	46aa      	mov	sl, r5
 80177c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80177c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80177cc:	2b09      	cmp	r3, #9
 80177ce:	d91c      	bls.n	801780a <__ssvfiscanf_r+0xf6>
 80177d0:	487e      	ldr	r0, [pc, #504]	; (80179cc <__ssvfiscanf_r+0x2b8>)
 80177d2:	2203      	movs	r2, #3
 80177d4:	f7e8 fdb4 	bl	8000340 <memchr>
 80177d8:	b138      	cbz	r0, 80177ea <__ssvfiscanf_r+0xd6>
 80177da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177dc:	eba0 0009 	sub.w	r0, r0, r9
 80177e0:	2301      	movs	r3, #1
 80177e2:	4083      	lsls	r3, r0
 80177e4:	4313      	orrs	r3, r2
 80177e6:	9341      	str	r3, [sp, #260]	; 0x104
 80177e8:	4655      	mov	r5, sl
 80177ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177ee:	2b78      	cmp	r3, #120	; 0x78
 80177f0:	d806      	bhi.n	8017800 <__ssvfiscanf_r+0xec>
 80177f2:	2b57      	cmp	r3, #87	; 0x57
 80177f4:	d810      	bhi.n	8017818 <__ssvfiscanf_r+0x104>
 80177f6:	2b25      	cmp	r3, #37	; 0x25
 80177f8:	d0c7      	beq.n	801778a <__ssvfiscanf_r+0x76>
 80177fa:	d857      	bhi.n	80178ac <__ssvfiscanf_r+0x198>
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d065      	beq.n	80178cc <__ssvfiscanf_r+0x1b8>
 8017800:	2303      	movs	r3, #3
 8017802:	9347      	str	r3, [sp, #284]	; 0x11c
 8017804:	230a      	movs	r3, #10
 8017806:	9342      	str	r3, [sp, #264]	; 0x108
 8017808:	e076      	b.n	80178f8 <__ssvfiscanf_r+0x1e4>
 801780a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801780c:	fb02 1103 	mla	r1, r2, r3, r1
 8017810:	3930      	subs	r1, #48	; 0x30
 8017812:	9143      	str	r1, [sp, #268]	; 0x10c
 8017814:	4655      	mov	r5, sl
 8017816:	e7d4      	b.n	80177c2 <__ssvfiscanf_r+0xae>
 8017818:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801781c:	2a20      	cmp	r2, #32
 801781e:	d8ef      	bhi.n	8017800 <__ssvfiscanf_r+0xec>
 8017820:	a101      	add	r1, pc, #4	; (adr r1, 8017828 <__ssvfiscanf_r+0x114>)
 8017822:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017826:	bf00      	nop
 8017828:	080178db 	.word	0x080178db
 801782c:	08017801 	.word	0x08017801
 8017830:	08017801 	.word	0x08017801
 8017834:	08017939 	.word	0x08017939
 8017838:	08017801 	.word	0x08017801
 801783c:	08017801 	.word	0x08017801
 8017840:	08017801 	.word	0x08017801
 8017844:	08017801 	.word	0x08017801
 8017848:	08017801 	.word	0x08017801
 801784c:	08017801 	.word	0x08017801
 8017850:	08017801 	.word	0x08017801
 8017854:	0801794f 	.word	0x0801794f
 8017858:	08017935 	.word	0x08017935
 801785c:	080178b3 	.word	0x080178b3
 8017860:	080178b3 	.word	0x080178b3
 8017864:	080178b3 	.word	0x080178b3
 8017868:	08017801 	.word	0x08017801
 801786c:	080178f1 	.word	0x080178f1
 8017870:	08017801 	.word	0x08017801
 8017874:	08017801 	.word	0x08017801
 8017878:	08017801 	.word	0x08017801
 801787c:	08017801 	.word	0x08017801
 8017880:	0801795f 	.word	0x0801795f
 8017884:	0801792d 	.word	0x0801792d
 8017888:	080178d3 	.word	0x080178d3
 801788c:	08017801 	.word	0x08017801
 8017890:	08017801 	.word	0x08017801
 8017894:	0801795b 	.word	0x0801795b
 8017898:	08017801 	.word	0x08017801
 801789c:	08017935 	.word	0x08017935
 80178a0:	08017801 	.word	0x08017801
 80178a4:	08017801 	.word	0x08017801
 80178a8:	080178db 	.word	0x080178db
 80178ac:	3b45      	subs	r3, #69	; 0x45
 80178ae:	2b02      	cmp	r3, #2
 80178b0:	d8a6      	bhi.n	8017800 <__ssvfiscanf_r+0xec>
 80178b2:	2305      	movs	r3, #5
 80178b4:	e01f      	b.n	80178f6 <__ssvfiscanf_r+0x1e2>
 80178b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178b8:	4621      	mov	r1, r4
 80178ba:	4630      	mov	r0, r6
 80178bc:	4798      	blx	r3
 80178be:	2800      	cmp	r0, #0
 80178c0:	f43f af68 	beq.w	8017794 <__ssvfiscanf_r+0x80>
 80178c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80178c6:	2800      	cmp	r0, #0
 80178c8:	f040 808d 	bne.w	80179e6 <__ssvfiscanf_r+0x2d2>
 80178cc:	f04f 30ff 	mov.w	r0, #4294967295
 80178d0:	e08f      	b.n	80179f2 <__ssvfiscanf_r+0x2de>
 80178d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178d4:	f042 0220 	orr.w	r2, r2, #32
 80178d8:	9241      	str	r2, [sp, #260]	; 0x104
 80178da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178e0:	9241      	str	r2, [sp, #260]	; 0x104
 80178e2:	2210      	movs	r2, #16
 80178e4:	2b6f      	cmp	r3, #111	; 0x6f
 80178e6:	9242      	str	r2, [sp, #264]	; 0x108
 80178e8:	bf34      	ite	cc
 80178ea:	2303      	movcc	r3, #3
 80178ec:	2304      	movcs	r3, #4
 80178ee:	e002      	b.n	80178f6 <__ssvfiscanf_r+0x1e2>
 80178f0:	2300      	movs	r3, #0
 80178f2:	9342      	str	r3, [sp, #264]	; 0x108
 80178f4:	2303      	movs	r3, #3
 80178f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80178f8:	6863      	ldr	r3, [r4, #4]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	dd3d      	ble.n	801797a <__ssvfiscanf_r+0x266>
 80178fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017900:	0659      	lsls	r1, r3, #25
 8017902:	d404      	bmi.n	801790e <__ssvfiscanf_r+0x1fa>
 8017904:	6823      	ldr	r3, [r4, #0]
 8017906:	781a      	ldrb	r2, [r3, #0]
 8017908:	5cba      	ldrb	r2, [r7, r2]
 801790a:	0712      	lsls	r2, r2, #28
 801790c:	d43c      	bmi.n	8017988 <__ssvfiscanf_r+0x274>
 801790e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017910:	2b02      	cmp	r3, #2
 8017912:	dc4b      	bgt.n	80179ac <__ssvfiscanf_r+0x298>
 8017914:	466b      	mov	r3, sp
 8017916:	4622      	mov	r2, r4
 8017918:	a941      	add	r1, sp, #260	; 0x104
 801791a:	4630      	mov	r0, r6
 801791c:	f000 fa02 	bl	8017d24 <_scanf_chars>
 8017920:	2801      	cmp	r0, #1
 8017922:	d06a      	beq.n	80179fa <__ssvfiscanf_r+0x2e6>
 8017924:	2802      	cmp	r0, #2
 8017926:	f47f af1c 	bne.w	8017762 <__ssvfiscanf_r+0x4e>
 801792a:	e7cb      	b.n	80178c4 <__ssvfiscanf_r+0x1b0>
 801792c:	2308      	movs	r3, #8
 801792e:	9342      	str	r3, [sp, #264]	; 0x108
 8017930:	2304      	movs	r3, #4
 8017932:	e7e0      	b.n	80178f6 <__ssvfiscanf_r+0x1e2>
 8017934:	220a      	movs	r2, #10
 8017936:	e7d5      	b.n	80178e4 <__ssvfiscanf_r+0x1d0>
 8017938:	4629      	mov	r1, r5
 801793a:	4640      	mov	r0, r8
 801793c:	f000 fb40 	bl	8017fc0 <__sccl>
 8017940:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017946:	9341      	str	r3, [sp, #260]	; 0x104
 8017948:	4605      	mov	r5, r0
 801794a:	2301      	movs	r3, #1
 801794c:	e7d3      	b.n	80178f6 <__ssvfiscanf_r+0x1e2>
 801794e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017954:	9341      	str	r3, [sp, #260]	; 0x104
 8017956:	2300      	movs	r3, #0
 8017958:	e7cd      	b.n	80178f6 <__ssvfiscanf_r+0x1e2>
 801795a:	2302      	movs	r3, #2
 801795c:	e7cb      	b.n	80178f6 <__ssvfiscanf_r+0x1e2>
 801795e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017960:	06c3      	lsls	r3, r0, #27
 8017962:	f53f aefe 	bmi.w	8017762 <__ssvfiscanf_r+0x4e>
 8017966:	9b00      	ldr	r3, [sp, #0]
 8017968:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801796a:	1d19      	adds	r1, r3, #4
 801796c:	9100      	str	r1, [sp, #0]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	07c0      	lsls	r0, r0, #31
 8017972:	bf4c      	ite	mi
 8017974:	801a      	strhmi	r2, [r3, #0]
 8017976:	601a      	strpl	r2, [r3, #0]
 8017978:	e6f3      	b.n	8017762 <__ssvfiscanf_r+0x4e>
 801797a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801797c:	4621      	mov	r1, r4
 801797e:	4630      	mov	r0, r6
 8017980:	4798      	blx	r3
 8017982:	2800      	cmp	r0, #0
 8017984:	d0bb      	beq.n	80178fe <__ssvfiscanf_r+0x1ea>
 8017986:	e79d      	b.n	80178c4 <__ssvfiscanf_r+0x1b0>
 8017988:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801798a:	3201      	adds	r2, #1
 801798c:	9245      	str	r2, [sp, #276]	; 0x114
 801798e:	6862      	ldr	r2, [r4, #4]
 8017990:	3a01      	subs	r2, #1
 8017992:	2a00      	cmp	r2, #0
 8017994:	6062      	str	r2, [r4, #4]
 8017996:	dd02      	ble.n	801799e <__ssvfiscanf_r+0x28a>
 8017998:	3301      	adds	r3, #1
 801799a:	6023      	str	r3, [r4, #0]
 801799c:	e7b2      	b.n	8017904 <__ssvfiscanf_r+0x1f0>
 801799e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179a0:	4621      	mov	r1, r4
 80179a2:	4630      	mov	r0, r6
 80179a4:	4798      	blx	r3
 80179a6:	2800      	cmp	r0, #0
 80179a8:	d0ac      	beq.n	8017904 <__ssvfiscanf_r+0x1f0>
 80179aa:	e78b      	b.n	80178c4 <__ssvfiscanf_r+0x1b0>
 80179ac:	2b04      	cmp	r3, #4
 80179ae:	dc0f      	bgt.n	80179d0 <__ssvfiscanf_r+0x2bc>
 80179b0:	466b      	mov	r3, sp
 80179b2:	4622      	mov	r2, r4
 80179b4:	a941      	add	r1, sp, #260	; 0x104
 80179b6:	4630      	mov	r0, r6
 80179b8:	f000 fa0e 	bl	8017dd8 <_scanf_i>
 80179bc:	e7b0      	b.n	8017920 <__ssvfiscanf_r+0x20c>
 80179be:	bf00      	nop
 80179c0:	08017661 	.word	0x08017661
 80179c4:	080176db 	.word	0x080176db
 80179c8:	0801861b 	.word	0x0801861b
 80179cc:	080185d2 	.word	0x080185d2
 80179d0:	4b0b      	ldr	r3, [pc, #44]	; (8017a00 <__ssvfiscanf_r+0x2ec>)
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	f43f aec5 	beq.w	8017762 <__ssvfiscanf_r+0x4e>
 80179d8:	466b      	mov	r3, sp
 80179da:	4622      	mov	r2, r4
 80179dc:	a941      	add	r1, sp, #260	; 0x104
 80179de:	4630      	mov	r0, r6
 80179e0:	f3af 8000 	nop.w
 80179e4:	e79c      	b.n	8017920 <__ssvfiscanf_r+0x20c>
 80179e6:	89a3      	ldrh	r3, [r4, #12]
 80179e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80179ec:	bf18      	it	ne
 80179ee:	f04f 30ff 	movne.w	r0, #4294967295
 80179f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80179f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80179fc:	e7f9      	b.n	80179f2 <__ssvfiscanf_r+0x2de>
 80179fe:	bf00      	nop
 8017a00:	00000000 	.word	0x00000000

08017a04 <_printf_common>:
 8017a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a08:	4616      	mov	r6, r2
 8017a0a:	4699      	mov	r9, r3
 8017a0c:	688a      	ldr	r2, [r1, #8]
 8017a0e:	690b      	ldr	r3, [r1, #16]
 8017a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a14:	4293      	cmp	r3, r2
 8017a16:	bfb8      	it	lt
 8017a18:	4613      	movlt	r3, r2
 8017a1a:	6033      	str	r3, [r6, #0]
 8017a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a20:	4607      	mov	r7, r0
 8017a22:	460c      	mov	r4, r1
 8017a24:	b10a      	cbz	r2, 8017a2a <_printf_common+0x26>
 8017a26:	3301      	adds	r3, #1
 8017a28:	6033      	str	r3, [r6, #0]
 8017a2a:	6823      	ldr	r3, [r4, #0]
 8017a2c:	0699      	lsls	r1, r3, #26
 8017a2e:	bf42      	ittt	mi
 8017a30:	6833      	ldrmi	r3, [r6, #0]
 8017a32:	3302      	addmi	r3, #2
 8017a34:	6033      	strmi	r3, [r6, #0]
 8017a36:	6825      	ldr	r5, [r4, #0]
 8017a38:	f015 0506 	ands.w	r5, r5, #6
 8017a3c:	d106      	bne.n	8017a4c <_printf_common+0x48>
 8017a3e:	f104 0a19 	add.w	sl, r4, #25
 8017a42:	68e3      	ldr	r3, [r4, #12]
 8017a44:	6832      	ldr	r2, [r6, #0]
 8017a46:	1a9b      	subs	r3, r3, r2
 8017a48:	42ab      	cmp	r3, r5
 8017a4a:	dc26      	bgt.n	8017a9a <_printf_common+0x96>
 8017a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a50:	1e13      	subs	r3, r2, #0
 8017a52:	6822      	ldr	r2, [r4, #0]
 8017a54:	bf18      	it	ne
 8017a56:	2301      	movne	r3, #1
 8017a58:	0692      	lsls	r2, r2, #26
 8017a5a:	d42b      	bmi.n	8017ab4 <_printf_common+0xb0>
 8017a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a60:	4649      	mov	r1, r9
 8017a62:	4638      	mov	r0, r7
 8017a64:	47c0      	blx	r8
 8017a66:	3001      	adds	r0, #1
 8017a68:	d01e      	beq.n	8017aa8 <_printf_common+0xa4>
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	6922      	ldr	r2, [r4, #16]
 8017a6e:	f003 0306 	and.w	r3, r3, #6
 8017a72:	2b04      	cmp	r3, #4
 8017a74:	bf02      	ittt	eq
 8017a76:	68e5      	ldreq	r5, [r4, #12]
 8017a78:	6833      	ldreq	r3, [r6, #0]
 8017a7a:	1aed      	subeq	r5, r5, r3
 8017a7c:	68a3      	ldr	r3, [r4, #8]
 8017a7e:	bf0c      	ite	eq
 8017a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a84:	2500      	movne	r5, #0
 8017a86:	4293      	cmp	r3, r2
 8017a88:	bfc4      	itt	gt
 8017a8a:	1a9b      	subgt	r3, r3, r2
 8017a8c:	18ed      	addgt	r5, r5, r3
 8017a8e:	2600      	movs	r6, #0
 8017a90:	341a      	adds	r4, #26
 8017a92:	42b5      	cmp	r5, r6
 8017a94:	d11a      	bne.n	8017acc <_printf_common+0xc8>
 8017a96:	2000      	movs	r0, #0
 8017a98:	e008      	b.n	8017aac <_printf_common+0xa8>
 8017a9a:	2301      	movs	r3, #1
 8017a9c:	4652      	mov	r2, sl
 8017a9e:	4649      	mov	r1, r9
 8017aa0:	4638      	mov	r0, r7
 8017aa2:	47c0      	blx	r8
 8017aa4:	3001      	adds	r0, #1
 8017aa6:	d103      	bne.n	8017ab0 <_printf_common+0xac>
 8017aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8017aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ab0:	3501      	adds	r5, #1
 8017ab2:	e7c6      	b.n	8017a42 <_printf_common+0x3e>
 8017ab4:	18e1      	adds	r1, r4, r3
 8017ab6:	1c5a      	adds	r2, r3, #1
 8017ab8:	2030      	movs	r0, #48	; 0x30
 8017aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017abe:	4422      	add	r2, r4
 8017ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ac8:	3302      	adds	r3, #2
 8017aca:	e7c7      	b.n	8017a5c <_printf_common+0x58>
 8017acc:	2301      	movs	r3, #1
 8017ace:	4622      	mov	r2, r4
 8017ad0:	4649      	mov	r1, r9
 8017ad2:	4638      	mov	r0, r7
 8017ad4:	47c0      	blx	r8
 8017ad6:	3001      	adds	r0, #1
 8017ad8:	d0e6      	beq.n	8017aa8 <_printf_common+0xa4>
 8017ada:	3601      	adds	r6, #1
 8017adc:	e7d9      	b.n	8017a92 <_printf_common+0x8e>
	...

08017ae0 <_printf_i>:
 8017ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ae4:	7e0f      	ldrb	r7, [r1, #24]
 8017ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017ae8:	2f78      	cmp	r7, #120	; 0x78
 8017aea:	4691      	mov	r9, r2
 8017aec:	4680      	mov	r8, r0
 8017aee:	460c      	mov	r4, r1
 8017af0:	469a      	mov	sl, r3
 8017af2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017af6:	d807      	bhi.n	8017b08 <_printf_i+0x28>
 8017af8:	2f62      	cmp	r7, #98	; 0x62
 8017afa:	d80a      	bhi.n	8017b12 <_printf_i+0x32>
 8017afc:	2f00      	cmp	r7, #0
 8017afe:	f000 80d4 	beq.w	8017caa <_printf_i+0x1ca>
 8017b02:	2f58      	cmp	r7, #88	; 0x58
 8017b04:	f000 80c0 	beq.w	8017c88 <_printf_i+0x1a8>
 8017b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b10:	e03a      	b.n	8017b88 <_printf_i+0xa8>
 8017b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b16:	2b15      	cmp	r3, #21
 8017b18:	d8f6      	bhi.n	8017b08 <_printf_i+0x28>
 8017b1a:	a101      	add	r1, pc, #4	; (adr r1, 8017b20 <_printf_i+0x40>)
 8017b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b20:	08017b79 	.word	0x08017b79
 8017b24:	08017b8d 	.word	0x08017b8d
 8017b28:	08017b09 	.word	0x08017b09
 8017b2c:	08017b09 	.word	0x08017b09
 8017b30:	08017b09 	.word	0x08017b09
 8017b34:	08017b09 	.word	0x08017b09
 8017b38:	08017b8d 	.word	0x08017b8d
 8017b3c:	08017b09 	.word	0x08017b09
 8017b40:	08017b09 	.word	0x08017b09
 8017b44:	08017b09 	.word	0x08017b09
 8017b48:	08017b09 	.word	0x08017b09
 8017b4c:	08017c91 	.word	0x08017c91
 8017b50:	08017bb9 	.word	0x08017bb9
 8017b54:	08017c4b 	.word	0x08017c4b
 8017b58:	08017b09 	.word	0x08017b09
 8017b5c:	08017b09 	.word	0x08017b09
 8017b60:	08017cb3 	.word	0x08017cb3
 8017b64:	08017b09 	.word	0x08017b09
 8017b68:	08017bb9 	.word	0x08017bb9
 8017b6c:	08017b09 	.word	0x08017b09
 8017b70:	08017b09 	.word	0x08017b09
 8017b74:	08017c53 	.word	0x08017c53
 8017b78:	682b      	ldr	r3, [r5, #0]
 8017b7a:	1d1a      	adds	r2, r3, #4
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	602a      	str	r2, [r5, #0]
 8017b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b88:	2301      	movs	r3, #1
 8017b8a:	e09f      	b.n	8017ccc <_printf_i+0x1ec>
 8017b8c:	6820      	ldr	r0, [r4, #0]
 8017b8e:	682b      	ldr	r3, [r5, #0]
 8017b90:	0607      	lsls	r7, r0, #24
 8017b92:	f103 0104 	add.w	r1, r3, #4
 8017b96:	6029      	str	r1, [r5, #0]
 8017b98:	d501      	bpl.n	8017b9e <_printf_i+0xbe>
 8017b9a:	681e      	ldr	r6, [r3, #0]
 8017b9c:	e003      	b.n	8017ba6 <_printf_i+0xc6>
 8017b9e:	0646      	lsls	r6, r0, #25
 8017ba0:	d5fb      	bpl.n	8017b9a <_printf_i+0xba>
 8017ba2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017ba6:	2e00      	cmp	r6, #0
 8017ba8:	da03      	bge.n	8017bb2 <_printf_i+0xd2>
 8017baa:	232d      	movs	r3, #45	; 0x2d
 8017bac:	4276      	negs	r6, r6
 8017bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bb2:	485a      	ldr	r0, [pc, #360]	; (8017d1c <_printf_i+0x23c>)
 8017bb4:	230a      	movs	r3, #10
 8017bb6:	e012      	b.n	8017bde <_printf_i+0xfe>
 8017bb8:	682b      	ldr	r3, [r5, #0]
 8017bba:	6820      	ldr	r0, [r4, #0]
 8017bbc:	1d19      	adds	r1, r3, #4
 8017bbe:	6029      	str	r1, [r5, #0]
 8017bc0:	0605      	lsls	r5, r0, #24
 8017bc2:	d501      	bpl.n	8017bc8 <_printf_i+0xe8>
 8017bc4:	681e      	ldr	r6, [r3, #0]
 8017bc6:	e002      	b.n	8017bce <_printf_i+0xee>
 8017bc8:	0641      	lsls	r1, r0, #25
 8017bca:	d5fb      	bpl.n	8017bc4 <_printf_i+0xe4>
 8017bcc:	881e      	ldrh	r6, [r3, #0]
 8017bce:	4853      	ldr	r0, [pc, #332]	; (8017d1c <_printf_i+0x23c>)
 8017bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8017bd2:	bf0c      	ite	eq
 8017bd4:	2308      	moveq	r3, #8
 8017bd6:	230a      	movne	r3, #10
 8017bd8:	2100      	movs	r1, #0
 8017bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017bde:	6865      	ldr	r5, [r4, #4]
 8017be0:	60a5      	str	r5, [r4, #8]
 8017be2:	2d00      	cmp	r5, #0
 8017be4:	bfa2      	ittt	ge
 8017be6:	6821      	ldrge	r1, [r4, #0]
 8017be8:	f021 0104 	bicge.w	r1, r1, #4
 8017bec:	6021      	strge	r1, [r4, #0]
 8017bee:	b90e      	cbnz	r6, 8017bf4 <_printf_i+0x114>
 8017bf0:	2d00      	cmp	r5, #0
 8017bf2:	d04b      	beq.n	8017c8c <_printf_i+0x1ac>
 8017bf4:	4615      	mov	r5, r2
 8017bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8017bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8017bfe:	5dc7      	ldrb	r7, [r0, r7]
 8017c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c04:	4637      	mov	r7, r6
 8017c06:	42bb      	cmp	r3, r7
 8017c08:	460e      	mov	r6, r1
 8017c0a:	d9f4      	bls.n	8017bf6 <_printf_i+0x116>
 8017c0c:	2b08      	cmp	r3, #8
 8017c0e:	d10b      	bne.n	8017c28 <_printf_i+0x148>
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	07de      	lsls	r6, r3, #31
 8017c14:	d508      	bpl.n	8017c28 <_printf_i+0x148>
 8017c16:	6923      	ldr	r3, [r4, #16]
 8017c18:	6861      	ldr	r1, [r4, #4]
 8017c1a:	4299      	cmp	r1, r3
 8017c1c:	bfde      	ittt	le
 8017c1e:	2330      	movle	r3, #48	; 0x30
 8017c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c28:	1b52      	subs	r2, r2, r5
 8017c2a:	6122      	str	r2, [r4, #16]
 8017c2c:	f8cd a000 	str.w	sl, [sp]
 8017c30:	464b      	mov	r3, r9
 8017c32:	aa03      	add	r2, sp, #12
 8017c34:	4621      	mov	r1, r4
 8017c36:	4640      	mov	r0, r8
 8017c38:	f7ff fee4 	bl	8017a04 <_printf_common>
 8017c3c:	3001      	adds	r0, #1
 8017c3e:	d14a      	bne.n	8017cd6 <_printf_i+0x1f6>
 8017c40:	f04f 30ff 	mov.w	r0, #4294967295
 8017c44:	b004      	add	sp, #16
 8017c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c4a:	6823      	ldr	r3, [r4, #0]
 8017c4c:	f043 0320 	orr.w	r3, r3, #32
 8017c50:	6023      	str	r3, [r4, #0]
 8017c52:	4833      	ldr	r0, [pc, #204]	; (8017d20 <_printf_i+0x240>)
 8017c54:	2778      	movs	r7, #120	; 0x78
 8017c56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c5a:	6823      	ldr	r3, [r4, #0]
 8017c5c:	6829      	ldr	r1, [r5, #0]
 8017c5e:	061f      	lsls	r7, r3, #24
 8017c60:	f851 6b04 	ldr.w	r6, [r1], #4
 8017c64:	d402      	bmi.n	8017c6c <_printf_i+0x18c>
 8017c66:	065f      	lsls	r7, r3, #25
 8017c68:	bf48      	it	mi
 8017c6a:	b2b6      	uxthmi	r6, r6
 8017c6c:	07df      	lsls	r7, r3, #31
 8017c6e:	bf48      	it	mi
 8017c70:	f043 0320 	orrmi.w	r3, r3, #32
 8017c74:	6029      	str	r1, [r5, #0]
 8017c76:	bf48      	it	mi
 8017c78:	6023      	strmi	r3, [r4, #0]
 8017c7a:	b91e      	cbnz	r6, 8017c84 <_printf_i+0x1a4>
 8017c7c:	6823      	ldr	r3, [r4, #0]
 8017c7e:	f023 0320 	bic.w	r3, r3, #32
 8017c82:	6023      	str	r3, [r4, #0]
 8017c84:	2310      	movs	r3, #16
 8017c86:	e7a7      	b.n	8017bd8 <_printf_i+0xf8>
 8017c88:	4824      	ldr	r0, [pc, #144]	; (8017d1c <_printf_i+0x23c>)
 8017c8a:	e7e4      	b.n	8017c56 <_printf_i+0x176>
 8017c8c:	4615      	mov	r5, r2
 8017c8e:	e7bd      	b.n	8017c0c <_printf_i+0x12c>
 8017c90:	682b      	ldr	r3, [r5, #0]
 8017c92:	6826      	ldr	r6, [r4, #0]
 8017c94:	6961      	ldr	r1, [r4, #20]
 8017c96:	1d18      	adds	r0, r3, #4
 8017c98:	6028      	str	r0, [r5, #0]
 8017c9a:	0635      	lsls	r5, r6, #24
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	d501      	bpl.n	8017ca4 <_printf_i+0x1c4>
 8017ca0:	6019      	str	r1, [r3, #0]
 8017ca2:	e002      	b.n	8017caa <_printf_i+0x1ca>
 8017ca4:	0670      	lsls	r0, r6, #25
 8017ca6:	d5fb      	bpl.n	8017ca0 <_printf_i+0x1c0>
 8017ca8:	8019      	strh	r1, [r3, #0]
 8017caa:	2300      	movs	r3, #0
 8017cac:	6123      	str	r3, [r4, #16]
 8017cae:	4615      	mov	r5, r2
 8017cb0:	e7bc      	b.n	8017c2c <_printf_i+0x14c>
 8017cb2:	682b      	ldr	r3, [r5, #0]
 8017cb4:	1d1a      	adds	r2, r3, #4
 8017cb6:	602a      	str	r2, [r5, #0]
 8017cb8:	681d      	ldr	r5, [r3, #0]
 8017cba:	6862      	ldr	r2, [r4, #4]
 8017cbc:	2100      	movs	r1, #0
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	f7e8 fb3e 	bl	8000340 <memchr>
 8017cc4:	b108      	cbz	r0, 8017cca <_printf_i+0x1ea>
 8017cc6:	1b40      	subs	r0, r0, r5
 8017cc8:	6060      	str	r0, [r4, #4]
 8017cca:	6863      	ldr	r3, [r4, #4]
 8017ccc:	6123      	str	r3, [r4, #16]
 8017cce:	2300      	movs	r3, #0
 8017cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cd4:	e7aa      	b.n	8017c2c <_printf_i+0x14c>
 8017cd6:	6923      	ldr	r3, [r4, #16]
 8017cd8:	462a      	mov	r2, r5
 8017cda:	4649      	mov	r1, r9
 8017cdc:	4640      	mov	r0, r8
 8017cde:	47d0      	blx	sl
 8017ce0:	3001      	adds	r0, #1
 8017ce2:	d0ad      	beq.n	8017c40 <_printf_i+0x160>
 8017ce4:	6823      	ldr	r3, [r4, #0]
 8017ce6:	079b      	lsls	r3, r3, #30
 8017ce8:	d413      	bmi.n	8017d12 <_printf_i+0x232>
 8017cea:	68e0      	ldr	r0, [r4, #12]
 8017cec:	9b03      	ldr	r3, [sp, #12]
 8017cee:	4298      	cmp	r0, r3
 8017cf0:	bfb8      	it	lt
 8017cf2:	4618      	movlt	r0, r3
 8017cf4:	e7a6      	b.n	8017c44 <_printf_i+0x164>
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	4632      	mov	r2, r6
 8017cfa:	4649      	mov	r1, r9
 8017cfc:	4640      	mov	r0, r8
 8017cfe:	47d0      	blx	sl
 8017d00:	3001      	adds	r0, #1
 8017d02:	d09d      	beq.n	8017c40 <_printf_i+0x160>
 8017d04:	3501      	adds	r5, #1
 8017d06:	68e3      	ldr	r3, [r4, #12]
 8017d08:	9903      	ldr	r1, [sp, #12]
 8017d0a:	1a5b      	subs	r3, r3, r1
 8017d0c:	42ab      	cmp	r3, r5
 8017d0e:	dcf2      	bgt.n	8017cf6 <_printf_i+0x216>
 8017d10:	e7eb      	b.n	8017cea <_printf_i+0x20a>
 8017d12:	2500      	movs	r5, #0
 8017d14:	f104 0619 	add.w	r6, r4, #25
 8017d18:	e7f5      	b.n	8017d06 <_printf_i+0x226>
 8017d1a:	bf00      	nop
 8017d1c:	080185dd 	.word	0x080185dd
 8017d20:	080185ee 	.word	0x080185ee

08017d24 <_scanf_chars>:
 8017d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d28:	4615      	mov	r5, r2
 8017d2a:	688a      	ldr	r2, [r1, #8]
 8017d2c:	4680      	mov	r8, r0
 8017d2e:	460c      	mov	r4, r1
 8017d30:	b932      	cbnz	r2, 8017d40 <_scanf_chars+0x1c>
 8017d32:	698a      	ldr	r2, [r1, #24]
 8017d34:	2a00      	cmp	r2, #0
 8017d36:	bf0c      	ite	eq
 8017d38:	2201      	moveq	r2, #1
 8017d3a:	f04f 32ff 	movne.w	r2, #4294967295
 8017d3e:	608a      	str	r2, [r1, #8]
 8017d40:	6822      	ldr	r2, [r4, #0]
 8017d42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017dd4 <_scanf_chars+0xb0>
 8017d46:	06d1      	lsls	r1, r2, #27
 8017d48:	bf5f      	itttt	pl
 8017d4a:	681a      	ldrpl	r2, [r3, #0]
 8017d4c:	1d11      	addpl	r1, r2, #4
 8017d4e:	6019      	strpl	r1, [r3, #0]
 8017d50:	6816      	ldrpl	r6, [r2, #0]
 8017d52:	2700      	movs	r7, #0
 8017d54:	69a0      	ldr	r0, [r4, #24]
 8017d56:	b188      	cbz	r0, 8017d7c <_scanf_chars+0x58>
 8017d58:	2801      	cmp	r0, #1
 8017d5a:	d107      	bne.n	8017d6c <_scanf_chars+0x48>
 8017d5c:	682a      	ldr	r2, [r5, #0]
 8017d5e:	7811      	ldrb	r1, [r2, #0]
 8017d60:	6962      	ldr	r2, [r4, #20]
 8017d62:	5c52      	ldrb	r2, [r2, r1]
 8017d64:	b952      	cbnz	r2, 8017d7c <_scanf_chars+0x58>
 8017d66:	2f00      	cmp	r7, #0
 8017d68:	d031      	beq.n	8017dce <_scanf_chars+0xaa>
 8017d6a:	e022      	b.n	8017db2 <_scanf_chars+0x8e>
 8017d6c:	2802      	cmp	r0, #2
 8017d6e:	d120      	bne.n	8017db2 <_scanf_chars+0x8e>
 8017d70:	682b      	ldr	r3, [r5, #0]
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d78:	071b      	lsls	r3, r3, #28
 8017d7a:	d41a      	bmi.n	8017db2 <_scanf_chars+0x8e>
 8017d7c:	6823      	ldr	r3, [r4, #0]
 8017d7e:	06da      	lsls	r2, r3, #27
 8017d80:	bf5e      	ittt	pl
 8017d82:	682b      	ldrpl	r3, [r5, #0]
 8017d84:	781b      	ldrbpl	r3, [r3, #0]
 8017d86:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d8a:	682a      	ldr	r2, [r5, #0]
 8017d8c:	686b      	ldr	r3, [r5, #4]
 8017d8e:	3201      	adds	r2, #1
 8017d90:	602a      	str	r2, [r5, #0]
 8017d92:	68a2      	ldr	r2, [r4, #8]
 8017d94:	3b01      	subs	r3, #1
 8017d96:	3a01      	subs	r2, #1
 8017d98:	606b      	str	r3, [r5, #4]
 8017d9a:	3701      	adds	r7, #1
 8017d9c:	60a2      	str	r2, [r4, #8]
 8017d9e:	b142      	cbz	r2, 8017db2 <_scanf_chars+0x8e>
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	dcd7      	bgt.n	8017d54 <_scanf_chars+0x30>
 8017da4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017da8:	4629      	mov	r1, r5
 8017daa:	4640      	mov	r0, r8
 8017dac:	4798      	blx	r3
 8017dae:	2800      	cmp	r0, #0
 8017db0:	d0d0      	beq.n	8017d54 <_scanf_chars+0x30>
 8017db2:	6823      	ldr	r3, [r4, #0]
 8017db4:	f013 0310 	ands.w	r3, r3, #16
 8017db8:	d105      	bne.n	8017dc6 <_scanf_chars+0xa2>
 8017dba:	68e2      	ldr	r2, [r4, #12]
 8017dbc:	3201      	adds	r2, #1
 8017dbe:	60e2      	str	r2, [r4, #12]
 8017dc0:	69a2      	ldr	r2, [r4, #24]
 8017dc2:	b102      	cbz	r2, 8017dc6 <_scanf_chars+0xa2>
 8017dc4:	7033      	strb	r3, [r6, #0]
 8017dc6:	6923      	ldr	r3, [r4, #16]
 8017dc8:	443b      	add	r3, r7
 8017dca:	6123      	str	r3, [r4, #16]
 8017dcc:	2000      	movs	r0, #0
 8017dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dd2:	bf00      	nop
 8017dd4:	0801861b 	.word	0x0801861b

08017dd8 <_scanf_i>:
 8017dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ddc:	4698      	mov	r8, r3
 8017dde:	4b74      	ldr	r3, [pc, #464]	; (8017fb0 <_scanf_i+0x1d8>)
 8017de0:	460c      	mov	r4, r1
 8017de2:	4682      	mov	sl, r0
 8017de4:	4616      	mov	r6, r2
 8017de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017dea:	b087      	sub	sp, #28
 8017dec:	ab03      	add	r3, sp, #12
 8017dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017df2:	4b70      	ldr	r3, [pc, #448]	; (8017fb4 <_scanf_i+0x1dc>)
 8017df4:	69a1      	ldr	r1, [r4, #24]
 8017df6:	4a70      	ldr	r2, [pc, #448]	; (8017fb8 <_scanf_i+0x1e0>)
 8017df8:	2903      	cmp	r1, #3
 8017dfa:	bf18      	it	ne
 8017dfc:	461a      	movne	r2, r3
 8017dfe:	68a3      	ldr	r3, [r4, #8]
 8017e00:	9201      	str	r2, [sp, #4]
 8017e02:	1e5a      	subs	r2, r3, #1
 8017e04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017e08:	bf88      	it	hi
 8017e0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017e0e:	4627      	mov	r7, r4
 8017e10:	bf82      	ittt	hi
 8017e12:	eb03 0905 	addhi.w	r9, r3, r5
 8017e16:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017e1a:	60a3      	strhi	r3, [r4, #8]
 8017e1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017e24:	bf98      	it	ls
 8017e26:	f04f 0900 	movls.w	r9, #0
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	463d      	mov	r5, r7
 8017e2e:	f04f 0b00 	mov.w	fp, #0
 8017e32:	6831      	ldr	r1, [r6, #0]
 8017e34:	ab03      	add	r3, sp, #12
 8017e36:	7809      	ldrb	r1, [r1, #0]
 8017e38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	f7e8 fa7f 	bl	8000340 <memchr>
 8017e42:	b328      	cbz	r0, 8017e90 <_scanf_i+0xb8>
 8017e44:	f1bb 0f01 	cmp.w	fp, #1
 8017e48:	d159      	bne.n	8017efe <_scanf_i+0x126>
 8017e4a:	6862      	ldr	r2, [r4, #4]
 8017e4c:	b92a      	cbnz	r2, 8017e5a <_scanf_i+0x82>
 8017e4e:	6822      	ldr	r2, [r4, #0]
 8017e50:	2308      	movs	r3, #8
 8017e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e56:	6063      	str	r3, [r4, #4]
 8017e58:	6022      	str	r2, [r4, #0]
 8017e5a:	6822      	ldr	r2, [r4, #0]
 8017e5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017e60:	6022      	str	r2, [r4, #0]
 8017e62:	68a2      	ldr	r2, [r4, #8]
 8017e64:	1e51      	subs	r1, r2, #1
 8017e66:	60a1      	str	r1, [r4, #8]
 8017e68:	b192      	cbz	r2, 8017e90 <_scanf_i+0xb8>
 8017e6a:	6832      	ldr	r2, [r6, #0]
 8017e6c:	1c51      	adds	r1, r2, #1
 8017e6e:	6031      	str	r1, [r6, #0]
 8017e70:	7812      	ldrb	r2, [r2, #0]
 8017e72:	f805 2b01 	strb.w	r2, [r5], #1
 8017e76:	6872      	ldr	r2, [r6, #4]
 8017e78:	3a01      	subs	r2, #1
 8017e7a:	2a00      	cmp	r2, #0
 8017e7c:	6072      	str	r2, [r6, #4]
 8017e7e:	dc07      	bgt.n	8017e90 <_scanf_i+0xb8>
 8017e80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017e84:	4631      	mov	r1, r6
 8017e86:	4650      	mov	r0, sl
 8017e88:	4790      	blx	r2
 8017e8a:	2800      	cmp	r0, #0
 8017e8c:	f040 8085 	bne.w	8017f9a <_scanf_i+0x1c2>
 8017e90:	f10b 0b01 	add.w	fp, fp, #1
 8017e94:	f1bb 0f03 	cmp.w	fp, #3
 8017e98:	d1cb      	bne.n	8017e32 <_scanf_i+0x5a>
 8017e9a:	6863      	ldr	r3, [r4, #4]
 8017e9c:	b90b      	cbnz	r3, 8017ea2 <_scanf_i+0xca>
 8017e9e:	230a      	movs	r3, #10
 8017ea0:	6063      	str	r3, [r4, #4]
 8017ea2:	6863      	ldr	r3, [r4, #4]
 8017ea4:	4945      	ldr	r1, [pc, #276]	; (8017fbc <_scanf_i+0x1e4>)
 8017ea6:	6960      	ldr	r0, [r4, #20]
 8017ea8:	1ac9      	subs	r1, r1, r3
 8017eaa:	f000 f889 	bl	8017fc0 <__sccl>
 8017eae:	f04f 0b00 	mov.w	fp, #0
 8017eb2:	68a3      	ldr	r3, [r4, #8]
 8017eb4:	6822      	ldr	r2, [r4, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d03d      	beq.n	8017f36 <_scanf_i+0x15e>
 8017eba:	6831      	ldr	r1, [r6, #0]
 8017ebc:	6960      	ldr	r0, [r4, #20]
 8017ebe:	f891 c000 	ldrb.w	ip, [r1]
 8017ec2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	d035      	beq.n	8017f36 <_scanf_i+0x15e>
 8017eca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017ece:	d124      	bne.n	8017f1a <_scanf_i+0x142>
 8017ed0:	0510      	lsls	r0, r2, #20
 8017ed2:	d522      	bpl.n	8017f1a <_scanf_i+0x142>
 8017ed4:	f10b 0b01 	add.w	fp, fp, #1
 8017ed8:	f1b9 0f00 	cmp.w	r9, #0
 8017edc:	d003      	beq.n	8017ee6 <_scanf_i+0x10e>
 8017ede:	3301      	adds	r3, #1
 8017ee0:	f109 39ff 	add.w	r9, r9, #4294967295
 8017ee4:	60a3      	str	r3, [r4, #8]
 8017ee6:	6873      	ldr	r3, [r6, #4]
 8017ee8:	3b01      	subs	r3, #1
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	6073      	str	r3, [r6, #4]
 8017eee:	dd1b      	ble.n	8017f28 <_scanf_i+0x150>
 8017ef0:	6833      	ldr	r3, [r6, #0]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	6033      	str	r3, [r6, #0]
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	60a3      	str	r3, [r4, #8]
 8017efc:	e7d9      	b.n	8017eb2 <_scanf_i+0xda>
 8017efe:	f1bb 0f02 	cmp.w	fp, #2
 8017f02:	d1ae      	bne.n	8017e62 <_scanf_i+0x8a>
 8017f04:	6822      	ldr	r2, [r4, #0]
 8017f06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017f0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017f0e:	d1bf      	bne.n	8017e90 <_scanf_i+0xb8>
 8017f10:	2310      	movs	r3, #16
 8017f12:	6063      	str	r3, [r4, #4]
 8017f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f18:	e7a2      	b.n	8017e60 <_scanf_i+0x88>
 8017f1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017f1e:	6022      	str	r2, [r4, #0]
 8017f20:	780b      	ldrb	r3, [r1, #0]
 8017f22:	f805 3b01 	strb.w	r3, [r5], #1
 8017f26:	e7de      	b.n	8017ee6 <_scanf_i+0x10e>
 8017f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f2c:	4631      	mov	r1, r6
 8017f2e:	4650      	mov	r0, sl
 8017f30:	4798      	blx	r3
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d0df      	beq.n	8017ef6 <_scanf_i+0x11e>
 8017f36:	6823      	ldr	r3, [r4, #0]
 8017f38:	05d9      	lsls	r1, r3, #23
 8017f3a:	d50d      	bpl.n	8017f58 <_scanf_i+0x180>
 8017f3c:	42bd      	cmp	r5, r7
 8017f3e:	d909      	bls.n	8017f54 <_scanf_i+0x17c>
 8017f40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f48:	4632      	mov	r2, r6
 8017f4a:	4650      	mov	r0, sl
 8017f4c:	4798      	blx	r3
 8017f4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f52:	464d      	mov	r5, r9
 8017f54:	42bd      	cmp	r5, r7
 8017f56:	d028      	beq.n	8017faa <_scanf_i+0x1d2>
 8017f58:	6822      	ldr	r2, [r4, #0]
 8017f5a:	f012 0210 	ands.w	r2, r2, #16
 8017f5e:	d113      	bne.n	8017f88 <_scanf_i+0x1b0>
 8017f60:	702a      	strb	r2, [r5, #0]
 8017f62:	6863      	ldr	r3, [r4, #4]
 8017f64:	9e01      	ldr	r6, [sp, #4]
 8017f66:	4639      	mov	r1, r7
 8017f68:	4650      	mov	r0, sl
 8017f6a:	47b0      	blx	r6
 8017f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f70:	6821      	ldr	r1, [r4, #0]
 8017f72:	1d1a      	adds	r2, r3, #4
 8017f74:	f8c8 2000 	str.w	r2, [r8]
 8017f78:	f011 0f20 	tst.w	r1, #32
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	d00f      	beq.n	8017fa0 <_scanf_i+0x1c8>
 8017f80:	6018      	str	r0, [r3, #0]
 8017f82:	68e3      	ldr	r3, [r4, #12]
 8017f84:	3301      	adds	r3, #1
 8017f86:	60e3      	str	r3, [r4, #12]
 8017f88:	6923      	ldr	r3, [r4, #16]
 8017f8a:	1bed      	subs	r5, r5, r7
 8017f8c:	445d      	add	r5, fp
 8017f8e:	442b      	add	r3, r5
 8017f90:	6123      	str	r3, [r4, #16]
 8017f92:	2000      	movs	r0, #0
 8017f94:	b007      	add	sp, #28
 8017f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f9a:	f04f 0b00 	mov.w	fp, #0
 8017f9e:	e7ca      	b.n	8017f36 <_scanf_i+0x15e>
 8017fa0:	07ca      	lsls	r2, r1, #31
 8017fa2:	bf4c      	ite	mi
 8017fa4:	8018      	strhmi	r0, [r3, #0]
 8017fa6:	6018      	strpl	r0, [r3, #0]
 8017fa8:	e7eb      	b.n	8017f82 <_scanf_i+0x1aa>
 8017faa:	2001      	movs	r0, #1
 8017fac:	e7f2      	b.n	8017f94 <_scanf_i+0x1bc>
 8017fae:	bf00      	nop
 8017fb0:	080184fc 	.word	0x080184fc
 8017fb4:	08018349 	.word	0x08018349
 8017fb8:	08018261 	.word	0x08018261
 8017fbc:	0801860f 	.word	0x0801860f

08017fc0 <__sccl>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	780b      	ldrb	r3, [r1, #0]
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	2b5e      	cmp	r3, #94	; 0x5e
 8017fc8:	bf0b      	itete	eq
 8017fca:	784b      	ldrbeq	r3, [r1, #1]
 8017fcc:	1c4a      	addne	r2, r1, #1
 8017fce:	1c8a      	addeq	r2, r1, #2
 8017fd0:	2100      	movne	r1, #0
 8017fd2:	bf08      	it	eq
 8017fd4:	2101      	moveq	r1, #1
 8017fd6:	3801      	subs	r0, #1
 8017fd8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017fdc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017fe0:	42a8      	cmp	r0, r5
 8017fe2:	d1fb      	bne.n	8017fdc <__sccl+0x1c>
 8017fe4:	b90b      	cbnz	r3, 8017fea <__sccl+0x2a>
 8017fe6:	1e50      	subs	r0, r2, #1
 8017fe8:	bd70      	pop	{r4, r5, r6, pc}
 8017fea:	f081 0101 	eor.w	r1, r1, #1
 8017fee:	54e1      	strb	r1, [r4, r3]
 8017ff0:	4610      	mov	r0, r2
 8017ff2:	4602      	mov	r2, r0
 8017ff4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017ff8:	2d2d      	cmp	r5, #45	; 0x2d
 8017ffa:	d005      	beq.n	8018008 <__sccl+0x48>
 8017ffc:	2d5d      	cmp	r5, #93	; 0x5d
 8017ffe:	d016      	beq.n	801802e <__sccl+0x6e>
 8018000:	2d00      	cmp	r5, #0
 8018002:	d0f1      	beq.n	8017fe8 <__sccl+0x28>
 8018004:	462b      	mov	r3, r5
 8018006:	e7f2      	b.n	8017fee <__sccl+0x2e>
 8018008:	7846      	ldrb	r6, [r0, #1]
 801800a:	2e5d      	cmp	r6, #93	; 0x5d
 801800c:	d0fa      	beq.n	8018004 <__sccl+0x44>
 801800e:	42b3      	cmp	r3, r6
 8018010:	dcf8      	bgt.n	8018004 <__sccl+0x44>
 8018012:	3002      	adds	r0, #2
 8018014:	461a      	mov	r2, r3
 8018016:	3201      	adds	r2, #1
 8018018:	4296      	cmp	r6, r2
 801801a:	54a1      	strb	r1, [r4, r2]
 801801c:	dcfb      	bgt.n	8018016 <__sccl+0x56>
 801801e:	1af2      	subs	r2, r6, r3
 8018020:	3a01      	subs	r2, #1
 8018022:	1c5d      	adds	r5, r3, #1
 8018024:	42b3      	cmp	r3, r6
 8018026:	bfa8      	it	ge
 8018028:	2200      	movge	r2, #0
 801802a:	18ab      	adds	r3, r5, r2
 801802c:	e7e1      	b.n	8017ff2 <__sccl+0x32>
 801802e:	4610      	mov	r0, r2
 8018030:	e7da      	b.n	8017fe8 <__sccl+0x28>

08018032 <__submore>:
 8018032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018036:	460c      	mov	r4, r1
 8018038:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801803a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801803e:	4299      	cmp	r1, r3
 8018040:	d11d      	bne.n	801807e <__submore+0x4c>
 8018042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018046:	f7ff f927 	bl	8017298 <_malloc_r>
 801804a:	b918      	cbnz	r0, 8018054 <__submore+0x22>
 801804c:	f04f 30ff 	mov.w	r0, #4294967295
 8018050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018058:	63a3      	str	r3, [r4, #56]	; 0x38
 801805a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801805e:	6360      	str	r0, [r4, #52]	; 0x34
 8018060:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018064:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018068:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801806c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018070:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018074:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018078:	6020      	str	r0, [r4, #0]
 801807a:	2000      	movs	r0, #0
 801807c:	e7e8      	b.n	8018050 <__submore+0x1e>
 801807e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018080:	0077      	lsls	r7, r6, #1
 8018082:	463a      	mov	r2, r7
 8018084:	f000 f83a 	bl	80180fc <_realloc_r>
 8018088:	4605      	mov	r5, r0
 801808a:	2800      	cmp	r0, #0
 801808c:	d0de      	beq.n	801804c <__submore+0x1a>
 801808e:	eb00 0806 	add.w	r8, r0, r6
 8018092:	4601      	mov	r1, r0
 8018094:	4632      	mov	r2, r6
 8018096:	4640      	mov	r0, r8
 8018098:	f7ff f884 	bl	80171a4 <memcpy>
 801809c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80180a0:	f8c4 8000 	str.w	r8, [r4]
 80180a4:	e7e9      	b.n	801807a <__submore+0x48>

080180a6 <memmove>:
 80180a6:	4288      	cmp	r0, r1
 80180a8:	b510      	push	{r4, lr}
 80180aa:	eb01 0402 	add.w	r4, r1, r2
 80180ae:	d902      	bls.n	80180b6 <memmove+0x10>
 80180b0:	4284      	cmp	r4, r0
 80180b2:	4623      	mov	r3, r4
 80180b4:	d807      	bhi.n	80180c6 <memmove+0x20>
 80180b6:	1e43      	subs	r3, r0, #1
 80180b8:	42a1      	cmp	r1, r4
 80180ba:	d008      	beq.n	80180ce <memmove+0x28>
 80180bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180c4:	e7f8      	b.n	80180b8 <memmove+0x12>
 80180c6:	4402      	add	r2, r0
 80180c8:	4601      	mov	r1, r0
 80180ca:	428a      	cmp	r2, r1
 80180cc:	d100      	bne.n	80180d0 <memmove+0x2a>
 80180ce:	bd10      	pop	{r4, pc}
 80180d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180d8:	e7f7      	b.n	80180ca <memmove+0x24>
	...

080180dc <_sbrk_r>:
 80180dc:	b538      	push	{r3, r4, r5, lr}
 80180de:	4d06      	ldr	r5, [pc, #24]	; (80180f8 <_sbrk_r+0x1c>)
 80180e0:	2300      	movs	r3, #0
 80180e2:	4604      	mov	r4, r0
 80180e4:	4608      	mov	r0, r1
 80180e6:	602b      	str	r3, [r5, #0]
 80180e8:	f7eb fb6e 	bl	80037c8 <_sbrk>
 80180ec:	1c43      	adds	r3, r0, #1
 80180ee:	d102      	bne.n	80180f6 <_sbrk_r+0x1a>
 80180f0:	682b      	ldr	r3, [r5, #0]
 80180f2:	b103      	cbz	r3, 80180f6 <_sbrk_r+0x1a>
 80180f4:	6023      	str	r3, [r4, #0]
 80180f6:	bd38      	pop	{r3, r4, r5, pc}
 80180f8:	24003334 	.word	0x24003334

080180fc <_realloc_r>:
 80180fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018100:	4680      	mov	r8, r0
 8018102:	4614      	mov	r4, r2
 8018104:	460e      	mov	r6, r1
 8018106:	b921      	cbnz	r1, 8018112 <_realloc_r+0x16>
 8018108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801810c:	4611      	mov	r1, r2
 801810e:	f7ff b8c3 	b.w	8017298 <_malloc_r>
 8018112:	b92a      	cbnz	r2, 8018120 <_realloc_r+0x24>
 8018114:	f7ff f854 	bl	80171c0 <_free_r>
 8018118:	4625      	mov	r5, r4
 801811a:	4628      	mov	r0, r5
 801811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018120:	f000 f914 	bl	801834c <_malloc_usable_size_r>
 8018124:	4284      	cmp	r4, r0
 8018126:	4607      	mov	r7, r0
 8018128:	d802      	bhi.n	8018130 <_realloc_r+0x34>
 801812a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801812e:	d812      	bhi.n	8018156 <_realloc_r+0x5a>
 8018130:	4621      	mov	r1, r4
 8018132:	4640      	mov	r0, r8
 8018134:	f7ff f8b0 	bl	8017298 <_malloc_r>
 8018138:	4605      	mov	r5, r0
 801813a:	2800      	cmp	r0, #0
 801813c:	d0ed      	beq.n	801811a <_realloc_r+0x1e>
 801813e:	42bc      	cmp	r4, r7
 8018140:	4622      	mov	r2, r4
 8018142:	4631      	mov	r1, r6
 8018144:	bf28      	it	cs
 8018146:	463a      	movcs	r2, r7
 8018148:	f7ff f82c 	bl	80171a4 <memcpy>
 801814c:	4631      	mov	r1, r6
 801814e:	4640      	mov	r0, r8
 8018150:	f7ff f836 	bl	80171c0 <_free_r>
 8018154:	e7e1      	b.n	801811a <_realloc_r+0x1e>
 8018156:	4635      	mov	r5, r6
 8018158:	e7df      	b.n	801811a <_realloc_r+0x1e>
	...

0801815c <_strtol_l.constprop.0>:
 801815c:	2b01      	cmp	r3, #1
 801815e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018162:	d001      	beq.n	8018168 <_strtol_l.constprop.0+0xc>
 8018164:	2b24      	cmp	r3, #36	; 0x24
 8018166:	d906      	bls.n	8018176 <_strtol_l.constprop.0+0x1a>
 8018168:	f7fe ffe8 	bl	801713c <__errno>
 801816c:	2316      	movs	r3, #22
 801816e:	6003      	str	r3, [r0, #0]
 8018170:	2000      	movs	r0, #0
 8018172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018176:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801825c <_strtol_l.constprop.0+0x100>
 801817a:	460d      	mov	r5, r1
 801817c:	462e      	mov	r6, r5
 801817e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018182:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018186:	f017 0708 	ands.w	r7, r7, #8
 801818a:	d1f7      	bne.n	801817c <_strtol_l.constprop.0+0x20>
 801818c:	2c2d      	cmp	r4, #45	; 0x2d
 801818e:	d132      	bne.n	80181f6 <_strtol_l.constprop.0+0x9a>
 8018190:	782c      	ldrb	r4, [r5, #0]
 8018192:	2701      	movs	r7, #1
 8018194:	1cb5      	adds	r5, r6, #2
 8018196:	2b00      	cmp	r3, #0
 8018198:	d05b      	beq.n	8018252 <_strtol_l.constprop.0+0xf6>
 801819a:	2b10      	cmp	r3, #16
 801819c:	d109      	bne.n	80181b2 <_strtol_l.constprop.0+0x56>
 801819e:	2c30      	cmp	r4, #48	; 0x30
 80181a0:	d107      	bne.n	80181b2 <_strtol_l.constprop.0+0x56>
 80181a2:	782c      	ldrb	r4, [r5, #0]
 80181a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80181a8:	2c58      	cmp	r4, #88	; 0x58
 80181aa:	d14d      	bne.n	8018248 <_strtol_l.constprop.0+0xec>
 80181ac:	786c      	ldrb	r4, [r5, #1]
 80181ae:	2310      	movs	r3, #16
 80181b0:	3502      	adds	r5, #2
 80181b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80181b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80181ba:	f04f 0e00 	mov.w	lr, #0
 80181be:	fbb8 f9f3 	udiv	r9, r8, r3
 80181c2:	4676      	mov	r6, lr
 80181c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80181c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80181cc:	f1bc 0f09 	cmp.w	ip, #9
 80181d0:	d816      	bhi.n	8018200 <_strtol_l.constprop.0+0xa4>
 80181d2:	4664      	mov	r4, ip
 80181d4:	42a3      	cmp	r3, r4
 80181d6:	dd24      	ble.n	8018222 <_strtol_l.constprop.0+0xc6>
 80181d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80181dc:	d008      	beq.n	80181f0 <_strtol_l.constprop.0+0x94>
 80181de:	45b1      	cmp	r9, r6
 80181e0:	d31c      	bcc.n	801821c <_strtol_l.constprop.0+0xc0>
 80181e2:	d101      	bne.n	80181e8 <_strtol_l.constprop.0+0x8c>
 80181e4:	45a2      	cmp	sl, r4
 80181e6:	db19      	blt.n	801821c <_strtol_l.constprop.0+0xc0>
 80181e8:	fb06 4603 	mla	r6, r6, r3, r4
 80181ec:	f04f 0e01 	mov.w	lr, #1
 80181f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181f4:	e7e8      	b.n	80181c8 <_strtol_l.constprop.0+0x6c>
 80181f6:	2c2b      	cmp	r4, #43	; 0x2b
 80181f8:	bf04      	itt	eq
 80181fa:	782c      	ldrbeq	r4, [r5, #0]
 80181fc:	1cb5      	addeq	r5, r6, #2
 80181fe:	e7ca      	b.n	8018196 <_strtol_l.constprop.0+0x3a>
 8018200:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018204:	f1bc 0f19 	cmp.w	ip, #25
 8018208:	d801      	bhi.n	801820e <_strtol_l.constprop.0+0xb2>
 801820a:	3c37      	subs	r4, #55	; 0x37
 801820c:	e7e2      	b.n	80181d4 <_strtol_l.constprop.0+0x78>
 801820e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018212:	f1bc 0f19 	cmp.w	ip, #25
 8018216:	d804      	bhi.n	8018222 <_strtol_l.constprop.0+0xc6>
 8018218:	3c57      	subs	r4, #87	; 0x57
 801821a:	e7db      	b.n	80181d4 <_strtol_l.constprop.0+0x78>
 801821c:	f04f 3eff 	mov.w	lr, #4294967295
 8018220:	e7e6      	b.n	80181f0 <_strtol_l.constprop.0+0x94>
 8018222:	f1be 3fff 	cmp.w	lr, #4294967295
 8018226:	d105      	bne.n	8018234 <_strtol_l.constprop.0+0xd8>
 8018228:	2322      	movs	r3, #34	; 0x22
 801822a:	6003      	str	r3, [r0, #0]
 801822c:	4646      	mov	r6, r8
 801822e:	b942      	cbnz	r2, 8018242 <_strtol_l.constprop.0+0xe6>
 8018230:	4630      	mov	r0, r6
 8018232:	e79e      	b.n	8018172 <_strtol_l.constprop.0+0x16>
 8018234:	b107      	cbz	r7, 8018238 <_strtol_l.constprop.0+0xdc>
 8018236:	4276      	negs	r6, r6
 8018238:	2a00      	cmp	r2, #0
 801823a:	d0f9      	beq.n	8018230 <_strtol_l.constprop.0+0xd4>
 801823c:	f1be 0f00 	cmp.w	lr, #0
 8018240:	d000      	beq.n	8018244 <_strtol_l.constprop.0+0xe8>
 8018242:	1e69      	subs	r1, r5, #1
 8018244:	6011      	str	r1, [r2, #0]
 8018246:	e7f3      	b.n	8018230 <_strtol_l.constprop.0+0xd4>
 8018248:	2430      	movs	r4, #48	; 0x30
 801824a:	2b00      	cmp	r3, #0
 801824c:	d1b1      	bne.n	80181b2 <_strtol_l.constprop.0+0x56>
 801824e:	2308      	movs	r3, #8
 8018250:	e7af      	b.n	80181b2 <_strtol_l.constprop.0+0x56>
 8018252:	2c30      	cmp	r4, #48	; 0x30
 8018254:	d0a5      	beq.n	80181a2 <_strtol_l.constprop.0+0x46>
 8018256:	230a      	movs	r3, #10
 8018258:	e7ab      	b.n	80181b2 <_strtol_l.constprop.0+0x56>
 801825a:	bf00      	nop
 801825c:	0801861b 	.word	0x0801861b

08018260 <_strtol_r>:
 8018260:	f7ff bf7c 	b.w	801815c <_strtol_l.constprop.0>

08018264 <_strtoul_l.constprop.0>:
 8018264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018268:	4f36      	ldr	r7, [pc, #216]	; (8018344 <_strtoul_l.constprop.0+0xe0>)
 801826a:	4686      	mov	lr, r0
 801826c:	460d      	mov	r5, r1
 801826e:	4628      	mov	r0, r5
 8018270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018274:	5d3e      	ldrb	r6, [r7, r4]
 8018276:	f016 0608 	ands.w	r6, r6, #8
 801827a:	d1f8      	bne.n	801826e <_strtoul_l.constprop.0+0xa>
 801827c:	2c2d      	cmp	r4, #45	; 0x2d
 801827e:	d130      	bne.n	80182e2 <_strtoul_l.constprop.0+0x7e>
 8018280:	782c      	ldrb	r4, [r5, #0]
 8018282:	2601      	movs	r6, #1
 8018284:	1c85      	adds	r5, r0, #2
 8018286:	2b00      	cmp	r3, #0
 8018288:	d057      	beq.n	801833a <_strtoul_l.constprop.0+0xd6>
 801828a:	2b10      	cmp	r3, #16
 801828c:	d109      	bne.n	80182a2 <_strtoul_l.constprop.0+0x3e>
 801828e:	2c30      	cmp	r4, #48	; 0x30
 8018290:	d107      	bne.n	80182a2 <_strtoul_l.constprop.0+0x3e>
 8018292:	7828      	ldrb	r0, [r5, #0]
 8018294:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018298:	2858      	cmp	r0, #88	; 0x58
 801829a:	d149      	bne.n	8018330 <_strtoul_l.constprop.0+0xcc>
 801829c:	786c      	ldrb	r4, [r5, #1]
 801829e:	2310      	movs	r3, #16
 80182a0:	3502      	adds	r5, #2
 80182a2:	f04f 38ff 	mov.w	r8, #4294967295
 80182a6:	2700      	movs	r7, #0
 80182a8:	fbb8 f8f3 	udiv	r8, r8, r3
 80182ac:	fb03 f908 	mul.w	r9, r3, r8
 80182b0:	ea6f 0909 	mvn.w	r9, r9
 80182b4:	4638      	mov	r0, r7
 80182b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80182ba:	f1bc 0f09 	cmp.w	ip, #9
 80182be:	d815      	bhi.n	80182ec <_strtoul_l.constprop.0+0x88>
 80182c0:	4664      	mov	r4, ip
 80182c2:	42a3      	cmp	r3, r4
 80182c4:	dd23      	ble.n	801830e <_strtoul_l.constprop.0+0xaa>
 80182c6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80182ca:	d007      	beq.n	80182dc <_strtoul_l.constprop.0+0x78>
 80182cc:	4580      	cmp	r8, r0
 80182ce:	d31b      	bcc.n	8018308 <_strtoul_l.constprop.0+0xa4>
 80182d0:	d101      	bne.n	80182d6 <_strtoul_l.constprop.0+0x72>
 80182d2:	45a1      	cmp	r9, r4
 80182d4:	db18      	blt.n	8018308 <_strtoul_l.constprop.0+0xa4>
 80182d6:	fb00 4003 	mla	r0, r0, r3, r4
 80182da:	2701      	movs	r7, #1
 80182dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182e0:	e7e9      	b.n	80182b6 <_strtoul_l.constprop.0+0x52>
 80182e2:	2c2b      	cmp	r4, #43	; 0x2b
 80182e4:	bf04      	itt	eq
 80182e6:	782c      	ldrbeq	r4, [r5, #0]
 80182e8:	1c85      	addeq	r5, r0, #2
 80182ea:	e7cc      	b.n	8018286 <_strtoul_l.constprop.0+0x22>
 80182ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80182f0:	f1bc 0f19 	cmp.w	ip, #25
 80182f4:	d801      	bhi.n	80182fa <_strtoul_l.constprop.0+0x96>
 80182f6:	3c37      	subs	r4, #55	; 0x37
 80182f8:	e7e3      	b.n	80182c2 <_strtoul_l.constprop.0+0x5e>
 80182fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80182fe:	f1bc 0f19 	cmp.w	ip, #25
 8018302:	d804      	bhi.n	801830e <_strtoul_l.constprop.0+0xaa>
 8018304:	3c57      	subs	r4, #87	; 0x57
 8018306:	e7dc      	b.n	80182c2 <_strtoul_l.constprop.0+0x5e>
 8018308:	f04f 37ff 	mov.w	r7, #4294967295
 801830c:	e7e6      	b.n	80182dc <_strtoul_l.constprop.0+0x78>
 801830e:	1c7b      	adds	r3, r7, #1
 8018310:	d106      	bne.n	8018320 <_strtoul_l.constprop.0+0xbc>
 8018312:	2322      	movs	r3, #34	; 0x22
 8018314:	f8ce 3000 	str.w	r3, [lr]
 8018318:	4638      	mov	r0, r7
 801831a:	b932      	cbnz	r2, 801832a <_strtoul_l.constprop.0+0xc6>
 801831c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018320:	b106      	cbz	r6, 8018324 <_strtoul_l.constprop.0+0xc0>
 8018322:	4240      	negs	r0, r0
 8018324:	2a00      	cmp	r2, #0
 8018326:	d0f9      	beq.n	801831c <_strtoul_l.constprop.0+0xb8>
 8018328:	b107      	cbz	r7, 801832c <_strtoul_l.constprop.0+0xc8>
 801832a:	1e69      	subs	r1, r5, #1
 801832c:	6011      	str	r1, [r2, #0]
 801832e:	e7f5      	b.n	801831c <_strtoul_l.constprop.0+0xb8>
 8018330:	2430      	movs	r4, #48	; 0x30
 8018332:	2b00      	cmp	r3, #0
 8018334:	d1b5      	bne.n	80182a2 <_strtoul_l.constprop.0+0x3e>
 8018336:	2308      	movs	r3, #8
 8018338:	e7b3      	b.n	80182a2 <_strtoul_l.constprop.0+0x3e>
 801833a:	2c30      	cmp	r4, #48	; 0x30
 801833c:	d0a9      	beq.n	8018292 <_strtoul_l.constprop.0+0x2e>
 801833e:	230a      	movs	r3, #10
 8018340:	e7af      	b.n	80182a2 <_strtoul_l.constprop.0+0x3e>
 8018342:	bf00      	nop
 8018344:	0801861b 	.word	0x0801861b

08018348 <_strtoul_r>:
 8018348:	f7ff bf8c 	b.w	8018264 <_strtoul_l.constprop.0>

0801834c <_malloc_usable_size_r>:
 801834c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018350:	1f18      	subs	r0, r3, #4
 8018352:	2b00      	cmp	r3, #0
 8018354:	bfbc      	itt	lt
 8018356:	580b      	ldrlt	r3, [r1, r0]
 8018358:	18c0      	addlt	r0, r0, r3
 801835a:	4770      	bx	lr

0801835c <_init>:
 801835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835e:	bf00      	nop
 8018360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018362:	bc08      	pop	{r3}
 8018364:	469e      	mov	lr, r3
 8018366:	4770      	bx	lr

08018368 <_fini>:
 8018368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801836a:	bf00      	nop
 801836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801836e:	bc08      	pop	{r3}
 8018370:	469e      	mov	lr, r3
 8018372:	4770      	bx	lr
